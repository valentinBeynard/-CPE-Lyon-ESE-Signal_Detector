/*
 * signal_handler.c
 *
 *  Created on: Jun 6, 2019
 *      Author: BEYNARD
 */

/*
##########################################################################
			INTERRUPT HANDLERS
##########################################################################
*/

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
	display_ready = 1;
}

/*
##########################################################################
			CORE FUNCTIONS
##########################################################################
*/

void crosscorrelation(uint8_t* ref_signal, uint8_t* comp_signal)
{

	int i,j,k;
	int p = M_signal_pts + M_signal_pts -1;

	float comp_f[p],comp_f_2[p], ref_signal_2[p],comp_signal_2[p];
	float somme_ref,somme_comp;
	float norm;
	float test = 0;

	/*Copy signals*/
	/* Pad the smaller sequence with zero*/

	comp_signal_2[0] = (float)((comp_signal[0] - 0x88))/0x88;
	ref_signal_2[0] = (float)((ref_signal[0] - 0x88))/0x88;

	somme_ref=ref_signal_2[0]*ref_signal_2[0];
	somme_comp=comp_signal_2[0]*comp_signal_2[0];

	/* Reverse Signal Array to perform correlation x(n-l) */
	/* and remove offset for each signals */
	for(j=1;j<M_signal_pts;j++){
		comp_signal_2[j] = (float)((comp_signal[j] - 0x88))/0x88;
		somme_comp+=comp_signal_2[j]*comp_signal_2[j];
		ref_signal_2[j] = (float)((ref_signal[j] - 0x88))/0x88;
		somme_ref+=ref_signal_2[j]*ref_signal_2[j];
	}
	for(i= M_signal_pts ;i<p;i++){
		comp_signal_2[i]=0;
	}
	for(i= M_signal_pts;i<p;i++){
		ref_signal_2[i]=0;
	}

  /*folding h(n) to h(-n)*/
	y[0]=0;
	comp_f[0]=comp_signal_2[0];
	/* Reverse Signal Array to perform correlation x(n-l) */
	/* and remove offset for each signals */
	for(j=1;j<p;j++){ /*folding h(n) to h(-n)*/
		comp_f[j]=comp_signal_2[p-j];
	}

	/*Circular convolution*/
	for(i=0;i<p;i++){
		y[0] += ref_signal_2[i] * comp_f[i];
	}


	for(k=1;k<p;k++)
	{
		y[k]=0;

		/*circular shift*/
		for(j=1;j<p;j++){
			comp_f_2[j] = comp_f[j-1];
		}

		comp_f_2[0] = comp_f[p-1];

		/*Circular convolution*/
		for(i=0;i<p;i++)
		{
			comp_f[i] = comp_f_2[i];
			y[k] += ref_signal_2[i] * comp_f_2[i];
		}

	}


		/* Normalize Correlation function */
		norm = (float) (sqrt(somme_ref) * sqrt(somme_comp));
		for(k = 0 ; k < p ; k++)
		{
			y[k] = 0x88 * (y[k]/ norm) + 0x88;
			corr_func[k] = (uint8_t) ( y[k] );
			corr_func[k] = 0xFF * corr_func[k];
		}

		max=corr_func[0];
		l=0;
		for(k=1;k<p;k++)
		{
			if(corr_func[k]>max)
			{
				max=corr_func[k];
				corr_max_abs = k;
				l=k;
			}

		}

}


