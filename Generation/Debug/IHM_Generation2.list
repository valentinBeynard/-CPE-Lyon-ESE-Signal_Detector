
IHM_Generation2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae34  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002010  0800affc  0800affc  0001affc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d00c  0800d00c  00020308  2**0
                  CONTENTS
  4 .ARM          00000008  0800d00c  0800d00c  0001d00c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d014  0800d014  00020308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d014  0800d014  0001d014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d018  0800d018  0001d018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000308  20000000  0800d01c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000718  20000308  0800d324  00020308  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a20  0800d324  00020a20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020308  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022c45  00000000  00000000  00020338  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000040c6  00000000  00000000  00042f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002068  00000000  00000000  00047048  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e60  00000000  00000000  000490b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029eb7  00000000  00000000  0004af10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019509  00000000  00000000  00074dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00107deb  00000000  00000000  0008e2d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001960bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ad8  00000000  00000000  00196138  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000308 	.word	0x20000308
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800afe4 	.word	0x0800afe4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000030c 	.word	0x2000030c
 8000204:	0800afe4 	.word	0x0800afe4

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000512:	20c8      	movs	r0, #200	; 0xc8
 8000514:	f000 fc32 	bl	8000d7c <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000518:	f000 fa7a 	bl	8000a10 <ft5336_I2C_InitializeIfRequired>
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr

0800053a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	b084      	sub	sp, #16
 800053e:	af00      	add	r7, sp, #0
 8000540:	4603      	mov	r3, r0
 8000542:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800054c:	2300      	movs	r3, #0
 800054e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000550:	f000 fa5e 	bl	8000a10 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000554:	2300      	movs	r3, #0
 8000556:	73fb      	strb	r3, [r7, #15]
 8000558:	e010      	b.n	800057c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800055a:	88fb      	ldrh	r3, [r7, #6]
 800055c:	b2db      	uxtb	r3, r3
 800055e:	21a8      	movs	r1, #168	; 0xa8
 8000560:	4618      	mov	r0, r3
 8000562:	f000 fbed 	bl	8000d40 <TS_IO_Read>
 8000566:	4603      	mov	r3, r0
 8000568:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800056a:	7b7b      	ldrb	r3, [r7, #13]
 800056c:	b2db      	uxtb	r3, r3
 800056e:	2b51      	cmp	r3, #81	; 0x51
 8000570:	d101      	bne.n	8000576 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000572:	2301      	movs	r3, #1
 8000574:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000576:	7bfb      	ldrb	r3, [r7, #15]
 8000578:	3301      	adds	r3, #1
 800057a:	73fb      	strb	r3, [r7, #15]
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	2b02      	cmp	r3, #2
 8000580:	d802      	bhi.n	8000588 <ft5336_ReadID+0x4e>
 8000582:	7bbb      	ldrb	r3, [r7, #14]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d0e8      	beq.n	800055a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000588:	7b7b      	ldrb	r3, [r7, #13]
 800058a:	b2db      	uxtb	r3, r3
 800058c:	b29b      	uxth	r3, r3
}
 800058e:	4618      	mov	r0, r3
 8000590:	3710      	adds	r7, #16
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	b082      	sub	sp, #8
 800059a:	af00      	add	r7, sp, #0
 800059c:	4603      	mov	r3, r0
 800059e:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80005a0:	88fb      	ldrh	r3, [r7, #6]
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fa44 	bl	8000a30 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80005a8:	88fb      	ldrh	r3, [r7, #6]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 f932 	bl	8000814 <ft5336_TS_DisableIT>
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	2102      	movs	r1, #2
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 fbb7 	bl	8000d40 <TS_IO_Read>
 80005d2:	4603      	mov	r3, r0
 80005d4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	f003 030f 	and.w	r3, r3, #15
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	2b05      	cmp	r3, #5
 80005e8:	d901      	bls.n	80005ee <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4b05      	ldr	r3, [pc, #20]	; (8000608 <ft5336_TS_DetectTouch+0x50>)
 80005f4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80005f6:	4b04      	ldr	r3, [pc, #16]	; (8000608 <ft5336_TS_DetectTouch+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	b2db      	uxtb	r3, r3
}
 8000600:	4618      	mov	r0, r3
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000324 	.word	0x20000324

0800060c <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
 8000618:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800062e:	4b6d      	ldr	r3, [pc, #436]	; (80007e4 <ft5336_TS_GetXY+0x1d8>)
 8000630:	789a      	ldrb	r2, [r3, #2]
 8000632:	4b6c      	ldr	r3, [pc, #432]	; (80007e4 <ft5336_TS_GetXY+0x1d8>)
 8000634:	785b      	ldrb	r3, [r3, #1]
 8000636:	429a      	cmp	r2, r3
 8000638:	f080 80cf 	bcs.w	80007da <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 800063c:	4b69      	ldr	r3, [pc, #420]	; (80007e4 <ft5336_TS_GetXY+0x1d8>)
 800063e:	789b      	ldrb	r3, [r3, #2]
 8000640:	2b09      	cmp	r3, #9
 8000642:	d871      	bhi.n	8000728 <ft5336_TS_GetXY+0x11c>
 8000644:	a201      	add	r2, pc, #4	; (adr r2, 800064c <ft5336_TS_GetXY+0x40>)
 8000646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064a:	bf00      	nop
 800064c:	08000675 	.word	0x08000675
 8000650:	08000687 	.word	0x08000687
 8000654:	08000699 	.word	0x08000699
 8000658:	080006ab 	.word	0x080006ab
 800065c:	080006bd 	.word	0x080006bd
 8000660:	080006cf 	.word	0x080006cf
 8000664:	080006e1 	.word	0x080006e1
 8000668:	080006f3 	.word	0x080006f3
 800066c:	08000705 	.word	0x08000705
 8000670:	08000717 	.word	0x08000717
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000674:	2304      	movs	r3, #4
 8000676:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000678:	2303      	movs	r3, #3
 800067a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 800067c:	2306      	movs	r3, #6
 800067e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000680:	2305      	movs	r3, #5
 8000682:	753b      	strb	r3, [r7, #20]
      break;
 8000684:	e051      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000686:	230a      	movs	r3, #10
 8000688:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800068a:	2309      	movs	r3, #9
 800068c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800068e:	230c      	movs	r3, #12
 8000690:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8000692:	230b      	movs	r3, #11
 8000694:	753b      	strb	r3, [r7, #20]
      break;
 8000696:	e048      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000698:	2310      	movs	r3, #16
 800069a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 800069c:	230f      	movs	r3, #15
 800069e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80006a0:	2312      	movs	r3, #18
 80006a2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80006a4:	2311      	movs	r3, #17
 80006a6:	753b      	strb	r3, [r7, #20]
      break;
 80006a8:	e03f      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80006aa:	2316      	movs	r3, #22
 80006ac:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80006ae:	2315      	movs	r3, #21
 80006b0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80006b2:	2318      	movs	r3, #24
 80006b4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80006b6:	2317      	movs	r3, #23
 80006b8:	753b      	strb	r3, [r7, #20]
      break;
 80006ba:	e036      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80006bc:	231c      	movs	r3, #28
 80006be:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80006c0:	231b      	movs	r3, #27
 80006c2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80006c4:	231e      	movs	r3, #30
 80006c6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80006c8:	231d      	movs	r3, #29
 80006ca:	753b      	strb	r3, [r7, #20]
      break;
 80006cc:	e02d      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80006ce:	2322      	movs	r3, #34	; 0x22
 80006d0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80006d2:	2321      	movs	r3, #33	; 0x21
 80006d4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80006d6:	2324      	movs	r3, #36	; 0x24
 80006d8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80006da:	2323      	movs	r3, #35	; 0x23
 80006dc:	753b      	strb	r3, [r7, #20]
      break;
 80006de:	e024      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80006e0:	2328      	movs	r3, #40	; 0x28
 80006e2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80006e4:	2327      	movs	r3, #39	; 0x27
 80006e6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80006e8:	232a      	movs	r3, #42	; 0x2a
 80006ea:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80006ec:	2329      	movs	r3, #41	; 0x29
 80006ee:	753b      	strb	r3, [r7, #20]
      break;
 80006f0:	e01b      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80006f2:	232e      	movs	r3, #46	; 0x2e
 80006f4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80006f6:	232d      	movs	r3, #45	; 0x2d
 80006f8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80006fa:	2330      	movs	r3, #48	; 0x30
 80006fc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80006fe:	232f      	movs	r3, #47	; 0x2f
 8000700:	753b      	strb	r3, [r7, #20]
      break;
 8000702:	e012      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000704:	2334      	movs	r3, #52	; 0x34
 8000706:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000708:	2333      	movs	r3, #51	; 0x33
 800070a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 800070c:	2336      	movs	r3, #54	; 0x36
 800070e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000710:	2335      	movs	r3, #53	; 0x35
 8000712:	753b      	strb	r3, [r7, #20]
      break;
 8000714:	e009      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000716:	233a      	movs	r3, #58	; 0x3a
 8000718:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800071a:	2339      	movs	r3, #57	; 0x39
 800071c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 800071e:	233c      	movs	r3, #60	; 0x3c
 8000720:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000722:	233b      	movs	r3, #59	; 0x3b
 8000724:	753b      	strb	r3, [r7, #20]
      break;
 8000726:	e000      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000728:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800072a:	89fb      	ldrh	r3, [r7, #14]
 800072c:	b2db      	uxtb	r3, r3
 800072e:	7dfa      	ldrb	r2, [r7, #23]
 8000730:	4611      	mov	r1, r2
 8000732:	4618      	mov	r0, r3
 8000734:	f000 fb04 	bl	8000d40 <TS_IO_Read>
 8000738:	4603      	mov	r3, r0
 800073a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800073c:	7cfb      	ldrb	r3, [r7, #19]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	b29a      	uxth	r2, r3
 8000742:	4b29      	ldr	r3, [pc, #164]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 8000744:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000746:	89fb      	ldrh	r3, [r7, #14]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	7dba      	ldrb	r2, [r7, #22]
 800074c:	4611      	mov	r1, r2
 800074e:	4618      	mov	r0, r3
 8000750:	f000 faf6 	bl	8000d40 <TS_IO_Read>
 8000754:	4603      	mov	r3, r0
 8000756:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000758:	7cfb      	ldrb	r3, [r7, #19]
 800075a:	b2db      	uxtb	r3, r3
 800075c:	021b      	lsls	r3, r3, #8
 800075e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000762:	b21a      	sxth	r2, r3
 8000764:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	b21b      	sxth	r3, r3
 800076a:	4313      	orrs	r3, r2
 800076c:	b21b      	sxth	r3, r3
 800076e:	b29a      	uxth	r2, r3
 8000770:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 8000772:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000774:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 8000776:	881a      	ldrh	r2, [r3, #0]
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800077c:	89fb      	ldrh	r3, [r7, #14]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	7d7a      	ldrb	r2, [r7, #21]
 8000782:	4611      	mov	r1, r2
 8000784:	4618      	mov	r0, r3
 8000786:	f000 fadb 	bl	8000d40 <TS_IO_Read>
 800078a:	4603      	mov	r3, r0
 800078c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800078e:	7cfb      	ldrb	r3, [r7, #19]
 8000790:	b2db      	uxtb	r3, r3
 8000792:	b29a      	uxth	r2, r3
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 8000796:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000798:	89fb      	ldrh	r3, [r7, #14]
 800079a:	b2db      	uxtb	r3, r3
 800079c:	7d3a      	ldrb	r2, [r7, #20]
 800079e:	4611      	mov	r1, r2
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 facd 	bl	8000d40 <TS_IO_Read>
 80007a6:	4603      	mov	r3, r0
 80007a8:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80007aa:	7cfb      	ldrb	r3, [r7, #19]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	021b      	lsls	r3, r3, #8
 80007b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80007b4:	b21a      	sxth	r2, r3
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b21b      	sxth	r3, r3
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 80007c4:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 80007c8:	881a      	ldrh	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80007ce:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <ft5336_TS_GetXY+0x1d8>)
 80007d0:	789b      	ldrb	r3, [r3, #2]
 80007d2:	3301      	adds	r3, #1
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <ft5336_TS_GetXY+0x1d8>)
 80007d8:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000324 	.word	0x20000324
 80007e8:	20000328 	.word	0x20000328

080007ec <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80007fa:	2301      	movs	r3, #1
 80007fc:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80007fe:	88fb      	ldrh	r3, [r7, #6]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	7bfa      	ldrb	r2, [r7, #15]
 8000804:	21a4      	movs	r1, #164	; 0xa4
 8000806:	4618      	mov	r0, r3
 8000808:	f000 fa80 	bl	8000d0c <TS_IO_Write>
}
 800080c:	bf00      	nop
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000822:	2300      	movs	r3, #0
 8000824:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	7bfa      	ldrb	r2, [r7, #15]
 800082c:	21a4      	movs	r1, #164	; 0xa4
 800082e:	4618      	mov	r0, r3
 8000830:	f000 fa6c 	bl	8000d0c <TS_IO_Write>
}
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000846:	2300      	movs	r3, #0
}
 8000848:	4618      	mov	r0, r3
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b084      	sub	sp, #16
 800086e:	af00      	add	r7, sp, #0
 8000870:	4603      	mov	r3, r0
 8000872:	6039      	str	r1, [r7, #0]
 8000874:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800087a:	88fb      	ldrh	r3, [r7, #6]
 800087c:	b2db      	uxtb	r3, r3
 800087e:	2101      	movs	r1, #1
 8000880:	4618      	mov	r0, r3
 8000882:	f000 fa5d 	bl	8000d40 <TS_IO_Read>
 8000886:	4603      	mov	r3, r0
 8000888:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	461a      	mov	r2, r3
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	601a      	str	r2, [r3, #0]
}
 8000894:	bf00      	nop
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60b9      	str	r1, [r7, #8]
 80008a4:	607a      	str	r2, [r7, #4]
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	4603      	mov	r3, r0
 80008aa:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80008bc:	4b4d      	ldr	r3, [pc, #308]	; (80009f4 <ft5336_TS_GetTouchInfo+0x158>)
 80008be:	785b      	ldrb	r3, [r3, #1]
 80008c0:	461a      	mov	r2, r3
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	4293      	cmp	r3, r2
 80008c6:	f080 8090 	bcs.w	80009ea <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	2b09      	cmp	r3, #9
 80008ce:	d85d      	bhi.n	800098c <ft5336_TS_GetTouchInfo+0xf0>
 80008d0:	a201      	add	r2, pc, #4	; (adr r2, 80008d8 <ft5336_TS_GetTouchInfo+0x3c>)
 80008d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d6:	bf00      	nop
 80008d8:	08000901 	.word	0x08000901
 80008dc:	0800090f 	.word	0x0800090f
 80008e0:	0800091d 	.word	0x0800091d
 80008e4:	0800092b 	.word	0x0800092b
 80008e8:	08000939 	.word	0x08000939
 80008ec:	08000947 	.word	0x08000947
 80008f0:	08000955 	.word	0x08000955
 80008f4:	08000963 	.word	0x08000963
 80008f8:	08000971 	.word	0x08000971
 80008fc:	0800097f 	.word	0x0800097f
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8000900:	2303      	movs	r3, #3
 8000902:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8000904:	2307      	movs	r3, #7
 8000906:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8000908:	2308      	movs	r3, #8
 800090a:	757b      	strb	r3, [r7, #21]
      break;
 800090c:	e03f      	b.n	800098e <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 800090e:	2309      	movs	r3, #9
 8000910:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8000912:	230d      	movs	r3, #13
 8000914:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8000916:	230e      	movs	r3, #14
 8000918:	757b      	strb	r3, [r7, #21]
      break;
 800091a:	e038      	b.n	800098e <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 800091c:	230f      	movs	r3, #15
 800091e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8000920:	2313      	movs	r3, #19
 8000922:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8000924:	2314      	movs	r3, #20
 8000926:	757b      	strb	r3, [r7, #21]
      break;
 8000928:	e031      	b.n	800098e <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 800092a:	2315      	movs	r3, #21
 800092c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 800092e:	2319      	movs	r3, #25
 8000930:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8000932:	231a      	movs	r3, #26
 8000934:	757b      	strb	r3, [r7, #21]
      break;
 8000936:	e02a      	b.n	800098e <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8000938:	231b      	movs	r3, #27
 800093a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 800093c:	231f      	movs	r3, #31
 800093e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8000940:	2320      	movs	r3, #32
 8000942:	757b      	strb	r3, [r7, #21]
      break;
 8000944:	e023      	b.n	800098e <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8000946:	2321      	movs	r3, #33	; 0x21
 8000948:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 800094a:	2325      	movs	r3, #37	; 0x25
 800094c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 800094e:	2326      	movs	r3, #38	; 0x26
 8000950:	757b      	strb	r3, [r7, #21]
      break;
 8000952:	e01c      	b.n	800098e <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8000954:	2327      	movs	r3, #39	; 0x27
 8000956:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8000958:	232b      	movs	r3, #43	; 0x2b
 800095a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 800095c:	232c      	movs	r3, #44	; 0x2c
 800095e:	757b      	strb	r3, [r7, #21]
      break;
 8000960:	e015      	b.n	800098e <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000962:	232d      	movs	r3, #45	; 0x2d
 8000964:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8000966:	2331      	movs	r3, #49	; 0x31
 8000968:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 800096a:	2332      	movs	r3, #50	; 0x32
 800096c:	757b      	strb	r3, [r7, #21]
      break;
 800096e:	e00e      	b.n	800098e <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8000970:	2333      	movs	r3, #51	; 0x33
 8000972:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8000974:	2337      	movs	r3, #55	; 0x37
 8000976:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8000978:	2338      	movs	r3, #56	; 0x38
 800097a:	757b      	strb	r3, [r7, #21]
      break;
 800097c:	e007      	b.n	800098e <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 800097e:	2339      	movs	r3, #57	; 0x39
 8000980:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8000982:	233d      	movs	r3, #61	; 0x3d
 8000984:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8000986:	233e      	movs	r3, #62	; 0x3e
 8000988:	757b      	strb	r3, [r7, #21]
      break;
 800098a:	e000      	b.n	800098e <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 800098c:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800098e:	89fb      	ldrh	r3, [r7, #14]
 8000990:	b2db      	uxtb	r3, r3
 8000992:	7dfa      	ldrb	r2, [r7, #23]
 8000994:	4611      	mov	r1, r2
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f9d2 	bl	8000d40 <TS_IO_Read>
 800099c:	4603      	mov	r3, r0
 800099e:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80009a0:	7d3b      	ldrb	r3, [r7, #20]
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	119b      	asrs	r3, r3, #6
 80009a6:	f003 0203 	and.w	r2, r3, #3
 80009aa:	6a3b      	ldr	r3, [r7, #32]
 80009ac:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 80009ae:	89fb      	ldrh	r3, [r7, #14]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	7dba      	ldrb	r2, [r7, #22]
 80009b4:	4611      	mov	r1, r2
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 f9c2 	bl	8000d40 <TS_IO_Read>
 80009bc:	4603      	mov	r3, r0
 80009be:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80009c0:	7d3b      	ldrb	r3, [r7, #20]
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	461a      	mov	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80009ca:	89fb      	ldrh	r3, [r7, #14]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	7d7a      	ldrb	r2, [r7, #21]
 80009d0:	4611      	mov	r1, r2
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f9b4 	bl	8000d40 <TS_IO_Read>
 80009d8:	4603      	mov	r3, r0
 80009da:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 80009dc:	7d3b      	ldrb	r3, [r7, #20]
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	111b      	asrs	r3, r3, #4
 80009e2:	f003 0204 	and.w	r2, r3, #4
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 80009ea:	bf00      	nop
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000324 	.word	0x20000324

080009f8 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <ft5336_Get_I2C_InitializedStatus+0x14>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000324 	.word	0x20000324

08000a10 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000a14:	f7ff fff0 	bl	80009f8 <ft5336_Get_I2C_InitializedStatus>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d104      	bne.n	8000a28 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000a1e:	f000 f96b 	bl	8000cf8 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000a22:	4b02      	ldr	r3, [pc, #8]	; (8000a2c <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	701a      	strb	r2, [r3, #0]
  }
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000324 	.word	0x20000324

08000a30 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000a3e:	68fb      	ldr	r3, [r7, #12]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	; 0x30
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a51      	ldr	r2, [pc, #324]	; (8000b9c <I2Cx_MspInit+0x150>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d14d      	bne.n	8000af8 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000a5c:	4b50      	ldr	r3, [pc, #320]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a60:	4a4f      	ldr	r2, [pc, #316]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a66:	6313      	str	r3, [r2, #48]	; 0x30
 8000a68:	4b4d      	ldr	r3, [pc, #308]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a70:	61bb      	str	r3, [r7, #24]
 8000a72:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8000a74:	2380      	movs	r3, #128	; 0x80
 8000a76:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000a78:	2312      	movs	r3, #18
 8000a7a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000a80:	2302      	movs	r3, #2
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8000a84:	2304      	movs	r3, #4
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4845      	ldr	r0, [pc, #276]	; (8000ba4 <I2Cx_MspInit+0x158>)
 8000a90:	f002 fb42 	bl	8003118 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000a94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4840      	ldr	r0, [pc, #256]	; (8000ba4 <I2Cx_MspInit+0x158>)
 8000aa2:	f002 fb39 	bl	8003118 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000aa6:	4b3e      	ldr	r3, [pc, #248]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a3d      	ldr	r2, [pc, #244]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000aac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab2:	4b3b      	ldr	r3, [pc, #236]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8000abe:	4b38      	ldr	r3, [pc, #224]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000ac0:	6a1b      	ldr	r3, [r3, #32]
 8000ac2:	4a37      	ldr	r2, [pc, #220]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000ac4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ac8:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8000aca:	4b35      	ldr	r3, [pc, #212]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000acc:	6a1b      	ldr	r3, [r3, #32]
 8000ace:	4a34      	ldr	r2, [pc, #208]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000ad0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000ad4:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	210f      	movs	r1, #15
 8000ada:	2048      	movs	r0, #72	; 0x48
 8000adc:	f001 fd1b 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8000ae0:	2048      	movs	r0, #72	; 0x48
 8000ae2:	f001 fd34 	bl	800254e <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	210f      	movs	r1, #15
 8000aea:	2049      	movs	r0, #73	; 0x49
 8000aec:	f001 fd13 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8000af0:	2049      	movs	r0, #73	; 0x49
 8000af2:	f001 fd2c 	bl	800254e <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8000af6:	e04d      	b.n	8000b94 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000af8:	4b29      	ldr	r3, [pc, #164]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afc:	4a28      	ldr	r2, [pc, #160]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000afe:	f043 0302 	orr.w	r3, r3, #2
 8000b02:	6313      	str	r3, [r2, #48]	; 0x30
 8000b04:	4b26      	ldr	r3, [pc, #152]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	f003 0302 	and.w	r3, r3, #2
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8000b10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b14:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000b16:	2312      	movs	r3, #18
 8000b18:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000b22:	2304      	movs	r3, #4
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	481e      	ldr	r0, [pc, #120]	; (8000ba8 <I2Cx_MspInit+0x15c>)
 8000b2e:	f002 faf3 	bl	8003118 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000b32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	481a      	ldr	r0, [pc, #104]	; (8000ba8 <I2Cx_MspInit+0x15c>)
 8000b40:	f002 faea 	bl	8003118 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000b44:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	4a15      	ldr	r2, [pc, #84]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000b4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8000b5c:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000b5e:	6a1b      	ldr	r3, [r3, #32]
 8000b60:	4a0f      	ldr	r2, [pc, #60]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000b62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b66:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8000b68:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000b6a:	6a1b      	ldr	r3, [r3, #32]
 8000b6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000b6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000b72:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	210f      	movs	r1, #15
 8000b78:	201f      	movs	r0, #31
 8000b7a:	f001 fccc 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8000b7e:	201f      	movs	r0, #31
 8000b80:	f001 fce5 	bl	800254e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8000b84:	2200      	movs	r2, #0
 8000b86:	210f      	movs	r1, #15
 8000b88:	2020      	movs	r0, #32
 8000b8a:	f001 fcc4 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000b8e:	2020      	movs	r0, #32
 8000b90:	f001 fcdd 	bl	800254e <HAL_NVIC_EnableIRQ>
}
 8000b94:	bf00      	nop
 8000b96:	3730      	adds	r7, #48	; 0x30
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	2000032c 	.word	0x2000032c
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40021c00 	.word	0x40021c00
 8000ba8:	40020400 	.word	0x40020400

08000bac <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f002 ff75 	bl	8003aa4 <HAL_I2C_GetState>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d125      	bne.n	8000c0c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a14      	ldr	r2, [pc, #80]	; (8000c14 <I2Cx_Init+0x68>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d103      	bne.n	8000bd0 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a13      	ldr	r2, [pc, #76]	; (8000c18 <I2Cx_Init+0x6c>)
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	e002      	b.n	8000bd6 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a12      	ldr	r2, [pc, #72]	; (8000c1c <I2Cx_Init+0x70>)
 8000bd4:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a11      	ldr	r2, [pc, #68]	; (8000c20 <I2Cx_Init+0x74>)
 8000bda:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2201      	movs	r2, #1
 8000be6:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f7ff ff23 	bl	8000a4c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f002 fc4a 	bl	80034a0 <HAL_I2C_Init>
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	2000032c 	.word	0x2000032c
 8000c18:	40005c00 	.word	0x40005c00
 8000c1c:	40005400 	.word	0x40005400
 8000c20:	40912732 	.word	0x40912732

08000c24 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af04      	add	r7, sp, #16
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	4608      	mov	r0, r1
 8000c2e:	4611      	mov	r1, r2
 8000c30:	461a      	mov	r2, r3
 8000c32:	4603      	mov	r3, r0
 8000c34:	72fb      	strb	r3, [r7, #11]
 8000c36:	460b      	mov	r3, r1
 8000c38:	813b      	strh	r3, [r7, #8]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000c42:	7afb      	ldrb	r3, [r7, #11]
 8000c44:	b299      	uxth	r1, r3
 8000c46:	88f8      	ldrh	r0, [r7, #6]
 8000c48:	893a      	ldrh	r2, [r7, #8]
 8000c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4e:	9302      	str	r3, [sp, #8]
 8000c50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c52:	9301      	str	r3, [sp, #4]
 8000c54:	6a3b      	ldr	r3, [r7, #32]
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	4603      	mov	r3, r0
 8000c5a:	68f8      	ldr	r0, [r7, #12]
 8000c5c:	f002 fe08 	bl	8003870 <HAL_I2C_Mem_Read>
 8000c60:	4603      	mov	r3, r0
 8000c62:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000c64:	7dfb      	ldrb	r3, [r7, #23]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d004      	beq.n	8000c74 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8000c6a:	7afb      	ldrb	r3, [r7, #11]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	68f8      	ldr	r0, [r7, #12]
 8000c70:	f000 f832 	bl	8000cd8 <I2Cx_Error>
  }
  return status;    
 8000c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b08a      	sub	sp, #40	; 0x28
 8000c82:	af04      	add	r7, sp, #16
 8000c84:	60f8      	str	r0, [r7, #12]
 8000c86:	4608      	mov	r0, r1
 8000c88:	4611      	mov	r1, r2
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	72fb      	strb	r3, [r7, #11]
 8000c90:	460b      	mov	r3, r1
 8000c92:	813b      	strh	r3, [r7, #8]
 8000c94:	4613      	mov	r3, r2
 8000c96:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000c9c:	7afb      	ldrb	r3, [r7, #11]
 8000c9e:	b299      	uxth	r1, r3
 8000ca0:	88f8      	ldrh	r0, [r7, #6]
 8000ca2:	893a      	ldrh	r2, [r7, #8]
 8000ca4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca8:	9302      	str	r3, [sp, #8]
 8000caa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000cac:	9301      	str	r3, [sp, #4]
 8000cae:	6a3b      	ldr	r3, [r7, #32]
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	68f8      	ldr	r0, [r7, #12]
 8000cb6:	f002 fcc7 	bl	8003648 <HAL_I2C_Mem_Write>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000cbe:	7dfb      	ldrb	r3, [r7, #23]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d004      	beq.n	8000cce <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8000cc4:	7afb      	ldrb	r3, [r7, #11]
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	68f8      	ldr	r0, [r7, #12]
 8000cca:	f000 f805 	bl	8000cd8 <I2Cx_Error>
  }
  return status;
 8000cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f002 fc6b 	bl	80035c0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff ff5e 	bl	8000bac <I2Cx_Init>
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <TS_IO_Init+0x10>)
 8000cfe:	f7ff ff55 	bl	8000bac <I2Cx_Init>
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	2000032c 	.word	0x2000032c

08000d0c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af02      	add	r7, sp, #8
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
 8000d16:	460b      	mov	r3, r1
 8000d18:	71bb      	strb	r3, [r7, #6]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8000d1e:	79bb      	ldrb	r3, [r7, #6]
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	79f9      	ldrb	r1, [r7, #7]
 8000d24:	2301      	movs	r3, #1
 8000d26:	9301      	str	r3, [sp, #4]
 8000d28:	1d7b      	adds	r3, r7, #5
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	4803      	ldr	r0, [pc, #12]	; (8000d3c <TS_IO_Write+0x30>)
 8000d30:	f7ff ffa5 	bl	8000c7e <I2Cx_WriteMultiple>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	2000032c 	.word	0x2000032c

08000d40 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af02      	add	r7, sp, #8
 8000d46:	4603      	mov	r3, r0
 8000d48:	460a      	mov	r2, r1
 8000d4a:	71fb      	strb	r3, [r7, #7]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8000d54:	79bb      	ldrb	r3, [r7, #6]
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	79f9      	ldrb	r1, [r7, #7]
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	9301      	str	r3, [sp, #4]
 8000d5e:	f107 030f 	add.w	r3, r7, #15
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	2301      	movs	r3, #1
 8000d66:	4804      	ldr	r0, [pc, #16]	; (8000d78 <TS_IO_Read+0x38>)
 8000d68:	f7ff ff5c 	bl	8000c24 <I2Cx_ReadMultiple>

  return read_value;
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	2000032c 	.word	0x2000032c

08000d7c <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f001 fac9 	bl	800231c <HAL_Delay>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
	...

08000d94 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8000d98:	4b31      	ldr	r3, [pc, #196]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000d9a:	2228      	movs	r2, #40	; 0x28
 8000d9c:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8000d9e:	4b30      	ldr	r3, [pc, #192]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000da0:	2209      	movs	r2, #9
 8000da2:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8000da4:	4b2e      	ldr	r3, [pc, #184]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000da6:	2235      	movs	r2, #53	; 0x35
 8000da8:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8000daa:	4b2d      	ldr	r3, [pc, #180]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000dac:	220b      	movs	r2, #11
 8000dae:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8000db0:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000db2:	f240 121b 	movw	r2, #283	; 0x11b
 8000db6:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8000db8:	4b29      	ldr	r3, [pc, #164]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000dba:	f240 2215 	movw	r2, #533	; 0x215
 8000dbe:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8000dc0:	4b27      	ldr	r3, [pc, #156]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000dc2:	f240 121d 	movw	r2, #285	; 0x11d
 8000dc6:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8000dc8:	4b25      	ldr	r3, [pc, #148]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000dca:	f240 2235 	movw	r2, #565	; 0x235
 8000dce:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4823      	ldr	r0, [pc, #140]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000dd4:	f000 fd0e 	bl	80017f4 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8000dd8:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000dda:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000dde:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000de2:	f44f 7288 	mov.w	r2, #272	; 0x110
 8000de6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8000de8:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000e00:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8000e0c:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000e12:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000e1a:	4a12      	ldr	r2, [pc, #72]	; (8000e64 <BSP_LCD_Init+0xd0>)
 8000e1c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8000e1e:	4810      	ldr	r0, [pc, #64]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000e20:	f003 fa3a 	bl	8004298 <HAL_LTDC_GetState>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d103      	bne.n	8000e32 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	480c      	ldr	r0, [pc, #48]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000e2e:	f000 fc07 	bl	8001640 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8000e32:	480b      	ldr	r0, [pc, #44]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000e34:	f003 f860 	bl	8003ef8 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e3e:	480a      	ldr	r0, [pc, #40]	; (8000e68 <BSP_LCD_Init+0xd4>)
 8000e40:	f002 fb14 	bl	800346c <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	2108      	movs	r1, #8
 8000e48:	4808      	ldr	r0, [pc, #32]	; (8000e6c <BSP_LCD_Init+0xd8>)
 8000e4a:	f002 fb0f 	bl	800346c <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8000e4e:	f000 fdf1 	bl	8001a34 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8000e52:	4807      	ldr	r0, [pc, #28]	; (8000e70 <BSP_LCD_Init+0xdc>)
 8000e54:	f000 f8d8 	bl	8001008 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000548 	.word	0x20000548
 8000e64:	40016800 	.word	0x40016800
 8000e68:	40022000 	.word	0x40022000
 8000e6c:	40022800 	.word	0x40022800
 8000e70:	20000028 	.word	0x20000028

08000e74 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <BSP_LCD_GetXSize+0x20>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <BSP_LCD_GetXSize+0x24>)
 8000e7e:	2134      	movs	r1, #52	; 0x34
 8000e80:	fb01 f303 	mul.w	r3, r1, r3
 8000e84:	4413      	add	r3, r2
 8000e86:	3360      	adds	r3, #96	; 0x60
 8000e88:	681b      	ldr	r3, [r3, #0]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	200003b8 	.word	0x200003b8
 8000e98:	20000548 	.word	0x20000548

08000e9c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <BSP_LCD_GetYSize+0x20>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <BSP_LCD_GetYSize+0x24>)
 8000ea6:	2134      	movs	r1, #52	; 0x34
 8000ea8:	fb01 f303 	mul.w	r3, r1, r3
 8000eac:	4413      	add	r3, r2
 8000eae:	3364      	adds	r3, #100	; 0x64
 8000eb0:	681b      	ldr	r3, [r3, #0]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	200003b8 	.word	0x200003b8
 8000ec0:	20000548 	.word	0x20000548

08000ec4 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b090      	sub	sp, #64	; 0x40
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8000ed4:	f7ff ffce 	bl	8000e74 <BSP_LCD_GetXSize>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000ee0:	f7ff ffdc 	bl	8000e9c <BSP_LCD_GetYSize>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8000ef0:	23ff      	movs	r3, #255	; 0xff
 8000ef2:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000f0a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000f10:	2307      	movs	r3, #7
 8000f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8000f14:	f7ff ffae 	bl	8000e74 <BSP_LCD_GetXSize>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8000f1c:	f7ff ffbe 	bl	8000e9c <BSP_LCD_GetYSize>
 8000f20:	4603      	mov	r3, r0
 8000f22:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8000f24:	88fa      	ldrh	r2, [r7, #6]
 8000f26:	f107 030c 	add.w	r3, r7, #12
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4812      	ldr	r0, [pc, #72]	; (8000f78 <BSP_LCD_LayerDefaultInit+0xb4>)
 8000f2e:	f003 f975 	bl	800421c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000f32:	88fa      	ldrh	r2, [r7, #6]
 8000f34:	4911      	ldr	r1, [pc, #68]	; (8000f7c <BSP_LCD_LayerDefaultInit+0xb8>)
 8000f36:	4613      	mov	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4413      	add	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	440b      	add	r3, r1
 8000f40:	3304      	adds	r3, #4
 8000f42:	f04f 32ff 	mov.w	r2, #4294967295
 8000f46:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000f48:	88fa      	ldrh	r2, [r7, #6]
 8000f4a:	490c      	ldr	r1, [pc, #48]	; (8000f7c <BSP_LCD_LayerDefaultInit+0xb8>)
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	4413      	add	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	440b      	add	r3, r1
 8000f56:	3308      	adds	r3, #8
 8000f58:	4a09      	ldr	r2, [pc, #36]	; (8000f80 <BSP_LCD_LayerDefaultInit+0xbc>)
 8000f5a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8000f5c:	88fa      	ldrh	r2, [r7, #6]
 8000f5e:	4907      	ldr	r1, [pc, #28]	; (8000f7c <BSP_LCD_LayerDefaultInit+0xb8>)
 8000f60:	4613      	mov	r3, r2
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	4413      	add	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	440b      	add	r3, r1
 8000f6a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000f6e:	601a      	str	r2, [r3, #0]
}
 8000f70:	bf00      	nop
 8000f72:	3740      	adds	r7, #64	; 0x40
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000548 	.word	0x20000548
 8000f7c:	200003bc 	.word	0x200003bc
 8000f80:	20000028 	.word	0x20000028

08000f84 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8000f8c:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <BSP_LCD_SelectLayer+0x1c>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6013      	str	r3, [r2, #0]
} 
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	200003b8 	.word	0x200003b8

08000fa4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8000fac:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <BSP_LCD_SetTextColor+0x28>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4907      	ldr	r1, [pc, #28]	; (8000fd0 <BSP_LCD_SetTextColor+0x2c>)
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	440b      	add	r3, r1
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	601a      	str	r2, [r3, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	200003b8 	.word	0x200003b8
 8000fd0:	200003bc 	.word	0x200003bc

08000fd4 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <BSP_LCD_SetBackColor+0x2c>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4908      	ldr	r1, [pc, #32]	; (8001004 <BSP_LCD_SetBackColor+0x30>)
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4413      	add	r3, r2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	440b      	add	r3, r1
 8000fec:	3304      	adds	r3, #4
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	601a      	str	r2, [r3, #0]
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	200003b8 	.word	0x200003b8
 8001004:	200003bc 	.word	0x200003bc

08001008 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <BSP_LCD_SetFont+0x2c>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4908      	ldr	r1, [pc, #32]	; (8001038 <BSP_LCD_SetFont+0x30>)
 8001016:	4613      	mov	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4413      	add	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	440b      	add	r3, r1
 8001020:	3308      	adds	r3, #8
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	601a      	str	r2, [r3, #0]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	200003b8 	.word	0x200003b8
 8001038:	200003bc 	.word	0x200003bc

0800103c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800103c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800103e:	b085      	sub	sp, #20
 8001040:	af02      	add	r7, sp, #8
 8001042:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <BSP_LCD_Clear+0x48>)
 8001046:	681c      	ldr	r4, [r3, #0]
 8001048:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <BSP_LCD_Clear+0x48>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <BSP_LCD_Clear+0x4c>)
 800104e:	2134      	movs	r1, #52	; 0x34
 8001050:	fb01 f303 	mul.w	r3, r1, r3
 8001054:	4413      	add	r3, r2
 8001056:	335c      	adds	r3, #92	; 0x5c
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	461d      	mov	r5, r3
 800105c:	f7ff ff0a 	bl	8000e74 <BSP_LCD_GetXSize>
 8001060:	4606      	mov	r6, r0
 8001062:	f7ff ff1b 	bl	8000e9c <BSP_LCD_GetYSize>
 8001066:	4602      	mov	r2, r0
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	2300      	movs	r3, #0
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	4613      	mov	r3, r2
 8001072:	4632      	mov	r2, r6
 8001074:	4629      	mov	r1, r5
 8001076:	4620      	mov	r0, r4
 8001078:	f000 fc90 	bl	800199c <LL_FillBuffer>
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001084:	200003b8 	.word	0x200003b8
 8001088:	20000548 	.word	0x20000548

0800108c <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	80fb      	strh	r3, [r7, #6]
 8001096:	460b      	mov	r3, r1
 8001098:	80bb      	strh	r3, [r7, #4]
 800109a:	4613      	mov	r3, r2
 800109c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800109e:	4b1b      	ldr	r3, [pc, #108]	; (800110c <BSP_LCD_DisplayChar+0x80>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	491b      	ldr	r1, [pc, #108]	; (8001110 <BSP_LCD_DisplayChar+0x84>)
 80010a4:	4613      	mov	r3, r2
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	4413      	add	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	440b      	add	r3, r1
 80010ae:	3308      	adds	r3, #8
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	6819      	ldr	r1, [r3, #0]
 80010b4:	78fb      	ldrb	r3, [r7, #3]
 80010b6:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <BSP_LCD_DisplayChar+0x80>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4c14      	ldr	r4, [pc, #80]	; (8001110 <BSP_LCD_DisplayChar+0x84>)
 80010c0:	4613      	mov	r3, r2
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4413      	add	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4423      	add	r3, r4
 80010ca:	3308      	adds	r3, #8
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80010d0:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80010d4:	4b0d      	ldr	r3, [pc, #52]	; (800110c <BSP_LCD_DisplayChar+0x80>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4c0d      	ldr	r4, [pc, #52]	; (8001110 <BSP_LCD_DisplayChar+0x84>)
 80010da:	4613      	mov	r3, r2
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	4413      	add	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4423      	add	r3, r4
 80010e4:	3308      	adds	r3, #8
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	889b      	ldrh	r3, [r3, #4]
 80010ea:	3307      	adds	r3, #7
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	da00      	bge.n	80010f2 <BSP_LCD_DisplayChar+0x66>
 80010f0:	3307      	adds	r3, #7
 80010f2:	10db      	asrs	r3, r3, #3
 80010f4:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80010f8:	18ca      	adds	r2, r1, r3
 80010fa:	88b9      	ldrh	r1, [r7, #4]
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 fb94 	bl	800182c <DrawChar>
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	bd90      	pop	{r4, r7, pc}
 800110c:	200003b8 	.word	0x200003b8
 8001110:	200003bc 	.word	0x200003bc

08001114 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001114:	b5b0      	push	{r4, r5, r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
 800111a:	60ba      	str	r2, [r7, #8]
 800111c:	461a      	mov	r2, r3
 800111e:	4603      	mov	r3, r0
 8001120:	81fb      	strh	r3, [r7, #14]
 8001122:	460b      	mov	r3, r1
 8001124:	81bb      	strh	r3, [r7, #12]
 8001126:	4613      	mov	r3, r2
 8001128:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800112a:	2301      	movs	r3, #1
 800112c:	83fb      	strh	r3, [r7, #30]
 800112e:	2300      	movs	r3, #0
 8001130:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800113e:	e002      	b.n	8001146 <BSP_LCD_DisplayStringAt+0x32>
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	3301      	adds	r3, #1
 8001144:	61bb      	str	r3, [r7, #24]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	1c5a      	adds	r2, r3, #1
 800114a:	617a      	str	r2, [r7, #20]
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1f6      	bne.n	8001140 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001152:	f7ff fe8f 	bl	8000e74 <BSP_LCD_GetXSize>
 8001156:	4b4f      	ldr	r3, [pc, #316]	; (8001294 <BSP_LCD_DisplayStringAt+0x180>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	494f      	ldr	r1, [pc, #316]	; (8001298 <BSP_LCD_DisplayStringAt+0x184>)
 800115c:	4613      	mov	r3, r2
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	3308      	adds	r3, #8
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	889b      	ldrh	r3, [r3, #4]
 800116c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001170:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b02      	cmp	r3, #2
 8001176:	d01c      	beq.n	80011b2 <BSP_LCD_DisplayStringAt+0x9e>
 8001178:	2b03      	cmp	r3, #3
 800117a:	d017      	beq.n	80011ac <BSP_LCD_DisplayStringAt+0x98>
 800117c:	2b01      	cmp	r3, #1
 800117e:	d12e      	bne.n	80011de <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	1ad1      	subs	r1, r2, r3
 8001186:	4b43      	ldr	r3, [pc, #268]	; (8001294 <BSP_LCD_DisplayStringAt+0x180>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4843      	ldr	r0, [pc, #268]	; (8001298 <BSP_LCD_DisplayStringAt+0x184>)
 800118c:	4613      	mov	r3, r2
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	4413      	add	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4403      	add	r3, r0
 8001196:	3308      	adds	r3, #8
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	889b      	ldrh	r3, [r3, #4]
 800119c:	fb03 f301 	mul.w	r3, r3, r1
 80011a0:	085b      	lsrs	r3, r3, #1
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	89fb      	ldrh	r3, [r7, #14]
 80011a6:	4413      	add	r3, r2
 80011a8:	83fb      	strh	r3, [r7, #30]
      break;
 80011aa:	e01b      	b.n	80011e4 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80011ac:	89fb      	ldrh	r3, [r7, #14]
 80011ae:	83fb      	strh	r3, [r7, #30]
      break;
 80011b0:	e018      	b.n	80011e4 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	b299      	uxth	r1, r3
 80011ba:	4b36      	ldr	r3, [pc, #216]	; (8001294 <BSP_LCD_DisplayStringAt+0x180>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4836      	ldr	r0, [pc, #216]	; (8001298 <BSP_LCD_DisplayStringAt+0x184>)
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4403      	add	r3, r0
 80011ca:	3308      	adds	r3, #8
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	889b      	ldrh	r3, [r3, #4]
 80011d0:	fb11 f303 	smulbb	r3, r1, r3
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	89fb      	ldrh	r3, [r7, #14]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	83fb      	strh	r3, [r7, #30]
      break;
 80011dc:	e002      	b.n	80011e4 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 80011de:	89fb      	ldrh	r3, [r7, #14]
 80011e0:	83fb      	strh	r3, [r7, #30]
      break;
 80011e2:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80011e4:	8bfb      	ldrh	r3, [r7, #30]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <BSP_LCD_DisplayStringAt+0xde>
 80011ea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	da1d      	bge.n	800122e <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80011f6:	e01a      	b.n	800122e <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	781a      	ldrb	r2, [r3, #0]
 80011fc:	89b9      	ldrh	r1, [r7, #12]
 80011fe:	8bfb      	ldrh	r3, [r7, #30]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff43 	bl	800108c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8001206:	4b23      	ldr	r3, [pc, #140]	; (8001294 <BSP_LCD_DisplayStringAt+0x180>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	4923      	ldr	r1, [pc, #140]	; (8001298 <BSP_LCD_DisplayStringAt+0x184>)
 800120c:	4613      	mov	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	440b      	add	r3, r1
 8001216:	3308      	adds	r3, #8
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	889a      	ldrh	r2, [r3, #4]
 800121c:	8bfb      	ldrh	r3, [r7, #30]
 800121e:	4413      	add	r3, r2
 8001220:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	3301      	adds	r3, #1
 8001226:	60bb      	str	r3, [r7, #8]
    i++;
 8001228:	8bbb      	ldrh	r3, [r7, #28]
 800122a:	3301      	adds	r3, #1
 800122c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	bf14      	ite	ne
 8001236:	2301      	movne	r3, #1
 8001238:	2300      	moveq	r3, #0
 800123a:	b2dc      	uxtb	r4, r3
 800123c:	f7ff fe1a 	bl	8000e74 <BSP_LCD_GetXSize>
 8001240:	4605      	mov	r5, r0
 8001242:	8bb9      	ldrh	r1, [r7, #28]
 8001244:	4b13      	ldr	r3, [pc, #76]	; (8001294 <BSP_LCD_DisplayStringAt+0x180>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4813      	ldr	r0, [pc, #76]	; (8001298 <BSP_LCD_DisplayStringAt+0x184>)
 800124a:	4613      	mov	r3, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	4413      	add	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4403      	add	r3, r0
 8001254:	3308      	adds	r3, #8
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	889b      	ldrh	r3, [r3, #4]
 800125a:	fb03 f301 	mul.w	r3, r3, r1
 800125e:	1aeb      	subs	r3, r5, r3
 8001260:	b299      	uxth	r1, r3
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <BSP_LCD_DisplayStringAt+0x180>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	480c      	ldr	r0, [pc, #48]	; (8001298 <BSP_LCD_DisplayStringAt+0x184>)
 8001268:	4613      	mov	r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4413      	add	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4403      	add	r3, r0
 8001272:	3308      	adds	r3, #8
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	889b      	ldrh	r3, [r3, #4]
 8001278:	4299      	cmp	r1, r3
 800127a:	bf2c      	ite	cs
 800127c:	2301      	movcs	r3, #1
 800127e:	2300      	movcc	r3, #0
 8001280:	b2db      	uxtb	r3, r3
 8001282:	4023      	ands	r3, r4
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1b6      	bne.n	80011f8 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 800128a:	bf00      	nop
 800128c:	3720      	adds	r7, #32
 800128e:	46bd      	mov	sp, r7
 8001290:	bdb0      	pop	{r4, r5, r7, pc}
 8001292:	bf00      	nop
 8001294:	200003b8 	.word	0x200003b8
 8001298:	200003bc 	.word	0x200003bc

0800129c <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800129c:	b5b0      	push	{r4, r5, r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]
 80012a6:	460b      	mov	r3, r1
 80012a8:	80bb      	strh	r3, [r7, #4]
 80012aa:	4613      	mov	r3, r2
 80012ac:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80012b2:	4b26      	ldr	r3, [pc, #152]	; (800134c <BSP_LCD_DrawHLine+0xb0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a26      	ldr	r2, [pc, #152]	; (8001350 <BSP_LCD_DrawHLine+0xb4>)
 80012b8:	2134      	movs	r1, #52	; 0x34
 80012ba:	fb01 f303 	mul.w	r3, r1, r3
 80012be:	4413      	add	r3, r2
 80012c0:	3348      	adds	r3, #72	; 0x48
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d114      	bne.n	80012f2 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80012c8:	4b20      	ldr	r3, [pc, #128]	; (800134c <BSP_LCD_DrawHLine+0xb0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a20      	ldr	r2, [pc, #128]	; (8001350 <BSP_LCD_DrawHLine+0xb4>)
 80012ce:	2134      	movs	r1, #52	; 0x34
 80012d0:	fb01 f303 	mul.w	r3, r1, r3
 80012d4:	4413      	add	r3, r2
 80012d6:	335c      	adds	r3, #92	; 0x5c
 80012d8:	681c      	ldr	r4, [r3, #0]
 80012da:	f7ff fdcb 	bl	8000e74 <BSP_LCD_GetXSize>
 80012de:	4602      	mov	r2, r0
 80012e0:	88bb      	ldrh	r3, [r7, #4]
 80012e2:	fb03 f202 	mul.w	r2, r3, r2
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	4413      	add	r3, r2
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	4423      	add	r3, r4
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	e013      	b.n	800131a <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80012f2:	4b16      	ldr	r3, [pc, #88]	; (800134c <BSP_LCD_DrawHLine+0xb0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a16      	ldr	r2, [pc, #88]	; (8001350 <BSP_LCD_DrawHLine+0xb4>)
 80012f8:	2134      	movs	r1, #52	; 0x34
 80012fa:	fb01 f303 	mul.w	r3, r1, r3
 80012fe:	4413      	add	r3, r2
 8001300:	335c      	adds	r3, #92	; 0x5c
 8001302:	681c      	ldr	r4, [r3, #0]
 8001304:	f7ff fdb6 	bl	8000e74 <BSP_LCD_GetXSize>
 8001308:	4602      	mov	r2, r0
 800130a:	88bb      	ldrh	r3, [r7, #4]
 800130c:	fb03 f202 	mul.w	r2, r3, r2
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	4413      	add	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4423      	add	r3, r4
 8001318:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <BSP_LCD_DrawHLine+0xb0>)
 800131c:	6818      	ldr	r0, [r3, #0]
 800131e:	68fc      	ldr	r4, [r7, #12]
 8001320:	887d      	ldrh	r5, [r7, #2]
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <BSP_LCD_DrawHLine+0xb0>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	490b      	ldr	r1, [pc, #44]	; (8001354 <BSP_LCD_DrawHLine+0xb8>)
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	440b      	add	r3, r1
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	2300      	movs	r3, #0
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2301      	movs	r3, #1
 800133c:	462a      	mov	r2, r5
 800133e:	4621      	mov	r1, r4
 8001340:	f000 fb2c 	bl	800199c <LL_FillBuffer>
}
 8001344:	bf00      	nop
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bdb0      	pop	{r4, r5, r7, pc}
 800134c:	200003b8 	.word	0x200003b8
 8001350:	20000548 	.word	0x20000548
 8001354:	200003bc 	.word	0x200003bc

08001358 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135a:	b087      	sub	sp, #28
 800135c:	af02      	add	r7, sp, #8
 800135e:	4603      	mov	r3, r0
 8001360:	80fb      	strh	r3, [r7, #6]
 8001362:	460b      	mov	r3, r1
 8001364:	80bb      	strh	r3, [r7, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800136e:	4b28      	ldr	r3, [pc, #160]	; (8001410 <BSP_LCD_DrawVLine+0xb8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a28      	ldr	r2, [pc, #160]	; (8001414 <BSP_LCD_DrawVLine+0xbc>)
 8001374:	2134      	movs	r1, #52	; 0x34
 8001376:	fb01 f303 	mul.w	r3, r1, r3
 800137a:	4413      	add	r3, r2
 800137c:	3348      	adds	r3, #72	; 0x48
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b02      	cmp	r3, #2
 8001382:	d114      	bne.n	80013ae <BSP_LCD_DrawVLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001384:	4b22      	ldr	r3, [pc, #136]	; (8001410 <BSP_LCD_DrawVLine+0xb8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a22      	ldr	r2, [pc, #136]	; (8001414 <BSP_LCD_DrawVLine+0xbc>)
 800138a:	2134      	movs	r1, #52	; 0x34
 800138c:	fb01 f303 	mul.w	r3, r1, r3
 8001390:	4413      	add	r3, r2
 8001392:	335c      	adds	r3, #92	; 0x5c
 8001394:	681c      	ldr	r4, [r3, #0]
 8001396:	f7ff fd6d 	bl	8000e74 <BSP_LCD_GetXSize>
 800139a:	4602      	mov	r2, r0
 800139c:	88bb      	ldrh	r3, [r7, #4]
 800139e:	fb03 f202 	mul.w	r2, r3, r2
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	4413      	add	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4423      	add	r3, r4
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	e013      	b.n	80013d6 <BSP_LCD_DrawVLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80013ae:	4b18      	ldr	r3, [pc, #96]	; (8001410 <BSP_LCD_DrawVLine+0xb8>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a18      	ldr	r2, [pc, #96]	; (8001414 <BSP_LCD_DrawVLine+0xbc>)
 80013b4:	2134      	movs	r1, #52	; 0x34
 80013b6:	fb01 f303 	mul.w	r3, r1, r3
 80013ba:	4413      	add	r3, r2
 80013bc:	335c      	adds	r3, #92	; 0x5c
 80013be:	681c      	ldr	r4, [r3, #0]
 80013c0:	f7ff fd58 	bl	8000e74 <BSP_LCD_GetXSize>
 80013c4:	4602      	mov	r2, r0
 80013c6:	88bb      	ldrh	r3, [r7, #4]
 80013c8:	fb03 f202 	mul.w	r2, r3, r2
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	4413      	add	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4423      	add	r3, r4
 80013d4:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <BSP_LCD_DrawVLine+0xb8>)
 80013d8:	681c      	ldr	r4, [r3, #0]
 80013da:	68fd      	ldr	r5, [r7, #12]
 80013dc:	887e      	ldrh	r6, [r7, #2]
 80013de:	f7ff fd49 	bl	8000e74 <BSP_LCD_GetXSize>
 80013e2:	4603      	mov	r3, r0
 80013e4:	1e59      	subs	r1, r3, #1
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <BSP_LCD_DrawVLine+0xb8>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	480b      	ldr	r0, [pc, #44]	; (8001418 <BSP_LCD_DrawVLine+0xc0>)
 80013ec:	4613      	mov	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4413      	add	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4403      	add	r3, r0
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	9100      	str	r1, [sp, #0]
 80013fc:	4633      	mov	r3, r6
 80013fe:	2201      	movs	r2, #1
 8001400:	4629      	mov	r1, r5
 8001402:	4620      	mov	r0, r4
 8001404:	f000 faca 	bl	800199c <LL_FillBuffer>
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001410:	200003b8 	.word	0x200003b8
 8001414:	20000548 	.word	0x20000548
 8001418:	200003bc 	.word	0x200003bc

0800141c <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4604      	mov	r4, r0
 8001424:	4608      	mov	r0, r1
 8001426:	4611      	mov	r1, r2
 8001428:	461a      	mov	r2, r3
 800142a:	4623      	mov	r3, r4
 800142c:	80fb      	strh	r3, [r7, #6]
 800142e:	4603      	mov	r3, r0
 8001430:	80bb      	strh	r3, [r7, #4]
 8001432:	460b      	mov	r3, r1
 8001434:	807b      	strh	r3, [r7, #2]
 8001436:	4613      	mov	r3, r2
 8001438:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 800143a:	887a      	ldrh	r2, [r7, #2]
 800143c:	88b9      	ldrh	r1, [r7, #4]
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff2b 	bl	800129c <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8001446:	88ba      	ldrh	r2, [r7, #4]
 8001448:	883b      	ldrh	r3, [r7, #0]
 800144a:	4413      	add	r3, r2
 800144c:	b299      	uxth	r1, r3
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff ff22 	bl	800129c <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8001458:	883a      	ldrh	r2, [r7, #0]
 800145a:	88b9      	ldrh	r1, [r7, #4]
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff ff7a 	bl	8001358 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8001464:	88fa      	ldrh	r2, [r7, #6]
 8001466:	887b      	ldrh	r3, [r7, #2]
 8001468:	4413      	add	r3, r2
 800146a:	b29b      	uxth	r3, r3
 800146c:	883a      	ldrh	r2, [r7, #0]
 800146e:	88b9      	ldrh	r1, [r7, #4]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff71 	bl	8001358 <BSP_LCD_DrawVLine>
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	bd90      	pop	{r4, r7, pc}
	...

08001480 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001480:	b5b0      	push	{r4, r5, r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	603a      	str	r2, [r7, #0]
 800148a:	80fb      	strh	r3, [r7, #6]
 800148c:	460b      	mov	r3, r1
 800148e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001490:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <BSP_LCD_DrawPixel+0x88>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a1d      	ldr	r2, [pc, #116]	; (800150c <BSP_LCD_DrawPixel+0x8c>)
 8001496:	2134      	movs	r1, #52	; 0x34
 8001498:	fb01 f303 	mul.w	r3, r1, r3
 800149c:	4413      	add	r3, r2
 800149e:	3348      	adds	r3, #72	; 0x48
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d116      	bne.n	80014d4 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80014a6:	4b18      	ldr	r3, [pc, #96]	; (8001508 <BSP_LCD_DrawPixel+0x88>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a18      	ldr	r2, [pc, #96]	; (800150c <BSP_LCD_DrawPixel+0x8c>)
 80014ac:	2134      	movs	r1, #52	; 0x34
 80014ae:	fb01 f303 	mul.w	r3, r1, r3
 80014b2:	4413      	add	r3, r2
 80014b4:	335c      	adds	r3, #92	; 0x5c
 80014b6:	681c      	ldr	r4, [r3, #0]
 80014b8:	88bd      	ldrh	r5, [r7, #4]
 80014ba:	f7ff fcdb 	bl	8000e74 <BSP_LCD_GetXSize>
 80014be:	4603      	mov	r3, r0
 80014c0:	fb03 f205 	mul.w	r2, r3, r5
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	4413      	add	r3, r2
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	4423      	add	r3, r4
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	b292      	uxth	r2, r2
 80014d0:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80014d2:	e015      	b.n	8001500 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <BSP_LCD_DrawPixel+0x88>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0c      	ldr	r2, [pc, #48]	; (800150c <BSP_LCD_DrawPixel+0x8c>)
 80014da:	2134      	movs	r1, #52	; 0x34
 80014dc:	fb01 f303 	mul.w	r3, r1, r3
 80014e0:	4413      	add	r3, r2
 80014e2:	335c      	adds	r3, #92	; 0x5c
 80014e4:	681c      	ldr	r4, [r3, #0]
 80014e6:	88bd      	ldrh	r5, [r7, #4]
 80014e8:	f7ff fcc4 	bl	8000e74 <BSP_LCD_GetXSize>
 80014ec:	4603      	mov	r3, r0
 80014ee:	fb03 f205 	mul.w	r2, r3, r5
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	4413      	add	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4423      	add	r3, r4
 80014fa:	461a      	mov	r2, r3
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	6013      	str	r3, [r2, #0]
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bdb0      	pop	{r4, r5, r7, pc}
 8001508:	200003b8 	.word	0x200003b8
 800150c:	20000548 	.word	0x20000548

08001510 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af02      	add	r7, sp, #8
 8001518:	4604      	mov	r4, r0
 800151a:	4608      	mov	r0, r1
 800151c:	4611      	mov	r1, r2
 800151e:	461a      	mov	r2, r3
 8001520:	4623      	mov	r3, r4
 8001522:	80fb      	strh	r3, [r7, #6]
 8001524:	4603      	mov	r3, r0
 8001526:	80bb      	strh	r3, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	807b      	strh	r3, [r7, #2]
 800152c:	4613      	mov	r3, r2
 800152e:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001534:	4b30      	ldr	r3, [pc, #192]	; (80015f8 <BSP_LCD_FillRect+0xe8>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4930      	ldr	r1, [pc, #192]	; (80015fc <BSP_LCD_FillRect+0xec>)
 800153a:	4613      	mov	r3, r2
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	4413      	add	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fd2c 	bl	8000fa4 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800154c:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <BSP_LCD_FillRect+0xe8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a2b      	ldr	r2, [pc, #172]	; (8001600 <BSP_LCD_FillRect+0xf0>)
 8001552:	2134      	movs	r1, #52	; 0x34
 8001554:	fb01 f303 	mul.w	r3, r1, r3
 8001558:	4413      	add	r3, r2
 800155a:	3348      	adds	r3, #72	; 0x48
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b02      	cmp	r3, #2
 8001560:	d114      	bne.n	800158c <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001562:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <BSP_LCD_FillRect+0xe8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a26      	ldr	r2, [pc, #152]	; (8001600 <BSP_LCD_FillRect+0xf0>)
 8001568:	2134      	movs	r1, #52	; 0x34
 800156a:	fb01 f303 	mul.w	r3, r1, r3
 800156e:	4413      	add	r3, r2
 8001570:	335c      	adds	r3, #92	; 0x5c
 8001572:	681c      	ldr	r4, [r3, #0]
 8001574:	f7ff fc7e 	bl	8000e74 <BSP_LCD_GetXSize>
 8001578:	4602      	mov	r2, r0
 800157a:	88bb      	ldrh	r3, [r7, #4]
 800157c:	fb03 f202 	mul.w	r2, r3, r2
 8001580:	88fb      	ldrh	r3, [r7, #6]
 8001582:	4413      	add	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4423      	add	r3, r4
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	e013      	b.n	80015b4 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800158c:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <BSP_LCD_FillRect+0xe8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a1b      	ldr	r2, [pc, #108]	; (8001600 <BSP_LCD_FillRect+0xf0>)
 8001592:	2134      	movs	r1, #52	; 0x34
 8001594:	fb01 f303 	mul.w	r3, r1, r3
 8001598:	4413      	add	r3, r2
 800159a:	335c      	adds	r3, #92	; 0x5c
 800159c:	681c      	ldr	r4, [r3, #0]
 800159e:	f7ff fc69 	bl	8000e74 <BSP_LCD_GetXSize>
 80015a2:	4602      	mov	r2, r0
 80015a4:	88bb      	ldrh	r3, [r7, #4]
 80015a6:	fb03 f202 	mul.w	r2, r3, r2
 80015aa:	88fb      	ldrh	r3, [r7, #6]
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4423      	add	r3, r4
 80015b2:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80015b4:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <BSP_LCD_FillRect+0xe8>)
 80015b6:	681c      	ldr	r4, [r3, #0]
 80015b8:	68fd      	ldr	r5, [r7, #12]
 80015ba:	887e      	ldrh	r6, [r7, #2]
 80015bc:	f8b7 8000 	ldrh.w	r8, [r7]
 80015c0:	f7ff fc58 	bl	8000e74 <BSP_LCD_GetXSize>
 80015c4:	4602      	mov	r2, r0
 80015c6:	887b      	ldrh	r3, [r7, #2]
 80015c8:	1ad1      	subs	r1, r2, r3
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <BSP_LCD_FillRect+0xe8>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	480b      	ldr	r0, [pc, #44]	; (80015fc <BSP_LCD_FillRect+0xec>)
 80015d0:	4613      	mov	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4403      	add	r3, r0
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	9301      	str	r3, [sp, #4]
 80015de:	9100      	str	r1, [sp, #0]
 80015e0:	4643      	mov	r3, r8
 80015e2:	4632      	mov	r2, r6
 80015e4:	4629      	mov	r1, r5
 80015e6:	4620      	mov	r0, r4
 80015e8:	f000 f9d8 	bl	800199c <LL_FillBuffer>
}
 80015ec:	bf00      	nop
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015f6:	bf00      	nop
 80015f8:	200003b8 	.word	0x200003b8
 80015fc:	200003bc 	.word	0x200003bc
 8001600:	20000548 	.word	0x20000548

08001604 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8001608:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <BSP_LCD_DisplayOn+0x30>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	699a      	ldr	r2, [r3, #24]
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <BSP_LCD_DisplayOn+0x30>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0201 	orr.w	r2, r2, #1
 8001616:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8001618:	2201      	movs	r2, #1
 800161a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800161e:	4806      	ldr	r0, [pc, #24]	; (8001638 <BSP_LCD_DisplayOn+0x34>)
 8001620:	f001 ff24 	bl	800346c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8001624:	2201      	movs	r2, #1
 8001626:	2108      	movs	r1, #8
 8001628:	4804      	ldr	r0, [pc, #16]	; (800163c <BSP_LCD_DisplayOn+0x38>)
 800162a:	f001 ff1f 	bl	800346c <HAL_GPIO_WritePin>
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000548 	.word	0x20000548
 8001638:	40022000 	.word	0x40022000
 800163c:	40022800 	.word	0x40022800

08001640 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b090      	sub	sp, #64	; 0x40
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800164a:	4b64      	ldr	r3, [pc, #400]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	4a63      	ldr	r2, [pc, #396]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 8001650:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001654:	6453      	str	r3, [r2, #68]	; 0x44
 8001656:	4b61      	ldr	r3, [pc, #388]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001660:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001662:	4b5e      	ldr	r3, [pc, #376]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a5d      	ldr	r2, [pc, #372]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 8001668:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b5b      	ldr	r3, [pc, #364]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800167a:	4b58      	ldr	r3, [pc, #352]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a57      	ldr	r2, [pc, #348]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 8001680:	f043 0310 	orr.w	r3, r3, #16
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b55      	ldr	r3, [pc, #340]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	623b      	str	r3, [r7, #32]
 8001690:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001692:	4b52      	ldr	r3, [pc, #328]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a51      	ldr	r2, [pc, #324]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 8001698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b4f      	ldr	r3, [pc, #316]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016a6:	61fb      	str	r3, [r7, #28]
 80016a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80016aa:	4b4c      	ldr	r3, [pc, #304]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a4b      	ldr	r2, [pc, #300]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 80016b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b49      	ldr	r3, [pc, #292]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016be:	61bb      	str	r3, [r7, #24]
 80016c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80016c2:	4b46      	ldr	r3, [pc, #280]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a45      	ldr	r2, [pc, #276]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 80016c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b43      	ldr	r3, [pc, #268]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80016da:	4b40      	ldr	r3, [pc, #256]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a3f      	ldr	r2, [pc, #252]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 80016e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b3d      	ldr	r3, [pc, #244]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80016f2:	4b3a      	ldr	r3, [pc, #232]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a39      	ldr	r2, [pc, #228]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 80016f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b37      	ldr	r3, [pc, #220]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800170a:	4b34      	ldr	r3, [pc, #208]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a33      	ldr	r2, [pc, #204]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 8001710:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b31      	ldr	r3, [pc, #196]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8001722:	2310      	movs	r3, #16
 8001724:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800172e:	2302      	movs	r3, #2
 8001730:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8001732:	230e      	movs	r3, #14
 8001734:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001736:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800173a:	4619      	mov	r1, r3
 800173c:	4828      	ldr	r0, [pc, #160]	; (80017e0 <BSP_LCD_MspInit+0x1a0>)
 800173e:	f001 fceb 	bl	8003118 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8001742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800174c:	2309      	movs	r3, #9
 800174e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001754:	4619      	mov	r1, r3
 8001756:	4823      	ldr	r0, [pc, #140]	; (80017e4 <BSP_LCD_MspInit+0x1a4>)
 8001758:	f001 fcde 	bl	8003118 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800175c:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001766:	230e      	movs	r3, #14
 8001768:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800176a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800176e:	4619      	mov	r1, r3
 8001770:	481d      	ldr	r0, [pc, #116]	; (80017e8 <BSP_LCD_MspInit+0x1a8>)
 8001772:	f001 fcd1 	bl	8003118 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8001776:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001780:	230e      	movs	r3, #14
 8001782:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8001784:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001788:	4619      	mov	r1, r3
 800178a:	4818      	ldr	r0, [pc, #96]	; (80017ec <BSP_LCD_MspInit+0x1ac>)
 800178c:	f001 fcc4 	bl	8003118 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8001790:	23f7      	movs	r3, #247	; 0xf7
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001794:	2302      	movs	r3, #2
 8001796:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001798:	230e      	movs	r3, #14
 800179a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800179c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a0:	4619      	mov	r1, r3
 80017a2:	4813      	ldr	r0, [pc, #76]	; (80017f0 <BSP_LCD_MspInit+0x1b0>)
 80017a4:	f001 fcb8 	bl	8003118 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80017a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80017ae:	2301      	movs	r3, #1
 80017b0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80017b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b6:	4619      	mov	r1, r3
 80017b8:	480b      	ldr	r0, [pc, #44]	; (80017e8 <BSP_LCD_MspInit+0x1a8>)
 80017ba:	f001 fcad 	bl	8003118 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80017be:	2308      	movs	r3, #8
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80017c2:	2301      	movs	r3, #1
 80017c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80017c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ca:	4619      	mov	r1, r3
 80017cc:	4808      	ldr	r0, [pc, #32]	; (80017f0 <BSP_LCD_MspInit+0x1b0>)
 80017ce:	f001 fca3 	bl	8003118 <HAL_GPIO_Init>
}
 80017d2:	bf00      	nop
 80017d4:	3740      	adds	r7, #64	; 0x40
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40021800 	.word	0x40021800
 80017e8:	40022000 	.word	0x40022000
 80017ec:	40022400 	.word	0x40022400
 80017f0:	40022800 	.word	0x40022800

080017f4 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <BSP_LCD_ClockConfig+0x34>)
 8001800:	2208      	movs	r2, #8
 8001802:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <BSP_LCD_ClockConfig+0x34>)
 8001806:	22c0      	movs	r2, #192	; 0xc0
 8001808:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800180a:	4b07      	ldr	r3, [pc, #28]	; (8001828 <BSP_LCD_ClockConfig+0x34>)
 800180c:	2205      	movs	r2, #5
 800180e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <BSP_LCD_ClockConfig+0x34>)
 8001812:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001816:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8001818:	4803      	ldr	r0, [pc, #12]	; (8001828 <BSP_LCD_ClockConfig+0x34>)
 800181a:	f003 fc53 	bl	80050c4 <HAL_RCCEx_PeriphCLKConfig>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200003d4 	.word	0x200003d4

0800182c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	603a      	str	r2, [r7, #0]
 8001836:	80fb      	strh	r3, [r7, #6]
 8001838:	460b      	mov	r3, r1
 800183a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
 8001840:	2300      	movs	r3, #0
 8001842:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8001844:	4b53      	ldr	r3, [pc, #332]	; (8001994 <DrawChar+0x168>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4953      	ldr	r1, [pc, #332]	; (8001998 <DrawChar+0x16c>)
 800184a:	4613      	mov	r3, r2
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4413      	add	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	440b      	add	r3, r1
 8001854:	3308      	adds	r3, #8
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	88db      	ldrh	r3, [r3, #6]
 800185a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800185c:	4b4d      	ldr	r3, [pc, #308]	; (8001994 <DrawChar+0x168>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	494d      	ldr	r1, [pc, #308]	; (8001998 <DrawChar+0x16c>)
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	440b      	add	r3, r1
 800186c:	3308      	adds	r3, #8
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	889b      	ldrh	r3, [r3, #4]
 8001872:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8001874:	8a3b      	ldrh	r3, [r7, #16]
 8001876:	3307      	adds	r3, #7
 8001878:	2b00      	cmp	r3, #0
 800187a:	da00      	bge.n	800187e <DrawChar+0x52>
 800187c:	3307      	adds	r3, #7
 800187e:	10db      	asrs	r3, r3, #3
 8001880:	b2db      	uxtb	r3, r3
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	b2da      	uxtb	r2, r3
 8001886:	8a3b      	ldrh	r3, [r7, #16]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	e076      	b.n	8001982 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001894:	8a3b      	ldrh	r3, [r7, #16]
 8001896:	3307      	adds	r3, #7
 8001898:	2b00      	cmp	r3, #0
 800189a:	da00      	bge.n	800189e <DrawChar+0x72>
 800189c:	3307      	adds	r3, #7
 800189e:	10db      	asrs	r3, r3, #3
 80018a0:	461a      	mov	r2, r3
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	fb03 f302 	mul.w	r3, r3, r2
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80018ae:	8a3b      	ldrh	r3, [r7, #16]
 80018b0:	3307      	adds	r3, #7
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	da00      	bge.n	80018b8 <DrawChar+0x8c>
 80018b6:	3307      	adds	r3, #7
 80018b8:	10db      	asrs	r3, r3, #3
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d002      	beq.n	80018c4 <DrawChar+0x98>
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d004      	beq.n	80018cc <DrawChar+0xa0>
 80018c2:	e00c      	b.n	80018de <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	617b      	str	r3, [r7, #20]
      break;
 80018ca:	e016      	b.n	80018fa <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	021b      	lsls	r3, r3, #8
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	3201      	adds	r2, #1
 80018d6:	7812      	ldrb	r2, [r2, #0]
 80018d8:	4313      	orrs	r3, r2
 80018da:	617b      	str	r3, [r7, #20]
      break;
 80018dc:	e00d      	b.n	80018fa <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	041a      	lsls	r2, r3, #16
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	3301      	adds	r3, #1
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	021b      	lsls	r3, r3, #8
 80018ec:	4313      	orrs	r3, r2
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	3202      	adds	r2, #2
 80018f2:	7812      	ldrb	r2, [r2, #0]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	617b      	str	r3, [r7, #20]
      break;
 80018f8:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	61bb      	str	r3, [r7, #24]
 80018fe:	e036      	b.n	800196e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8001900:	8a3a      	ldrh	r2, [r7, #16]
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	1ad2      	subs	r2, r2, r3
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	4413      	add	r3, r2
 800190a:	3b01      	subs	r3, #1
 800190c:	2201      	movs	r2, #1
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	461a      	mov	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	4013      	ands	r3, r2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d012      	beq.n	8001942 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	b29a      	uxth	r2, r3
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	4413      	add	r3, r2
 8001924:	b298      	uxth	r0, r3
 8001926:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <DrawChar+0x168>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	491b      	ldr	r1, [pc, #108]	; (8001998 <DrawChar+0x16c>)
 800192c:	4613      	mov	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4413      	add	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	88bb      	ldrh	r3, [r7, #4]
 800193a:	4619      	mov	r1, r3
 800193c:	f7ff fda0 	bl	8001480 <BSP_LCD_DrawPixel>
 8001940:	e012      	b.n	8001968 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	b29a      	uxth	r2, r3
 8001946:	88fb      	ldrh	r3, [r7, #6]
 8001948:	4413      	add	r3, r2
 800194a:	b298      	uxth	r0, r3
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <DrawChar+0x168>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4911      	ldr	r1, [pc, #68]	; (8001998 <DrawChar+0x16c>)
 8001952:	4613      	mov	r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	4413      	add	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	440b      	add	r3, r1
 800195c:	3304      	adds	r3, #4
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	88bb      	ldrh	r3, [r7, #4]
 8001962:	4619      	mov	r1, r3
 8001964:	f7ff fd8c 	bl	8001480 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	3301      	adds	r3, #1
 800196c:	61bb      	str	r3, [r7, #24]
 800196e:	8a3b      	ldrh	r3, [r7, #16]
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	429a      	cmp	r2, r3
 8001974:	d3c4      	bcc.n	8001900 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8001976:	88bb      	ldrh	r3, [r7, #4]
 8001978:	3301      	adds	r3, #1
 800197a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	3301      	adds	r3, #1
 8001980:	61fb      	str	r3, [r7, #28]
 8001982:	8a7b      	ldrh	r3, [r7, #18]
 8001984:	69fa      	ldr	r2, [r7, #28]
 8001986:	429a      	cmp	r2, r3
 8001988:	d384      	bcc.n	8001894 <DrawChar+0x68>
  }
}
 800198a:	bf00      	nop
 800198c:	3720      	adds	r7, #32
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200003b8 	.word	0x200003b8
 8001998:	200003bc 	.word	0x200003bc

0800199c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af02      	add	r7, sp, #8
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
 80019a8:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80019aa:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <LL_FillBuffer+0x88>)
 80019ac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80019b0:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80019b2:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <LL_FillBuffer+0x8c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a1d      	ldr	r2, [pc, #116]	; (8001a2c <LL_FillBuffer+0x90>)
 80019b8:	2134      	movs	r1, #52	; 0x34
 80019ba:	fb01 f303 	mul.w	r3, r1, r3
 80019be:	4413      	add	r3, r2
 80019c0:	3348      	adds	r3, #72	; 0x48
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d103      	bne.n	80019d0 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80019c8:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <LL_FillBuffer+0x88>)
 80019ca:	2202      	movs	r2, #2
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	e002      	b.n	80019d6 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80019d0:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <LL_FillBuffer+0x88>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80019d6:	4a13      	ldr	r2, [pc, #76]	; (8001a24 <LL_FillBuffer+0x88>)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <LL_FillBuffer+0x88>)
 80019de:	4a14      	ldr	r2, [pc, #80]	; (8001a30 <LL_FillBuffer+0x94>)
 80019e0:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80019e2:	4810      	ldr	r0, [pc, #64]	; (8001a24 <LL_FillBuffer+0x88>)
 80019e4:	f000 fffc 	bl	80029e0 <HAL_DMA2D_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d115      	bne.n	8001a1a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80019ee:	68f9      	ldr	r1, [r7, #12]
 80019f0:	480c      	ldr	r0, [pc, #48]	; (8001a24 <LL_FillBuffer+0x88>)
 80019f2:	f001 fa63 	bl	8002ebc <HAL_DMA2D_ConfigLayer>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d10e      	bne.n	8001a1a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80019fc:	68ba      	ldr	r2, [r7, #8]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69f9      	ldr	r1, [r7, #28]
 8001a06:	4807      	ldr	r0, [pc, #28]	; (8001a24 <LL_FillBuffer+0x88>)
 8001a08:	f001 f834 	bl	8002a74 <HAL_DMA2D_Start>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d103      	bne.n	8001a1a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001a12:	210a      	movs	r1, #10
 8001a14:	4803      	ldr	r0, [pc, #12]	; (8001a24 <LL_FillBuffer+0x88>)
 8001a16:	f001 f858 	bl	8002aca <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001a1a:	bf00      	nop
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000378 	.word	0x20000378
 8001a28:	200003b8 	.word	0x200003b8
 8001a2c:	20000548 	.word	0x20000548
 8001a30:	4002b000 	.word	0x4002b000

08001a34 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001a38:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <BSP_SDRAM_Init+0xac>)
 8001a3a:	4a2a      	ldr	r2, [pc, #168]	; (8001ae4 <BSP_SDRAM_Init+0xb0>)
 8001a3c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8001a3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ae8 <BSP_SDRAM_Init+0xb4>)
 8001a40:	2202      	movs	r2, #2
 8001a42:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8001a44:	4b28      	ldr	r3, [pc, #160]	; (8001ae8 <BSP_SDRAM_Init+0xb4>)
 8001a46:	2207      	movs	r2, #7
 8001a48:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8001a4a:	4b27      	ldr	r3, [pc, #156]	; (8001ae8 <BSP_SDRAM_Init+0xb4>)
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8001a50:	4b25      	ldr	r3, [pc, #148]	; (8001ae8 <BSP_SDRAM_Init+0xb4>)
 8001a52:	2207      	movs	r2, #7
 8001a54:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8001a56:	4b24      	ldr	r3, [pc, #144]	; (8001ae8 <BSP_SDRAM_Init+0xb4>)
 8001a58:	2202      	movs	r2, #2
 8001a5a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8001a5c:	4b22      	ldr	r3, [pc, #136]	; (8001ae8 <BSP_SDRAM_Init+0xb4>)
 8001a5e:	2202      	movs	r2, #2
 8001a60:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8001a62:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <BSP_SDRAM_Init+0xb4>)
 8001a64:	2202      	movs	r2, #2
 8001a66:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8001a68:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <BSP_SDRAM_Init+0xac>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001a6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ae0 <BSP_SDRAM_Init+0xac>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001a74:	4b1a      	ldr	r3, [pc, #104]	; (8001ae0 <BSP_SDRAM_Init+0xac>)
 8001a76:	2204      	movs	r2, #4
 8001a78:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001a7a:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <BSP_SDRAM_Init+0xac>)
 8001a7c:	2210      	movs	r2, #16
 8001a7e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001a80:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <BSP_SDRAM_Init+0xac>)
 8001a82:	2240      	movs	r2, #64	; 0x40
 8001a84:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8001a86:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <BSP_SDRAM_Init+0xac>)
 8001a88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a8c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001a8e:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <BSP_SDRAM_Init+0xac>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <BSP_SDRAM_Init+0xac>)
 8001a96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a9a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001a9c:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <BSP_SDRAM_Init+0xac>)
 8001a9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001aa2:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001aa4:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <BSP_SDRAM_Init+0xac>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001aaa:	2100      	movs	r1, #0
 8001aac:	480c      	ldr	r0, [pc, #48]	; (8001ae0 <BSP_SDRAM_Init+0xac>)
 8001aae:	f000 f87f 	bl	8001bb0 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001ab2:	490d      	ldr	r1, [pc, #52]	; (8001ae8 <BSP_SDRAM_Init+0xb4>)
 8001ab4:	480a      	ldr	r0, [pc, #40]	; (8001ae0 <BSP_SDRAM_Init+0xac>)
 8001ab6:	f005 f8bc 	bl	8006c32 <HAL_SDRAM_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <BSP_SDRAM_Init+0xb8>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	701a      	strb	r2, [r3, #0]
 8001ac6:	e002      	b.n	8001ace <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <BSP_SDRAM_Init+0xb8>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001ace:	f240 6003 	movw	r0, #1539	; 0x603
 8001ad2:	f000 f80d 	bl	8001af0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8001ad6:	4b05      	ldr	r3, [pc, #20]	; (8001aec <BSP_SDRAM_Init+0xb8>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200005f0 	.word	0x200005f0
 8001ae4:	a0000140 	.word	0xa0000140
 8001ae8:	20000458 	.word	0x20000458
 8001aec:	20000038 	.word	0x20000038

08001af0 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001afc:	4b2a      	ldr	r3, [pc, #168]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001b02:	4b29      	ldr	r3, [pc, #164]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b04:	2210      	movs	r2, #16
 8001b06:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001b08:	4b27      	ldr	r3, [pc, #156]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001b0e:	4b26      	ldr	r3, [pc, #152]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001b14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b18:	4923      	ldr	r1, [pc, #140]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b1a:	4824      	ldr	r0, [pc, #144]	; (8001bac <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001b1c:	f005 f8bd 	bl	8006c9a <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001b20:	2001      	movs	r0, #1
 8001b22:	f000 fbfb 	bl	800231c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001b26:	4b20      	ldr	r3, [pc, #128]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b28:	2202      	movs	r2, #2
 8001b2a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001b2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b2e:	2210      	movs	r2, #16
 8001b30:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001b32:	4b1d      	ldr	r3, [pc, #116]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001b38:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001b3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b42:	4919      	ldr	r1, [pc, #100]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b44:	4819      	ldr	r0, [pc, #100]	; (8001bac <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001b46:	f005 f8a8 	bl	8006c9a <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001b4a:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001b50:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b52:	2210      	movs	r2, #16
 8001b54:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8001b56:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b58:	2208      	movs	r2, #8
 8001b5a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001b62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b66:	4910      	ldr	r1, [pc, #64]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b68:	4810      	ldr	r0, [pc, #64]	; (8001bac <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001b6a:	f005 f896 	bl	8006c9a <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001b6e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001b72:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b76:	2204      	movs	r2, #4
 8001b78:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b7c:	2210      	movs	r2, #16
 8001b7e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4a07      	ldr	r2, [pc, #28]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b8a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001b8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b90:	4905      	ldr	r1, [pc, #20]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b92:	4806      	ldr	r0, [pc, #24]	; (8001bac <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001b94:	f005 f881 	bl	8006c9a <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	4804      	ldr	r0, [pc, #16]	; (8001bac <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001b9c:	f005 f8a8 	bl	8006cf0 <HAL_SDRAM_ProgramRefreshRate>
}
 8001ba0:	bf00      	nop
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000474 	.word	0x20000474
 8001bac:	200005f0 	.word	0x200005f0

08001bb0 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b090      	sub	sp, #64	; 0x40
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001bba:	4b70      	ldr	r3, [pc, #448]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bbe:	4a6f      	ldr	r2, [pc, #444]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6393      	str	r3, [r2, #56]	; 0x38
 8001bc6:	4b6d      	ldr	r3, [pc, #436]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8001bd2:	4b6a      	ldr	r3, [pc, #424]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	4a69      	ldr	r2, [pc, #420]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001bd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4b67      	ldr	r3, [pc, #412]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bea:	4b64      	ldr	r3, [pc, #400]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4a63      	ldr	r2, [pc, #396]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001bf0:	f043 0304 	orr.w	r3, r3, #4
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4b61      	ldr	r3, [pc, #388]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	623b      	str	r3, [r7, #32]
 8001c00:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c02:	4b5e      	ldr	r3, [pc, #376]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a5d      	ldr	r2, [pc, #372]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001c08:	f043 0308 	orr.w	r3, r3, #8
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b5b      	ldr	r3, [pc, #364]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	61fb      	str	r3, [r7, #28]
 8001c18:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c1a:	4b58      	ldr	r3, [pc, #352]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a57      	ldr	r2, [pc, #348]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001c20:	f043 0310 	orr.w	r3, r3, #16
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b55      	ldr	r3, [pc, #340]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0310 	and.w	r3, r3, #16
 8001c2e:	61bb      	str	r3, [r7, #24]
 8001c30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c32:	4b52      	ldr	r3, [pc, #328]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a51      	ldr	r2, [pc, #324]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001c38:	f043 0320 	orr.w	r3, r3, #32
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b4f      	ldr	r3, [pc, #316]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0320 	and.w	r3, r3, #32
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c4a:	4b4c      	ldr	r3, [pc, #304]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a4b      	ldr	r2, [pc, #300]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b49      	ldr	r3, [pc, #292]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c62:	4b46      	ldr	r3, [pc, #280]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a45      	ldr	r2, [pc, #276]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b43      	ldr	r3, [pc, #268]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8001c82:	2302      	movs	r3, #2
 8001c84:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001c86:	230c      	movs	r3, #12
 8001c88:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8001c8a:	2308      	movs	r3, #8
 8001c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8001c8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c92:	4619      	mov	r1, r3
 8001c94:	483a      	ldr	r0, [pc, #232]	; (8001d80 <BSP_SDRAM_MspInit+0x1d0>)
 8001c96:	f001 fa3f 	bl	8003118 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8001c9a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001ca0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4837      	ldr	r0, [pc, #220]	; (8001d84 <BSP_SDRAM_MspInit+0x1d4>)
 8001ca8:	f001 fa36 	bl	8003118 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001cac:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001cb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4833      	ldr	r0, [pc, #204]	; (8001d88 <BSP_SDRAM_MspInit+0x1d8>)
 8001cba:	f001 fa2d 	bl	8003118 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001cbe:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001cc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4830      	ldr	r0, [pc, #192]	; (8001d8c <BSP_SDRAM_MspInit+0x1dc>)
 8001ccc:	f001 fa24 	bl	8003118 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8001cd0:	f248 1333 	movw	r3, #33075	; 0x8133
 8001cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001cd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cda:	4619      	mov	r1, r3
 8001cdc:	482c      	ldr	r0, [pc, #176]	; (8001d90 <BSP_SDRAM_MspInit+0x1e0>)
 8001cde:	f001 fa1b 	bl	8003118 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8001ce2:	2328      	movs	r3, #40	; 0x28
 8001ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001ce6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cea:	4619      	mov	r1, r3
 8001cec:	4829      	ldr	r0, [pc, #164]	; (8001d94 <BSP_SDRAM_MspInit+0x1e4>)
 8001cee:	f001 fa13 	bl	8003118 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001cf2:	4b29      	ldr	r3, [pc, #164]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001cf8:	4b27      	ldr	r3, [pc, #156]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001cfa:	2280      	movs	r2, #128	; 0x80
 8001cfc:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001cfe:	4b26      	ldr	r3, [pc, #152]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d04:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8001d06:	4b24      	ldr	r3, [pc, #144]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001d08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d0c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d0e:	4b22      	ldr	r3, [pc, #136]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001d10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d14:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001d16:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001d18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d1c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8001d1e:	4b1e      	ldr	r3, [pc, #120]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001d24:	4b1c      	ldr	r3, [pc, #112]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001d26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d2a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8001d2c:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001d32:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001d34:	2203      	movs	r2, #3
 8001d36:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001d38:	4b17      	ldr	r3, [pc, #92]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001d3e:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001d44:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001d46:	4a15      	ldr	r2, [pc, #84]	; (8001d9c <BSP_SDRAM_MspInit+0x1ec>)
 8001d48:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001d4e:	631a      	str	r2, [r3, #48]	; 0x30
 8001d50:	4a11      	ldr	r2, [pc, #68]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8001d56:	4810      	ldr	r0, [pc, #64]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001d58:	f000 fd34 	bl	80027c4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8001d5c:	480e      	ldr	r0, [pc, #56]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001d5e:	f000 fc83 	bl	8002668 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	210f      	movs	r1, #15
 8001d66:	2038      	movs	r0, #56	; 0x38
 8001d68:	f000 fbd5 	bl	8002516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001d6c:	2038      	movs	r0, #56	; 0x38
 8001d6e:	f000 fbee 	bl	800254e <HAL_NVIC_EnableIRQ>
}
 8001d72:	bf00      	nop
 8001d74:	3740      	adds	r7, #64	; 0x40
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40020800 	.word	0x40020800
 8001d84:	40020c00 	.word	0x40020c00
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40021400 	.word	0x40021400
 8001d90:	40021800 	.word	0x40021800
 8001d94:	40021c00 	.word	0x40021c00
 8001d98:	20000484 	.word	0x20000484
 8001d9c:	40026410 	.word	0x40026410

08001da0 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	460a      	mov	r2, r1
 8001daa:	80fb      	strh	r3, [r7, #6]
 8001dac:	4613      	mov	r3, r2
 8001dae:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8001db4:	4a14      	ldr	r2, [pc, #80]	; (8001e08 <BSP_TS_Init+0x68>)
 8001db6:	88fb      	ldrh	r3, [r7, #6]
 8001db8:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8001dba:	4a14      	ldr	r2, [pc, #80]	; (8001e0c <BSP_TS_Init+0x6c>)
 8001dbc:	88bb      	ldrh	r3, [r7, #4]
 8001dbe:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8001dc0:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <BSP_TS_Init+0x70>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2070      	movs	r0, #112	; 0x70
 8001dc6:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <BSP_TS_Init+0x70>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2070      	movs	r0, #112	; 0x70
 8001dce:	4798      	blx	r3
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b51      	cmp	r3, #81	; 0x51
 8001dd4:	d111      	bne.n	8001dfa <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <BSP_TS_Init+0x74>)
 8001dd8:	4a0d      	ldr	r2, [pc, #52]	; (8001e10 <BSP_TS_Init+0x70>)
 8001dda:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <BSP_TS_Init+0x78>)
 8001dde:	2270      	movs	r2, #112	; 0x70
 8001de0:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8001de2:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <BSP_TS_Init+0x7c>)
 8001de4:	2208      	movs	r2, #8
 8001de6:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8001de8:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <BSP_TS_Init+0x74>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <BSP_TS_Init+0x78>)
 8001df0:	7812      	ldrb	r2, [r2, #0]
 8001df2:	b292      	uxth	r2, r2
 8001df4:	4610      	mov	r0, r2
 8001df6:	4798      	blx	r3
 8001df8:	e001      	b.n	8001dfe <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	200004e8 	.word	0x200004e8
 8001e0c:	200004ea 	.word	0x200004ea
 8001e10:	20000000 	.word	0x20000000
 8001e14:	200004e4 	.word	0x200004e4
 8001e18:	200004ed 	.word	0x200004ed
 8001e1c:	200004ec 	.word	0x200004ec

08001e20 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8001e20:	b590      	push	{r4, r7, lr}
 8001e22:	b097      	sub	sp, #92	; 0x5c
 8001e24:	af02      	add	r7, sp, #8
 8001e26:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8001e3a:	4b97      	ldr	r3, [pc, #604]	; (8002098 <BSP_TS_GetState+0x278>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	4a96      	ldr	r2, [pc, #600]	; (800209c <BSP_TS_GetState+0x27c>)
 8001e42:	7812      	ldrb	r2, [r2, #0]
 8001e44:	b292      	uxth	r2, r2
 8001e46:	4610      	mov	r0, r2
 8001e48:	4798      	blx	r3
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 81a8 	beq.w	80021ac <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e60:	e197      	b.n	8002192 <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8001e62:	4b8d      	ldr	r3, [pc, #564]	; (8002098 <BSP_TS_GetState+0x278>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	4a8c      	ldr	r2, [pc, #560]	; (800209c <BSP_TS_GetState+0x27c>)
 8001e6a:	7812      	ldrb	r2, [r2, #0]
 8001e6c:	b290      	uxth	r0, r2
 8001e6e:	f107 0120 	add.w	r1, r7, #32
 8001e72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e74:	0052      	lsls	r2, r2, #1
 8001e76:	188c      	adds	r4, r1, r2
 8001e78:	f107 0114 	add.w	r1, r7, #20
 8001e7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e7e:	0052      	lsls	r2, r2, #1
 8001e80:	440a      	add	r2, r1
 8001e82:	4621      	mov	r1, r4
 8001e84:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8001e86:	4b86      	ldr	r3, [pc, #536]	; (80020a0 <BSP_TS_GetState+0x280>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d11b      	bne.n	8001ec6 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 8001e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001e96:	4413      	add	r3, r2
 8001e98:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8001e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001ea4:	440b      	add	r3, r1
 8001ea6:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8001eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8001eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001ec0:	440b      	add	r3, r1
 8001ec2:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8001ec6:	4b76      	ldr	r3, [pc, #472]	; (80020a0 <BSP_TS_GetState+0x280>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d010      	beq.n	8001ef4 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 8001ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001eda:	4413      	add	r3, r2
 8001edc:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8001ee0:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001eee:	440b      	add	r3, r1
 8001ef0:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8001ef4:	4b6a      	ldr	r3, [pc, #424]	; (80020a0 <BSP_TS_GetState+0x280>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d010      	beq.n	8001f22 <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 8001f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001f08:	4413      	add	r3, r2
 8001f0a:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8001f0e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001f1c:	440b      	add	r3, r1
 8001f1e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8001f22:	4b5f      	ldr	r3, [pc, #380]	; (80020a0 <BSP_TS_GetState+0x280>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d01b      	beq.n	8001f66 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 8001f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001f36:	4413      	add	r3, r2
 8001f38:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8001f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001f44:	440b      	add	r3, r1
 8001f46:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8001f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001f52:	4413      	add	r3, r2
 8001f54:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8001f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001f60:	440b      	add	r3, r1
 8001f62:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8001f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001f6e:	4413      	add	r3, r2
 8001f70:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001f74:	4619      	mov	r1, r3
 8001f76:	4a4b      	ldr	r2, [pc, #300]	; (80020a4 <BSP_TS_GetState+0x284>)
 8001f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7e:	4299      	cmp	r1, r3
 8001f80:	d90e      	bls.n	8001fa0 <BSP_TS_GetState+0x180>
 8001f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8001f90:	4944      	ldr	r1, [pc, #272]	; (80020a4 <BSP_TS_GetState+0x284>)
 8001f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	e00d      	b.n	8001fbc <BSP_TS_GetState+0x19c>
 8001fa0:	4a40      	ldr	r2, [pc, #256]	; (80020a4 <BSP_TS_GetState+0x284>)
 8001fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001fb2:	440b      	add	r3, r1
 8001fb4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8001fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001fc8:	4413      	add	r3, r2
 8001fca:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4a35      	ldr	r2, [pc, #212]	; (80020a8 <BSP_TS_GetState+0x288>)
 8001fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd8:	4299      	cmp	r1, r3
 8001fda:	d90e      	bls.n	8001ffa <BSP_TS_GetState+0x1da>
 8001fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8001fea:	492f      	ldr	r1, [pc, #188]	; (80020a8 <BSP_TS_GetState+0x288>)
 8001fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	e00d      	b.n	8002016 <BSP_TS_GetState+0x1f6>
 8001ffa:	4a2b      	ldr	r2, [pc, #172]	; (80020a8 <BSP_TS_GetState+0x288>)
 8001ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002002:	b29a      	uxth	r2, r3
 8002004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800200c:	440b      	add	r3, r1
 800200e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	b29b      	uxth	r3, r3
 8002016:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 800201a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800201e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002022:	4413      	add	r3, r2
 8002024:	2b05      	cmp	r3, #5
 8002026:	dd17      	ble.n	8002058 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8002028:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002030:	4413      	add	r3, r2
 8002032:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002036:	4619      	mov	r1, r3
 8002038:	4a1a      	ldr	r2, [pc, #104]	; (80020a4 <BSP_TS_GetState+0x284>)
 800203a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800203c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8002040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002048:	4413      	add	r3, r2
 800204a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800204e:	4619      	mov	r1, r3
 8002050:	4a15      	ldr	r2, [pc, #84]	; (80020a8 <BSP_TS_GetState+0x288>)
 8002052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002054:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8002058:	4b10      	ldr	r3, [pc, #64]	; (800209c <BSP_TS_GetState+0x27c>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b70      	cmp	r3, #112	; 0x70
 800205e:	d125      	bne.n	80020ac <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 8002060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002068:	4413      	add	r3, r2
 800206a:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	4413      	add	r3, r2
 8002076:	460a      	mov	r2, r1
 8002078:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 800207a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002082:	4413      	add	r3, r2
 8002084:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800208c:	3304      	adds	r3, #4
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4413      	add	r3, r2
 8002092:	460a      	mov	r2, r1
 8002094:	809a      	strh	r2, [r3, #4]
 8002096:	e02c      	b.n	80020f2 <BSP_TS_GetState+0x2d2>
 8002098:	200004e4 	.word	0x200004e4
 800209c:	200004ed 	.word	0x200004ed
 80020a0:	200004ec 	.word	0x200004ec
 80020a4:	200004f0 	.word	0x200004f0
 80020a8:	20000504 	.word	0x20000504
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 80020ac:	4b42      	ldr	r3, [pc, #264]	; (80021b8 <BSP_TS_GetState+0x398>)
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	4619      	mov	r1, r3
 80020b2:	4a42      	ldr	r2, [pc, #264]	; (80021bc <BSP_TS_GetState+0x39c>)
 80020b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ba:	fb03 f301 	mul.w	r3, r3, r1
 80020be:	0b1b      	lsrs	r3, r3, #12
 80020c0:	b299      	uxth	r1, r3
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	4413      	add	r3, r2
 80020ca:	460a      	mov	r2, r1
 80020cc:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 80020ce:	4b3c      	ldr	r3, [pc, #240]	; (80021c0 <BSP_TS_GetState+0x3a0>)
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	4619      	mov	r1, r3
 80020d4:	4a3b      	ldr	r2, [pc, #236]	; (80021c4 <BSP_TS_GetState+0x3a4>)
 80020d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020dc:	fb03 f301 	mul.w	r3, r3, r1
 80020e0:	0b1b      	lsrs	r3, r3, #12
 80020e2:	b299      	uxth	r1, r3
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020e8:	3304      	adds	r3, #4
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	460a      	mov	r2, r1
 80020f0:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 80020f2:	4b35      	ldr	r3, [pc, #212]	; (80021c8 <BSP_TS_GetState+0x3a8>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	b298      	uxth	r0, r3
 80020f8:	f107 010c 	add.w	r1, r7, #12
 80020fc:	f107 0210 	add.w	r2, r7, #16
 8002100:	f107 0308 	add.w	r3, r7, #8
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	460b      	mov	r3, r1
 8002108:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800210a:	f7fe fbc7 	bl	800089c <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	b2d9      	uxtb	r1, r3
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002116:	4413      	add	r3, r2
 8002118:	3316      	adds	r3, #22
 800211a:	460a      	mov	r2, r1
 800211c:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	b2d9      	uxtb	r1, r3
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002126:	4413      	add	r3, r2
 8002128:	3320      	adds	r3, #32
 800212a:	460a      	mov	r2, r1
 800212c:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2b03      	cmp	r3, #3
 8002132:	d827      	bhi.n	8002184 <BSP_TS_GetState+0x364>
 8002134:	a201      	add	r2, pc, #4	; (adr r2, 800213c <BSP_TS_GetState+0x31c>)
 8002136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213a:	bf00      	nop
 800213c:	0800214d 	.word	0x0800214d
 8002140:	0800215b 	.word	0x0800215b
 8002144:	08002169 	.word	0x08002169
 8002148:	08002177 	.word	0x08002177
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002150:	4413      	add	r3, r2
 8002152:	331b      	adds	r3, #27
 8002154:	2201      	movs	r2, #1
 8002156:	701a      	strb	r2, [r3, #0]
          break;
 8002158:	e018      	b.n	800218c <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800215e:	4413      	add	r3, r2
 8002160:	331b      	adds	r3, #27
 8002162:	2202      	movs	r2, #2
 8002164:	701a      	strb	r2, [r3, #0]
          break;
 8002166:	e011      	b.n	800218c <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800216c:	4413      	add	r3, r2
 800216e:	331b      	adds	r3, #27
 8002170:	2203      	movs	r2, #3
 8002172:	701a      	strb	r2, [r3, #0]
          break;
 8002174:	e00a      	b.n	800218c <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800217a:	4413      	add	r3, r2
 800217c:	331b      	adds	r3, #27
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]
          break;
 8002182:	e003      	b.n	800218c <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 800218a:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 800218c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800218e:	3301      	adds	r3, #1
 8002190:	64bb      	str	r3, [r7, #72]	; 0x48
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	461a      	mov	r2, r3
 8002198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800219a:	4293      	cmp	r3, r2
 800219c:	f4ff ae61 	bcc.w	8001e62 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f813 	bl	80021cc <BSP_TS_Get_GestureId>
 80021a6:	4603      	mov	r3, r0
 80021a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80021ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3754      	adds	r7, #84	; 0x54
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd90      	pop	{r4, r7, pc}
 80021b8:	200004e8 	.word	0x200004e8
 80021bc:	200004f0 	.word	0x200004f0
 80021c0:	200004ea 	.word	0x200004ea
 80021c4:	20000504 	.word	0x20000504
 80021c8:	200004ed 	.word	0x200004ed

080021cc <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 80021d8:	2300      	movs	r3, #0
 80021da:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80021dc:	4b1f      	ldr	r3, [pc, #124]	; (800225c <BSP_TS_Get_GestureId+0x90>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	f107 0208 	add.w	r2, r7, #8
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe fb3e 	bl	800086a <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2b18      	cmp	r3, #24
 80021f2:	d01b      	beq.n	800222c <BSP_TS_Get_GestureId+0x60>
 80021f4:	2b18      	cmp	r3, #24
 80021f6:	d806      	bhi.n	8002206 <BSP_TS_Get_GestureId+0x3a>
 80021f8:	2b10      	cmp	r3, #16
 80021fa:	d00f      	beq.n	800221c <BSP_TS_Get_GestureId+0x50>
 80021fc:	2b14      	cmp	r3, #20
 80021fe:	d011      	beq.n	8002224 <BSP_TS_Get_GestureId+0x58>
 8002200:	2b00      	cmp	r3, #0
 8002202:	d007      	beq.n	8002214 <BSP_TS_Get_GestureId+0x48>
 8002204:	e022      	b.n	800224c <BSP_TS_Get_GestureId+0x80>
 8002206:	2b40      	cmp	r3, #64	; 0x40
 8002208:	d018      	beq.n	800223c <BSP_TS_Get_GestureId+0x70>
 800220a:	2b49      	cmp	r3, #73	; 0x49
 800220c:	d01a      	beq.n	8002244 <BSP_TS_Get_GestureId+0x78>
 800220e:	2b1c      	cmp	r3, #28
 8002210:	d010      	beq.n	8002234 <BSP_TS_Get_GestureId+0x68>
 8002212:	e01b      	b.n	800224c <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800221a:	e01a      	b.n	8002252 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002222:	e016      	b.n	8002252 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2202      	movs	r2, #2
 8002228:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800222a:	e012      	b.n	8002252 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2203      	movs	r2, #3
 8002230:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002232:	e00e      	b.n	8002252 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2204      	movs	r2, #4
 8002238:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800223a:	e00a      	b.n	8002252 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2205      	movs	r2, #5
 8002240:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002242:	e006      	b.n	8002252 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2206      	movs	r2, #6
 8002248:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800224a:	e002      	b.n	8002252 <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
      break;
 8002250:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8002252:	7bfb      	ldrb	r3, [r7, #15]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	200004ed 	.word	0x200004ed

08002260 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002264:	2003      	movs	r0, #3
 8002266:	f000 f94b 	bl	8002500 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800226a:	2000      	movs	r0, #0
 800226c:	f000 f806 	bl	800227c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002270:	f008 f92c 	bl	800a4cc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_InitTick+0x54>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <HAL_InitTick+0x58>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	4619      	mov	r1, r3
 800228e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002292:	fbb3 f3f1 	udiv	r3, r3, r1
 8002296:	fbb2 f3f3 	udiv	r3, r2, r3
 800229a:	4618      	mov	r0, r3
 800229c:	f000 f965 	bl	800256a <HAL_SYSTICK_Config>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e00e      	b.n	80022c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b0f      	cmp	r3, #15
 80022ae:	d80a      	bhi.n	80022c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b0:	2200      	movs	r2, #0
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	f04f 30ff 	mov.w	r0, #4294967295
 80022b8:	f000 f92d 	bl	8002516 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022bc:	4a06      	ldr	r2, [pc, #24]	; (80022d8 <HAL_InitTick+0x5c>)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	e000      	b.n	80022c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000304 	.word	0x20000304
 80022d4:	20000040 	.word	0x20000040
 80022d8:	2000003c 	.word	0x2000003c

080022dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <HAL_IncTick+0x20>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	4b06      	ldr	r3, [pc, #24]	; (8002300 <HAL_IncTick+0x24>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4413      	add	r3, r2
 80022ec:	4a04      	ldr	r2, [pc, #16]	; (8002300 <HAL_IncTick+0x24>)
 80022ee:	6013      	str	r3, [r2, #0]
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	20000040 	.word	0x20000040
 8002300:	20000624 	.word	0x20000624

08002304 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return uwTick;
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <HAL_GetTick+0x14>)
 800230a:	681b      	ldr	r3, [r3, #0]
}
 800230c:	4618      	mov	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	20000624 	.word	0x20000624

0800231c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002324:	f7ff ffee 	bl	8002304 <HAL_GetTick>
 8002328:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002334:	d005      	beq.n	8002342 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002336:	4b09      	ldr	r3, [pc, #36]	; (800235c <HAL_Delay+0x40>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4413      	add	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002342:	bf00      	nop
 8002344:	f7ff ffde 	bl	8002304 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	429a      	cmp	r2, r3
 8002352:	d8f7      	bhi.n	8002344 <HAL_Delay+0x28>
  {
  }
}
 8002354:	bf00      	nop
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000040 	.word	0x20000040

08002360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002370:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800237c:	4013      	ands	r3, r2
 800237e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <__NVIC_SetPriorityGrouping+0x44>)
 800238a:	4313      	orrs	r3, r2
 800238c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800238e:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	60d3      	str	r3, [r2, #12]
}
 8002394:	bf00      	nop
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	e000ed00 	.word	0xe000ed00
 80023a4:	05fa0000 	.word	0x05fa0000

080023a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ac:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <__NVIC_GetPriorityGrouping+0x18>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	f003 0307 	and.w	r3, r3, #7
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	db0b      	blt.n	80023ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	f003 021f 	and.w	r2, r3, #31
 80023dc:	4907      	ldr	r1, [pc, #28]	; (80023fc <__NVIC_EnableIRQ+0x38>)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	2001      	movs	r0, #1
 80023e6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	e000e100 	.word	0xe000e100

08002400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	6039      	str	r1, [r7, #0]
 800240a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002410:	2b00      	cmp	r3, #0
 8002412:	db0a      	blt.n	800242a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	b2da      	uxtb	r2, r3
 8002418:	490c      	ldr	r1, [pc, #48]	; (800244c <__NVIC_SetPriority+0x4c>)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	0112      	lsls	r2, r2, #4
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	440b      	add	r3, r1
 8002424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002428:	e00a      	b.n	8002440 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	b2da      	uxtb	r2, r3
 800242e:	4908      	ldr	r1, [pc, #32]	; (8002450 <__NVIC_SetPriority+0x50>)
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	3b04      	subs	r3, #4
 8002438:	0112      	lsls	r2, r2, #4
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	440b      	add	r3, r1
 800243e:	761a      	strb	r2, [r3, #24]
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	e000e100 	.word	0xe000e100
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002454:	b480      	push	{r7}
 8002456:	b089      	sub	sp, #36	; 0x24
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f1c3 0307 	rsb	r3, r3, #7
 800246e:	2b04      	cmp	r3, #4
 8002470:	bf28      	it	cs
 8002472:	2304      	movcs	r3, #4
 8002474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3304      	adds	r3, #4
 800247a:	2b06      	cmp	r3, #6
 800247c:	d902      	bls.n	8002484 <NVIC_EncodePriority+0x30>
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3b03      	subs	r3, #3
 8002482:	e000      	b.n	8002486 <NVIC_EncodePriority+0x32>
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002488:	f04f 32ff 	mov.w	r2, #4294967295
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43da      	mvns	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	401a      	ands	r2, r3
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800249c:	f04f 31ff 	mov.w	r1, #4294967295
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	fa01 f303 	lsl.w	r3, r1, r3
 80024a6:	43d9      	mvns	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ac:	4313      	orrs	r3, r2
         );
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3724      	adds	r7, #36	; 0x24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
	...

080024bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024cc:	d301      	bcc.n	80024d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ce:	2301      	movs	r3, #1
 80024d0:	e00f      	b.n	80024f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d2:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <SysTick_Config+0x40>)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024da:	210f      	movs	r1, #15
 80024dc:	f04f 30ff 	mov.w	r0, #4294967295
 80024e0:	f7ff ff8e 	bl	8002400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <SysTick_Config+0x40>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ea:	4b04      	ldr	r3, [pc, #16]	; (80024fc <SysTick_Config+0x40>)
 80024ec:	2207      	movs	r2, #7
 80024ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	e000e010 	.word	0xe000e010

08002500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff ff29 	bl	8002360 <__NVIC_SetPriorityGrouping>
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af00      	add	r7, sp, #0
 800251c:	4603      	mov	r3, r0
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	607a      	str	r2, [r7, #4]
 8002522:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002528:	f7ff ff3e 	bl	80023a8 <__NVIC_GetPriorityGrouping>
 800252c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	6978      	ldr	r0, [r7, #20]
 8002534:	f7ff ff8e 	bl	8002454 <NVIC_EncodePriority>
 8002538:	4602      	mov	r2, r0
 800253a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253e:	4611      	mov	r1, r2
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff5d 	bl	8002400 <__NVIC_SetPriority>
}
 8002546:	bf00      	nop
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	4603      	mov	r3, r0
 8002556:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff31 	bl	80023c4 <__NVIC_EnableIRQ>
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff ffa2 	bl	80024bc <SysTick_Config>
 8002578:	4603      	mov	r3, r0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e062      	b.n	800265c <HAL_DCMI_Init+0xd8>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d102      	bne.n	80025a8 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else  
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f007 ffb6 	bl	800a514 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6819      	ldr	r1, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	4b2a      	ldr	r3, [pc, #168]	; (8002664 <HAL_DCMI_Init+0xe0>)
 80025bc:	400b      	ands	r3, r1
 80025be:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6819      	ldr	r1, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80025d4:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80025e0:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80025ec:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80025f8:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fe:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8002604:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	601a      	str	r2, [r3, #0]
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b10      	cmp	r3, #16
 8002614:	d112      	bne.n	800263c <HAL_DCMI_Init+0xb8>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	7f1b      	ldrb	r3, [r3, #28]
 800261a:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	7f5b      	ldrb	r3, [r3, #29]
 8002620:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8002622:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	7f9b      	ldrb	r3, [r3, #30]
 8002628:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 800262a:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	7fdb      	ldrb	r3, [r3, #31]
 8002632:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8002638:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 800263a:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 021e 	orr.w	r2, r2, #30
 800264a:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	ffe0f007 	.word	0xffe0f007

08002668 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002674:	f7ff fe46 	bl	8002304 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e099      	b.n	80027b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0201 	bic.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026a4:	e00f      	b.n	80026c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026a6:	f7ff fe2d 	bl	8002304 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b05      	cmp	r3, #5
 80026b2:	d908      	bls.n	80026c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2220      	movs	r2, #32
 80026b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2203      	movs	r2, #3
 80026be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e078      	b.n	80027b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1e8      	bne.n	80026a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	4b38      	ldr	r3, [pc, #224]	; (80027c0 <HAL_DMA_Init+0x158>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800270a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	4313      	orrs	r3, r2
 8002716:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	2b04      	cmp	r3, #4
 800271e:	d107      	bne.n	8002730 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002728:	4313      	orrs	r3, r2
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	4313      	orrs	r3, r2
 800272e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f023 0307 	bic.w	r3, r3, #7
 8002746:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	4313      	orrs	r3, r2
 8002750:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	2b04      	cmp	r3, #4
 8002758:	d117      	bne.n	800278a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	4313      	orrs	r3, r2
 8002762:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00e      	beq.n	800278a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 f8bd 	bl	80028ec <DMA_CheckFifoParam>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2240      	movs	r2, #64	; 0x40
 800277c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002786:	2301      	movs	r3, #1
 8002788:	e016      	b.n	80027b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f874 	bl	8002880 <DMA_CalcBaseAndBitshift>
 8002798:	4603      	mov	r3, r0
 800279a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a0:	223f      	movs	r2, #63	; 0x3f
 80027a2:	409a      	lsls	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	f010803f 	.word	0xf010803f

080027c4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e050      	b.n	8002878 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d101      	bne.n	80027e6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80027e2:	2302      	movs	r3, #2
 80027e4:	e048      	b.n	8002878 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0201 	bic.w	r2, r2, #1
 80027f4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2200      	movs	r2, #0
 8002804:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2200      	movs	r2, #0
 800280c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2200      	movs	r2, #0
 8002814:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2200      	movs	r2, #0
 800281c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2221      	movs	r2, #33	; 0x21
 8002824:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f82a 	bl	8002880 <DMA_CalcBaseAndBitshift>
 800282c:	4603      	mov	r3, r0
 800282e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002834:	223f      	movs	r2, #63	; 0x3f
 8002836:	409a      	lsls	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	b2db      	uxtb	r3, r3
 800288e:	3b10      	subs	r3, #16
 8002890:	4a13      	ldr	r2, [pc, #76]	; (80028e0 <DMA_CalcBaseAndBitshift+0x60>)
 8002892:	fba2 2303 	umull	r2, r3, r2, r3
 8002896:	091b      	lsrs	r3, r3, #4
 8002898:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800289a:	4a12      	ldr	r2, [pc, #72]	; (80028e4 <DMA_CalcBaseAndBitshift+0x64>)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4413      	add	r3, r2
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	461a      	mov	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d908      	bls.n	80028c0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <DMA_CalcBaseAndBitshift+0x68>)
 80028b6:	4013      	ands	r3, r2
 80028b8:	1d1a      	adds	r2, r3, #4
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	659a      	str	r2, [r3, #88]	; 0x58
 80028be:	e006      	b.n	80028ce <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	461a      	mov	r2, r3
 80028c6:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <DMA_CalcBaseAndBitshift+0x68>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	aaaaaaab 	.word	0xaaaaaaab
 80028e4:	0800cdec 	.word	0x0800cdec
 80028e8:	fffffc00 	.word	0xfffffc00

080028ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d11f      	bne.n	8002946 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2b03      	cmp	r3, #3
 800290a:	d855      	bhi.n	80029b8 <DMA_CheckFifoParam+0xcc>
 800290c:	a201      	add	r2, pc, #4	; (adr r2, 8002914 <DMA_CheckFifoParam+0x28>)
 800290e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002912:	bf00      	nop
 8002914:	08002925 	.word	0x08002925
 8002918:	08002937 	.word	0x08002937
 800291c:	08002925 	.word	0x08002925
 8002920:	080029b9 	.word	0x080029b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002928:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d045      	beq.n	80029bc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002934:	e042      	b.n	80029bc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800293e:	d13f      	bne.n	80029c0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002944:	e03c      	b.n	80029c0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800294e:	d121      	bne.n	8002994 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2b03      	cmp	r3, #3
 8002954:	d836      	bhi.n	80029c4 <DMA_CheckFifoParam+0xd8>
 8002956:	a201      	add	r2, pc, #4	; (adr r2, 800295c <DMA_CheckFifoParam+0x70>)
 8002958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295c:	0800296d 	.word	0x0800296d
 8002960:	08002973 	.word	0x08002973
 8002964:	0800296d 	.word	0x0800296d
 8002968:	08002985 	.word	0x08002985
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	73fb      	strb	r3, [r7, #15]
      break;
 8002970:	e02f      	b.n	80029d2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002976:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d024      	beq.n	80029c8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002982:	e021      	b.n	80029c8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002988:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800298c:	d11e      	bne.n	80029cc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002992:	e01b      	b.n	80029cc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d902      	bls.n	80029a0 <DMA_CheckFifoParam+0xb4>
 800299a:	2b03      	cmp	r3, #3
 800299c:	d003      	beq.n	80029a6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800299e:	e018      	b.n	80029d2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	73fb      	strb	r3, [r7, #15]
      break;
 80029a4:	e015      	b.n	80029d2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00e      	beq.n	80029d0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	73fb      	strb	r3, [r7, #15]
      break;
 80029b6:	e00b      	b.n	80029d0 <DMA_CheckFifoParam+0xe4>
      break;
 80029b8:	bf00      	nop
 80029ba:	e00a      	b.n	80029d2 <DMA_CheckFifoParam+0xe6>
      break;
 80029bc:	bf00      	nop
 80029be:	e008      	b.n	80029d2 <DMA_CheckFifoParam+0xe6>
      break;
 80029c0:	bf00      	nop
 80029c2:	e006      	b.n	80029d2 <DMA_CheckFifoParam+0xe6>
      break;
 80029c4:	bf00      	nop
 80029c6:	e004      	b.n	80029d2 <DMA_CheckFifoParam+0xe6>
      break;
 80029c8:	bf00      	nop
 80029ca:	e002      	b.n	80029d2 <DMA_CheckFifoParam+0xe6>
      break;   
 80029cc:	bf00      	nop
 80029ce:	e000      	b.n	80029d2 <DMA_CheckFifoParam+0xe6>
      break;
 80029d0:	bf00      	nop
    }
  } 
  
  return status; 
 80029d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e039      	b.n	8002a66 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d106      	bne.n	8002a0c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f007 fe42 	bl	800a690 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a30:	f023 0107 	bic.w	r1, r3, #7
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a46:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <HAL_DMA2D_Init+0x90>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	68d1      	ldr	r1, [r2, #12]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6812      	ldr	r2, [r2, #0]
 8002a52:	430b      	orrs	r3, r1
 8002a54:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	ffffc000 	.word	0xffffc000

08002a74 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
 8002a80:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d101      	bne.n	8002a90 <HAL_DMA2D_Start+0x1c>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e018      	b.n	8002ac2 <HAL_DMA2D_Start+0x4e>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	68b9      	ldr	r1, [r7, #8]
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 fa98 	bl	8002fe0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 0201 	orr.w	r2, r2, #1
 8002abe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b086      	sub	sp, #24
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d056      	beq.n	8002b94 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8002ae6:	f7ff fc0d 	bl	8002304 <HAL_GetTick>
 8002aea:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002aec:	e04b      	b.n	8002b86 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d023      	beq.n	8002b48 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f003 0320 	and.w	r3, r3, #32
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d005      	beq.n	8002b16 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0e:	f043 0202 	orr.w	r2, r3, #2
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b24:	f043 0201 	orr.w	r2, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2221      	movs	r2, #33	; 0x21
 8002b32:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2204      	movs	r2, #4
 8002b38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0a5      	b.n	8002c94 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4e:	d01a      	beq.n	8002b86 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002b50:	f7ff fbd8 	bl	8002304 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d302      	bcc.n	8002b66 <HAL_DMA2D_PollForTransfer+0x9c>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10f      	bne.n	8002b86 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6a:	f043 0220 	orr.w	r2, r3, #32
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2203      	movs	r2, #3
 8002b76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e086      	b.n	8002c94 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0ac      	beq.n	8002aee <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	f003 0320 	and.w	r3, r3, #32
 8002b9e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	f003 0320 	and.w	r3, r3, #32
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d061      	beq.n	8002c7a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002bb6:	f7ff fba5 	bl	8002304 <HAL_GetTick>
 8002bba:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002bbc:	e056      	b.n	8002c6c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d02e      	beq.n	8002c2e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d005      	beq.n	8002be6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bde:	f043 0204 	orr.w	r2, r3, #4
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f003 0320 	and.w	r3, r3, #32
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d005      	beq.n	8002bfc <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf4:	f043 0202 	orr.w	r2, r3, #2
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d005      	beq.n	8002c12 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0a:	f043 0201 	orr.w	r2, r3, #1
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2229      	movs	r2, #41	; 0x29
 8002c18:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e032      	b.n	8002c94 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c34:	d01a      	beq.n	8002c6c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002c36:	f7ff fb65 	bl	8002304 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d302      	bcc.n	8002c4c <HAL_DMA2D_PollForTransfer+0x182>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10f      	bne.n	8002c6c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c50:	f043 0220 	orr.w	r2, r3, #32
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e013      	b.n	8002c94 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f003 0310 	and.w	r3, r3, #16
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0a1      	beq.n	8002bbe <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2212      	movs	r2, #18
 8002c80:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d026      	beq.n	8002d0c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d021      	beq.n	8002d0c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cd6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cdc:	f043 0201 	orr.w	r2, r3, #1
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2204      	movs	r2, #4
 8002cf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 0320 	and.w	r3, r3, #32
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d026      	beq.n	8002d64 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d021      	beq.n	8002d64 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d2e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2220      	movs	r2, #32
 8002d36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3c:	f043 0202 	orr.w	r2, r3, #2
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2204      	movs	r2, #4
 8002d48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f003 0308 	and.w	r3, r3, #8
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d026      	beq.n	8002dbc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d021      	beq.n	8002dbc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d86:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2208      	movs	r2, #8
 8002d8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d94:	f043 0204 	orr.w	r2, r3, #4
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2204      	movs	r2, #4
 8002da0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d013      	beq.n	8002dee <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00e      	beq.n	8002dee <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dde:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2204      	movs	r2, #4
 8002de6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f853 	bl	8002e94 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d024      	beq.n	8002e42 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d01f      	beq.n	8002e42 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e10:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2202      	movs	r2, #2
 8002e18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f003 0310 	and.w	r3, r3, #16
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d01f      	beq.n	8002e8c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d01a      	beq.n	8002e8c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e64:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2210      	movs	r2, #16
 8002e6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f80e 	bl	8002ea8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002e8c:	bf00      	nop
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_DMA2D_ConfigLayer+0x20>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e079      	b.n	8002fd0 <HAL_DMA2D_ConfigLayer+0x114>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	3318      	adds	r3, #24
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	041b      	lsls	r3, r3, #16
 8002f02:	4313      	orrs	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002f06:	4b35      	ldr	r3, [pc, #212]	; (8002fdc <HAL_DMA2D_ConfigLayer+0x120>)
 8002f08:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b0a      	cmp	r3, #10
 8002f10:	d003      	beq.n	8002f1a <HAL_DMA2D_ConfigLayer+0x5e>
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b09      	cmp	r3, #9
 8002f18:	d107      	bne.n	8002f2a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	e005      	b.n	8002f36 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	061b      	lsls	r3, r3, #24
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d120      	bne.n	8002f7e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	43db      	mvns	r3, r3
 8002f46:	ea02 0103 	and.w	r1, r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b0a      	cmp	r3, #10
 8002f64:	d003      	beq.n	8002f6e <HAL_DMA2D_ConfigLayer+0xb2>
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b09      	cmp	r3, #9
 8002f6c:	d127      	bne.n	8002fbe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002f7a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f7c:	e01f      	b.n	8002fbe <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69da      	ldr	r2, [r3, #28]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	43db      	mvns	r3, r3
 8002f88:	ea02 0103 	and.w	r1, r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	6812      	ldr	r2, [r2, #0]
 8002f9e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b0a      	cmp	r3, #10
 8002fa6:	d003      	beq.n	8002fb0 <HAL_DMA2D_ConfigLayer+0xf4>
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b09      	cmp	r3, #9
 8002fae:	d106      	bne.n	8002fbe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002fbc:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	371c      	adds	r7, #28
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	ff03000f 	.word	0xff03000f

08002fe0 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b08b      	sub	sp, #44	; 0x2c
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
 8002fec:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	041a      	lsls	r2, r3, #16
 8002ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffe:	431a      	orrs	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003018:	d174      	bne.n	8003104 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003020:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003028:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003030:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d108      	bne.n	8003052 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	431a      	orrs	r2, r3
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	4313      	orrs	r3, r2
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	4313      	orrs	r3, r2
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
 8003050:	e053      	b.n	80030fa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d106      	bne.n	8003068 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	4313      	orrs	r3, r2
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	4313      	orrs	r3, r2
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
 8003066:	e048      	b.n	80030fa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d111      	bne.n	8003094 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	0cdb      	lsrs	r3, r3, #19
 8003074:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	0a9b      	lsrs	r3, r3, #10
 800307a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	08db      	lsrs	r3, r3, #3
 8003080:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	015a      	lsls	r2, r3, #5
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	02db      	lsls	r3, r3, #11
 800308a:	4313      	orrs	r3, r2
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	4313      	orrs	r3, r2
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
 8003092:	e032      	b.n	80030fa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	2b03      	cmp	r3, #3
 800309a:	d117      	bne.n	80030cc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	0fdb      	lsrs	r3, r3, #31
 80030a0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	0cdb      	lsrs	r3, r3, #19
 80030a6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	0adb      	lsrs	r3, r3, #11
 80030ac:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	08db      	lsrs	r3, r3, #3
 80030b2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	029b      	lsls	r3, r3, #10
 80030bc:	431a      	orrs	r2, r3
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	03db      	lsls	r3, r3, #15
 80030c2:	4313      	orrs	r3, r2
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
 80030ca:	e016      	b.n	80030fa <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	0f1b      	lsrs	r3, r3, #28
 80030d0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	0d1b      	lsrs	r3, r3, #20
 80030d6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	0b1b      	lsrs	r3, r3, #12
 80030dc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	011a      	lsls	r2, r3, #4
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	021b      	lsls	r3, r3, #8
 80030ec:	431a      	orrs	r2, r3
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	031b      	lsls	r3, r3, #12
 80030f2:	4313      	orrs	r3, r2
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003100:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003102:	e003      	b.n	800310c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	60da      	str	r2, [r3, #12]
}
 800310c:	bf00      	nop
 800310e:	372c      	adds	r7, #44	; 0x2c
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003118:	b480      	push	{r7}
 800311a:	b089      	sub	sp, #36	; 0x24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003122:	2300      	movs	r3, #0
 8003124:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800312a:	2300      	movs	r3, #0
 800312c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800312e:	2300      	movs	r3, #0
 8003130:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
 8003136:	e175      	b.n	8003424 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003138:	2201      	movs	r2, #1
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	4013      	ands	r3, r2
 800314a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	429a      	cmp	r2, r3
 8003152:	f040 8164 	bne.w	800341e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d003      	beq.n	8003166 <HAL_GPIO_Init+0x4e>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b12      	cmp	r3, #18
 8003164:	d123      	bne.n	80031ae <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	08da      	lsrs	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3208      	adds	r2, #8
 800316e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	220f      	movs	r2, #15
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4013      	ands	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	691a      	ldr	r2, [r3, #16]
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	08da      	lsrs	r2, r3, #3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3208      	adds	r2, #8
 80031a8:	69b9      	ldr	r1, [r7, #24]
 80031aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	2203      	movs	r2, #3
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43db      	mvns	r3, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4013      	ands	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 0203 	and.w	r2, r3, #3
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d00b      	beq.n	8003202 <HAL_GPIO_Init+0xea>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d007      	beq.n	8003202 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031f6:	2b11      	cmp	r3, #17
 80031f8:	d003      	beq.n	8003202 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b12      	cmp	r3, #18
 8003200:	d130      	bne.n	8003264 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	2203      	movs	r2, #3
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4013      	ands	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4313      	orrs	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003238:	2201      	movs	r2, #1
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	091b      	lsrs	r3, r3, #4
 800324e:	f003 0201 	and.w	r2, r3, #1
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	2203      	movs	r2, #3
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 80be 	beq.w	800341e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032a2:	4b65      	ldr	r3, [pc, #404]	; (8003438 <HAL_GPIO_Init+0x320>)
 80032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a6:	4a64      	ldr	r2, [pc, #400]	; (8003438 <HAL_GPIO_Init+0x320>)
 80032a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032ac:	6453      	str	r3, [r2, #68]	; 0x44
 80032ae:	4b62      	ldr	r3, [pc, #392]	; (8003438 <HAL_GPIO_Init+0x320>)
 80032b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80032ba:	4a60      	ldr	r2, [pc, #384]	; (800343c <HAL_GPIO_Init+0x324>)
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	089b      	lsrs	r3, r3, #2
 80032c0:	3302      	adds	r3, #2
 80032c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	220f      	movs	r2, #15
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43db      	mvns	r3, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4013      	ands	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a57      	ldr	r2, [pc, #348]	; (8003440 <HAL_GPIO_Init+0x328>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d037      	beq.n	8003356 <HAL_GPIO_Init+0x23e>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a56      	ldr	r2, [pc, #344]	; (8003444 <HAL_GPIO_Init+0x32c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d031      	beq.n	8003352 <HAL_GPIO_Init+0x23a>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a55      	ldr	r2, [pc, #340]	; (8003448 <HAL_GPIO_Init+0x330>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d02b      	beq.n	800334e <HAL_GPIO_Init+0x236>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a54      	ldr	r2, [pc, #336]	; (800344c <HAL_GPIO_Init+0x334>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d025      	beq.n	800334a <HAL_GPIO_Init+0x232>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a53      	ldr	r2, [pc, #332]	; (8003450 <HAL_GPIO_Init+0x338>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d01f      	beq.n	8003346 <HAL_GPIO_Init+0x22e>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a52      	ldr	r2, [pc, #328]	; (8003454 <HAL_GPIO_Init+0x33c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d019      	beq.n	8003342 <HAL_GPIO_Init+0x22a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a51      	ldr	r2, [pc, #324]	; (8003458 <HAL_GPIO_Init+0x340>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d013      	beq.n	800333e <HAL_GPIO_Init+0x226>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a50      	ldr	r2, [pc, #320]	; (800345c <HAL_GPIO_Init+0x344>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d00d      	beq.n	800333a <HAL_GPIO_Init+0x222>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a4f      	ldr	r2, [pc, #316]	; (8003460 <HAL_GPIO_Init+0x348>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d007      	beq.n	8003336 <HAL_GPIO_Init+0x21e>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a4e      	ldr	r2, [pc, #312]	; (8003464 <HAL_GPIO_Init+0x34c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d101      	bne.n	8003332 <HAL_GPIO_Init+0x21a>
 800332e:	2309      	movs	r3, #9
 8003330:	e012      	b.n	8003358 <HAL_GPIO_Init+0x240>
 8003332:	230a      	movs	r3, #10
 8003334:	e010      	b.n	8003358 <HAL_GPIO_Init+0x240>
 8003336:	2308      	movs	r3, #8
 8003338:	e00e      	b.n	8003358 <HAL_GPIO_Init+0x240>
 800333a:	2307      	movs	r3, #7
 800333c:	e00c      	b.n	8003358 <HAL_GPIO_Init+0x240>
 800333e:	2306      	movs	r3, #6
 8003340:	e00a      	b.n	8003358 <HAL_GPIO_Init+0x240>
 8003342:	2305      	movs	r3, #5
 8003344:	e008      	b.n	8003358 <HAL_GPIO_Init+0x240>
 8003346:	2304      	movs	r3, #4
 8003348:	e006      	b.n	8003358 <HAL_GPIO_Init+0x240>
 800334a:	2303      	movs	r3, #3
 800334c:	e004      	b.n	8003358 <HAL_GPIO_Init+0x240>
 800334e:	2302      	movs	r3, #2
 8003350:	e002      	b.n	8003358 <HAL_GPIO_Init+0x240>
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <HAL_GPIO_Init+0x240>
 8003356:	2300      	movs	r3, #0
 8003358:	69fa      	ldr	r2, [r7, #28]
 800335a:	f002 0203 	and.w	r2, r2, #3
 800335e:	0092      	lsls	r2, r2, #2
 8003360:	4093      	lsls	r3, r2
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	4313      	orrs	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003368:	4934      	ldr	r1, [pc, #208]	; (800343c <HAL_GPIO_Init+0x324>)
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	089b      	lsrs	r3, r3, #2
 800336e:	3302      	adds	r3, #2
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003376:	4b3c      	ldr	r3, [pc, #240]	; (8003468 <HAL_GPIO_Init+0x350>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	43db      	mvns	r3, r3
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	4013      	ands	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800339a:	4a33      	ldr	r2, [pc, #204]	; (8003468 <HAL_GPIO_Init+0x350>)
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80033a0:	4b31      	ldr	r3, [pc, #196]	; (8003468 <HAL_GPIO_Init+0x350>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	43db      	mvns	r3, r3
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4013      	ands	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033c4:	4a28      	ldr	r2, [pc, #160]	; (8003468 <HAL_GPIO_Init+0x350>)
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033ca:	4b27      	ldr	r3, [pc, #156]	; (8003468 <HAL_GPIO_Init+0x350>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	43db      	mvns	r3, r3
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4013      	ands	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033ee:	4a1e      	ldr	r2, [pc, #120]	; (8003468 <HAL_GPIO_Init+0x350>)
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033f4:	4b1c      	ldr	r3, [pc, #112]	; (8003468 <HAL_GPIO_Init+0x350>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	43db      	mvns	r3, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4013      	ands	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003418:	4a13      	ldr	r2, [pc, #76]	; (8003468 <HAL_GPIO_Init+0x350>)
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	3301      	adds	r3, #1
 8003422:	61fb      	str	r3, [r7, #28]
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	2b0f      	cmp	r3, #15
 8003428:	f67f ae86 	bls.w	8003138 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800342c:	bf00      	nop
 800342e:	3724      	adds	r7, #36	; 0x24
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	40023800 	.word	0x40023800
 800343c:	40013800 	.word	0x40013800
 8003440:	40020000 	.word	0x40020000
 8003444:	40020400 	.word	0x40020400
 8003448:	40020800 	.word	0x40020800
 800344c:	40020c00 	.word	0x40020c00
 8003450:	40021000 	.word	0x40021000
 8003454:	40021400 	.word	0x40021400
 8003458:	40021800 	.word	0x40021800
 800345c:	40021c00 	.word	0x40021c00
 8003460:	40022000 	.word	0x40022000
 8003464:	40022400 	.word	0x40022400
 8003468:	40013c00 	.word	0x40013c00

0800346c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	807b      	strh	r3, [r7, #2]
 8003478:	4613      	mov	r3, r2
 800347a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800347c:	787b      	ldrb	r3, [r7, #1]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003482:	887a      	ldrh	r2, [r7, #2]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003488:	e003      	b.n	8003492 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800348a:	887b      	ldrh	r3, [r7, #2]
 800348c:	041a      	lsls	r2, r3, #16
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	619a      	str	r2, [r3, #24]
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
	...

080034a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e07f      	b.n	80035b2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d106      	bne.n	80034cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f8a9 	bl	800361e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2224      	movs	r2, #36	; 0x24
 80034d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0201 	bic.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003500:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d107      	bne.n	800351a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003516:	609a      	str	r2, [r3, #8]
 8003518:	e006      	b.n	8003528 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003526:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	2b02      	cmp	r3, #2
 800352e:	d104      	bne.n	800353a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003538:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6859      	ldr	r1, [r3, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	4b1d      	ldr	r3, [pc, #116]	; (80035bc <HAL_I2C_Init+0x11c>)
 8003546:	430b      	orrs	r3, r1
 8003548:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003558:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691a      	ldr	r2, [r3, #16]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	ea42 0103 	orr.w	r1, r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	021a      	lsls	r2, r3, #8
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69d9      	ldr	r1, [r3, #28]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a1a      	ldr	r2, [r3, #32]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0201 	orr.w	r2, r2, #1
 8003592:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	02008000 	.word	0x02008000

080035c0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e021      	b.n	8003616 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2224      	movs	r2, #36	; 0x24
 80035d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0201 	bic.w	r2, r2, #1
 80035e8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f821 	bl	8003632 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800361e:	b480      	push	{r7}
 8003620:	b083      	sub	sp, #12
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
	...

08003648 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af02      	add	r7, sp, #8
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	4608      	mov	r0, r1
 8003652:	4611      	mov	r1, r2
 8003654:	461a      	mov	r2, r3
 8003656:	4603      	mov	r3, r0
 8003658:	817b      	strh	r3, [r7, #10]
 800365a:	460b      	mov	r3, r1
 800365c:	813b      	strh	r3, [r7, #8]
 800365e:	4613      	mov	r3, r2
 8003660:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b20      	cmp	r3, #32
 800366c:	f040 80f9 	bne.w	8003862 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <HAL_I2C_Mem_Write+0x34>
 8003676:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003678:	2b00      	cmp	r3, #0
 800367a:	d105      	bne.n	8003688 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003682:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e0ed      	b.n	8003864 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800368e:	2b01      	cmp	r3, #1
 8003690:	d101      	bne.n	8003696 <HAL_I2C_Mem_Write+0x4e>
 8003692:	2302      	movs	r3, #2
 8003694:	e0e6      	b.n	8003864 <HAL_I2C_Mem_Write+0x21c>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800369e:	f7fe fe31 	bl	8002304 <HAL_GetTick>
 80036a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	2319      	movs	r3, #25
 80036aa:	2201      	movs	r2, #1
 80036ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 fad1 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0d1      	b.n	8003864 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2221      	movs	r2, #33	; 0x21
 80036c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2240      	movs	r2, #64	; 0x40
 80036cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6a3a      	ldr	r2, [r7, #32]
 80036da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036e8:	88f8      	ldrh	r0, [r7, #6]
 80036ea:	893a      	ldrh	r2, [r7, #8]
 80036ec:	8979      	ldrh	r1, [r7, #10]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	9301      	str	r3, [sp, #4]
 80036f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	4603      	mov	r3, r0
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 f9e1 	bl	8003ac0 <I2C_RequestMemoryWrite>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e0a9      	b.n	8003864 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003714:	b29b      	uxth	r3, r3
 8003716:	2bff      	cmp	r3, #255	; 0xff
 8003718:	d90e      	bls.n	8003738 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	22ff      	movs	r2, #255	; 0xff
 800371e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003724:	b2da      	uxtb	r2, r3
 8003726:	8979      	ldrh	r1, [r7, #10]
 8003728:	2300      	movs	r3, #0
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 fbb3 	bl	8003e9c <I2C_TransferConfig>
 8003736:	e00f      	b.n	8003758 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373c:	b29a      	uxth	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003746:	b2da      	uxtb	r2, r3
 8003748:	8979      	ldrh	r1, [r7, #10]
 800374a:	2300      	movs	r3, #0
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 fba2 	bl	8003e9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 fabb 	bl	8003cd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e07b      	b.n	8003864 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	781a      	ldrb	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003786:	b29b      	uxth	r3, r3
 8003788:	3b01      	subs	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d034      	beq.n	8003810 <HAL_I2C_Mem_Write+0x1c8>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d130      	bne.n	8003810 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b4:	2200      	movs	r2, #0
 80037b6:	2180      	movs	r1, #128	; 0x80
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 fa4d 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e04d      	b.n	8003864 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	2bff      	cmp	r3, #255	; 0xff
 80037d0:	d90e      	bls.n	80037f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	22ff      	movs	r2, #255	; 0xff
 80037d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	8979      	ldrh	r1, [r7, #10]
 80037e0:	2300      	movs	r3, #0
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 fb57 	bl	8003e9c <I2C_TransferConfig>
 80037ee:	e00f      	b.n	8003810 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	8979      	ldrh	r1, [r7, #10]
 8003802:	2300      	movs	r3, #0
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 fb46 	bl	8003e9c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003814:	b29b      	uxth	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d19e      	bne.n	8003758 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 fa9a 	bl	8003d58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e01a      	b.n	8003864 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2220      	movs	r2, #32
 8003834:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6859      	ldr	r1, [r3, #4]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4b0a      	ldr	r3, [pc, #40]	; (800386c <HAL_I2C_Mem_Write+0x224>)
 8003842:	400b      	ands	r3, r1
 8003844:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2220      	movs	r2, #32
 800384a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800385e:	2300      	movs	r3, #0
 8003860:	e000      	b.n	8003864 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003862:	2302      	movs	r3, #2
  }
}
 8003864:	4618      	mov	r0, r3
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	fe00e800 	.word	0xfe00e800

08003870 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af02      	add	r7, sp, #8
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	4608      	mov	r0, r1
 800387a:	4611      	mov	r1, r2
 800387c:	461a      	mov	r2, r3
 800387e:	4603      	mov	r3, r0
 8003880:	817b      	strh	r3, [r7, #10]
 8003882:	460b      	mov	r3, r1
 8003884:	813b      	strh	r3, [r7, #8]
 8003886:	4613      	mov	r3, r2
 8003888:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b20      	cmp	r3, #32
 8003894:	f040 80fd 	bne.w	8003a92 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_I2C_Mem_Read+0x34>
 800389e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d105      	bne.n	80038b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0f1      	b.n	8003a94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d101      	bne.n	80038be <HAL_I2C_Mem_Read+0x4e>
 80038ba:	2302      	movs	r3, #2
 80038bc:	e0ea      	b.n	8003a94 <HAL_I2C_Mem_Read+0x224>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038c6:	f7fe fd1d 	bl	8002304 <HAL_GetTick>
 80038ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	2319      	movs	r3, #25
 80038d2:	2201      	movs	r2, #1
 80038d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 f9bd 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0d5      	b.n	8003a94 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2222      	movs	r2, #34	; 0x22
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2240      	movs	r2, #64	; 0x40
 80038f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a3a      	ldr	r2, [r7, #32]
 8003902:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003908:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003910:	88f8      	ldrh	r0, [r7, #6]
 8003912:	893a      	ldrh	r2, [r7, #8]
 8003914:	8979      	ldrh	r1, [r7, #10]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	9301      	str	r3, [sp, #4]
 800391a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	4603      	mov	r3, r0
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f921 	bl	8003b68 <I2C_RequestMemoryRead>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e0ad      	b.n	8003a94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393c:	b29b      	uxth	r3, r3
 800393e:	2bff      	cmp	r3, #255	; 0xff
 8003940:	d90e      	bls.n	8003960 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	22ff      	movs	r2, #255	; 0xff
 8003946:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394c:	b2da      	uxtb	r2, r3
 800394e:	8979      	ldrh	r1, [r7, #10]
 8003950:	4b52      	ldr	r3, [pc, #328]	; (8003a9c <HAL_I2C_Mem_Read+0x22c>)
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 fa9f 	bl	8003e9c <I2C_TransferConfig>
 800395e:	e00f      	b.n	8003980 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396e:	b2da      	uxtb	r2, r3
 8003970:	8979      	ldrh	r1, [r7, #10]
 8003972:	4b4a      	ldr	r3, [pc, #296]	; (8003a9c <HAL_I2C_Mem_Read+0x22c>)
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 fa8e 	bl	8003e9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003986:	2200      	movs	r2, #0
 8003988:	2104      	movs	r1, #4
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 f964 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e07c      	b.n	8003a94 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d034      	beq.n	8003a40 <HAL_I2C_Mem_Read+0x1d0>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d130      	bne.n	8003a40 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e4:	2200      	movs	r2, #0
 80039e6:	2180      	movs	r1, #128	; 0x80
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 f935 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e04d      	b.n	8003a94 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2bff      	cmp	r3, #255	; 0xff
 8003a00:	d90e      	bls.n	8003a20 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	22ff      	movs	r2, #255	; 0xff
 8003a06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	8979      	ldrh	r1, [r7, #10]
 8003a10:	2300      	movs	r3, #0
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 fa3f 	bl	8003e9c <I2C_TransferConfig>
 8003a1e:	e00f      	b.n	8003a40 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	8979      	ldrh	r1, [r7, #10]
 8003a32:	2300      	movs	r3, #0
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 fa2e 	bl	8003e9c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d19a      	bne.n	8003980 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 f982 	bl	8003d58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e01a      	b.n	8003a94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2220      	movs	r2, #32
 8003a64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6859      	ldr	r1, [r3, #4]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	4b0b      	ldr	r3, [pc, #44]	; (8003aa0 <HAL_I2C_Mem_Read+0x230>)
 8003a72:	400b      	ands	r3, r1
 8003a74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	e000      	b.n	8003a94 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003a92:	2302      	movs	r3, #2
  }
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	80002400 	.word	0x80002400
 8003aa0:	fe00e800 	.word	0xfe00e800

08003aa4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab2:	b2db      	uxtb	r3, r3
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	4608      	mov	r0, r1
 8003aca:	4611      	mov	r1, r2
 8003acc:	461a      	mov	r2, r3
 8003ace:	4603      	mov	r3, r0
 8003ad0:	817b      	strh	r3, [r7, #10]
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	813b      	strh	r3, [r7, #8]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003ada:	88fb      	ldrh	r3, [r7, #6]
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	8979      	ldrh	r1, [r7, #10]
 8003ae0:	4b20      	ldr	r3, [pc, #128]	; (8003b64 <I2C_RequestMemoryWrite+0xa4>)
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 f9d7 	bl	8003e9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aee:	69fa      	ldr	r2, [r7, #28]
 8003af0:	69b9      	ldr	r1, [r7, #24]
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 f8f0 	bl	8003cd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e02c      	b.n	8003b5c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b02:	88fb      	ldrh	r3, [r7, #6]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d105      	bne.n	8003b14 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b08:	893b      	ldrh	r3, [r7, #8]
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	629a      	str	r2, [r3, #40]	; 0x28
 8003b12:	e015      	b.n	8003b40 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b14:	893b      	ldrh	r3, [r7, #8]
 8003b16:	0a1b      	lsrs	r3, r3, #8
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b22:	69fa      	ldr	r2, [r7, #28]
 8003b24:	69b9      	ldr	r1, [r7, #24]
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 f8d6 	bl	8003cd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e012      	b.n	8003b5c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b36:	893b      	ldrh	r3, [r7, #8]
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	2200      	movs	r2, #0
 8003b48:	2180      	movs	r1, #128	; 0x80
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 f884 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	80002000 	.word	0x80002000

08003b68 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	4608      	mov	r0, r1
 8003b72:	4611      	mov	r1, r2
 8003b74:	461a      	mov	r2, r3
 8003b76:	4603      	mov	r3, r0
 8003b78:	817b      	strh	r3, [r7, #10]
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	813b      	strh	r3, [r7, #8]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003b82:	88fb      	ldrh	r3, [r7, #6]
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	8979      	ldrh	r1, [r7, #10]
 8003b88:	4b20      	ldr	r3, [pc, #128]	; (8003c0c <I2C_RequestMemoryRead+0xa4>)
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 f984 	bl	8003e9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b94:	69fa      	ldr	r2, [r7, #28]
 8003b96:	69b9      	ldr	r1, [r7, #24]
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 f89d 	bl	8003cd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e02c      	b.n	8003c02 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ba8:	88fb      	ldrh	r3, [r7, #6]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d105      	bne.n	8003bba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bae:	893b      	ldrh	r3, [r7, #8]
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	629a      	str	r2, [r3, #40]	; 0x28
 8003bb8:	e015      	b.n	8003be6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003bba:	893b      	ldrh	r3, [r7, #8]
 8003bbc:	0a1b      	lsrs	r3, r3, #8
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bc8:	69fa      	ldr	r2, [r7, #28]
 8003bca:	69b9      	ldr	r1, [r7, #24]
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 f883 	bl	8003cd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e012      	b.n	8003c02 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bdc:	893b      	ldrh	r3, [r7, #8]
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	2200      	movs	r2, #0
 8003bee:	2140      	movs	r1, #64	; 0x40
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 f831 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e000      	b.n	8003c02 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	80002000 	.word	0x80002000

08003c10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d103      	bne.n	8003c2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d007      	beq.n	8003c4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699a      	ldr	r2, [r3, #24]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0201 	orr.w	r2, r2, #1
 8003c4a:	619a      	str	r2, [r3, #24]
  }
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	4613      	mov	r3, r2
 8003c66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c68:	e022      	b.n	8003cb0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c70:	d01e      	beq.n	8003cb0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c72:	f7fe fb47 	bl	8002304 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d302      	bcc.n	8003c88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d113      	bne.n	8003cb0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8c:	f043 0220 	orr.w	r2, r3, #32
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e00f      	b.n	8003cd0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699a      	ldr	r2, [r3, #24]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	bf0c      	ite	eq
 8003cc0:	2301      	moveq	r3, #1
 8003cc2:	2300      	movne	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	79fb      	ldrb	r3, [r7, #7]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d0cd      	beq.n	8003c6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ce4:	e02c      	b.n	8003d40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	68b9      	ldr	r1, [r7, #8]
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f870 	bl	8003dd0 <I2C_IsAcknowledgeFailed>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e02a      	b.n	8003d50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d00:	d01e      	beq.n	8003d40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d02:	f7fe faff 	bl	8002304 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d302      	bcc.n	8003d18 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d113      	bne.n	8003d40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1c:	f043 0220 	orr.w	r2, r3, #32
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e007      	b.n	8003d50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d1cb      	bne.n	8003ce6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d64:	e028      	b.n	8003db8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	68b9      	ldr	r1, [r7, #8]
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 f830 	bl	8003dd0 <I2C_IsAcknowledgeFailed>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e026      	b.n	8003dc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d7a:	f7fe fac3 	bl	8002304 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d302      	bcc.n	8003d90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d113      	bne.n	8003db8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d94:	f043 0220 	orr.w	r2, r3, #32
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e007      	b.n	8003dc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	f003 0320 	and.w	r3, r3, #32
 8003dc2:	2b20      	cmp	r3, #32
 8003dc4:	d1cf      	bne.n	8003d66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	f003 0310 	and.w	r3, r3, #16
 8003de6:	2b10      	cmp	r3, #16
 8003de8:	d151      	bne.n	8003e8e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dea:	e022      	b.n	8003e32 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df2:	d01e      	beq.n	8003e32 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df4:	f7fe fa86 	bl	8002304 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d302      	bcc.n	8003e0a <I2C_IsAcknowledgeFailed+0x3a>
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d113      	bne.n	8003e32 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0e:	f043 0220 	orr.w	r2, r3, #32
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e02e      	b.n	8003e90 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	f003 0320 	and.w	r3, r3, #32
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	d1d5      	bne.n	8003dec <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2210      	movs	r2, #16
 8003e46:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f7ff fedd 	bl	8003c10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6859      	ldr	r1, [r3, #4]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	4b0d      	ldr	r3, [pc, #52]	; (8003e98 <I2C_IsAcknowledgeFailed+0xc8>)
 8003e62:	400b      	ands	r3, r1
 8003e64:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6a:	f043 0204 	orr.w	r2, r3, #4
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e000      	b.n	8003e90 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	fe00e800 	.word	0xfe00e800

08003e9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	607b      	str	r3, [r7, #4]
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	817b      	strh	r3, [r7, #10]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	0d5b      	lsrs	r3, r3, #21
 8003eb8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003ebc:	4b0d      	ldr	r3, [pc, #52]	; (8003ef4 <I2C_TransferConfig+0x58>)
 8003ebe:	430b      	orrs	r3, r1
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	ea02 0103 	and.w	r1, r2, r3
 8003ec6:	897b      	ldrh	r3, [r7, #10]
 8003ec8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ecc:	7a7b      	ldrb	r3, [r7, #9]
 8003ece:	041b      	lsls	r3, r3, #16
 8003ed0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	431a      	orrs	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003ee6:	bf00      	nop
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	03ff63ff 	.word	0x03ff63ff

08003ef8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e0bf      	b.n	800408a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d106      	bne.n	8003f24 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f006 fbdc 	bl	800a6dc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2202      	movs	r2, #2
 8003f28:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	699a      	ldr	r2, [r3, #24]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003f3a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6999      	ldr	r1, [r3, #24]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f50:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6899      	ldr	r1, [r3, #8]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	4b4a      	ldr	r3, [pc, #296]	; (8004094 <HAL_LTDC_Init+0x19c>)
 8003f6c:	400b      	ands	r3, r1
 8003f6e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	041b      	lsls	r3, r3, #16
 8003f76:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6899      	ldr	r1, [r3, #8]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699a      	ldr	r2, [r3, #24]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	431a      	orrs	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68d9      	ldr	r1, [r3, #12]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	4b3e      	ldr	r3, [pc, #248]	; (8004094 <HAL_LTDC_Init+0x19c>)
 8003f9a:	400b      	ands	r3, r1
 8003f9c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	041b      	lsls	r3, r3, #16
 8003fa4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68d9      	ldr	r1, [r3, #12]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a1a      	ldr	r2, [r3, #32]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6919      	ldr	r1, [r3, #16]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	4b33      	ldr	r3, [pc, #204]	; (8004094 <HAL_LTDC_Init+0x19c>)
 8003fc8:	400b      	ands	r3, r1
 8003fca:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	041b      	lsls	r3, r3, #16
 8003fd2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6919      	ldr	r1, [r3, #16]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6959      	ldr	r1, [r3, #20]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	4b27      	ldr	r3, [pc, #156]	; (8004094 <HAL_LTDC_Init+0x19c>)
 8003ff6:	400b      	ands	r3, r1
 8003ff8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffe:	041b      	lsls	r3, r3, #16
 8004000:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6959      	ldr	r1, [r3, #20]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	431a      	orrs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800401e:	021b      	lsls	r3, r3, #8
 8004020:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004028:	041b      	lsls	r3, r3, #16
 800402a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800403a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0206 	orr.w	r2, r2, #6
 8004066:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699a      	ldr	r2, [r3, #24]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0201 	orr.w	r2, r2, #1
 8004076:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	f000f800 	.word	0xf000f800

08004098 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ae:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f003 0304 	and.w	r3, r3, #4
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d023      	beq.n	8004102 <HAL_LTDC_IRQHandler+0x6a>
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d01e      	beq.n	8004102 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 0204 	bic.w	r2, r2, #4
 80040d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2204      	movs	r2, #4
 80040da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80040e2:	f043 0201 	orr.w	r2, r3, #1
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2204      	movs	r2, #4
 80040f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f86f 	bl	80041e0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d023      	beq.n	8004154 <HAL_LTDC_IRQHandler+0xbc>
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d01e      	beq.n	8004154 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0202 	bic.w	r2, r2, #2
 8004124:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2202      	movs	r2, #2
 800412c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004134:	f043 0202 	orr.w	r2, r3, #2
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2204      	movs	r2, #4
 8004142:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f846 	bl	80041e0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d01b      	beq.n	8004196 <HAL_LTDC_IRQHandler+0xfe>
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	d016      	beq.n	8004196 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0201 	bic.w	r2, r2, #1
 8004176:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2201      	movs	r2, #1
 800417e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 f82f 	bl	80041f4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b00      	cmp	r3, #0
 800419e:	d01b      	beq.n	80041d8 <HAL_LTDC_IRQHandler+0x140>
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d016      	beq.n	80041d8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0208 	bic.w	r2, r2, #8
 80041b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2208      	movs	r2, #8
 80041c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f818 	bl	8004208 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80041d8:	bf00      	nop
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800421c:	b5b0      	push	{r4, r5, r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800422e:	2b01      	cmp	r3, #1
 8004230:	d101      	bne.n	8004236 <HAL_LTDC_ConfigLayer+0x1a>
 8004232:	2302      	movs	r3, #2
 8004234:	e02c      	b.n	8004290 <HAL_LTDC_ConfigLayer+0x74>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2202      	movs	r2, #2
 8004242:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2134      	movs	r1, #52	; 0x34
 800424c:	fb01 f303 	mul.w	r3, r1, r3
 8004250:	4413      	add	r3, r2
 8004252:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	4614      	mov	r4, r2
 800425a:	461d      	mov	r5, r3
 800425c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800425e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004268:	682b      	ldr	r3, [r5, #0]
 800426a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	68b9      	ldr	r1, [r7, #8]
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 f81f 	bl	80042b4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2201      	movs	r2, #1
 800427c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bdb0      	pop	{r4, r5, r7, pc}

08004298 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80042a6:	b2db      	uxtb	r3, r3
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b089      	sub	sp, #36	; 0x24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	0c1b      	lsrs	r3, r3, #16
 80042cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042d0:	4413      	add	r3, r2
 80042d2:	041b      	lsls	r3, r3, #16
 80042d4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	01db      	lsls	r3, r3, #7
 80042e0:	4413      	add	r3, r2
 80042e2:	3384      	adds	r3, #132	; 0x84
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	6812      	ldr	r2, [r2, #0]
 80042ea:	4611      	mov	r1, r2
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	01d2      	lsls	r2, r2, #7
 80042f0:	440a      	add	r2, r1
 80042f2:	3284      	adds	r2, #132	; 0x84
 80042f4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80042f8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	0c1b      	lsrs	r3, r3, #16
 8004306:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800430a:	4413      	add	r3, r2
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4619      	mov	r1, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	01db      	lsls	r3, r3, #7
 8004318:	440b      	add	r3, r1
 800431a:	3384      	adds	r3, #132	; 0x84
 800431c:	4619      	mov	r1, r3
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	4313      	orrs	r3, r2
 8004322:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	68da      	ldr	r2, [r3, #12]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004332:	4413      	add	r3, r2
 8004334:	041b      	lsls	r3, r3, #16
 8004336:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	461a      	mov	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	01db      	lsls	r3, r3, #7
 8004342:	4413      	add	r3, r2
 8004344:	3384      	adds	r3, #132	; 0x84
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	4611      	mov	r1, r2
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	01d2      	lsls	r2, r2, #7
 8004352:	440a      	add	r2, r1
 8004354:	3284      	adds	r2, #132	; 0x84
 8004356:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800435a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800436a:	4413      	add	r3, r2
 800436c:	1c5a      	adds	r2, r3, #1
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4619      	mov	r1, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	01db      	lsls	r3, r3, #7
 8004378:	440b      	add	r3, r1
 800437a:	3384      	adds	r3, #132	; 0x84
 800437c:	4619      	mov	r1, r3
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	4313      	orrs	r3, r2
 8004382:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	461a      	mov	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	01db      	lsls	r3, r3, #7
 800438e:	4413      	add	r3, r2
 8004390:	3384      	adds	r3, #132	; 0x84
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	6812      	ldr	r2, [r2, #0]
 8004398:	4611      	mov	r1, r2
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	01d2      	lsls	r2, r2, #7
 800439e:	440a      	add	r2, r1
 80043a0:	3284      	adds	r2, #132	; 0x84
 80043a2:	f023 0307 	bic.w	r3, r3, #7
 80043a6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	461a      	mov	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	01db      	lsls	r3, r3, #7
 80043b2:	4413      	add	r3, r2
 80043b4:	3384      	adds	r3, #132	; 0x84
 80043b6:	461a      	mov	r2, r3
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80043c4:	021b      	lsls	r3, r3, #8
 80043c6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80043ce:	041b      	lsls	r3, r3, #16
 80043d0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	061b      	lsls	r3, r3, #24
 80043d8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	461a      	mov	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	01db      	lsls	r3, r3, #7
 80043e4:	4413      	add	r3, r2
 80043e6:	3384      	adds	r3, #132	; 0x84
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	01db      	lsls	r3, r3, #7
 80043f4:	4413      	add	r3, r2
 80043f6:	3384      	adds	r3, #132	; 0x84
 80043f8:	461a      	mov	r2, r3
 80043fa:	2300      	movs	r3, #0
 80043fc:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004404:	461a      	mov	r2, r3
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	431a      	orrs	r2, r3
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	431a      	orrs	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4619      	mov	r1, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	01db      	lsls	r3, r3, #7
 8004418:	440b      	add	r3, r1
 800441a:	3384      	adds	r3, #132	; 0x84
 800441c:	4619      	mov	r1, r3
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	4313      	orrs	r3, r2
 8004422:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	461a      	mov	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	01db      	lsls	r3, r3, #7
 800442e:	4413      	add	r3, r2
 8004430:	3384      	adds	r3, #132	; 0x84
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	6812      	ldr	r2, [r2, #0]
 8004438:	4611      	mov	r1, r2
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	01d2      	lsls	r2, r2, #7
 800443e:	440a      	add	r2, r1
 8004440:	3284      	adds	r2, #132	; 0x84
 8004442:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004446:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	461a      	mov	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	01db      	lsls	r3, r3, #7
 8004452:	4413      	add	r3, r2
 8004454:	3384      	adds	r3, #132	; 0x84
 8004456:	461a      	mov	r2, r3
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	01db      	lsls	r3, r3, #7
 8004468:	4413      	add	r3, r2
 800446a:	3384      	adds	r3, #132	; 0x84
 800446c:	69da      	ldr	r2, [r3, #28]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4619      	mov	r1, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	01db      	lsls	r3, r3, #7
 8004478:	440b      	add	r3, r1
 800447a:	3384      	adds	r3, #132	; 0x84
 800447c:	4619      	mov	r1, r3
 800447e:	4b58      	ldr	r3, [pc, #352]	; (80045e0 <LTDC_SetConfig+0x32c>)
 8004480:	4013      	ands	r3, r2
 8004482:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	69da      	ldr	r2, [r3, #28]
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	68f9      	ldr	r1, [r7, #12]
 800448e:	6809      	ldr	r1, [r1, #0]
 8004490:	4608      	mov	r0, r1
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	01c9      	lsls	r1, r1, #7
 8004496:	4401      	add	r1, r0
 8004498:	3184      	adds	r1, #132	; 0x84
 800449a:	4313      	orrs	r3, r2
 800449c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	01db      	lsls	r3, r3, #7
 80044a8:	4413      	add	r3, r2
 80044aa:	3384      	adds	r3, #132	; 0x84
 80044ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	01db      	lsls	r3, r3, #7
 80044b8:	4413      	add	r3, r2
 80044ba:	3384      	adds	r3, #132	; 0x84
 80044bc:	461a      	mov	r2, r3
 80044be:	2300      	movs	r3, #0
 80044c0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	01db      	lsls	r3, r3, #7
 80044cc:	4413      	add	r3, r2
 80044ce:	3384      	adds	r3, #132	; 0x84
 80044d0:	461a      	mov	r2, r3
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d102      	bne.n	80044e6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80044e0:	2304      	movs	r3, #4
 80044e2:	61fb      	str	r3, [r7, #28]
 80044e4:	e01b      	b.n	800451e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d102      	bne.n	80044f4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80044ee:	2303      	movs	r3, #3
 80044f0:	61fb      	str	r3, [r7, #28]
 80044f2:	e014      	b.n	800451e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d00b      	beq.n	8004514 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004500:	2b02      	cmp	r3, #2
 8004502:	d007      	beq.n	8004514 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004508:	2b03      	cmp	r3, #3
 800450a:	d003      	beq.n	8004514 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004510:	2b07      	cmp	r3, #7
 8004512:	d102      	bne.n	800451a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004514:	2302      	movs	r3, #2
 8004516:	61fb      	str	r3, [r7, #28]
 8004518:	e001      	b.n	800451e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800451a:	2301      	movs	r3, #1
 800451c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	01db      	lsls	r3, r3, #7
 8004528:	4413      	add	r3, r2
 800452a:	3384      	adds	r3, #132	; 0x84
 800452c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	6812      	ldr	r2, [r2, #0]
 8004532:	4611      	mov	r1, r2
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	01d2      	lsls	r2, r2, #7
 8004538:	440a      	add	r2, r1
 800453a:	3284      	adds	r2, #132	; 0x84
 800453c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004540:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004546:	69fa      	ldr	r2, [r7, #28]
 8004548:	fb02 f303 	mul.w	r3, r2, r3
 800454c:	041a      	lsls	r2, r3, #16
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	6859      	ldr	r1, [r3, #4]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	1acb      	subs	r3, r1, r3
 8004558:	69f9      	ldr	r1, [r7, #28]
 800455a:	fb01 f303 	mul.w	r3, r1, r3
 800455e:	3303      	adds	r3, #3
 8004560:	68f9      	ldr	r1, [r7, #12]
 8004562:	6809      	ldr	r1, [r1, #0]
 8004564:	4608      	mov	r0, r1
 8004566:	6879      	ldr	r1, [r7, #4]
 8004568:	01c9      	lsls	r1, r1, #7
 800456a:	4401      	add	r1, r0
 800456c:	3184      	adds	r1, #132	; 0x84
 800456e:	4313      	orrs	r3, r2
 8004570:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	01db      	lsls	r3, r3, #7
 800457c:	4413      	add	r3, r2
 800457e:	3384      	adds	r3, #132	; 0x84
 8004580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4619      	mov	r1, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	01db      	lsls	r3, r3, #7
 800458c:	440b      	add	r3, r1
 800458e:	3384      	adds	r3, #132	; 0x84
 8004590:	4619      	mov	r1, r3
 8004592:	4b14      	ldr	r3, [pc, #80]	; (80045e4 <LTDC_SetConfig+0x330>)
 8004594:	4013      	ands	r3, r2
 8004596:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	461a      	mov	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	01db      	lsls	r3, r3, #7
 80045a2:	4413      	add	r3, r2
 80045a4:	3384      	adds	r3, #132	; 0x84
 80045a6:	461a      	mov	r2, r3
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ac:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	01db      	lsls	r3, r3, #7
 80045b8:	4413      	add	r3, r2
 80045ba:	3384      	adds	r3, #132	; 0x84
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	6812      	ldr	r2, [r2, #0]
 80045c2:	4611      	mov	r1, r2
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	01d2      	lsls	r2, r2, #7
 80045c8:	440a      	add	r2, r1
 80045ca:	3284      	adds	r2, #132	; 0x84
 80045cc:	f043 0301 	orr.w	r3, r3, #1
 80045d0:	6013      	str	r3, [r2, #0]
}
 80045d2:	bf00      	nop
 80045d4:	3724      	adds	r7, #36	; 0x24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	fffff8f8 	.word	0xfffff8f8
 80045e4:	fffff800 	.word	0xfffff800

080045e8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045ec:	4b05      	ldr	r3, [pc, #20]	; (8004604 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a04      	ldr	r2, [pc, #16]	; (8004604 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80045f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f6:	6013      	str	r3, [r2, #0]
}
 80045f8:	bf00      	nop
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40007000 	.word	0x40007000

08004608 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800460e:	2300      	movs	r3, #0
 8004610:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004612:	4b23      	ldr	r3, [pc, #140]	; (80046a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	4a22      	ldr	r2, [pc, #136]	; (80046a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800461c:	6413      	str	r3, [r2, #64]	; 0x40
 800461e:	4b20      	ldr	r3, [pc, #128]	; (80046a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004626:	603b      	str	r3, [r7, #0]
 8004628:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800462a:	4b1e      	ldr	r3, [pc, #120]	; (80046a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a1d      	ldr	r2, [pc, #116]	; (80046a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004634:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004636:	f7fd fe65 	bl	8002304 <HAL_GetTick>
 800463a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800463c:	e009      	b.n	8004652 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800463e:	f7fd fe61 	bl	8002304 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800464c:	d901      	bls.n	8004652 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e022      	b.n	8004698 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004652:	4b14      	ldr	r3, [pc, #80]	; (80046a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800465a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800465e:	d1ee      	bne.n	800463e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004660:	4b10      	ldr	r3, [pc, #64]	; (80046a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a0f      	ldr	r2, [pc, #60]	; (80046a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800466a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800466c:	f7fd fe4a 	bl	8002304 <HAL_GetTick>
 8004670:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004672:	e009      	b.n	8004688 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004674:	f7fd fe46 	bl	8002304 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004682:	d901      	bls.n	8004688 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e007      	b.n	8004698 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004688:	4b06      	ldr	r3, [pc, #24]	; (80046a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004690:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004694:	d1ee      	bne.n	8004674 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40023800 	.word	0x40023800
 80046a4:	40007000 	.word	0x40007000

080046a8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af02      	add	r7, sp, #8
 80046ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80046b4:	f7fd fe26 	bl	8002304 <HAL_GetTick>
 80046b8:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e073      	b.n	80047ac <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_QSPI_Init+0x2c>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e06b      	b.n	80047ac <HAL_QSPI_Init+0x104>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10b      	bne.n	8004700 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f006 f8bb 	bl	800a86c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80046f6:	f241 3188 	movw	r1, #5000	; 0x1388
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f85e 	bl	80047bc <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	3b01      	subs	r3, #1
 8004710:	021a      	lsls	r2, r3, #8
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2200      	movs	r2, #0
 8004724:	2120      	movs	r1, #32
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f856 	bl	80047d8 <QSPI_WaitFlagStateUntilTimeout>
 800472c:	4603      	mov	r3, r0
 800472e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d135      	bne.n	80047a2 <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	4b1d      	ldr	r3, [pc, #116]	; (80047b4 <HAL_QSPI_Init+0x10c>)
 800473e:	4013      	ands	r3, r2
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6852      	ldr	r2, [r2, #4]
 8004744:	0611      	lsls	r1, r2, #24
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	68d2      	ldr	r2, [r2, #12]
 800474a:	4311      	orrs	r1, r2
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	69d2      	ldr	r2, [r2, #28]
 8004750:	4311      	orrs	r1, r2
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6a12      	ldr	r2, [r2, #32]
 8004756:	4311      	orrs	r1, r2
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6812      	ldr	r2, [r2, #0]
 800475c:	430b      	orrs	r3, r1
 800475e:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	4b14      	ldr	r3, [pc, #80]	; (80047b8 <HAL_QSPI_Init+0x110>)
 8004768:	4013      	ands	r3, r2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6912      	ldr	r2, [r2, #16]
 800476e:	0411      	lsls	r1, r2, #16
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6952      	ldr	r2, [r2, #20]
 8004774:	4311      	orrs	r1, r2
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	6992      	ldr	r2, [r2, #24]
 800477a:	4311      	orrs	r1, r2
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6812      	ldr	r2, [r2, #0]
 8004780:	430b      	orrs	r3, r1
 8004782:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0201 	orr.w	r2, r2, #1
 8004792:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	00ffff2f 	.word	0x00ffff2f
 80047b8:	ffe0f8fe 	.word	0xffe0f8fe

080047bc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	649a      	str	r2, [r3, #72]	; 0x48
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	4613      	mov	r3, r2
 80047e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80047e8:	e01a      	b.n	8004820 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f0:	d016      	beq.n	8004820 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d007      	beq.n	8004808 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80047f8:	f7fd fd84 	bl	8002304 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	429a      	cmp	r2, r3
 8004806:	d20b      	bcs.n	8004820 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2204      	movs	r2, #4
 800480c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004814:	f043 0201 	orr.w	r2, r3, #1
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e00e      	b.n	800483e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4013      	ands	r3, r2
 800482a:	2b00      	cmp	r3, #0
 800482c:	bf14      	ite	ne
 800482e:	2301      	movne	r3, #1
 8004830:	2300      	moveq	r3, #0
 8004832:	b2db      	uxtb	r3, r3
 8004834:	461a      	mov	r2, r3
 8004836:	79fb      	ldrb	r3, [r7, #7]
 8004838:	429a      	cmp	r2, r3
 800483a:	d1d6      	bne.n	80047ea <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
	...

08004848 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8004850:	2300      	movs	r3, #0
 8004852:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e25c      	b.n	8004d18 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 8087 	beq.w	800497a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800486c:	4b96      	ldr	r3, [pc, #600]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f003 030c 	and.w	r3, r3, #12
 8004874:	2b04      	cmp	r3, #4
 8004876:	d00c      	beq.n	8004892 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004878:	4b93      	ldr	r3, [pc, #588]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f003 030c 	and.w	r3, r3, #12
 8004880:	2b08      	cmp	r3, #8
 8004882:	d112      	bne.n	80048aa <HAL_RCC_OscConfig+0x62>
 8004884:	4b90      	ldr	r3, [pc, #576]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800488c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004890:	d10b      	bne.n	80048aa <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004892:	4b8d      	ldr	r3, [pc, #564]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d06c      	beq.n	8004978 <HAL_RCC_OscConfig+0x130>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d168      	bne.n	8004978 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e236      	b.n	8004d18 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b2:	d106      	bne.n	80048c2 <HAL_RCC_OscConfig+0x7a>
 80048b4:	4b84      	ldr	r3, [pc, #528]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a83      	ldr	r2, [pc, #524]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 80048ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048be:	6013      	str	r3, [r2, #0]
 80048c0:	e02e      	b.n	8004920 <HAL_RCC_OscConfig+0xd8>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10c      	bne.n	80048e4 <HAL_RCC_OscConfig+0x9c>
 80048ca:	4b7f      	ldr	r3, [pc, #508]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a7e      	ldr	r2, [pc, #504]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 80048d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	4b7c      	ldr	r3, [pc, #496]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a7b      	ldr	r2, [pc, #492]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 80048dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	e01d      	b.n	8004920 <HAL_RCC_OscConfig+0xd8>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048ec:	d10c      	bne.n	8004908 <HAL_RCC_OscConfig+0xc0>
 80048ee:	4b76      	ldr	r3, [pc, #472]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a75      	ldr	r2, [pc, #468]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 80048f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	4b73      	ldr	r3, [pc, #460]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a72      	ldr	r2, [pc, #456]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 8004900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	e00b      	b.n	8004920 <HAL_RCC_OscConfig+0xd8>
 8004908:	4b6f      	ldr	r3, [pc, #444]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a6e      	ldr	r2, [pc, #440]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 800490e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	4b6c      	ldr	r3, [pc, #432]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a6b      	ldr	r2, [pc, #428]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 800491a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800491e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d013      	beq.n	8004950 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004928:	f7fd fcec 	bl	8002304 <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004930:	f7fd fce8 	bl	8002304 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b64      	cmp	r3, #100	; 0x64
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e1ea      	b.n	8004d18 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004942:	4b61      	ldr	r3, [pc, #388]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0f0      	beq.n	8004930 <HAL_RCC_OscConfig+0xe8>
 800494e:	e014      	b.n	800497a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004950:	f7fd fcd8 	bl	8002304 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004958:	f7fd fcd4 	bl	8002304 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b64      	cmp	r3, #100	; 0x64
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e1d6      	b.n	8004d18 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800496a:	4b57      	ldr	r3, [pc, #348]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f0      	bne.n	8004958 <HAL_RCC_OscConfig+0x110>
 8004976:	e000      	b.n	800497a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d069      	beq.n	8004a5a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004986:	4b50      	ldr	r3, [pc, #320]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 030c 	and.w	r3, r3, #12
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00b      	beq.n	80049aa <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004992:	4b4d      	ldr	r3, [pc, #308]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 030c 	and.w	r3, r3, #12
 800499a:	2b08      	cmp	r3, #8
 800499c:	d11c      	bne.n	80049d8 <HAL_RCC_OscConfig+0x190>
 800499e:	4b4a      	ldr	r3, [pc, #296]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d116      	bne.n	80049d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049aa:	4b47      	ldr	r3, [pc, #284]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d005      	beq.n	80049c2 <HAL_RCC_OscConfig+0x17a>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d001      	beq.n	80049c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e1aa      	b.n	8004d18 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049c2:	4b41      	ldr	r3, [pc, #260]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	493d      	ldr	r1, [pc, #244]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049d6:	e040      	b.n	8004a5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d023      	beq.n	8004a28 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049e0:	4b39      	ldr	r3, [pc, #228]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a38      	ldr	r2, [pc, #224]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 80049e6:	f043 0301 	orr.w	r3, r3, #1
 80049ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ec:	f7fd fc8a 	bl	8002304 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049f4:	f7fd fc86 	bl	8002304 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e188      	b.n	8004d18 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a06:	4b30      	ldr	r3, [pc, #192]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0f0      	beq.n	80049f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a12:	4b2d      	ldr	r3, [pc, #180]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	4929      	ldr	r1, [pc, #164]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	600b      	str	r3, [r1, #0]
 8004a26:	e018      	b.n	8004a5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a28:	4b27      	ldr	r3, [pc, #156]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a26      	ldr	r2, [pc, #152]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 8004a2e:	f023 0301 	bic.w	r3, r3, #1
 8004a32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a34:	f7fd fc66 	bl	8002304 <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a3c:	f7fd fc62 	bl	8002304 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e164      	b.n	8004d18 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a4e:	4b1e      	ldr	r3, [pc, #120]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1f0      	bne.n	8004a3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d038      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d019      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a6e:	4b16      	ldr	r3, [pc, #88]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 8004a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a72:	4a15      	ldr	r2, [pc, #84]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 8004a74:	f043 0301 	orr.w	r3, r3, #1
 8004a78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7a:	f7fd fc43 	bl	8002304 <HAL_GetTick>
 8004a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a80:	e008      	b.n	8004a94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a82:	f7fd fc3f 	bl	8002304 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d901      	bls.n	8004a94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e141      	b.n	8004d18 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a94:	4b0c      	ldr	r3, [pc, #48]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 8004a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d0f0      	beq.n	8004a82 <HAL_RCC_OscConfig+0x23a>
 8004aa0:	e01a      	b.n	8004ad8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aa2:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 8004aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa6:	4a08      	ldr	r2, [pc, #32]	; (8004ac8 <HAL_RCC_OscConfig+0x280>)
 8004aa8:	f023 0301 	bic.w	r3, r3, #1
 8004aac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aae:	f7fd fc29 	bl	8002304 <HAL_GetTick>
 8004ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ab4:	e00a      	b.n	8004acc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ab6:	f7fd fc25 	bl	8002304 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d903      	bls.n	8004acc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e127      	b.n	8004d18 <HAL_RCC_OscConfig+0x4d0>
 8004ac8:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004acc:	4b94      	ldr	r3, [pc, #592]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1ee      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 80a4 	beq.w	8004c2e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ae6:	4b8e      	ldr	r3, [pc, #568]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10d      	bne.n	8004b0e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004af2:	4b8b      	ldr	r3, [pc, #556]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	4a8a      	ldr	r2, [pc, #552]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004afc:	6413      	str	r3, [r2, #64]	; 0x40
 8004afe:	4b88      	ldr	r3, [pc, #544]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b0e:	4b85      	ldr	r3, [pc, #532]	; (8004d24 <HAL_RCC_OscConfig+0x4dc>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d118      	bne.n	8004b4c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004b1a:	4b82      	ldr	r3, [pc, #520]	; (8004d24 <HAL_RCC_OscConfig+0x4dc>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a81      	ldr	r2, [pc, #516]	; (8004d24 <HAL_RCC_OscConfig+0x4dc>)
 8004b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b26:	f7fd fbed 	bl	8002304 <HAL_GetTick>
 8004b2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b2c:	e008      	b.n	8004b40 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b2e:	f7fd fbe9 	bl	8002304 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b64      	cmp	r3, #100	; 0x64
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e0eb      	b.n	8004d18 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b40:	4b78      	ldr	r3, [pc, #480]	; (8004d24 <HAL_RCC_OscConfig+0x4dc>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0f0      	beq.n	8004b2e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d106      	bne.n	8004b62 <HAL_RCC_OscConfig+0x31a>
 8004b54:	4b72      	ldr	r3, [pc, #456]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b58:	4a71      	ldr	r2, [pc, #452]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004b5a:	f043 0301 	orr.w	r3, r3, #1
 8004b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b60:	e02d      	b.n	8004bbe <HAL_RCC_OscConfig+0x376>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10c      	bne.n	8004b84 <HAL_RCC_OscConfig+0x33c>
 8004b6a:	4b6d      	ldr	r3, [pc, #436]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6e:	4a6c      	ldr	r2, [pc, #432]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004b70:	f023 0301 	bic.w	r3, r3, #1
 8004b74:	6713      	str	r3, [r2, #112]	; 0x70
 8004b76:	4b6a      	ldr	r3, [pc, #424]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7a:	4a69      	ldr	r2, [pc, #420]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004b7c:	f023 0304 	bic.w	r3, r3, #4
 8004b80:	6713      	str	r3, [r2, #112]	; 0x70
 8004b82:	e01c      	b.n	8004bbe <HAL_RCC_OscConfig+0x376>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2b05      	cmp	r3, #5
 8004b8a:	d10c      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x35e>
 8004b8c:	4b64      	ldr	r3, [pc, #400]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b90:	4a63      	ldr	r2, [pc, #396]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004b92:	f043 0304 	orr.w	r3, r3, #4
 8004b96:	6713      	str	r3, [r2, #112]	; 0x70
 8004b98:	4b61      	ldr	r3, [pc, #388]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9c:	4a60      	ldr	r2, [pc, #384]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004b9e:	f043 0301 	orr.w	r3, r3, #1
 8004ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ba4:	e00b      	b.n	8004bbe <HAL_RCC_OscConfig+0x376>
 8004ba6:	4b5e      	ldr	r3, [pc, #376]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004baa:	4a5d      	ldr	r2, [pc, #372]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004bac:	f023 0301 	bic.w	r3, r3, #1
 8004bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb2:	4b5b      	ldr	r3, [pc, #364]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb6:	4a5a      	ldr	r2, [pc, #360]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004bb8:	f023 0304 	bic.w	r3, r3, #4
 8004bbc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d015      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc6:	f7fd fb9d 	bl	8002304 <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bcc:	e00a      	b.n	8004be4 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bce:	f7fd fb99 	bl	8002304 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e099      	b.n	8004d18 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be4:	4b4e      	ldr	r3, [pc, #312]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0ee      	beq.n	8004bce <HAL_RCC_OscConfig+0x386>
 8004bf0:	e014      	b.n	8004c1c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf2:	f7fd fb87 	bl	8002304 <HAL_GetTick>
 8004bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bf8:	e00a      	b.n	8004c10 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bfa:	f7fd fb83 	bl	8002304 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e083      	b.n	8004d18 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c10:	4b43      	ldr	r3, [pc, #268]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1ee      	bne.n	8004bfa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c1c:	7dfb      	ldrb	r3, [r7, #23]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d105      	bne.n	8004c2e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c22:	4b3f      	ldr	r3, [pc, #252]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	4a3e      	ldr	r2, [pc, #248]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004c28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d06f      	beq.n	8004d16 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c36:	4b3a      	ldr	r3, [pc, #232]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f003 030c 	and.w	r3, r3, #12
 8004c3e:	2b08      	cmp	r3, #8
 8004c40:	d067      	beq.n	8004d12 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d149      	bne.n	8004cde <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c4a:	4b35      	ldr	r3, [pc, #212]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a34      	ldr	r2, [pc, #208]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004c50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c56:	f7fd fb55 	bl	8002304 <HAL_GetTick>
 8004c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c5c:	e008      	b.n	8004c70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c5e:	f7fd fb51 	bl	8002304 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e053      	b.n	8004d18 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c70:	4b2b      	ldr	r3, [pc, #172]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1f0      	bne.n	8004c5e <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	69da      	ldr	r2, [r3, #28]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	431a      	orrs	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	019b      	lsls	r3, r3, #6
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c92:	085b      	lsrs	r3, r3, #1
 8004c94:	3b01      	subs	r3, #1
 8004c96:	041b      	lsls	r3, r3, #16
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9e:	061b      	lsls	r3, r3, #24
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	4a1f      	ldr	r2, [pc, #124]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004ca4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ca8:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004caa:	4b1d      	ldr	r3, [pc, #116]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a1c      	ldr	r2, [pc, #112]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004cb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb6:	f7fd fb25 	bl	8002304 <HAL_GetTick>
 8004cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cbc:	e008      	b.n	8004cd0 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cbe:	f7fd fb21 	bl	8002304 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e023      	b.n	8004d18 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cd0:	4b13      	ldr	r3, [pc, #76]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d0f0      	beq.n	8004cbe <HAL_RCC_OscConfig+0x476>
 8004cdc:	e01b      	b.n	8004d16 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cde:	4b10      	ldr	r3, [pc, #64]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a0f      	ldr	r2, [pc, #60]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004ce4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cea:	f7fd fb0b 	bl	8002304 <HAL_GetTick>
 8004cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf0:	e008      	b.n	8004d04 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cf2:	f7fd fb07 	bl	8002304 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e009      	b.n	8004d18 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d04:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <HAL_RCC_OscConfig+0x4d8>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1f0      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x4aa>
 8004d10:	e001      	b.n	8004d16 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e000      	b.n	8004d18 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3718      	adds	r7, #24
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	40023800 	.word	0x40023800
 8004d24:	40007000 	.word	0x40007000

08004d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004d32:	2300      	movs	r3, #0
 8004d34:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e0ce      	b.n	8004ede <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d40:	4b69      	ldr	r3, [pc, #420]	; (8004ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 030f 	and.w	r3, r3, #15
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d910      	bls.n	8004d70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d4e:	4b66      	ldr	r3, [pc, #408]	; (8004ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f023 020f 	bic.w	r2, r3, #15
 8004d56:	4964      	ldr	r1, [pc, #400]	; (8004ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d5e:	4b62      	ldr	r3, [pc, #392]	; (8004ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 030f 	and.w	r3, r3, #15
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d001      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e0b6      	b.n	8004ede <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d020      	beq.n	8004dbe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d005      	beq.n	8004d94 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d88:	4b58      	ldr	r3, [pc, #352]	; (8004eec <HAL_RCC_ClockConfig+0x1c4>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	4a57      	ldr	r2, [pc, #348]	; (8004eec <HAL_RCC_ClockConfig+0x1c4>)
 8004d8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0308 	and.w	r3, r3, #8
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d005      	beq.n	8004dac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004da0:	4b52      	ldr	r3, [pc, #328]	; (8004eec <HAL_RCC_ClockConfig+0x1c4>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	4a51      	ldr	r2, [pc, #324]	; (8004eec <HAL_RCC_ClockConfig+0x1c4>)
 8004da6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004daa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dac:	4b4f      	ldr	r3, [pc, #316]	; (8004eec <HAL_RCC_ClockConfig+0x1c4>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	494c      	ldr	r1, [pc, #304]	; (8004eec <HAL_RCC_ClockConfig+0x1c4>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d040      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d107      	bne.n	8004de2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dd2:	4b46      	ldr	r3, [pc, #280]	; (8004eec <HAL_RCC_ClockConfig+0x1c4>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d115      	bne.n	8004e0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e07d      	b.n	8004ede <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d107      	bne.n	8004dfa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dea:	4b40      	ldr	r3, [pc, #256]	; (8004eec <HAL_RCC_ClockConfig+0x1c4>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d109      	bne.n	8004e0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e071      	b.n	8004ede <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dfa:	4b3c      	ldr	r3, [pc, #240]	; (8004eec <HAL_RCC_ClockConfig+0x1c4>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e069      	b.n	8004ede <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e0a:	4b38      	ldr	r3, [pc, #224]	; (8004eec <HAL_RCC_ClockConfig+0x1c4>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f023 0203 	bic.w	r2, r3, #3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	4935      	ldr	r1, [pc, #212]	; (8004eec <HAL_RCC_ClockConfig+0x1c4>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e1c:	f7fd fa72 	bl	8002304 <HAL_GetTick>
 8004e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e22:	e00a      	b.n	8004e3a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e24:	f7fd fa6e 	bl	8002304 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e051      	b.n	8004ede <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e3a:	4b2c      	ldr	r3, [pc, #176]	; (8004eec <HAL_RCC_ClockConfig+0x1c4>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 020c 	and.w	r2, r3, #12
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d1eb      	bne.n	8004e24 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e4c:	4b26      	ldr	r3, [pc, #152]	; (8004ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 030f 	and.w	r3, r3, #15
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d210      	bcs.n	8004e7c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e5a:	4b23      	ldr	r3, [pc, #140]	; (8004ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f023 020f 	bic.w	r2, r3, #15
 8004e62:	4921      	ldr	r1, [pc, #132]	; (8004ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e6a:	4b1f      	ldr	r3, [pc, #124]	; (8004ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 030f 	and.w	r3, r3, #15
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d001      	beq.n	8004e7c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e030      	b.n	8004ede <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d008      	beq.n	8004e9a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e88:	4b18      	ldr	r3, [pc, #96]	; (8004eec <HAL_RCC_ClockConfig+0x1c4>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	4915      	ldr	r1, [pc, #84]	; (8004eec <HAL_RCC_ClockConfig+0x1c4>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0308 	and.w	r3, r3, #8
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d009      	beq.n	8004eba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ea6:	4b11      	ldr	r3, [pc, #68]	; (8004eec <HAL_RCC_ClockConfig+0x1c4>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	490d      	ldr	r1, [pc, #52]	; (8004eec <HAL_RCC_ClockConfig+0x1c4>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004eba:	f000 f81d 	bl	8004ef8 <HAL_RCC_GetSysClockFreq>
 8004ebe:	4601      	mov	r1, r0
 8004ec0:	4b0a      	ldr	r3, [pc, #40]	; (8004eec <HAL_RCC_ClockConfig+0x1c4>)
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	091b      	lsrs	r3, r3, #4
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	4a09      	ldr	r2, [pc, #36]	; (8004ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8004ecc:	5cd3      	ldrb	r3, [r2, r3]
 8004ece:	fa21 f303 	lsr.w	r3, r1, r3
 8004ed2:	4a08      	ldr	r2, [pc, #32]	; (8004ef4 <HAL_RCC_ClockConfig+0x1cc>)
 8004ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	f7fd f9d0 	bl	800227c <HAL_InitTick>

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	40023c00 	.word	0x40023c00
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	0800cff4 	.word	0x0800cff4
 8004ef4:	20000304 	.word	0x20000304

08004ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004efe:	2300      	movs	r3, #0
 8004f00:	607b      	str	r3, [r7, #4]
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	2300      	movs	r3, #0
 8004f08:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f0e:	4b50      	ldr	r3, [pc, #320]	; (8005050 <HAL_RCC_GetSysClockFreq+0x158>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 030c 	and.w	r3, r3, #12
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d007      	beq.n	8004f2a <HAL_RCC_GetSysClockFreq+0x32>
 8004f1a:	2b08      	cmp	r3, #8
 8004f1c:	d008      	beq.n	8004f30 <HAL_RCC_GetSysClockFreq+0x38>
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f040 808d 	bne.w	800503e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f24:	4b4b      	ldr	r3, [pc, #300]	; (8005054 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004f26:	60bb      	str	r3, [r7, #8]
       break;
 8004f28:	e08c      	b.n	8005044 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f2a:	4b4b      	ldr	r3, [pc, #300]	; (8005058 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f2c:	60bb      	str	r3, [r7, #8]
      break;
 8004f2e:	e089      	b.n	8005044 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f30:	4b47      	ldr	r3, [pc, #284]	; (8005050 <HAL_RCC_GetSysClockFreq+0x158>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f38:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004f3a:	4b45      	ldr	r3, [pc, #276]	; (8005050 <HAL_RCC_GetSysClockFreq+0x158>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d023      	beq.n	8004f8e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f46:	4b42      	ldr	r3, [pc, #264]	; (8005050 <HAL_RCC_GetSysClockFreq+0x158>)
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	099b      	lsrs	r3, r3, #6
 8004f4c:	f04f 0400 	mov.w	r4, #0
 8004f50:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f54:	f04f 0200 	mov.w	r2, #0
 8004f58:	ea03 0501 	and.w	r5, r3, r1
 8004f5c:	ea04 0602 	and.w	r6, r4, r2
 8004f60:	4a3d      	ldr	r2, [pc, #244]	; (8005058 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f62:	fb02 f106 	mul.w	r1, r2, r6
 8004f66:	2200      	movs	r2, #0
 8004f68:	fb02 f205 	mul.w	r2, r2, r5
 8004f6c:	440a      	add	r2, r1
 8004f6e:	493a      	ldr	r1, [pc, #232]	; (8005058 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f70:	fba5 0101 	umull	r0, r1, r5, r1
 8004f74:	1853      	adds	r3, r2, r1
 8004f76:	4619      	mov	r1, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f04f 0400 	mov.w	r4, #0
 8004f7e:	461a      	mov	r2, r3
 8004f80:	4623      	mov	r3, r4
 8004f82:	f7fb f941 	bl	8000208 <__aeabi_uldivmod>
 8004f86:	4603      	mov	r3, r0
 8004f88:	460c      	mov	r4, r1
 8004f8a:	60fb      	str	r3, [r7, #12]
 8004f8c:	e049      	b.n	8005022 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f8e:	4b30      	ldr	r3, [pc, #192]	; (8005050 <HAL_RCC_GetSysClockFreq+0x158>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	099b      	lsrs	r3, r3, #6
 8004f94:	f04f 0400 	mov.w	r4, #0
 8004f98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f9c:	f04f 0200 	mov.w	r2, #0
 8004fa0:	ea03 0501 	and.w	r5, r3, r1
 8004fa4:	ea04 0602 	and.w	r6, r4, r2
 8004fa8:	4629      	mov	r1, r5
 8004faa:	4632      	mov	r2, r6
 8004fac:	f04f 0300 	mov.w	r3, #0
 8004fb0:	f04f 0400 	mov.w	r4, #0
 8004fb4:	0154      	lsls	r4, r2, #5
 8004fb6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004fba:	014b      	lsls	r3, r1, #5
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	4622      	mov	r2, r4
 8004fc0:	1b49      	subs	r1, r1, r5
 8004fc2:	eb62 0206 	sbc.w	r2, r2, r6
 8004fc6:	f04f 0300 	mov.w	r3, #0
 8004fca:	f04f 0400 	mov.w	r4, #0
 8004fce:	0194      	lsls	r4, r2, #6
 8004fd0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004fd4:	018b      	lsls	r3, r1, #6
 8004fd6:	1a5b      	subs	r3, r3, r1
 8004fd8:	eb64 0402 	sbc.w	r4, r4, r2
 8004fdc:	f04f 0100 	mov.w	r1, #0
 8004fe0:	f04f 0200 	mov.w	r2, #0
 8004fe4:	00e2      	lsls	r2, r4, #3
 8004fe6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004fea:	00d9      	lsls	r1, r3, #3
 8004fec:	460b      	mov	r3, r1
 8004fee:	4614      	mov	r4, r2
 8004ff0:	195b      	adds	r3, r3, r5
 8004ff2:	eb44 0406 	adc.w	r4, r4, r6
 8004ff6:	f04f 0100 	mov.w	r1, #0
 8004ffa:	f04f 0200 	mov.w	r2, #0
 8004ffe:	02a2      	lsls	r2, r4, #10
 8005000:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005004:	0299      	lsls	r1, r3, #10
 8005006:	460b      	mov	r3, r1
 8005008:	4614      	mov	r4, r2
 800500a:	4618      	mov	r0, r3
 800500c:	4621      	mov	r1, r4
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f04f 0400 	mov.w	r4, #0
 8005014:	461a      	mov	r2, r3
 8005016:	4623      	mov	r3, r4
 8005018:	f7fb f8f6 	bl	8000208 <__aeabi_uldivmod>
 800501c:	4603      	mov	r3, r0
 800501e:	460c      	mov	r4, r1
 8005020:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8005022:	4b0b      	ldr	r3, [pc, #44]	; (8005050 <HAL_RCC_GetSysClockFreq+0x158>)
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	0c1b      	lsrs	r3, r3, #16
 8005028:	f003 0303 	and.w	r3, r3, #3
 800502c:	3301      	adds	r3, #1
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	fbb2 f3f3 	udiv	r3, r2, r3
 800503a:	60bb      	str	r3, [r7, #8]
      break;
 800503c:	e002      	b.n	8005044 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800503e:	4b05      	ldr	r3, [pc, #20]	; (8005054 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005040:	60bb      	str	r3, [r7, #8]
      break;
 8005042:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005044:	68bb      	ldr	r3, [r7, #8]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3714      	adds	r7, #20
 800504a:	46bd      	mov	sp, r7
 800504c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800504e:	bf00      	nop
 8005050:	40023800 	.word	0x40023800
 8005054:	00f42400 	.word	0x00f42400
 8005058:	017d7840 	.word	0x017d7840

0800505c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005060:	4b03      	ldr	r3, [pc, #12]	; (8005070 <HAL_RCC_GetHCLKFreq+0x14>)
 8005062:	681b      	ldr	r3, [r3, #0]
}
 8005064:	4618      	mov	r0, r3
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	20000304 	.word	0x20000304

08005074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005078:	f7ff fff0 	bl	800505c <HAL_RCC_GetHCLKFreq>
 800507c:	4601      	mov	r1, r0
 800507e:	4b05      	ldr	r3, [pc, #20]	; (8005094 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	0a9b      	lsrs	r3, r3, #10
 8005084:	f003 0307 	and.w	r3, r3, #7
 8005088:	4a03      	ldr	r2, [pc, #12]	; (8005098 <HAL_RCC_GetPCLK1Freq+0x24>)
 800508a:	5cd3      	ldrb	r3, [r2, r3]
 800508c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005090:	4618      	mov	r0, r3
 8005092:	bd80      	pop	{r7, pc}
 8005094:	40023800 	.word	0x40023800
 8005098:	0800d004 	.word	0x0800d004

0800509c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050a0:	f7ff ffdc 	bl	800505c <HAL_RCC_GetHCLKFreq>
 80050a4:	4601      	mov	r1, r0
 80050a6:	4b05      	ldr	r3, [pc, #20]	; (80050bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	0b5b      	lsrs	r3, r3, #13
 80050ac:	f003 0307 	and.w	r3, r3, #7
 80050b0:	4a03      	ldr	r2, [pc, #12]	; (80050c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050b2:	5cd3      	ldrb	r3, [r2, r3]
 80050b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	40023800 	.word	0x40023800
 80050c0:	0800d004 	.word	0x0800d004

080050c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b088      	sub	sp, #32
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80050cc:	2300      	movs	r3, #0
 80050ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80050d0:	2300      	movs	r3, #0
 80050d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80050d4:	2300      	movs	r3, #0
 80050d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80050d8:	2300      	movs	r3, #0
 80050da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d012      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80050ec:	4b69      	ldr	r3, [pc, #420]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	4a68      	ldr	r2, [pc, #416]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80050f6:	6093      	str	r3, [r2, #8]
 80050f8:	4b66      	ldr	r3, [pc, #408]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005100:	4964      	ldr	r1, [pc, #400]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005102:	4313      	orrs	r3, r2
 8005104:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800510e:	2301      	movs	r3, #1
 8005110:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d017      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800511e:	4b5d      	ldr	r3, [pc, #372]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005124:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512c:	4959      	ldr	r1, [pc, #356]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800512e:	4313      	orrs	r3, r2
 8005130:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005138:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800513c:	d101      	bne.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800513e:	2301      	movs	r3, #1
 8005140:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800514a:	2301      	movs	r3, #1
 800514c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d017      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800515a:	4b4e      	ldr	r3, [pc, #312]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800515c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005160:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005168:	494a      	ldr	r1, [pc, #296]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800516a:	4313      	orrs	r3, r2
 800516c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005174:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005178:	d101      	bne.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800517a:	2301      	movs	r3, #1
 800517c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005186:	2301      	movs	r3, #1
 8005188:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005196:	2301      	movs	r3, #1
 8005198:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 808b 	beq.w	80052be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051a8:	4b3a      	ldr	r3, [pc, #232]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ac:	4a39      	ldr	r2, [pc, #228]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b2:	6413      	str	r3, [r2, #64]	; 0x40
 80051b4:	4b37      	ldr	r3, [pc, #220]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051bc:	60bb      	str	r3, [r7, #8]
 80051be:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80051c0:	4b35      	ldr	r3, [pc, #212]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a34      	ldr	r2, [pc, #208]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051cc:	f7fd f89a 	bl	8002304 <HAL_GetTick>
 80051d0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80051d2:	e008      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051d4:	f7fd f896 	bl	8002304 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b64      	cmp	r3, #100	; 0x64
 80051e0:	d901      	bls.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e355      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80051e6:	4b2c      	ldr	r3, [pc, #176]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d0f0      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051f2:	4b28      	ldr	r3, [pc, #160]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051fa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d035      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	429a      	cmp	r2, r3
 800520e:	d02e      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005210:	4b20      	ldr	r3, [pc, #128]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005218:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800521a:	4b1e      	ldr	r3, [pc, #120]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800521c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521e:	4a1d      	ldr	r2, [pc, #116]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005224:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005226:	4b1b      	ldr	r3, [pc, #108]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522a:	4a1a      	ldr	r2, [pc, #104]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800522c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005230:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005232:	4a18      	ldr	r2, [pc, #96]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005238:	4b16      	ldr	r3, [pc, #88]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800523a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b01      	cmp	r3, #1
 8005242:	d114      	bne.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005244:	f7fd f85e 	bl	8002304 <HAL_GetTick>
 8005248:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800524a:	e00a      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800524c:	f7fd f85a 	bl	8002304 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	f241 3288 	movw	r2, #5000	; 0x1388
 800525a:	4293      	cmp	r3, r2
 800525c:	d901      	bls.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e317      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005262:	4b0c      	ldr	r3, [pc, #48]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0ee      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005276:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800527a:	d111      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800527c:	4b05      	ldr	r3, [pc, #20]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005288:	4b04      	ldr	r3, [pc, #16]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800528a:	400b      	ands	r3, r1
 800528c:	4901      	ldr	r1, [pc, #4]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800528e:	4313      	orrs	r3, r2
 8005290:	608b      	str	r3, [r1, #8]
 8005292:	e00b      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005294:	40023800 	.word	0x40023800
 8005298:	40007000 	.word	0x40007000
 800529c:	0ffffcff 	.word	0x0ffffcff
 80052a0:	4bb0      	ldr	r3, [pc, #704]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	4aaf      	ldr	r2, [pc, #700]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80052a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80052aa:	6093      	str	r3, [r2, #8]
 80052ac:	4bad      	ldr	r3, [pc, #692]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80052ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052b8:	49aa      	ldr	r1, [pc, #680]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0310 	and.w	r3, r3, #16
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d010      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052ca:	4ba6      	ldr	r3, [pc, #664]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80052cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052d0:	4aa4      	ldr	r2, [pc, #656]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80052d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80052da:	4ba2      	ldr	r3, [pc, #648]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80052dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e4:	499f      	ldr	r1, [pc, #636]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00a      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052f8:	4b9a      	ldr	r3, [pc, #616]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80052fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005306:	4997      	ldr	r1, [pc, #604]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005308:	4313      	orrs	r3, r2
 800530a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00a      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800531a:	4b92      	ldr	r3, [pc, #584]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800531c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005320:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005328:	498e      	ldr	r1, [pc, #568]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800532a:	4313      	orrs	r3, r2
 800532c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00a      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800533c:	4b89      	ldr	r3, [pc, #548]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800533e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005342:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800534a:	4986      	ldr	r1, [pc, #536]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800534c:	4313      	orrs	r3, r2
 800534e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800535e:	4b81      	ldr	r3, [pc, #516]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005364:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800536c:	497d      	ldr	r1, [pc, #500]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800536e:	4313      	orrs	r3, r2
 8005370:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00a      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005380:	4b78      	ldr	r3, [pc, #480]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005386:	f023 0203 	bic.w	r2, r3, #3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538e:	4975      	ldr	r1, [pc, #468]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005390:	4313      	orrs	r3, r2
 8005392:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053a2:	4b70      	ldr	r3, [pc, #448]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80053a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a8:	f023 020c 	bic.w	r2, r3, #12
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b0:	496c      	ldr	r1, [pc, #432]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00a      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053c4:	4b67      	ldr	r3, [pc, #412]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80053c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d2:	4964      	ldr	r1, [pc, #400]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00a      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053e6:	4b5f      	ldr	r3, [pc, #380]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80053e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f4:	495b      	ldr	r1, [pc, #364]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00a      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005408:	4b56      	ldr	r3, [pc, #344]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800540a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005416:	4953      	ldr	r1, [pc, #332]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005418:	4313      	orrs	r3, r2
 800541a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800542a:	4b4e      	ldr	r3, [pc, #312]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800542c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005430:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005438:	494a      	ldr	r1, [pc, #296]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800543a:	4313      	orrs	r3, r2
 800543c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800544c:	4b45      	ldr	r3, [pc, #276]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800544e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005452:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800545a:	4942      	ldr	r1, [pc, #264]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800545c:	4313      	orrs	r3, r2
 800545e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800546e:	4b3d      	ldr	r3, [pc, #244]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005474:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800547c:	4939      	ldr	r1, [pc, #228]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800547e:	4313      	orrs	r3, r2
 8005480:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00a      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005490:	4b34      	ldr	r3, [pc, #208]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005496:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800549e:	4931      	ldr	r1, [pc, #196]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d011      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80054b2:	4b2c      	ldr	r3, [pc, #176]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80054b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054c0:	4928      	ldr	r1, [pc, #160]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054d0:	d101      	bne.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80054d2:	2301      	movs	r3, #1
 80054d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80054e2:	2301      	movs	r3, #1
 80054e4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00a      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054f2:	4b1c      	ldr	r3, [pc, #112]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80054f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005500:	4918      	ldr	r1, [pc, #96]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005502:	4313      	orrs	r3, r2
 8005504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00b      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005514:	4b13      	ldr	r3, [pc, #76]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005524:	490f      	ldr	r1, [pc, #60]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005526:	4313      	orrs	r3, r2
 8005528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d005      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800553a:	f040 80d8 	bne.w	80056ee <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800553e:	4b09      	ldr	r3, [pc, #36]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a08      	ldr	r2, [pc, #32]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005544:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005548:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800554a:	f7fc fedb 	bl	8002304 <HAL_GetTick>
 800554e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005550:	e00a      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005552:	f7fc fed7 	bl	8002304 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b64      	cmp	r3, #100	; 0x64
 800555e:	d903      	bls.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e196      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005564:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005568:	4b6c      	ldr	r3, [pc, #432]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1ee      	bne.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b00      	cmp	r3, #0
 800557e:	d021      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005584:	2b00      	cmp	r3, #0
 8005586:	d11d      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005588:	4b64      	ldr	r3, [pc, #400]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800558a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800558e:	0c1b      	lsrs	r3, r3, #16
 8005590:	f003 0303 	and.w	r3, r3, #3
 8005594:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005596:	4b61      	ldr	r3, [pc, #388]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800559c:	0e1b      	lsrs	r3, r3, #24
 800559e:	f003 030f 	and.w	r3, r3, #15
 80055a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	019a      	lsls	r2, r3, #6
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	041b      	lsls	r3, r3, #16
 80055ae:	431a      	orrs	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	061b      	lsls	r3, r3, #24
 80055b4:	431a      	orrs	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	071b      	lsls	r3, r3, #28
 80055bc:	4957      	ldr	r1, [pc, #348]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d004      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x516>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055d8:	d00a      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d02e      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055ee:	d129      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80055f0:	4b4a      	ldr	r3, [pc, #296]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80055f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055f6:	0c1b      	lsrs	r3, r3, #16
 80055f8:	f003 0303 	and.w	r3, r3, #3
 80055fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80055fe:	4b47      	ldr	r3, [pc, #284]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005604:	0f1b      	lsrs	r3, r3, #28
 8005606:	f003 0307 	and.w	r3, r3, #7
 800560a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	019a      	lsls	r2, r3, #6
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	041b      	lsls	r3, r3, #16
 8005616:	431a      	orrs	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	061b      	lsls	r3, r3, #24
 800561e:	431a      	orrs	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	071b      	lsls	r3, r3, #28
 8005624:	493d      	ldr	r1, [pc, #244]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005626:	4313      	orrs	r3, r2
 8005628:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800562c:	4b3b      	ldr	r3, [pc, #236]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800562e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005632:	f023 021f 	bic.w	r2, r3, #31
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	3b01      	subs	r3, #1
 800563c:	4937      	ldr	r1, [pc, #220]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800563e:	4313      	orrs	r3, r2
 8005640:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d01d      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005650:	4b32      	ldr	r3, [pc, #200]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005656:	0e1b      	lsrs	r3, r3, #24
 8005658:	f003 030f 	and.w	r3, r3, #15
 800565c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800565e:	4b2f      	ldr	r3, [pc, #188]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005664:	0f1b      	lsrs	r3, r3, #28
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	019a      	lsls	r2, r3, #6
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	041b      	lsls	r3, r3, #16
 8005678:	431a      	orrs	r2, r3
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	061b      	lsls	r3, r3, #24
 800567e:	431a      	orrs	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	071b      	lsls	r3, r3, #28
 8005684:	4925      	ldr	r1, [pc, #148]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005686:	4313      	orrs	r3, r2
 8005688:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d011      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	019a      	lsls	r2, r3, #6
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	041b      	lsls	r3, r3, #16
 80056a4:	431a      	orrs	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	061b      	lsls	r3, r3, #24
 80056ac:	431a      	orrs	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	071b      	lsls	r3, r3, #28
 80056b4:	4919      	ldr	r1, [pc, #100]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80056bc:	4b17      	ldr	r3, [pc, #92]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a16      	ldr	r2, [pc, #88]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80056c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056c8:	f7fc fe1c 	bl	8002304 <HAL_GetTick>
 80056cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056ce:	e008      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056d0:	f7fc fe18 	bl	8002304 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b64      	cmp	r3, #100	; 0x64
 80056dc:	d901      	bls.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e0d7      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056e2:	4b0e      	ldr	r3, [pc, #56]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0f0      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	f040 80cd 	bne.w	8005890 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80056f6:	4b09      	ldr	r3, [pc, #36]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a08      	ldr	r2, [pc, #32]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80056fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005700:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005702:	f7fc fdff 	bl	8002304 <HAL_GetTick>
 8005706:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005708:	e00a      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800570a:	f7fc fdfb 	bl	8002304 <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	2b64      	cmp	r3, #100	; 0x64
 8005716:	d903      	bls.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e0ba      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800571c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005720:	4b5e      	ldr	r3, [pc, #376]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005728:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800572c:	d0ed      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800573e:	2b00      	cmp	r3, #0
 8005740:	d009      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800574a:	2b00      	cmp	r3, #0
 800574c:	d02e      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	2b00      	cmp	r3, #0
 8005754:	d12a      	bne.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005756:	4b51      	ldr	r3, [pc, #324]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575c:	0c1b      	lsrs	r3, r3, #16
 800575e:	f003 0303 	and.w	r3, r3, #3
 8005762:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005764:	4b4d      	ldr	r3, [pc, #308]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576a:	0f1b      	lsrs	r3, r3, #28
 800576c:	f003 0307 	and.w	r3, r3, #7
 8005770:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	019a      	lsls	r2, r3, #6
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	041b      	lsls	r3, r3, #16
 800577c:	431a      	orrs	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	061b      	lsls	r3, r3, #24
 8005784:	431a      	orrs	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	071b      	lsls	r3, r3, #28
 800578a:	4944      	ldr	r1, [pc, #272]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800578c:	4313      	orrs	r3, r2
 800578e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005792:	4b42      	ldr	r3, [pc, #264]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005798:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a0:	3b01      	subs	r3, #1
 80057a2:	021b      	lsls	r3, r3, #8
 80057a4:	493d      	ldr	r1, [pc, #244]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d022      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057c0:	d11d      	bne.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80057c2:	4b36      	ldr	r3, [pc, #216]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80057c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c8:	0e1b      	lsrs	r3, r3, #24
 80057ca:	f003 030f 	and.w	r3, r3, #15
 80057ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057d0:	4b32      	ldr	r3, [pc, #200]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80057d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d6:	0f1b      	lsrs	r3, r3, #28
 80057d8:	f003 0307 	and.w	r3, r3, #7
 80057dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	019a      	lsls	r2, r3, #6
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	041b      	lsls	r3, r3, #16
 80057ea:	431a      	orrs	r2, r3
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	061b      	lsls	r3, r3, #24
 80057f0:	431a      	orrs	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	071b      	lsls	r3, r3, #28
 80057f6:	4929      	ldr	r1, [pc, #164]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0308 	and.w	r3, r3, #8
 8005806:	2b00      	cmp	r3, #0
 8005808:	d028      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800580a:	4b24      	ldr	r3, [pc, #144]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800580c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005810:	0e1b      	lsrs	r3, r3, #24
 8005812:	f003 030f 	and.w	r3, r3, #15
 8005816:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005818:	4b20      	ldr	r3, [pc, #128]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800581a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581e:	0c1b      	lsrs	r3, r3, #16
 8005820:	f003 0303 	and.w	r3, r3, #3
 8005824:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	019a      	lsls	r2, r3, #6
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	041b      	lsls	r3, r3, #16
 8005830:	431a      	orrs	r2, r3
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	061b      	lsls	r3, r3, #24
 8005836:	431a      	orrs	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	69db      	ldr	r3, [r3, #28]
 800583c:	071b      	lsls	r3, r3, #28
 800583e:	4917      	ldr	r1, [pc, #92]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005840:	4313      	orrs	r3, r2
 8005842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005846:	4b15      	ldr	r3, [pc, #84]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800584c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005854:	4911      	ldr	r1, [pc, #68]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005856:	4313      	orrs	r3, r2
 8005858:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800585c:	4b0f      	ldr	r3, [pc, #60]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a0e      	ldr	r2, [pc, #56]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005866:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005868:	f7fc fd4c 	bl	8002304 <HAL_GetTick>
 800586c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800586e:	e008      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005870:	f7fc fd48 	bl	8002304 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b64      	cmp	r3, #100	; 0x64
 800587c:	d901      	bls.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e007      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005882:	4b06      	ldr	r3, [pc, #24]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800588a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800588e:	d1ef      	bne.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3720      	adds	r7, #32
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	40023800 	.word	0x40023800

080058a0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e06b      	b.n	800598a <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	7f5b      	ldrb	r3, [r3, #29]
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d105      	bne.n	80058c8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f005 f862 	bl	800a98c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	22ca      	movs	r2, #202	; 0xca
 80058d4:	625a      	str	r2, [r3, #36]	; 0x24
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2253      	movs	r2, #83	; 0x53
 80058dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fb00 	bl	8005ee4 <RTC_EnterInitMode>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d008      	beq.n	80058fc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	22ff      	movs	r2, #255	; 0xff
 80058f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2204      	movs	r2, #4
 80058f6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e046      	b.n	800598a <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6899      	ldr	r1, [r3, #8]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	4b23      	ldr	r3, [pc, #140]	; (8005994 <HAL_RTC_Init+0xf4>)
 8005908:	400b      	ands	r3, r1
 800590a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6899      	ldr	r1, [r3, #8]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	431a      	orrs	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	431a      	orrs	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	68d2      	ldr	r2, [r2, #12]
 8005932:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6919      	ldr	r1, [r3, #16]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	041a      	lsls	r2, r3, #16
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005956:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 0208 	bic.w	r2, r2, #8
 8005966:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	699a      	ldr	r2, [r3, #24]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	22ff      	movs	r2, #255	; 0xff
 8005980:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005988:	2300      	movs	r3, #0
  }
}
 800598a:	4618      	mov	r0, r3
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	ff8fffbf 	.word	0xff8fffbf

08005998 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005998:	b590      	push	{r4, r7, lr}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80059a4:	2300      	movs	r3, #0
 80059a6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	7f1b      	ldrb	r3, [r3, #28]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d101      	bne.n	80059b4 <HAL_RTC_SetTime+0x1c>
 80059b0:	2302      	movs	r3, #2
 80059b2:	e0a8      	b.n	8005b06 <HAL_RTC_SetTime+0x16e>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2201      	movs	r2, #1
 80059b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2202      	movs	r2, #2
 80059be:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d126      	bne.n	8005a14 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d102      	bne.n	80059da <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	2200      	movs	r2, #0
 80059d8:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 faac 	bl	8005f3c <RTC_ByteToBcd2>
 80059e4:	4603      	mov	r3, r0
 80059e6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	785b      	ldrb	r3, [r3, #1]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 faa5 	bl	8005f3c <RTC_ByteToBcd2>
 80059f2:	4603      	mov	r3, r0
 80059f4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80059f6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	789b      	ldrb	r3, [r3, #2]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f000 fa9d 	bl	8005f3c <RTC_ByteToBcd2>
 8005a02:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8005a04:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	7b1b      	ldrb	r3, [r3, #12]
 8005a0c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	617b      	str	r3, [r7, #20]
 8005a12:	e018      	b.n	8005a46 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d102      	bne.n	8005a28 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	2200      	movs	r2, #0
 8005a26:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	785b      	ldrb	r3, [r3, #1]
 8005a32:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005a34:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8005a3a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	7b1b      	ldrb	r3, [r3, #12]
 8005a40:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005a42:	4313      	orrs	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	22ca      	movs	r2, #202	; 0xca
 8005a4c:	625a      	str	r2, [r3, #36]	; 0x24
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2253      	movs	r2, #83	; 0x53
 8005a54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f000 fa44 	bl	8005ee4 <RTC_EnterInitMode>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00b      	beq.n	8005a7a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	22ff      	movs	r2, #255	; 0xff
 8005a68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2204      	movs	r2, #4
 8005a6e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e045      	b.n	8005b06 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	6979      	ldr	r1, [r7, #20]
 8005a80:	4b23      	ldr	r3, [pc, #140]	; (8005b10 <HAL_RTC_SetTime+0x178>)
 8005a82:	400b      	ands	r3, r1
 8005a84:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689a      	ldr	r2, [r3, #8]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a94:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6899      	ldr	r1, [r3, #8]
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	691a      	ldr	r2, [r3, #16]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68da      	ldr	r2, [r3, #12]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005abc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f003 0320 	and.w	r3, r3, #32
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d111      	bne.n	8005af0 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f000 f9e1 	bl	8005e94 <HAL_RTC_WaitForSynchro>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00b      	beq.n	8005af0 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	22ff      	movs	r2, #255	; 0xff
 8005ade:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2204      	movs	r2, #4
 8005ae4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e00a      	b.n	8005b06 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	22ff      	movs	r2, #255	; 0xff
 8005af6:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2201      	movs	r2, #1
 8005afc:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005b04:	2300      	movs	r3, #0
  }
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	371c      	adds	r7, #28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd90      	pop	{r4, r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	007f7f7f 	.word	0x007f7f7f

08005b14 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005b14:	b590      	push	{r4, r7, lr}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8005b20:	2300      	movs	r3, #0
 8005b22:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	7f1b      	ldrb	r3, [r3, #28]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d101      	bne.n	8005b30 <HAL_RTC_SetDate+0x1c>
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	e092      	b.n	8005c56 <HAL_RTC_SetDate+0x142>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2201      	movs	r2, #1
 8005b34:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2202      	movs	r2, #2
 8005b3a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10e      	bne.n	8005b60 <HAL_RTC_SetDate+0x4c>
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	785b      	ldrb	r3, [r3, #1]
 8005b46:	f003 0310 	and.w	r3, r3, #16
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d008      	beq.n	8005b60 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	785b      	ldrb	r3, [r3, #1]
 8005b52:	f023 0310 	bic.w	r3, r3, #16
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	330a      	adds	r3, #10
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d11c      	bne.n	8005ba0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	78db      	ldrb	r3, [r3, #3]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 f9e6 	bl	8005f3c <RTC_ByteToBcd2>
 8005b70:	4603      	mov	r3, r0
 8005b72:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	785b      	ldrb	r3, [r3, #1]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 f9df 	bl	8005f3c <RTC_ByteToBcd2>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005b82:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	789b      	ldrb	r3, [r3, #2]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 f9d7 	bl	8005f3c <RTC_ByteToBcd2>
 8005b8e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005b90:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]
 8005b9e:	e00e      	b.n	8005bbe <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	78db      	ldrb	r3, [r3, #3]
 8005ba4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	785b      	ldrb	r3, [r3, #1]
 8005baa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005bac:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8005bb2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	22ca      	movs	r2, #202	; 0xca
 8005bc4:	625a      	str	r2, [r3, #36]	; 0x24
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2253      	movs	r2, #83	; 0x53
 8005bcc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 f988 	bl	8005ee4 <RTC_EnterInitMode>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00b      	beq.n	8005bf2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	22ff      	movs	r2, #255	; 0xff
 8005be0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2204      	movs	r2, #4
 8005be6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e031      	b.n	8005c56 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	6979      	ldr	r1, [r7, #20]
 8005bf8:	4b19      	ldr	r3, [pc, #100]	; (8005c60 <HAL_RTC_SetDate+0x14c>)
 8005bfa:	400b      	ands	r3, r1
 8005bfc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68da      	ldr	r2, [r3, #12]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c0c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f003 0320 	and.w	r3, r3, #32
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d111      	bne.n	8005c40 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f000 f939 	bl	8005e94 <HAL_RTC_WaitForSynchro>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00b      	beq.n	8005c40 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	22ff      	movs	r2, #255	; 0xff
 8005c2e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2204      	movs	r2, #4
 8005c34:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e00a      	b.n	8005c56 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	22ff      	movs	r2, #255	; 0xff
 8005c46:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005c54:	2300      	movs	r3, #0
  }
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	371c      	adds	r7, #28
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd90      	pop	{r4, r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	00ffff3f 	.word	0x00ffff3f

08005c64 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005c64:	b590      	push	{r4, r7, lr}
 8005c66:	b089      	sub	sp, #36	; 0x24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8005c70:	2300      	movs	r3, #0
 8005c72:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8005c74:	2300      	movs	r3, #0
 8005c76:	61fb      	str	r3, [r7, #28]
 8005c78:	2300      	movs	r3, #0
 8005c7a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	7f1b      	ldrb	r3, [r3, #28]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d101      	bne.n	8005c88 <HAL_RTC_SetAlarm+0x24>
 8005c84:	2302      	movs	r3, #2
 8005c86:	e101      	b.n	8005e8c <HAL_RTC_SetAlarm+0x228>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2202      	movs	r2, #2
 8005c92:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d137      	bne.n	8005d0a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d102      	bne.n	8005cae <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	2200      	movs	r2, #0
 8005cac:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 f942 	bl	8005f3c <RTC_ByteToBcd2>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	785b      	ldrb	r3, [r3, #1]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f000 f93b 	bl	8005f3c <RTC_ByteToBcd2>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005cca:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	789b      	ldrb	r3, [r3, #2]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f000 f933 	bl	8005f3c <RTC_ByteToBcd2>
 8005cd6:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8005cd8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	7b1b      	ldrb	r3, [r3, #12]
 8005ce0:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005ce2:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 f925 	bl	8005f3c <RTC_ByteToBcd2>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005cf6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8005cfe:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005d04:	4313      	orrs	r3, r2
 8005d06:	61fb      	str	r3, [r7, #28]
 8005d08:	e023      	b.n	8005d52 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d102      	bne.n	8005d1e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	785b      	ldrb	r3, [r3, #1]
 8005d28:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005d2a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8005d30:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	7b1b      	ldrb	r3, [r3, #12]
 8005d36:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005d38:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d40:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005d42:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8005d48:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	22ca      	movs	r2, #202	; 0xca
 8005d64:	625a      	str	r2, [r3, #36]	; 0x24
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2253      	movs	r2, #83	; 0x53
 8005d6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d76:	d13f      	bne.n	8005df8 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689a      	ldr	r2, [r3, #8]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d86:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689a      	ldr	r2, [r3, #8]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d96:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d98:	f7fc fab4 	bl	8002304 <HAL_GetTick>
 8005d9c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005d9e:	e013      	b.n	8005dc8 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005da0:	f7fc fab0 	bl	8002304 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dae:	d90b      	bls.n	8005dc8 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	22ff      	movs	r2, #255	; 0xff
 8005db6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2203      	movs	r2, #3
 8005dbc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e061      	b.n	8005e8c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d0e4      	beq.n	8005da0 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	69fa      	ldr	r2, [r7, #28]
 8005ddc:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	689a      	ldr	r2, [r3, #8]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005df4:	609a      	str	r2, [r3, #8]
 8005df6:	e03e      	b.n	8005e76 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689a      	ldr	r2, [r3, #8]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005e06:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689a      	ldr	r2, [r3, #8]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e16:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e18:	f7fc fa74 	bl	8002304 <HAL_GetTick>
 8005e1c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005e1e:	e013      	b.n	8005e48 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005e20:	f7fc fa70 	bl	8002304 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e2e:	d90b      	bls.n	8005e48 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	22ff      	movs	r2, #255	; 0xff
 8005e36:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2203      	movs	r2, #3
 8005e3c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e021      	b.n	8005e8c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d0e4      	beq.n	8005e20 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	69fa      	ldr	r2, [r7, #28]
 8005e5c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e74:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	22ff      	movs	r2, #255	; 0xff
 8005e7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2201      	movs	r2, #1
 8005e82:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3724      	adds	r7, #36	; 0x24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd90      	pop	{r4, r7, pc}

08005e94 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68da      	ldr	r2, [r3, #12]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005eae:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005eb0:	f7fc fa28 	bl	8002304 <HAL_GetTick>
 8005eb4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005eb6:	e009      	b.n	8005ecc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005eb8:	f7fc fa24 	bl	8002304 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ec6:	d901      	bls.n	8005ecc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e007      	b.n	8005edc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f003 0320 	and.w	r3, r3, #32
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d0ee      	beq.n	8005eb8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005eec:	2300      	movs	r3, #0
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d119      	bne.n	8005f32 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f04f 32ff 	mov.w	r2, #4294967295
 8005f06:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f08:	f7fc f9fc 	bl	8002304 <HAL_GetTick>
 8005f0c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005f0e:	e009      	b.n	8005f24 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005f10:	f7fc f9f8 	bl	8002304 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f1e:	d901      	bls.n	8005f24 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e007      	b.n	8005f34 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d0ee      	beq.n	8005f10 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	4603      	mov	r3, r0
 8005f44:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8005f46:	2300      	movs	r3, #0
 8005f48:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8005f4a:	e005      	b.n	8005f58 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8005f52:	79fb      	ldrb	r3, [r7, #7]
 8005f54:	3b0a      	subs	r3, #10
 8005f56:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8005f58:	79fb      	ldrb	r3, [r7, #7]
 8005f5a:	2b09      	cmp	r3, #9
 8005f5c:	d8f6      	bhi.n	8005f4c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	011b      	lsls	r3, r3, #4
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	79fb      	ldrb	r3, [r7, #7]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	b2db      	uxtb	r3, r3
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005f84:	2300      	movs	r3, #0
 8005f86:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	7f1b      	ldrb	r3, [r3, #28]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d101      	bne.n	8005f94 <HAL_RTCEx_SetTimeStamp+0x1c>
 8005f90:	2302      	movs	r3, #2
 8005f92:	e03e      	b.n	8006012 <HAL_RTCEx_SetTimeStamp+0x9a>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2201      	movs	r2, #1
 8005f98:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2202      	movs	r2, #2
 8005f9e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	689a      	ldr	r2, [r3, #8]
 8005fa6:	4b1e      	ldr	r3, [pc, #120]	; (8006020 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	22ca      	movs	r2, #202	; 0xca
 8005fba:	625a      	str	r2, [r3, #36]	; 0x24
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2253      	movs	r2, #83	; 0x53
 8005fc2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f022 0206 	bic.w	r2, r2, #6
 8005fd2:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689a      	ldr	r2, [r3, #8]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ffa:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	22ff      	movs	r2, #255	; 0xff
 8006002:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2201      	movs	r2, #1
 8006008:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	371c      	adds	r7, #28
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	fffff7f7 	.word	0xfffff7f7

08006024 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e01d      	b.n	8006072 <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d105      	bne.n	800604e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f004 fcb9 	bl	800a9c0 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2203      	movs	r2, #3
 8006052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f80f 	bl	800607a <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800607a:	b5b0      	push	{r4, r5, r7, lr}
 800607c:	b08e      	sub	sp, #56	; 0x38
 800607e:	af04      	add	r7, sp, #16
 8006080:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006082:	2300      	movs	r3, #0
 8006084:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006086:	2300      	movs	r3, #0
 8006088:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800608a:	2300      	movs	r3, #0
 800608c:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800608e:	2300      	movs	r3, #0
 8006090:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006092:	2300      	movs	r3, #0
 8006094:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006096:	2300      	movs	r3, #0
 8006098:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800609a:	2376      	movs	r3, #118	; 0x76
 800609c:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681d      	ldr	r5, [r3, #0]
 80060a2:	466c      	mov	r4, sp
 80060a4:	f107 0318 	add.w	r3, r7, #24
 80060a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80060ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80060b0:	f107 030c 	add.w	r3, r7, #12
 80060b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060b6:	4628      	mov	r0, r5
 80060b8:	f002 fa30 	bl	800851c <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060ca:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f002 fa5c 	bl	800858e <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060e4:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 80060e6:	2002      	movs	r0, #2
 80060e8:	f7fc f918 	bl	800231c <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 fb95 	bl	800681c <SD_PowerON>
 80060f2:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00b      	beq.n	8006112 <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	431a      	orrs	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e013      	b.n	800613a <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 fab9 	bl	800668a <SD_InitCard>
 8006118:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00b      	beq.n	8006138 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	431a      	orrs	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e000      	b.n	800613a <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3728      	adds	r7, #40	; 0x28
 800613e:	46bd      	mov	sp, r7
 8006140:	bdb0      	pop	{r4, r5, r7, pc}

08006142 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006142:	b480      	push	{r7}
 8006144:	b085      	sub	sp, #20
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 800614c:	2300      	movs	r3, #0
 800614e:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006154:	0e1b      	lsrs	r3, r3, #24
 8006156:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	099b      	lsrs	r3, r3, #6
 800615c:	b2db      	uxtb	r3, r3
 800615e:	f003 0303 	and.w	r3, r3, #3
 8006162:	b2da      	uxtb	r2, r3
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	089b      	lsrs	r3, r3, #2
 800616c:	b2db      	uxtb	r3, r3
 800616e:	f003 030f 	and.w	r3, r3, #15
 8006172:	b2da      	uxtb	r2, r3
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	b2db      	uxtb	r3, r3
 800617c:	f003 0303 	and.w	r3, r3, #3
 8006180:	b2da      	uxtb	r2, r3
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800618a:	0c1b      	lsrs	r3, r3, #16
 800618c:	b2db      	uxtb	r3, r3
 800618e:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	b2da      	uxtb	r2, r3
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800619c:	0a1b      	lsrs	r3, r3, #8
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061be:	0e1b      	lsrs	r3, r3, #24
 80061c0:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	011b      	lsls	r3, r3, #4
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061d2:	0c1b      	lsrs	r3, r3, #16
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	88db      	ldrh	r3, [r3, #6]
 80061dc:	b29a      	uxth	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	091b      	lsrs	r3, r3, #4
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	f003 030f 	and.w	r3, r3, #15
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	4313      	orrs	r3, r2
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	f003 030f 	and.w	r3, r3, #15
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006204:	0a1b      	lsrs	r3, r3, #8
 8006206:	b2db      	uxtb	r3, r3
 8006208:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	09db      	lsrs	r3, r3, #7
 800620e:	b2db      	uxtb	r3, r3
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	b2da      	uxtb	r2, r3
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	099b      	lsrs	r3, r3, #6
 800621e:	b2db      	uxtb	r3, r3
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	b2da      	uxtb	r2, r3
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	095b      	lsrs	r3, r3, #5
 800622e:	b2db      	uxtb	r3, r3
 8006230:	f003 0301 	and.w	r3, r3, #1
 8006234:	b2da      	uxtb	r2, r3
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	091b      	lsrs	r3, r3, #4
 800623e:	b2db      	uxtb	r3, r3
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	b2da      	uxtb	r2, r3
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2200      	movs	r2, #0
 800624e:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006254:	2b00      	cmp	r3, #0
 8006256:	f040 8086 	bne.w	8006366 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	029b      	lsls	r3, r3, #10
 800625e:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800626a:	b2db      	uxtb	r3, r3
 800626c:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	691a      	ldr	r2, [r3, #16]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	431a      	orrs	r2, r3
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006280:	0e1b      	lsrs	r3, r3, #24
 8006282:	b2db      	uxtb	r3, r3
 8006284:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	691a      	ldr	r2, [r3, #16]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	099b      	lsrs	r3, r3, #6
 800628e:	f003 0303 	and.w	r3, r3, #3
 8006292:	431a      	orrs	r2, r3
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	08db      	lsrs	r3, r3, #3
 800629c:	b2db      	uxtb	r3, r3
 800629e:	f003 0307 	and.w	r3, r3, #7
 80062a2:	b2da      	uxtb	r2, r3
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	f003 0307 	and.w	r3, r3, #7
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062ba:	0c1b      	lsrs	r3, r3, #16
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	095b      	lsrs	r3, r3, #5
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	f003 0307 	and.w	r3, r3, #7
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	089b      	lsrs	r3, r3, #2
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	f003 0307 	and.w	r3, r3, #7
 80062da:	b2da      	uxtb	r2, r3
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	005b      	lsls	r3, r3, #1
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	f003 0306 	and.w	r3, r3, #6
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062f6:	0a1b      	lsrs	r3, r3, #8
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	7e1b      	ldrb	r3, [r3, #24]
 8006300:	b2da      	uxtb	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	09db      	lsrs	r3, r3, #7
 8006306:	b2db      	uxtb	r3, r3
 8006308:	f003 0301 	and.w	r3, r3, #1
 800630c:	b2db      	uxtb	r3, r3
 800630e:	4313      	orrs	r3, r2
 8006310:	b2da      	uxtb	r2, r3
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	1c5a      	adds	r2, r3, #1
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	7e1b      	ldrb	r3, [r3, #24]
 8006324:	b2db      	uxtb	r3, r3
 8006326:	3302      	adds	r3, #2
 8006328:	2201      	movs	r2, #1
 800632a:	409a      	lsls	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006330:	fb02 f203 	mul.w	r2, r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	7a1b      	ldrb	r3, [r3, #8]
 800633c:	b2db      	uxtb	r3, r3
 800633e:	461a      	mov	r2, r3
 8006340:	2301      	movs	r3, #1
 8006342:	4093      	lsls	r3, r2
 8006344:	461a      	mov	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006352:	0a52      	lsrs	r2, r2, #9
 8006354:	fb02 f203 	mul.w	r2, r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006362:	661a      	str	r2, [r3, #96]	; 0x60
 8006364:	e04d      	b.n	8006402 <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800636a:	2b01      	cmp	r3, #1
 800636c:	d138      	bne.n	80063e0 <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006372:	b2db      	uxtb	r3, r3
 8006374:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	041b      	lsls	r3, r3, #16
 800637a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006386:	0e1b      	lsrs	r3, r3, #24
 8006388:	b2db      	uxtb	r3, r3
 800638a:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	691a      	ldr	r2, [r3, #16]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	021b      	lsls	r3, r3, #8
 8006394:	431a      	orrs	r2, r3
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800639e:	0c1b      	lsrs	r3, r3, #16
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	691a      	ldr	r2, [r3, #16]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	431a      	orrs	r2, r3
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063b4:	0a1b      	lsrs	r3, r3, #8
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	3301      	adds	r3, #1
 80063c0:	029a      	lsls	r2, r3, #10
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	655a      	str	r2, [r3, #84]	; 0x54
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063d4:	659a      	str	r2, [r3, #88]	; 0x58
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	661a      	str	r2, [r3, #96]	; 0x60
 80063de:	e010      	b.n	8006402 <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80063e8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ee:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e0c1      	b.n	8006586 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	099b      	lsrs	r3, r3, #6
 8006406:	b2db      	uxtb	r3, r3
 8006408:	f003 0301 	and.w	r3, r3, #1
 800640c:	b2da      	uxtb	r2, r3
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	b2db      	uxtb	r3, r3
 8006416:	005b      	lsls	r3, r3, #1
 8006418:	b2db      	uxtb	r3, r3
 800641a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800641e:	b2da      	uxtb	r2, r3
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006428:	b2db      	uxtb	r3, r3
 800642a:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	7e9b      	ldrb	r3, [r3, #26]
 8006430:	b2da      	uxtb	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	09db      	lsrs	r3, r3, #7
 8006436:	b2db      	uxtb	r3, r3
 8006438:	f003 0301 	and.w	r3, r3, #1
 800643c:	b2db      	uxtb	r3, r3
 800643e:	4313      	orrs	r3, r2
 8006440:	b2da      	uxtb	r2, r3
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	b2db      	uxtb	r3, r3
 800644a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800644e:	b2da      	uxtb	r2, r3
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006458:	0e1b      	lsrs	r3, r3, #24
 800645a:	b2db      	uxtb	r3, r3
 800645c:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	09db      	lsrs	r3, r3, #7
 8006462:	b2db      	uxtb	r3, r3
 8006464:	f003 0301 	and.w	r3, r3, #1
 8006468:	b2da      	uxtb	r2, r3
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	095b      	lsrs	r3, r3, #5
 8006472:	b2db      	uxtb	r3, r3
 8006474:	f003 0303 	and.w	r3, r3, #3
 8006478:	b2da      	uxtb	r2, r3
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	089b      	lsrs	r3, r3, #2
 8006482:	b2db      	uxtb	r3, r3
 8006484:	f003 0307 	and.w	r3, r3, #7
 8006488:	b2da      	uxtb	r2, r3
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	b2db      	uxtb	r3, r3
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	b2db      	uxtb	r3, r3
 8006496:	f003 030c 	and.w	r3, r3, #12
 800649a:	b2da      	uxtb	r2, r3
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a4:	0c1b      	lsrs	r3, r3, #16
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	7fdb      	ldrb	r3, [r3, #31]
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	099b      	lsrs	r3, r3, #6
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	f003 0303 	and.w	r3, r3, #3
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	4313      	orrs	r3, r2
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	095b      	lsrs	r3, r3, #5
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f2:	0a1b      	lsrs	r3, r3, #8
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	09db      	lsrs	r3, r3, #7
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	b2da      	uxtb	r2, r3
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	099b      	lsrs	r3, r3, #6
 800650e:	b2db      	uxtb	r3, r3
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	b2da      	uxtb	r2, r3
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	095b      	lsrs	r3, r3, #5
 8006520:	b2db      	uxtb	r3, r3
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	b2da      	uxtb	r2, r3
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	091b      	lsrs	r3, r3, #4
 8006532:	b2db      	uxtb	r3, r3
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	b2da      	uxtb	r2, r3
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	089b      	lsrs	r3, r3, #2
 8006544:	b2db      	uxtb	r3, r3
 8006546:	f003 0303 	and.w	r3, r3, #3
 800654a:	b2da      	uxtb	r2, r3
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	b2db      	uxtb	r3, r3
 8006556:	f003 0303 	and.w	r3, r3, #3
 800655a:	b2da      	uxtb	r2, r3
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006566:	b2db      	uxtb	r3, r3
 8006568:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	085b      	lsrs	r3, r3, #1
 800656e:	b2db      	uxtb	r3, r3
 8006570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006574:	b2da      	uxtb	r2, r3
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006592:	b5b0      	push	{r4, r5, r7, lr}
 8006594:	b08e      	sub	sp, #56	; 0x38
 8006596:	af04      	add	r7, sp, #16
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800659c:	2300      	movs	r3, #0
 800659e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2203      	movs	r2, #3
 80065a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ac:	2b03      	cmp	r3, #3
 80065ae:	d02e      	beq.n	800660e <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b6:	d106      	bne.n	80065c6 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	639a      	str	r2, [r3, #56]	; 0x38
 80065c4:	e029      	b.n	800661a <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065cc:	d10a      	bne.n	80065e4 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f9cc 	bl	800696c <SD_WideBus_Enable>
 80065d4:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065dc:	431a      	orrs	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	639a      	str	r2, [r3, #56]	; 0x38
 80065e2:	e01a      	b.n	800661a <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10a      	bne.n	8006600 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 fa0b 	bl	8006a06 <SD_WideBus_Disable>
 80065f0:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f8:	431a      	orrs	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	639a      	str	r2, [r3, #56]	; 0x38
 80065fe:	e00c      	b.n	800661a <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006604:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	639a      	str	r2, [r3, #56]	; 0x38
 800660c:	e005      	b.n	800661a <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006612:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00a      	beq.n	8006638 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800662a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e024      	b.n	8006682 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681d      	ldr	r5, [r3, #0]
 800665e:	466c      	mov	r4, sp
 8006660:	f107 0318 	add.w	r3, r7, #24
 8006664:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006668:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800666c:	f107 030c 	add.w	r3, r7, #12
 8006670:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006672:	4628      	mov	r0, r5
 8006674:	f001 ff52 	bl	800851c <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3728      	adds	r7, #40	; 0x28
 8006686:	46bd      	mov	sp, r7
 8006688:	bdb0      	pop	{r4, r5, r7, pc}

0800668a <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800668a:	b5b0      	push	{r4, r5, r7, lr}
 800668c:	b094      	sub	sp, #80	; 0x50
 800668e:	af04      	add	r7, sp, #16
 8006690:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006692:	2300      	movs	r3, #0
 8006694:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 8006696:	2301      	movs	r3, #1
 8006698:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4618      	mov	r0, r3
 80066a0:	f001 ff83 	bl	80085aa <SDMMC_GetPowerState>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d102      	bne.n	80066b0 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80066aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80066ae:	e0b1      	b.n	8006814 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066b4:	2b03      	cmp	r3, #3
 80066b6:	d02f      	beq.n	8006718 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4618      	mov	r0, r3
 80066be:	f002 f916 	bl	80088ee <SDMMC_CmdSendCID>
 80066c2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80066c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d001      	beq.n	80066ce <SD_InitCard+0x44>
    {
      return errorstate;
 80066ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066cc:	e0a2      	b.n	8006814 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2100      	movs	r1, #0
 80066d4:	4618      	mov	r0, r3
 80066d6:	f001 ffae 	bl	8008636 <SDMMC_GetResponse>
 80066da:	4602      	mov	r2, r0
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2104      	movs	r1, #4
 80066e6:	4618      	mov	r0, r3
 80066e8:	f001 ffa5 	bl	8008636 <SDMMC_GetResponse>
 80066ec:	4602      	mov	r2, r0
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2108      	movs	r1, #8
 80066f8:	4618      	mov	r0, r3
 80066fa:	f001 ff9c 	bl	8008636 <SDMMC_GetResponse>
 80066fe:	4602      	mov	r2, r0
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	210c      	movs	r1, #12
 800670a:	4618      	mov	r0, r3
 800670c:	f001 ff93 	bl	8008636 <SDMMC_GetResponse>
 8006710:	4602      	mov	r2, r0
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800671c:	2b03      	cmp	r3, #3
 800671e:	d00d      	beq.n	800673c <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f107 020e 	add.w	r2, r7, #14
 8006728:	4611      	mov	r1, r2
 800672a:	4618      	mov	r0, r3
 800672c:	f002 f920 	bl	8008970 <SDMMC_CmdSetRelAdd>
 8006730:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006734:	2b00      	cmp	r3, #0
 8006736:	d001      	beq.n	800673c <SD_InitCard+0xb2>
    {
      return errorstate;
 8006738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800673a:	e06b      	b.n	8006814 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006740:	2b03      	cmp	r3, #3
 8006742:	d036      	beq.n	80067b2 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006744:	89fb      	ldrh	r3, [r7, #14]
 8006746:	461a      	mov	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006754:	041b      	lsls	r3, r3, #16
 8006756:	4619      	mov	r1, r3
 8006758:	4610      	mov	r0, r2
 800675a:	f002 f8e8 	bl	800892e <SDMMC_CmdSendCSD>
 800675e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <SD_InitCard+0xe0>
    {
      return errorstate;
 8006766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006768:	e054      	b.n	8006814 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2100      	movs	r1, #0
 8006770:	4618      	mov	r0, r3
 8006772:	f001 ff60 	bl	8008636 <SDMMC_GetResponse>
 8006776:	4602      	mov	r2, r0
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2104      	movs	r1, #4
 8006782:	4618      	mov	r0, r3
 8006784:	f001 ff57 	bl	8008636 <SDMMC_GetResponse>
 8006788:	4602      	mov	r2, r0
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2108      	movs	r1, #8
 8006794:	4618      	mov	r0, r3
 8006796:	f001 ff4e 	bl	8008636 <SDMMC_GetResponse>
 800679a:	4602      	mov	r2, r0
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	210c      	movs	r1, #12
 80067a6:	4618      	mov	r0, r3
 80067a8:	f001 ff45 	bl	8008636 <SDMMC_GetResponse>
 80067ac:	4602      	mov	r2, r0
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2104      	movs	r1, #4
 80067b8:	4618      	mov	r0, r3
 80067ba:	f001 ff3c 	bl	8008636 <SDMMC_GetResponse>
 80067be:	4603      	mov	r3, r0
 80067c0:	0d1a      	lsrs	r2, r3, #20
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 80067c6:	f107 0310 	add.w	r3, r7, #16
 80067ca:	4619      	mov	r1, r3
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f7ff fcb8 	bl	8006142 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6819      	ldr	r1, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067da:	041b      	lsls	r3, r3, #16
 80067dc:	f04f 0400 	mov.w	r4, #0
 80067e0:	461a      	mov	r2, r3
 80067e2:	4623      	mov	r3, r4
 80067e4:	4608      	mov	r0, r1
 80067e6:	f001 ff8b 	bl	8008700 <SDMMC_CmdSelDesel>
 80067ea:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80067ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <SD_InitCard+0x16c>
  {
    return errorstate;
 80067f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f4:	e00e      	b.n	8006814 <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681d      	ldr	r5, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	466c      	mov	r4, sp
 80067fe:	f103 0210 	add.w	r2, r3, #16
 8006802:	ca07      	ldmia	r2, {r0, r1, r2}
 8006804:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006808:	3304      	adds	r3, #4
 800680a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800680c:	4628      	mov	r0, r5
 800680e:	f001 fe85 	bl	800851c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3740      	adds	r7, #64	; 0x40
 8006818:	46bd      	mov	sp, r7
 800681a:	bdb0      	pop	{r4, r5, r7, pc}

0800681c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8006824:	2300      	movs	r3, #0
 8006826:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 8006828:	2300      	movs	r3, #0
 800682a:	617b      	str	r3, [r7, #20]
 800682c:	2300      	movs	r3, #0
 800682e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006830:	2300      	movs	r3, #0
 8006832:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4618      	mov	r0, r3
 800683a:	f001 ff86 	bl	800874a <SDMMC_CmdGoIdleState>
 800683e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <SD_PowerON+0x2e>
  {
    return errorstate;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	e08c      	b.n	8006964 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4618      	mov	r0, r3
 8006850:	f001 ff9b 	bl	800878a <SDMMC_CmdOperCond>
 8006854:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d03d      	beq.n	80068d8 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8006862:	e032      	b.n	80068ca <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	1c5a      	adds	r2, r3, #1
 8006868:	60ba      	str	r2, [r7, #8]
 800686a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800686e:	4293      	cmp	r3, r2
 8006870:	d102      	bne.n	8006878 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006872:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006876:	e075      	b.n	8006964 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2100      	movs	r1, #0
 800687e:	4618      	mov	r0, r3
 8006880:	f001 ffa4 	bl	80087cc <SDMMC_CmdAppCommand>
 8006884:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d002      	beq.n	8006892 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800688c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006890:	e068      	b.n	8006964 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2100      	movs	r1, #0
 8006898:	4618      	mov	r0, r3
 800689a:	f001 ffbb 	bl	8008814 <SDMMC_CmdAppOperCommand>
 800689e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d002      	beq.n	80068ac <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80068aa:	e05b      	b.n	8006964 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2100      	movs	r1, #0
 80068b2:	4618      	mov	r0, r3
 80068b4:	f001 febf 	bl	8008636 <SDMMC_GetResponse>
 80068b8:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	0fdb      	lsrs	r3, r3, #31
 80068be:	2b01      	cmp	r3, #1
 80068c0:	bf0c      	ite	eq
 80068c2:	2301      	moveq	r3, #1
 80068c4:	2300      	movne	r3, #0
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d0c9      	beq.n	8006864 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	645a      	str	r2, [r3, #68]	; 0x44
 80068d6:	e044      	b.n	8006962 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 80068de:	e031      	b.n	8006944 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	1c5a      	adds	r2, r3, #1
 80068e4:	60ba      	str	r2, [r7, #8]
 80068e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d102      	bne.n	80068f4 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80068ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068f2:	e037      	b.n	8006964 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2100      	movs	r1, #0
 80068fa:	4618      	mov	r0, r3
 80068fc:	f001 ff66 	bl	80087cc <SDMMC_CmdAppCommand>
 8006900:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d001      	beq.n	800690c <SD_PowerON+0xf0>
      {
        return errorstate;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	e02b      	b.n	8006964 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006914:	4618      	mov	r0, r3
 8006916:	f001 ff7d 	bl	8008814 <SDMMC_CmdAppOperCommand>
 800691a:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d001      	beq.n	8006926 <SD_PowerON+0x10a>
      {
        return errorstate;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	e01e      	b.n	8006964 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2100      	movs	r1, #0
 800692c:	4618      	mov	r0, r3
 800692e:	f001 fe82 	bl	8008636 <SDMMC_GetResponse>
 8006932:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	0fdb      	lsrs	r3, r3, #31
 8006938:	2b01      	cmp	r3, #1
 800693a:	bf0c      	ite	eq
 800693c:	2301      	moveq	r3, #1
 800693e:	2300      	movne	r3, #0
 8006940:	b2db      	uxtb	r3, r3
 8006942:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d0ca      	beq.n	80068e0 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d003      	beq.n	800695c <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	645a      	str	r2, [r3, #68]	; 0x44
 800695a:	e002      	b.n	8006962 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3718      	adds	r7, #24
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8006974:	2300      	movs	r3, #0
 8006976:	60fb      	str	r3, [r7, #12]
 8006978:	2300      	movs	r3, #0
 800697a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800697c:	2300      	movs	r3, #0
 800697e:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2100      	movs	r1, #0
 8006986:	4618      	mov	r0, r3
 8006988:	f001 fe55 	bl	8008636 <SDMMC_GetResponse>
 800698c:	4603      	mov	r3, r0
 800698e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006992:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006996:	d102      	bne.n	800699e <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006998:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800699c:	e02f      	b.n	80069fe <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800699e:	f107 030c 	add.w	r3, r7, #12
 80069a2:	4619      	mov	r1, r3
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f87b 	bl	8006aa0 <SD_FindSCR>
 80069aa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	e023      	b.n	80069fe <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d01c      	beq.n	80069fa <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069c8:	041b      	lsls	r3, r3, #16
 80069ca:	4619      	mov	r1, r3
 80069cc:	4610      	mov	r0, r2
 80069ce:	f001 fefd 	bl	80087cc <SDMMC_CmdAppCommand>
 80069d2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	e00f      	b.n	80069fe <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2102      	movs	r1, #2
 80069e4:	4618      	mov	r0, r3
 80069e6:	f001 ff3b 	bl	8008860 <SDMMC_CmdBusWidth>
 80069ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	e003      	b.n	80069fe <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 80069f6:	2300      	movs	r3, #0
 80069f8:	e001      	b.n	80069fe <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80069fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3718      	adds	r7, #24
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b086      	sub	sp, #24
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8006a0e:	2300      	movs	r3, #0
 8006a10:	60fb      	str	r3, [r7, #12]
 8006a12:	2300      	movs	r3, #0
 8006a14:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006a16:	2300      	movs	r3, #0
 8006a18:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2100      	movs	r1, #0
 8006a20:	4618      	mov	r0, r3
 8006a22:	f001 fe08 	bl	8008636 <SDMMC_GetResponse>
 8006a26:	4603      	mov	r3, r0
 8006a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a30:	d102      	bne.n	8006a38 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006a32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a36:	e02f      	b.n	8006a98 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006a38:	f107 030c 	add.w	r3, r7, #12
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f82e 	bl	8006aa0 <SD_FindSCR>
 8006a44:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d001      	beq.n	8006a50 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	e023      	b.n	8006a98 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d01c      	beq.n	8006a94 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a62:	041b      	lsls	r3, r3, #16
 8006a64:	4619      	mov	r1, r3
 8006a66:	4610      	mov	r0, r2
 8006a68:	f001 feb0 	bl	80087cc <SDMMC_CmdAppCommand>
 8006a6c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	e00f      	b.n	8006a98 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f001 feee 	bl	8008860 <SDMMC_CmdBusWidth>
 8006a84:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	e003      	b.n	8006a98 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8006a90:	2300      	movs	r3, #0
 8006a92:	e001      	b.n	8006a98 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006a94:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3718      	adds	r7, #24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006aa0:	b590      	push	{r4, r7, lr}
 8006aa2:	b08f      	sub	sp, #60	; 0x3c
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8006aae:	f7fb fc29 	bl	8002304 <HAL_GetTick>
 8006ab2:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 8006ab8:	2300      	movs	r3, #0
 8006aba:	60fb      	str	r3, [r7, #12]
 8006abc:	2300      	movs	r3, #0
 8006abe:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2108      	movs	r1, #8
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f001 fdf6 	bl	80086b8 <SDMMC_CmdBlockLength>
 8006acc:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8006ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d001      	beq.n	8006ad8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad6:	e0a8      	b.n	8006c2a <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ae0:	041b      	lsls	r3, r3, #16
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	f001 fe71 	bl	80087cc <SDMMC_CmdAppCommand>
 8006aea:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8006aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	e099      	b.n	8006c2a <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006af6:	f04f 33ff 	mov.w	r3, #4294967295
 8006afa:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 8006afc:	2308      	movs	r3, #8
 8006afe:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006b00:	2330      	movs	r3, #48	; 0x30
 8006b02:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006b04:	2302      	movs	r3, #2
 8006b06:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f107 0214 	add.w	r2, r7, #20
 8006b18:	4611      	mov	r1, r2
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f001 fda0 	bl	8008660 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4618      	mov	r0, r3
 8006b26:	f001 febf 	bl	80088a8 <SDMMC_CmdSendSCR>
 8006b2a:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d022      	beq.n	8006b78 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8006b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b34:	e079      	b.n	8006c2a <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00e      	beq.n	8006b62 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6819      	ldr	r1, [r3, #0]
 8006b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	f107 020c 	add.w	r2, r7, #12
 8006b50:	18d4      	adds	r4, r2, r3
 8006b52:	4608      	mov	r0, r1
 8006b54:	f001 fd0e 	bl	8008574 <SDMMC_ReadFIFO>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	6023      	str	r3, [r4, #0]
      index++;
 8006b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b5e:	3301      	adds	r3, #1
 8006b60:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006b62:	f7fb fbcf 	bl	8002304 <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b70:	d102      	bne.n	8006b78 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006b72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006b76:	e058      	b.n	8006c2a <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b7e:	f240 432a 	movw	r3, #1066	; 0x42a
 8006b82:	4013      	ands	r3, r2
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d0d6      	beq.n	8006b36 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b8e:	f003 0308 	and.w	r3, r3, #8
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d005      	beq.n	8006ba2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2208      	movs	r2, #8
 8006b9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006b9e:	2308      	movs	r3, #8
 8006ba0:	e043      	b.n	8006c2a <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba8:	f003 0302 	and.w	r3, r3, #2
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d005      	beq.n	8006bbc <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006bb8:	2302      	movs	r3, #2
 8006bba:	e036      	b.n	8006c2a <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc2:	f003 0320 	and.w	r3, r3, #32
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d005      	beq.n	8006bd6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8006bd2:	2320      	movs	r3, #32
 8006bd4:	e029      	b.n	8006c2a <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006bde:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	061a      	lsls	r2, r3, #24
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	021b      	lsls	r3, r3, #8
 8006be8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006bec:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	0a1b      	lsrs	r3, r3, #8
 8006bf2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006bf6:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8006c02:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006c04:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	061a      	lsls	r2, r3, #24
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	021b      	lsls	r3, r3, #8
 8006c0e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c12:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	0a1b      	lsrs	r3, r3, #8
 8006c18:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006c1c:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	0e1b      	lsrs	r3, r3, #24
 8006c22:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	373c      	adds	r7, #60	; 0x3c
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd90      	pop	{r4, r7, pc}

08006c32 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b082      	sub	sp, #8
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
 8006c3a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d101      	bne.n	8006c46 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e025      	b.n	8006c92 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d106      	bne.n	8006c60 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f004 f8d6 	bl	800ae0c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2202      	movs	r2, #2
 8006c64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	3304      	adds	r3, #4
 8006c70:	4619      	mov	r1, r3
 8006c72:	4610      	mov	r0, r2
 8006c74:	f001 fb2c 	bl	80082d0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6818      	ldr	r0, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	461a      	mov	r2, r3
 8006c82:	6839      	ldr	r1, [r7, #0]
 8006c84:	f001 fb96 	bl	80083b4 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3708      	adds	r7, #8
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b084      	sub	sp, #16
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	60f8      	str	r0, [r7, #12]
 8006ca2:	60b9      	str	r1, [r7, #8]
 8006ca4:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d101      	bne.n	8006cb6 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	e018      	b.n	8006ce8 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2202      	movs	r2, #2
 8006cba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	68b9      	ldr	r1, [r7, #8]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f001 fbf4 	bl	80084b4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d104      	bne.n	8006cde <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2205      	movs	r2, #5
 8006cd8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006cdc:	e003      	b.n	8006ce6 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d101      	bne.n	8006d0a <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006d06:	2302      	movs	r3, #2
 8006d08:	e00e      	b.n	8006d28 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2202      	movs	r2, #2
 8006d0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6839      	ldr	r1, [r7, #0]
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f001 fbec 	bl	80084f6 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3708      	adds	r7, #8
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d101      	bne.n	8006d42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e01d      	b.n	8006d7e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d106      	bne.n	8006d5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f003 fec6 	bl	800aae8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	3304      	adds	r3, #4
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	4610      	mov	r0, r2
 8006d70:	f000 fb04 	bl	800737c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
	...

08006d88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68da      	ldr	r2, [r3, #12]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f042 0201 	orr.w	r2, r2, #1
 8006d9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689a      	ldr	r2, [r3, #8]
 8006da6:	4b0c      	ldr	r3, [pc, #48]	; (8006dd8 <HAL_TIM_Base_Start_IT+0x50>)
 8006da8:	4013      	ands	r3, r2
 8006daa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2b06      	cmp	r3, #6
 8006db0:	d00b      	beq.n	8006dca <HAL_TIM_Base_Start_IT+0x42>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006db8:	d007      	beq.n	8006dca <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f042 0201 	orr.w	r2, r2, #1
 8006dc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	00010007 	.word	0x00010007

08006ddc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d101      	bne.n	8006dee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e01d      	b.n	8006e2a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d106      	bne.n	8006e08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f003 fe3e 	bl	800aa84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	3304      	adds	r3, #4
 8006e18:	4619      	mov	r1, r3
 8006e1a:	4610      	mov	r0, r2
 8006e1c:	f000 faae 	bl	800737c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
	...

08006e34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2201      	movs	r2, #1
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 fd96 	bl	8007978 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a17      	ldr	r2, [pc, #92]	; (8006eb0 <HAL_TIM_PWM_Start+0x7c>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d004      	beq.n	8006e60 <HAL_TIM_PWM_Start+0x2c>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a16      	ldr	r2, [pc, #88]	; (8006eb4 <HAL_TIM_PWM_Start+0x80>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d101      	bne.n	8006e64 <HAL_TIM_PWM_Start+0x30>
 8006e60:	2301      	movs	r3, #1
 8006e62:	e000      	b.n	8006e66 <HAL_TIM_PWM_Start+0x32>
 8006e64:	2300      	movs	r3, #0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d007      	beq.n	8006e7a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	4b0d      	ldr	r3, [pc, #52]	; (8006eb8 <HAL_TIM_PWM_Start+0x84>)
 8006e82:	4013      	ands	r3, r2
 8006e84:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2b06      	cmp	r3, #6
 8006e8a:	d00b      	beq.n	8006ea4 <HAL_TIM_PWM_Start+0x70>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e92:	d007      	beq.n	8006ea4 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f042 0201 	orr.w	r2, r2, #1
 8006ea2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	40010000 	.word	0x40010000
 8006eb4:	40010400 	.word	0x40010400
 8006eb8:	00010007 	.word	0x00010007

08006ebc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	f003 0302 	and.w	r3, r3, #2
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d122      	bne.n	8006f18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	f003 0302 	and.w	r3, r3, #2
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d11b      	bne.n	8006f18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f06f 0202 	mvn.w	r2, #2
 8006ee8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	f003 0303 	and.w	r3, r3, #3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fa1e 	bl	8007340 <HAL_TIM_IC_CaptureCallback>
 8006f04:	e005      	b.n	8006f12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fa10 	bl	800732c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 fa21 	bl	8007354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	f003 0304 	and.w	r3, r3, #4
 8006f22:	2b04      	cmp	r3, #4
 8006f24:	d122      	bne.n	8006f6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	f003 0304 	and.w	r3, r3, #4
 8006f30:	2b04      	cmp	r3, #4
 8006f32:	d11b      	bne.n	8006f6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f06f 0204 	mvn.w	r2, #4
 8006f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2202      	movs	r2, #2
 8006f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f9f4 	bl	8007340 <HAL_TIM_IC_CaptureCallback>
 8006f58:	e005      	b.n	8006f66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f9e6 	bl	800732c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f9f7 	bl	8007354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	f003 0308 	and.w	r3, r3, #8
 8006f76:	2b08      	cmp	r3, #8
 8006f78:	d122      	bne.n	8006fc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	f003 0308 	and.w	r3, r3, #8
 8006f84:	2b08      	cmp	r3, #8
 8006f86:	d11b      	bne.n	8006fc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f06f 0208 	mvn.w	r2, #8
 8006f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2204      	movs	r2, #4
 8006f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	f003 0303 	and.w	r3, r3, #3
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f9ca 	bl	8007340 <HAL_TIM_IC_CaptureCallback>
 8006fac:	e005      	b.n	8006fba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f9bc 	bl	800732c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f9cd 	bl	8007354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	f003 0310 	and.w	r3, r3, #16
 8006fca:	2b10      	cmp	r3, #16
 8006fcc:	d122      	bne.n	8007014 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	f003 0310 	and.w	r3, r3, #16
 8006fd8:	2b10      	cmp	r3, #16
 8006fda:	d11b      	bne.n	8007014 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f06f 0210 	mvn.w	r2, #16
 8006fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2208      	movs	r2, #8
 8006fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d003      	beq.n	8007002 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f9a0 	bl	8007340 <HAL_TIM_IC_CaptureCallback>
 8007000:	e005      	b.n	800700e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f992 	bl	800732c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f9a3 	bl	8007354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b01      	cmp	r3, #1
 8007020:	d10e      	bne.n	8007040 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	2b01      	cmp	r3, #1
 800702e:	d107      	bne.n	8007040 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f06f 0201 	mvn.w	r2, #1
 8007038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f002 f9e0 	bl	8009400 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800704a:	2b80      	cmp	r3, #128	; 0x80
 800704c:	d10e      	bne.n	800706c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007058:	2b80      	cmp	r3, #128	; 0x80
 800705a:	d107      	bne.n	800706c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fd12 	bl	8007a90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800707a:	d10e      	bne.n	800709a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007086:	2b80      	cmp	r3, #128	; 0x80
 8007088:	d107      	bne.n	800709a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 fd05 	bl	8007aa4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a4:	2b40      	cmp	r3, #64	; 0x40
 80070a6:	d10e      	bne.n	80070c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b2:	2b40      	cmp	r3, #64	; 0x40
 80070b4:	d107      	bne.n	80070c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f951 	bl	8007368 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	f003 0320 	and.w	r3, r3, #32
 80070d0:	2b20      	cmp	r3, #32
 80070d2:	d10e      	bne.n	80070f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	f003 0320 	and.w	r3, r3, #32
 80070de:	2b20      	cmp	r3, #32
 80070e0:	d107      	bne.n	80070f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f06f 0220 	mvn.w	r2, #32
 80070ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fcc5 	bl	8007a7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070f2:	bf00      	nop
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
	...

080070fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800710e:	2b01      	cmp	r3, #1
 8007110:	d101      	bne.n	8007116 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007112:	2302      	movs	r3, #2
 8007114:	e105      	b.n	8007322 <HAL_TIM_PWM_ConfigChannel+0x226>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2201      	movs	r2, #1
 800711a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2202      	movs	r2, #2
 8007122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2b14      	cmp	r3, #20
 800712a:	f200 80f0 	bhi.w	800730e <HAL_TIM_PWM_ConfigChannel+0x212>
 800712e:	a201      	add	r2, pc, #4	; (adr r2, 8007134 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007134:	08007189 	.word	0x08007189
 8007138:	0800730f 	.word	0x0800730f
 800713c:	0800730f 	.word	0x0800730f
 8007140:	0800730f 	.word	0x0800730f
 8007144:	080071c9 	.word	0x080071c9
 8007148:	0800730f 	.word	0x0800730f
 800714c:	0800730f 	.word	0x0800730f
 8007150:	0800730f 	.word	0x0800730f
 8007154:	0800720b 	.word	0x0800720b
 8007158:	0800730f 	.word	0x0800730f
 800715c:	0800730f 	.word	0x0800730f
 8007160:	0800730f 	.word	0x0800730f
 8007164:	0800724b 	.word	0x0800724b
 8007168:	0800730f 	.word	0x0800730f
 800716c:	0800730f 	.word	0x0800730f
 8007170:	0800730f 	.word	0x0800730f
 8007174:	0800728d 	.word	0x0800728d
 8007178:	0800730f 	.word	0x0800730f
 800717c:	0800730f 	.word	0x0800730f
 8007180:	0800730f 	.word	0x0800730f
 8007184:	080072cd 	.word	0x080072cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68b9      	ldr	r1, [r7, #8]
 800718e:	4618      	mov	r0, r3
 8007190:	f000 f994 	bl	80074bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	699a      	ldr	r2, [r3, #24]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f042 0208 	orr.w	r2, r2, #8
 80071a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	699a      	ldr	r2, [r3, #24]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f022 0204 	bic.w	r2, r2, #4
 80071b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6999      	ldr	r1, [r3, #24]
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	691a      	ldr	r2, [r3, #16]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	430a      	orrs	r2, r1
 80071c4:	619a      	str	r2, [r3, #24]
      break;
 80071c6:	e0a3      	b.n	8007310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68b9      	ldr	r1, [r7, #8]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 f9e6 	bl	80075a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	699a      	ldr	r2, [r3, #24]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	699a      	ldr	r2, [r3, #24]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6999      	ldr	r1, [r3, #24]
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	021a      	lsls	r2, r3, #8
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	430a      	orrs	r2, r1
 8007206:	619a      	str	r2, [r3, #24]
      break;
 8007208:	e082      	b.n	8007310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68b9      	ldr	r1, [r7, #8]
 8007210:	4618      	mov	r0, r3
 8007212:	f000 fa3d 	bl	8007690 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	69da      	ldr	r2, [r3, #28]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f042 0208 	orr.w	r2, r2, #8
 8007224:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	69da      	ldr	r2, [r3, #28]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f022 0204 	bic.w	r2, r2, #4
 8007234:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	69d9      	ldr	r1, [r3, #28]
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	691a      	ldr	r2, [r3, #16]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	430a      	orrs	r2, r1
 8007246:	61da      	str	r2, [r3, #28]
      break;
 8007248:	e062      	b.n	8007310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68b9      	ldr	r1, [r7, #8]
 8007250:	4618      	mov	r0, r3
 8007252:	f000 fa93 	bl	800777c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	69da      	ldr	r2, [r3, #28]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007264:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	69da      	ldr	r2, [r3, #28]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	69d9      	ldr	r1, [r3, #28]
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	021a      	lsls	r2, r3, #8
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	430a      	orrs	r2, r1
 8007288:	61da      	str	r2, [r3, #28]
      break;
 800728a:	e041      	b.n	8007310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68b9      	ldr	r1, [r7, #8]
 8007292:	4618      	mov	r0, r3
 8007294:	f000 faca 	bl	800782c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f042 0208 	orr.w	r2, r2, #8
 80072a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f022 0204 	bic.w	r2, r2, #4
 80072b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	691a      	ldr	r2, [r3, #16]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	430a      	orrs	r2, r1
 80072c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80072ca:	e021      	b.n	8007310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68b9      	ldr	r1, [r7, #8]
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 fafc 	bl	80078d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	021a      	lsls	r2, r3, #8
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	430a      	orrs	r2, r1
 800730a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800730c:	e000      	b.n	8007310 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800730e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop

0800732c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007334:	bf00      	nop
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800735c:	bf00      	nop
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a40      	ldr	r2, [pc, #256]	; (8007490 <TIM_Base_SetConfig+0x114>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d013      	beq.n	80073bc <TIM_Base_SetConfig+0x40>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800739a:	d00f      	beq.n	80073bc <TIM_Base_SetConfig+0x40>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a3d      	ldr	r2, [pc, #244]	; (8007494 <TIM_Base_SetConfig+0x118>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d00b      	beq.n	80073bc <TIM_Base_SetConfig+0x40>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a3c      	ldr	r2, [pc, #240]	; (8007498 <TIM_Base_SetConfig+0x11c>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d007      	beq.n	80073bc <TIM_Base_SetConfig+0x40>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a3b      	ldr	r2, [pc, #236]	; (800749c <TIM_Base_SetConfig+0x120>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d003      	beq.n	80073bc <TIM_Base_SetConfig+0x40>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a3a      	ldr	r2, [pc, #232]	; (80074a0 <TIM_Base_SetConfig+0x124>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d108      	bne.n	80073ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a2f      	ldr	r2, [pc, #188]	; (8007490 <TIM_Base_SetConfig+0x114>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d02b      	beq.n	800742e <TIM_Base_SetConfig+0xb2>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073dc:	d027      	beq.n	800742e <TIM_Base_SetConfig+0xb2>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a2c      	ldr	r2, [pc, #176]	; (8007494 <TIM_Base_SetConfig+0x118>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d023      	beq.n	800742e <TIM_Base_SetConfig+0xb2>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a2b      	ldr	r2, [pc, #172]	; (8007498 <TIM_Base_SetConfig+0x11c>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d01f      	beq.n	800742e <TIM_Base_SetConfig+0xb2>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a2a      	ldr	r2, [pc, #168]	; (800749c <TIM_Base_SetConfig+0x120>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d01b      	beq.n	800742e <TIM_Base_SetConfig+0xb2>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a29      	ldr	r2, [pc, #164]	; (80074a0 <TIM_Base_SetConfig+0x124>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d017      	beq.n	800742e <TIM_Base_SetConfig+0xb2>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a28      	ldr	r2, [pc, #160]	; (80074a4 <TIM_Base_SetConfig+0x128>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d013      	beq.n	800742e <TIM_Base_SetConfig+0xb2>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a27      	ldr	r2, [pc, #156]	; (80074a8 <TIM_Base_SetConfig+0x12c>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d00f      	beq.n	800742e <TIM_Base_SetConfig+0xb2>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a26      	ldr	r2, [pc, #152]	; (80074ac <TIM_Base_SetConfig+0x130>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d00b      	beq.n	800742e <TIM_Base_SetConfig+0xb2>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a25      	ldr	r2, [pc, #148]	; (80074b0 <TIM_Base_SetConfig+0x134>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d007      	beq.n	800742e <TIM_Base_SetConfig+0xb2>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a24      	ldr	r2, [pc, #144]	; (80074b4 <TIM_Base_SetConfig+0x138>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d003      	beq.n	800742e <TIM_Base_SetConfig+0xb2>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a23      	ldr	r2, [pc, #140]	; (80074b8 <TIM_Base_SetConfig+0x13c>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d108      	bne.n	8007440 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	4313      	orrs	r3, r2
 800743e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	4313      	orrs	r3, r2
 800744c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	689a      	ldr	r2, [r3, #8]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a0a      	ldr	r2, [pc, #40]	; (8007490 <TIM_Base_SetConfig+0x114>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d003      	beq.n	8007474 <TIM_Base_SetConfig+0xf8>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a0c      	ldr	r2, [pc, #48]	; (80074a0 <TIM_Base_SetConfig+0x124>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d103      	bne.n	800747c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	691a      	ldr	r2, [r3, #16]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	615a      	str	r2, [r3, #20]
}
 8007482:	bf00      	nop
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	40010000 	.word	0x40010000
 8007494:	40000400 	.word	0x40000400
 8007498:	40000800 	.word	0x40000800
 800749c:	40000c00 	.word	0x40000c00
 80074a0:	40010400 	.word	0x40010400
 80074a4:	40014000 	.word	0x40014000
 80074a8:	40014400 	.word	0x40014400
 80074ac:	40014800 	.word	0x40014800
 80074b0:	40001800 	.word	0x40001800
 80074b4:	40001c00 	.word	0x40001c00
 80074b8:	40002000 	.word	0x40002000

080074bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074bc:	b480      	push	{r7}
 80074be:	b087      	sub	sp, #28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	f023 0201 	bic.w	r2, r3, #1
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a1b      	ldr	r3, [r3, #32]
 80074d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	699b      	ldr	r3, [r3, #24]
 80074e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	4b2b      	ldr	r3, [pc, #172]	; (8007594 <TIM_OC1_SetConfig+0xd8>)
 80074e8:	4013      	ands	r3, r2
 80074ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f023 0303 	bic.w	r3, r3, #3
 80074f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	f023 0302 	bic.w	r3, r3, #2
 8007504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	4313      	orrs	r3, r2
 800750e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a21      	ldr	r2, [pc, #132]	; (8007598 <TIM_OC1_SetConfig+0xdc>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d003      	beq.n	8007520 <TIM_OC1_SetConfig+0x64>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a20      	ldr	r2, [pc, #128]	; (800759c <TIM_OC1_SetConfig+0xe0>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d10c      	bne.n	800753a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f023 0308 	bic.w	r3, r3, #8
 8007526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	697a      	ldr	r2, [r7, #20]
 800752e:	4313      	orrs	r3, r2
 8007530:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f023 0304 	bic.w	r3, r3, #4
 8007538:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a16      	ldr	r2, [pc, #88]	; (8007598 <TIM_OC1_SetConfig+0xdc>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d003      	beq.n	800754a <TIM_OC1_SetConfig+0x8e>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a15      	ldr	r2, [pc, #84]	; (800759c <TIM_OC1_SetConfig+0xe0>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d111      	bne.n	800756e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007550:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007558:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	4313      	orrs	r3, r2
 8007562:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	4313      	orrs	r3, r2
 800756c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	685a      	ldr	r2, [r3, #4]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	697a      	ldr	r2, [r7, #20]
 8007586:	621a      	str	r2, [r3, #32]
}
 8007588:	bf00      	nop
 800758a:	371c      	adds	r7, #28
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr
 8007594:	fffeff8f 	.word	0xfffeff8f
 8007598:	40010000 	.word	0x40010000
 800759c:	40010400 	.word	0x40010400

080075a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b087      	sub	sp, #28
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a1b      	ldr	r3, [r3, #32]
 80075ae:	f023 0210 	bic.w	r2, r3, #16
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a1b      	ldr	r3, [r3, #32]
 80075ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	4b2e      	ldr	r3, [pc, #184]	; (8007684 <TIM_OC2_SetConfig+0xe4>)
 80075cc:	4013      	ands	r3, r2
 80075ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	021b      	lsls	r3, r3, #8
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	f023 0320 	bic.w	r3, r3, #32
 80075ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	011b      	lsls	r3, r3, #4
 80075f2:	697a      	ldr	r2, [r7, #20]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a23      	ldr	r2, [pc, #140]	; (8007688 <TIM_OC2_SetConfig+0xe8>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d003      	beq.n	8007608 <TIM_OC2_SetConfig+0x68>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a22      	ldr	r2, [pc, #136]	; (800768c <TIM_OC2_SetConfig+0xec>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d10d      	bne.n	8007624 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800760e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	011b      	lsls	r3, r3, #4
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	4313      	orrs	r3, r2
 800761a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007622:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a18      	ldr	r2, [pc, #96]	; (8007688 <TIM_OC2_SetConfig+0xe8>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d003      	beq.n	8007634 <TIM_OC2_SetConfig+0x94>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a17      	ldr	r2, [pc, #92]	; (800768c <TIM_OC2_SetConfig+0xec>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d113      	bne.n	800765c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800763a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007642:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	693a      	ldr	r2, [r7, #16]
 800764c:	4313      	orrs	r3, r2
 800764e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	4313      	orrs	r3, r2
 800765a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	693a      	ldr	r2, [r7, #16]
 8007660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	685a      	ldr	r2, [r3, #4]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	621a      	str	r2, [r3, #32]
}
 8007676:	bf00      	nop
 8007678:	371c      	adds	r7, #28
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	feff8fff 	.word	0xfeff8fff
 8007688:	40010000 	.word	0x40010000
 800768c:	40010400 	.word	0x40010400

08007690 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007690:	b480      	push	{r7}
 8007692:	b087      	sub	sp, #28
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a1b      	ldr	r3, [r3, #32]
 800769e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	69db      	ldr	r3, [r3, #28]
 80076b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	4b2d      	ldr	r3, [pc, #180]	; (8007770 <TIM_OC3_SetConfig+0xe0>)
 80076bc:	4013      	ands	r3, r2
 80076be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f023 0303 	bic.w	r3, r3, #3
 80076c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	021b      	lsls	r3, r3, #8
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a22      	ldr	r2, [pc, #136]	; (8007774 <TIM_OC3_SetConfig+0xe4>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d003      	beq.n	80076f6 <TIM_OC3_SetConfig+0x66>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a21      	ldr	r2, [pc, #132]	; (8007778 <TIM_OC3_SetConfig+0xe8>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d10d      	bne.n	8007712 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	021b      	lsls	r3, r3, #8
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	4313      	orrs	r3, r2
 8007708:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007710:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a17      	ldr	r2, [pc, #92]	; (8007774 <TIM_OC3_SetConfig+0xe4>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d003      	beq.n	8007722 <TIM_OC3_SetConfig+0x92>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a16      	ldr	r2, [pc, #88]	; (8007778 <TIM_OC3_SetConfig+0xe8>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d113      	bne.n	800774a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007728:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007730:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	011b      	lsls	r3, r3, #4
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	4313      	orrs	r3, r2
 800773c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	011b      	lsls	r3, r3, #4
 8007744:	693a      	ldr	r2, [r7, #16]
 8007746:	4313      	orrs	r3, r2
 8007748:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	693a      	ldr	r2, [r7, #16]
 800774e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	685a      	ldr	r2, [r3, #4]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	697a      	ldr	r2, [r7, #20]
 8007762:	621a      	str	r2, [r3, #32]
}
 8007764:	bf00      	nop
 8007766:	371c      	adds	r7, #28
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr
 8007770:	fffeff8f 	.word	0xfffeff8f
 8007774:	40010000 	.word	0x40010000
 8007778:	40010400 	.word	0x40010400

0800777c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800777c:	b480      	push	{r7}
 800777e:	b087      	sub	sp, #28
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a1b      	ldr	r3, [r3, #32]
 8007796:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	69db      	ldr	r3, [r3, #28]
 80077a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	4b1e      	ldr	r3, [pc, #120]	; (8007820 <TIM_OC4_SetConfig+0xa4>)
 80077a8:	4013      	ands	r3, r2
 80077aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	021b      	lsls	r3, r3, #8
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	4313      	orrs	r3, r2
 80077be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	031b      	lsls	r3, r3, #12
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a13      	ldr	r2, [pc, #76]	; (8007824 <TIM_OC4_SetConfig+0xa8>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d003      	beq.n	80077e4 <TIM_OC4_SetConfig+0x68>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a12      	ldr	r2, [pc, #72]	; (8007828 <TIM_OC4_SetConfig+0xac>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d109      	bne.n	80077f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	019b      	lsls	r3, r3, #6
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	685a      	ldr	r2, [r3, #4]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	621a      	str	r2, [r3, #32]
}
 8007812:	bf00      	nop
 8007814:	371c      	adds	r7, #28
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	feff8fff 	.word	0xfeff8fff
 8007824:	40010000 	.word	0x40010000
 8007828:	40010400 	.word	0x40010400

0800782c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800782c:	b480      	push	{r7}
 800782e:	b087      	sub	sp, #28
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a1b      	ldr	r3, [r3, #32]
 800783a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	4b1b      	ldr	r3, [pc, #108]	; (80078c4 <TIM_OC5_SetConfig+0x98>)
 8007858:	4013      	ands	r3, r2
 800785a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	4313      	orrs	r3, r2
 8007864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800786c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	041b      	lsls	r3, r3, #16
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	4313      	orrs	r3, r2
 8007878:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a12      	ldr	r2, [pc, #72]	; (80078c8 <TIM_OC5_SetConfig+0x9c>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d003      	beq.n	800788a <TIM_OC5_SetConfig+0x5e>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a11      	ldr	r2, [pc, #68]	; (80078cc <TIM_OC5_SetConfig+0xa0>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d109      	bne.n	800789e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007890:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	021b      	lsls	r3, r3, #8
 8007898:	697a      	ldr	r2, [r7, #20]
 800789a:	4313      	orrs	r3, r2
 800789c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	697a      	ldr	r2, [r7, #20]
 80078a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	685a      	ldr	r2, [r3, #4]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	693a      	ldr	r2, [r7, #16]
 80078b6:	621a      	str	r2, [r3, #32]
}
 80078b8:	bf00      	nop
 80078ba:	371c      	adds	r7, #28
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr
 80078c4:	fffeff8f 	.word	0xfffeff8f
 80078c8:	40010000 	.word	0x40010000
 80078cc:	40010400 	.word	0x40010400

080078d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b087      	sub	sp, #28
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	4b1c      	ldr	r3, [pc, #112]	; (800796c <TIM_OC6_SetConfig+0x9c>)
 80078fc:	4013      	ands	r3, r2
 80078fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	021b      	lsls	r3, r3, #8
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	4313      	orrs	r3, r2
 800790a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007912:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	051b      	lsls	r3, r3, #20
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	4313      	orrs	r3, r2
 800791e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a13      	ldr	r2, [pc, #76]	; (8007970 <TIM_OC6_SetConfig+0xa0>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d003      	beq.n	8007930 <TIM_OC6_SetConfig+0x60>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a12      	ldr	r2, [pc, #72]	; (8007974 <TIM_OC6_SetConfig+0xa4>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d109      	bne.n	8007944 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007936:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	029b      	lsls	r3, r3, #10
 800793e:	697a      	ldr	r2, [r7, #20]
 8007940:	4313      	orrs	r3, r2
 8007942:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	685a      	ldr	r2, [r3, #4]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	621a      	str	r2, [r3, #32]
}
 800795e:	bf00      	nop
 8007960:	371c      	adds	r7, #28
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	feff8fff 	.word	0xfeff8fff
 8007970:	40010000 	.word	0x40010000
 8007974:	40010400 	.word	0x40010400

08007978 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007978:	b480      	push	{r7}
 800797a:	b087      	sub	sp, #28
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	f003 031f 	and.w	r3, r3, #31
 800798a:	2201      	movs	r2, #1
 800798c:	fa02 f303 	lsl.w	r3, r2, r3
 8007990:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6a1a      	ldr	r2, [r3, #32]
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	43db      	mvns	r3, r3
 800799a:	401a      	ands	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6a1a      	ldr	r2, [r3, #32]
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	f003 031f 	and.w	r3, r3, #31
 80079aa:	6879      	ldr	r1, [r7, #4]
 80079ac:	fa01 f303 	lsl.w	r3, r1, r3
 80079b0:	431a      	orrs	r2, r3
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	621a      	str	r2, [r3, #32]
}
 80079b6:	bf00      	nop
 80079b8:	371c      	adds	r7, #28
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
	...

080079c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b085      	sub	sp, #20
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d101      	bne.n	80079dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079d8:	2302      	movs	r3, #2
 80079da:	e045      	b.n	8007a68 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2202      	movs	r2, #2
 80079e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a1c      	ldr	r2, [pc, #112]	; (8007a74 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d004      	beq.n	8007a10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a1b      	ldr	r2, [pc, #108]	; (8007a78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d108      	bne.n	8007a22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a3a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68ba      	ldr	r2, [r7, #8]
 8007a54:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3714      	adds	r7, #20
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr
 8007a74:	40010000 	.word	0x40010000
 8007a78:	40010400 	.word	0x40010400

08007a7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007aac:	bf00      	nop
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d101      	bne.n	8007aca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e040      	b.n	8007b4c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d106      	bne.n	8007ae0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f003 f8a4 	bl	800ac28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2224      	movs	r2, #36	; 0x24
 8007ae4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f022 0201 	bic.w	r2, r2, #1
 8007af4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f82c 	bl	8007b54 <UART_SetConfig>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d101      	bne.n	8007b06 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e022      	b.n	8007b4c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d002      	beq.n	8007b14 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 fac4 	bl	800809c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	685a      	ldr	r2, [r3, #4]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	689a      	ldr	r2, [r3, #8]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b32:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f042 0201 	orr.w	r2, r2, #1
 8007b42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 fb4b 	bl	80081e0 <UART_CheckIdleState>
 8007b4a:	4603      	mov	r3, r0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b088      	sub	sp, #32
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b60:	2300      	movs	r3, #0
 8007b62:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	689a      	ldr	r2, [r3, #8]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	431a      	orrs	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	431a      	orrs	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	69db      	ldr	r3, [r3, #28]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	4bb1      	ldr	r3, [pc, #708]	; (8007e48 <UART_SetConfig+0x2f4>)
 8007b84:	4013      	ands	r3, r2
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	6812      	ldr	r2, [r2, #0]
 8007b8a:	6939      	ldr	r1, [r7, #16]
 8007b8c:	430b      	orrs	r3, r1
 8007b8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	68da      	ldr	r2, [r3, #12]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a1b      	ldr	r3, [r3, #32]
 8007bb0:	693a      	ldr	r2, [r7, #16]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	430a      	orrs	r2, r1
 8007bc8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a9f      	ldr	r2, [pc, #636]	; (8007e4c <UART_SetConfig+0x2f8>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d121      	bne.n	8007c18 <UART_SetConfig+0xc4>
 8007bd4:	4b9e      	ldr	r3, [pc, #632]	; (8007e50 <UART_SetConfig+0x2fc>)
 8007bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bda:	f003 0303 	and.w	r3, r3, #3
 8007bde:	2b03      	cmp	r3, #3
 8007be0:	d816      	bhi.n	8007c10 <UART_SetConfig+0xbc>
 8007be2:	a201      	add	r2, pc, #4	; (adr r2, 8007be8 <UART_SetConfig+0x94>)
 8007be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be8:	08007bf9 	.word	0x08007bf9
 8007bec:	08007c05 	.word	0x08007c05
 8007bf0:	08007bff 	.word	0x08007bff
 8007bf4:	08007c0b 	.word	0x08007c0b
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	77fb      	strb	r3, [r7, #31]
 8007bfc:	e151      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007bfe:	2302      	movs	r3, #2
 8007c00:	77fb      	strb	r3, [r7, #31]
 8007c02:	e14e      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007c04:	2304      	movs	r3, #4
 8007c06:	77fb      	strb	r3, [r7, #31]
 8007c08:	e14b      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007c0a:	2308      	movs	r3, #8
 8007c0c:	77fb      	strb	r3, [r7, #31]
 8007c0e:	e148      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007c10:	2310      	movs	r3, #16
 8007c12:	77fb      	strb	r3, [r7, #31]
 8007c14:	bf00      	nop
 8007c16:	e144      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a8d      	ldr	r2, [pc, #564]	; (8007e54 <UART_SetConfig+0x300>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d134      	bne.n	8007c8c <UART_SetConfig+0x138>
 8007c22:	4b8b      	ldr	r3, [pc, #556]	; (8007e50 <UART_SetConfig+0x2fc>)
 8007c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c28:	f003 030c 	and.w	r3, r3, #12
 8007c2c:	2b0c      	cmp	r3, #12
 8007c2e:	d829      	bhi.n	8007c84 <UART_SetConfig+0x130>
 8007c30:	a201      	add	r2, pc, #4	; (adr r2, 8007c38 <UART_SetConfig+0xe4>)
 8007c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c36:	bf00      	nop
 8007c38:	08007c6d 	.word	0x08007c6d
 8007c3c:	08007c85 	.word	0x08007c85
 8007c40:	08007c85 	.word	0x08007c85
 8007c44:	08007c85 	.word	0x08007c85
 8007c48:	08007c79 	.word	0x08007c79
 8007c4c:	08007c85 	.word	0x08007c85
 8007c50:	08007c85 	.word	0x08007c85
 8007c54:	08007c85 	.word	0x08007c85
 8007c58:	08007c73 	.word	0x08007c73
 8007c5c:	08007c85 	.word	0x08007c85
 8007c60:	08007c85 	.word	0x08007c85
 8007c64:	08007c85 	.word	0x08007c85
 8007c68:	08007c7f 	.word	0x08007c7f
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	77fb      	strb	r3, [r7, #31]
 8007c70:	e117      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007c72:	2302      	movs	r3, #2
 8007c74:	77fb      	strb	r3, [r7, #31]
 8007c76:	e114      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007c78:	2304      	movs	r3, #4
 8007c7a:	77fb      	strb	r3, [r7, #31]
 8007c7c:	e111      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007c7e:	2308      	movs	r3, #8
 8007c80:	77fb      	strb	r3, [r7, #31]
 8007c82:	e10e      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007c84:	2310      	movs	r3, #16
 8007c86:	77fb      	strb	r3, [r7, #31]
 8007c88:	bf00      	nop
 8007c8a:	e10a      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a71      	ldr	r2, [pc, #452]	; (8007e58 <UART_SetConfig+0x304>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d120      	bne.n	8007cd8 <UART_SetConfig+0x184>
 8007c96:	4b6e      	ldr	r3, [pc, #440]	; (8007e50 <UART_SetConfig+0x2fc>)
 8007c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c9c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007ca0:	2b10      	cmp	r3, #16
 8007ca2:	d00f      	beq.n	8007cc4 <UART_SetConfig+0x170>
 8007ca4:	2b10      	cmp	r3, #16
 8007ca6:	d802      	bhi.n	8007cae <UART_SetConfig+0x15a>
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d005      	beq.n	8007cb8 <UART_SetConfig+0x164>
 8007cac:	e010      	b.n	8007cd0 <UART_SetConfig+0x17c>
 8007cae:	2b20      	cmp	r3, #32
 8007cb0:	d005      	beq.n	8007cbe <UART_SetConfig+0x16a>
 8007cb2:	2b30      	cmp	r3, #48	; 0x30
 8007cb4:	d009      	beq.n	8007cca <UART_SetConfig+0x176>
 8007cb6:	e00b      	b.n	8007cd0 <UART_SetConfig+0x17c>
 8007cb8:	2300      	movs	r3, #0
 8007cba:	77fb      	strb	r3, [r7, #31]
 8007cbc:	e0f1      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007cbe:	2302      	movs	r3, #2
 8007cc0:	77fb      	strb	r3, [r7, #31]
 8007cc2:	e0ee      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007cc4:	2304      	movs	r3, #4
 8007cc6:	77fb      	strb	r3, [r7, #31]
 8007cc8:	e0eb      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007cca:	2308      	movs	r3, #8
 8007ccc:	77fb      	strb	r3, [r7, #31]
 8007cce:	e0e8      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007cd0:	2310      	movs	r3, #16
 8007cd2:	77fb      	strb	r3, [r7, #31]
 8007cd4:	bf00      	nop
 8007cd6:	e0e4      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a5f      	ldr	r2, [pc, #380]	; (8007e5c <UART_SetConfig+0x308>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d120      	bne.n	8007d24 <UART_SetConfig+0x1d0>
 8007ce2:	4b5b      	ldr	r3, [pc, #364]	; (8007e50 <UART_SetConfig+0x2fc>)
 8007ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007cec:	2b40      	cmp	r3, #64	; 0x40
 8007cee:	d00f      	beq.n	8007d10 <UART_SetConfig+0x1bc>
 8007cf0:	2b40      	cmp	r3, #64	; 0x40
 8007cf2:	d802      	bhi.n	8007cfa <UART_SetConfig+0x1a6>
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d005      	beq.n	8007d04 <UART_SetConfig+0x1b0>
 8007cf8:	e010      	b.n	8007d1c <UART_SetConfig+0x1c8>
 8007cfa:	2b80      	cmp	r3, #128	; 0x80
 8007cfc:	d005      	beq.n	8007d0a <UART_SetConfig+0x1b6>
 8007cfe:	2bc0      	cmp	r3, #192	; 0xc0
 8007d00:	d009      	beq.n	8007d16 <UART_SetConfig+0x1c2>
 8007d02:	e00b      	b.n	8007d1c <UART_SetConfig+0x1c8>
 8007d04:	2300      	movs	r3, #0
 8007d06:	77fb      	strb	r3, [r7, #31]
 8007d08:	e0cb      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007d0a:	2302      	movs	r3, #2
 8007d0c:	77fb      	strb	r3, [r7, #31]
 8007d0e:	e0c8      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007d10:	2304      	movs	r3, #4
 8007d12:	77fb      	strb	r3, [r7, #31]
 8007d14:	e0c5      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007d16:	2308      	movs	r3, #8
 8007d18:	77fb      	strb	r3, [r7, #31]
 8007d1a:	e0c2      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007d1c:	2310      	movs	r3, #16
 8007d1e:	77fb      	strb	r3, [r7, #31]
 8007d20:	bf00      	nop
 8007d22:	e0be      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a4d      	ldr	r2, [pc, #308]	; (8007e60 <UART_SetConfig+0x30c>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d124      	bne.n	8007d78 <UART_SetConfig+0x224>
 8007d2e:	4b48      	ldr	r3, [pc, #288]	; (8007e50 <UART_SetConfig+0x2fc>)
 8007d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d3c:	d012      	beq.n	8007d64 <UART_SetConfig+0x210>
 8007d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d42:	d802      	bhi.n	8007d4a <UART_SetConfig+0x1f6>
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d007      	beq.n	8007d58 <UART_SetConfig+0x204>
 8007d48:	e012      	b.n	8007d70 <UART_SetConfig+0x21c>
 8007d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d4e:	d006      	beq.n	8007d5e <UART_SetConfig+0x20a>
 8007d50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d54:	d009      	beq.n	8007d6a <UART_SetConfig+0x216>
 8007d56:	e00b      	b.n	8007d70 <UART_SetConfig+0x21c>
 8007d58:	2300      	movs	r3, #0
 8007d5a:	77fb      	strb	r3, [r7, #31]
 8007d5c:	e0a1      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007d5e:	2302      	movs	r3, #2
 8007d60:	77fb      	strb	r3, [r7, #31]
 8007d62:	e09e      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007d64:	2304      	movs	r3, #4
 8007d66:	77fb      	strb	r3, [r7, #31]
 8007d68:	e09b      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007d6a:	2308      	movs	r3, #8
 8007d6c:	77fb      	strb	r3, [r7, #31]
 8007d6e:	e098      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007d70:	2310      	movs	r3, #16
 8007d72:	77fb      	strb	r3, [r7, #31]
 8007d74:	bf00      	nop
 8007d76:	e094      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a39      	ldr	r2, [pc, #228]	; (8007e64 <UART_SetConfig+0x310>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d124      	bne.n	8007dcc <UART_SetConfig+0x278>
 8007d82:	4b33      	ldr	r3, [pc, #204]	; (8007e50 <UART_SetConfig+0x2fc>)
 8007d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d90:	d012      	beq.n	8007db8 <UART_SetConfig+0x264>
 8007d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d96:	d802      	bhi.n	8007d9e <UART_SetConfig+0x24a>
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d007      	beq.n	8007dac <UART_SetConfig+0x258>
 8007d9c:	e012      	b.n	8007dc4 <UART_SetConfig+0x270>
 8007d9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007da2:	d006      	beq.n	8007db2 <UART_SetConfig+0x25e>
 8007da4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007da8:	d009      	beq.n	8007dbe <UART_SetConfig+0x26a>
 8007daa:	e00b      	b.n	8007dc4 <UART_SetConfig+0x270>
 8007dac:	2301      	movs	r3, #1
 8007dae:	77fb      	strb	r3, [r7, #31]
 8007db0:	e077      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007db2:	2302      	movs	r3, #2
 8007db4:	77fb      	strb	r3, [r7, #31]
 8007db6:	e074      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007db8:	2304      	movs	r3, #4
 8007dba:	77fb      	strb	r3, [r7, #31]
 8007dbc:	e071      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007dbe:	2308      	movs	r3, #8
 8007dc0:	77fb      	strb	r3, [r7, #31]
 8007dc2:	e06e      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007dc4:	2310      	movs	r3, #16
 8007dc6:	77fb      	strb	r3, [r7, #31]
 8007dc8:	bf00      	nop
 8007dca:	e06a      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a25      	ldr	r2, [pc, #148]	; (8007e68 <UART_SetConfig+0x314>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d124      	bne.n	8007e20 <UART_SetConfig+0x2cc>
 8007dd6:	4b1e      	ldr	r3, [pc, #120]	; (8007e50 <UART_SetConfig+0x2fc>)
 8007dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ddc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007de4:	d012      	beq.n	8007e0c <UART_SetConfig+0x2b8>
 8007de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dea:	d802      	bhi.n	8007df2 <UART_SetConfig+0x29e>
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d007      	beq.n	8007e00 <UART_SetConfig+0x2ac>
 8007df0:	e012      	b.n	8007e18 <UART_SetConfig+0x2c4>
 8007df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007df6:	d006      	beq.n	8007e06 <UART_SetConfig+0x2b2>
 8007df8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007dfc:	d009      	beq.n	8007e12 <UART_SetConfig+0x2be>
 8007dfe:	e00b      	b.n	8007e18 <UART_SetConfig+0x2c4>
 8007e00:	2300      	movs	r3, #0
 8007e02:	77fb      	strb	r3, [r7, #31]
 8007e04:	e04d      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007e06:	2302      	movs	r3, #2
 8007e08:	77fb      	strb	r3, [r7, #31]
 8007e0a:	e04a      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007e0c:	2304      	movs	r3, #4
 8007e0e:	77fb      	strb	r3, [r7, #31]
 8007e10:	e047      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007e12:	2308      	movs	r3, #8
 8007e14:	77fb      	strb	r3, [r7, #31]
 8007e16:	e044      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007e18:	2310      	movs	r3, #16
 8007e1a:	77fb      	strb	r3, [r7, #31]
 8007e1c:	bf00      	nop
 8007e1e:	e040      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a11      	ldr	r2, [pc, #68]	; (8007e6c <UART_SetConfig+0x318>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d139      	bne.n	8007e9e <UART_SetConfig+0x34a>
 8007e2a:	4b09      	ldr	r3, [pc, #36]	; (8007e50 <UART_SetConfig+0x2fc>)
 8007e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007e34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e38:	d027      	beq.n	8007e8a <UART_SetConfig+0x336>
 8007e3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e3e:	d817      	bhi.n	8007e70 <UART_SetConfig+0x31c>
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d01c      	beq.n	8007e7e <UART_SetConfig+0x32a>
 8007e44:	e027      	b.n	8007e96 <UART_SetConfig+0x342>
 8007e46:	bf00      	nop
 8007e48:	efff69f3 	.word	0xefff69f3
 8007e4c:	40011000 	.word	0x40011000
 8007e50:	40023800 	.word	0x40023800
 8007e54:	40004400 	.word	0x40004400
 8007e58:	40004800 	.word	0x40004800
 8007e5c:	40004c00 	.word	0x40004c00
 8007e60:	40005000 	.word	0x40005000
 8007e64:	40011400 	.word	0x40011400
 8007e68:	40007800 	.word	0x40007800
 8007e6c:	40007c00 	.word	0x40007c00
 8007e70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e74:	d006      	beq.n	8007e84 <UART_SetConfig+0x330>
 8007e76:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e7a:	d009      	beq.n	8007e90 <UART_SetConfig+0x33c>
 8007e7c:	e00b      	b.n	8007e96 <UART_SetConfig+0x342>
 8007e7e:	2300      	movs	r3, #0
 8007e80:	77fb      	strb	r3, [r7, #31]
 8007e82:	e00e      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007e84:	2302      	movs	r3, #2
 8007e86:	77fb      	strb	r3, [r7, #31]
 8007e88:	e00b      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007e8a:	2304      	movs	r3, #4
 8007e8c:	77fb      	strb	r3, [r7, #31]
 8007e8e:	e008      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007e90:	2308      	movs	r3, #8
 8007e92:	77fb      	strb	r3, [r7, #31]
 8007e94:	e005      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007e96:	2310      	movs	r3, #16
 8007e98:	77fb      	strb	r3, [r7, #31]
 8007e9a:	bf00      	nop
 8007e9c:	e001      	b.n	8007ea2 <UART_SetConfig+0x34e>
 8007e9e:	2310      	movs	r3, #16
 8007ea0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	69db      	ldr	r3, [r3, #28]
 8007ea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eaa:	d17c      	bne.n	8007fa6 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8007eac:	7ffb      	ldrb	r3, [r7, #31]
 8007eae:	2b08      	cmp	r3, #8
 8007eb0:	d859      	bhi.n	8007f66 <UART_SetConfig+0x412>
 8007eb2:	a201      	add	r2, pc, #4	; (adr r2, 8007eb8 <UART_SetConfig+0x364>)
 8007eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb8:	08007edd 	.word	0x08007edd
 8007ebc:	08007efb 	.word	0x08007efb
 8007ec0:	08007f19 	.word	0x08007f19
 8007ec4:	08007f67 	.word	0x08007f67
 8007ec8:	08007f31 	.word	0x08007f31
 8007ecc:	08007f67 	.word	0x08007f67
 8007ed0:	08007f67 	.word	0x08007f67
 8007ed4:	08007f67 	.word	0x08007f67
 8007ed8:	08007f4f 	.word	0x08007f4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007edc:	f7fd f8ca 	bl	8005074 <HAL_RCC_GetPCLK1Freq>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	005a      	lsls	r2, r3, #1
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	085b      	lsrs	r3, r3, #1
 8007eea:	441a      	add	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	61bb      	str	r3, [r7, #24]
        break;
 8007ef8:	e038      	b.n	8007f6c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007efa:	f7fd f8cf 	bl	800509c <HAL_RCC_GetPCLK2Freq>
 8007efe:	4603      	mov	r3, r0
 8007f00:	005a      	lsls	r2, r3, #1
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	085b      	lsrs	r3, r3, #1
 8007f08:	441a      	add	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	61bb      	str	r3, [r7, #24]
        break;
 8007f16:	e029      	b.n	8007f6c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	085a      	lsrs	r2, r3, #1
 8007f1e:	4b5d      	ldr	r3, [pc, #372]	; (8008094 <UART_SetConfig+0x540>)
 8007f20:	4413      	add	r3, r2
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	6852      	ldr	r2, [r2, #4]
 8007f26:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	61bb      	str	r3, [r7, #24]
        break;
 8007f2e:	e01d      	b.n	8007f6c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007f30:	f7fc ffe2 	bl	8004ef8 <HAL_RCC_GetSysClockFreq>
 8007f34:	4603      	mov	r3, r0
 8007f36:	005a      	lsls	r2, r3, #1
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	085b      	lsrs	r3, r3, #1
 8007f3e:	441a      	add	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	61bb      	str	r3, [r7, #24]
        break;
 8007f4c:	e00e      	b.n	8007f6c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	085b      	lsrs	r3, r3, #1
 8007f54:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	61bb      	str	r3, [r7, #24]
        break;
 8007f64:	e002      	b.n	8007f6c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	75fb      	strb	r3, [r7, #23]
        break;
 8007f6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	2b0f      	cmp	r3, #15
 8007f70:	d916      	bls.n	8007fa0 <UART_SetConfig+0x44c>
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f78:	d212      	bcs.n	8007fa0 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	f023 030f 	bic.w	r3, r3, #15
 8007f82:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	085b      	lsrs	r3, r3, #1
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	f003 0307 	and.w	r3, r3, #7
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	89fb      	ldrh	r3, [r7, #14]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	89fa      	ldrh	r2, [r7, #14]
 8007f9c:	60da      	str	r2, [r3, #12]
 8007f9e:	e06e      	b.n	800807e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	75fb      	strb	r3, [r7, #23]
 8007fa4:	e06b      	b.n	800807e <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8007fa6:	7ffb      	ldrb	r3, [r7, #31]
 8007fa8:	2b08      	cmp	r3, #8
 8007faa:	d857      	bhi.n	800805c <UART_SetConfig+0x508>
 8007fac:	a201      	add	r2, pc, #4	; (adr r2, 8007fb4 <UART_SetConfig+0x460>)
 8007fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb2:	bf00      	nop
 8007fb4:	08007fd9 	.word	0x08007fd9
 8007fb8:	08007ff5 	.word	0x08007ff5
 8007fbc:	08008011 	.word	0x08008011
 8007fc0:	0800805d 	.word	0x0800805d
 8007fc4:	08008029 	.word	0x08008029
 8007fc8:	0800805d 	.word	0x0800805d
 8007fcc:	0800805d 	.word	0x0800805d
 8007fd0:	0800805d 	.word	0x0800805d
 8007fd4:	08008045 	.word	0x08008045
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007fd8:	f7fd f84c 	bl	8005074 <HAL_RCC_GetPCLK1Freq>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	085b      	lsrs	r3, r3, #1
 8007fe4:	441a      	add	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	61bb      	str	r3, [r7, #24]
        break;
 8007ff2:	e036      	b.n	8008062 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007ff4:	f7fd f852 	bl	800509c <HAL_RCC_GetPCLK2Freq>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	085b      	lsrs	r3, r3, #1
 8008000:	441a      	add	r2, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	fbb2 f3f3 	udiv	r3, r2, r3
 800800a:	b29b      	uxth	r3, r3
 800800c:	61bb      	str	r3, [r7, #24]
        break;
 800800e:	e028      	b.n	8008062 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	085a      	lsrs	r2, r3, #1
 8008016:	4b20      	ldr	r3, [pc, #128]	; (8008098 <UART_SetConfig+0x544>)
 8008018:	4413      	add	r3, r2
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	6852      	ldr	r2, [r2, #4]
 800801e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008022:	b29b      	uxth	r3, r3
 8008024:	61bb      	str	r3, [r7, #24]
        break;
 8008026:	e01c      	b.n	8008062 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008028:	f7fc ff66 	bl	8004ef8 <HAL_RCC_GetSysClockFreq>
 800802c:	4602      	mov	r2, r0
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	085b      	lsrs	r3, r3, #1
 8008034:	441a      	add	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	fbb2 f3f3 	udiv	r3, r2, r3
 800803e:	b29b      	uxth	r3, r3
 8008040:	61bb      	str	r3, [r7, #24]
        break;
 8008042:	e00e      	b.n	8008062 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	085b      	lsrs	r3, r3, #1
 800804a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	fbb2 f3f3 	udiv	r3, r2, r3
 8008056:	b29b      	uxth	r3, r3
 8008058:	61bb      	str	r3, [r7, #24]
        break;
 800805a:	e002      	b.n	8008062 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	75fb      	strb	r3, [r7, #23]
        break;
 8008060:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	2b0f      	cmp	r3, #15
 8008066:	d908      	bls.n	800807a <UART_SetConfig+0x526>
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800806e:	d204      	bcs.n	800807a <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	69ba      	ldr	r2, [r7, #24]
 8008076:	60da      	str	r2, [r3, #12]
 8008078:	e001      	b.n	800807e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800808a:	7dfb      	ldrb	r3, [r7, #23]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3720      	adds	r7, #32
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	01e84800 	.word	0x01e84800
 8008098:	00f42400 	.word	0x00f42400

0800809c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a8:	f003 0301 	and.w	r3, r3, #1
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00a      	beq.n	80080c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	430a      	orrs	r2, r1
 80080c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ca:	f003 0302 	and.w	r3, r3, #2
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00a      	beq.n	80080e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	430a      	orrs	r2, r1
 80080e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ec:	f003 0304 	and.w	r3, r3, #4
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00a      	beq.n	800810a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	430a      	orrs	r2, r1
 8008108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810e:	f003 0308 	and.w	r3, r3, #8
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00a      	beq.n	800812c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	430a      	orrs	r2, r1
 800812a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008130:	f003 0310 	and.w	r3, r3, #16
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00a      	beq.n	800814e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	430a      	orrs	r2, r1
 800814c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008152:	f003 0320 	and.w	r3, r3, #32
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00a      	beq.n	8008170 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	430a      	orrs	r2, r1
 800816e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008178:	2b00      	cmp	r3, #0
 800817a:	d01a      	beq.n	80081b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	430a      	orrs	r2, r1
 8008190:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800819a:	d10a      	bne.n	80081b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	430a      	orrs	r2, r1
 80081b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00a      	beq.n	80081d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	430a      	orrs	r2, r1
 80081d2:	605a      	str	r2, [r3, #4]
  }
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af02      	add	r7, sp, #8
 80081e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80081ee:	f7fa f889 	bl	8002304 <HAL_GetTick>
 80081f2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 0308 	and.w	r3, r3, #8
 80081fe:	2b08      	cmp	r3, #8
 8008200:	d10e      	bne.n	8008220 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008202:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 f814 	bl	800823e <UART_WaitOnFlagUntilTimeout>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d001      	beq.n	8008220 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800821c:	2303      	movs	r3, #3
 800821e:	e00a      	b.n	8008236 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2220      	movs	r2, #32
 8008224:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2220      	movs	r2, #32
 800822a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b084      	sub	sp, #16
 8008242:	af00      	add	r7, sp, #0
 8008244:	60f8      	str	r0, [r7, #12]
 8008246:	60b9      	str	r1, [r7, #8]
 8008248:	603b      	str	r3, [r7, #0]
 800824a:	4613      	mov	r3, r2
 800824c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800824e:	e02a      	b.n	80082a6 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008256:	d026      	beq.n	80082a6 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008258:	f7fa f854 	bl	8002304 <HAL_GetTick>
 800825c:	4602      	mov	r2, r0
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	1ad3      	subs	r3, r2, r3
 8008262:	69ba      	ldr	r2, [r7, #24]
 8008264:	429a      	cmp	r2, r3
 8008266:	d302      	bcc.n	800826e <UART_WaitOnFlagUntilTimeout+0x30>
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d11b      	bne.n	80082a6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800827c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	689a      	ldr	r2, [r3, #8]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f022 0201 	bic.w	r2, r2, #1
 800828c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2220      	movs	r2, #32
 8008292:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2220      	movs	r2, #32
 8008298:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80082a2:	2303      	movs	r3, #3
 80082a4:	e00f      	b.n	80082c6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	69da      	ldr	r2, [r3, #28]
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	4013      	ands	r3, r2
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	bf0c      	ite	eq
 80082b6:	2301      	moveq	r3, #1
 80082b8:	2300      	movne	r3, #0
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	461a      	mov	r2, r3
 80082be:	79fb      	ldrb	r3, [r7, #7]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d0c5      	beq.n	8008250 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
	...

080082d0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 80082da:	2300      	movs	r3, #0
 80082dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 80082de:	2300      	movs	r3, #0
 80082e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d027      	beq.n	800833a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	4b2f      	ldr	r3, [pc, #188]	; (80083b0 <FMC_SDRAM_Init+0xe0>)
 80082f4:	4013      	ands	r3, r2
 80082f6:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008300:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8008306:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800830c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8008312:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8008318:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800831e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8008324:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800832a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	4313      	orrs	r3, r2
 8008330:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	601a      	str	r2, [r3, #0]
 8008338:	e032      	b.n	80083a0 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008346:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008350:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008356:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	4313      	orrs	r3, r2
 800835c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	4b12      	ldr	r3, [pc, #72]	; (80083b0 <FMC_SDRAM_Init+0xe0>)
 8008368:	4013      	ands	r3, r2
 800836a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008374:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800837a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8008380:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8008386:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800838c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800838e:	68ba      	ldr	r2, [r7, #8]
 8008390:	4313      	orrs	r3, r2
 8008392:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	ffff8000 	.word	0xffff8000

080083b4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b087      	sub	sp, #28
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80083c0:	2300      	movs	r3, #0
 80083c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80083c4:	2300      	movs	r3, #0
 80083c6:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d02e      	beq.n	800842c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80083da:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	3b01      	subs	r3, #1
 80083e8:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80083ea:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	3b01      	subs	r3, #1
 80083f2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80083f4:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	3b01      	subs	r3, #1
 80083fc:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80083fe:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	3b01      	subs	r3, #1
 8008406:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008408:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	695b      	ldr	r3, [r3, #20]
 800840e:	3b01      	subs	r3, #1
 8008410:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008412:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	699b      	ldr	r3, [r3, #24]
 8008418:	3b01      	subs	r3, #1
 800841a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800841c:	4313      	orrs	r3, r2
 800841e:	697a      	ldr	r2, [r7, #20]
 8008420:	4313      	orrs	r3, r2
 8008422:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	697a      	ldr	r2, [r7, #20]
 8008428:	609a      	str	r2, [r3, #8]
 800842a:	e039      	b.n	80084a0 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	4b1e      	ldr	r3, [pc, #120]	; (80084b0 <FMC_SDRAM_Timing_Init+0xfc>)
 8008436:	4013      	ands	r3, r2
 8008438:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	3b01      	subs	r3, #1
 8008440:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	695b      	ldr	r3, [r3, #20]
 8008446:	3b01      	subs	r3, #1
 8008448:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800844a:	4313      	orrs	r3, r2
 800844c:	697a      	ldr	r2, [r7, #20]
 800844e:	4313      	orrs	r3, r2
 8008450:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800845e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	3b01      	subs	r3, #1
 800846c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800846e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	3b01      	subs	r3, #1
 8008476:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008478:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	3b01      	subs	r3, #1
 8008480:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008482:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	3b01      	subs	r3, #1
 800848a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800848c:	4313      	orrs	r3, r2
 800848e:	693a      	ldr	r2, [r7, #16]
 8008490:	4313      	orrs	r3, r2
 8008492:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	697a      	ldr	r2, [r7, #20]
 8008498:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	693a      	ldr	r2, [r7, #16]
 800849e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	371c      	adds	r7, #28
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop
 80084b0:	ff0f0fff 	.word	0xff0f0fff

080084b4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b087      	sub	sp, #28
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 80084c0:	2300      	movs	r3, #0
 80084c2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80084cc:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	3b01      	subs	r3, #1
 80084d4:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80084d6:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80084de:	4313      	orrs	r3, r2
 80084e0:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 80084e2:	697a      	ldr	r2, [r7, #20]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	371c      	adds	r7, #28
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr

080084f6 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80084f6:	b480      	push	{r7}
 80084f8:	b083      	sub	sp, #12
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
 80084fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	695a      	ldr	r2, [r3, #20]
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	005b      	lsls	r3, r3, #1
 8008508:	431a      	orrs	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800851c:	b084      	sub	sp, #16
 800851e:	b480      	push	{r7}
 8008520:	b085      	sub	sp, #20
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
 8008526:	f107 001c 	add.w	r0, r7, #28
 800852a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800852e:	2300      	movs	r3, #0
 8008530:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008532:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008534:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008536:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800853a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800853c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800853e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008542:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008546:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	4313      	orrs	r3, r2
 800854c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	685a      	ldr	r2, [r3, #4]
 8008552:	4b07      	ldr	r3, [pc, #28]	; (8008570 <SDMMC_Init+0x54>)
 8008554:	4013      	ands	r3, r2
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	431a      	orrs	r2, r3
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3714      	adds	r7, #20
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	b004      	add	sp, #16
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop
 8008570:	ffff8100 	.word	0xffff8100

08008574 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008582:	4618      	mov	r0, r3
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr

0800858e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800858e:	b480      	push	{r7}
 8008590:	b083      	sub	sp, #12
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2203      	movs	r2, #3
 800859a:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	370c      	adds	r7, #12
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr

080085aa <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80085aa:	b480      	push	{r7}
 80085ac:	b083      	sub	sp, #12
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f003 0303 	and.w	r3, r3, #3
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	370c      	adds	r7, #12
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr
	...

080085c8 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b085      	sub	sp, #20
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80085d2:	2300      	movs	r3, #0
 80085d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80085e6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80085ec:	431a      	orrs	r2, r3
                       Command->CPSM);
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80085f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	68da      	ldr	r2, [r3, #12]
 80085fe:	4b06      	ldr	r3, [pc, #24]	; (8008618 <SDMMC_SendCommand+0x50>)
 8008600:	4013      	ands	r3, r2
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	431a      	orrs	r2, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3714      	adds	r7, #20
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr
 8008618:	fffff000 	.word	0xfffff000

0800861c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	b2db      	uxtb	r3, r3
}
 800862a:	4618      	mov	r0, r3
 800862c:	370c      	adds	r7, #12
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr

08008636 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008636:	b480      	push	{r7}
 8008638:	b085      	sub	sp, #20
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
 800863e:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 8008640:	2300      	movs	r3, #0
 8008642:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	3314      	adds	r3, #20
 8008648:	461a      	mov	r2, r3
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	4413      	add	r3, r2
 800864e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
}  
 8008654:	4618      	mov	r0, r3
 8008656:	3714      	adds	r7, #20
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008660:	b480      	push	{r7}
 8008662:	b085      	sub	sp, #20
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800866a:	2300      	movs	r3, #0
 800866c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	685a      	ldr	r2, [r3, #4]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008686:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800868c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008692:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	4313      	orrs	r3, r2
 8008698:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800869e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	431a      	orrs	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80086aa:	2300      	movs	r3, #0

}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3714      	adds	r7, #20
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr

080086b8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b088      	sub	sp, #32
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80086c2:	2300      	movs	r3, #0
 80086c4:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80086ca:	2310      	movs	r3, #16
 80086cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80086ce:	2340      	movs	r3, #64	; 0x40
 80086d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80086d2:	2300      	movs	r3, #0
 80086d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80086d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086da:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086dc:	f107 0308 	add.w	r3, r7, #8
 80086e0:	4619      	mov	r1, r3
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f7ff ff70 	bl	80085c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80086e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80086ec:	2110      	movs	r1, #16
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f98c 	bl	8008a0c <SDMMC_GetCmdResp1>
 80086f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086f6:	69fb      	ldr	r3, [r7, #28]
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3720      	adds	r7, #32
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b08a      	sub	sp, #40	; 0x28
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800870c:	2300      	movs	r3, #0
 800870e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008714:	2307      	movs	r3, #7
 8008716:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008718:	2340      	movs	r3, #64	; 0x40
 800871a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800871c:	2300      	movs	r3, #0
 800871e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008724:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008726:	f107 0310 	add.w	r3, r7, #16
 800872a:	4619      	mov	r1, r3
 800872c:	68f8      	ldr	r0, [r7, #12]
 800872e:	f7ff ff4b 	bl	80085c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008732:	f241 3288 	movw	r2, #5000	; 0x1388
 8008736:	2107      	movs	r1, #7
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f000 f967 	bl	8008a0c <SDMMC_GetCmdResp1>
 800873e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008742:	4618      	mov	r0, r3
 8008744:	3728      	adds	r7, #40	; 0x28
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b088      	sub	sp, #32
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008752:	2300      	movs	r3, #0
 8008754:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 8008756:	2300      	movs	r3, #0
 8008758:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800875a:	2300      	movs	r3, #0
 800875c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800875e:	2300      	movs	r3, #0
 8008760:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008762:	2300      	movs	r3, #0
 8008764:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800876a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800876c:	f107 0308 	add.w	r3, r7, #8
 8008770:	4619      	mov	r1, r3
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f7ff ff28 	bl	80085c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 f91d 	bl	80089b8 <SDMMC_GetCmdError>
 800877e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008780:	69fb      	ldr	r3, [r7, #28]
}
 8008782:	4618      	mov	r0, r3
 8008784:	3720      	adds	r7, #32
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b088      	sub	sp, #32
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008792:	2300      	movs	r3, #0
 8008794:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008796:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800879a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800879c:	2308      	movs	r3, #8
 800879e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80087a0:	2340      	movs	r3, #64	; 0x40
 80087a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087a4:	2300      	movs	r3, #0
 80087a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087ac:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087ae:	f107 0308 	add.w	r3, r7, #8
 80087b2:	4619      	mov	r1, r3
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f7ff ff07 	bl	80085c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 faee 	bl	8008d9c <SDMMC_GetCmdResp7>
 80087c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087c2:	69fb      	ldr	r3, [r7, #28]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3720      	adds	r7, #32
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b088      	sub	sp, #32
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80087d6:	2300      	movs	r3, #0
 80087d8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80087de:	2337      	movs	r3, #55	; 0x37
 80087e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80087e2:	2340      	movs	r3, #64	; 0x40
 80087e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087e6:	2300      	movs	r3, #0
 80087e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087ee:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087f0:	f107 0308 	add.w	r3, r7, #8
 80087f4:	4619      	mov	r1, r3
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f7ff fee6 	bl	80085c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80087fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008800:	2137      	movs	r1, #55	; 0x37
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f902 	bl	8008a0c <SDMMC_GetCmdResp1>
 8008808:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800880a:	69fb      	ldr	r3, [r7, #28]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3720      	adds	r7, #32
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b088      	sub	sp, #32
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800881e:	2300      	movs	r3, #0
 8008820:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8008822:	683a      	ldr	r2, [r7, #0]
 8008824:	4b0d      	ldr	r3, [pc, #52]	; (800885c <SDMMC_CmdAppOperCommand+0x48>)
 8008826:	4313      	orrs	r3, r2
 8008828:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800882a:	2329      	movs	r3, #41	; 0x29
 800882c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800882e:	2340      	movs	r3, #64	; 0x40
 8008830:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008832:	2300      	movs	r3, #0
 8008834:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800883a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800883c:	f107 0308 	add.w	r3, r7, #8
 8008840:	4619      	mov	r1, r3
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7ff fec0 	bl	80085c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fa05 	bl	8008c58 <SDMMC_GetCmdResp3>
 800884e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008850:	69fb      	ldr	r3, [r7, #28]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3720      	adds	r7, #32
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	80100000 	.word	0x80100000

08008860 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b088      	sub	sp, #32
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800886a:	2300      	movs	r3, #0
 800886c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008872:	2306      	movs	r3, #6
 8008874:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008876:	2340      	movs	r3, #64	; 0x40
 8008878:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800887a:	2300      	movs	r3, #0
 800887c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800887e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008882:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008884:	f107 0308 	add.w	r3, r7, #8
 8008888:	4619      	mov	r1, r3
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f7ff fe9c 	bl	80085c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008890:	f241 3288 	movw	r2, #5000	; 0x1388
 8008894:	2106      	movs	r1, #6
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f8b8 	bl	8008a0c <SDMMC_GetCmdResp1>
 800889c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800889e:	69fb      	ldr	r3, [r7, #28]
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3720      	adds	r7, #32
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b088      	sub	sp, #32
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80088b0:	2300      	movs	r3, #0
 80088b2:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 80088b4:	2300      	movs	r3, #0
 80088b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80088b8:	2333      	movs	r3, #51	; 0x33
 80088ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80088bc:	2340      	movs	r3, #64	; 0x40
 80088be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80088c0:	2300      	movs	r3, #0
 80088c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088c8:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088ca:	f107 0308 	add.w	r3, r7, #8
 80088ce:	4619      	mov	r1, r3
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f7ff fe79 	bl	80085c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80088d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80088da:	2133      	movs	r1, #51	; 0x33
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 f895 	bl	8008a0c <SDMMC_GetCmdResp1>
 80088e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088e4:	69fb      	ldr	r3, [r7, #28]
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3720      	adds	r7, #32
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b088      	sub	sp, #32
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80088f6:	2300      	movs	r3, #0
 80088f8:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 80088fa:	2300      	movs	r3, #0
 80088fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80088fe:	2302      	movs	r3, #2
 8008900:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008902:	23c0      	movs	r3, #192	; 0xc0
 8008904:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008906:	2300      	movs	r3, #0
 8008908:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800890a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800890e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008910:	f107 0308 	add.w	r3, r7, #8
 8008914:	4619      	mov	r1, r3
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f7ff fe56 	bl	80085c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 f95b 	bl	8008bd8 <SDMMC_GetCmdResp2>
 8008922:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008924:	69fb      	ldr	r3, [r7, #28]
}
 8008926:	4618      	mov	r0, r3
 8008928:	3720      	adds	r7, #32
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b088      	sub	sp, #32
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
 8008936:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008938:	2300      	movs	r3, #0
 800893a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008940:	2309      	movs	r3, #9
 8008942:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008944:	23c0      	movs	r3, #192	; 0xc0
 8008946:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008948:	2300      	movs	r3, #0
 800894a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800894c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008950:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008952:	f107 0308 	add.w	r3, r7, #8
 8008956:	4619      	mov	r1, r3
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f7ff fe35 	bl	80085c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f93a 	bl	8008bd8 <SDMMC_GetCmdResp2>
 8008964:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008966:	69fb      	ldr	r3, [r7, #28]
}
 8008968:	4618      	mov	r0, r3
 800896a:	3720      	adds	r7, #32
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b088      	sub	sp, #32
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800897a:	2300      	movs	r3, #0
 800897c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 800897e:	2300      	movs	r3, #0
 8008980:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008982:	2303      	movs	r3, #3
 8008984:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008986:	2340      	movs	r3, #64	; 0x40
 8008988:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800898a:	2300      	movs	r3, #0
 800898c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800898e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008992:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008994:	f107 0308 	add.w	r3, r7, #8
 8008998:	4619      	mov	r1, r3
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f7ff fe14 	bl	80085c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80089a0:	683a      	ldr	r2, [r7, #0]
 80089a2:	2103      	movs	r1, #3
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 f98b 	bl	8008cc0 <SDMMC_GetCmdResp6>
 80089aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089ac:	69fb      	ldr	r3, [r7, #28]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3720      	adds	r7, #32
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
	...

080089b8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80089b8:	b490      	push	{r4, r7}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80089c0:	4b10      	ldr	r3, [pc, #64]	; (8008a04 <SDMMC_GetCmdError+0x4c>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a10      	ldr	r2, [pc, #64]	; (8008a08 <SDMMC_GetCmdError+0x50>)
 80089c6:	fba2 2303 	umull	r2, r3, r2, r3
 80089ca:	0a5b      	lsrs	r3, r3, #9
 80089cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80089d0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80089d4:	4623      	mov	r3, r4
 80089d6:	1e5c      	subs	r4, r3, #1
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d102      	bne.n	80089e2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80089dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80089e0:	e00a      	b.n	80089f8 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d0f2      	beq.n	80089d4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80089f4:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bc90      	pop	{r4, r7}
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	20000304 	.word	0x20000304
 8008a08:	10624dd3 	.word	0x10624dd3

08008a0c <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008a0c:	b590      	push	{r4, r7, lr}
 8008a0e:	b087      	sub	sp, #28
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	460b      	mov	r3, r1
 8008a16:	607a      	str	r2, [r7, #4]
 8008a18:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8008a1a:	4b6c      	ldr	r3, [pc, #432]	; (8008bcc <SDMMC_GetCmdResp1+0x1c0>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a6c      	ldr	r2, [pc, #432]	; (8008bd0 <SDMMC_GetCmdResp1+0x1c4>)
 8008a20:	fba2 2303 	umull	r2, r3, r2, r3
 8008a24:	0a5b      	lsrs	r3, r3, #9
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8008a2c:	4623      	mov	r3, r4
 8008a2e:	1e5c      	subs	r4, r3, #1
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d102      	bne.n	8008a3a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008a34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a38:	e0c3      	b.n	8008bc2 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d0f2      	beq.n	8008a2c <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a4a:	f003 0304 	and.w	r3, r3, #4
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d004      	beq.n	8008a5c <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2204      	movs	r2, #4
 8008a56:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008a58:	2304      	movs	r3, #4
 8008a5a:	e0b2      	b.n	8008bc2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a60:	f003 0301 	and.w	r3, r3, #1
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d004      	beq.n	8008a72 <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e0a7      	b.n	8008bc2 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f7ff fdd2 	bl	800861c <SDMMC_GetCommandResponse>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	7afb      	ldrb	r3, [r7, #11]
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d001      	beq.n	8008a86 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e09d      	b.n	8008bc2 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008a8c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008a8e:	2100      	movs	r1, #0
 8008a90:	68f8      	ldr	r0, [r7, #12]
 8008a92:	f7ff fdd0 	bl	8008636 <SDMMC_GetResponse>
 8008a96:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	4b4e      	ldr	r3, [pc, #312]	; (8008bd4 <SDMMC_GetCmdResp1+0x1c8>)
 8008a9c:	4013      	ands	r3, r2
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d101      	bne.n	8008aa6 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	e08d      	b.n	8008bc2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	da02      	bge.n	8008ab2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008aac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ab0:	e087      	b.n	8008bc2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d001      	beq.n	8008ac0 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008abc:	2340      	movs	r3, #64	; 0x40
 8008abe:	e080      	b.n	8008bc2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d001      	beq.n	8008ace <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008aca:	2380      	movs	r3, #128	; 0x80
 8008acc:	e079      	b.n	8008bc2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d002      	beq.n	8008ade <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008ad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008adc:	e071      	b.n	8008bc2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d002      	beq.n	8008aee <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008ae8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008aec:	e069      	b.n	8008bc2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d002      	beq.n	8008afe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008af8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008afc:	e061      	b.n	8008bc2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d002      	beq.n	8008b0e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008b08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b0c:	e059      	b.n	8008bc2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d002      	beq.n	8008b1e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b1c:	e051      	b.n	8008bc2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d002      	beq.n	8008b2e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008b28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b2c:	e049      	b.n	8008bc2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d002      	beq.n	8008b3e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008b38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008b3c:	e041      	b.n	8008bc2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d002      	beq.n	8008b4e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8008b48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b4c:	e039      	b.n	8008bc2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d002      	beq.n	8008b5e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008b58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008b5c:	e031      	b.n	8008bc2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d002      	beq.n	8008b6e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008b68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008b6c:	e029      	b.n	8008bc2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d002      	beq.n	8008b7e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008b78:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008b7c:	e021      	b.n	8008bc2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d002      	beq.n	8008b8e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008b88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008b8c:	e019      	b.n	8008bc2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d002      	beq.n	8008b9e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008b98:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008b9c:	e011      	b.n	8008bc2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d002      	beq.n	8008bae <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008ba8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008bac:	e009      	b.n	8008bc2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	f003 0308 	and.w	r3, r3, #8
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d002      	beq.n	8008bbe <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008bb8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008bbc:	e001      	b.n	8008bc2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008bbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	371c      	adds	r7, #28
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd90      	pop	{r4, r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	20000304 	.word	0x20000304
 8008bd0:	10624dd3 	.word	0x10624dd3
 8008bd4:	fdffe008 	.word	0xfdffe008

08008bd8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008bd8:	b490      	push	{r4, r7}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8008be0:	4b1b      	ldr	r3, [pc, #108]	; (8008c50 <SDMMC_GetCmdResp2+0x78>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a1b      	ldr	r2, [pc, #108]	; (8008c54 <SDMMC_GetCmdResp2+0x7c>)
 8008be6:	fba2 2303 	umull	r2, r3, r2, r3
 8008bea:	0a5b      	lsrs	r3, r3, #9
 8008bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bf0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8008bf4:	4623      	mov	r3, r4
 8008bf6:	1e5c      	subs	r4, r3, #1
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d102      	bne.n	8008c02 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008bfc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c00:	e020      	b.n	8008c44 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c06:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d0f2      	beq.n	8008bf4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c12:	f003 0304 	and.w	r3, r3, #4
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d004      	beq.n	8008c24 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2204      	movs	r2, #4
 8008c1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c20:	2304      	movs	r3, #4
 8008c22:	e00f      	b.n	8008c44 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c28:	f003 0301 	and.w	r3, r3, #1
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d004      	beq.n	8008c3a <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2201      	movs	r2, #1
 8008c34:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c36:	2301      	movs	r3, #1
 8008c38:	e004      	b.n	8008c44 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008c40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3708      	adds	r7, #8
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bc90      	pop	{r4, r7}
 8008c4c:	4770      	bx	lr
 8008c4e:	bf00      	nop
 8008c50:	20000304 	.word	0x20000304
 8008c54:	10624dd3 	.word	0x10624dd3

08008c58 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008c58:	b490      	push	{r4, r7}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8008c60:	4b15      	ldr	r3, [pc, #84]	; (8008cb8 <SDMMC_GetCmdResp3+0x60>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a15      	ldr	r2, [pc, #84]	; (8008cbc <SDMMC_GetCmdResp3+0x64>)
 8008c66:	fba2 2303 	umull	r2, r3, r2, r3
 8008c6a:	0a5b      	lsrs	r3, r3, #9
 8008c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c70:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8008c74:	4623      	mov	r3, r4
 8008c76:	1e5c      	subs	r4, r3, #1
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d102      	bne.n	8008c82 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008c7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c80:	e015      	b.n	8008cae <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c86:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d0f2      	beq.n	8008c74 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c92:	f003 0304 	and.w	r3, r3, #4
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d004      	beq.n	8008ca4 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2204      	movs	r2, #4
 8008c9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ca0:	2304      	movs	r3, #4
 8008ca2:	e004      	b.n	8008cae <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008caa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bc90      	pop	{r4, r7}
 8008cb6:	4770      	bx	lr
 8008cb8:	20000304 	.word	0x20000304
 8008cbc:	10624dd3 	.word	0x10624dd3

08008cc0 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008cc0:	b590      	push	{r4, r7, lr}
 8008cc2:	b087      	sub	sp, #28
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	460b      	mov	r3, r1
 8008cca:	607a      	str	r2, [r7, #4]
 8008ccc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8008cce:	4b31      	ldr	r3, [pc, #196]	; (8008d94 <SDMMC_GetCmdResp6+0xd4>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a31      	ldr	r2, [pc, #196]	; (8008d98 <SDMMC_GetCmdResp6+0xd8>)
 8008cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8008cd8:	0a5b      	lsrs	r3, r3, #9
 8008cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cde:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8008ce2:	4623      	mov	r3, r4
 8008ce4:	1e5c      	subs	r4, r3, #1
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d102      	bne.n	8008cf0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008cea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008cee:	e04c      	b.n	8008d8a <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf4:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d0f2      	beq.n	8008ce2 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d00:	f003 0304 	and.w	r3, r3, #4
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d004      	beq.n	8008d12 <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2204      	movs	r2, #4
 8008d0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008d0e:	2304      	movs	r3, #4
 8008d10:	e03b      	b.n	8008d8a <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d16:	f003 0301 	and.w	r3, r3, #1
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d004      	beq.n	8008d28 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2201      	movs	r2, #1
 8008d22:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e030      	b.n	8008d8a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f7ff fc77 	bl	800861c <SDMMC_GetCommandResponse>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	461a      	mov	r2, r3
 8008d32:	7afb      	ldrb	r3, [r7, #11]
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d001      	beq.n	8008d3c <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e026      	b.n	8008d8a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008d42:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008d44:	2100      	movs	r1, #0
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f7ff fc75 	bl	8008636 <SDMMC_GetResponse>
 8008d4c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d106      	bne.n	8008d66 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	0c1b      	lsrs	r3, r3, #16
 8008d5c:	b29a      	uxth	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008d62:	2300      	movs	r3, #0
 8008d64:	e011      	b.n	8008d8a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d002      	beq.n	8008d76 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008d70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d74:	e009      	b.n	8008d8a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d002      	beq.n	8008d86 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008d80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d84:	e001      	b.n	8008d8a <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008d86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	371c      	adds	r7, #28
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd90      	pop	{r4, r7, pc}
 8008d92:	bf00      	nop
 8008d94:	20000304 	.word	0x20000304
 8008d98:	10624dd3 	.word	0x10624dd3

08008d9c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008d9c:	b490      	push	{r4, r7}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8008da4:	4b18      	ldr	r3, [pc, #96]	; (8008e08 <SDMMC_GetCmdResp7+0x6c>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a18      	ldr	r2, [pc, #96]	; (8008e0c <SDMMC_GetCmdResp7+0x70>)
 8008daa:	fba2 2303 	umull	r2, r3, r2, r3
 8008dae:	0a5b      	lsrs	r3, r3, #9
 8008db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008db4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8008db8:	4623      	mov	r3, r4
 8008dba:	1e5c      	subs	r4, r3, #1
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d102      	bne.n	8008dc6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008dc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008dc4:	e01a      	b.n	8008dfc <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dca:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d0f2      	beq.n	8008db8 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd6:	f003 0304 	and.w	r3, r3, #4
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d004      	beq.n	8008de8 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2240      	movs	r2, #64	; 0x40
 8008de2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008de4:	2304      	movs	r3, #4
 8008de6:	e009      	b.n	8008dfc <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d002      	beq.n	8008dfa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2240      	movs	r2, #64	; 0x40
 8008df8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008dfa:	2300      	movs	r3, #0
  
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bc90      	pop	{r4, r7}
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	20000304 	.word	0x20000304
 8008e0c:	10624dd3 	.word	0x10624dd3

08008e10 <Init_LCD>:
Button harmonique[3]={{0,plotx,ploty+2*(height_button+20),width_button,height_button,LCD_COLOR_BLUE,"1"},
		{0,plotx+width_button+20,ploty+2*(height_button+20),width_button,height_button,LCD_COLOR_BLUE,"2"},
		{0,plotx,ploty+3*(height_button+20),width_button,height_button,LCD_COLOR_BLUE,"3"},
};
void Init_LCD(void)
{
 8008e10:	b598      	push	{r3, r4, r7, lr}
 8008e12:	af00      	add	r7, sp, #0

  BSP_LCD_Init();
 8008e14:	f7f7 ffbe 	bl	8000d94 <BSP_LCD_Init>
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8008e18:	f7f8 f82c 	bl	8000e74 <BSP_LCD_GetXSize>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	b29c      	uxth	r4, r3
 8008e20:	f7f8 f83c 	bl	8000e9c <BSP_LCD_GetYSize>
 8008e24:	4603      	mov	r3, r0
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	4619      	mov	r1, r3
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	f7f8 ffb8 	bl	8001da0 <BSP_TS_Init>

  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FB_START_ADDRESS);
 8008e30:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8008e34:	2001      	movs	r0, #1
 8008e36:	f7f8 f845 	bl	8000ec4 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8008e3a:	2001      	movs	r0, #1
 8008e3c:	f7f8 f8a2 	bl	8000f84 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8008e40:	f7f8 fbe0 	bl	8001604 <BSP_LCD_DisplayOn>
  /* Clear the LCD */
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8008e44:	f04f 30ff 	mov.w	r0, #4294967295
 8008e48:	f7f8 f8c4 	bl	8000fd4 <BSP_LCD_SetBackColor>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8008e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e50:	f7f8 f8f4 	bl	800103c <BSP_LCD_Clear>


	/* Set the LCD Text Color */
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8008e54:	4802      	ldr	r0, [pc, #8]	; (8008e60 <Init_LCD+0x50>)
 8008e56:	f7f8 f8a5 	bl	8000fa4 <BSP_LCD_SetTextColor>


}
 8008e5a:	bf00      	nop
 8008e5c:	bd98      	pop	{r3, r4, r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	ff000080 	.word	0xff000080

08008e64 <Draw_Button>:


void Draw_Button(void)
{
 8008e64:	b5b0      	push	{r4, r5, r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e6e:	f7f8 f899 	bl	8000fa4 <BSP_LCD_SetTextColor>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8008e72:	f04f 30ff 	mov.w	r0, #4294967295
 8008e76:	f7f8 f8e1 	bl	800103c <BSP_LCD_Clear>
	for(int i = 0; i < number_button; i++)
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	607b      	str	r3, [r7, #4]
 8008e7e:	e08f      	b.n	8008fa0 <Draw_Button+0x13c>
	{
		BSP_LCD_SetTextColor(button_list[i].color);
 8008e80:	4997      	ldr	r1, [pc, #604]	; (80090e0 <Draw_Button+0x27c>)
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	4613      	mov	r3, r2
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	4413      	add	r3, r2
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	440b      	add	r3, r1
 8008e8e:	330c      	adds	r3, #12
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7f8 f886 	bl	8000fa4 <BSP_LCD_SetTextColor>
		if(button_list[i].is_active == 0)
 8008e98:	4991      	ldr	r1, [pc, #580]	; (80090e0 <Draw_Button+0x27c>)
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	4613      	mov	r3, r2
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	4413      	add	r3, r2
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	440b      	add	r3, r1
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d128      	bne.n	8008efe <Draw_Button+0x9a>
		{
			BSP_LCD_DrawRect(button_list[i].x_pos, button_list[i].y_pos, button_list[i].width, button_list[i].height);
 8008eac:	498c      	ldr	r1, [pc, #560]	; (80090e0 <Draw_Button+0x27c>)
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4413      	add	r3, r2
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	440b      	add	r3, r1
 8008eba:	3302      	adds	r3, #2
 8008ebc:	8818      	ldrh	r0, [r3, #0]
 8008ebe:	4988      	ldr	r1, [pc, #544]	; (80090e0 <Draw_Button+0x27c>)
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	4613      	mov	r3, r2
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	4413      	add	r3, r2
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	440b      	add	r3, r1
 8008ecc:	3304      	adds	r3, #4
 8008ece:	881c      	ldrh	r4, [r3, #0]
 8008ed0:	4983      	ldr	r1, [pc, #524]	; (80090e0 <Draw_Button+0x27c>)
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	4413      	add	r3, r2
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	440b      	add	r3, r1
 8008ede:	3306      	adds	r3, #6
 8008ee0:	881d      	ldrh	r5, [r3, #0]
 8008ee2:	497f      	ldr	r1, [pc, #508]	; (80090e0 <Draw_Button+0x27c>)
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	4413      	add	r3, r2
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	440b      	add	r3, r1
 8008ef0:	3308      	adds	r3, #8
 8008ef2:	881b      	ldrh	r3, [r3, #0]
 8008ef4:	462a      	mov	r2, r5
 8008ef6:	4621      	mov	r1, r4
 8008ef8:	f7f8 fa90 	bl	800141c <BSP_LCD_DrawRect>
 8008efc:	e027      	b.n	8008f4e <Draw_Button+0xea>
		}
		else
		{
			BSP_LCD_FillRect(button_list[i].x_pos, button_list[i].y_pos, button_list[i].width, button_list[i].height);
 8008efe:	4978      	ldr	r1, [pc, #480]	; (80090e0 <Draw_Button+0x27c>)
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	4613      	mov	r3, r2
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	4413      	add	r3, r2
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	440b      	add	r3, r1
 8008f0c:	3302      	adds	r3, #2
 8008f0e:	8818      	ldrh	r0, [r3, #0]
 8008f10:	4973      	ldr	r1, [pc, #460]	; (80090e0 <Draw_Button+0x27c>)
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	4613      	mov	r3, r2
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	4413      	add	r3, r2
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	440b      	add	r3, r1
 8008f1e:	3304      	adds	r3, #4
 8008f20:	881c      	ldrh	r4, [r3, #0]
 8008f22:	496f      	ldr	r1, [pc, #444]	; (80090e0 <Draw_Button+0x27c>)
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	4613      	mov	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4413      	add	r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	440b      	add	r3, r1
 8008f30:	3306      	adds	r3, #6
 8008f32:	881d      	ldrh	r5, [r3, #0]
 8008f34:	496a      	ldr	r1, [pc, #424]	; (80090e0 <Draw_Button+0x27c>)
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	4613      	mov	r3, r2
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	4413      	add	r3, r2
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	440b      	add	r3, r1
 8008f42:	3308      	adds	r3, #8
 8008f44:	881b      	ldrh	r3, [r3, #0]
 8008f46:	462a      	mov	r2, r5
 8008f48:	4621      	mov	r1, r4
 8008f4a:	f7f8 fae1 	bl	8001510 <BSP_LCD_FillRect>
		}
		BSP_LCD_SetFont(&Font8);
 8008f4e:	4865      	ldr	r0, [pc, #404]	; (80090e4 <Draw_Button+0x280>)
 8008f50:	f7f8 f85a 	bl	8001008 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(button_list[i].x_pos + 15, button_list[i].y_pos + 15, button_list[i].text, LEFT_MODE);
 8008f54:	4962      	ldr	r1, [pc, #392]	; (80090e0 <Draw_Button+0x27c>)
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	4613      	mov	r3, r2
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	4413      	add	r3, r2
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	440b      	add	r3, r1
 8008f62:	3302      	adds	r3, #2
 8008f64:	881b      	ldrh	r3, [r3, #0]
 8008f66:	330f      	adds	r3, #15
 8008f68:	b298      	uxth	r0, r3
 8008f6a:	495d      	ldr	r1, [pc, #372]	; (80090e0 <Draw_Button+0x27c>)
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	4613      	mov	r3, r2
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	4413      	add	r3, r2
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	440b      	add	r3, r1
 8008f78:	3304      	adds	r3, #4
 8008f7a:	881b      	ldrh	r3, [r3, #0]
 8008f7c:	330f      	adds	r3, #15
 8008f7e:	b29c      	uxth	r4, r3
 8008f80:	4957      	ldr	r1, [pc, #348]	; (80090e0 <Draw_Button+0x27c>)
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	4613      	mov	r3, r2
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	4413      	add	r3, r2
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	440b      	add	r3, r1
 8008f8e:	3310      	adds	r3, #16
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	2303      	movs	r3, #3
 8008f94:	4621      	mov	r1, r4
 8008f96:	f7f8 f8bd 	bl	8001114 <BSP_LCD_DisplayStringAt>
	for(int i = 0; i < number_button; i++)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	607b      	str	r3, [r7, #4]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2b05      	cmp	r3, #5
 8008fa4:	f77f af6c 	ble.w	8008e80 <Draw_Button+0x1c>
	}

	for (int i=0;i<3;i++)
 8008fa8:	2300      	movs	r3, #0
 8008faa:	603b      	str	r3, [r7, #0]
 8008fac:	e08f      	b.n	80090ce <Draw_Button+0x26a>
	{
		BSP_LCD_SetTextColor(harmonique[i].color);
 8008fae:	494e      	ldr	r1, [pc, #312]	; (80090e8 <Draw_Button+0x284>)
 8008fb0:	683a      	ldr	r2, [r7, #0]
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4413      	add	r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	440b      	add	r3, r1
 8008fbc:	330c      	adds	r3, #12
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7f7 ffef 	bl	8000fa4 <BSP_LCD_SetTextColor>
		if(harmonique[i].is_active==0)
 8008fc6:	4948      	ldr	r1, [pc, #288]	; (80090e8 <Draw_Button+0x284>)
 8008fc8:	683a      	ldr	r2, [r7, #0]
 8008fca:	4613      	mov	r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	4413      	add	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	440b      	add	r3, r1
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d128      	bne.n	800902c <Draw_Button+0x1c8>
		{
			BSP_LCD_DrawRect(harmonique[i].x_pos, harmonique[i].y_pos, harmonique[i].width, harmonique[i].height);
 8008fda:	4943      	ldr	r1, [pc, #268]	; (80090e8 <Draw_Button+0x284>)
 8008fdc:	683a      	ldr	r2, [r7, #0]
 8008fde:	4613      	mov	r3, r2
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	4413      	add	r3, r2
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	440b      	add	r3, r1
 8008fe8:	3302      	adds	r3, #2
 8008fea:	8818      	ldrh	r0, [r3, #0]
 8008fec:	493e      	ldr	r1, [pc, #248]	; (80090e8 <Draw_Button+0x284>)
 8008fee:	683a      	ldr	r2, [r7, #0]
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	4413      	add	r3, r2
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	440b      	add	r3, r1
 8008ffa:	3304      	adds	r3, #4
 8008ffc:	881c      	ldrh	r4, [r3, #0]
 8008ffe:	493a      	ldr	r1, [pc, #232]	; (80090e8 <Draw_Button+0x284>)
 8009000:	683a      	ldr	r2, [r7, #0]
 8009002:	4613      	mov	r3, r2
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	4413      	add	r3, r2
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	440b      	add	r3, r1
 800900c:	3306      	adds	r3, #6
 800900e:	881d      	ldrh	r5, [r3, #0]
 8009010:	4935      	ldr	r1, [pc, #212]	; (80090e8 <Draw_Button+0x284>)
 8009012:	683a      	ldr	r2, [r7, #0]
 8009014:	4613      	mov	r3, r2
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	4413      	add	r3, r2
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	440b      	add	r3, r1
 800901e:	3308      	adds	r3, #8
 8009020:	881b      	ldrh	r3, [r3, #0]
 8009022:	462a      	mov	r2, r5
 8009024:	4621      	mov	r1, r4
 8009026:	f7f8 f9f9 	bl	800141c <BSP_LCD_DrawRect>
 800902a:	e027      	b.n	800907c <Draw_Button+0x218>
		}
		else {
			BSP_LCD_FillRect(harmonique[i].x_pos, harmonique[i].y_pos, harmonique[i].width, harmonique[i].height);
 800902c:	492e      	ldr	r1, [pc, #184]	; (80090e8 <Draw_Button+0x284>)
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	4613      	mov	r3, r2
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	4413      	add	r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	440b      	add	r3, r1
 800903a:	3302      	adds	r3, #2
 800903c:	8818      	ldrh	r0, [r3, #0]
 800903e:	492a      	ldr	r1, [pc, #168]	; (80090e8 <Draw_Button+0x284>)
 8009040:	683a      	ldr	r2, [r7, #0]
 8009042:	4613      	mov	r3, r2
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	4413      	add	r3, r2
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	440b      	add	r3, r1
 800904c:	3304      	adds	r3, #4
 800904e:	881c      	ldrh	r4, [r3, #0]
 8009050:	4925      	ldr	r1, [pc, #148]	; (80090e8 <Draw_Button+0x284>)
 8009052:	683a      	ldr	r2, [r7, #0]
 8009054:	4613      	mov	r3, r2
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	4413      	add	r3, r2
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	440b      	add	r3, r1
 800905e:	3306      	adds	r3, #6
 8009060:	881d      	ldrh	r5, [r3, #0]
 8009062:	4921      	ldr	r1, [pc, #132]	; (80090e8 <Draw_Button+0x284>)
 8009064:	683a      	ldr	r2, [r7, #0]
 8009066:	4613      	mov	r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4413      	add	r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	440b      	add	r3, r1
 8009070:	3308      	adds	r3, #8
 8009072:	881b      	ldrh	r3, [r3, #0]
 8009074:	462a      	mov	r2, r5
 8009076:	4621      	mov	r1, r4
 8009078:	f7f8 fa4a 	bl	8001510 <BSP_LCD_FillRect>
		}
		BSP_LCD_SetFont(&Font8);
 800907c:	4819      	ldr	r0, [pc, #100]	; (80090e4 <Draw_Button+0x280>)
 800907e:	f7f7 ffc3 	bl	8001008 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(harmonique[i].x_pos + 15, harmonique[i].y_pos + 15, harmonique[i].text, LEFT_MODE);
 8009082:	4919      	ldr	r1, [pc, #100]	; (80090e8 <Draw_Button+0x284>)
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	4613      	mov	r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	4413      	add	r3, r2
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	440b      	add	r3, r1
 8009090:	3302      	adds	r3, #2
 8009092:	881b      	ldrh	r3, [r3, #0]
 8009094:	330f      	adds	r3, #15
 8009096:	b298      	uxth	r0, r3
 8009098:	4913      	ldr	r1, [pc, #76]	; (80090e8 <Draw_Button+0x284>)
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	4613      	mov	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	4413      	add	r3, r2
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	440b      	add	r3, r1
 80090a6:	3304      	adds	r3, #4
 80090a8:	881b      	ldrh	r3, [r3, #0]
 80090aa:	330f      	adds	r3, #15
 80090ac:	b29c      	uxth	r4, r3
 80090ae:	490e      	ldr	r1, [pc, #56]	; (80090e8 <Draw_Button+0x284>)
 80090b0:	683a      	ldr	r2, [r7, #0]
 80090b2:	4613      	mov	r3, r2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	4413      	add	r3, r2
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	440b      	add	r3, r1
 80090bc:	3310      	adds	r3, #16
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	2303      	movs	r3, #3
 80090c2:	4621      	mov	r1, r4
 80090c4:	f7f8 f826 	bl	8001114 <BSP_LCD_DisplayStringAt>
	for (int i=0;i<3;i++)
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	3301      	adds	r3, #1
 80090cc:	603b      	str	r3, [r7, #0]
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	2b02      	cmp	r3, #2
 80090d2:	f77f af6c 	ble.w	8008fae <Draw_Button+0x14a>

	}

}
 80090d6:	bf00      	nop
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bdb0      	pop	{r4, r5, r7, pc}
 80090de:	bf00      	nop
 80090e0:	20000044 	.word	0x20000044
 80090e4:	20000030 	.word	0x20000030
 80090e8:	200000a8 	.word	0x200000a8

080090ec <TouchScreen_Polling>:


void TouchScreen_Polling(void)
{
 80090ec:	b590      	push	{r4, r7, lr}
 80090ee:	b085      	sub	sp, #20
 80090f0:	af00      	add	r7, sp, #0
	uint16_t x = 0;
 80090f2:	2300      	movs	r3, #0
 80090f4:	80fb      	strh	r3, [r7, #6]
	uint16_t y = 0;
 80090f6:	2300      	movs	r3, #0
 80090f8:	80bb      	strh	r3, [r7, #4]


	BSP_TS_GetState(&TS_State);
 80090fa:	4862      	ldr	r0, [pc, #392]	; (8009284 <TouchScreen_Polling+0x198>)
 80090fc:	f7f8 fe90 	bl	8001e20 <BSP_TS_GetState>

	if(TS_State.touchDetected)
 8009100:	4b60      	ldr	r3, [pc, #384]	; (8009284 <TouchScreen_Polling+0x198>)
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	2b00      	cmp	r3, #0
 8009106:	f000 80b8 	beq.w	800927a <TouchScreen_Polling+0x18e>
	{
		x = TS_State.touchX[0];
 800910a:	4b5e      	ldr	r3, [pc, #376]	; (8009284 <TouchScreen_Polling+0x198>)
 800910c:	885b      	ldrh	r3, [r3, #2]
 800910e:	80fb      	strh	r3, [r7, #6]
		y = TS_State.touchY[0];
 8009110:	4b5c      	ldr	r3, [pc, #368]	; (8009284 <TouchScreen_Polling+0x198>)
 8009112:	899b      	ldrh	r3, [r3, #12]
 8009114:	80bb      	strh	r3, [r7, #4]

		for(int i = 0; i < number_button ; i++)
 8009116:	2300      	movs	r3, #0
 8009118:	60fb      	str	r3, [r7, #12]
 800911a:	e04c      	b.n	80091b6 <TouchScreen_Polling+0xca>
		{
			if(x > button_list[i].x_pos && x < (button_list[i].x_pos + button_list[i].width))
 800911c:	495a      	ldr	r1, [pc, #360]	; (8009288 <TouchScreen_Polling+0x19c>)
 800911e:	68fa      	ldr	r2, [r7, #12]
 8009120:	4613      	mov	r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4413      	add	r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	440b      	add	r3, r1
 800912a:	3302      	adds	r3, #2
 800912c:	881b      	ldrh	r3, [r3, #0]
 800912e:	88fa      	ldrh	r2, [r7, #6]
 8009130:	429a      	cmp	r2, r3
 8009132:	d93d      	bls.n	80091b0 <TouchScreen_Polling+0xc4>
 8009134:	88f9      	ldrh	r1, [r7, #6]
 8009136:	4854      	ldr	r0, [pc, #336]	; (8009288 <TouchScreen_Polling+0x19c>)
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	4613      	mov	r3, r2
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4413      	add	r3, r2
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	4403      	add	r3, r0
 8009144:	3302      	adds	r3, #2
 8009146:	881b      	ldrh	r3, [r3, #0]
 8009148:	461c      	mov	r4, r3
 800914a:	484f      	ldr	r0, [pc, #316]	; (8009288 <TouchScreen_Polling+0x19c>)
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	4613      	mov	r3, r2
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	4413      	add	r3, r2
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	4403      	add	r3, r0
 8009158:	3306      	adds	r3, #6
 800915a:	881b      	ldrh	r3, [r3, #0]
 800915c:	4423      	add	r3, r4
 800915e:	4299      	cmp	r1, r3
 8009160:	da26      	bge.n	80091b0 <TouchScreen_Polling+0xc4>
			{
				if(y > button_list[i].y_pos && y < (button_list[i].y_pos + button_list[i].height))
 8009162:	4949      	ldr	r1, [pc, #292]	; (8009288 <TouchScreen_Polling+0x19c>)
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	4613      	mov	r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4413      	add	r3, r2
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	440b      	add	r3, r1
 8009170:	3304      	adds	r3, #4
 8009172:	881b      	ldrh	r3, [r3, #0]
 8009174:	88ba      	ldrh	r2, [r7, #4]
 8009176:	429a      	cmp	r2, r3
 8009178:	d91a      	bls.n	80091b0 <TouchScreen_Polling+0xc4>
 800917a:	88b9      	ldrh	r1, [r7, #4]
 800917c:	4842      	ldr	r0, [pc, #264]	; (8009288 <TouchScreen_Polling+0x19c>)
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	4613      	mov	r3, r2
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	4413      	add	r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	4403      	add	r3, r0
 800918a:	3304      	adds	r3, #4
 800918c:	881b      	ldrh	r3, [r3, #0]
 800918e:	461c      	mov	r4, r3
 8009190:	483d      	ldr	r0, [pc, #244]	; (8009288 <TouchScreen_Polling+0x19c>)
 8009192:	68fa      	ldr	r2, [r7, #12]
 8009194:	4613      	mov	r3, r2
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	4413      	add	r3, r2
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	4403      	add	r3, r0
 800919e:	3308      	adds	r3, #8
 80091a0:	881b      	ldrh	r3, [r3, #0]
 80091a2:	4423      	add	r3, r4
 80091a4:	4299      	cmp	r1, r3
 80091a6:	da03      	bge.n	80091b0 <TouchScreen_Polling+0xc4>
				{
					button_freq=i;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	b2da      	uxtb	r2, r3
 80091ac:	4b37      	ldr	r3, [pc, #220]	; (800928c <TouchScreen_Polling+0x1a0>)
 80091ae:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < number_button ; i++)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	3301      	adds	r3, #1
 80091b4:	60fb      	str	r3, [r7, #12]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2b05      	cmp	r3, #5
 80091ba:	ddaf      	ble.n	800911c <TouchScreen_Polling+0x30>
				}
			}
		}
		for(int i = 0; i < 3 ; i++)
 80091bc:	2300      	movs	r3, #0
 80091be:	60bb      	str	r3, [r7, #8]
 80091c0:	e04c      	b.n	800925c <TouchScreen_Polling+0x170>
		{
			if(x > harmonique[i].x_pos && x < (harmonique[i].x_pos + harmonique[i].width))
 80091c2:	4933      	ldr	r1, [pc, #204]	; (8009290 <TouchScreen_Polling+0x1a4>)
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	4613      	mov	r3, r2
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	4413      	add	r3, r2
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	440b      	add	r3, r1
 80091d0:	3302      	adds	r3, #2
 80091d2:	881b      	ldrh	r3, [r3, #0]
 80091d4:	88fa      	ldrh	r2, [r7, #6]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d93d      	bls.n	8009256 <TouchScreen_Polling+0x16a>
 80091da:	88f9      	ldrh	r1, [r7, #6]
 80091dc:	482c      	ldr	r0, [pc, #176]	; (8009290 <TouchScreen_Polling+0x1a4>)
 80091de:	68ba      	ldr	r2, [r7, #8]
 80091e0:	4613      	mov	r3, r2
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	4413      	add	r3, r2
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	4403      	add	r3, r0
 80091ea:	3302      	adds	r3, #2
 80091ec:	881b      	ldrh	r3, [r3, #0]
 80091ee:	461c      	mov	r4, r3
 80091f0:	4827      	ldr	r0, [pc, #156]	; (8009290 <TouchScreen_Polling+0x1a4>)
 80091f2:	68ba      	ldr	r2, [r7, #8]
 80091f4:	4613      	mov	r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	4413      	add	r3, r2
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	4403      	add	r3, r0
 80091fe:	3306      	adds	r3, #6
 8009200:	881b      	ldrh	r3, [r3, #0]
 8009202:	4423      	add	r3, r4
 8009204:	4299      	cmp	r1, r3
 8009206:	da26      	bge.n	8009256 <TouchScreen_Polling+0x16a>
			{
				if(y > harmonique[i].y_pos && y < (harmonique[i].y_pos + harmonique[i].height))
 8009208:	4921      	ldr	r1, [pc, #132]	; (8009290 <TouchScreen_Polling+0x1a4>)
 800920a:	68ba      	ldr	r2, [r7, #8]
 800920c:	4613      	mov	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4413      	add	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	440b      	add	r3, r1
 8009216:	3304      	adds	r3, #4
 8009218:	881b      	ldrh	r3, [r3, #0]
 800921a:	88ba      	ldrh	r2, [r7, #4]
 800921c:	429a      	cmp	r2, r3
 800921e:	d91a      	bls.n	8009256 <TouchScreen_Polling+0x16a>
 8009220:	88b9      	ldrh	r1, [r7, #4]
 8009222:	481b      	ldr	r0, [pc, #108]	; (8009290 <TouchScreen_Polling+0x1a4>)
 8009224:	68ba      	ldr	r2, [r7, #8]
 8009226:	4613      	mov	r3, r2
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	4413      	add	r3, r2
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	4403      	add	r3, r0
 8009230:	3304      	adds	r3, #4
 8009232:	881b      	ldrh	r3, [r3, #0]
 8009234:	461c      	mov	r4, r3
 8009236:	4816      	ldr	r0, [pc, #88]	; (8009290 <TouchScreen_Polling+0x1a4>)
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	4613      	mov	r3, r2
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	4413      	add	r3, r2
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	4403      	add	r3, r0
 8009244:	3308      	adds	r3, #8
 8009246:	881b      	ldrh	r3, [r3, #0]
 8009248:	4423      	add	r3, r4
 800924a:	4299      	cmp	r1, r3
 800924c:	da03      	bge.n	8009256 <TouchScreen_Polling+0x16a>
				{
					button_harmonique=i;
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	b2da      	uxtb	r2, r3
 8009252:	4b10      	ldr	r3, [pc, #64]	; (8009294 <TouchScreen_Polling+0x1a8>)
 8009254:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 3 ; i++)
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	3301      	adds	r3, #1
 800925a:	60bb      	str	r3, [r7, #8]
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	2b02      	cmp	r3, #2
 8009260:	ddaf      	ble.n	80091c2 <TouchScreen_Polling+0xd6>
				}
			}
		}
		Active_Button(button_freq,button_harmonique);
 8009262:	4b0a      	ldr	r3, [pc, #40]	; (800928c <TouchScreen_Polling+0x1a0>)
 8009264:	781a      	ldrb	r2, [r3, #0]
 8009266:	4b0b      	ldr	r3, [pc, #44]	; (8009294 <TouchScreen_Polling+0x1a8>)
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	4619      	mov	r1, r3
 800926c:	4610      	mov	r0, r2
 800926e:	f000 f813 	bl	8009298 <Active_Button>
		Draw_Button();
 8009272:	f7ff fdf7 	bl	8008e64 <Draw_Button>
		Signal();
 8009276:	f000 f86d 	bl	8009354 <Signal>
	}
}
 800927a:	bf00      	nop
 800927c:	3714      	adds	r7, #20
 800927e:	46bd      	mov	sp, r7
 8009280:	bd90      	pop	{r4, r7, pc}
 8009282:	bf00      	nop
 8009284:	20000518 	.word	0x20000518
 8009288:	20000044 	.word	0x20000044
 800928c:	2000062b 	.word	0x2000062b
 8009290:	200000a8 	.word	0x200000a8
 8009294:	20000628 	.word	0x20000628

08009298 <Active_Button>:


void Active_Button(uint8_t index,uint8_t index2)
{
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	4603      	mov	r3, r0
 80092a0:	460a      	mov	r2, r1
 80092a2:	71fb      	strb	r3, [r7, #7]
 80092a4:	4613      	mov	r3, r2
 80092a6:	71bb      	strb	r3, [r7, #6]
	for(int j = 0 ; j < number_button; j++)
 80092a8:	2300      	movs	r3, #0
 80092aa:	60fb      	str	r3, [r7, #12]
 80092ac:	e01d      	b.n	80092ea <Active_Button+0x52>
	{
		if(j != index)
 80092ae:	79fb      	ldrb	r3, [r7, #7]
 80092b0:	68fa      	ldr	r2, [r7, #12]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d009      	beq.n	80092ca <Active_Button+0x32>
		{
			button_list[j].is_active = 0;
 80092b6:	4923      	ldr	r1, [pc, #140]	; (8009344 <Active_Button+0xac>)
 80092b8:	68fa      	ldr	r2, [r7, #12]
 80092ba:	4613      	mov	r3, r2
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	4413      	add	r3, r2
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	440b      	add	r3, r1
 80092c4:	2200      	movs	r2, #0
 80092c6:	701a      	strb	r2, [r3, #0]
 80092c8:	e00c      	b.n	80092e4 <Active_Button+0x4c>
		}
		else{
			button_list[j].is_active = 1;
 80092ca:	491e      	ldr	r1, [pc, #120]	; (8009344 <Active_Button+0xac>)
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	4613      	mov	r3, r2
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	4413      	add	r3, r2
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	440b      	add	r3, r1
 80092d8:	2201      	movs	r2, #1
 80092da:	701a      	strb	r2, [r3, #0]
			id_freq=j;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	b2da      	uxtb	r2, r3
 80092e0:	4b19      	ldr	r3, [pc, #100]	; (8009348 <Active_Button+0xb0>)
 80092e2:	701a      	strb	r2, [r3, #0]
	for(int j = 0 ; j < number_button; j++)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	3301      	adds	r3, #1
 80092e8:	60fb      	str	r3, [r7, #12]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2b05      	cmp	r3, #5
 80092ee:	ddde      	ble.n	80092ae <Active_Button+0x16>
		}
	}
	for (int i=0;i<3;i++)
 80092f0:	2300      	movs	r3, #0
 80092f2:	60bb      	str	r3, [r7, #8]
 80092f4:	e01d      	b.n	8009332 <Active_Button+0x9a>
	{
		if (i!=index2)
 80092f6:	79bb      	ldrb	r3, [r7, #6]
 80092f8:	68ba      	ldr	r2, [r7, #8]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d009      	beq.n	8009312 <Active_Button+0x7a>
		{
			harmonique[i].is_active=0;
 80092fe:	4913      	ldr	r1, [pc, #76]	; (800934c <Active_Button+0xb4>)
 8009300:	68ba      	ldr	r2, [r7, #8]
 8009302:	4613      	mov	r3, r2
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	4413      	add	r3, r2
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	440b      	add	r3, r1
 800930c:	2200      	movs	r2, #0
 800930e:	701a      	strb	r2, [r3, #0]
 8009310:	e00c      	b.n	800932c <Active_Button+0x94>
		}
		else {
			harmonique[i].is_active=1;
 8009312:	490e      	ldr	r1, [pc, #56]	; (800934c <Active_Button+0xb4>)
 8009314:	68ba      	ldr	r2, [r7, #8]
 8009316:	4613      	mov	r3, r2
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	4413      	add	r3, r2
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	440b      	add	r3, r1
 8009320:	2201      	movs	r2, #1
 8009322:	701a      	strb	r2, [r3, #0]
			id_harmonique=i;
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	b2da      	uxtb	r2, r3
 8009328:	4b09      	ldr	r3, [pc, #36]	; (8009350 <Active_Button+0xb8>)
 800932a:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<3;i++)
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	3301      	adds	r3, #1
 8009330:	60bb      	str	r3, [r7, #8]
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	2b02      	cmp	r3, #2
 8009336:	ddde      	ble.n	80092f6 <Active_Button+0x5e>
		}

	}
}
 8009338:	bf00      	nop
 800933a:	3714      	adds	r7, #20
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr
 8009344:	20000044 	.word	0x20000044
 8009348:	20000629 	.word	0x20000629
 800934c:	200000a8 	.word	0x200000a8
 8009350:	2000062a 	.word	0x2000062a

08009354 <Signal>:

void Signal()
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
	float frequence;
	uint8_t nbr_harmonique;
	switch(id_freq){
 800935a:	4b22      	ldr	r3, [pc, #136]	; (80093e4 <Signal+0x90>)
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	2b04      	cmp	r3, #4
 8009360:	d81b      	bhi.n	800939a <Signal+0x46>
 8009362:	a201      	add	r2, pc, #4	; (adr r2, 8009368 <Signal+0x14>)
 8009364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009368:	0800937d 	.word	0x0800937d
 800936c:	08009383 	.word	0x08009383
 8009370:	08009389 	.word	0x08009389
 8009374:	0800938f 	.word	0x0800938f
 8009378:	08009395 	.word	0x08009395

		case (0):
			//frequence=261.6;
			frequence=466.0;
 800937c:	4b1a      	ldr	r3, [pc, #104]	; (80093e8 <Signal+0x94>)
 800937e:	607b      	str	r3, [r7, #4]
		break ;
 8009380:	e00e      	b.n	80093a0 <Signal+0x4c>

		case(1):
			frequence=440;
 8009382:	4b1a      	ldr	r3, [pc, #104]	; (80093ec <Signal+0x98>)
 8009384:	607b      	str	r3, [r7, #4]
		break;
 8009386:	e00b      	b.n	80093a0 <Signal+0x4c>

		case (2):
			frequence=587.4;
 8009388:	4b19      	ldr	r3, [pc, #100]	; (80093f0 <Signal+0x9c>)
 800938a:	607b      	str	r3, [r7, #4]
			break ;
 800938c:	e008      	b.n	80093a0 <Signal+0x4c>

		case(3):
			frequence=784;
 800938e:	4b19      	ldr	r3, [pc, #100]	; (80093f4 <Signal+0xa0>)
 8009390:	607b      	str	r3, [r7, #4]
			break;
 8009392:	e005      	b.n	80093a0 <Signal+0x4c>
		case(4):
			frequence=1318.8;
 8009394:	4b18      	ldr	r3, [pc, #96]	; (80093f8 <Signal+0xa4>)
 8009396:	607b      	str	r3, [r7, #4]
		break;
 8009398:	e002      	b.n	80093a0 <Signal+0x4c>
		default:
			frequence = 440;
 800939a:	4b14      	ldr	r3, [pc, #80]	; (80093ec <Signal+0x98>)
 800939c:	607b      	str	r3, [r7, #4]
			break;
 800939e:	bf00      	nop
	}

	switch(id_harmonique)
 80093a0:	4b16      	ldr	r3, [pc, #88]	; (80093fc <Signal+0xa8>)
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d006      	beq.n	80093b6 <Signal+0x62>
 80093a8:	2b02      	cmp	r3, #2
 80093aa:	d007      	beq.n	80093bc <Signal+0x68>
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d108      	bne.n	80093c2 <Signal+0x6e>
	{

		case(0):
			nbr_harmonique=1;
 80093b0:	2301      	movs	r3, #1
 80093b2:	70fb      	strb	r3, [r7, #3]
		break;
 80093b4:	e005      	b.n	80093c2 <Signal+0x6e>

		case(1):
			nbr_harmonique=2;
 80093b6:	2302      	movs	r3, #2
 80093b8:	70fb      	strb	r3, [r7, #3]
		break;
 80093ba:	e002      	b.n	80093c2 <Signal+0x6e>

		case(2):
			nbr_harmonique=3;
 80093bc:	2303      	movs	r3, #3
 80093be:	70fb      	strb	r3, [r7, #3]
		break;
 80093c0:	bf00      	nop
	}

	Generate_signal((uint16_t)frequence,nbr_harmonique);
 80093c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80093c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093ca:	ee17 3a90 	vmov	r3, s15
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	461a      	mov	r2, r3
 80093d2:	78fb      	ldrb	r3, [r7, #3]
 80093d4:	4619      	mov	r1, r3
 80093d6:	4610      	mov	r0, r2
 80093d8:	f000 f8b6 	bl	8009548 <Generate_signal>
}
 80093dc:	bf00      	nop
 80093de:	3708      	adds	r7, #8
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	20000629 	.word	0x20000629
 80093e8:	43e90000 	.word	0x43e90000
 80093ec:	43dc0000 	.word	0x43dc0000
 80093f0:	4412d99a 	.word	0x4412d99a
 80093f4:	44440000 	.word	0x44440000
 80093f8:	44a4d99a 	.word	0x44a4d99a
 80093fc:	2000062a 	.word	0x2000062a

08009400 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
	int i;
	if(htim->Instance==TIM7)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a42      	ldr	r2, [pc, #264]	; (8009518 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d177      	bne.n	8009502 <HAL_TIM_PeriodElapsedCallback+0x102>
	{
		//pulse_width=((float)(sine_wave_array[k])/(float)(4096))*periode_PWM;
		//pulse_width=((float)(sine_wave_array[k]+sine_wave_array[(2*k)%256])/(float)(2*4096))*periode_PWM;
		pulse_width_noise=(float)(sine_wave_noise[k]);
 8009412:	4b42      	ldr	r3, [pc, #264]	; (800951c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a42      	ldr	r2, [pc, #264]	; (8009520 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8009418:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800941c:	ee07 3a90 	vmov	s15, r3
 8009420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009424:	4b3f      	ldr	r3, [pc, #252]	; (8009524 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8009426:	edc3 7a00 	vstr	s15, [r3]
		pulse_width=((float)(sine_wave_array[k]));
 800942a:	4b3c      	ldr	r3, [pc, #240]	; (800951c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a3e      	ldr	r2, [pc, #248]	; (8009528 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8009430:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009434:	ee07 3a90 	vmov	s15, r3
 8009438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800943c:	4b3b      	ldr	r3, [pc, #236]	; (800952c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800943e:	edc3 7a00 	vstr	s15, [r3]
		for (i=1;i<nb_harmoniques;i++){
 8009442:	2301      	movs	r3, #1
 8009444:	60fb      	str	r3, [r7, #12]
 8009446:	e01e      	b.n	8009486 <HAL_TIM_PeriodElapsedCallback+0x86>
			pulse_width+=((float)(sine_wave_array[(harmonics[i]*k)%256]));
 8009448:	4a39      	ldr	r2, [pc, #228]	; (8009530 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009450:	4a32      	ldr	r2, [pc, #200]	; (800951c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8009452:	6812      	ldr	r2, [r2, #0]
 8009454:	fb02 f303 	mul.w	r3, r2, r3
 8009458:	425a      	negs	r2, r3
 800945a:	b2db      	uxtb	r3, r3
 800945c:	b2d2      	uxtb	r2, r2
 800945e:	bf58      	it	pl
 8009460:	4253      	negpl	r3, r2
 8009462:	4a31      	ldr	r2, [pc, #196]	; (8009528 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8009464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009468:	ee07 3a90 	vmov	s15, r3
 800946c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009470:	4b2e      	ldr	r3, [pc, #184]	; (800952c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8009472:	edd3 7a00 	vldr	s15, [r3]
 8009476:	ee77 7a27 	vadd.f32	s15, s14, s15
 800947a:	4b2c      	ldr	r3, [pc, #176]	; (800952c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800947c:	edc3 7a00 	vstr	s15, [r3]
		for (i=1;i<nb_harmoniques;i++){
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	3301      	adds	r3, #1
 8009484:	60fb      	str	r3, [r7, #12]
 8009486:	4b2b      	ldr	r3, [pc, #172]	; (8009534 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	429a      	cmp	r2, r3
 800948e:	dbdb      	blt.n	8009448 <HAL_TIM_PeriodElapsedCallback+0x48>
		}
		pulse_width=(pulse_width/(float)((nb_harmoniques)*4096))*periode_PWM;
 8009490:	4b26      	ldr	r3, [pc, #152]	; (800952c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8009492:	edd3 6a00 	vldr	s13, [r3]
 8009496:	4b27      	ldr	r3, [pc, #156]	; (8009534 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	031b      	lsls	r3, r3, #12
 800949c:	ee07 3a90 	vmov	s15, r3
 80094a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094a8:	4b23      	ldr	r3, [pc, #140]	; (8009538 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80094aa:	881b      	ldrh	r3, [r3, #0]
 80094ac:	ee07 3a90 	vmov	s15, r3
 80094b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094b8:	4b1c      	ldr	r3, [pc, #112]	; (800952c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80094ba:	edc3 7a00 	vstr	s15, [r3]

		k++;
 80094be:	4b17      	ldr	r3, [pc, #92]	; (800951c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	3301      	adds	r3, #1
 80094c4:	4a15      	ldr	r2, [pc, #84]	; (800951c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80094c6:	6013      	str	r3, [r2, #0]
		if (k==256){
 80094c8:	4b14      	ldr	r3, [pc, #80]	; (800951c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094d0:	d102      	bne.n	80094d8 <HAL_TIM_PeriodElapsedCallback+0xd8>
			k=0;
 80094d2:	4b12      	ldr	r3, [pc, #72]	; (800951c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80094d4:	2200      	movs	r2, #0
 80094d6:	601a      	str	r2, [r3, #0]
		}
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pulse_width);
 80094d8:	4b14      	ldr	r3, [pc, #80]	; (800952c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80094da:	edd3 7a00 	vldr	s15, [r3]
 80094de:	4b17      	ldr	r3, [pc, #92]	; (800953c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094e6:	ee17 2a90 	vmov	r2, s15
 80094ea:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse_width_noise);
 80094ec:	4b0d      	ldr	r3, [pc, #52]	; (8009524 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80094ee:	edd3 7a00 	vldr	s15, [r3]
 80094f2:	4b13      	ldr	r3, [pc, #76]	; (8009540 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094fa:	ee17 2a90 	vmov	r2, s15
 80094fe:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else if (htim->Instance==TIM6)
	{
		TouchScreen_Polling();
	}
}
 8009500:	e006      	b.n	8009510 <HAL_TIM_PeriodElapsedCallback+0x110>
	else if (htim->Instance==TIM6)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a0f      	ldr	r2, [pc, #60]	; (8009544 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d101      	bne.n	8009510 <HAL_TIM_PeriodElapsedCallback+0x110>
		TouchScreen_Polling();
 800950c:	f7ff fdee 	bl	80090ec <TouchScreen_Polling>
}
 8009510:	bf00      	nop
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	40001400 	.word	0x40001400
 800951c:	200006f0 	.word	0x200006f0
 8009520:	200000e4 	.word	0x200000e4
 8009524:	200008d8 	.word	0x200008d8
 8009528:	0800cdf4 	.word	0x0800cdf4
 800952c:	200007f4 	.word	0x200007f4
 8009530:	200002f0 	.word	0x200002f0
 8009534:	200006f4 	.word	0x200006f4
 8009538:	200002e4 	.word	0x200002e4
 800953c:	2000062c 	.word	0x2000062c
 8009540:	2000091c 	.word	0x2000091c
 8009544:	40001000 	.word	0x40001000

08009548 <Generate_signal>:


void Generate_signal(uint16_t freq,int nb)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	4603      	mov	r3, r0
 8009550:	6039      	str	r1, [r7, #0]
 8009552:	80fb      	strh	r3, [r7, #6]
	//uint8_t nbr_freq=sizeof(frequencies)/sizeof(frequencies[0]);
	//uint8_t i=0;
	period_overflow=(freq_timer7+freq_timer7)/(freq*nbr_points);
 8009554:	4b22      	ldr	r3, [pc, #136]	; (80095e0 <Generate_signal+0x98>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	005b      	lsls	r3, r3, #1
 800955a:	88fa      	ldrh	r2, [r7, #6]
 800955c:	4921      	ldr	r1, [pc, #132]	; (80095e4 <Generate_signal+0x9c>)
 800955e:	8809      	ldrh	r1, [r1, #0]
 8009560:	fb01 f202 	mul.w	r2, r1, r2
 8009564:	fbb3 f3f2 	udiv	r3, r3, r2
 8009568:	ee07 3a90 	vmov	s15, r3
 800956c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009570:	4b1d      	ldr	r3, [pc, #116]	; (80095e8 <Generate_signal+0xa0>)
 8009572:	edc3 7a00 	vstr	s15, [r3]
	nb_harmoniques=nb;
 8009576:	4a1d      	ldr	r2, [pc, #116]	; (80095ec <Generate_signal+0xa4>)
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_AUTORELOAD(&htim4,periode_PWM);
 800957c:	4b1c      	ldr	r3, [pc, #112]	; (80095f0 <Generate_signal+0xa8>)
 800957e:	881a      	ldrh	r2, [r3, #0]
 8009580:	4b1c      	ldr	r3, [pc, #112]	; (80095f4 <Generate_signal+0xac>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	62da      	str	r2, [r3, #44]	; 0x2c
 8009586:	4b1a      	ldr	r3, [pc, #104]	; (80095f0 <Generate_signal+0xa8>)
 8009588:	881b      	ldrh	r3, [r3, #0]
 800958a:	461a      	mov	r2, r3
 800958c:	4b19      	ldr	r3, [pc, #100]	; (80095f4 <Generate_signal+0xac>)
 800958e:	60da      	str	r2, [r3, #12]
	  __HAL_TIM_SET_AUTORELOAD(&htim2,periode_PWM);
 8009590:	4b17      	ldr	r3, [pc, #92]	; (80095f0 <Generate_signal+0xa8>)
 8009592:	881a      	ldrh	r2, [r3, #0]
 8009594:	4b18      	ldr	r3, [pc, #96]	; (80095f8 <Generate_signal+0xb0>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	62da      	str	r2, [r3, #44]	; 0x2c
 800959a:	4b15      	ldr	r3, [pc, #84]	; (80095f0 <Generate_signal+0xa8>)
 800959c:	881b      	ldrh	r3, [r3, #0]
 800959e:	461a      	mov	r2, r3
 80095a0:	4b15      	ldr	r3, [pc, #84]	; (80095f8 <Generate_signal+0xb0>)
 80095a2:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim7,period_overflow);
 80095a4:	4b10      	ldr	r3, [pc, #64]	; (80095e8 <Generate_signal+0xa0>)
 80095a6:	edd3 7a00 	vldr	s15, [r3]
 80095aa:	4b14      	ldr	r3, [pc, #80]	; (80095fc <Generate_signal+0xb4>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095b2:	ee17 2a90 	vmov	r2, s15
 80095b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80095b8:	4b0b      	ldr	r3, [pc, #44]	; (80095e8 <Generate_signal+0xa0>)
 80095ba:	edd3 7a00 	vldr	s15, [r3]
 80095be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095c2:	ee17 2a90 	vmov	r2, s15
 80095c6:	4b0d      	ldr	r3, [pc, #52]	; (80095fc <Generate_signal+0xb4>)
 80095c8:	60da      	str	r2, [r3, #12]
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 80095ca:	2108      	movs	r1, #8
 80095cc:	4809      	ldr	r0, [pc, #36]	; (80095f4 <Generate_signal+0xac>)
 80095ce:	f7fd fc31 	bl	8006e34 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim7);
 80095d2:	480a      	ldr	r0, [pc, #40]	; (80095fc <Generate_signal+0xb4>)
 80095d4:	f7fd fbd8 	bl	8006d88 <HAL_TIM_Base_Start_IT>
	{
		period_overflow=(freq_timer7+freq_timer7)/(frequencies[i]*nbr_points);
		__HAL_TIM_SET_AUTORELOAD(&htim7,period_overflow);
		HAL_Delay(1000);
	}*/
}
 80095d8:	bf00      	nop
 80095da:	3708      	adds	r7, #8
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	200002e8 	.word	0x200002e8
 80095e4:	200002ec 	.word	0x200002ec
 80095e8:	200007a0 	.word	0x200007a0
 80095ec:	200006f4 	.word	0x200006f4
 80095f0:	200002e4 	.word	0x200002e4
 80095f4:	2000062c 	.word	0x2000062c
 80095f8:	2000091c 	.word	0x2000091c
 80095fc:	20000994 	.word	0x20000994

08009600 <Generate_noise>:
void Stop_signal()
{
	  HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_3);
}
void Generate_noise()
{
 8009600:	b580      	push	{r7, lr}
 8009602:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8009604:	2100      	movs	r1, #0
 8009606:	4802      	ldr	r0, [pc, #8]	; (8009610 <Generate_noise+0x10>)
 8009608:	f7fd fc14 	bl	8006e34 <HAL_TIM_PWM_Start>
}
 800960c:	bf00      	nop
 800960e:	bd80      	pop	{r7, pc}
 8009610:	2000091c 	.word	0x2000091c

08009614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009618:	f7f8 fe22 	bl	8002260 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800961c:	f000 f826 	bl	800966c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009620:	f000 fc60 	bl	8009ee4 <MX_GPIO_Init>
  MX_DCMI_Init();
 8009624:	f000 f8d0 	bl	80097c8 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8009628:	f000 f902 	bl	8009830 <MX_DMA2D_Init>
  MX_FMC_Init();
 800962c:	f000 fc0a 	bl	8009e44 <MX_FMC_Init>
  MX_LTDC_Init();
 8009630:	f000 f930 	bl	8009894 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8009634:	f000 f9b0 	bl	8009998 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8009638:	f000 f9da 	bl	80099f0 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 800963c:	f000 fa80 	bl	8009b40 <MX_SDMMC1_SD_Init>
  MX_TIM2_Init();
 8009640:	f000 faae 	bl	8009ba0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8009644:	f000 fbce 	bl	8009de4 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8009648:	f000 fb04 	bl	8009c54 <MX_TIM4_Init>
  MX_TIM6_Init();
 800964c:	f000 fb5c 	bl	8009d08 <MX_TIM6_Init>
  MX_TIM7_Init();
 8009650:	f000 fb92 	bl	8009d78 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  Init_LCD();
 8009654:	f7ff fbdc 	bl	8008e10 <Init_LCD>
  Draw_Button();
 8009658:	f7ff fc04 	bl	8008e64 <Draw_Button>
HAL_TIM_Base_Start_IT(&htim6);
 800965c:	4802      	ldr	r0, [pc, #8]	; (8009668 <main+0x54>)
 800965e:	f7fd fb93 	bl	8006d88 <HAL_TIM_Base_Start_IT>
Generate_noise();
 8009662:	f7ff ffcd 	bl	8009600 <Generate_noise>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8009666:	e7fe      	b.n	8009666 <main+0x52>
 8009668:	20000898 	.word	0x20000898

0800966c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b0b4      	sub	sp, #208	; 0xd0
 8009670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009672:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009676:	2230      	movs	r2, #48	; 0x30
 8009678:	2100      	movs	r1, #0
 800967a:	4618      	mov	r0, r3
 800967c:	f001 fcaa 	bl	800afd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009680:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009684:	2200      	movs	r2, #0
 8009686:	601a      	str	r2, [r3, #0]
 8009688:	605a      	str	r2, [r3, #4]
 800968a:	609a      	str	r2, [r3, #8]
 800968c:	60da      	str	r2, [r3, #12]
 800968e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009690:	f107 0308 	add.w	r3, r7, #8
 8009694:	2284      	movs	r2, #132	; 0x84
 8009696:	2100      	movs	r1, #0
 8009698:	4618      	mov	r0, r3
 800969a:	f001 fc9b 	bl	800afd4 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800969e:	f7fa ffa3 	bl	80045e8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80096a2:	4b46      	ldr	r3, [pc, #280]	; (80097bc <SystemClock_Config+0x150>)
 80096a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a6:	4a45      	ldr	r2, [pc, #276]	; (80097bc <SystemClock_Config+0x150>)
 80096a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096ac:	6413      	str	r3, [r2, #64]	; 0x40
 80096ae:	4b43      	ldr	r3, [pc, #268]	; (80097bc <SystemClock_Config+0x150>)
 80096b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096b6:	607b      	str	r3, [r7, #4]
 80096b8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80096ba:	4b41      	ldr	r3, [pc, #260]	; (80097c0 <SystemClock_Config+0x154>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a40      	ldr	r2, [pc, #256]	; (80097c0 <SystemClock_Config+0x154>)
 80096c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80096c4:	6013      	str	r3, [r2, #0]
 80096c6:	4b3e      	ldr	r3, [pc, #248]	; (80097c0 <SystemClock_Config+0x154>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80096ce:	603b      	str	r3, [r7, #0]
 80096d0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80096d2:	2309      	movs	r3, #9
 80096d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80096d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80096dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80096e0:	2301      	movs	r3, #1
 80096e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80096e6:	2302      	movs	r3, #2
 80096e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80096ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80096f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80096f4:	2319      	movs	r3, #25
 80096f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80096fa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80096fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009702:	2302      	movs	r3, #2
 8009704:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8009708:	2309      	movs	r3, #9
 800970a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800970e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009712:	4618      	mov	r0, r3
 8009714:	f7fb f898 	bl	8004848 <HAL_RCC_OscConfig>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d001      	beq.n	8009722 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800971e:	f000 fecd 	bl	800a4bc <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8009722:	f7fa ff71 	bl	8004608 <HAL_PWREx_EnableOverDrive>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d001      	beq.n	8009730 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800972c:	f000 fec6 	bl	800a4bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009730:	230f      	movs	r3, #15
 8009732:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009736:	2302      	movs	r3, #2
 8009738:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800973c:	2300      	movs	r3, #0
 800973e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009742:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009746:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800974a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800974e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8009752:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009756:	2106      	movs	r1, #6
 8009758:	4618      	mov	r0, r3
 800975a:	f7fb fae5 	bl	8004d28 <HAL_RCC_ClockConfig>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d001      	beq.n	8009768 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8009764:	f000 feaa 	bl	800a4bc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8009768:	4b16      	ldr	r3, [pc, #88]	; (80097c4 <SystemClock_Config+0x158>)
 800976a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800976c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8009770:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8009772:	2305      	movs	r3, #5
 8009774:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8009776:	2302      	movs	r3, #2
 8009778:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800977a:	2303      	movs	r3, #3
 800977c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800977e:	2301      	movs	r3, #1
 8009780:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8009782:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009786:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8009788:	f44f 7300 	mov.w	r3, #512	; 0x200
 800978c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800978e:	2300      	movs	r3, #0
 8009790:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8009792:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009796:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800979a:	2300      	movs	r3, #0
 800979c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80097a0:	f107 0308 	add.w	r3, r7, #8
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7fb fc8d 	bl	80050c4 <HAL_RCCEx_PeriphCLKConfig>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d001      	beq.n	80097b4 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80097b0:	f000 fe84 	bl	800a4bc <Error_Handler>
  }
}
 80097b4:	bf00      	nop
 80097b6:	37d0      	adds	r7, #208	; 0xd0
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	40023800 	.word	0x40023800
 80097c0:	40007000 	.word	0x40007000
 80097c4:	00a00068 	.word	0x00a00068

080097c8 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80097cc:	4b16      	ldr	r3, [pc, #88]	; (8009828 <MX_DCMI_Init+0x60>)
 80097ce:	4a17      	ldr	r2, [pc, #92]	; (800982c <MX_DCMI_Init+0x64>)
 80097d0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80097d2:	4b15      	ldr	r3, [pc, #84]	; (8009828 <MX_DCMI_Init+0x60>)
 80097d4:	2200      	movs	r2, #0
 80097d6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80097d8:	4b13      	ldr	r3, [pc, #76]	; (8009828 <MX_DCMI_Init+0x60>)
 80097da:	2200      	movs	r2, #0
 80097dc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80097de:	4b12      	ldr	r3, [pc, #72]	; (8009828 <MX_DCMI_Init+0x60>)
 80097e0:	2200      	movs	r2, #0
 80097e2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80097e4:	4b10      	ldr	r3, [pc, #64]	; (8009828 <MX_DCMI_Init+0x60>)
 80097e6:	2200      	movs	r2, #0
 80097e8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80097ea:	4b0f      	ldr	r3, [pc, #60]	; (8009828 <MX_DCMI_Init+0x60>)
 80097ec:	2200      	movs	r2, #0
 80097ee:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80097f0:	4b0d      	ldr	r3, [pc, #52]	; (8009828 <MX_DCMI_Init+0x60>)
 80097f2:	2200      	movs	r2, #0
 80097f4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80097f6:	4b0c      	ldr	r3, [pc, #48]	; (8009828 <MX_DCMI_Init+0x60>)
 80097f8:	2200      	movs	r2, #0
 80097fa:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80097fc:	4b0a      	ldr	r3, [pc, #40]	; (8009828 <MX_DCMI_Init+0x60>)
 80097fe:	2200      	movs	r2, #0
 8009800:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8009802:	4b09      	ldr	r3, [pc, #36]	; (8009828 <MX_DCMI_Init+0x60>)
 8009804:	2200      	movs	r2, #0
 8009806:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8009808:	4b07      	ldr	r3, [pc, #28]	; (8009828 <MX_DCMI_Init+0x60>)
 800980a:	2200      	movs	r2, #0
 800980c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800980e:	4b06      	ldr	r3, [pc, #24]	; (8009828 <MX_DCMI_Init+0x60>)
 8009810:	2200      	movs	r2, #0
 8009812:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8009814:	4804      	ldr	r0, [pc, #16]	; (8009828 <MX_DCMI_Init+0x60>)
 8009816:	f7f8 feb5 	bl	8002584 <HAL_DCMI_Init>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d001      	beq.n	8009824 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8009820:	f000 fe4c 	bl	800a4bc <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8009824:	bf00      	nop
 8009826:	bd80      	pop	{r7, pc}
 8009828:	200007a4 	.word	0x200007a4
 800982c:	50050000 	.word	0x50050000

08009830 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8009834:	4b15      	ldr	r3, [pc, #84]	; (800988c <MX_DMA2D_Init+0x5c>)
 8009836:	4a16      	ldr	r2, [pc, #88]	; (8009890 <MX_DMA2D_Init+0x60>)
 8009838:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800983a:	4b14      	ldr	r3, [pc, #80]	; (800988c <MX_DMA2D_Init+0x5c>)
 800983c:	2200      	movs	r2, #0
 800983e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8009840:	4b12      	ldr	r3, [pc, #72]	; (800988c <MX_DMA2D_Init+0x5c>)
 8009842:	2200      	movs	r2, #0
 8009844:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8009846:	4b11      	ldr	r3, [pc, #68]	; (800988c <MX_DMA2D_Init+0x5c>)
 8009848:	2200      	movs	r2, #0
 800984a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800984c:	4b0f      	ldr	r3, [pc, #60]	; (800988c <MX_DMA2D_Init+0x5c>)
 800984e:	2200      	movs	r2, #0
 8009850:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8009852:	4b0e      	ldr	r3, [pc, #56]	; (800988c <MX_DMA2D_Init+0x5c>)
 8009854:	2200      	movs	r2, #0
 8009856:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8009858:	4b0c      	ldr	r3, [pc, #48]	; (800988c <MX_DMA2D_Init+0x5c>)
 800985a:	2200      	movs	r2, #0
 800985c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800985e:	4b0b      	ldr	r3, [pc, #44]	; (800988c <MX_DMA2D_Init+0x5c>)
 8009860:	2200      	movs	r2, #0
 8009862:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8009864:	4809      	ldr	r0, [pc, #36]	; (800988c <MX_DMA2D_Init+0x5c>)
 8009866:	f7f9 f8bb 	bl	80029e0 <HAL_DMA2D_Init>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d001      	beq.n	8009874 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8009870:	f000 fe24 	bl	800a4bc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8009874:	2101      	movs	r1, #1
 8009876:	4805      	ldr	r0, [pc, #20]	; (800988c <MX_DMA2D_Init+0x5c>)
 8009878:	f7f9 fb20 	bl	8002ebc <HAL_DMA2D_ConfigLayer>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d001      	beq.n	8009886 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8009882:	f000 fe1b 	bl	800a4bc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8009886:	bf00      	nop
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	200008dc 	.word	0x200008dc
 8009890:	4002b000 	.word	0x4002b000

08009894 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b08e      	sub	sp, #56	; 0x38
 8009898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800989a:	1d3b      	adds	r3, r7, #4
 800989c:	2234      	movs	r2, #52	; 0x34
 800989e:	2100      	movs	r1, #0
 80098a0:	4618      	mov	r0, r3
 80098a2:	f001 fb97 	bl	800afd4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80098a6:	4b3a      	ldr	r3, [pc, #232]	; (8009990 <MX_LTDC_Init+0xfc>)
 80098a8:	4a3a      	ldr	r2, [pc, #232]	; (8009994 <MX_LTDC_Init+0x100>)
 80098aa:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80098ac:	4b38      	ldr	r3, [pc, #224]	; (8009990 <MX_LTDC_Init+0xfc>)
 80098ae:	2200      	movs	r2, #0
 80098b0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80098b2:	4b37      	ldr	r3, [pc, #220]	; (8009990 <MX_LTDC_Init+0xfc>)
 80098b4:	2200      	movs	r2, #0
 80098b6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80098b8:	4b35      	ldr	r3, [pc, #212]	; (8009990 <MX_LTDC_Init+0xfc>)
 80098ba:	2200      	movs	r2, #0
 80098bc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80098be:	4b34      	ldr	r3, [pc, #208]	; (8009990 <MX_LTDC_Init+0xfc>)
 80098c0:	2200      	movs	r2, #0
 80098c2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80098c4:	4b32      	ldr	r3, [pc, #200]	; (8009990 <MX_LTDC_Init+0xfc>)
 80098c6:	2228      	movs	r2, #40	; 0x28
 80098c8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80098ca:	4b31      	ldr	r3, [pc, #196]	; (8009990 <MX_LTDC_Init+0xfc>)
 80098cc:	2209      	movs	r2, #9
 80098ce:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80098d0:	4b2f      	ldr	r3, [pc, #188]	; (8009990 <MX_LTDC_Init+0xfc>)
 80098d2:	2235      	movs	r2, #53	; 0x35
 80098d4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80098d6:	4b2e      	ldr	r3, [pc, #184]	; (8009990 <MX_LTDC_Init+0xfc>)
 80098d8:	220b      	movs	r2, #11
 80098da:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80098dc:	4b2c      	ldr	r3, [pc, #176]	; (8009990 <MX_LTDC_Init+0xfc>)
 80098de:	f240 2215 	movw	r2, #533	; 0x215
 80098e2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80098e4:	4b2a      	ldr	r3, [pc, #168]	; (8009990 <MX_LTDC_Init+0xfc>)
 80098e6:	f240 121b 	movw	r2, #283	; 0x11b
 80098ea:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80098ec:	4b28      	ldr	r3, [pc, #160]	; (8009990 <MX_LTDC_Init+0xfc>)
 80098ee:	f240 2235 	movw	r2, #565	; 0x235
 80098f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80098f4:	4b26      	ldr	r3, [pc, #152]	; (8009990 <MX_LTDC_Init+0xfc>)
 80098f6:	f240 121d 	movw	r2, #285	; 0x11d
 80098fa:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80098fc:	4b24      	ldr	r3, [pc, #144]	; (8009990 <MX_LTDC_Init+0xfc>)
 80098fe:	2200      	movs	r2, #0
 8009900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8009904:	4b22      	ldr	r3, [pc, #136]	; (8009990 <MX_LTDC_Init+0xfc>)
 8009906:	2200      	movs	r2, #0
 8009908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800990c:	4b20      	ldr	r3, [pc, #128]	; (8009990 <MX_LTDC_Init+0xfc>)
 800990e:	2200      	movs	r2, #0
 8009910:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8009914:	481e      	ldr	r0, [pc, #120]	; (8009990 <MX_LTDC_Init+0xfc>)
 8009916:	f7fa faef 	bl	8003ef8 <HAL_LTDC_Init>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d001      	beq.n	8009924 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8009920:	f000 fdcc 	bl	800a4bc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8009924:	2300      	movs	r3, #0
 8009926:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8009928:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800992c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800992e:	2300      	movs	r3, #0
 8009930:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8009932:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009936:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8009938:	2302      	movs	r3, #2
 800993a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800993c:	23ff      	movs	r3, #255	; 0xff
 800993e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8009940:	2300      	movs	r3, #0
 8009942:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8009944:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009948:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800994a:	2307      	movs	r3, #7
 800994c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800994e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8009952:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8009954:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8009958:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800995a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800995e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8009960:	2300      	movs	r3, #0
 8009962:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8009966:	2300      	movs	r3, #0
 8009968:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800996c:	2300      	movs	r3, #0
 800996e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8009972:	1d3b      	adds	r3, r7, #4
 8009974:	2200      	movs	r2, #0
 8009976:	4619      	mov	r1, r3
 8009978:	4805      	ldr	r0, [pc, #20]	; (8009990 <MX_LTDC_Init+0xfc>)
 800997a:	f7fa fc4f 	bl	800421c <HAL_LTDC_ConfigLayer>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d001      	beq.n	8009988 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8009984:	f000 fd9a 	bl	800a4bc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8009988:	bf00      	nop
 800998a:	3738      	adds	r7, #56	; 0x38
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	200006f8 	.word	0x200006f8
 8009994:	40016800 	.word	0x40016800

08009998 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800999c:	4b12      	ldr	r3, [pc, #72]	; (80099e8 <MX_QUADSPI_Init+0x50>)
 800999e:	4a13      	ldr	r2, [pc, #76]	; (80099ec <MX_QUADSPI_Init+0x54>)
 80099a0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80099a2:	4b11      	ldr	r3, [pc, #68]	; (80099e8 <MX_QUADSPI_Init+0x50>)
 80099a4:	22ff      	movs	r2, #255	; 0xff
 80099a6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80099a8:	4b0f      	ldr	r3, [pc, #60]	; (80099e8 <MX_QUADSPI_Init+0x50>)
 80099aa:	2201      	movs	r2, #1
 80099ac:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80099ae:	4b0e      	ldr	r3, [pc, #56]	; (80099e8 <MX_QUADSPI_Init+0x50>)
 80099b0:	2200      	movs	r2, #0
 80099b2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80099b4:	4b0c      	ldr	r3, [pc, #48]	; (80099e8 <MX_QUADSPI_Init+0x50>)
 80099b6:	2201      	movs	r2, #1
 80099b8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80099ba:	4b0b      	ldr	r3, [pc, #44]	; (80099e8 <MX_QUADSPI_Init+0x50>)
 80099bc:	2200      	movs	r2, #0
 80099be:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80099c0:	4b09      	ldr	r3, [pc, #36]	; (80099e8 <MX_QUADSPI_Init+0x50>)
 80099c2:	2200      	movs	r2, #0
 80099c4:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80099c6:	4b08      	ldr	r3, [pc, #32]	; (80099e8 <MX_QUADSPI_Init+0x50>)
 80099c8:	2200      	movs	r2, #0
 80099ca:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80099cc:	4b06      	ldr	r3, [pc, #24]	; (80099e8 <MX_QUADSPI_Init+0x50>)
 80099ce:	2200      	movs	r2, #0
 80099d0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80099d2:	4805      	ldr	r0, [pc, #20]	; (80099e8 <MX_QUADSPI_Init+0x50>)
 80099d4:	f7fa fe68 	bl	80046a8 <HAL_QSPI_Init>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d001      	beq.n	80099e2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80099de:	f000 fd6d 	bl	800a4bc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80099e2:	bf00      	nop
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	200009d4 	.word	0x200009d4
 80099ec:	a0001000 	.word	0xa0001000

080099f0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b092      	sub	sp, #72	; 0x48
 80099f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80099f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80099fa:	2200      	movs	r2, #0
 80099fc:	601a      	str	r2, [r3, #0]
 80099fe:	605a      	str	r2, [r3, #4]
 8009a00:	609a      	str	r2, [r3, #8]
 8009a02:	60da      	str	r2, [r3, #12]
 8009a04:	611a      	str	r2, [r3, #16]
 8009a06:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8009a08:	2300      	movs	r3, #0
 8009a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8009a0c:	463b      	mov	r3, r7
 8009a0e:	222c      	movs	r2, #44	; 0x2c
 8009a10:	2100      	movs	r1, #0
 8009a12:	4618      	mov	r0, r3
 8009a14:	f001 fade 	bl	800afd4 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8009a18:	4b47      	ldr	r3, [pc, #284]	; (8009b38 <MX_RTC_Init+0x148>)
 8009a1a:	4a48      	ldr	r2, [pc, #288]	; (8009b3c <MX_RTC_Init+0x14c>)
 8009a1c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8009a1e:	4b46      	ldr	r3, [pc, #280]	; (8009b38 <MX_RTC_Init+0x148>)
 8009a20:	2200      	movs	r2, #0
 8009a22:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8009a24:	4b44      	ldr	r3, [pc, #272]	; (8009b38 <MX_RTC_Init+0x148>)
 8009a26:	227f      	movs	r2, #127	; 0x7f
 8009a28:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8009a2a:	4b43      	ldr	r3, [pc, #268]	; (8009b38 <MX_RTC_Init+0x148>)
 8009a2c:	22ff      	movs	r2, #255	; 0xff
 8009a2e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009a30:	4b41      	ldr	r3, [pc, #260]	; (8009b38 <MX_RTC_Init+0x148>)
 8009a32:	2200      	movs	r2, #0
 8009a34:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009a36:	4b40      	ldr	r3, [pc, #256]	; (8009b38 <MX_RTC_Init+0x148>)
 8009a38:	2200      	movs	r2, #0
 8009a3a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009a3c:	4b3e      	ldr	r3, [pc, #248]	; (8009b38 <MX_RTC_Init+0x148>)
 8009a3e:	2200      	movs	r2, #0
 8009a40:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8009a42:	483d      	ldr	r0, [pc, #244]	; (8009b38 <MX_RTC_Init+0x148>)
 8009a44:	f7fb ff2c 	bl	80058a0 <HAL_RTC_Init>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d001      	beq.n	8009a52 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8009a4e:	f000 fd35 	bl	800a4bc <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8009a52:	2300      	movs	r3, #0
 8009a54:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009a64:	2300      	movs	r3, #0
 8009a66:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8009a6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009a70:	2201      	movs	r2, #1
 8009a72:	4619      	mov	r1, r3
 8009a74:	4830      	ldr	r0, [pc, #192]	; (8009b38 <MX_RTC_Init+0x148>)
 8009a76:	f7fb ff8f 	bl	8005998 <HAL_RTC_SetTime>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d001      	beq.n	8009a84 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8009a80:	f000 fd1c 	bl	800a4bc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8009a84:	2301      	movs	r3, #1
 8009a86:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8009a90:	2301      	movs	r3, #1
 8009a92:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8009a96:	2300      	movs	r3, #0
 8009a98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8009a9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	4824      	ldr	r0, [pc, #144]	; (8009b38 <MX_RTC_Init+0x148>)
 8009aa6:	f7fc f835 	bl	8005b14 <HAL_RTC_SetDate>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d001      	beq.n	8009ab4 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8009ab0:	f000 fd04 	bl	800a4bc <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8009abc:	2300      	movs	r3, #0
 8009abe:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8009acc:	2300      	movs	r3, #0
 8009ace:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8009ade:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8009ae4:	463b      	mov	r3, r7
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	4619      	mov	r1, r3
 8009aea:	4813      	ldr	r0, [pc, #76]	; (8009b38 <MX_RTC_Init+0x148>)
 8009aec:	f7fc f8ba 	bl	8005c64 <HAL_RTC_SetAlarm>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d001      	beq.n	8009afa <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8009af6:	f000 fce1 	bl	800a4bc <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8009afa:	2301      	movs	r3, #1
 8009afc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8009b00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b04:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8009b06:	463b      	mov	r3, r7
 8009b08:	2201      	movs	r2, #1
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	480a      	ldr	r0, [pc, #40]	; (8009b38 <MX_RTC_Init+0x148>)
 8009b0e:	f7fc f8a9 	bl	8005c64 <HAL_RTC_SetAlarm>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d001      	beq.n	8009b1c <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 8009b18:	f000 fcd0 	bl	800a4bc <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8009b1c:	2202      	movs	r2, #2
 8009b1e:	2100      	movs	r1, #0
 8009b20:	4805      	ldr	r0, [pc, #20]	; (8009b38 <MX_RTC_Init+0x148>)
 8009b22:	f7fc fa29 	bl	8005f78 <HAL_RTCEx_SetTimeStamp>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d001      	beq.n	8009b30 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 8009b2c:	f000 fcc6 	bl	800a4bc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8009b30:	bf00      	nop
 8009b32:	3748      	adds	r7, #72	; 0x48
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	20000878 	.word	0x20000878
 8009b3c:	40002800 	.word	0x40002800

08009b40 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8009b44:	4b14      	ldr	r3, [pc, #80]	; (8009b98 <MX_SDMMC1_SD_Init+0x58>)
 8009b46:	4a15      	ldr	r2, [pc, #84]	; (8009b9c <MX_SDMMC1_SD_Init+0x5c>)
 8009b48:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8009b4a:	4b13      	ldr	r3, [pc, #76]	; (8009b98 <MX_SDMMC1_SD_Init+0x58>)
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8009b50:	4b11      	ldr	r3, [pc, #68]	; (8009b98 <MX_SDMMC1_SD_Init+0x58>)
 8009b52:	2200      	movs	r2, #0
 8009b54:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009b56:	4b10      	ldr	r3, [pc, #64]	; (8009b98 <MX_SDMMC1_SD_Init+0x58>)
 8009b58:	2200      	movs	r2, #0
 8009b5a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8009b5c:	4b0e      	ldr	r3, [pc, #56]	; (8009b98 <MX_SDMMC1_SD_Init+0x58>)
 8009b5e:	2200      	movs	r2, #0
 8009b60:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009b62:	4b0d      	ldr	r3, [pc, #52]	; (8009b98 <MX_SDMMC1_SD_Init+0x58>)
 8009b64:	2200      	movs	r2, #0
 8009b66:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8009b68:	4b0b      	ldr	r3, [pc, #44]	; (8009b98 <MX_SDMMC1_SD_Init+0x58>)
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8009b6e:	480a      	ldr	r0, [pc, #40]	; (8009b98 <MX_SDMMC1_SD_Init+0x58>)
 8009b70:	f7fc fa58 	bl	8006024 <HAL_SD_Init>
 8009b74:	4603      	mov	r3, r0
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d001      	beq.n	8009b7e <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 8009b7a:	f000 fc9f 	bl	800a4bc <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8009b7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009b82:	4805      	ldr	r0, [pc, #20]	; (8009b98 <MX_SDMMC1_SD_Init+0x58>)
 8009b84:	f7fc fd05 	bl	8006592 <HAL_SD_ConfigWideBusOperation>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d001      	beq.n	8009b92 <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 8009b8e:	f000 fc95 	bl	800a4bc <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8009b92:	bf00      	nop
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	2000066c 	.word	0x2000066c
 8009b9c:	40012c00 	.word	0x40012c00

08009ba0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b08a      	sub	sp, #40	; 0x28
 8009ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009ba6:	f107 031c 	add.w	r3, r7, #28
 8009baa:	2200      	movs	r2, #0
 8009bac:	601a      	str	r2, [r3, #0]
 8009bae:	605a      	str	r2, [r3, #4]
 8009bb0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009bb2:	463b      	mov	r3, r7
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	601a      	str	r2, [r3, #0]
 8009bb8:	605a      	str	r2, [r3, #4]
 8009bba:	609a      	str	r2, [r3, #8]
 8009bbc:	60da      	str	r2, [r3, #12]
 8009bbe:	611a      	str	r2, [r3, #16]
 8009bc0:	615a      	str	r2, [r3, #20]
 8009bc2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009bc4:	4b22      	ldr	r3, [pc, #136]	; (8009c50 <MX_TIM2_Init+0xb0>)
 8009bc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009bca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8009bcc:	4b20      	ldr	r3, [pc, #128]	; (8009c50 <MX_TIM2_Init+0xb0>)
 8009bce:	2200      	movs	r2, #0
 8009bd0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009bd2:	4b1f      	ldr	r3, [pc, #124]	; (8009c50 <MX_TIM2_Init+0xb0>)
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400;
 8009bd8:	4b1d      	ldr	r3, [pc, #116]	; (8009c50 <MX_TIM2_Init+0xb0>)
 8009bda:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009bde:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009be0:	4b1b      	ldr	r3, [pc, #108]	; (8009c50 <MX_TIM2_Init+0xb0>)
 8009be2:	2200      	movs	r2, #0
 8009be4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009be6:	4b1a      	ldr	r3, [pc, #104]	; (8009c50 <MX_TIM2_Init+0xb0>)
 8009be8:	2280      	movs	r2, #128	; 0x80
 8009bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8009bec:	4818      	ldr	r0, [pc, #96]	; (8009c50 <MX_TIM2_Init+0xb0>)
 8009bee:	f7fd f8f5 	bl	8006ddc <HAL_TIM_PWM_Init>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d001      	beq.n	8009bfc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8009bf8:	f000 fc60 	bl	800a4bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009c00:	2300      	movs	r3, #0
 8009c02:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009c04:	f107 031c 	add.w	r3, r7, #28
 8009c08:	4619      	mov	r1, r3
 8009c0a:	4811      	ldr	r0, [pc, #68]	; (8009c50 <MX_TIM2_Init+0xb0>)
 8009c0c:	f7fd feda 	bl	80079c4 <HAL_TIMEx_MasterConfigSynchronization>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d001      	beq.n	8009c1a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8009c16:	f000 fc51 	bl	800a4bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009c1a:	2360      	movs	r3, #96	; 0x60
 8009c1c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 200;
 8009c1e:	23c8      	movs	r3, #200	; 0xc8
 8009c20:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009c22:	2300      	movs	r3, #0
 8009c24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009c26:	2300      	movs	r3, #0
 8009c28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009c2a:	463b      	mov	r3, r7
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	4619      	mov	r1, r3
 8009c30:	4807      	ldr	r0, [pc, #28]	; (8009c50 <MX_TIM2_Init+0xb0>)
 8009c32:	f7fd fa63 	bl	80070fc <HAL_TIM_PWM_ConfigChannel>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d001      	beq.n	8009c40 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8009c3c:	f000 fc3e 	bl	800a4bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8009c40:	4803      	ldr	r0, [pc, #12]	; (8009c50 <MX_TIM2_Init+0xb0>)
 8009c42:	f000 ff93 	bl	800ab6c <HAL_TIM_MspPostInit>

}
 8009c46:	bf00      	nop
 8009c48:	3728      	adds	r7, #40	; 0x28
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	2000091c 	.word	0x2000091c

08009c54 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b08a      	sub	sp, #40	; 0x28
 8009c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009c5a:	f107 031c 	add.w	r3, r7, #28
 8009c5e:	2200      	movs	r2, #0
 8009c60:	601a      	str	r2, [r3, #0]
 8009c62:	605a      	str	r2, [r3, #4]
 8009c64:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009c66:	463b      	mov	r3, r7
 8009c68:	2200      	movs	r2, #0
 8009c6a:	601a      	str	r2, [r3, #0]
 8009c6c:	605a      	str	r2, [r3, #4]
 8009c6e:	609a      	str	r2, [r3, #8]
 8009c70:	60da      	str	r2, [r3, #12]
 8009c72:	611a      	str	r2, [r3, #16]
 8009c74:	615a      	str	r2, [r3, #20]
 8009c76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8009c78:	4b21      	ldr	r3, [pc, #132]	; (8009d00 <MX_TIM4_Init+0xac>)
 8009c7a:	4a22      	ldr	r2, [pc, #136]	; (8009d04 <MX_TIM4_Init+0xb0>)
 8009c7c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8009c7e:	4b20      	ldr	r3, [pc, #128]	; (8009d00 <MX_TIM4_Init+0xac>)
 8009c80:	2200      	movs	r2, #0
 8009c82:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009c84:	4b1e      	ldr	r3, [pc, #120]	; (8009d00 <MX_TIM4_Init+0xac>)
 8009c86:	2200      	movs	r2, #0
 8009c88:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 400;
 8009c8a:	4b1d      	ldr	r3, [pc, #116]	; (8009d00 <MX_TIM4_Init+0xac>)
 8009c8c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009c90:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009c92:	4b1b      	ldr	r3, [pc, #108]	; (8009d00 <MX_TIM4_Init+0xac>)
 8009c94:	2200      	movs	r2, #0
 8009c96:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009c98:	4b19      	ldr	r3, [pc, #100]	; (8009d00 <MX_TIM4_Init+0xac>)
 8009c9a:	2280      	movs	r2, #128	; 0x80
 8009c9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8009c9e:	4818      	ldr	r0, [pc, #96]	; (8009d00 <MX_TIM4_Init+0xac>)
 8009ca0:	f7fd f89c 	bl	8006ddc <HAL_TIM_PWM_Init>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d001      	beq.n	8009cae <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8009caa:	f000 fc07 	bl	800a4bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009cb6:	f107 031c 	add.w	r3, r7, #28
 8009cba:	4619      	mov	r1, r3
 8009cbc:	4810      	ldr	r0, [pc, #64]	; (8009d00 <MX_TIM4_Init+0xac>)
 8009cbe:	f7fd fe81 	bl	80079c4 <HAL_TIMEx_MasterConfigSynchronization>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d001      	beq.n	8009ccc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8009cc8:	f000 fbf8 	bl	800a4bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009ccc:	2360      	movs	r3, #96	; 0x60
 8009cce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 200;
 8009cd0:	23c8      	movs	r3, #200	; 0xc8
 8009cd2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009cdc:	463b      	mov	r3, r7
 8009cde:	2208      	movs	r2, #8
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	4807      	ldr	r0, [pc, #28]	; (8009d00 <MX_TIM4_Init+0xac>)
 8009ce4:	f7fd fa0a 	bl	80070fc <HAL_TIM_PWM_ConfigChannel>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d001      	beq.n	8009cf2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8009cee:	f000 fbe5 	bl	800a4bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8009cf2:	4803      	ldr	r0, [pc, #12]	; (8009d00 <MX_TIM4_Init+0xac>)
 8009cf4:	f000 ff3a 	bl	800ab6c <HAL_TIM_MspPostInit>

}
 8009cf8:	bf00      	nop
 8009cfa:	3728      	adds	r7, #40	; 0x28
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	2000062c 	.word	0x2000062c
 8009d04:	40000800 	.word	0x40000800

08009d08 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009d0e:	1d3b      	adds	r3, r7, #4
 8009d10:	2200      	movs	r2, #0
 8009d12:	601a      	str	r2, [r3, #0]
 8009d14:	605a      	str	r2, [r3, #4]
 8009d16:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8009d18:	4b15      	ldr	r3, [pc, #84]	; (8009d70 <MX_TIM6_Init+0x68>)
 8009d1a:	4a16      	ldr	r2, [pc, #88]	; (8009d74 <MX_TIM6_Init+0x6c>)
 8009d1c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 499;
 8009d1e:	4b14      	ldr	r3, [pc, #80]	; (8009d70 <MX_TIM6_Init+0x68>)
 8009d20:	f240 12f3 	movw	r2, #499	; 0x1f3
 8009d24:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009d26:	4b12      	ldr	r3, [pc, #72]	; (8009d70 <MX_TIM6_Init+0x68>)
 8009d28:	2200      	movs	r2, #0
 8009d2a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19999;
 8009d2c:	4b10      	ldr	r3, [pc, #64]	; (8009d70 <MX_TIM6_Init+0x68>)
 8009d2e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8009d32:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009d34:	4b0e      	ldr	r3, [pc, #56]	; (8009d70 <MX_TIM6_Init+0x68>)
 8009d36:	2280      	movs	r2, #128	; 0x80
 8009d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8009d3a:	480d      	ldr	r0, [pc, #52]	; (8009d70 <MX_TIM6_Init+0x68>)
 8009d3c:	f7fc fff8 	bl	8006d30 <HAL_TIM_Base_Init>
 8009d40:	4603      	mov	r3, r0
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d001      	beq.n	8009d4a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8009d46:	f000 fbb9 	bl	800a4bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8009d52:	1d3b      	adds	r3, r7, #4
 8009d54:	4619      	mov	r1, r3
 8009d56:	4806      	ldr	r0, [pc, #24]	; (8009d70 <MX_TIM6_Init+0x68>)
 8009d58:	f7fd fe34 	bl	80079c4 <HAL_TIMEx_MasterConfigSynchronization>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d001      	beq.n	8009d66 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8009d62:	f000 fbab 	bl	800a4bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8009d66:	bf00      	nop
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	20000898 	.word	0x20000898
 8009d74:	40001000 	.word	0x40001000

08009d78 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009d7e:	1d3b      	adds	r3, r7, #4
 8009d80:	2200      	movs	r2, #0
 8009d82:	601a      	str	r2, [r3, #0]
 8009d84:	605a      	str	r2, [r3, #4]
 8009d86:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8009d88:	4b14      	ldr	r3, [pc, #80]	; (8009ddc <MX_TIM7_Init+0x64>)
 8009d8a:	4a15      	ldr	r2, [pc, #84]	; (8009de0 <MX_TIM7_Init+0x68>)
 8009d8c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8009d8e:	4b13      	ldr	r3, [pc, #76]	; (8009ddc <MX_TIM7_Init+0x64>)
 8009d90:	2200      	movs	r2, #0
 8009d92:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009d94:	4b11      	ldr	r3, [pc, #68]	; (8009ddc <MX_TIM7_Init+0x64>)
 8009d96:	2200      	movs	r2, #0
 8009d98:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 221;
 8009d9a:	4b10      	ldr	r3, [pc, #64]	; (8009ddc <MX_TIM7_Init+0x64>)
 8009d9c:	22dd      	movs	r2, #221	; 0xdd
 8009d9e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009da0:	4b0e      	ldr	r3, [pc, #56]	; (8009ddc <MX_TIM7_Init+0x64>)
 8009da2:	2280      	movs	r2, #128	; 0x80
 8009da4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8009da6:	480d      	ldr	r0, [pc, #52]	; (8009ddc <MX_TIM7_Init+0x64>)
 8009da8:	f7fc ffc2 	bl	8006d30 <HAL_TIM_Base_Init>
 8009dac:	4603      	mov	r3, r0
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d001      	beq.n	8009db6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8009db2:	f000 fb83 	bl	800a4bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009db6:	2300      	movs	r3, #0
 8009db8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8009dbe:	1d3b      	adds	r3, r7, #4
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	4806      	ldr	r0, [pc, #24]	; (8009ddc <MX_TIM7_Init+0x64>)
 8009dc4:	f7fd fdfe 	bl	80079c4 <HAL_TIMEx_MasterConfigSynchronization>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d001      	beq.n	8009dd2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8009dce:	f000 fb75 	bl	800a4bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8009dd2:	bf00      	nop
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	20000994 	.word	0x20000994
 8009de0:	40001400 	.word	0x40001400

08009de4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009de8:	4b14      	ldr	r3, [pc, #80]	; (8009e3c <MX_USART1_UART_Init+0x58>)
 8009dea:	4a15      	ldr	r2, [pc, #84]	; (8009e40 <MX_USART1_UART_Init+0x5c>)
 8009dec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009dee:	4b13      	ldr	r3, [pc, #76]	; (8009e3c <MX_USART1_UART_Init+0x58>)
 8009df0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009df4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009df6:	4b11      	ldr	r3, [pc, #68]	; (8009e3c <MX_USART1_UART_Init+0x58>)
 8009df8:	2200      	movs	r2, #0
 8009dfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009dfc:	4b0f      	ldr	r3, [pc, #60]	; (8009e3c <MX_USART1_UART_Init+0x58>)
 8009dfe:	2200      	movs	r2, #0
 8009e00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009e02:	4b0e      	ldr	r3, [pc, #56]	; (8009e3c <MX_USART1_UART_Init+0x58>)
 8009e04:	2200      	movs	r2, #0
 8009e06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009e08:	4b0c      	ldr	r3, [pc, #48]	; (8009e3c <MX_USART1_UART_Init+0x58>)
 8009e0a:	220c      	movs	r2, #12
 8009e0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009e0e:	4b0b      	ldr	r3, [pc, #44]	; (8009e3c <MX_USART1_UART_Init+0x58>)
 8009e10:	2200      	movs	r2, #0
 8009e12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009e14:	4b09      	ldr	r3, [pc, #36]	; (8009e3c <MX_USART1_UART_Init+0x58>)
 8009e16:	2200      	movs	r2, #0
 8009e18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009e1a:	4b08      	ldr	r3, [pc, #32]	; (8009e3c <MX_USART1_UART_Init+0x58>)
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009e20:	4b06      	ldr	r3, [pc, #24]	; (8009e3c <MX_USART1_UART_Init+0x58>)
 8009e22:	2200      	movs	r2, #0
 8009e24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009e26:	4805      	ldr	r0, [pc, #20]	; (8009e3c <MX_USART1_UART_Init+0x58>)
 8009e28:	f7fd fe46 	bl	8007ab8 <HAL_UART_Init>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d001      	beq.n	8009e36 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8009e32:	f000 fb43 	bl	800a4bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009e36:	bf00      	nop
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	200007f8 	.word	0x200007f8
 8009e40:	40011000 	.word	0x40011000

08009e44 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b088      	sub	sp, #32
 8009e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8009e4a:	1d3b      	adds	r3, r7, #4
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	601a      	str	r2, [r3, #0]
 8009e50:	605a      	str	r2, [r3, #4]
 8009e52:	609a      	str	r2, [r3, #8]
 8009e54:	60da      	str	r2, [r3, #12]
 8009e56:	611a      	str	r2, [r3, #16]
 8009e58:	615a      	str	r2, [r3, #20]
 8009e5a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8009e5c:	4b1f      	ldr	r3, [pc, #124]	; (8009edc <MX_FMC_Init+0x98>)
 8009e5e:	4a20      	ldr	r2, [pc, #128]	; (8009ee0 <MX_FMC_Init+0x9c>)
 8009e60:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8009e62:	4b1e      	ldr	r3, [pc, #120]	; (8009edc <MX_FMC_Init+0x98>)
 8009e64:	2200      	movs	r2, #0
 8009e66:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8009e68:	4b1c      	ldr	r3, [pc, #112]	; (8009edc <MX_FMC_Init+0x98>)
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8009e6e:	4b1b      	ldr	r3, [pc, #108]	; (8009edc <MX_FMC_Init+0x98>)
 8009e70:	2204      	movs	r2, #4
 8009e72:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8009e74:	4b19      	ldr	r3, [pc, #100]	; (8009edc <MX_FMC_Init+0x98>)
 8009e76:	2210      	movs	r2, #16
 8009e78:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8009e7a:	4b18      	ldr	r3, [pc, #96]	; (8009edc <MX_FMC_Init+0x98>)
 8009e7c:	2240      	movs	r2, #64	; 0x40
 8009e7e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8009e80:	4b16      	ldr	r3, [pc, #88]	; (8009edc <MX_FMC_Init+0x98>)
 8009e82:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8009e86:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8009e88:	4b14      	ldr	r3, [pc, #80]	; (8009edc <MX_FMC_Init+0x98>)
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8009e8e:	4b13      	ldr	r3, [pc, #76]	; (8009edc <MX_FMC_Init+0x98>)
 8009e90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e94:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8009e96:	4b11      	ldr	r3, [pc, #68]	; (8009edc <MX_FMC_Init+0x98>)
 8009e98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009e9c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8009e9e:	4b0f      	ldr	r3, [pc, #60]	; (8009edc <MX_FMC_Init+0x98>)
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8009ea4:	2302      	movs	r3, #2
 8009ea6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8009ea8:	2307      	movs	r3, #7
 8009eaa:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8009eac:	2304      	movs	r3, #4
 8009eae:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8009eb0:	2307      	movs	r3, #7
 8009eb2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8009eb4:	2303      	movs	r3, #3
 8009eb6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8009eb8:	2302      	movs	r3, #2
 8009eba:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8009ebc:	2302      	movs	r3, #2
 8009ebe:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8009ec0:	1d3b      	adds	r3, r7, #4
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	4805      	ldr	r0, [pc, #20]	; (8009edc <MX_FMC_Init+0x98>)
 8009ec6:	f7fc feb4 	bl	8006c32 <HAL_SDRAM_Init>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d001      	beq.n	8009ed4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8009ed0:	f000 faf4 	bl	800a4bc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8009ed4:	bf00      	nop
 8009ed6:	3720      	adds	r7, #32
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	20000960 	.word	0x20000960
 8009ee0:	a0000140 	.word	0xa0000140

08009ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b090      	sub	sp, #64	; 0x40
 8009ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009eea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009eee:	2200      	movs	r2, #0
 8009ef0:	601a      	str	r2, [r3, #0]
 8009ef2:	605a      	str	r2, [r3, #4]
 8009ef4:	609a      	str	r2, [r3, #8]
 8009ef6:	60da      	str	r2, [r3, #12]
 8009ef8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009efa:	4bae      	ldr	r3, [pc, #696]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009efe:	4aad      	ldr	r2, [pc, #692]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009f00:	f043 0310 	orr.w	r3, r3, #16
 8009f04:	6313      	str	r3, [r2, #48]	; 0x30
 8009f06:	4bab      	ldr	r3, [pc, #684]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f0a:	f003 0310 	and.w	r3, r3, #16
 8009f0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8009f12:	4ba8      	ldr	r3, [pc, #672]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f16:	4aa7      	ldr	r2, [pc, #668]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009f18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8009f1e:	4ba5      	ldr	r3, [pc, #660]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f26:	627b      	str	r3, [r7, #36]	; 0x24
 8009f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009f2a:	4ba2      	ldr	r3, [pc, #648]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f2e:	4aa1      	ldr	r2, [pc, #644]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009f30:	f043 0302 	orr.w	r3, r3, #2
 8009f34:	6313      	str	r3, [r2, #48]	; 0x30
 8009f36:	4b9f      	ldr	r3, [pc, #636]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f3a:	f003 0302 	and.w	r3, r3, #2
 8009f3e:	623b      	str	r3, [r7, #32]
 8009f40:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009f42:	4b9c      	ldr	r3, [pc, #624]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f46:	4a9b      	ldr	r2, [pc, #620]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009f48:	f043 0308 	orr.w	r3, r3, #8
 8009f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8009f4e:	4b99      	ldr	r3, [pc, #612]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f52:	f003 0308 	and.w	r3, r3, #8
 8009f56:	61fb      	str	r3, [r7, #28]
 8009f58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009f5a:	4b96      	ldr	r3, [pc, #600]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f5e:	4a95      	ldr	r2, [pc, #596]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009f60:	f043 0304 	orr.w	r3, r3, #4
 8009f64:	6313      	str	r3, [r2, #48]	; 0x30
 8009f66:	4b93      	ldr	r3, [pc, #588]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f6a:	f003 0304 	and.w	r3, r3, #4
 8009f6e:	61bb      	str	r3, [r7, #24]
 8009f70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f72:	4b90      	ldr	r3, [pc, #576]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f76:	4a8f      	ldr	r2, [pc, #572]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009f78:	f043 0301 	orr.w	r3, r3, #1
 8009f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8009f7e:	4b8d      	ldr	r3, [pc, #564]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f82:	f003 0301 	and.w	r3, r3, #1
 8009f86:	617b      	str	r3, [r7, #20]
 8009f88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009f8a:	4b8a      	ldr	r3, [pc, #552]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f8e:	4a89      	ldr	r2, [pc, #548]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009f90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009f94:	6313      	str	r3, [r2, #48]	; 0x30
 8009f96:	4b87      	ldr	r3, [pc, #540]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f9e:	613b      	str	r3, [r7, #16]
 8009fa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8009fa2:	4b84      	ldr	r3, [pc, #528]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fa6:	4a83      	ldr	r2, [pc, #524]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fac:	6313      	str	r3, [r2, #48]	; 0x30
 8009fae:	4b81      	ldr	r3, [pc, #516]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fb6:	60fb      	str	r3, [r7, #12]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8009fba:	4b7e      	ldr	r3, [pc, #504]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fbe:	4a7d      	ldr	r2, [pc, #500]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009fc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8009fc6:	4b7b      	ldr	r3, [pc, #492]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fce:	60bb      	str	r3, [r7, #8]
 8009fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009fd2:	4b78      	ldr	r3, [pc, #480]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd6:	4a77      	ldr	r2, [pc, #476]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009fd8:	f043 0320 	orr.w	r3, r3, #32
 8009fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8009fde:	4b75      	ldr	r3, [pc, #468]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe2:	f003 0320 	and.w	r3, r3, #32
 8009fe6:	607b      	str	r3, [r7, #4]
 8009fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009fea:	4b72      	ldr	r3, [pc, #456]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fee:	4a71      	ldr	r2, [pc, #452]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8009ff6:	4b6f      	ldr	r3, [pc, #444]	; (800a1b4 <MX_GPIO_Init+0x2d0>)
 8009ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ffe:	603b      	str	r3, [r7, #0]
 800a000:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800a002:	2201      	movs	r2, #1
 800a004:	2120      	movs	r1, #32
 800a006:	486c      	ldr	r0, [pc, #432]	; (800a1b8 <MX_GPIO_Init+0x2d4>)
 800a008:	f7f9 fa30 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800a00c:	2200      	movs	r2, #0
 800a00e:	210c      	movs	r1, #12
 800a010:	486a      	ldr	r0, [pc, #424]	; (800a1bc <MX_GPIO_Init+0x2d8>)
 800a012:	f7f9 fa2b 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800a016:	2201      	movs	r2, #1
 800a018:	2108      	movs	r1, #8
 800a01a:	4869      	ldr	r0, [pc, #420]	; (800a1c0 <MX_GPIO_Init+0x2dc>)
 800a01c:	f7f9 fa26 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800a020:	2201      	movs	r2, #1
 800a022:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a026:	4865      	ldr	r0, [pc, #404]	; (800a1bc <MX_GPIO_Init+0x2d8>)
 800a028:	f7f9 fa20 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800a02c:	2200      	movs	r2, #0
 800a02e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a032:	4864      	ldr	r0, [pc, #400]	; (800a1c4 <MX_GPIO_Init+0x2e0>)
 800a034:	f7f9 fa1a 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800a038:	2200      	movs	r2, #0
 800a03a:	21c8      	movs	r1, #200	; 0xc8
 800a03c:	4862      	ldr	r0, [pc, #392]	; (800a1c8 <MX_GPIO_Init+0x2e4>)
 800a03e:	f7f9 fa15 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800a042:	2308      	movs	r3, #8
 800a044:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a046:	2300      	movs	r3, #0
 800a048:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a04a:	2300      	movs	r3, #0
 800a04c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800a04e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a052:	4619      	mov	r1, r3
 800a054:	485d      	ldr	r0, [pc, #372]	; (800a1cc <MX_GPIO_Init+0x2e8>)
 800a056:	f7f9 f85f 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800a05a:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800a05e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a060:	2302      	movs	r3, #2
 800a062:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a064:	2300      	movs	r3, #0
 800a066:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a068:	2303      	movs	r3, #3
 800a06a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a06c:	230b      	movs	r3, #11
 800a06e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a070:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a074:	4619      	mov	r1, r3
 800a076:	4854      	ldr	r0, [pc, #336]	; (800a1c8 <MX_GPIO_Init+0x2e4>)
 800a078:	f7f9 f84e 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 800a07c:	f643 4323 	movw	r3, #15395	; 0x3c23
 800a080:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a082:	2302      	movs	r3, #2
 800a084:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a086:	2300      	movs	r3, #0
 800a088:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a08a:	2303      	movs	r3, #3
 800a08c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a08e:	230a      	movs	r3, #10
 800a090:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a092:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a096:	4619      	mov	r1, r3
 800a098:	484d      	ldr	r0, [pc, #308]	; (800a1d0 <MX_GPIO_Init+0x2ec>)
 800a09a:	f7f9 f83d 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800a09e:	2310      	movs	r3, #16
 800a0a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0a2:	2302      	movs	r3, #2
 800a0a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a0ae:	2302      	movs	r3, #2
 800a0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800a0b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	4845      	ldr	r0, [pc, #276]	; (800a1d0 <MX_GPIO_Init+0x2ec>)
 800a0ba:	f7f9 f82d 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800a0be:	2380      	movs	r3, #128	; 0x80
 800a0c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0c2:	2302      	movs	r3, #2
 800a0c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800a0ce:	2308      	movs	r3, #8
 800a0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800a0d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	4837      	ldr	r0, [pc, #220]	; (800a1b8 <MX_GPIO_Init+0x2d4>)
 800a0da:	f7f9 f81d 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SDA_D14_Pin;
 800a0de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a0e4:	2312      	movs	r3, #18
 800a0e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a0f0:	2304      	movs	r3, #4
 800a0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SDA_D14_GPIO_Port, &GPIO_InitStruct);
 800a0f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	4835      	ldr	r0, [pc, #212]	; (800a1d0 <MX_GPIO_Init+0x2ec>)
 800a0fc:	f7f9 f80c 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800a100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a104:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a106:	2300      	movs	r3, #0
 800a108:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a10a:	2300      	movs	r3, #0
 800a10c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a10e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a112:	4619      	mov	r1, r3
 800a114:	482f      	ldr	r0, [pc, #188]	; (800a1d4 <MX_GPIO_Init+0x2f0>)
 800a116:	f7f8 ffff 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800a11a:	2340      	movs	r3, #64	; 0x40
 800a11c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a11e:	4b2e      	ldr	r3, [pc, #184]	; (800a1d8 <MX_GPIO_Init+0x2f4>)
 800a120:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a122:	2300      	movs	r3, #0
 800a124:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800a126:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a12a:	4619      	mov	r1, r3
 800a12c:	4822      	ldr	r0, [pc, #136]	; (800a1b8 <MX_GPIO_Init+0x2d4>)
 800a12e:	f7f8 fff3 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800a132:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a136:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a138:	2302      	movs	r3, #2
 800a13a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a13c:	2300      	movs	r3, #0
 800a13e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a140:	2303      	movs	r3, #3
 800a142:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a144:	230a      	movs	r3, #10
 800a146:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a148:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a14c:	4619      	mov	r1, r3
 800a14e:	4823      	ldr	r0, [pc, #140]	; (800a1dc <MX_GPIO_Init+0x2f8>)
 800a150:	f7f8 ffe2 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800a154:	23f0      	movs	r3, #240	; 0xf0
 800a156:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a158:	2302      	movs	r3, #2
 800a15a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a15c:	2300      	movs	r3, #0
 800a15e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a160:	2300      	movs	r3, #0
 800a162:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800a164:	230a      	movs	r3, #10
 800a166:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800a168:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a16c:	4619      	mov	r1, r3
 800a16e:	4813      	ldr	r0, [pc, #76]	; (800a1bc <MX_GPIO_Init+0x2d8>)
 800a170:	f7f8 ffd2 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800a174:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a178:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a17a:	2302      	movs	r3, #2
 800a17c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a17e:	2300      	movs	r3, #0
 800a180:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a182:	2300      	movs	r3, #0
 800a184:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800a186:	230a      	movs	r3, #10
 800a188:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800a18a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a18e:	4619      	mov	r1, r3
 800a190:	480d      	ldr	r0, [pc, #52]	; (800a1c8 <MX_GPIO_Init+0x2e4>)
 800a192:	f7f8 ffc1 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800a196:	2320      	movs	r3, #32
 800a198:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a19a:	2301      	movs	r3, #1
 800a19c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800a1a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	4802      	ldr	r0, [pc, #8]	; (800a1b8 <MX_GPIO_Init+0x2d4>)
 800a1ae:	f7f8 ffb3 	bl	8003118 <HAL_GPIO_Init>
 800a1b2:	e015      	b.n	800a1e0 <MX_GPIO_Init+0x2fc>
 800a1b4:	40023800 	.word	0x40023800
 800a1b8:	40020c00 	.word	0x40020c00
 800a1bc:	40022000 	.word	0x40022000
 800a1c0:	40022800 	.word	0x40022800
 800a1c4:	40021c00 	.word	0x40021c00
 800a1c8:	40021800 	.word	0x40021800
 800a1cc:	40021000 	.word	0x40021000
 800a1d0:	40020400 	.word	0x40020400
 800a1d4:	40022400 	.word	0x40022400
 800a1d8:	10120000 	.word	0x10120000
 800a1dc:	40020000 	.word	0x40020000

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800a1e0:	f241 030c 	movw	r3, #4108	; 0x100c
 800a1e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800a1f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	48a6      	ldr	r0, [pc, #664]	; (800a494 <MX_GPIO_Init+0x5b0>)
 800a1fa:	f7f8 ff8d 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800a1fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a202:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a204:	2300      	movs	r3, #0
 800a206:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a208:	2300      	movs	r3, #0
 800a20a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800a20c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a210:	4619      	mov	r1, r3
 800a212:	48a1      	ldr	r0, [pc, #644]	; (800a498 <MX_GPIO_Init+0x5b4>)
 800a214:	f7f8 ff80 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800a218:	2308      	movs	r3, #8
 800a21a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a21c:	2301      	movs	r3, #1
 800a21e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a220:	2300      	movs	r3, #0
 800a222:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a224:	2300      	movs	r3, #0
 800a226:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800a228:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a22c:	4619      	mov	r1, r3
 800a22e:	489b      	ldr	r0, [pc, #620]	; (800a49c <MX_GPIO_Init+0x5b8>)
 800a230:	f7f8 ff72 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800a234:	2310      	movs	r3, #16
 800a236:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a238:	2300      	movs	r3, #0
 800a23a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a23c:	2300      	movs	r3, #0
 800a23e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800a240:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a244:	4619      	mov	r1, r3
 800a246:	4896      	ldr	r0, [pc, #600]	; (800a4a0 <MX_GPIO_Init+0x5bc>)
 800a248:	f7f8 ff66 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800a24c:	f248 0304 	movw	r3, #32772	; 0x8004
 800a250:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a252:	2300      	movs	r3, #0
 800a254:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a256:	2300      	movs	r3, #0
 800a258:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a25a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a25e:	4619      	mov	r1, r3
 800a260:	4890      	ldr	r0, [pc, #576]	; (800a4a4 <MX_GPIO_Init+0x5c0>)
 800a262:	f7f8 ff59 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800a266:	2302      	movs	r3, #2
 800a268:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a26a:	2302      	movs	r3, #2
 800a26c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a26e:	2300      	movs	r3, #0
 800a270:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a272:	2300      	movs	r3, #0
 800a274:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a276:	2305      	movs	r3, #5
 800a278:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800a27a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a27e:	4619      	mov	r1, r3
 800a280:	4884      	ldr	r0, [pc, #528]	; (800a494 <MX_GPIO_Init+0x5b0>)
 800a282:	f7f8 ff49 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800a286:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a28a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a28c:	2301      	movs	r3, #1
 800a28e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a290:	2300      	movs	r3, #0
 800a292:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a294:	2300      	movs	r3, #0
 800a296:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800a298:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a29c:	4619      	mov	r1, r3
 800a29e:	4881      	ldr	r0, [pc, #516]	; (800a4a4 <MX_GPIO_Init+0x5c0>)
 800a2a0:	f7f8 ff3a 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2a8:	2302      	movs	r3, #2
 800a2aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800a2b4:	2302      	movs	r3, #2
 800a2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800a2b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a2bc:	4619      	mov	r1, r3
 800a2be:	4875      	ldr	r0, [pc, #468]	; (800a494 <MX_GPIO_Init+0x5b0>)
 800a2c0:	f7f8 ff2a 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800a2c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2ca:	2302      	movs	r3, #2
 800a2cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800a2da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a2de:	4619      	mov	r1, r3
 800a2e0:	4871      	ldr	r0, [pc, #452]	; (800a4a8 <MX_GPIO_Init+0x5c4>)
 800a2e2:	f7f8 ff19 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800a2e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a2ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a2ec:	4b6f      	ldr	r3, [pc, #444]	; (800a4ac <MX_GPIO_Init+0x5c8>)
 800a2ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800a2f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	4866      	ldr	r0, [pc, #408]	; (800a494 <MX_GPIO_Init+0x5b0>)
 800a2fc:	f7f8 ff0c 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800a300:	23c0      	movs	r3, #192	; 0xc0
 800a302:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a304:	2302      	movs	r3, #2
 800a306:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a308:	2300      	movs	r3, #0
 800a30a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a30c:	2303      	movs	r3, #3
 800a30e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800a310:	2308      	movs	r3, #8
 800a312:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a314:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a318:	4619      	mov	r1, r3
 800a31a:	485f      	ldr	r0, [pc, #380]	; (800a498 <MX_GPIO_Init+0x5b4>)
 800a31c:	f7f8 fefc 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800a320:	2310      	movs	r3, #16
 800a322:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a324:	2302      	movs	r3, #2
 800a326:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a328:	2300      	movs	r3, #0
 800a32a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a32c:	2303      	movs	r3, #3
 800a32e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a330:	230a      	movs	r3, #10
 800a332:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800a334:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a338:	4619      	mov	r1, r3
 800a33a:	485a      	ldr	r0, [pc, #360]	; (800a4a4 <MX_GPIO_Init+0x5c0>)
 800a33c:	f7f8 feec 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800a340:	23c8      	movs	r3, #200	; 0xc8
 800a342:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a344:	2301      	movs	r3, #1
 800a346:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a348:	2300      	movs	r3, #0
 800a34a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a34c:	2300      	movs	r3, #0
 800a34e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a350:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a354:	4619      	mov	r1, r3
 800a356:	4856      	ldr	r0, [pc, #344]	; (800a4b0 <MX_GPIO_Init+0x5cc>)
 800a358:	f7f8 fede 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin 
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 800a35c:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800a360:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a362:	2303      	movs	r3, #3
 800a364:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a366:	2300      	movs	r3, #0
 800a368:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a36a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a36e:	4619      	mov	r1, r3
 800a370:	4850      	ldr	r0, [pc, #320]	; (800a4b4 <MX_GPIO_Init+0x5d0>)
 800a372:	f7f8 fed1 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800a376:	2305      	movs	r3, #5
 800a378:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a37a:	2302      	movs	r3, #2
 800a37c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a37e:	2300      	movs	r3, #0
 800a380:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a382:	2303      	movs	r3, #3
 800a384:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a386:	230a      	movs	r3, #10
 800a388:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a38a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a38e:	4619      	mov	r1, r3
 800a390:	4841      	ldr	r0, [pc, #260]	; (800a498 <MX_GPIO_Init+0x5b4>)
 800a392:	f7f8 fec1 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800a396:	2332      	movs	r3, #50	; 0x32
 800a398:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a39a:	2302      	movs	r3, #2
 800a39c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3a2:	2303      	movs	r3, #3
 800a3a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a3a6:	230b      	movs	r3, #11
 800a3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a3aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	4839      	ldr	r0, [pc, #228]	; (800a498 <MX_GPIO_Init+0x5b4>)
 800a3b2:	f7f8 feb1 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800a3b6:	2304      	movs	r3, #4
 800a3b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800a3c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	4839      	ldr	r0, [pc, #228]	; (800a4b0 <MX_GPIO_Init+0x5cc>)
 800a3ca:	f7f8 fea5 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800a3ce:	2386      	movs	r3, #134	; 0x86
 800a3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3d2:	2302      	movs	r3, #2
 800a3d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3da:	2303      	movs	r3, #3
 800a3dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a3de:	230b      	movs	r3, #11
 800a3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a3e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	482f      	ldr	r0, [pc, #188]	; (800a4a8 <MX_GPIO_Init+0x5c4>)
 800a3ea:	f7f8 fe95 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a3f2:	2303      	movs	r3, #3
 800a3f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800a3fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a3fe:	4619      	mov	r1, r3
 800a400:	4829      	ldr	r0, [pc, #164]	; (800a4a8 <MX_GPIO_Init+0x5c4>)
 800a402:	f7f8 fe89 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800a406:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800a40a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a40c:	2312      	movs	r3, #18
 800a40e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a410:	2301      	movs	r3, #1
 800a412:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a414:	2303      	movs	r3, #3
 800a416:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800a418:	2304      	movs	r3, #4
 800a41a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a41c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a420:	4619      	mov	r1, r3
 800a422:	4820      	ldr	r0, [pc, #128]	; (800a4a4 <MX_GPIO_Init+0x5c0>)
 800a424:	f7f8 fe78 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800a428:	2328      	movs	r3, #40	; 0x28
 800a42a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a42c:	2302      	movs	r3, #2
 800a42e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a430:	2300      	movs	r3, #0
 800a432:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a434:	2303      	movs	r3, #3
 800a436:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a438:	230a      	movs	r3, #10
 800a43a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a43c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a440:	4619      	mov	r1, r3
 800a442:	4819      	ldr	r0, [pc, #100]	; (800a4a8 <MX_GPIO_Init+0x5c4>)
 800a444:	f7f8 fe68 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800a448:	2340      	movs	r3, #64	; 0x40
 800a44a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a44c:	2302      	movs	r3, #2
 800a44e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a450:	2300      	movs	r3, #0
 800a452:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a454:	2300      	movs	r3, #0
 800a456:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800a458:	2309      	movs	r3, #9
 800a45a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800a45c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a460:	4619      	mov	r1, r3
 800a462:	4810      	ldr	r0, [pc, #64]	; (800a4a4 <MX_GPIO_Init+0x5c0>)
 800a464:	f7f8 fe58 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800a468:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800a46c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a46e:	2302      	movs	r3, #2
 800a470:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a472:	2300      	movs	r3, #0
 800a474:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a476:	2300      	movs	r3, #0
 800a478:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a47a:	2305      	movs	r3, #5
 800a47c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a47e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a482:	4619      	mov	r1, r3
 800a484:	480c      	ldr	r0, [pc, #48]	; (800a4b8 <MX_GPIO_Init+0x5d4>)
 800a486:	f7f8 fe47 	bl	8003118 <HAL_GPIO_Init>

}
 800a48a:	bf00      	nop
 800a48c:	3740      	adds	r7, #64	; 0x40
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	40022000 	.word	0x40022000
 800a498:	40020800 	.word	0x40020800
 800a49c:	40022800 	.word	0x40022800
 800a4a0:	40020c00 	.word	0x40020c00
 800a4a4:	40021c00 	.word	0x40021c00
 800a4a8:	40020000 	.word	0x40020000
 800a4ac:	10120000 	.word	0x10120000
 800a4b0:	40021800 	.word	0x40021800
 800a4b4:	40021400 	.word	0x40021400
 800a4b8:	40020400 	.word	0x40020400

0800a4bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a4c0:	bf00      	nop
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr
	...

0800a4cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800a4d2:	4b0f      	ldr	r3, [pc, #60]	; (800a510 <HAL_MspInit+0x44>)
 800a4d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d6:	4a0e      	ldr	r2, [pc, #56]	; (800a510 <HAL_MspInit+0x44>)
 800a4d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4dc:	6413      	str	r3, [r2, #64]	; 0x40
 800a4de:	4b0c      	ldr	r3, [pc, #48]	; (800a510 <HAL_MspInit+0x44>)
 800a4e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4e6:	607b      	str	r3, [r7, #4]
 800a4e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a4ea:	4b09      	ldr	r3, [pc, #36]	; (800a510 <HAL_MspInit+0x44>)
 800a4ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4ee:	4a08      	ldr	r2, [pc, #32]	; (800a510 <HAL_MspInit+0x44>)
 800a4f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a4f4:	6453      	str	r3, [r2, #68]	; 0x44
 800a4f6:	4b06      	ldr	r3, [pc, #24]	; (800a510 <HAL_MspInit+0x44>)
 800a4f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4fe:	603b      	str	r3, [r7, #0]
 800a500:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a502:	bf00      	nop
 800a504:	370c      	adds	r7, #12
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr
 800a50e:	bf00      	nop
 800a510:	40023800 	.word	0x40023800

0800a514 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b08e      	sub	sp, #56	; 0x38
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a51c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a520:	2200      	movs	r2, #0
 800a522:	601a      	str	r2, [r3, #0]
 800a524:	605a      	str	r2, [r3, #4]
 800a526:	609a      	str	r2, [r3, #8]
 800a528:	60da      	str	r2, [r3, #12]
 800a52a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a50      	ldr	r2, [pc, #320]	; (800a674 <HAL_DCMI_MspInit+0x160>)
 800a532:	4293      	cmp	r3, r2
 800a534:	f040 809a 	bne.w	800a66c <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800a538:	4b4f      	ldr	r3, [pc, #316]	; (800a678 <HAL_DCMI_MspInit+0x164>)
 800a53a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a53c:	4a4e      	ldr	r2, [pc, #312]	; (800a678 <HAL_DCMI_MspInit+0x164>)
 800a53e:	f043 0301 	orr.w	r3, r3, #1
 800a542:	6353      	str	r3, [r2, #52]	; 0x34
 800a544:	4b4c      	ldr	r3, [pc, #304]	; (800a678 <HAL_DCMI_MspInit+0x164>)
 800a546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a548:	f003 0301 	and.w	r3, r3, #1
 800a54c:	623b      	str	r3, [r7, #32]
 800a54e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a550:	4b49      	ldr	r3, [pc, #292]	; (800a678 <HAL_DCMI_MspInit+0x164>)
 800a552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a554:	4a48      	ldr	r2, [pc, #288]	; (800a678 <HAL_DCMI_MspInit+0x164>)
 800a556:	f043 0310 	orr.w	r3, r3, #16
 800a55a:	6313      	str	r3, [r2, #48]	; 0x30
 800a55c:	4b46      	ldr	r3, [pc, #280]	; (800a678 <HAL_DCMI_MspInit+0x164>)
 800a55e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a560:	f003 0310 	and.w	r3, r3, #16
 800a564:	61fb      	str	r3, [r7, #28]
 800a566:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a568:	4b43      	ldr	r3, [pc, #268]	; (800a678 <HAL_DCMI_MspInit+0x164>)
 800a56a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a56c:	4a42      	ldr	r2, [pc, #264]	; (800a678 <HAL_DCMI_MspInit+0x164>)
 800a56e:	f043 0308 	orr.w	r3, r3, #8
 800a572:	6313      	str	r3, [r2, #48]	; 0x30
 800a574:	4b40      	ldr	r3, [pc, #256]	; (800a678 <HAL_DCMI_MspInit+0x164>)
 800a576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a578:	f003 0308 	and.w	r3, r3, #8
 800a57c:	61bb      	str	r3, [r7, #24]
 800a57e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a580:	4b3d      	ldr	r3, [pc, #244]	; (800a678 <HAL_DCMI_MspInit+0x164>)
 800a582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a584:	4a3c      	ldr	r2, [pc, #240]	; (800a678 <HAL_DCMI_MspInit+0x164>)
 800a586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a58a:	6313      	str	r3, [r2, #48]	; 0x30
 800a58c:	4b3a      	ldr	r3, [pc, #232]	; (800a678 <HAL_DCMI_MspInit+0x164>)
 800a58e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a594:	617b      	str	r3, [r7, #20]
 800a596:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800a598:	4b37      	ldr	r3, [pc, #220]	; (800a678 <HAL_DCMI_MspInit+0x164>)
 800a59a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a59c:	4a36      	ldr	r2, [pc, #216]	; (800a678 <HAL_DCMI_MspInit+0x164>)
 800a59e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5a2:	6313      	str	r3, [r2, #48]	; 0x30
 800a5a4:	4b34      	ldr	r3, [pc, #208]	; (800a678 <HAL_DCMI_MspInit+0x164>)
 800a5a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5ac:	613b      	str	r3, [r7, #16]
 800a5ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5b0:	4b31      	ldr	r3, [pc, #196]	; (800a678 <HAL_DCMI_MspInit+0x164>)
 800a5b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5b4:	4a30      	ldr	r2, [pc, #192]	; (800a678 <HAL_DCMI_MspInit+0x164>)
 800a5b6:	f043 0301 	orr.w	r3, r3, #1
 800a5ba:	6313      	str	r3, [r2, #48]	; 0x30
 800a5bc:	4b2e      	ldr	r3, [pc, #184]	; (800a678 <HAL_DCMI_MspInit+0x164>)
 800a5be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5c0:	f003 0301 	and.w	r3, r3, #1
 800a5c4:	60fb      	str	r3, [r7, #12]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800a5c8:	2360      	movs	r3, #96	; 0x60
 800a5ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5cc:	2302      	movs	r3, #2
 800a5ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800a5d8:	230d      	movs	r3, #13
 800a5da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a5dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	4826      	ldr	r0, [pc, #152]	; (800a67c <HAL_DCMI_MspInit+0x168>)
 800a5e4:	f7f8 fd98 	bl	8003118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800a5e8:	2308      	movs	r3, #8
 800a5ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5ec:	2302      	movs	r3, #2
 800a5ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800a5f8:	230d      	movs	r3, #13
 800a5fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800a5fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a600:	4619      	mov	r1, r3
 800a602:	481f      	ldr	r0, [pc, #124]	; (800a680 <HAL_DCMI_MspInit+0x16c>)
 800a604:	f7f8 fd88 	bl	8003118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800a608:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a60c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a60e:	2302      	movs	r3, #2
 800a610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a612:	2300      	movs	r3, #0
 800a614:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a616:	2300      	movs	r3, #0
 800a618:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800a61a:	230d      	movs	r3, #13
 800a61c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800a61e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a622:	4619      	mov	r1, r3
 800a624:	4817      	ldr	r0, [pc, #92]	; (800a684 <HAL_DCMI_MspInit+0x170>)
 800a626:	f7f8 fd77 	bl	8003118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 800a62a:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800a62e:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a630:	2302      	movs	r3, #2
 800a632:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a634:	2300      	movs	r3, #0
 800a636:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a638:	2300      	movs	r3, #0
 800a63a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800a63c:	230d      	movs	r3, #13
 800a63e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a644:	4619      	mov	r1, r3
 800a646:	4810      	ldr	r0, [pc, #64]	; (800a688 <HAL_DCMI_MspInit+0x174>)
 800a648:	f7f8 fd66 	bl	8003118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800a64c:	2350      	movs	r3, #80	; 0x50
 800a64e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a650:	2302      	movs	r3, #2
 800a652:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a654:	2300      	movs	r3, #0
 800a656:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a658:	2300      	movs	r3, #0
 800a65a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800a65c:	230d      	movs	r3, #13
 800a65e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a664:	4619      	mov	r1, r3
 800a666:	4809      	ldr	r0, [pc, #36]	; (800a68c <HAL_DCMI_MspInit+0x178>)
 800a668:	f7f8 fd56 	bl	8003118 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800a66c:	bf00      	nop
 800a66e:	3738      	adds	r7, #56	; 0x38
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	50050000 	.word	0x50050000
 800a678:	40023800 	.word	0x40023800
 800a67c:	40021000 	.word	0x40021000
 800a680:	40020c00 	.word	0x40020c00
 800a684:	40021800 	.word	0x40021800
 800a688:	40021c00 	.word	0x40021c00
 800a68c:	40020000 	.word	0x40020000

0800a690 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b084      	sub	sp, #16
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a0d      	ldr	r2, [pc, #52]	; (800a6d4 <HAL_DMA2D_MspInit+0x44>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d113      	bne.n	800a6ca <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800a6a2:	4b0d      	ldr	r3, [pc, #52]	; (800a6d8 <HAL_DMA2D_MspInit+0x48>)
 800a6a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6a6:	4a0c      	ldr	r2, [pc, #48]	; (800a6d8 <HAL_DMA2D_MspInit+0x48>)
 800a6a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a6ac:	6313      	str	r3, [r2, #48]	; 0x30
 800a6ae:	4b0a      	ldr	r3, [pc, #40]	; (800a6d8 <HAL_DMA2D_MspInit+0x48>)
 800a6b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a6b6:	60fb      	str	r3, [r7, #12]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	2100      	movs	r1, #0
 800a6be:	205a      	movs	r0, #90	; 0x5a
 800a6c0:	f7f7 ff29 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800a6c4:	205a      	movs	r0, #90	; 0x5a
 800a6c6:	f7f7 ff42 	bl	800254e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800a6ca:	bf00      	nop
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	4002b000 	.word	0x4002b000
 800a6d8:	40023800 	.word	0x40023800

0800a6dc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b08e      	sub	sp, #56	; 0x38
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	601a      	str	r2, [r3, #0]
 800a6ec:	605a      	str	r2, [r3, #4]
 800a6ee:	609a      	str	r2, [r3, #8]
 800a6f0:	60da      	str	r2, [r3, #12]
 800a6f2:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a55      	ldr	r2, [pc, #340]	; (800a850 <HAL_LTDC_MspInit+0x174>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	f040 80a3 	bne.w	800a846 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800a700:	4b54      	ldr	r3, [pc, #336]	; (800a854 <HAL_LTDC_MspInit+0x178>)
 800a702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a704:	4a53      	ldr	r2, [pc, #332]	; (800a854 <HAL_LTDC_MspInit+0x178>)
 800a706:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a70a:	6453      	str	r3, [r2, #68]	; 0x44
 800a70c:	4b51      	ldr	r3, [pc, #324]	; (800a854 <HAL_LTDC_MspInit+0x178>)
 800a70e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a710:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a714:	623b      	str	r3, [r7, #32]
 800a716:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a718:	4b4e      	ldr	r3, [pc, #312]	; (800a854 <HAL_LTDC_MspInit+0x178>)
 800a71a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a71c:	4a4d      	ldr	r2, [pc, #308]	; (800a854 <HAL_LTDC_MspInit+0x178>)
 800a71e:	f043 0310 	orr.w	r3, r3, #16
 800a722:	6313      	str	r3, [r2, #48]	; 0x30
 800a724:	4b4b      	ldr	r3, [pc, #300]	; (800a854 <HAL_LTDC_MspInit+0x178>)
 800a726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a728:	f003 0310 	and.w	r3, r3, #16
 800a72c:	61fb      	str	r3, [r7, #28]
 800a72e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a730:	4b48      	ldr	r3, [pc, #288]	; (800a854 <HAL_LTDC_MspInit+0x178>)
 800a732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a734:	4a47      	ldr	r2, [pc, #284]	; (800a854 <HAL_LTDC_MspInit+0x178>)
 800a736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a73a:	6313      	str	r3, [r2, #48]	; 0x30
 800a73c:	4b45      	ldr	r3, [pc, #276]	; (800a854 <HAL_LTDC_MspInit+0x178>)
 800a73e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a744:	61bb      	str	r3, [r7, #24]
 800a746:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800a748:	4b42      	ldr	r3, [pc, #264]	; (800a854 <HAL_LTDC_MspInit+0x178>)
 800a74a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a74c:	4a41      	ldr	r2, [pc, #260]	; (800a854 <HAL_LTDC_MspInit+0x178>)
 800a74e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a752:	6313      	str	r3, [r2, #48]	; 0x30
 800a754:	4b3f      	ldr	r3, [pc, #252]	; (800a854 <HAL_LTDC_MspInit+0x178>)
 800a756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a75c:	617b      	str	r3, [r7, #20]
 800a75e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a760:	4b3c      	ldr	r3, [pc, #240]	; (800a854 <HAL_LTDC_MspInit+0x178>)
 800a762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a764:	4a3b      	ldr	r2, [pc, #236]	; (800a854 <HAL_LTDC_MspInit+0x178>)
 800a766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a76a:	6313      	str	r3, [r2, #48]	; 0x30
 800a76c:	4b39      	ldr	r3, [pc, #228]	; (800a854 <HAL_LTDC_MspInit+0x178>)
 800a76e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a774:	613b      	str	r3, [r7, #16]
 800a776:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800a778:	4b36      	ldr	r3, [pc, #216]	; (800a854 <HAL_LTDC_MspInit+0x178>)
 800a77a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a77c:	4a35      	ldr	r2, [pc, #212]	; (800a854 <HAL_LTDC_MspInit+0x178>)
 800a77e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a782:	6313      	str	r3, [r2, #48]	; 0x30
 800a784:	4b33      	ldr	r3, [pc, #204]	; (800a854 <HAL_LTDC_MspInit+0x178>)
 800a786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a78c:	60fb      	str	r3, [r7, #12]
 800a78e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800a790:	2310      	movs	r3, #16
 800a792:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a794:	2302      	movs	r3, #2
 800a796:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a798:	2300      	movs	r3, #0
 800a79a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a79c:	2300      	movs	r3, #0
 800a79e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800a7a0:	230e      	movs	r3, #14
 800a7a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800a7a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	482b      	ldr	r0, [pc, #172]	; (800a858 <HAL_LTDC_MspInit+0x17c>)
 800a7ac:	f7f8 fcb4 	bl	8003118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800a7b0:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800a7b4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7b6:	2302      	movs	r3, #2
 800a7b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800a7c2:	230e      	movs	r3, #14
 800a7c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800a7c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	4823      	ldr	r0, [pc, #140]	; (800a85c <HAL_LTDC_MspInit+0x180>)
 800a7ce:	f7f8 fca3 	bl	8003118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 800a7d2:	23f7      	movs	r3, #247	; 0xf7
 800a7d4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7d6:	2302      	movs	r3, #2
 800a7d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800a7e2:	230e      	movs	r3, #14
 800a7e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800a7e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	481c      	ldr	r0, [pc, #112]	; (800a860 <HAL_LTDC_MspInit+0x184>)
 800a7ee:	f7f8 fc93 	bl	8003118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800a7f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7f8:	2302      	movs	r3, #2
 800a7fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a800:	2300      	movs	r3, #0
 800a802:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800a804:	2309      	movs	r3, #9
 800a806:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800a808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a80c:	4619      	mov	r1, r3
 800a80e:	4815      	ldr	r0, [pc, #84]	; (800a864 <HAL_LTDC_MspInit+0x188>)
 800a810:	f7f8 fc82 	bl	8003118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800a814:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800a818:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a81a:	2302      	movs	r3, #2
 800a81c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a81e:	2300      	movs	r3, #0
 800a820:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a822:	2300      	movs	r3, #0
 800a824:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800a826:	230e      	movs	r3, #14
 800a828:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800a82a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a82e:	4619      	mov	r1, r3
 800a830:	480d      	ldr	r0, [pc, #52]	; (800a868 <HAL_LTDC_MspInit+0x18c>)
 800a832:	f7f8 fc71 	bl	8003118 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800a836:	2200      	movs	r2, #0
 800a838:	2100      	movs	r1, #0
 800a83a:	2058      	movs	r0, #88	; 0x58
 800a83c:	f7f7 fe6b 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800a840:	2058      	movs	r0, #88	; 0x58
 800a842:	f7f7 fe84 	bl	800254e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800a846:	bf00      	nop
 800a848:	3738      	adds	r7, #56	; 0x38
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	40016800 	.word	0x40016800
 800a854:	40023800 	.word	0x40023800
 800a858:	40021000 	.word	0x40021000
 800a85c:	40022400 	.word	0x40022400
 800a860:	40022800 	.word	0x40022800
 800a864:	40021800 	.word	0x40021800
 800a868:	40022000 	.word	0x40022000

0800a86c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b08c      	sub	sp, #48	; 0x30
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a874:	f107 031c 	add.w	r3, r7, #28
 800a878:	2200      	movs	r2, #0
 800a87a:	601a      	str	r2, [r3, #0]
 800a87c:	605a      	str	r2, [r3, #4]
 800a87e:	609a      	str	r2, [r3, #8]
 800a880:	60da      	str	r2, [r3, #12]
 800a882:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4a3b      	ldr	r2, [pc, #236]	; (800a978 <HAL_QSPI_MspInit+0x10c>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d170      	bne.n	800a970 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800a88e:	4b3b      	ldr	r3, [pc, #236]	; (800a97c <HAL_QSPI_MspInit+0x110>)
 800a890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a892:	4a3a      	ldr	r2, [pc, #232]	; (800a97c <HAL_QSPI_MspInit+0x110>)
 800a894:	f043 0302 	orr.w	r3, r3, #2
 800a898:	6393      	str	r3, [r2, #56]	; 0x38
 800a89a:	4b38      	ldr	r3, [pc, #224]	; (800a97c <HAL_QSPI_MspInit+0x110>)
 800a89c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a89e:	f003 0302 	and.w	r3, r3, #2
 800a8a2:	61bb      	str	r3, [r7, #24]
 800a8a4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a8a6:	4b35      	ldr	r3, [pc, #212]	; (800a97c <HAL_QSPI_MspInit+0x110>)
 800a8a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8aa:	4a34      	ldr	r2, [pc, #208]	; (800a97c <HAL_QSPI_MspInit+0x110>)
 800a8ac:	f043 0310 	orr.w	r3, r3, #16
 800a8b0:	6313      	str	r3, [r2, #48]	; 0x30
 800a8b2:	4b32      	ldr	r3, [pc, #200]	; (800a97c <HAL_QSPI_MspInit+0x110>)
 800a8b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8b6:	f003 0310 	and.w	r3, r3, #16
 800a8ba:	617b      	str	r3, [r7, #20]
 800a8bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a8be:	4b2f      	ldr	r3, [pc, #188]	; (800a97c <HAL_QSPI_MspInit+0x110>)
 800a8c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c2:	4a2e      	ldr	r2, [pc, #184]	; (800a97c <HAL_QSPI_MspInit+0x110>)
 800a8c4:	f043 0302 	orr.w	r3, r3, #2
 800a8c8:	6313      	str	r3, [r2, #48]	; 0x30
 800a8ca:	4b2c      	ldr	r3, [pc, #176]	; (800a97c <HAL_QSPI_MspInit+0x110>)
 800a8cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ce:	f003 0302 	and.w	r3, r3, #2
 800a8d2:	613b      	str	r3, [r7, #16]
 800a8d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a8d6:	4b29      	ldr	r3, [pc, #164]	; (800a97c <HAL_QSPI_MspInit+0x110>)
 800a8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8da:	4a28      	ldr	r2, [pc, #160]	; (800a97c <HAL_QSPI_MspInit+0x110>)
 800a8dc:	f043 0308 	orr.w	r3, r3, #8
 800a8e0:	6313      	str	r3, [r2, #48]	; 0x30
 800a8e2:	4b26      	ldr	r3, [pc, #152]	; (800a97c <HAL_QSPI_MspInit+0x110>)
 800a8e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8e6:	f003 0308 	and.w	r3, r3, #8
 800a8ea:	60fb      	str	r3, [r7, #12]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800a8ee:	2304      	movs	r3, #4
 800a8f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8f2:	2302      	movs	r3, #2
 800a8f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8fa:	2303      	movs	r3, #3
 800a8fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800a8fe:	2309      	movs	r3, #9
 800a900:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800a902:	f107 031c 	add.w	r3, r7, #28
 800a906:	4619      	mov	r1, r3
 800a908:	481d      	ldr	r0, [pc, #116]	; (800a980 <HAL_QSPI_MspInit+0x114>)
 800a90a:	f7f8 fc05 	bl	8003118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800a90e:	2340      	movs	r3, #64	; 0x40
 800a910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a912:	2302      	movs	r3, #2
 800a914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a916:	2300      	movs	r3, #0
 800a918:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a91a:	2303      	movs	r3, #3
 800a91c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800a91e:	230a      	movs	r3, #10
 800a920:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800a922:	f107 031c 	add.w	r3, r7, #28
 800a926:	4619      	mov	r1, r3
 800a928:	4816      	ldr	r0, [pc, #88]	; (800a984 <HAL_QSPI_MspInit+0x118>)
 800a92a:	f7f8 fbf5 	bl	8003118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a92e:	2304      	movs	r3, #4
 800a930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a932:	2302      	movs	r3, #2
 800a934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a936:	2300      	movs	r3, #0
 800a938:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a93a:	2303      	movs	r3, #3
 800a93c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800a93e:	2309      	movs	r3, #9
 800a940:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a942:	f107 031c 	add.w	r3, r7, #28
 800a946:	4619      	mov	r1, r3
 800a948:	480e      	ldr	r0, [pc, #56]	; (800a984 <HAL_QSPI_MspInit+0x118>)
 800a94a:	f7f8 fbe5 	bl	8003118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800a94e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a954:	2302      	movs	r3, #2
 800a956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a958:	2300      	movs	r3, #0
 800a95a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a95c:	2303      	movs	r3, #3
 800a95e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800a960:	2309      	movs	r3, #9
 800a962:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a964:	f107 031c 	add.w	r3, r7, #28
 800a968:	4619      	mov	r1, r3
 800a96a:	4807      	ldr	r0, [pc, #28]	; (800a988 <HAL_QSPI_MspInit+0x11c>)
 800a96c:	f7f8 fbd4 	bl	8003118 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800a970:	bf00      	nop
 800a972:	3730      	adds	r7, #48	; 0x30
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}
 800a978:	a0001000 	.word	0xa0001000
 800a97c:	40023800 	.word	0x40023800
 800a980:	40021000 	.word	0x40021000
 800a984:	40020400 	.word	0x40020400
 800a988:	40020c00 	.word	0x40020c00

0800a98c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4a07      	ldr	r2, [pc, #28]	; (800a9b8 <HAL_RTC_MspInit+0x2c>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d105      	bne.n	800a9aa <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800a99e:	4b07      	ldr	r3, [pc, #28]	; (800a9bc <HAL_RTC_MspInit+0x30>)
 800a9a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9a2:	4a06      	ldr	r2, [pc, #24]	; (800a9bc <HAL_RTC_MspInit+0x30>)
 800a9a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9a8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800a9aa:	bf00      	nop
 800a9ac:	370c      	adds	r7, #12
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr
 800a9b6:	bf00      	nop
 800a9b8:	40002800 	.word	0x40002800
 800a9bc:	40023800 	.word	0x40023800

0800a9c0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b08a      	sub	sp, #40	; 0x28
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9c8:	f107 0314 	add.w	r3, r7, #20
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	601a      	str	r2, [r3, #0]
 800a9d0:	605a      	str	r2, [r3, #4]
 800a9d2:	609a      	str	r2, [r3, #8]
 800a9d4:	60da      	str	r2, [r3, #12]
 800a9d6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4a25      	ldr	r2, [pc, #148]	; (800aa74 <HAL_SD_MspInit+0xb4>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d144      	bne.n	800aa6c <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800a9e2:	4b25      	ldr	r3, [pc, #148]	; (800aa78 <HAL_SD_MspInit+0xb8>)
 800a9e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9e6:	4a24      	ldr	r2, [pc, #144]	; (800aa78 <HAL_SD_MspInit+0xb8>)
 800a9e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a9ec:	6453      	str	r3, [r2, #68]	; 0x44
 800a9ee:	4b22      	ldr	r3, [pc, #136]	; (800aa78 <HAL_SD_MspInit+0xb8>)
 800a9f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9f6:	613b      	str	r3, [r7, #16]
 800a9f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a9fa:	4b1f      	ldr	r3, [pc, #124]	; (800aa78 <HAL_SD_MspInit+0xb8>)
 800a9fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9fe:	4a1e      	ldr	r2, [pc, #120]	; (800aa78 <HAL_SD_MspInit+0xb8>)
 800aa00:	f043 0304 	orr.w	r3, r3, #4
 800aa04:	6313      	str	r3, [r2, #48]	; 0x30
 800aa06:	4b1c      	ldr	r3, [pc, #112]	; (800aa78 <HAL_SD_MspInit+0xb8>)
 800aa08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa0a:	f003 0304 	and.w	r3, r3, #4
 800aa0e:	60fb      	str	r3, [r7, #12]
 800aa10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800aa12:	4b19      	ldr	r3, [pc, #100]	; (800aa78 <HAL_SD_MspInit+0xb8>)
 800aa14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa16:	4a18      	ldr	r2, [pc, #96]	; (800aa78 <HAL_SD_MspInit+0xb8>)
 800aa18:	f043 0308 	orr.w	r3, r3, #8
 800aa1c:	6313      	str	r3, [r2, #48]	; 0x30
 800aa1e:	4b16      	ldr	r3, [pc, #88]	; (800aa78 <HAL_SD_MspInit+0xb8>)
 800aa20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa22:	f003 0308 	and.w	r3, r3, #8
 800aa26:	60bb      	str	r3, [r7, #8]
 800aa28:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 800aa2a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800aa2e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa30:	2302      	movs	r3, #2
 800aa32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa34:	2300      	movs	r3, #0
 800aa36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa38:	2303      	movs	r3, #3
 800aa3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800aa3c:	230c      	movs	r3, #12
 800aa3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aa40:	f107 0314 	add.w	r3, r7, #20
 800aa44:	4619      	mov	r1, r3
 800aa46:	480d      	ldr	r0, [pc, #52]	; (800aa7c <HAL_SD_MspInit+0xbc>)
 800aa48:	f7f8 fb66 	bl	8003118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800aa4c:	2304      	movs	r3, #4
 800aa4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa50:	2302      	movs	r3, #2
 800aa52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa54:	2300      	movs	r3, #0
 800aa56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa58:	2303      	movs	r3, #3
 800aa5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800aa5c:	230c      	movs	r3, #12
 800aa5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800aa60:	f107 0314 	add.w	r3, r7, #20
 800aa64:	4619      	mov	r1, r3
 800aa66:	4806      	ldr	r0, [pc, #24]	; (800aa80 <HAL_SD_MspInit+0xc0>)
 800aa68:	f7f8 fb56 	bl	8003118 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800aa6c:	bf00      	nop
 800aa6e:	3728      	adds	r7, #40	; 0x28
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	40012c00 	.word	0x40012c00
 800aa78:	40023800 	.word	0x40023800
 800aa7c:	40020800 	.word	0x40020800
 800aa80:	40020c00 	.word	0x40020c00

0800aa84 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b085      	sub	sp, #20
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa94:	d10c      	bne.n	800aab0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800aa96:	4b12      	ldr	r3, [pc, #72]	; (800aae0 <HAL_TIM_PWM_MspInit+0x5c>)
 800aa98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa9a:	4a11      	ldr	r2, [pc, #68]	; (800aae0 <HAL_TIM_PWM_MspInit+0x5c>)
 800aa9c:	f043 0301 	orr.w	r3, r3, #1
 800aaa0:	6413      	str	r3, [r2, #64]	; 0x40
 800aaa2:	4b0f      	ldr	r3, [pc, #60]	; (800aae0 <HAL_TIM_PWM_MspInit+0x5c>)
 800aaa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaa6:	f003 0301 	and.w	r3, r3, #1
 800aaaa:	60fb      	str	r3, [r7, #12]
 800aaac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800aaae:	e010      	b.n	800aad2 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a0b      	ldr	r2, [pc, #44]	; (800aae4 <HAL_TIM_PWM_MspInit+0x60>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d10b      	bne.n	800aad2 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800aaba:	4b09      	ldr	r3, [pc, #36]	; (800aae0 <HAL_TIM_PWM_MspInit+0x5c>)
 800aabc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aabe:	4a08      	ldr	r2, [pc, #32]	; (800aae0 <HAL_TIM_PWM_MspInit+0x5c>)
 800aac0:	f043 0304 	orr.w	r3, r3, #4
 800aac4:	6413      	str	r3, [r2, #64]	; 0x40
 800aac6:	4b06      	ldr	r3, [pc, #24]	; (800aae0 <HAL_TIM_PWM_MspInit+0x5c>)
 800aac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaca:	f003 0304 	and.w	r3, r3, #4
 800aace:	60bb      	str	r3, [r7, #8]
 800aad0:	68bb      	ldr	r3, [r7, #8]
}
 800aad2:	bf00      	nop
 800aad4:	3714      	adds	r7, #20
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr
 800aade:	bf00      	nop
 800aae0:	40023800 	.word	0x40023800
 800aae4:	40000800 	.word	0x40000800

0800aae8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4a1a      	ldr	r2, [pc, #104]	; (800ab60 <HAL_TIM_Base_MspInit+0x78>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d114      	bne.n	800ab24 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800aafa:	4b1a      	ldr	r3, [pc, #104]	; (800ab64 <HAL_TIM_Base_MspInit+0x7c>)
 800aafc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aafe:	4a19      	ldr	r2, [pc, #100]	; (800ab64 <HAL_TIM_Base_MspInit+0x7c>)
 800ab00:	f043 0310 	orr.w	r3, r3, #16
 800ab04:	6413      	str	r3, [r2, #64]	; 0x40
 800ab06:	4b17      	ldr	r3, [pc, #92]	; (800ab64 <HAL_TIM_Base_MspInit+0x7c>)
 800ab08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab0a:	f003 0310 	and.w	r3, r3, #16
 800ab0e:	60fb      	str	r3, [r7, #12]
 800ab10:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800ab12:	2200      	movs	r2, #0
 800ab14:	2100      	movs	r1, #0
 800ab16:	2036      	movs	r0, #54	; 0x36
 800ab18:	f7f7 fcfd 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800ab1c:	2036      	movs	r0, #54	; 0x36
 800ab1e:	f7f7 fd16 	bl	800254e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800ab22:	e018      	b.n	800ab56 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4a0f      	ldr	r2, [pc, #60]	; (800ab68 <HAL_TIM_Base_MspInit+0x80>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d113      	bne.n	800ab56 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800ab2e:	4b0d      	ldr	r3, [pc, #52]	; (800ab64 <HAL_TIM_Base_MspInit+0x7c>)
 800ab30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab32:	4a0c      	ldr	r2, [pc, #48]	; (800ab64 <HAL_TIM_Base_MspInit+0x7c>)
 800ab34:	f043 0320 	orr.w	r3, r3, #32
 800ab38:	6413      	str	r3, [r2, #64]	; 0x40
 800ab3a:	4b0a      	ldr	r3, [pc, #40]	; (800ab64 <HAL_TIM_Base_MspInit+0x7c>)
 800ab3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab3e:	f003 0320 	and.w	r3, r3, #32
 800ab42:	60bb      	str	r3, [r7, #8]
 800ab44:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800ab46:	2200      	movs	r2, #0
 800ab48:	2100      	movs	r1, #0
 800ab4a:	2037      	movs	r0, #55	; 0x37
 800ab4c:	f7f7 fce3 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800ab50:	2037      	movs	r0, #55	; 0x37
 800ab52:	f7f7 fcfc 	bl	800254e <HAL_NVIC_EnableIRQ>
}
 800ab56:	bf00      	nop
 800ab58:	3710      	adds	r7, #16
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
 800ab5e:	bf00      	nop
 800ab60:	40001000 	.word	0x40001000
 800ab64:	40023800 	.word	0x40023800
 800ab68:	40001400 	.word	0x40001400

0800ab6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b08a      	sub	sp, #40	; 0x28
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab74:	f107 0314 	add.w	r3, r7, #20
 800ab78:	2200      	movs	r2, #0
 800ab7a:	601a      	str	r2, [r3, #0]
 800ab7c:	605a      	str	r2, [r3, #4]
 800ab7e:	609a      	str	r2, [r3, #8]
 800ab80:	60da      	str	r2, [r3, #12]
 800ab82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab8c:	d11d      	bne.n	800abca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab8e:	4b22      	ldr	r3, [pc, #136]	; (800ac18 <HAL_TIM_MspPostInit+0xac>)
 800ab90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab92:	4a21      	ldr	r2, [pc, #132]	; (800ac18 <HAL_TIM_MspPostInit+0xac>)
 800ab94:	f043 0301 	orr.w	r3, r3, #1
 800ab98:	6313      	str	r3, [r2, #48]	; 0x30
 800ab9a:	4b1f      	ldr	r3, [pc, #124]	; (800ac18 <HAL_TIM_MspPostInit+0xac>)
 800ab9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab9e:	f003 0301 	and.w	r3, r3, #1
 800aba2:	613b      	str	r3, [r7, #16]
 800aba4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800aba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800abaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abac:	2302      	movs	r3, #2
 800abae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abb0:	2300      	movs	r3, #0
 800abb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800abb4:	2300      	movs	r3, #0
 800abb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800abb8:	2301      	movs	r3, #1
 800abba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800abbc:	f107 0314 	add.w	r3, r7, #20
 800abc0:	4619      	mov	r1, r3
 800abc2:	4816      	ldr	r0, [pc, #88]	; (800ac1c <HAL_TIM_MspPostInit+0xb0>)
 800abc4:	f7f8 faa8 	bl	8003118 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800abc8:	e021      	b.n	800ac0e <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4a14      	ldr	r2, [pc, #80]	; (800ac20 <HAL_TIM_MspPostInit+0xb4>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d11c      	bne.n	800ac0e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800abd4:	4b10      	ldr	r3, [pc, #64]	; (800ac18 <HAL_TIM_MspPostInit+0xac>)
 800abd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abd8:	4a0f      	ldr	r2, [pc, #60]	; (800ac18 <HAL_TIM_MspPostInit+0xac>)
 800abda:	f043 0302 	orr.w	r3, r3, #2
 800abde:	6313      	str	r3, [r2, #48]	; 0x30
 800abe0:	4b0d      	ldr	r3, [pc, #52]	; (800ac18 <HAL_TIM_MspPostInit+0xac>)
 800abe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe4:	f003 0302 	and.w	r3, r3, #2
 800abe8:	60fb      	str	r3, [r7, #12]
 800abea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800abec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abf2:	2302      	movs	r3, #2
 800abf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abf6:	2300      	movs	r3, #0
 800abf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800abfa:	2300      	movs	r3, #0
 800abfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800abfe:	2302      	movs	r3, #2
 800ac00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ac02:	f107 0314 	add.w	r3, r7, #20
 800ac06:	4619      	mov	r1, r3
 800ac08:	4806      	ldr	r0, [pc, #24]	; (800ac24 <HAL_TIM_MspPostInit+0xb8>)
 800ac0a:	f7f8 fa85 	bl	8003118 <HAL_GPIO_Init>
}
 800ac0e:	bf00      	nop
 800ac10:	3728      	adds	r7, #40	; 0x28
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
 800ac16:	bf00      	nop
 800ac18:	40023800 	.word	0x40023800
 800ac1c:	40020000 	.word	0x40020000
 800ac20:	40000800 	.word	0x40000800
 800ac24:	40020400 	.word	0x40020400

0800ac28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b08a      	sub	sp, #40	; 0x28
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac30:	f107 0314 	add.w	r3, r7, #20
 800ac34:	2200      	movs	r2, #0
 800ac36:	601a      	str	r2, [r3, #0]
 800ac38:	605a      	str	r2, [r3, #4]
 800ac3a:	609a      	str	r2, [r3, #8]
 800ac3c:	60da      	str	r2, [r3, #12]
 800ac3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4a25      	ldr	r2, [pc, #148]	; (800acdc <HAL_UART_MspInit+0xb4>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d144      	bne.n	800acd4 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800ac4a:	4b25      	ldr	r3, [pc, #148]	; (800ace0 <HAL_UART_MspInit+0xb8>)
 800ac4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac4e:	4a24      	ldr	r2, [pc, #144]	; (800ace0 <HAL_UART_MspInit+0xb8>)
 800ac50:	f043 0310 	orr.w	r3, r3, #16
 800ac54:	6453      	str	r3, [r2, #68]	; 0x44
 800ac56:	4b22      	ldr	r3, [pc, #136]	; (800ace0 <HAL_UART_MspInit+0xb8>)
 800ac58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac5a:	f003 0310 	and.w	r3, r3, #16
 800ac5e:	613b      	str	r3, [r7, #16]
 800ac60:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ac62:	4b1f      	ldr	r3, [pc, #124]	; (800ace0 <HAL_UART_MspInit+0xb8>)
 800ac64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac66:	4a1e      	ldr	r2, [pc, #120]	; (800ace0 <HAL_UART_MspInit+0xb8>)
 800ac68:	f043 0302 	orr.w	r3, r3, #2
 800ac6c:	6313      	str	r3, [r2, #48]	; 0x30
 800ac6e:	4b1c      	ldr	r3, [pc, #112]	; (800ace0 <HAL_UART_MspInit+0xb8>)
 800ac70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac72:	f003 0302 	and.w	r3, r3, #2
 800ac76:	60fb      	str	r3, [r7, #12]
 800ac78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac7a:	4b19      	ldr	r3, [pc, #100]	; (800ace0 <HAL_UART_MspInit+0xb8>)
 800ac7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac7e:	4a18      	ldr	r2, [pc, #96]	; (800ace0 <HAL_UART_MspInit+0xb8>)
 800ac80:	f043 0301 	orr.w	r3, r3, #1
 800ac84:	6313      	str	r3, [r2, #48]	; 0x30
 800ac86:	4b16      	ldr	r3, [pc, #88]	; (800ace0 <HAL_UART_MspInit+0xb8>)
 800ac88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac8a:	f003 0301 	and.w	r3, r3, #1
 800ac8e:	60bb      	str	r3, [r7, #8]
 800ac90:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800ac92:	2380      	movs	r3, #128	; 0x80
 800ac94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac96:	2302      	movs	r3, #2
 800ac98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800aca2:	2307      	movs	r3, #7
 800aca4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800aca6:	f107 0314 	add.w	r3, r7, #20
 800acaa:	4619      	mov	r1, r3
 800acac:	480d      	ldr	r0, [pc, #52]	; (800ace4 <HAL_UART_MspInit+0xbc>)
 800acae:	f7f8 fa33 	bl	8003118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800acb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acb8:	2302      	movs	r3, #2
 800acba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acbc:	2300      	movs	r3, #0
 800acbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800acc0:	2300      	movs	r3, #0
 800acc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800acc4:	2307      	movs	r3, #7
 800acc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800acc8:	f107 0314 	add.w	r3, r7, #20
 800accc:	4619      	mov	r1, r3
 800acce:	4806      	ldr	r0, [pc, #24]	; (800ace8 <HAL_UART_MspInit+0xc0>)
 800acd0:	f7f8 fa22 	bl	8003118 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800acd4:	bf00      	nop
 800acd6:	3728      	adds	r7, #40	; 0x28
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	40011000 	.word	0x40011000
 800ace0:	40023800 	.word	0x40023800
 800ace4:	40020400 	.word	0x40020400
 800ace8:	40020000 	.word	0x40020000

0800acec <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800acec:	b580      	push	{r7, lr}
 800acee:	b086      	sub	sp, #24
 800acf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800acf2:	1d3b      	adds	r3, r7, #4
 800acf4:	2200      	movs	r2, #0
 800acf6:	601a      	str	r2, [r3, #0]
 800acf8:	605a      	str	r2, [r3, #4]
 800acfa:	609a      	str	r2, [r3, #8]
 800acfc:	60da      	str	r2, [r3, #12]
 800acfe:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800ad00:	4b3a      	ldr	r3, [pc, #232]	; (800adec <HAL_FMC_MspInit+0x100>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d16d      	bne.n	800ade4 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800ad08:	4b38      	ldr	r3, [pc, #224]	; (800adec <HAL_FMC_MspInit+0x100>)
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800ad0e:	4b38      	ldr	r3, [pc, #224]	; (800adf0 <HAL_FMC_MspInit+0x104>)
 800ad10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad12:	4a37      	ldr	r2, [pc, #220]	; (800adf0 <HAL_FMC_MspInit+0x104>)
 800ad14:	f043 0301 	orr.w	r3, r3, #1
 800ad18:	6393      	str	r3, [r2, #56]	; 0x38
 800ad1a:	4b35      	ldr	r3, [pc, #212]	; (800adf0 <HAL_FMC_MspInit+0x104>)
 800ad1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad1e:	f003 0301 	and.w	r3, r3, #1
 800ad22:	603b      	str	r3, [r7, #0]
 800ad24:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800ad26:	f64f 7383 	movw	r3, #65411	; 0xff83
 800ad2a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad2c:	2302      	movs	r3, #2
 800ad2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad30:	2300      	movs	r3, #0
 800ad32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad34:	2303      	movs	r3, #3
 800ad36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ad38:	230c      	movs	r3, #12
 800ad3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ad3c:	1d3b      	adds	r3, r7, #4
 800ad3e:	4619      	mov	r1, r3
 800ad40:	482c      	ldr	r0, [pc, #176]	; (800adf4 <HAL_FMC_MspInit+0x108>)
 800ad42:	f7f8 f9e9 	bl	8003118 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800ad46:	f248 1333 	movw	r3, #33075	; 0x8133
 800ad4a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad4c:	2302      	movs	r3, #2
 800ad4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad50:	2300      	movs	r3, #0
 800ad52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad54:	2303      	movs	r3, #3
 800ad56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ad58:	230c      	movs	r3, #12
 800ad5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ad5c:	1d3b      	adds	r3, r7, #4
 800ad5e:	4619      	mov	r1, r3
 800ad60:	4825      	ldr	r0, [pc, #148]	; (800adf8 <HAL_FMC_MspInit+0x10c>)
 800ad62:	f7f8 f9d9 	bl	8003118 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800ad66:	f24c 7303 	movw	r3, #50947	; 0xc703
 800ad6a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad6c:	2302      	movs	r3, #2
 800ad6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad70:	2300      	movs	r3, #0
 800ad72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad74:	2303      	movs	r3, #3
 800ad76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ad78:	230c      	movs	r3, #12
 800ad7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ad7c:	1d3b      	adds	r3, r7, #4
 800ad7e:	4619      	mov	r1, r3
 800ad80:	481e      	ldr	r0, [pc, #120]	; (800adfc <HAL_FMC_MspInit+0x110>)
 800ad82:	f7f8 f9c9 	bl	8003118 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800ad86:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800ad8a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad8c:	2302      	movs	r3, #2
 800ad8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad90:	2300      	movs	r3, #0
 800ad92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad94:	2303      	movs	r3, #3
 800ad96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ad98:	230c      	movs	r3, #12
 800ad9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800ad9c:	1d3b      	adds	r3, r7, #4
 800ad9e:	4619      	mov	r1, r3
 800ada0:	4817      	ldr	r0, [pc, #92]	; (800ae00 <HAL_FMC_MspInit+0x114>)
 800ada2:	f7f8 f9b9 	bl	8003118 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800ada6:	2328      	movs	r3, #40	; 0x28
 800ada8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adaa:	2302      	movs	r3, #2
 800adac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adae:	2300      	movs	r3, #0
 800adb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800adb2:	2303      	movs	r3, #3
 800adb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800adb6:	230c      	movs	r3, #12
 800adb8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800adba:	1d3b      	adds	r3, r7, #4
 800adbc:	4619      	mov	r1, r3
 800adbe:	4811      	ldr	r0, [pc, #68]	; (800ae04 <HAL_FMC_MspInit+0x118>)
 800adc0:	f7f8 f9aa 	bl	8003118 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800adc4:	2308      	movs	r3, #8
 800adc6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adc8:	2302      	movs	r3, #2
 800adca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adcc:	2300      	movs	r3, #0
 800adce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800add0:	2303      	movs	r3, #3
 800add2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800add4:	230c      	movs	r3, #12
 800add6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800add8:	1d3b      	adds	r3, r7, #4
 800adda:	4619      	mov	r1, r3
 800addc:	480a      	ldr	r0, [pc, #40]	; (800ae08 <HAL_FMC_MspInit+0x11c>)
 800adde:	f7f8 f99b 	bl	8003118 <HAL_GPIO_Init>
 800ade2:	e000      	b.n	800ade6 <HAL_FMC_MspInit+0xfa>
    return;
 800ade4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800ade6:	3718      	adds	r7, #24
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	20000544 	.word	0x20000544
 800adf0:	40023800 	.word	0x40023800
 800adf4:	40021000 	.word	0x40021000
 800adf8:	40021800 	.word	0x40021800
 800adfc:	40020c00 	.word	0x40020c00
 800ae00:	40021400 	.word	0x40021400
 800ae04:	40021c00 	.word	0x40021c00
 800ae08:	40020800 	.word	0x40020800

0800ae0c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b082      	sub	sp, #8
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800ae14:	f7ff ff6a 	bl	800acec <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800ae18:	bf00      	nop
 800ae1a:	3708      	adds	r7, #8
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <SysTick_Handler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SysTick_Handler(void)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800ae24:	f7f7 fa5a 	bl	80022dc <HAL_IncTick>
}
 800ae28:	bf00      	nop
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ae30:	bf00      	nop
 800ae32:	46bd      	mov	sp, r7
 800ae34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae38:	4770      	bx	lr

0800ae3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ae3a:	b480      	push	{r7}
 800ae3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ae3e:	e7fe      	b.n	800ae3e <HardFault_Handler+0x4>

0800ae40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ae40:	b480      	push	{r7}
 800ae42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ae44:	e7fe      	b.n	800ae44 <MemManage_Handler+0x4>

0800ae46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ae46:	b480      	push	{r7}
 800ae48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ae4a:	e7fe      	b.n	800ae4a <BusFault_Handler+0x4>

0800ae4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ae50:	e7fe      	b.n	800ae50 <UsageFault_Handler+0x4>

0800ae52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ae52:	b480      	push	{r7}
 800ae54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ae56:	bf00      	nop
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ae60:	b480      	push	{r7}
 800ae62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ae64:	bf00      	nop
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr

0800ae6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ae6e:	b480      	push	{r7}
 800ae70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ae72:	bf00      	nop
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr

0800ae7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800ae80:	4802      	ldr	r0, [pc, #8]	; (800ae8c <TIM6_DAC_IRQHandler+0x10>)
 800ae82:	f7fc f81b 	bl	8006ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800ae86:	bf00      	nop
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	20000898 	.word	0x20000898

0800ae90 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800ae94:	4802      	ldr	r0, [pc, #8]	; (800aea0 <TIM7_IRQHandler+0x10>)
 800ae96:	f7fc f811 	bl	8006ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800ae9a:	bf00      	nop
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	20000994 	.word	0x20000994

0800aea4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800aea8:	4802      	ldr	r0, [pc, #8]	; (800aeb4 <LTDC_IRQHandler+0x10>)
 800aeaa:	f7f9 f8f5 	bl	8004098 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800aeae:	bf00      	nop
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	200006f8 	.word	0x200006f8

0800aeb8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800aebc:	4802      	ldr	r0, [pc, #8]	; (800aec8 <DMA2D_IRQHandler+0x10>)
 800aebe:	f7f7 feed 	bl	8002c9c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800aec2:	bf00      	nop
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	200008dc 	.word	0x200008dc

0800aecc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800aecc:	b480      	push	{r7}
 800aece:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800aed0:	4b15      	ldr	r3, [pc, #84]	; (800af28 <SystemInit+0x5c>)
 800aed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aed6:	4a14      	ldr	r2, [pc, #80]	; (800af28 <SystemInit+0x5c>)
 800aed8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aedc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800aee0:	4b12      	ldr	r3, [pc, #72]	; (800af2c <SystemInit+0x60>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a11      	ldr	r2, [pc, #68]	; (800af2c <SystemInit+0x60>)
 800aee6:	f043 0301 	orr.w	r3, r3, #1
 800aeea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800aeec:	4b0f      	ldr	r3, [pc, #60]	; (800af2c <SystemInit+0x60>)
 800aeee:	2200      	movs	r2, #0
 800aef0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800aef2:	4b0e      	ldr	r3, [pc, #56]	; (800af2c <SystemInit+0x60>)
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	490d      	ldr	r1, [pc, #52]	; (800af2c <SystemInit+0x60>)
 800aef8:	4b0d      	ldr	r3, [pc, #52]	; (800af30 <SystemInit+0x64>)
 800aefa:	4013      	ands	r3, r2
 800aefc:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800aefe:	4b0b      	ldr	r3, [pc, #44]	; (800af2c <SystemInit+0x60>)
 800af00:	4a0c      	ldr	r2, [pc, #48]	; (800af34 <SystemInit+0x68>)
 800af02:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800af04:	4b09      	ldr	r3, [pc, #36]	; (800af2c <SystemInit+0x60>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4a08      	ldr	r2, [pc, #32]	; (800af2c <SystemInit+0x60>)
 800af0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af0e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800af10:	4b06      	ldr	r3, [pc, #24]	; (800af2c <SystemInit+0x60>)
 800af12:	2200      	movs	r2, #0
 800af14:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800af16:	4b04      	ldr	r3, [pc, #16]	; (800af28 <SystemInit+0x5c>)
 800af18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800af1c:	609a      	str	r2, [r3, #8]
#endif
}
 800af1e:	bf00      	nop
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr
 800af28:	e000ed00 	.word	0xe000ed00
 800af2c:	40023800 	.word	0x40023800
 800af30:	fef6ffff 	.word	0xfef6ffff
 800af34:	24003010 	.word	0x24003010

0800af38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800af38:	f8df d034 	ldr.w	sp, [pc, #52]	; 800af70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800af3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800af3e:	e003      	b.n	800af48 <LoopCopyDataInit>

0800af40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800af40:	4b0c      	ldr	r3, [pc, #48]	; (800af74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800af42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800af44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800af46:	3104      	adds	r1, #4

0800af48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800af48:	480b      	ldr	r0, [pc, #44]	; (800af78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800af4a:	4b0c      	ldr	r3, [pc, #48]	; (800af7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800af4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800af4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800af50:	d3f6      	bcc.n	800af40 <CopyDataInit>
  ldr  r2, =_sbss
 800af52:	4a0b      	ldr	r2, [pc, #44]	; (800af80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800af54:	e002      	b.n	800af5c <LoopFillZerobss>

0800af56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800af56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800af58:	f842 3b04 	str.w	r3, [r2], #4

0800af5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800af5c:	4b09      	ldr	r3, [pc, #36]	; (800af84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800af5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800af60:	d3f9      	bcc.n	800af56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800af62:	f7ff ffb3 	bl	800aecc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800af66:	f000 f811 	bl	800af8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800af6a:	f7fe fb53 	bl	8009614 <main>
  bx  lr    
 800af6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800af70:	2004ffff 	.word	0x2004ffff
  ldr  r3, =_sidata
 800af74:	0800d01c 	.word	0x0800d01c
  ldr  r0, =_sdata
 800af78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800af7c:	20000308 	.word	0x20000308
  ldr  r2, =_sbss
 800af80:	20000308 	.word	0x20000308
  ldr  r3, = _ebss
 800af84:	20000a20 	.word	0x20000a20

0800af88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800af88:	e7fe      	b.n	800af88 <ADC_IRQHandler>
	...

0800af8c <__libc_init_array>:
 800af8c:	b570      	push	{r4, r5, r6, lr}
 800af8e:	4e0d      	ldr	r6, [pc, #52]	; (800afc4 <__libc_init_array+0x38>)
 800af90:	4c0d      	ldr	r4, [pc, #52]	; (800afc8 <__libc_init_array+0x3c>)
 800af92:	1ba4      	subs	r4, r4, r6
 800af94:	10a4      	asrs	r4, r4, #2
 800af96:	2500      	movs	r5, #0
 800af98:	42a5      	cmp	r5, r4
 800af9a:	d109      	bne.n	800afb0 <__libc_init_array+0x24>
 800af9c:	4e0b      	ldr	r6, [pc, #44]	; (800afcc <__libc_init_array+0x40>)
 800af9e:	4c0c      	ldr	r4, [pc, #48]	; (800afd0 <__libc_init_array+0x44>)
 800afa0:	f000 f820 	bl	800afe4 <_init>
 800afa4:	1ba4      	subs	r4, r4, r6
 800afa6:	10a4      	asrs	r4, r4, #2
 800afa8:	2500      	movs	r5, #0
 800afaa:	42a5      	cmp	r5, r4
 800afac:	d105      	bne.n	800afba <__libc_init_array+0x2e>
 800afae:	bd70      	pop	{r4, r5, r6, pc}
 800afb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800afb4:	4798      	blx	r3
 800afb6:	3501      	adds	r5, #1
 800afb8:	e7ee      	b.n	800af98 <__libc_init_array+0xc>
 800afba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800afbe:	4798      	blx	r3
 800afc0:	3501      	adds	r5, #1
 800afc2:	e7f2      	b.n	800afaa <__libc_init_array+0x1e>
 800afc4:	0800d014 	.word	0x0800d014
 800afc8:	0800d014 	.word	0x0800d014
 800afcc:	0800d014 	.word	0x0800d014
 800afd0:	0800d018 	.word	0x0800d018

0800afd4 <memset>:
 800afd4:	4402      	add	r2, r0
 800afd6:	4603      	mov	r3, r0
 800afd8:	4293      	cmp	r3, r2
 800afda:	d100      	bne.n	800afde <memset+0xa>
 800afdc:	4770      	bx	lr
 800afde:	f803 1b01 	strb.w	r1, [r3], #1
 800afe2:	e7f9      	b.n	800afd8 <memset+0x4>

0800afe4 <_init>:
 800afe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afe6:	bf00      	nop
 800afe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afea:	bc08      	pop	{r3}
 800afec:	469e      	mov	lr, r3
 800afee:	4770      	bx	lr

0800aff0 <_fini>:
 800aff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff2:	bf00      	nop
 800aff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aff6:	bc08      	pop	{r3}
 800aff8:	469e      	mov	lr, r3
 800affa:	4770      	bx	lr
