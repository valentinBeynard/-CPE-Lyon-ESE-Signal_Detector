
Signal_Detector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f88  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a58  08007150  08007150  00017150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ba8  08009ba8  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08009ba8  08009ba8  00019ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bb0  08009bb0  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bb0  08009bb0  00019bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bb4  08009bb4  00019bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08009bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00040d34  200000a8  08009c60  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20040ddc  08009c60  00020ddc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031810  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005ee6  00000000  00000000  000518e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001ed2f  00000000  00000000  000577ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001c78  00000000  00000000  00076500  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00004028  00000000  00000000  00078178  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002b91b  00000000  00000000  0007c1a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001f702  00000000  00000000  000a7abb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0010e2f5  00000000  00000000  000c71bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001d54b2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006748  00000000  00000000  001d5530  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000a8 	.word	0x200000a8
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007138 	.word	0x08007138

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000ac 	.word	0x200000ac
 8000204:	08007138 	.word	0x08007138

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 800050c:	2000      	movs	r0, #0
 800050e:	4770      	bx	lr

08000510 <ft5336_Init>:
{
 8000510:	b510      	push	{r4, lr}
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 8000512:	4c06      	ldr	r4, [pc, #24]	; (800052c <ft5336_Init+0x1c>)
  TS_IO_Delay(200);
 8000514:	20c8      	movs	r0, #200	; 0xc8
 8000516:	f000 fa35 	bl	8000984 <TS_IO_Delay>
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800051a:	7823      	ldrb	r3, [r4, #0]
 800051c:	b103      	cbz	r3, 8000520 <ft5336_Init+0x10>
}
 800051e:	bd10      	pop	{r4, pc}
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000520:	f000 fa06 	bl	8000930 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000524:	2301      	movs	r3, #1
 8000526:	7023      	strb	r3, [r4, #0]
}
 8000528:	bd10      	pop	{r4, pc}
 800052a:	bf00      	nop
 800052c:	200000c8 	.word	0x200000c8

08000530 <ft5336_ReadID>:
{
 8000530:	b530      	push	{r4, r5, lr}
  return(ft5336_handle.i2cInitialized);
 8000532:	4c11      	ldr	r4, [pc, #68]	; (8000578 <ft5336_ReadID+0x48>)
{
 8000534:	b083      	sub	sp, #12
  volatile uint8_t ucReadId = 0;
 8000536:	2200      	movs	r2, #0
{
 8000538:	4605      	mov	r5, r0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800053a:	7823      	ldrb	r3, [r4, #0]
  volatile uint8_t ucReadId = 0;
 800053c:	f88d 2007 	strb.w	r2, [sp, #7]
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000540:	b1ab      	cbz	r3, 800056e <ft5336_ReadID+0x3e>
 8000542:	b2ed      	uxtb	r5, r5
{
 8000544:	2400      	movs	r4, #0
 8000546:	e001      	b.n	800054c <ft5336_ReadID+0x1c>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000548:	2b51      	cmp	r3, #81	; 0x51
 800054a:	d00c      	beq.n	8000566 <ft5336_ReadID+0x36>
 800054c:	3401      	adds	r4, #1
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800054e:	21a8      	movs	r1, #168	; 0xa8
 8000550:	4628      	mov	r0, r5
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000552:	b2e4      	uxtb	r4, r4
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000554:	f000 fa00 	bl	8000958 <TS_IO_Read>
 8000558:	f88d 0007 	strb.w	r0, [sp, #7]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800055c:	2c02      	cmp	r4, #2
    if(ucReadId == FT5336_ID_VALUE)
 800055e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000562:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000564:	d9f0      	bls.n	8000548 <ft5336_ReadID+0x18>
  return (ucReadId);
 8000566:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800056a:	b003      	add	sp, #12
 800056c:	bd30      	pop	{r4, r5, pc}
    TS_IO_Init();
 800056e:	f000 f9df 	bl	8000930 <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000572:	2301      	movs	r3, #1
 8000574:	7023      	strb	r3, [r4, #0]
 8000576:	e7e4      	b.n	8000542 <ft5336_ReadID+0x12>
 8000578:	200000c8 	.word	0x200000c8

0800057c <ft5336_TS_DetectTouch>:
{
 800057c:	b510      	push	{r4, lr}
  volatile uint8_t nbTouch = 0;
 800057e:	2400      	movs	r4, #0
{
 8000580:	b082      	sub	sp, #8
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8000582:	b2c0      	uxtb	r0, r0
 8000584:	2102      	movs	r1, #2
  volatile uint8_t nbTouch = 0;
 8000586:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800058a:	f000 f9e5 	bl	8000958 <TS_IO_Read>
 800058e:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 8000592:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000596:	f003 030f 	and.w	r3, r3, #15
 800059a:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800059e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80005a2:	2b05      	cmp	r3, #5
 80005a4:	d901      	bls.n	80005aa <ft5336_TS_DetectTouch+0x2e>
    nbTouch = 0;
 80005a6:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 80005aa:	f89d 1007 	ldrb.w	r1, [sp, #7]
  ft5336_handle.currActiveTouchIdx = 0;
 80005ae:	2200      	movs	r2, #0
  ft5336_handle.currActiveTouchNb = nbTouch;
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <ft5336_TS_DetectTouch+0x44>)
  return(nbTouch);
 80005b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 80005b6:	7059      	strb	r1, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 80005b8:	709a      	strb	r2, [r3, #2]
}
 80005ba:	b002      	add	sp, #8
 80005bc:	bd10      	pop	{r4, pc}
 80005be:	bf00      	nop
 80005c0:	200000c8 	.word	0x200000c8

080005c4 <ft5336_TS_GetXY>:
{
 80005c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80005c8:	4e2c      	ldr	r6, [pc, #176]	; (800067c <ft5336_TS_GetXY+0xb8>)
{
 80005ca:	b083      	sub	sp, #12
  volatile uint8_t ucReadData = 0;
 80005cc:	f04f 0800 	mov.w	r8, #0
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80005d0:	78b3      	ldrb	r3, [r6, #2]
 80005d2:	7874      	ldrb	r4, [r6, #1]
  volatile uint8_t ucReadData = 0;
 80005d4:	f88d 8007 	strb.w	r8, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80005d8:	429c      	cmp	r4, r3
 80005da:	d948      	bls.n	800066e <ft5336_TS_GetXY+0xaa>
 80005dc:	2b09      	cmp	r3, #9
 80005de:	d849      	bhi.n	8000674 <ft5336_TS_GetXY+0xb0>
 80005e0:	4d27      	ldr	r5, [pc, #156]	; (8000680 <ft5336_TS_GetXY+0xbc>)
 80005e2:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 8000690 <ft5336_TS_GetXY+0xcc>
 80005e6:	4f27      	ldr	r7, [pc, #156]	; (8000684 <ft5336_TS_GetXY+0xc0>)
 80005e8:	4c27      	ldr	r4, [pc, #156]	; (8000688 <ft5336_TS_GetXY+0xc4>)
 80005ea:	5ced      	ldrb	r5, [r5, r3]
 80005ec:	f81c b003 	ldrb.w	fp, [ip, r3]
 80005f0:	f817 a003 	ldrb.w	sl, [r7, r3]
 80005f4:	f814 8003 	ldrb.w	r8, [r4, r3]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80005f8:	b2c4      	uxtb	r4, r0
 80005fa:	4689      	mov	r9, r1
 80005fc:	4629      	mov	r1, r5
 80005fe:	4617      	mov	r7, r2
 8000600:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000602:	4d22      	ldr	r5, [pc, #136]	; (800068c <ft5336_TS_GetXY+0xc8>)
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000604:	f000 f9a8 	bl	8000958 <TS_IO_Read>
 8000608:	4603      	mov	r3, r0
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800060a:	4659      	mov	r1, fp
 800060c:	4620      	mov	r0, r4
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800060e:	f88d 3007 	strb.w	r3, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000612:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000616:	802b      	strh	r3, [r5, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000618:	f000 f99e 	bl	8000958 <TS_IO_Read>
 800061c:	4603      	mov	r3, r0
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800061e:	882a      	ldrh	r2, [r5, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000620:	4651      	mov	r1, sl
 8000622:	4620      	mov	r0, r4
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000624:	f88d 3007 	strb.w	r3, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000628:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800062c:	021b      	lsls	r3, r3, #8
 800062e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000632:	4313      	orrs	r3, r2
    *X = coord;
 8000634:	f8a9 3000 	strh.w	r3, [r9]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000638:	802b      	strh	r3, [r5, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800063a:	f000 f98d 	bl	8000958 <TS_IO_Read>
 800063e:	4603      	mov	r3, r0
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000640:	4641      	mov	r1, r8
 8000642:	4620      	mov	r0, r4
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000644:	f88d 3007 	strb.w	r3, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000648:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800064c:	802b      	strh	r3, [r5, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800064e:	f000 f983 	bl	8000958 <TS_IO_Read>
 8000652:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000656:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800065a:	8829      	ldrh	r1, [r5, #0]
 800065c:	021b      	lsls	r3, r3, #8
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800065e:	78b2      	ldrb	r2, [r6, #2]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000660:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000664:	3201      	adds	r2, #1
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000666:	430b      	orrs	r3, r1
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000668:	70b2      	strb	r2, [r6, #2]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800066a:	802b      	strh	r3, [r5, #0]
    *Y = coord;
 800066c:	803b      	strh	r3, [r7, #0]
}
 800066e:	b003      	add	sp, #12
 8000670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000674:	46c2      	mov	sl, r8
 8000676:	46c3      	mov	fp, r8
 8000678:	4645      	mov	r5, r8
 800067a:	e7bd      	b.n	80005f8 <ft5336_TS_GetXY+0x34>
 800067c:	200000c8 	.word	0x200000c8
 8000680:	08007150 	.word	0x08007150
 8000684:	08007168 	.word	0x08007168
 8000688:	08007174 	.word	0x08007174
 800068c:	200000c4 	.word	0x200000c4
 8000690:	0800715c 	.word	0x0800715c

08000694 <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000694:	b2c0      	uxtb	r0, r0
 8000696:	2201      	movs	r2, #1
 8000698:	21a4      	movs	r1, #164	; 0xa4
 800069a:	f000 b94b 	b.w	8000934 <TS_IO_Write>
 800069e:	bf00      	nop

080006a0 <ft5336_TS_Start>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80006a0:	b2c0      	uxtb	r0, r0
 80006a2:	2200      	movs	r2, #0
 80006a4:	21a4      	movs	r1, #164	; 0xa4
 80006a6:	f000 b945 	b.w	8000934 <TS_IO_Write>
 80006aa:	bf00      	nop

080006ac <ft5336_TS_DisableIT>:
 80006ac:	f7ff bff8 	b.w	80006a0 <ft5336_TS_Start>

080006b0 <ft5336_TS_ClearIT>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <ft5336_TS_GetGestureID>:
{
 80006b4:	b510      	push	{r4, lr}
  volatile uint8_t ucReadData = 0;
 80006b6:	2300      	movs	r3, #0
{
 80006b8:	b082      	sub	sp, #8
 80006ba:	460c      	mov	r4, r1
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80006bc:	b2c0      	uxtb	r0, r0
 80006be:	2101      	movs	r1, #1
  volatile uint8_t ucReadData = 0;
 80006c0:	f88d 3007 	strb.w	r3, [sp, #7]
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80006c4:	f000 f948 	bl	8000958 <TS_IO_Read>
 80006c8:	f88d 0007 	strb.w	r0, [sp, #7]
  * pGestureId = ucReadData;
 80006cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80006d0:	6023      	str	r3, [r4, #0]
}
 80006d2:	b002      	add	sp, #8
 80006d4:	bd10      	pop	{r4, pc}
 80006d6:	bf00      	nop

080006d8 <ft5336_TS_GetTouchInfo>:
{
 80006d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80006dc:	4d1e      	ldr	r5, [pc, #120]	; (8000758 <ft5336_TS_GetTouchInfo+0x80>)
{
 80006de:	b082      	sub	sp, #8
  volatile uint8_t ucReadData = 0;
 80006e0:	2400      	movs	r4, #0
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80006e2:	786d      	ldrb	r5, [r5, #1]
  volatile uint8_t ucReadData = 0;
 80006e4:	f88d 4007 	strb.w	r4, [sp, #7]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80006e8:	428d      	cmp	r5, r1
 80006ea:	d92e      	bls.n	800074a <ft5336_TS_GetTouchInfo+0x72>
 80006ec:	2909      	cmp	r1, #9
 80006ee:	d82f      	bhi.n	8000750 <ft5336_TS_GetTouchInfo+0x78>
 80006f0:	4d1a      	ldr	r5, [pc, #104]	; (800075c <ft5336_TS_GetTouchInfo+0x84>)
 80006f2:	4e1b      	ldr	r6, [pc, #108]	; (8000760 <ft5336_TS_GetTouchInfo+0x88>)
 80006f4:	4c1b      	ldr	r4, [pc, #108]	; (8000764 <ft5336_TS_GetTouchInfo+0x8c>)
 80006f6:	f815 8001 	ldrb.w	r8, [r5, r1]
 80006fa:	f816 c001 	ldrb.w	ip, [r6, r1]
 80006fe:	5c65      	ldrb	r5, [r4, r1]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000700:	b2c4      	uxtb	r4, r0
 8000702:	4661      	mov	r1, ip
 8000704:	461e      	mov	r6, r3
 8000706:	4617      	mov	r7, r2
 8000708:	4620      	mov	r0, r4
 800070a:	f000 f925 	bl	8000958 <TS_IO_Read>
 800070e:	4603      	mov	r3, r0
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000710:	9a08      	ldr	r2, [sp, #32]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000712:	4641      	mov	r1, r8
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000714:	f88d 3007 	strb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000718:	4620      	mov	r0, r4
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 800071a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800071e:	099b      	lsrs	r3, r3, #6
 8000720:	6013      	str	r3, [r2, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000722:	f000 f919 	bl	8000958 <TS_IO_Read>
 8000726:	4603      	mov	r3, r0
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8000728:	4629      	mov	r1, r5
 800072a:	4620      	mov	r0, r4
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 800072c:	f88d 3007 	strb.w	r3, [sp, #7]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8000730:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000734:	603b      	str	r3, [r7, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8000736:	f000 f90f 	bl	8000958 <TS_IO_Read>
 800073a:	f88d 0007 	strb.w	r0, [sp, #7]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 800073e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000742:	0912      	lsrs	r2, r2, #4
 8000744:	f002 0204 	and.w	r2, r2, #4
 8000748:	6032      	str	r2, [r6, #0]
}
 800074a:	b002      	add	sp, #8
 800074c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8000750:	4625      	mov	r5, r4
 8000752:	46a0      	mov	r8, r4
 8000754:	46a4      	mov	ip, r4
 8000756:	e7d3      	b.n	8000700 <ft5336_TS_GetTouchInfo+0x28>
 8000758:	200000c8 	.word	0x200000c8
 800075c:	0800718c 	.word	0x0800718c
 8000760:	08007180 	.word	0x08007180
 8000764:	08007198 	.word	0x08007198

08000768 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000768:	b570      	push	{r4, r5, r6, lr}
 800076a:	b08a      	sub	sp, #40	; 0x28
 800076c:	4604      	mov	r4, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800076e:	f002 fc43 	bl	8002ff8 <HAL_I2C_GetState>
 8000772:	2800      	cmp	r0, #0
 8000774:	d151      	bne.n	800081a <I2Cx_Init+0xb2>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000776:	4b4c      	ldr	r3, [pc, #304]	; (80008a8 <I2Cx_Init+0x140>)
 8000778:	4605      	mov	r5, r0
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800077a:	4a4c      	ldr	r2, [pc, #304]	; (80008ac <I2Cx_Init+0x144>)
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800077c:	429c      	cmp	r4, r3
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800077e:	4e4c      	ldr	r6, [pc, #304]	; (80008b0 <I2Cx_Init+0x148>)
    i2c_handler->Init.OwnAddress1      = 0;
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000780:	f04f 0301 	mov.w	r3, #1
    i2c_handler->Init.OwnAddress1      = 0;
 8000784:	60a0      	str	r0, [r4, #8]
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000786:	d04a      	beq.n	800081e <I2Cx_Init+0xb6>
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000788:	6062      	str	r2, [r4, #4]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800078a:	f44f 7180 	mov.w	r1, #256	; 0x100
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800078e:	60e3      	str	r3, [r4, #12]
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000790:	4a48      	ldr	r2, [pc, #288]	; (80008b4 <I2Cx_Init+0x14c>)
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    i2c_handler->Init.OwnAddress2      = 0;
 8000792:	e9c4 0004 	strd	r0, r0, [r4, #16]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000796:	e9c4 0007 	strd	r0, r0, [r4, #28]
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800079a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800079c:	2002      	movs	r0, #2
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800079e:	6022      	str	r2, [r4, #0]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80007a0:	2212      	movs	r2, #18
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80007a2:	f043 0302 	orr.w	r3, r3, #2
 80007a6:	6333      	str	r3, [r6, #48]	; 0x30
 80007a8:	6b33      	ldr	r3, [r6, #48]	; 0x30
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80007aa:	9008      	str	r0, [sp, #32]
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80007ac:	4003      	ands	r3, r0
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80007ae:	4842      	ldr	r0, [pc, #264]	; (80008b8 <I2Cx_Init+0x150>)
    gpio_init_structure.Pull = GPIO_NOPULL;
 80007b0:	9507      	str	r5, [sp, #28]
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80007b2:	9303      	str	r3, [sp, #12]
 80007b4:	9b03      	ldr	r3, [sp, #12]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80007b6:	e9cd 1205 	strd	r1, r2, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80007ba:	2204      	movs	r2, #4
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80007bc:	a905      	add	r1, sp, #20
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80007be:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80007c0:	f001 ff86 	bl	80026d0 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80007c4:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80007c8:	a905      	add	r1, sp, #20
 80007ca:	483b      	ldr	r0, [pc, #236]	; (80008b8 <I2Cx_Init+0x150>)
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80007cc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80007ce:	f001 ff7f 	bl	80026d0 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80007d2:	6c33      	ldr	r3, [r6, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80007d4:	462a      	mov	r2, r5
 80007d6:	210f      	movs	r1, #15
 80007d8:	201f      	movs	r0, #31
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80007da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007de:	6433      	str	r3, [r6, #64]	; 0x40
 80007e0:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80007e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007e6:	9304      	str	r3, [sp, #16]
 80007e8:	9b04      	ldr	r3, [sp, #16]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80007ea:	6a33      	ldr	r3, [r6, #32]
 80007ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007f0:	6233      	str	r3, [r6, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80007f2:	6a33      	ldr	r3, [r6, #32]
 80007f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80007f8:	6233      	str	r3, [r6, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80007fa:	f001 facd 	bl	8001d98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80007fe:	201f      	movs	r0, #31
 8000800:	f001 fb00 	bl	8001e04 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8000804:	2020      	movs	r0, #32
 8000806:	462a      	mov	r2, r5
 8000808:	210f      	movs	r1, #15
 800080a:	f001 fac5 	bl	8001d98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800080e:	2020      	movs	r0, #32
 8000810:	f001 faf8 	bl	8001e04 <HAL_NVIC_EnableIRQ>

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
 8000814:	4620      	mov	r0, r4
 8000816:	f002 f9cd 	bl	8002bb4 <HAL_I2C_Init>
  }
}
 800081a:	b00a      	add	sp, #40	; 0x28
 800081c:	bd70      	pop	{r4, r5, r6, pc}
    i2c_handler->Init.OwnAddress2      = 0;
 800081e:	e9c4 0004 	strd	r0, r0, [r4, #16]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000822:	e9c4 0007 	strd	r0, r0, [r4, #28]
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000826:	6062      	str	r2, [r4, #4]
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8000828:	2180      	movs	r1, #128	; 0x80
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800082a:	60e3      	str	r3, [r4, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800082c:	2002      	movs	r0, #2
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800082e:	6b33      	ldr	r3, [r6, #48]	; 0x30
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8000830:	4a22      	ldr	r2, [pc, #136]	; (80008bc <I2Cx_Init+0x154>)
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000832:	430b      	orrs	r3, r1
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8000834:	6022      	str	r2, [r4, #0]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000836:	2212      	movs	r2, #18
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000838:	6333      	str	r3, [r6, #48]	; 0x30
 800083a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800083c:	9008      	str	r0, [sp, #32]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800083e:	400b      	ands	r3, r1
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000840:	481f      	ldr	r0, [pc, #124]	; (80008c0 <I2Cx_Init+0x158>)
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000842:	9507      	str	r5, [sp, #28]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000844:	9301      	str	r3, [sp, #4]
 8000846:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000848:	e9cd 1205 	strd	r1, r2, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800084c:	2204      	movs	r2, #4
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800084e:	a905      	add	r1, sp, #20
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8000850:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000852:	f001 ff3d 	bl	80026d0 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000856:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800085a:	a905      	add	r1, sp, #20
 800085c:	4818      	ldr	r0, [pc, #96]	; (80008c0 <I2Cx_Init+0x158>)
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800085e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000860:	f001 ff36 	bl	80026d0 <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000864:	6c33      	ldr	r3, [r6, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000866:	462a      	mov	r2, r5
 8000868:	210f      	movs	r1, #15
 800086a:	2048      	movs	r0, #72	; 0x48
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800086c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000870:	6433      	str	r3, [r6, #64]	; 0x40
 8000872:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8000874:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000878:	9302      	str	r3, [sp, #8]
 800087a:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800087c:	6a33      	ldr	r3, [r6, #32]
 800087e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000882:	6233      	str	r3, [r6, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8000884:	6a33      	ldr	r3, [r6, #32]
 8000886:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800088a:	6233      	str	r3, [r6, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800088c:	f001 fa84 	bl	8001d98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8000890:	2048      	movs	r0, #72	; 0x48
 8000892:	f001 fab7 	bl	8001e04 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000896:	462a      	mov	r2, r5
 8000898:	210f      	movs	r1, #15
 800089a:	2049      	movs	r0, #73	; 0x49
 800089c:	f001 fa7c 	bl	8001d98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80008a0:	2049      	movs	r0, #73	; 0x49
 80008a2:	f001 faaf 	bl	8001e04 <HAL_NVIC_EnableIRQ>
 80008a6:	e7b5      	b.n	8000814 <I2Cx_Init+0xac>
 80008a8:	200000cc 	.word	0x200000cc
 80008ac:	40912732 	.word	0x40912732
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40005400 	.word	0x40005400
 80008b8:	40020400 	.word	0x40020400
 80008bc:	40005c00 	.word	0x40005c00
 80008c0:	40021c00 	.word	0x40021c00

080008c4 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80008c4:	b570      	push	{r4, r5, r6, lr}
 80008c6:	b084      	sub	sp, #16
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80008c8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 80008cc:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 80008d0:	9e08      	ldr	r6, [sp, #32]
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80008d2:	9402      	str	r4, [sp, #8]
 80008d4:	e9cd 6500 	strd	r6, r5, [sp]
{
 80008d8:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80008da:	f002 fab1 	bl	8002e40 <HAL_I2C_Mem_Read>

  /* Check the communication status */
  if(status != HAL_OK)
 80008de:	4604      	mov	r4, r0
 80008e0:	b128      	cbz	r0, 80008ee <I2Cx_ReadMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80008e2:	4628      	mov	r0, r5
 80008e4:	f002 f9bc 	bl	8002c60 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80008e8:	4628      	mov	r0, r5
 80008ea:	f7ff ff3d 	bl	8000768 <I2Cx_Init>
}
 80008ee:	4620      	mov	r0, r4
 80008f0:	b004      	add	sp, #16
 80008f2:	bd70      	pop	{r4, r5, r6, pc}

080008f4 <I2Cx_WriteMultiple>:
{
 80008f4:	b570      	push	{r4, r5, r6, lr}
 80008f6:	b084      	sub	sp, #16
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80008f8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 80008fc:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8000900:	9e08      	ldr	r6, [sp, #32]
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000902:	9402      	str	r4, [sp, #8]
 8000904:	e9cd 6500 	strd	r6, r5, [sp]
{
 8000908:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800090a:	f002 f9c3 	bl	8002c94 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 800090e:	4604      	mov	r4, r0
 8000910:	b128      	cbz	r0, 800091e <I2Cx_WriteMultiple+0x2a>
  HAL_I2C_DeInit(i2c_handler);
 8000912:	4628      	mov	r0, r5
 8000914:	f002 f9a4 	bl	8002c60 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8000918:	4628      	mov	r0, r5
 800091a:	f7ff ff25 	bl	8000768 <I2Cx_Init>
}
 800091e:	4620      	mov	r0, r4
 8000920:	b004      	add	sp, #16
 8000922:	bd70      	pop	{r4, r5, r6, pc}

08000924 <AUDIO_IO_Init>:
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
  I2Cx_Init(&hI2cAudioHandler);
 8000924:	4801      	ldr	r0, [pc, #4]	; (800092c <AUDIO_IO_Init+0x8>)
 8000926:	f7ff bf1f 	b.w	8000768 <I2Cx_Init>
 800092a:	bf00      	nop
 800092c:	200000cc 	.word	0x200000cc

08000930 <TS_IO_Init>:
 8000930:	f7ff bff8 	b.w	8000924 <AUDIO_IO_Init>

08000934 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000934:	b530      	push	{r4, r5, lr}
 8000936:	b085      	sub	sp, #20
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8000938:	2501      	movs	r5, #1
{
 800093a:	ac04      	add	r4, sp, #16
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800093c:	462b      	mov	r3, r5
{
 800093e:	f804 2d01 	strb.w	r2, [r4, #-1]!
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8000942:	460a      	mov	r2, r1
 8000944:	4601      	mov	r1, r0
 8000946:	9400      	str	r4, [sp, #0]
 8000948:	9501      	str	r5, [sp, #4]
 800094a:	4802      	ldr	r0, [pc, #8]	; (8000954 <TS_IO_Write+0x20>)
 800094c:	f7ff ffd2 	bl	80008f4 <I2Cx_WriteMultiple>
}
 8000950:	b005      	add	sp, #20
 8000952:	bd30      	pop	{r4, r5, pc}
 8000954:	200000cc 	.word	0x200000cc

08000958 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8000958:	b530      	push	{r4, r5, lr}
 800095a:	b085      	sub	sp, #20
  uint8_t read_value = 0;

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800095c:	2401      	movs	r4, #1
  uint8_t read_value = 0;
 800095e:	2500      	movs	r5, #0
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8000960:	460a      	mov	r2, r1
  uint8_t read_value = 0;
 8000962:	ab04      	add	r3, sp, #16
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8000964:	4601      	mov	r1, r0
 8000966:	4806      	ldr	r0, [pc, #24]	; (8000980 <TS_IO_Read+0x28>)
  uint8_t read_value = 0;
 8000968:	f803 5d01 	strb.w	r5, [r3, #-1]!
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800096c:	9401      	str	r4, [sp, #4]
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	4623      	mov	r3, r4
 8000972:	f7ff ffa7 	bl	80008c4 <I2Cx_ReadMultiple>

  return read_value;
}
 8000976:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800097a:	b005      	add	sp, #20
 800097c:	bd30      	pop	{r4, r5, pc}
 800097e:	bf00      	nop
 8000980:	200000cc 	.word	0x200000cc

08000984 <TS_IO_Delay>:
 8000984:	f000 be62 	b.w	800164c <HAL_Delay>

08000988 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8000988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800098c:	4c1c      	ldr	r4, [pc, #112]	; (8000a00 <LL_FillBuffer+0x78>)
 800098e:	f04f 0834 	mov.w	r8, #52	; 0x34
 8000992:	f8df e078 	ldr.w	lr, [pc, #120]	; 8000a0c <LL_FillBuffer+0x84>
{
 8000996:	b082      	sub	sp, #8
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000998:	6824      	ldr	r4, [r4, #0]
{
 800099a:	4617      	mov	r7, r2
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800099c:	4a19      	ldr	r2, [pc, #100]	; (8000a04 <LL_FillBuffer+0x7c>)
 800099e:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80009a2:	fb08 e404 	mla	r4, r8, r4, lr
{
 80009a6:	4698      	mov	r8, r3
 80009a8:	460e      	mov	r6, r1
 80009aa:	9908      	ldr	r1, [sp, #32]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80009ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
{
 80009ae:	4605      	mov	r5, r0
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80009b0:	4814      	ldr	r0, [pc, #80]	; (8000a04 <LL_FillBuffer+0x7c>)
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80009b2:	2b02      	cmp	r3, #2
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80009b4:	f8c2 c004 	str.w	ip, [r2, #4]
{
 80009b8:	9c09      	ldr	r4, [sp, #36]	; 0x24
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80009ba:	bf18      	it	ne
 80009bc:	2300      	movne	r3, #0
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80009be:	60d1      	str	r1, [r2, #12]
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80009c0:	6093      	str	r3, [r2, #8]
  hDma2dHandler.Instance = DMA2D;
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <LL_FillBuffer+0x80>)
 80009c4:	6013      	str	r3, [r2, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80009c6:	f001 fccf 	bl	8002368 <HAL_DMA2D_Init>
 80009ca:	b110      	cbz	r0, 80009d2 <LL_FillBuffer+0x4a>
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
      }
    }
  } 
}
 80009cc:	b002      	add	sp, #8
 80009ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80009d2:	4629      	mov	r1, r5
 80009d4:	480b      	ldr	r0, [pc, #44]	; (8000a04 <LL_FillBuffer+0x7c>)
 80009d6:	f001 fe29 	bl	800262c <HAL_DMA2D_ConfigLayer>
 80009da:	2800      	cmp	r0, #0
 80009dc:	d1f6      	bne.n	80009cc <LL_FillBuffer+0x44>
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80009de:	f8cd 8000 	str.w	r8, [sp]
 80009e2:	463b      	mov	r3, r7
 80009e4:	4632      	mov	r2, r6
 80009e6:	4621      	mov	r1, r4
 80009e8:	4806      	ldr	r0, [pc, #24]	; (8000a04 <LL_FillBuffer+0x7c>)
 80009ea:	f001 fceb 	bl	80023c4 <HAL_DMA2D_Start>
 80009ee:	2800      	cmp	r0, #0
 80009f0:	d1ec      	bne.n	80009cc <LL_FillBuffer+0x44>
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80009f2:	210a      	movs	r1, #10
 80009f4:	4803      	ldr	r0, [pc, #12]	; (8000a04 <LL_FillBuffer+0x7c>)
}
 80009f6:	b002      	add	sp, #8
 80009f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80009fc:	f001 bcfe 	b.w	80023fc <HAL_DMA2D_PollForTransfer>
 8000a00:	20000118 	.word	0x20000118
 8000a04:	20000134 	.word	0x20000134
 8000a08:	4002b000 	.word	0x4002b000
 8000a0c:	200408f8 	.word	0x200408f8

08000a10 <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000a10:	4b03      	ldr	r3, [pc, #12]	; (8000a20 <BSP_LCD_GetXSize+0x10>)
 8000a12:	2134      	movs	r1, #52	; 0x34
 8000a14:	4a03      	ldr	r2, [pc, #12]	; (8000a24 <BSP_LCD_GetXSize+0x14>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	fb01 2303 	mla	r3, r1, r3, r2
}
 8000a1c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8000a1e:	4770      	bx	lr
 8000a20:	20000118 	.word	0x20000118
 8000a24:	200408f8 	.word	0x200408f8

08000a28 <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8000a28:	4b03      	ldr	r3, [pc, #12]	; (8000a38 <BSP_LCD_GetYSize+0x10>)
 8000a2a:	2134      	movs	r1, #52	; 0x34
 8000a2c:	4a03      	ldr	r2, [pc, #12]	; (8000a3c <BSP_LCD_GetYSize+0x14>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	fb01 2303 	mla	r3, r1, r3, r2
}
 8000a34:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8000a36:	4770      	bx	lr
 8000a38:	20000118 	.word	0x20000118
 8000a3c:	200408f8 	.word	0x200408f8

08000a40 <BSP_LCD_LayerDefaultInit>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000a40:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <BSP_LCD_LayerDefaultInit+0x68>)
{     
 8000a42:	b5f0      	push	{r4, r5, r6, r7, lr}
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	2634      	movs	r6, #52	; 0x34
 8000a48:	4d18      	ldr	r5, [pc, #96]	; (8000aac <BSP_LCD_LayerDefaultInit+0x6c>)
{     
 8000a4a:	b08f      	sub	sp, #60	; 0x3c
 8000a4c:	4604      	mov	r4, r0
  layer_cfg.WindowX0 = 0;
 8000a4e:	2300      	movs	r3, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000a50:	fb06 5202 	mla	r2, r6, r2, r5
  layer_cfg.Alpha = 255;
 8000a54:	27ff      	movs	r7, #255	; 0xff
  layer_cfg.FBStartAdress = FB_Address;
 8000a56:	910a      	str	r1, [sp, #40]	; 0x28
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8000a58:	4628      	mov	r0, r5
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000a5a:	f44f 66c0 	mov.w	r6, #1536	; 0x600
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000a5e:	2507      	movs	r5, #7
  layer_cfg.WindowX0 = 0;
 8000a60:	9301      	str	r3, [sp, #4]
  layer_cfg.WindowY0 = 0;
 8000a62:	9303      	str	r3, [sp, #12]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000a64:	9305      	str	r3, [sp, #20]
  layer_cfg.Alpha0 = 0;
 8000a66:	9307      	str	r3, [sp, #28]
  layer_cfg.Backcolor.Blue = 0;
 8000a68:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Green = 0;
 8000a6c:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  layer_cfg.Alpha = 255;
 8000a70:	9706      	str	r7, [sp, #24]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8000a72:	e9d2 1218 	ldrd	r1, r2, [r2, #96]	; 0x60
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000a76:	e9cd 6508 	strd	r6, r5, [sp, #32]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000a7a:	9204      	str	r2, [sp, #16]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8000a7c:	f04f 457f 	mov.w	r5, #4278190080	; 0xff000000
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8000a80:	920c      	str	r2, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8000a82:	4622      	mov	r2, r4
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000a84:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8000a88:	9102      	str	r1, [sp, #8]
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8000a8a:	910b      	str	r1, [sp, #44]	; 0x2c
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8000a8c:	a901      	add	r1, sp, #4
 8000a8e:	f002 fc23 	bl	80032d8 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000a92:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <BSP_LCD_LayerDefaultInit+0x70>)
 8000a94:	00a4      	lsls	r4, r4, #2
 8000a96:	f04f 30ff 	mov.w	r0, #4294967295
  DrawProp[LayerIndex].pFont     = &Font24;
 8000a9a:	4906      	ldr	r1, [pc, #24]	; (8000ab4 <BSP_LCD_LayerDefaultInit+0x74>)
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000a9c:	1913      	adds	r3, r2, r4
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8000a9e:	5115      	str	r5, [r2, r4]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000aa0:	e9c3 0101 	strd	r0, r1, [r3, #4]
}
 8000aa4:	b00f      	add	sp, #60	; 0x3c
 8000aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aa8:	20000118 	.word	0x20000118
 8000aac:	200408f8 	.word	0x200408f8
 8000ab0:	2000011c 	.word	0x2000011c
 8000ab4:	20000030 	.word	0x20000030

08000ab8 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8000ab8:	4b01      	ldr	r3, [pc, #4]	; (8000ac0 <BSP_LCD_SelectLayer+0x8>)
 8000aba:	6018      	str	r0, [r3, #0]
} 
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	20000118 	.word	0x20000118

08000ac4 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 8000ac4:	4b03      	ldr	r3, [pc, #12]	; (8000ad4 <BSP_LCD_SetTextColor+0x10>)
 8000ac6:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <BSP_LCD_SetTextColor+0x14>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000ace:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8000ad2:	4770      	bx	lr
 8000ad4:	20000118 	.word	0x20000118
 8000ad8:	2000011c 	.word	0x2000011c

08000adc <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <BSP_LCD_SetBackColor+0x14>)
 8000ade:	4a05      	ldr	r2, [pc, #20]	; (8000af4 <BSP_LCD_SetBackColor+0x18>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000ae6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000aea:	6058      	str	r0, [r3, #4]
}
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000118 	.word	0x20000118
 8000af4:	2000011c 	.word	0x2000011c

08000af8 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 8000af8:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <BSP_LCD_SetFont+0x14>)
 8000afa:	4a05      	ldr	r2, [pc, #20]	; (8000b10 <BSP_LCD_SetFont+0x18>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000b02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000b06:	6098      	str	r0, [r3, #8]
}
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000118 	.word	0x20000118
 8000b10:	2000011c 	.word	0x2000011c

08000b14 <BSP_LCD_Clear>:
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000b14:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <BSP_LCD_Clear+0x28>)
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8000b16:	2134      	movs	r1, #52	; 0x34
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	681b      	ldr	r3, [r3, #0]
{ 
 8000b1c:	b510      	push	{r4, lr}
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8000b1e:	4c08      	ldr	r4, [pc, #32]	; (8000b40 <BSP_LCD_Clear+0x2c>)
{ 
 8000b20:	b082      	sub	sp, #8
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8000b22:	fb01 4103 	mla	r1, r1, r3, r4
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000b26:	9001      	str	r0, [sp, #4]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	9200      	str	r2, [sp, #0]
 8000b2c:	e9d1 2318 	ldrd	r2, r3, [r1, #96]	; 0x60
 8000b30:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
 8000b32:	f7ff ff29 	bl	8000988 <LL_FillBuffer>
}
 8000b36:	b002      	add	sp, #8
 8000b38:	bd10      	pop	{r4, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000118 	.word	0x20000118
 8000b40:	200408f8 	.word	0x200408f8

08000b44 <BSP_LCD_DisplayChar>:
{
 8000b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000b48:	4c3b      	ldr	r4, [pc, #236]	; (8000c38 <BSP_LCD_DisplayChar+0xf4>)
{
 8000b4a:	b087      	sub	sp, #28
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000b4c:	4b3b      	ldr	r3, [pc, #236]	; (8000c3c <BSP_LCD_DisplayChar+0xf8>)
{
 8000b4e:	4682      	mov	sl, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000b50:	6825      	ldr	r5, [r4, #0]
 8000b52:	3a20      	subs	r2, #32
{
 8000b54:	9103      	str	r1, [sp, #12]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000b56:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 8000b5a:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 8000b5e:	f8de 3008 	ldr.w	r3, [lr, #8]
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000b62:	8898      	ldrh	r0, [r3, #4]
 8000b64:	88de      	ldrh	r6, [r3, #6]
 8000b66:	1dc1      	adds	r1, r0, #7
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000b68:	681c      	ldr	r4, [r3, #0]
 8000b6a:	fb06 f202 	mul.w	r2, r6, r2
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000b6e:	10c9      	asrs	r1, r1, #3
 8000b70:	9602      	str	r6, [sp, #8]
  offset =  8 *((width + 7)/8) -  width ;
 8000b72:	ebc0 03c1 	rsb	r3, r0, r1, lsl #3
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000b76:	9101      	str	r1, [sp, #4]
 8000b78:	fb01 f202 	mul.w	r2, r1, r2
  offset =  8 *((width + 7)/8) -  width ;
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	9304      	str	r3, [sp, #16]
  for(i = 0; i < height; i++)
 8000b80:	2e00      	cmp	r6, #0
 8000b82:	d04c      	beq.n	8000c1e <BSP_LCD_DisplayChar+0xda>
 8000b84:	4b2e      	ldr	r3, [pc, #184]	; (8000c40 <BSP_LCD_DisplayChar+0xfc>)
 8000b86:	2134      	movs	r1, #52	; 0x34
 8000b88:	eb04 0b02 	add.w	fp, r4, r2
 8000b8c:	fb01 3505 	mla	r5, r1, r5, r3
 8000b90:	2300      	movs	r3, #0
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	1e43      	subs	r3, r0, #1
 8000b96:	9305      	str	r3, [sp, #20]
 8000b98:	9b03      	ldr	r3, [sp, #12]
 8000b9a:	9a00      	ldr	r2, [sp, #0]
 8000b9c:	f89b 7000 	ldrb.w	r7, [fp]
 8000ba0:	eb03 0c02 	add.w	ip, r3, r2
    switch(((width + 7)/8))
 8000ba4:	9b01      	ldr	r3, [sp, #4]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	fa1f fc8c 	uxth.w	ip, ip
 8000bac:	d005      	beq.n	8000bba <BSP_LCD_DisplayChar+0x76>
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d138      	bne.n	8000c24 <BSP_LCD_DisplayChar+0xe0>
      line =  (pchar[0]<< 8) | pchar[1];      
 8000bb2:	f8bb 7000 	ldrh.w	r7, [fp]
 8000bb6:	ba7f      	rev16	r7, r7
 8000bb8:	b2bf      	uxth	r7, r7
    for (j = 0; j < width; j++)
 8000bba:	b340      	cbz	r0, 8000c0e <BSP_LCD_DisplayChar+0xca>
 8000bbc:	2100      	movs	r1, #0
      if(line & (1 << (width- j + offset- 1))) 
 8000bbe:	f04f 0801 	mov.w	r8, #1
 8000bc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8000bc6:	eb03 0902 	add.w	r9, r3, r2
 8000bca:	e008      	b.n	8000bde <BSP_LCD_DisplayChar+0x9a>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000bcc:	2e02      	cmp	r6, #2
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8000bce:	f8de 2000 	ldr.w	r2, [lr]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000bd2:	d016      	beq.n	8000c02 <BSP_LCD_DisplayChar+0xbe>
    for (j = 0; j < width; j++)
 8000bd4:	3101      	adds	r1, #1
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000bd6:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (j = 0; j < width; j++)
 8000bda:	4281      	cmp	r1, r0
 8000bdc:	d017      	beq.n	8000c0e <BSP_LCD_DisplayChar+0xca>
      if(line & (1 << (width- j + offset- 1))) 
 8000bde:	eba9 0201 	sub.w	r2, r9, r1
 8000be2:	eb0a 0301 	add.w	r3, sl, r1
 8000be6:	6e2c      	ldr	r4, [r5, #96]	; 0x60
 8000be8:	fa08 f202 	lsl.w	r2, r8, r2
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	6cae      	ldr	r6, [r5, #72]	; 0x48
 8000bf0:	423a      	tst	r2, r7
 8000bf2:	fb04 330c 	mla	r3, r4, ip, r3
 8000bf6:	6dec      	ldr	r4, [r5, #92]	; 0x5c
 8000bf8:	d1e8      	bne.n	8000bcc <BSP_LCD_DisplayChar+0x88>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000bfa:	2e02      	cmp	r6, #2
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8000bfc:	f8de 2004 	ldr.w	r2, [lr, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000c00:	d1e8      	bne.n	8000bd4 <BSP_LCD_DisplayChar+0x90>
    for (j = 0; j < width; j++)
 8000c02:	3101      	adds	r1, #1
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8000c04:	b292      	uxth	r2, r2
    for (j = 0; j < width; j++)
 8000c06:	4281      	cmp	r1, r0
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8000c08:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
    for (j = 0; j < width; j++)
 8000c0c:	d1e7      	bne.n	8000bde <BSP_LCD_DisplayChar+0x9a>
  for(i = 0; i < height; i++)
 8000c0e:	9b00      	ldr	r3, [sp, #0]
 8000c10:	9a01      	ldr	r2, [sp, #4]
 8000c12:	3301      	adds	r3, #1
 8000c14:	4493      	add	fp, r2
 8000c16:	9a02      	ldr	r2, [sp, #8]
 8000c18:	9300      	str	r3, [sp, #0]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d1bc      	bne.n	8000b98 <BSP_LCD_DisplayChar+0x54>
}
 8000c1e:	b007      	add	sp, #28
 8000c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8000c24:	043f      	lsls	r7, r7, #16
 8000c26:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8000c2a:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8000c2e:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
 8000c32:	431f      	orrs	r7, r3
 8000c34:	e7c1      	b.n	8000bba <BSP_LCD_DisplayChar+0x76>
 8000c36:	bf00      	nop
 8000c38:	20000118 	.word	0x20000118
 8000c3c:	2000011c 	.word	0x2000011c
 8000c40:	200408f8 	.word	0x200408f8

08000c44 <BSP_LCD_DisplayStringAt>:
{
 8000c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c48:	4616      	mov	r6, r2
  while (*ptr++) size ++ ;
 8000c4a:	7812      	ldrb	r2, [r2, #0]
{
 8000c4c:	4604      	mov	r4, r0
 8000c4e:	4688      	mov	r8, r1
  while (*ptr++) size ++ ;
 8000c50:	2a00      	cmp	r2, #0
 8000c52:	d04b      	beq.n	8000cec <BSP_LCD_DisplayStringAt+0xa8>
 8000c54:	1c71      	adds	r1, r6, #1
 8000c56:	1b8d      	subs	r5, r1, r6
 8000c58:	f811 0b01 	ldrb.w	r0, [r1], #1
 8000c5c:	2800      	cmp	r0, #0
 8000c5e:	d1fa      	bne.n	8000c56 <BSP_LCD_DisplayStringAt+0x12>
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000c60:	4f23      	ldr	r7, [pc, #140]	; (8000cf0 <BSP_LCD_DisplayStringAt+0xac>)
 8000c62:	2034      	movs	r0, #52	; 0x34
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000c64:	4923      	ldr	r1, [pc, #140]	; (8000cf4 <BSP_LCD_DisplayStringAt+0xb0>)
  switch (Mode)
 8000c66:	2b01      	cmp	r3, #1
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000c68:	f8d7 9000 	ldr.w	r9, [r7]
 8000c6c:	f8df c088 	ldr.w	ip, [pc, #136]	; 8000cf8 <BSP_LCD_DisplayStringAt+0xb4>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000c70:	eb09 0749 	add.w	r7, r9, r9, lsl #1
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000c74:	fb00 c009 	mla	r0, r0, r9, ip
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000c78:	eb01 0187 	add.w	r1, r1, r7, lsl #2
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000c7c:	6e00      	ldr	r0, [r0, #96]	; 0x60
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000c7e:	688f      	ldr	r7, [r1, #8]
 8000c80:	f8b7 e004 	ldrh.w	lr, [r7, #4]
 8000c84:	fbb0 f1fe 	udiv	r1, r0, lr
  switch (Mode)
 8000c88:	d029      	beq.n	8000cde <BSP_LCD_DisplayStringAt+0x9a>
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d021      	beq.n	8000cd2 <BSP_LCD_DisplayStringAt+0x8e>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8000c8e:	b223      	sxth	r3, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000c90:	b280      	uxth	r0, r0
    ref_column = 1;
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	bfd8      	it	le
 8000c96:	2401      	movle	r4, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000c98:	4586      	cmp	lr, r0
 8000c9a:	d818      	bhi.n	8000cce <BSP_LCD_DisplayStringAt+0x8a>
 8000c9c:	b1ba      	cbz	r2, 8000cce <BSP_LCD_DisplayStringAt+0x8a>
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000c9e:	2334      	movs	r3, #52	; 0x34
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000ca0:	4635      	mov	r5, r6
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000ca2:	fb03 c909 	mla	r9, r3, r9, ip
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8000ca6:	4620      	mov	r0, r4
 8000ca8:	4641      	mov	r1, r8
 8000caa:	f7ff ff4b 	bl	8000b44 <BSP_LCD_DisplayChar>
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000cae:	f815 2f01 	ldrb.w	r2, [r5, #1]!
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8000cb2:	88b8      	ldrh	r0, [r7, #4]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000cb4:	1bab      	subs	r3, r5, r6
 8000cb6:	f8d9 1060 	ldr.w	r1, [r9, #96]	; 0x60
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8000cba:	4404      	add	r4, r0
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000cbc:	b29b      	uxth	r3, r3
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8000cbe:	b2a4      	uxth	r4, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000cc0:	fb00 1313 	mls	r3, r0, r3, r1
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	4283      	cmp	r3, r0
 8000cc8:	d301      	bcc.n	8000cce <BSP_LCD_DisplayStringAt+0x8a>
 8000cca:	2a00      	cmp	r2, #0
 8000ccc:	d1eb      	bne.n	8000ca6 <BSP_LCD_DisplayStringAt+0x62>
}
 8000cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8000cd2:	1b49      	subs	r1, r1, r5
 8000cd4:	fb11 f10e 	smulbb	r1, r1, lr
 8000cd8:	1b0c      	subs	r4, r1, r4
 8000cda:	b2a4      	uxth	r4, r4
      break;
 8000cdc:	e7d7      	b.n	8000c8e <BSP_LCD_DisplayStringAt+0x4a>
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8000cde:	1b49      	subs	r1, r1, r5
 8000ce0:	fb0e f101 	mul.w	r1, lr, r1
 8000ce4:	eb04 0451 	add.w	r4, r4, r1, lsr #1
 8000ce8:	b2a4      	uxth	r4, r4
      break;
 8000cea:	e7d0      	b.n	8000c8e <BSP_LCD_DisplayStringAt+0x4a>
  uint32_t size = 0, xsize = 0; 
 8000cec:	4615      	mov	r5, r2
 8000cee:	e7b7      	b.n	8000c60 <BSP_LCD_DisplayStringAt+0x1c>
 8000cf0:	20000118 	.word	0x20000118
 8000cf4:	2000011c 	.word	0x2000011c
 8000cf8:	200408f8 	.word	0x200408f8

08000cfc <BSP_LCD_DrawHLine>:
{
 8000cfc:	b570      	push	{r4, r5, r6, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000cfe:	4c10      	ldr	r4, [pc, #64]	; (8000d40 <BSP_LCD_DrawHLine+0x44>)
 8000d00:	2334      	movs	r3, #52	; 0x34
 8000d02:	4d10      	ldr	r5, [pc, #64]	; (8000d44 <BSP_LCD_DrawHLine+0x48>)
{
 8000d04:	b082      	sub	sp, #8
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000d06:	6824      	ldr	r4, [r4, #0]
 8000d08:	fb03 5304 	mla	r3, r3, r4, r5
 8000d0c:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8000d0e:	6c9e      	ldr	r6, [r3, #72]	; 0x48
 8000d10:	fb05 0001 	mla	r0, r5, r1, r0
 8000d14:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8000d16:	2e02      	cmp	r6, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <BSP_LCD_DrawHLine+0x4c>)
 8000d1a:	f04f 0500 	mov.w	r5, #0
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8000d1e:	bf0c      	ite	eq
 8000d20:	eb01 0140 	addeq.w	r1, r1, r0, lsl #1
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8000d24:	eb01 0180 	addne.w	r1, r1, r0, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8000d28:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8000d2c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000d30:	4620      	mov	r0, r4
 8000d32:	e9cd 5300 	strd	r5, r3, [sp]
 8000d36:	2301      	movs	r3, #1
 8000d38:	f7ff fe26 	bl	8000988 <LL_FillBuffer>
}
 8000d3c:	b002      	add	sp, #8
 8000d3e:	bd70      	pop	{r4, r5, r6, pc}
 8000d40:	20000118 	.word	0x20000118
 8000d44:	200408f8 	.word	0x200408f8
 8000d48:	2000011c 	.word	0x2000011c

08000d4c <BSP_LCD_DrawVLine>:
{
 8000d4c:	b570      	push	{r4, r5, r6, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000d4e:	4d11      	ldr	r5, [pc, #68]	; (8000d94 <BSP_LCD_DrawVLine+0x48>)
 8000d50:	2434      	movs	r4, #52	; 0x34
 8000d52:	4e11      	ldr	r6, [pc, #68]	; (8000d98 <BSP_LCD_DrawVLine+0x4c>)
{
 8000d54:	4613      	mov	r3, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000d56:	682d      	ldr	r5, [r5, #0]
{
 8000d58:	b082      	sub	sp, #8
 8000d5a:	fb04 6405 	mla	r4, r4, r5, r6
 8000d5e:	6e26      	ldr	r6, [r4, #96]	; 0x60
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000d60:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000d62:	fb06 0001 	mla	r0, r6, r1, r0
 8000d66:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000d68:	2a02      	cmp	r2, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8000d6a:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8000d6e:	f106 36ff 	add.w	r6, r6, #4294967295
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8000d72:	bf0c      	ite	eq
 8000d74:	eb01 0140 	addeq.w	r1, r1, r0, lsl #1
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8000d78:	eb01 0180 	addne.w	r1, r1, r0, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8000d7c:	4807      	ldr	r0, [pc, #28]	; (8000d9c <BSP_LCD_DrawVLine+0x50>)
 8000d7e:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
 8000d82:	4628      	mov	r0, r5
 8000d84:	9600      	str	r6, [sp, #0]
 8000d86:	9201      	str	r2, [sp, #4]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f7ff fdfd 	bl	8000988 <LL_FillBuffer>
}
 8000d8e:	b002      	add	sp, #8
 8000d90:	bd70      	pop	{r4, r5, r6, pc}
 8000d92:	bf00      	nop
 8000d94:	20000118 	.word	0x20000118
 8000d98:	200408f8 	.word	0x200408f8
 8000d9c:	2000011c 	.word	0x2000011c

08000da0 <BSP_LCD_DrawRect>:
{
 8000da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000da2:	461e      	mov	r6, r3
 8000da4:	460d      	mov	r5, r1
 8000da6:	4604      	mov	r4, r0
 8000da8:	4617      	mov	r7, r2
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8000daa:	f7ff ffa7 	bl	8000cfc <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8000dae:	19a9      	adds	r1, r5, r6
 8000db0:	463a      	mov	r2, r7
 8000db2:	4620      	mov	r0, r4
 8000db4:	b289      	uxth	r1, r1
 8000db6:	f7ff ffa1 	bl	8000cfc <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8000dba:	4632      	mov	r2, r6
 8000dbc:	4629      	mov	r1, r5
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	f7ff ffc4 	bl	8000d4c <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8000dc4:	19e0      	adds	r0, r4, r7
 8000dc6:	4632      	mov	r2, r6
 8000dc8:	4629      	mov	r1, r5
 8000dca:	b280      	uxth	r0, r0
}
 8000dcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8000dd0:	f7ff bfbc 	b.w	8000d4c <BSP_LCD_DrawVLine>

08000dd4 <BSP_LCD_DrawPixel>:
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <BSP_LCD_DrawPixel+0x30>)
{
 8000dd6:	b430      	push	{r4, r5}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2534      	movs	r5, #52	; 0x34
 8000ddc:	4c0a      	ldr	r4, [pc, #40]	; (8000e08 <BSP_LCD_DrawPixel+0x34>)
 8000dde:	fb05 4303 	mla	r3, r5, r3, r4
 8000de2:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 8000de4:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8000de6:	2d02      	cmp	r5, #2
 8000de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dea:	fb04 0101 	mla	r1, r4, r1, r0
 8000dee:	d003      	beq.n	8000df8 <BSP_LCD_DrawPixel+0x24>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000df0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8000df4:	bc30      	pop	{r4, r5}
 8000df6:	4770      	bx	lr
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8000df8:	b292      	uxth	r2, r2
}
 8000dfa:	bc30      	pop	{r4, r5}
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8000dfc:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20000118 	.word	0x20000118
 8000e08:	200408f8 	.word	0x200408f8

08000e0c <BSP_LCD_FillRect>:
{
 8000e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8000e0e:	4d10      	ldr	r5, [pc, #64]	; (8000e50 <BSP_LCD_FillRect+0x44>)
 8000e10:	2434      	movs	r4, #52	; 0x34
 8000e12:	4e10      	ldr	r6, [pc, #64]	; (8000e54 <BSP_LCD_FillRect+0x48>)
{
 8000e14:	b083      	sub	sp, #12
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8000e16:	682d      	ldr	r5, [r5, #0]
 8000e18:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8000e58 <BSP_LCD_FillRect+0x4c>
 8000e1c:	fb04 6405 	mla	r4, r4, r5, r6
 8000e20:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 8000e24:	6e26      	ldr	r6, [r4, #96]	; 0x60
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000e26:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8000e28:	fb06 0001 	mla	r0, r6, r1, r0
 8000e2c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000e2e:	2f02      	cmp	r7, #2
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8000e30:	f85c 402e 	ldr.w	r4, [ip, lr, lsl #2]
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8000e34:	eba6 0602 	sub.w	r6, r6, r2
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8000e38:	bf0c      	ite	eq
 8000e3a:	eb01 0140 	addeq.w	r1, r1, r0, lsl #1
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8000e3e:	eb01 0180 	addne.w	r1, r1, r0, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8000e42:	4628      	mov	r0, r5
 8000e44:	e9cd 6400 	strd	r6, r4, [sp]
 8000e48:	f7ff fd9e 	bl	8000988 <LL_FillBuffer>
}
 8000e4c:	b003      	add	sp, #12
 8000e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e50:	20000118 	.word	0x20000118
 8000e54:	200408f8 	.word	0x200408f8
 8000e58:	2000011c 	.word	0x2000011c

08000e5c <BSP_LCD_DisplayOn>:
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <BSP_LCD_DisplayOn+0x28>)
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e64:	4808      	ldr	r0, [pc, #32]	; (8000e88 <BSP_LCD_DisplayOn+0x2c>)
{
 8000e66:	b510      	push	{r4, lr}
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8000e68:	681c      	ldr	r4, [r3, #0]
 8000e6a:	69a3      	ldr	r3, [r4, #24]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	61a3      	str	r3, [r4, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8000e70:	f001 fd4c 	bl	800290c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8000e74:	2201      	movs	r2, #1
 8000e76:	2108      	movs	r1, #8
 8000e78:	4804      	ldr	r0, [pc, #16]	; (8000e8c <BSP_LCD_DisplayOn+0x30>)
}
 8000e7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8000e7e:	f001 bd45 	b.w	800290c <HAL_GPIO_WritePin>
 8000e82:	bf00      	nop
 8000e84:	200408f8 	.word	0x200408f8
 8000e88:	40022000 	.word	0x40022000
 8000e8c:	40022800 	.word	0x40022800

08000e90 <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000e90:	4b4e      	ldr	r3, [pc, #312]	; (8000fcc <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8000e92:	f04f 0c10 	mov.w	ip, #16
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000e96:	484e      	ldr	r0, [pc, #312]	; (8000fd0 <BSP_LCD_MspInit+0x140>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e9a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
{
 8000e9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000ea2:	645a      	str	r2, [r3, #68]	; 0x44
{
 8000ea4:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000ea6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000ea8:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8000eaa:	250e      	movs	r5, #14
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8000eac:	2700      	movs	r7, #0
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000eae:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000eb2:	a909      	add	r1, sp, #36	; 0x24
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8000eb4:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8000eb8:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8000fe0 <BSP_LCD_MspInit+0x150>
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000ebc:	9200      	str	r2, [sp, #0]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8000ebe:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000ec2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8000ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ec6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000eca:	631a      	str	r2, [r3, #48]	; 0x30
 8000ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ece:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8000ed2:	9201      	str	r2, [sp, #4]
 8000ed4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ed6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ed8:	ea42 020c 	orr.w	r2, r2, ip
 8000edc:	631a      	str	r2, [r3, #48]	; 0x30
 8000ede:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ee0:	ea02 020c 	and.w	r2, r2, ip
 8000ee4:	9202      	str	r2, [sp, #8]
 8000ee6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ee8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000eee:	631a      	str	r2, [r3, #48]	; 0x30
 8000ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ef2:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000ef6:	9203      	str	r2, [sp, #12]
 8000ef8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000efa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000efc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f00:	631a      	str	r2, [r3, #48]	; 0x30
 8000f02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f04:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000f08:	9204      	str	r2, [sp, #16]
 8000f0a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f12:	631a      	str	r2, [r3, #48]	; 0x30
 8000f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f16:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000f1a:	9205      	str	r2, [sp, #20]
 8000f1c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000f1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f24:	631a      	str	r2, [r3, #48]	; 0x30
 8000f26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f28:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000f2c:	9206      	str	r2, [sp, #24]
 8000f2e:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 8000f30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f36:	631a      	str	r2, [r3, #48]	; 0x30
 8000f38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f3a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000f3e:	9207      	str	r2, [sp, #28]
 8000f40:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8000f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f48:	631a      	str	r2, [r3, #48]	; 0x30
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8000f4c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8000f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8000f54:	970b      	str	r7, [sp, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000f56:	940a      	str	r4, [sp, #40]	; 0x28
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8000f58:	9308      	str	r3, [sp, #32]
 8000f5a:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8000f5c:	940c      	str	r4, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8000f5e:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000f60:	f001 fbb6 	bl	80026d0 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8000f64:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8000f66:	a909      	add	r1, sp, #36	; 0x24
 8000f68:	481a      	ldr	r0, [pc, #104]	; (8000fd4 <BSP_LCD_MspInit+0x144>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8000f6a:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8000f6c:	4f1a      	ldr	r7, [pc, #104]	; (8000fd8 <BSP_LCD_MspInit+0x148>)
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8000f6e:	e9cd 6409 	strd	r6, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8000f72:	f001 fbad 	bl	80026d0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8000f76:	f44f 4366 	mov.w	r3, #58880	; 0xe600
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8000f7a:	a909      	add	r1, sp, #36	; 0x24
 8000f7c:	4648      	mov	r0, r9
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8000f7e:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000f80:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8000f82:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8000f84:	f001 fba4 	bl	80026d0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8000f88:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8000f8c:	a909      	add	r1, sp, #36	; 0x24
 8000f8e:	4813      	ldr	r0, [pc, #76]	; (8000fdc <BSP_LCD_MspInit+0x14c>)
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8000f90:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000f92:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8000f94:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8000f96:	f001 fb9b 	bl	80026d0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8000f9a:	23f7      	movs	r3, #247	; 0xf7
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8000f9c:	a909      	add	r1, sp, #36	; 0x24
 8000f9e:	4638      	mov	r0, r7
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000fa0:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8000fa2:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8000fa4:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8000fa6:	f001 fb93 	bl	80026d0 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8000faa:	4648      	mov	r0, r9
 8000fac:	a909      	add	r1, sp, #36	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8000fae:	e9cd 6809 	strd	r6, r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8000fb2:	f001 fb8d 	bl	80026d0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8000fb6:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8000fb8:	a909      	add	r1, sp, #36	; 0x24
 8000fba:	4638      	mov	r0, r7
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8000fbc:	e9cd 3809 	strd	r3, r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8000fc0:	f001 fb86 	bl	80026d0 <HAL_GPIO_Init>
}
 8000fc4:	b00f      	add	sp, #60	; 0x3c
 8000fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40021800 	.word	0x40021800
 8000fd8:	40022800 	.word	0x40022800
 8000fdc:	40022400 	.word	0x40022400
 8000fe0:	40022000 	.word	0x40022000

08000fe4 <BSP_LCD_ClockConfig>:
{
 8000fe4:	b430      	push	{r4, r5}
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <BSP_LCD_ClockConfig+0x20>)
 8000fe8:	2508      	movs	r5, #8
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8000fea:	24c0      	movs	r4, #192	; 0xc0
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8000fec:	2105      	movs	r1, #5
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8000fee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000ff2:	601d      	str	r5, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8000ff4:	615c      	str	r4, [r3, #20]
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8000ff6:	4618      	mov	r0, r3
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8000ff8:	61d9      	str	r1, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8000ffa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000ffc:	bc30      	pop	{r4, r5}
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8000ffe:	f002 bd2b 	b.w	8003a58 <HAL_RCCEx_PeriphCLKConfig>
 8001002:	bf00      	nop
 8001004:	20000174 	.word	0x20000174

08001008 <BSP_LCD_Init>:
{    
 8001008:	b538      	push	{r3, r4, r5, lr}
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800100a:	2209      	movs	r2, #9
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800100c:	4c25      	ldr	r4, [pc, #148]	; (80010a4 <BSP_LCD_Init+0x9c>)
 800100e:	2528      	movs	r5, #40	; 0x28
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001010:	2335      	movs	r3, #53	; 0x35
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001012:	200b      	movs	r0, #11
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001014:	f240 111b 	movw	r1, #283	; 0x11b
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8001018:	6165      	str	r5, [r4, #20]
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800101a:	f240 2515 	movw	r5, #533	; 0x215
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800101e:	61a2      	str	r2, [r4, #24]
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8001020:	f240 121d 	movw	r2, #285	; 0x11d
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001024:	61e3      	str	r3, [r4, #28]
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8001026:	f240 2335 	movw	r3, #565	; 0x235
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800102a:	6220      	str	r0, [r4, #32]
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800102c:	4620      	mov	r0, r4
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800102e:	62a1      	str	r1, [r4, #40]	; 0x28
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8001030:	2100      	movs	r1, #0
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001032:	6265      	str	r5, [r4, #36]	; 0x24
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8001034:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8001038:	e9c4 320b 	strd	r3, r2, [r4, #44]	; 0x2c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800103c:	f7ff ffd2 	bl	8000fe4 <BSP_LCD_ClockConfig>
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8001040:	2300      	movs	r3, #0
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8001042:	f44f 7188 	mov.w	r1, #272	; 0x110
  hLtdcHandler.Instance = LTDC;
 8001046:	4a18      	ldr	r2, [pc, #96]	; (80010a8 <BSP_LCD_Init+0xa0>)
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8001048:	4620      	mov	r0, r4
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800104a:	86a3      	strh	r3, [r4, #52]	; 0x34
  hLtdcHandler.Instance = LTDC;
 800104c:	6022      	str	r2, [r4, #0]
  hLtdcHandler.Init.Backcolor.Green = 0;
 800104e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8001052:	e9c4 5118 	strd	r5, r1, [r4, #96]	; 0x60
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8001056:	e9c4 3301 	strd	r3, r3, [r4, #4]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800105a:	e9c4 3303 	strd	r3, r3, [r4, #12]
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800105e:	f002 f96b 	bl	8003338 <HAL_LTDC_GetState>
 8001062:	b918      	cbnz	r0, 800106c <BSP_LCD_Init+0x64>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8001064:	4601      	mov	r1, r0
 8001066:	4620      	mov	r0, r4
 8001068:	f7ff ff12 	bl	8000e90 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
 800106c:	480d      	ldr	r0, [pc, #52]	; (80010a4 <BSP_LCD_Init+0x9c>)
 800106e:	f002 f857 	bl	8003120 <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8001072:	2201      	movs	r2, #1
 8001074:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001078:	480c      	ldr	r0, [pc, #48]	; (80010ac <BSP_LCD_Init+0xa4>)
 800107a:	f001 fc47 	bl	800290c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800107e:	2201      	movs	r2, #1
 8001080:	2108      	movs	r1, #8
 8001082:	480b      	ldr	r0, [pc, #44]	; (80010b0 <BSP_LCD_Init+0xa8>)
 8001084:	f001 fc42 	bl	800290c <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 8001088:	f000 f926 	bl	80012d8 <BSP_SDRAM_Init>
  DrawProp[ActiveLayer].pFont = fonts;
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <BSP_LCD_Init+0xac>)
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <BSP_LCD_Init+0xb0>)
}
 8001090:	2000      	movs	r0, #0
  DrawProp[ActiveLayer].pFont = fonts;
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4909      	ldr	r1, [pc, #36]	; (80010bc <BSP_LCD_Init+0xb4>)
 8001096:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800109a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800109e:	6099      	str	r1, [r3, #8]
}
 80010a0:	bd38      	pop	{r3, r4, r5, pc}
 80010a2:	bf00      	nop
 80010a4:	200408f8 	.word	0x200408f8
 80010a8:	40016800 	.word	0x40016800
 80010ac:	40022000 	.word	0x40022000
 80010b0:	40022800 	.word	0x40022800
 80010b4:	20000118 	.word	0x20000118
 80010b8:	2000011c 	.word	0x2000011c
 80010bc:	20000030 	.word	0x20000030

080010c0 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80010c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80010c4:	4c25      	ldr	r4, [pc, #148]	; (800115c <BSP_SDRAM_Initialization_sequence+0x9c>)
{
 80010c6:	b083      	sub	sp, #12
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80010c8:	4d25      	ldr	r5, [pc, #148]	; (8001160 <BSP_SDRAM_Initialization_sequence+0xa0>)
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80010ca:	2601      	movs	r6, #1
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80010cc:	2710      	movs	r7, #16
  __IO uint32_t tmpmrd = 0;
 80010ce:	f04f 0800 	mov.w	r8, #0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80010d2:	4621      	mov	r1, r4
{
 80010d4:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80010d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010da:	4628      	mov	r0, r5
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80010dc:	6026      	str	r6, [r4, #0]
  Command.ModeRegisterDefinition = 0;
 80010de:	f8c4 800c 	str.w	r8, [r4, #12]
  __IO uint32_t tmpmrd = 0;
 80010e2:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80010e6:	e9c4 7601 	strd	r7, r6, [r4, #4]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80010ea:	f003 fd11 	bl	8004b10 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80010ee:	4630      	mov	r0, r6
 80010f0:	f000 faac 	bl	800164c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80010f4:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80010f6:	4621      	mov	r1, r4
 80010f8:	4628      	mov	r0, r5
 80010fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80010fe:	6023      	str	r3, [r4, #0]
  Command.ModeRegisterDefinition = 0;
 8001100:	f8c4 800c 	str.w	r8, [r4, #12]
  Command.AutoRefreshNumber      = 1;
 8001104:	e9c4 7601 	strd	r7, r6, [r4, #4]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001108:	f003 fd02 	bl	8004b10 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800110c:	f04f 0c03 	mov.w	ip, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
 8001110:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001112:	4621      	mov	r1, r4
 8001114:	4628      	mov	r0, r5
 8001116:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800111a:	f8c4 c000 	str.w	ip, [r4]
  Command.AutoRefreshNumber      = 8;
 800111e:	60a3      	str	r3, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001120:	6067      	str	r7, [r4, #4]
  Command.ModeRegisterDefinition = 0;
 8001122:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001126:	f003 fcf3 	bl	8004b10 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800112a:	f44f 7308 	mov.w	r3, #544	; 0x220
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800112e:	f04f 0c04 	mov.w	ip, #4
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001132:	4621      	mov	r1, r4
 8001134:	4628      	mov	r0, r5
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001136:	9301      	str	r3, [sp, #4]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001138:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.ModeRegisterDefinition = tmpmrd;
 800113c:	9b01      	ldr	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800113e:	f8c4 c000 	str.w	ip, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 8001142:	60e3      	str	r3, [r4, #12]
  Command.AutoRefreshNumber      = 1;
 8001144:	e9c4 7601 	strd	r7, r6, [r4, #4]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001148:	f003 fce2 	bl	8004b10 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800114c:	4649      	mov	r1, r9
 800114e:	4628      	mov	r0, r5
}
 8001150:	b003      	add	sp, #12
 8001152:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001156:	f003 bcf5 	b.w	8004b44 <HAL_SDRAM_ProgramRefreshRate>
 800115a:	bf00      	nop
 800115c:	200001f8 	.word	0x200001f8
 8001160:	200409a0 	.word	0x200409a0

08001164 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001164:	4b53      	ldr	r3, [pc, #332]	; (80012b4 <BSP_SDRAM_MspInit+0x150>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001166:	2102      	movs	r1, #2
  __HAL_RCC_FMC_CLK_ENABLE();
 8001168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800116a:	f042 0201 	orr.w	r2, r2, #1
{  
 800116e:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 8001170:	639a      	str	r2, [r3, #56]	; 0x38
{  
 8001172:	4606      	mov	r6, r0
  __HAL_RCC_FMC_CLK_ENABLE();
 8001174:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001176:	2001      	movs	r0, #1
{  
 8001178:	b08e      	sub	sp, #56	; 0x38
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800117a:	2508      	movs	r5, #8
  __HAL_RCC_FMC_CLK_ENABLE();
 800117c:	4002      	ands	r2, r0
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800117e:	ac0e      	add	r4, sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 8001180:	9201      	str	r2, [sp, #4]
 8001182:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8001184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001186:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800118a:	631a      	str	r2, [r3, #48]	; 0x30
 800118c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800118e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001192:	9202      	str	r2, [sp, #8]
 8001194:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001198:	f042 0204 	orr.w	r2, r2, #4
 800119c:	631a      	str	r2, [r3, #48]	; 0x30
 800119e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011a0:	f002 0204 	and.w	r2, r2, #4
 80011a4:	9203      	str	r2, [sp, #12]
 80011a6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011aa:	432a      	orrs	r2, r5
 80011ac:	631a      	str	r2, [r3, #48]	; 0x30
 80011ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011b0:	402a      	ands	r2, r5
 80011b2:	9204      	str	r2, [sp, #16]
 80011b4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011b8:	f042 0210 	orr.w	r2, r2, #16
 80011bc:	631a      	str	r2, [r3, #48]	; 0x30
 80011be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011c0:	f002 0210 	and.w	r2, r2, #16
 80011c4:	9205      	str	r2, [sp, #20]
 80011c6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011ca:	f042 0220 	orr.w	r2, r2, #32
 80011ce:	631a      	str	r2, [r3, #48]	; 0x30
 80011d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011d2:	f002 0220 	and.w	r2, r2, #32
 80011d6:	9206      	str	r2, [sp, #24]
 80011d8:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011e0:	631a      	str	r2, [r3, #48]	; 0x30
 80011e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011e4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80011e8:	9207      	str	r2, [sp, #28]
 80011ea:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011f2:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80011f4:	220c      	movs	r2, #12
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80011f8:	f844 5d14 	str.w	r5, [r4, #-20]!
  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80011fc:	2500      	movs	r5, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001202:	910a      	str	r1, [sp, #40]	; 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8001204:	910c      	str	r1, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8001206:	4621      	mov	r1, r4
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001208:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800120a:	900b      	str	r0, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800120c:	482a      	ldr	r0, [pc, #168]	; (80012b8 <BSP_SDRAM_MspInit+0x154>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800120e:	920d      	str	r2, [sp, #52]	; 0x34
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001210:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8001212:	f001 fa5d 	bl	80026d0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8001216:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800121a:	4621      	mov	r1, r4
 800121c:	4827      	ldr	r0, [pc, #156]	; (80012bc <BSP_SDRAM_MspInit+0x158>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800121e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001220:	f001 fa56 	bl	80026d0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001224:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001228:	4621      	mov	r1, r4
 800122a:	4825      	ldr	r0, [pc, #148]	; (80012c0 <BSP_SDRAM_MspInit+0x15c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800122c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800122e:	f001 fa4f 	bl	80026d0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001232:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001236:	4621      	mov	r1, r4
 8001238:	4822      	ldr	r0, [pc, #136]	; (80012c4 <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800123a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800123c:	f001 fa48 	bl	80026d0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8001240:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001244:	4621      	mov	r1, r4
 8001246:	4820      	ldr	r0, [pc, #128]	; (80012c8 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8001248:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800124a:	f001 fa41 	bl	80026d0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800124e:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001250:	4621      	mov	r1, r4
 8001252:	481e      	ldr	r0, [pc, #120]	; (80012cc <BSP_SDRAM_MspInit+0x168>)
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001254:	4c1e      	ldr	r4, [pc, #120]	; (80012d0 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8001256:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001258:	f001 fa3a 	bl	80026d0 <HAL_GPIO_Init>
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800125c:	f44f 7300 	mov.w	r3, #512	; 0x200
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001260:	2180      	movs	r1, #128	; 0x80
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8001262:	f44f 6280 	mov.w	r2, #1024	; 0x400
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001266:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800126a:	60e3      	str	r3, [r4, #12]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800126c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001270:	60a1      	str	r1, [r4, #8]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001272:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8001276:	6122      	str	r2, [r4, #16]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001278:	2203      	movs	r2, #3
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800127a:	6223      	str	r3, [r4, #32]
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800127c:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <BSP_SDRAM_MspInit+0x170>)
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800127e:	6325      	str	r5, [r4, #48]	; 0x30
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001280:	6160      	str	r0, [r4, #20]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8001282:	4620      	mov	r0, r4
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001284:	6334      	str	r4, [r6, #48]	; 0x30
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001286:	61a1      	str	r1, [r4, #24]
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001288:	62a2      	str	r2, [r4, #40]	; 0x28
  dma_handle.Init.Mode                = DMA_NORMAL;
 800128a:	61e5      	str	r5, [r4, #28]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 800128c:	6265      	str	r5, [r4, #36]	; 0x24
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800128e:	62e5      	str	r5, [r4, #44]	; 0x2c
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001290:	63a6      	str	r6, [r4, #56]	; 0x38
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001292:	e9c4 3500 	strd	r3, r5, [r4]
  HAL_DMA_DeInit(&dma_handle);
 8001296:	f000 fec3 	bl	8002020 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 800129a:	4620      	mov	r0, r4
 800129c:	f000 fe24 	bl	8001ee8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80012a0:	462a      	mov	r2, r5
 80012a2:	210f      	movs	r1, #15
 80012a4:	2038      	movs	r0, #56	; 0x38
 80012a6:	f000 fd77 	bl	8001d98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80012aa:	2038      	movs	r0, #56	; 0x38
 80012ac:	f000 fdaa 	bl	8001e04 <HAL_NVIC_EnableIRQ>
}
 80012b0:	b00e      	add	sp, #56	; 0x38
 80012b2:	bd70      	pop	{r4, r5, r6, pc}
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40020800 	.word	0x40020800
 80012bc:	40020c00 	.word	0x40020c00
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40021400 	.word	0x40021400
 80012c8:	40021800 	.word	0x40021800
 80012cc:	40021c00 	.word	0x40021c00
 80012d0:	20000224 	.word	0x20000224
 80012d4:	40026410 	.word	0x40026410

080012d8 <BSP_SDRAM_Init>:
{ 
 80012d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80012da:	481d      	ldr	r0, [pc, #116]	; (8001350 <BSP_SDRAM_Init+0x78>)
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80012dc:	2110      	movs	r1, #16
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80012de:	4c1d      	ldr	r4, [pc, #116]	; (8001354 <BSP_SDRAM_Init+0x7c>)
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80012e0:	2540      	movs	r5, #64	; 0x40
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80012e2:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80012e6:	2300      	movs	r3, #0
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80012e8:	6020      	str	r0, [r4, #0]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80012ea:	f44f 6000 	mov.w	r0, #2048	; 0x800
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80012ee:	6121      	str	r1, [r4, #16]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80012f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80012f4:	6165      	str	r5, [r4, #20]
  Timing.SelfRefreshTime      = 4;
 80012f6:	2704      	movs	r7, #4
  Timing.LoadToActiveDelay    = 2;
 80012f8:	4d17      	ldr	r5, [pc, #92]	; (8001358 <BSP_SDRAM_Init+0x80>)
  Timing.ExitSelfRefreshDelay = 7;
 80012fa:	2607      	movs	r6, #7
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80012fc:	61a2      	str	r2, [r4, #24]
  Timing.LoadToActiveDelay    = 2;
 80012fe:	2202      	movs	r2, #2
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001300:	6220      	str	r0, [r4, #32]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001302:	4620      	mov	r0, r4
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001304:	6261      	str	r1, [r4, #36]	; 0x24
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001306:	4619      	mov	r1, r3
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001308:	61e3      	str	r3, [r4, #28]
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800130a:	62a3      	str	r3, [r4, #40]	; 0x28
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800130c:	60e7      	str	r7, [r4, #12]
  Timing.LoadToActiveDelay    = 2;
 800130e:	602a      	str	r2, [r5, #0]
  Timing.RCDDelay             = 2;
 8001310:	61aa      	str	r2, [r5, #24]
  Timing.SelfRefreshTime      = 4;
 8001312:	60af      	str	r7, [r5, #8]
  Timing.ExitSelfRefreshDelay = 7;
 8001314:	606e      	str	r6, [r5, #4]
  Timing.RowCycleDelay        = 7;
 8001316:	60ee      	str	r6, [r5, #12]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001318:	e9c4 3301 	strd	r3, r3, [r4, #4]
  Timing.RPDelay              = 2;
 800131c:	e9c5 2204 	strd	r2, r2, [r5, #16]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001320:	f7ff ff20 	bl	8001164 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001324:	4620      	mov	r0, r4
 8001326:	4629      	mov	r1, r5
    sdramstatus = SDRAM_ERROR;
 8001328:	4c0c      	ldr	r4, [pc, #48]	; (800135c <BSP_SDRAM_Init+0x84>)
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800132a:	f003 fbcf 	bl	8004acc <HAL_SDRAM_Init>
 800132e:	b930      	cbnz	r0, 800133e <BSP_SDRAM_Init+0x66>
    sdramstatus = SDRAM_OK;
 8001330:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001332:	f240 6003 	movw	r0, #1539	; 0x603
 8001336:	f7ff fec3 	bl	80010c0 <BSP_SDRAM_Initialization_sequence>
}
 800133a:	7820      	ldrb	r0, [r4, #0]
 800133c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sdramstatus = SDRAM_ERROR;
 800133e:	2301      	movs	r3, #1
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001340:	f240 6003 	movw	r0, #1539	; 0x603
    sdramstatus = SDRAM_ERROR;
 8001344:	7023      	strb	r3, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001346:	f7ff febb 	bl	80010c0 <BSP_SDRAM_Initialization_sequence>
}
 800134a:	7820      	ldrb	r0, [r4, #0]
 800134c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800134e:	bf00      	nop
 8001350:	a0000140 	.word	0xa0000140
 8001354:	200409a0 	.word	0x200409a0
 8001358:	20000208 	.word	0x20000208
 800135c:	20000040 	.word	0x20000040

08001360 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8001360:	b570      	push	{r4, r5, r6, lr}
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <BSP_TS_Init+0x3c>)
  tsYBoundary = ts_SizeY;
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8001364:	4c0e      	ldr	r4, [pc, #56]	; (80013a0 <BSP_TS_Init+0x40>)
  tsYBoundary = ts_SizeY;
 8001366:	4a0f      	ldr	r2, [pc, #60]	; (80013a4 <BSP_TS_Init+0x44>)
  tsXBoundary = ts_SizeX;
 8001368:	8018      	strh	r0, [r3, #0]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800136a:	2070      	movs	r0, #112	; 0x70
 800136c:	6823      	ldr	r3, [r4, #0]
  tsYBoundary = ts_SizeY;
 800136e:	8011      	strh	r1, [r2, #0]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8001370:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8001372:	6863      	ldr	r3, [r4, #4]
 8001374:	2070      	movs	r0, #112	; 0x70
 8001376:	4798      	blx	r3
 8001378:	2851      	cmp	r0, #81	; 0x51
 800137a:	d10c      	bne.n	8001396 <BSP_TS_Init+0x36>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
    I2cAddress = TS_I2C_ADDRESS;
 800137c:	2370      	movs	r3, #112	; 0x70
 800137e:	4e0a      	ldr	r6, [pc, #40]	; (80013a8 <BSP_TS_Init+0x48>)
    tsOrientation = TS_SWAP_XY;
 8001380:	2108      	movs	r1, #8
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <BSP_TS_Init+0x4c>)
    tsDriver = &ft5336_ts_drv;
 8001384:	4d0a      	ldr	r5, [pc, #40]	; (80013b0 <BSP_TS_Init+0x50>)

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8001386:	4618      	mov	r0, r3
    I2cAddress = TS_I2C_ADDRESS;
 8001388:	7033      	strb	r3, [r6, #0]
    tsDriver->Start(I2cAddress);
 800138a:	68e3      	ldr	r3, [r4, #12]
    tsDriver = &ft5336_ts_drv;
 800138c:	602c      	str	r4, [r5, #0]
    tsOrientation = TS_SWAP_XY;
 800138e:	7011      	strb	r1, [r2, #0]
    tsDriver->Start(I2cAddress);
 8001390:	4798      	blx	r3
  uint8_t status = TS_OK;
 8001392:	2000      	movs	r0, #0
  {
    status = TS_DEVICE_NOT_FOUND;
  }

  return status;
}
 8001394:	bd70      	pop	{r4, r5, r6, pc}
    status = TS_DEVICE_NOT_FOUND;
 8001396:	2003      	movs	r0, #3
}
 8001398:	bd70      	pop	{r4, r5, r6, pc}
 800139a:	bf00      	nop
 800139c:	200002b6 	.word	0x200002b6
 80013a0:	20000000 	.word	0x20000000
 80013a4:	200002b8 	.word	0x200002b8
 80013a8:	20000284 	.word	0x20000284
 80013ac:	200002b4 	.word	0x200002b4
 80013b0:	200002b0 	.word	0x200002b0

080013b4 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 80013b4:	b530      	push	{r4, r5, lr}
 80013b6:	b083      	sub	sp, #12
  uint32_t gestureId = 0;
  uint8_t  ts_status = TS_OK;

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80013b8:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <BSP_TS_Get_GestureId+0x80>)
  uint32_t gestureId = 0;
 80013ba:	2400      	movs	r4, #0
{
 80013bc:	4605      	mov	r5, r0
  uint32_t gestureId = 0;
 80013be:	a902      	add	r1, sp, #8
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80013c0:	7818      	ldrb	r0, [r3, #0]
  uint32_t gestureId = 0;
 80013c2:	f841 4d04 	str.w	r4, [r1, #-4]!
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80013c6:	f7ff f975 	bl	80006b4 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 80013ca:	9801      	ldr	r0, [sp, #4]
 80013cc:	2818      	cmp	r0, #24
 80013ce:	d02b      	beq.n	8001428 <BSP_TS_Get_GestureId+0x74>
 80013d0:	d908      	bls.n	80013e4 <BSP_TS_Get_GestureId+0x30>
 80013d2:	2840      	cmp	r0, #64	; 0x40
 80013d4:	d019      	beq.n	800140a <BSP_TS_Get_GestureId+0x56>
 80013d6:	2849      	cmp	r0, #73	; 0x49
 80013d8:	d00d      	beq.n	80013f6 <BSP_TS_Get_GestureId+0x42>
 80013da:	281c      	cmp	r0, #28
 80013dc:	d01a      	beq.n	8001414 <BSP_TS_Get_GestureId+0x60>
      break;
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
      break;
    default :
      ts_status = TS_ERROR;
 80013de:	2001      	movs	r0, #1
      break;
  } /* of switch(gestureId) */

  return(ts_status);
}
 80013e0:	b003      	add	sp, #12
 80013e2:	bd30      	pop	{r4, r5, pc}
  switch(gestureId)
 80013e4:	2810      	cmp	r0, #16
 80013e6:	d01a      	beq.n	800141e <BSP_TS_Get_GestureId+0x6a>
 80013e8:	2814      	cmp	r0, #20
 80013ea:	d009      	beq.n	8001400 <BSP_TS_Get_GestureId+0x4c>
 80013ec:	2800      	cmp	r0, #0
 80013ee:	d1f6      	bne.n	80013de <BSP_TS_Get_GestureId+0x2a>
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80013f0:	62a8      	str	r0, [r5, #40]	; 0x28
}
 80013f2:	b003      	add	sp, #12
 80013f4:	bd30      	pop	{r4, r5, pc}
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80013f6:	2306      	movs	r3, #6
  uint8_t  ts_status = TS_OK;
 80013f8:	4620      	mov	r0, r4
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80013fa:	62ab      	str	r3, [r5, #40]	; 0x28
}
 80013fc:	b003      	add	sp, #12
 80013fe:	bd30      	pop	{r4, r5, pc}
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8001400:	2302      	movs	r3, #2
  uint8_t  ts_status = TS_OK;
 8001402:	4620      	mov	r0, r4
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8001404:	62ab      	str	r3, [r5, #40]	; 0x28
}
 8001406:	b003      	add	sp, #12
 8001408:	bd30      	pop	{r4, r5, pc}
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 800140a:	2305      	movs	r3, #5
  uint8_t  ts_status = TS_OK;
 800140c:	4620      	mov	r0, r4
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 800140e:	62ab      	str	r3, [r5, #40]	; 0x28
}
 8001410:	b003      	add	sp, #12
 8001412:	bd30      	pop	{r4, r5, pc}
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8001414:	2304      	movs	r3, #4
  uint8_t  ts_status = TS_OK;
 8001416:	4620      	mov	r0, r4
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8001418:	62ab      	str	r3, [r5, #40]	; 0x28
}
 800141a:	b003      	add	sp, #12
 800141c:	bd30      	pop	{r4, r5, pc}
      TS_State->gestureId = GEST_ID_MOVE_UP;
 800141e:	2301      	movs	r3, #1
  uint8_t  ts_status = TS_OK;
 8001420:	4620      	mov	r0, r4
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8001422:	62ab      	str	r3, [r5, #40]	; 0x28
}
 8001424:	b003      	add	sp, #12
 8001426:	bd30      	pop	{r4, r5, pc}
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8001428:	2303      	movs	r3, #3
  uint8_t  ts_status = TS_OK;
 800142a:	4620      	mov	r0, r4
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 800142c:	62ab      	str	r3, [r5, #40]	; 0x28
}
 800142e:	b003      	add	sp, #12
 8001430:	bd30      	pop	{r4, r5, pc}
 8001432:	bf00      	nop
 8001434:	20000284 	.word	0x20000284

08001438 <BSP_TS_GetState>:
{
 8001438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800143c:	f8df b17c 	ldr.w	fp, [pc, #380]	; 80015bc <BSP_TS_GetState+0x184>
{
 8001440:	b095      	sub	sp, #84	; 0x54
  uint32_t weight = 0;
 8001442:	2400      	movs	r4, #0
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8001444:	4a59      	ldr	r2, [pc, #356]	; (80015ac <BSP_TS_GetState+0x174>)
 8001446:	f8db 3000 	ldr.w	r3, [fp]
{
 800144a:	4605      	mov	r5, r0
 800144c:	9003      	str	r0, [sp, #12]
  uint32_t weight = 0;
 800144e:	9405      	str	r4, [sp, #20]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	7810      	ldrb	r0, [r2, #0]
  uint32_t event = 0;
 8001454:	e9cd 4406 	strd	r4, r4, [sp, #24]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8001458:	4798      	blx	r3
 800145a:	7028      	strb	r0, [r5, #0]
  if(TS_State->touchDetected)
 800145c:	2800      	cmp	r0, #0
 800145e:	f000 8081 	beq.w	8001564 <BSP_TS_GetState+0x12c>
 8001462:	462b      	mov	r3, r5
 8001464:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 8001468:	ad0e      	add	r5, sp, #56	; 0x38
 800146a:	f8df a154 	ldr.w	sl, [pc, #340]	; 80015c0 <BSP_TS_GetState+0x188>
 800146e:	f103 0716 	add.w	r7, r3, #22
 8001472:	1c9e      	adds	r6, r3, #2
 8001474:	f8df 914c 	ldr.w	r9, [pc, #332]	; 80015c4 <BSP_TS_GetState+0x18c>
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8001478:	f8db 3000 	ldr.w	r3, [fp]
 800147c:	eb08 0244 	add.w	r2, r8, r4, lsl #1
 8001480:	484a      	ldr	r0, [pc, #296]	; (80015ac <BSP_TS_GetState+0x174>)
 8001482:	4629      	mov	r1, r5
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	7800      	ldrb	r0, [r0, #0]
 8001488:	4798      	blx	r3
      if(tsOrientation == TS_SWAP_NONE)
 800148a:	4b49      	ldr	r3, [pc, #292]	; (80015b0 <BSP_TS_GetState+0x178>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d07e      	beq.n	8001590 <BSP_TS_GetState+0x158>
      if(tsOrientation & TS_SWAP_X)
 8001492:	0799      	lsls	r1, r3, #30
 8001494:	d505      	bpl.n	80014a2 <BSP_TS_GetState+0x6a>
        x[index] = 4096 - brute_x[index];
 8001496:	882a      	ldrh	r2, [r5, #0]
 8001498:	a908      	add	r1, sp, #32
 800149a:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 800149e:	f821 2014 	strh.w	r2, [r1, r4, lsl #1]
      if(tsOrientation & TS_SWAP_Y)
 80014a2:	075a      	lsls	r2, r3, #29
 80014a4:	d506      	bpl.n	80014b4 <BSP_TS_GetState+0x7c>
        y[index] = 4096 - brute_y[index];
 80014a6:	f838 2014 	ldrh.w	r2, [r8, r4, lsl #1]
 80014aa:	a90b      	add	r1, sp, #44	; 0x2c
 80014ac:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 80014b0:	f821 2014 	strh.w	r2, [r1, r4, lsl #1]
      if(tsOrientation & TS_SWAP_XY)
 80014b4:	071b      	lsls	r3, r3, #28
 80014b6:	d461      	bmi.n	800157c <BSP_TS_GetState+0x144>
 80014b8:	ab08      	add	r3, sp, #32
 80014ba:	f833 c014 	ldrh.w	ip, [r3, r4, lsl #1]
 80014be:	ab0b      	add	r3, sp, #44	; 0x2c
 80014c0:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80014c4:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]
 80014c8:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80014cc:	b293      	uxth	r3, r2
 80014ce:	4594      	cmp	ip, r2
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80014d0:	f859 000e 	ldr.w	r0, [r9, lr]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80014d4:	bf8c      	ite	hi
 80014d6:	ebac 0303 	subhi.w	r3, ip, r3
 80014da:	eba3 030c 	subls.w	r3, r3, ip
 80014de:	b282      	uxth	r2, r0
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80014e0:	4281      	cmp	r1, r0
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80014e2:	b29b      	uxth	r3, r3
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80014e4:	bf8c      	ite	hi
 80014e6:	1a8a      	subhi	r2, r1, r2
 80014e8:	1a52      	subls	r2, r2, r1
 80014ea:	b292      	uxth	r2, r2
      if ((x_diff + y_diff) > 5)
 80014ec:	4413      	add	r3, r2
 80014ee:	2b05      	cmp	r3, #5
 80014f0:	dd03      	ble.n	80014fa <BSP_TS_GetState+0xc2>
        _x[index] = x[index];
 80014f2:	f84a c00e 	str.w	ip, [sl, lr]
        _y[index] = y[index];
 80014f6:	f849 100e 	str.w	r1, [r9, lr]
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80014fa:	4b2c      	ldr	r3, [pc, #176]	; (80015ac <BSP_TS_GetState+0x174>)
 80014fc:	7818      	ldrb	r0, [r3, #0]
 80014fe:	2870      	cmp	r0, #112	; 0x70
 8001500:	d050      	beq.n	80015a4 <BSP_TS_GetState+0x16c>
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8001502:	4b2c      	ldr	r3, [pc, #176]	; (80015b4 <BSP_TS_GetState+0x17c>)
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8001504:	492c      	ldr	r1, [pc, #176]	; (80015b8 <BSP_TS_GetState+0x180>)
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8001506:	f85a 200e 	ldr.w	r2, [sl, lr]
 800150a:	f8b3 c000 	ldrh.w	ip, [r3]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800150e:	8809      	ldrh	r1, [r1, #0]
 8001510:	f859 300e 	ldr.w	r3, [r9, lr]
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8001514:	fb02 f20c 	mul.w	r2, r2, ip
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8001518:	fb03 f301 	mul.w	r3, r3, r1
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 800151c:	0b12      	lsrs	r2, r2, #12
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800151e:	0b1b      	lsrs	r3, r3, #12
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8001520:	8032      	strh	r2, [r6, #0]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8001522:	8173      	strh	r3, [r6, #10]
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8001524:	ab07      	add	r3, sp, #28
 8001526:	aa05      	add	r2, sp, #20
 8001528:	4621      	mov	r1, r4
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	ab06      	add	r3, sp, #24
 800152e:	f7ff f8d3 	bl	80006d8 <ft5336_TS_GetTouchInfo>
      switch(event)
 8001532:	9b07      	ldr	r3, [sp, #28]
      TS_State->touchArea[index]   = area;
 8001534:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
      TS_State->touchWeight[index] = weight;
 8001538:	f807 1b01 	strb.w	r1, [r7], #1
      TS_State->touchArea[index]   = area;
 800153c:	727a      	strb	r2, [r7, #9]
      switch(event)
 800153e:	2b03      	cmp	r3, #3
 8001540:	d806      	bhi.n	8001550 <BSP_TS_GetState+0x118>
 8001542:	e8df f003 	tbb	[pc, r3]
 8001546:	1815      	.short	0x1815
 8001548:	0212      	.short	0x0212
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 800154a:	f04f 0300 	mov.w	r3, #0
 800154e:	713b      	strb	r3, [r7, #4]
    for(index=0; index < TS_State->touchDetected; index++)
 8001550:	9b03      	ldr	r3, [sp, #12]
 8001552:	3401      	adds	r4, #1
 8001554:	3502      	adds	r5, #2
 8001556:	3602      	adds	r6, #2
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	42a3      	cmp	r3, r4
 800155c:	d88c      	bhi.n	8001478 <BSP_TS_GetState+0x40>
    ts_status = BSP_TS_Get_GestureId(TS_State);
 800155e:	9803      	ldr	r0, [sp, #12]
 8001560:	f7ff ff28 	bl	80013b4 <BSP_TS_Get_GestureId>
}
 8001564:	b015      	add	sp, #84	; 0x54
 8001566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 800156a:	2303      	movs	r3, #3
 800156c:	713b      	strb	r3, [r7, #4]
          break;
 800156e:	e7ef      	b.n	8001550 <BSP_TS_GetState+0x118>
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8001570:	2301      	movs	r3, #1
 8001572:	713b      	strb	r3, [r7, #4]
          break;
 8001574:	e7ec      	b.n	8001550 <BSP_TS_GetState+0x118>
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8001576:	2302      	movs	r3, #2
 8001578:	713b      	strb	r3, [r7, #4]
          break;
 800157a:	e7e9      	b.n	8001550 <BSP_TS_GetState+0x118>
        y[index] = brute_x[index];
 800157c:	ab0b      	add	r3, sp, #44	; 0x2c
 800157e:	8829      	ldrh	r1, [r5, #0]
        x[index] = brute_y[index];
 8001580:	f838 c014 	ldrh.w	ip, [r8, r4, lsl #1]
        y[index] = brute_x[index];
 8001584:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
        x[index] = brute_y[index];
 8001588:	ab08      	add	r3, sp, #32
 800158a:	f823 c014 	strh.w	ip, [r3, r4, lsl #1]
 800158e:	e799      	b.n	80014c4 <BSP_TS_GetState+0x8c>
        x[index] = brute_x[index];
 8001590:	8829      	ldrh	r1, [r5, #0]
 8001592:	a808      	add	r0, sp, #32
        y[index] = brute_y[index];
 8001594:	f838 2014 	ldrh.w	r2, [r8, r4, lsl #1]
        x[index] = brute_x[index];
 8001598:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
        y[index] = brute_y[index];
 800159c:	a90b      	add	r1, sp, #44	; 0x2c
 800159e:	f821 2014 	strh.w	r2, [r1, r4, lsl #1]
 80015a2:	e787      	b.n	80014b4 <BSP_TS_GetState+0x7c>
        TS_State->touchX[index] = x[index];
 80015a4:	f8a6 c000 	strh.w	ip, [r6]
        TS_State->touchY[index] = y[index];
 80015a8:	8171      	strh	r1, [r6, #10]
 80015aa:	e7bb      	b.n	8001524 <BSP_TS_GetState+0xec>
 80015ac:	20000284 	.word	0x20000284
 80015b0:	200002b4 	.word	0x200002b4
 80015b4:	200002b6 	.word	0x200002b6
 80015b8:	200002b8 	.word	0x200002b8
 80015bc:	200002b0 	.word	0x200002b0
 80015c0:	20000288 	.word	0x20000288
 80015c4:	2000029c 	.word	0x2000029c

080015c8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015c8:	4a0e      	ldr	r2, [pc, #56]	; (8001604 <HAL_InitTick+0x3c>)
 80015ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ce:	490e      	ldr	r1, [pc, #56]	; (8001608 <HAL_InitTick+0x40>)
 80015d0:	7812      	ldrb	r2, [r2, #0]
 80015d2:	fbb3 f3f2 	udiv	r3, r3, r2
{
 80015d6:	b510      	push	{r4, lr}
 80015d8:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015da:	6808      	ldr	r0, [r1, #0]
 80015dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80015e0:	f000 fc1e 	bl	8001e20 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e4:	b908      	cbnz	r0, 80015ea <HAL_InitTick+0x22>
 80015e6:	2c0f      	cmp	r4, #15
 80015e8:	d901      	bls.n	80015ee <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80015ea:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 80015ec:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ee:	2200      	movs	r2, #0
 80015f0:	4621      	mov	r1, r4
 80015f2:	f04f 30ff 	mov.w	r0, #4294967295
 80015f6:	f000 fbcf 	bl	8001d98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015fa:	4b04      	ldr	r3, [pc, #16]	; (800160c <HAL_InitTick+0x44>)
 80015fc:	2000      	movs	r0, #0
 80015fe:	601c      	str	r4, [r3, #0]
}
 8001600:	bd10      	pop	{r4, pc}
 8001602:	bf00      	nop
 8001604:	20000041 	.word	0x20000041
 8001608:	200000a4 	.word	0x200000a4
 800160c:	20000044 	.word	0x20000044

08001610 <HAL_Init>:
{
 8001610:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001612:	2003      	movs	r0, #3
 8001614:	f000 fbac 	bl	8001d70 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001618:	2000      	movs	r0, #0
 800161a:	f7ff ffd5 	bl	80015c8 <HAL_InitTick>
  HAL_MspInit();
 800161e:	f005 f943 	bl	80068a8 <HAL_MspInit>
}
 8001622:	2000      	movs	r0, #0
 8001624:	bd08      	pop	{r3, pc}
 8001626:	bf00      	nop

08001628 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001628:	4a03      	ldr	r2, [pc, #12]	; (8001638 <HAL_IncTick+0x10>)
 800162a:	4b04      	ldr	r3, [pc, #16]	; (800163c <HAL_IncTick+0x14>)
 800162c:	6811      	ldr	r1, [r2, #0]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	440b      	add	r3, r1
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	200409d4 	.word	0x200409d4
 800163c:	20000041 	.word	0x20000041

08001640 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001640:	4b01      	ldr	r3, [pc, #4]	; (8001648 <HAL_GetTick+0x8>)
 8001642:	6818      	ldr	r0, [r3, #0]
}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	200409d4 	.word	0x200409d4

0800164c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800164c:	b538      	push	{r3, r4, r5, lr}
 800164e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001650:	f7ff fff6 	bl	8001640 <HAL_GetTick>
 8001654:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001656:	1c63      	adds	r3, r4, #1
 8001658:	d002      	beq.n	8001660 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800165a:	4b04      	ldr	r3, [pc, #16]	; (800166c <HAL_Delay+0x20>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001660:	f7ff ffee 	bl	8001640 <HAL_GetTick>
 8001664:	1b40      	subs	r0, r0, r5
 8001666:	42a0      	cmp	r0, r4
 8001668:	d3fa      	bcc.n	8001660 <HAL_Delay+0x14>
  {
  }
}
 800166a:	bd38      	pop	{r3, r4, r5, pc}
 800166c:	20000041 	.word	0x20000041

08001670 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001670:	2800      	cmp	r0, #0
 8001672:	f000 8092 	beq.w	800179a <HAL_ADC_Init+0x12a>
{
 8001676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001678:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800167a:	4604      	mov	r4, r0
 800167c:	2d00      	cmp	r5, #0
 800167e:	f000 8082 	beq.w	8001786 <HAL_ADC_Init+0x116>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001682:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001684:	06db      	lsls	r3, r3, #27
 8001686:	d504      	bpl.n	8001692 <HAL_ADC_Init+0x22>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001688:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 800168a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800168c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 8001690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8001692:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001694:	4a4e      	ldr	r2, [pc, #312]	; (80017d0 <HAL_ADC_Init+0x160>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001696:	494f      	ldr	r1, [pc, #316]	; (80017d4 <HAL_ADC_Init+0x164>)
    ADC_STATE_CLR_SET(hadc->State,
 8001698:	401a      	ands	r2, r3
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800169a:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800169c:	4d4e      	ldr	r5, [pc, #312]	; (80017d8 <HAL_ADC_Init+0x168>)
    ADC_STATE_CLR_SET(hadc->State,
 800169e:	f042 0202 	orr.w	r2, r2, #2
 80016a2:	6422      	str	r2, [r4, #64]	; 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80016a4:	684a      	ldr	r2, [r1, #4]
 80016a6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80016aa:	604a      	str	r2, [r1, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80016ac:	684a      	ldr	r2, [r1, #4]
 80016ae:	6860      	ldr	r0, [r4, #4]
 80016b0:	4302      	orrs	r2, r0
 80016b2:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016b4:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016b6:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016bc:	f8d4 c008 	ldr.w	ip, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016c0:	68e7      	ldr	r7, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016c2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016c4:	6858      	ldr	r0, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016c8:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016cc:	42ae      	cmp	r6, r5
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016ce:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016d0:	6858      	ldr	r0, [r3, #4]
 80016d2:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 80016d6:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016d8:	6859      	ldr	r1, [r3, #4]
 80016da:	ea41 010c 	orr.w	r1, r1, ip
 80016de:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016e0:	6899      	ldr	r1, [r3, #8]
 80016e2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80016e6:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	ea42 0207 	orr.w	r2, r2, r7
 80016ee:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016f0:	d055      	beq.n	800179e <HAL_ADC_Init+0x12e>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016f2:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016f4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016f6:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80016fa:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	4316      	orrs	r6, r2
 8001700:	609e      	str	r6, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001702:	6899      	ldr	r1, [r3, #8]
 8001704:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8001708:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	4302      	orrs	r2, r0
 800170e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001710:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001712:	69a5      	ldr	r5, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001714:	f021 0102 	bic.w	r1, r1, #2
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001718:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800171c:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8001724:	609a      	str	r2, [r3, #8]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001726:	2800      	cmp	r0, #0
 8001728:	d142      	bne.n	80017b0 <HAL_ADC_Init+0x140>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001730:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001732:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    ADC_CLEAR_ERRORCODE(hadc);
 8001734:	2600      	movs	r6, #0
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001736:	69e5      	ldr	r5, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001738:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800173c:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001740:	1e6a      	subs	r2, r5, #1
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001742:	6967      	ldr	r7, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001744:	62d8      	str	r0, [r3, #44]	; 0x2c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001746:	4630      	mov	r0, r6
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001748:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800174a:	ea45 5502 	orr.w	r5, r5, r2, lsl #20
 800174e:	62dd      	str	r5, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001750:	689d      	ldr	r5, [r3, #8]
 8001752:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 8001756:	609d      	str	r5, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001758:	6899      	ldr	r1, [r3, #8]
 800175a:	ea41 214c 	orr.w	r1, r1, ip, lsl #9
 800175e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001760:	6899      	ldr	r1, [r3, #8]
 8001762:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001766:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800176e:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001770:	6466      	str	r6, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001772:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001774:	f023 0303 	bic.w	r3, r3, #3
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800177e:	2300      	movs	r3, #0
 8001780:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8001786:	f005 f8a7 	bl	80068d8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800178a:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800178c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 800178e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001792:	06db      	lsls	r3, r3, #27
 8001794:	f53f af78 	bmi.w	8001688 <HAL_ADC_Init+0x18>
 8001798:	e77b      	b.n	8001692 <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 800179a:	2001      	movs	r0, #1
}
 800179c:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	e7af      	b.n	8001710 <HAL_ADC_Init+0xa0>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017b0:	6858      	ldr	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017b4:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017b8:	1e51      	subs	r1, r2, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017ba:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	e7b1      	b.n	8001732 <HAL_ADC_Init+0xc2>
 80017ce:	bf00      	nop
 80017d0:	ffffeefd 	.word	0xffffeefd
 80017d4:	40012300 	.word	0x40012300
 80017d8:	0f000001 	.word	0x0f000001

080017dc <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 80017dc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  __IO uint32_t counter = 0;
 80017e0:	2200      	movs	r2, #0
{
 80017e2:	b410      	push	{r4}
  __HAL_LOCK(hadc);
 80017e4:	2b01      	cmp	r3, #1
{
 80017e6:	b083      	sub	sp, #12
  __IO uint32_t counter = 0;
 80017e8:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80017ea:	d070      	beq.n	80018ce <HAL_ADC_Start+0xf2>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017ec:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hadc);
 80017ee:	2101      	movs	r1, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017f0:	6893      	ldr	r3, [r2, #8]
  __HAL_LOCK(hadc);
 80017f2:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017f6:	07d9      	lsls	r1, r3, #31
 80017f8:	d414      	bmi.n	8001824 <HAL_ADC_Start+0x48>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80017fa:	4b37      	ldr	r3, [pc, #220]	; (80018d8 <HAL_ADC_Start+0xfc>)
 80017fc:	4c37      	ldr	r4, [pc, #220]	; (80018dc <HAL_ADC_Start+0x100>)
 80017fe:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 8001800:	6891      	ldr	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001802:	fba4 4303 	umull	r4, r3, r4, r3
    __HAL_ADC_ENABLE(hadc);
 8001806:	f041 0101 	orr.w	r1, r1, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800180a:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 800180c:	6091      	str	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800180e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001812:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8001814:	9b01      	ldr	r3, [sp, #4]
 8001816:	b12b      	cbz	r3, 8001824 <HAL_ADC_Start+0x48>
      counter--;
 8001818:	9b01      	ldr	r3, [sp, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 800181e:	9b01      	ldr	r3, [sp, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1f9      	bne.n	8001818 <HAL_ADC_Start+0x3c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001824:	6893      	ldr	r3, [r2, #8]
 8001826:	07db      	lsls	r3, r3, #31
 8001828:	d524      	bpl.n	8001874 <HAL_ADC_Start+0x98>
    ADC_STATE_CLR_SET(hadc->State,
 800182a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800182c:	4b2c      	ldr	r3, [pc, #176]	; (80018e0 <HAL_ADC_Start+0x104>)
 800182e:	400b      	ands	r3, r1
 8001830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001834:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001836:	6853      	ldr	r3, [r2, #4]
 8001838:	055c      	lsls	r4, r3, #21
 800183a:	d505      	bpl.n	8001848 <HAL_ADC_Start+0x6c>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800183c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800183e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001842:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001846:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001848:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800184a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 800184e:	d028      	beq.n	80018a2 <HAL_ADC_Start+0xc6>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001850:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001852:	f023 0306 	bic.w	r3, r3, #6
 8001856:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001858:	f06f 0122 	mvn.w	r1, #34	; 0x22
    __HAL_UNLOCK(hadc);
 800185c:	2400      	movs	r4, #0
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800185e:	4b21      	ldr	r3, [pc, #132]	; (80018e4 <HAL_ADC_Start+0x108>)
    __HAL_UNLOCK(hadc);
 8001860:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001864:	6011      	str	r1, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001866:	6859      	ldr	r1, [r3, #4]
 8001868:	06c9      	lsls	r1, r1, #27
 800186a:	d108      	bne.n	800187e <HAL_ADC_Start+0xa2>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800186c:	6890      	ldr	r0, [r2, #8]
 800186e:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001872:	d018      	beq.n	80018a6 <HAL_ADC_Start+0xca>
  return HAL_OK;
 8001874:	2000      	movs	r0, #0
}
 8001876:	b003      	add	sp, #12
 8001878:	f85d 4b04 	ldr.w	r4, [sp], #4
 800187c:	4770      	bx	lr
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800187e:	491a      	ldr	r1, [pc, #104]	; (80018e8 <HAL_ADC_Start+0x10c>)
 8001880:	428a      	cmp	r2, r1
 8001882:	d018      	beq.n	80018b6 <HAL_ADC_Start+0xda>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001884:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001886:	06db      	lsls	r3, r3, #27
 8001888:	d4f4      	bmi.n	8001874 <HAL_ADC_Start+0x98>
 800188a:	4918      	ldr	r1, [pc, #96]	; (80018ec <HAL_ADC_Start+0x110>)
 800188c:	428a      	cmp	r2, r1
 800188e:	d1f1      	bne.n	8001874 <HAL_ADC_Start+0x98>
 8001890:	6888      	ldr	r0, [r1, #8]
 8001892:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001896:	d1ed      	bne.n	8001874 <HAL_ADC_Start+0x98>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001898:	688b      	ldr	r3, [r1, #8]
 800189a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800189e:	608b      	str	r3, [r1, #8]
 80018a0:	e7e9      	b.n	8001876 <HAL_ADC_Start+0x9a>
      ADC_CLEAR_ERRORCODE(hadc);
 80018a2:	6443      	str	r3, [r0, #68]	; 0x44
 80018a4:	e7d8      	b.n	8001858 <HAL_ADC_Start+0x7c>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018a6:	6893      	ldr	r3, [r2, #8]
 80018a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80018ac:	6093      	str	r3, [r2, #8]
}
 80018ae:	b003      	add	sp, #12
 80018b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018b4:	4770      	bx	lr
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018b6:	6893      	ldr	r3, [r2, #8]
 80018b8:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 80018bc:	d103      	bne.n	80018c6 <HAL_ADC_Start+0xea>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018be:	6893      	ldr	r3, [r2, #8]
 80018c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80018c4:	6093      	str	r3, [r2, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80018c6:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <HAL_ADC_Start+0x108>)
  return HAL_OK;
 80018c8:	2000      	movs	r0, #0
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	e7d3      	b.n	8001876 <HAL_ADC_Start+0x9a>
  __HAL_LOCK(hadc);
 80018ce:	2002      	movs	r0, #2
}
 80018d0:	b003      	add	sp, #12
 80018d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	200000a4 	.word	0x200000a4
 80018dc:	431bde83 	.word	0x431bde83
 80018e0:	fffff8fe 	.word	0xfffff8fe
 80018e4:	40012300 	.word	0x40012300
 80018e8:	40012000 	.word	0x40012000
 80018ec:	40012200 	.word	0x40012200

080018f0 <HAL_ADC_Start_DMA>:
  __HAL_LOCK(hadc);
 80018f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80018f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80018f6:	2b01      	cmp	r3, #1
{
 80018f8:	b083      	sub	sp, #12
  __IO uint32_t counter = 0;
 80018fa:	f04f 0400 	mov.w	r4, #0
 80018fe:	9401      	str	r4, [sp, #4]
  __HAL_LOCK(hadc);
 8001900:	f000 8085 	beq.w	8001a0e <HAL_ADC_Start_DMA+0x11e>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001904:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hadc);
 8001906:	2401      	movs	r4, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001908:	68ab      	ldr	r3, [r5, #8]
  __HAL_LOCK(hadc);
 800190a:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800190e:	07df      	lsls	r7, r3, #31
 8001910:	d414      	bmi.n	800193c <HAL_ADC_Start_DMA+0x4c>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001912:	4b40      	ldr	r3, [pc, #256]	; (8001a14 <HAL_ADC_Start_DMA+0x124>)
 8001914:	4e40      	ldr	r6, [pc, #256]	; (8001a18 <HAL_ADC_Start_DMA+0x128>)
 8001916:	681c      	ldr	r4, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 8001918:	68ab      	ldr	r3, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800191a:	fba6 6404 	umull	r6, r4, r6, r4
    __HAL_ADC_ENABLE(hadc);
 800191e:	f043 0301 	orr.w	r3, r3, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001922:	0ca4      	lsrs	r4, r4, #18
    __HAL_ADC_ENABLE(hadc);
 8001924:	60ab      	str	r3, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001926:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800192a:	9401      	str	r4, [sp, #4]
    while(counter != 0)
 800192c:	9b01      	ldr	r3, [sp, #4]
 800192e:	b12b      	cbz	r3, 800193c <HAL_ADC_Start_DMA+0x4c>
      counter--;
 8001930:	9c01      	ldr	r4, [sp, #4]
 8001932:	3c01      	subs	r4, #1
 8001934:	9401      	str	r4, [sp, #4]
    while(counter != 0)
 8001936:	9c01      	ldr	r4, [sp, #4]
 8001938:	2c00      	cmp	r4, #0
 800193a:	d1f9      	bne.n	8001930 <HAL_ADC_Start_DMA+0x40>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800193c:	68ab      	ldr	r3, [r5, #8]
 800193e:	07de      	lsls	r6, r3, #31
 8001940:	d53b      	bpl.n	80019ba <HAL_ADC_Start_DMA+0xca>
    ADC_STATE_CLR_SET(hadc->State,
 8001942:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001944:	4c35      	ldr	r4, [pc, #212]	; (8001a1c <HAL_ADC_Start_DMA+0x12c>)
 8001946:	401c      	ands	r4, r3
 8001948:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800194c:	6404      	str	r4, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800194e:	686b      	ldr	r3, [r5, #4]
 8001950:	055c      	lsls	r4, r3, #21
 8001952:	d505      	bpl.n	8001960 <HAL_ADC_Start_DMA+0x70>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001954:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001956:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800195a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800195e:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001960:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001962:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8001966:	d03e      	beq.n	80019e6 <HAL_ADC_Start_DMA+0xf6>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001968:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800196a:	f023 0306 	bic.w	r3, r3, #6
 800196e:	6443      	str	r3, [r0, #68]	; 0x44
 8001970:	4604      	mov	r4, r0
    __HAL_UNLOCK(hadc);   
 8001972:	2700      	movs	r7, #0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001974:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001976:	4613      	mov	r3, r2
 8001978:	4e29      	ldr	r6, [pc, #164]	; (8001a20 <HAL_ADC_Start_DMA+0x130>)
 800197a:	460a      	mov	r2, r1
    __HAL_UNLOCK(hadc);   
 800197c:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001980:	f06f 0122 	mvn.w	r1, #34	; 0x22
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001984:	63c6      	str	r6, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001986:	4f27      	ldr	r7, [pc, #156]	; (8001a24 <HAL_ADC_Start_DMA+0x134>)
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001988:	4e27      	ldr	r6, [pc, #156]	; (8001a28 <HAL_ADC_Start_DMA+0x138>)
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800198a:	6407      	str	r7, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800198c:	64c6      	str	r6, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800198e:	6029      	str	r1, [r5, #0]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001990:	f105 014c 	add.w	r1, r5, #76	; 0x4c
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001994:	686e      	ldr	r6, [r5, #4]
 8001996:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
 800199a:	606e      	str	r6, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800199c:	68ae      	ldr	r6, [r5, #8]
 800199e:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 80019a2:	60ae      	str	r6, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019a4:	f000 fb7e 	bl	80020a4 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80019a8:	4b20      	ldr	r3, [pc, #128]	; (8001a2c <HAL_ADC_Start_DMA+0x13c>)
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	06d2      	lsls	r2, r2, #27
 80019ae:	d107      	bne.n	80019c0 <HAL_ADC_Start_DMA+0xd0>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80019b0:	6823      	ldr	r3, [r4, #0]
 80019b2:	6898      	ldr	r0, [r3, #8]
 80019b4:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80019b8:	d017      	beq.n	80019ea <HAL_ADC_Start_DMA+0xfa>
  return HAL_OK;
 80019ba:	2000      	movs	r0, #0
}
 80019bc:	b003      	add	sp, #12
 80019be:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019c0:	6822      	ldr	r2, [r4, #0]
 80019c2:	491b      	ldr	r1, [pc, #108]	; (8001a30 <HAL_ADC_Start_DMA+0x140>)
 80019c4:	428a      	cmp	r2, r1
 80019c6:	d016      	beq.n	80019f6 <HAL_ADC_Start_DMA+0x106>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80019c8:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019ca:	06db      	lsls	r3, r3, #27
 80019cc:	d4f5      	bmi.n	80019ba <HAL_ADC_Start_DMA+0xca>
 80019ce:	4919      	ldr	r1, [pc, #100]	; (8001a34 <HAL_ADC_Start_DMA+0x144>)
 80019d0:	428a      	cmp	r2, r1
 80019d2:	d1f2      	bne.n	80019ba <HAL_ADC_Start_DMA+0xca>
 80019d4:	6888      	ldr	r0, [r1, #8]
 80019d6:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80019da:	d1ee      	bne.n	80019ba <HAL_ADC_Start_DMA+0xca>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019dc:	688b      	ldr	r3, [r1, #8]
 80019de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80019e2:	608b      	str	r3, [r1, #8]
 80019e4:	e7ea      	b.n	80019bc <HAL_ADC_Start_DMA+0xcc>
      ADC_CLEAR_ERRORCODE(hadc);
 80019e6:	6443      	str	r3, [r0, #68]	; 0x44
 80019e8:	e7c2      	b.n	8001970 <HAL_ADC_Start_DMA+0x80>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019f0:	609a      	str	r2, [r3, #8]
}
 80019f2:	b003      	add	sp, #12
 80019f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019f6:	6893      	ldr	r3, [r2, #8]
 80019f8:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 80019fc:	d103      	bne.n	8001a06 <HAL_ADC_Start_DMA+0x116>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019fe:	6893      	ldr	r3, [r2, #8]
 8001a00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a04:	6093      	str	r3, [r2, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <HAL_ADC_Start_DMA+0x13c>)
  return HAL_OK;
 8001a08:	2000      	movs	r0, #0
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	e7d6      	b.n	80019bc <HAL_ADC_Start_DMA+0xcc>
  __HAL_LOCK(hadc);
 8001a0e:	2002      	movs	r0, #2
}
 8001a10:	b003      	add	sp, #12
 8001a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a14:	200000a4 	.word	0x200000a4
 8001a18:	431bde83 	.word	0x431bde83
 8001a1c:	fffff8fe 	.word	0xfffff8fe
 8001a20:	08001b99 	.word	0x08001b99
 8001a24:	08001a3d 	.word	0x08001a3d
 8001a28:	08001b81 	.word	0x08001b81
 8001a2c:	40012300 	.word	0x40012300
 8001a30:	40012000 	.word	0x40012000
 8001a34:	40012200 	.word	0x40012200

08001a38 <HAL_ADC_ConvHalfCpltCallback>:
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop

08001a3c <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a3c:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a3e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001a40:	f7ff fffa 	bl	8001a38 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a44:	bd08      	pop	{r3, pc}
 8001a46:	bf00      	nop

08001a48 <HAL_ADC_LevelOutOfWindowCallback>:
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop

08001a4c <HAL_ADC_ErrorCallback>:
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop

08001a50 <HAL_ADC_IRQHandler>:
{
 8001a50:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001a52:	6803      	ldr	r3, [r0, #0]
{
 8001a54:	4604      	mov	r4, r0
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001a56:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001a58:	6859      	ldr	r1, [r3, #4]
  if(tmp1 && tmp2)
 8001a5a:	0790      	lsls	r0, r2, #30
 8001a5c:	d513      	bpl.n	8001a86 <HAL_ADC_IRQHandler+0x36>
 8001a5e:	068a      	lsls	r2, r1, #26
 8001a60:	d511      	bpl.n	8001a86 <HAL_ADC_IRQHandler+0x36>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a62:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001a64:	06d5      	lsls	r5, r2, #27
 8001a66:	d403      	bmi.n	8001a70 <HAL_ADC_IRQHandler+0x20>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001a68:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a6e:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001a76:	d058      	beq.n	8001b2a <HAL_ADC_IRQHandler+0xda>
    HAL_ADC_ConvCpltCallback(hadc);
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f004 feaf 	bl	80067dc <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a7e:	6823      	ldr	r3, [r4, #0]
 8001a80:	f06f 0212 	mvn.w	r2, #18
 8001a84:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001a86:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001a88:	6859      	ldr	r1, [r3, #4]
  if(tmp1 && tmp2)
 8001a8a:	0752      	lsls	r2, r2, #29
 8001a8c:	d513      	bpl.n	8001ab6 <HAL_ADC_IRQHandler+0x66>
 8001a8e:	060d      	lsls	r5, r1, #24
 8001a90:	d511      	bpl.n	8001ab6 <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a92:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001a94:	06d0      	lsls	r0, r2, #27
 8001a96:	d403      	bmi.n	8001aa0 <HAL_ADC_IRQHandler+0x50>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001a98:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001a9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a9e:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8001aa6:	d022      	beq.n	8001aee <HAL_ADC_IRQHandler+0x9e>
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f000 f95f 	bl	8001d6c <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001aae:	6823      	ldr	r3, [r4, #0]
 8001ab0:	f06f 020c 	mvn.w	r2, #12
 8001ab4:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001ab6:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001ab8:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8001aba:	0650      	lsls	r0, r2, #25
 8001abc:	d504      	bpl.n	8001ac8 <HAL_ADC_IRQHandler+0x78>
 8001abe:	07ca      	lsls	r2, r1, #31
 8001ac0:	d502      	bpl.n	8001ac8 <HAL_ADC_IRQHandler+0x78>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	07d5      	lsls	r5, r2, #31
 8001ac6:	d44a      	bmi.n	8001b5e <HAL_ADC_IRQHandler+0x10e>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001ac8:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001aca:	6859      	ldr	r1, [r3, #4]
  if(tmp1 && tmp2)
 8001acc:	0690      	lsls	r0, r2, #26
 8001ace:	d50d      	bpl.n	8001aec <HAL_ADC_IRQHandler+0x9c>
 8001ad0:	014a      	lsls	r2, r1, #5
 8001ad2:	d50b      	bpl.n	8001aec <HAL_ADC_IRQHandler+0x9c>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001ad4:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ad6:	f06f 0520 	mvn.w	r5, #32
      HAL_ADC_ErrorCallback(hadc);
 8001ada:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001adc:	f042 0202 	orr.w	r2, r2, #2
 8001ae0:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ae2:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8001ae4:	f7ff ffb2 	bl	8001a4c <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ae8:	6823      	ldr	r3, [r4, #0]
 8001aea:	601d      	str	r5, [r3, #0]
}
 8001aec:	bd38      	pop	{r3, r4, r5, pc}
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001af0:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8001af4:	d13f      	bne.n	8001b76 <HAL_ADC_IRQHandler+0x126>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001af6:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001af8:	0552      	lsls	r2, r2, #21
 8001afa:	d4d5      	bmi.n	8001aa8 <HAL_ADC_IRQHandler+0x58>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001afc:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001afe:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001b02:	d1d1      	bne.n	8001aa8 <HAL_ADC_IRQHandler+0x58>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001b04:	69a2      	ldr	r2, [r4, #24]
 8001b06:	2a00      	cmp	r2, #0
 8001b08:	d1ce      	bne.n	8001aa8 <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b10:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001b12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b18:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b1c:	05dd      	lsls	r5, r3, #23
 8001b1e:	d4c3      	bmi.n	8001aa8 <HAL_ADC_IRQHandler+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6423      	str	r3, [r4, #64]	; 0x40
 8001b28:	e7be      	b.n	8001aa8 <HAL_ADC_IRQHandler+0x58>
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b2a:	69a2      	ldr	r2, [r4, #24]
 8001b2c:	2a00      	cmp	r2, #0
 8001b2e:	d1a3      	bne.n	8001a78 <HAL_ADC_IRQHandler+0x28>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b32:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8001b36:	d002      	beq.n	8001b3e <HAL_ADC_IRQHandler+0xee>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b38:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b3a:	0550      	lsls	r0, r2, #21
 8001b3c:	d49c      	bmi.n	8001a78 <HAL_ADC_IRQHandler+0x28>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	f022 0220 	bic.w	r2, r2, #32
 8001b44:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b4c:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b50:	04d9      	lsls	r1, r3, #19
 8001b52:	d491      	bmi.n	8001a78 <HAL_ADC_IRQHandler+0x28>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	6423      	str	r3, [r4, #64]	; 0x40
 8001b5c:	e78c      	b.n	8001a78 <HAL_ADC_IRQHandler+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b60:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b66:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b68:	f7ff ff6e 	bl	8001a48 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001b6c:	6823      	ldr	r3, [r4, #0]
 8001b6e:	f06f 0201 	mvn.w	r2, #1
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	e7a8      	b.n	8001ac8 <HAL_ADC_IRQHandler+0x78>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001b76:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001b78:	0551      	lsls	r1, r2, #21
 8001b7a:	d495      	bmi.n	8001aa8 <HAL_ADC_IRQHandler+0x58>
 8001b7c:	e7bb      	b.n	8001af6 <HAL_ADC_IRQHandler+0xa6>
 8001b7e:	bf00      	nop

08001b80 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b80:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001b82:	2240      	movs	r2, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b84:	6b83      	ldr	r3, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001b86:	641a      	str	r2, [r3, #64]	; 0x40
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b88:	4618      	mov	r0, r3
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001b8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b8c:	f042 0204 	orr.w	r2, r2, #4
 8001b90:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc);
 8001b92:	f7ff ff5b 	bl	8001a4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b96:	bd08      	pop	{r3, pc}

08001b98 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b98:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b9c:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8001ba2:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ba4:	d123      	bne.n	8001bee <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001baa:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bac:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bae:	688a      	ldr	r2, [r1, #8]
 8001bb0:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001bb4:	d117      	bne.n	8001be6 <ADC_DMAConvCplt+0x4e>
 8001bb6:	699a      	ldr	r2, [r3, #24]
 8001bb8:	b9aa      	cbnz	r2, 8001be6 <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001bba:	6aca      	ldr	r2, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bbc:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8001bc0:	d002      	beq.n	8001bc8 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001bc2:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001bc4:	0550      	lsls	r0, r2, #21
 8001bc6:	d40e      	bmi.n	8001be6 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001bc8:	684a      	ldr	r2, [r1, #4]
 8001bca:	f022 0220 	bic.w	r2, r2, #32
 8001bce:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bd6:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bda:	04d1      	lsls	r1, r2, #19
 8001bdc:	d403      	bmi.n	8001be6 <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001be0:	f042 0201 	orr.w	r2, r2, #1
 8001be4:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001be6:	4618      	mov	r0, r3
 8001be8:	f004 fdf8 	bl	80067dc <HAL_ADC_ConvCpltCallback>
}
 8001bec:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001bee:	06d2      	lsls	r2, r2, #27
 8001bf0:	d404      	bmi.n	8001bfc <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8001bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfa:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff25 	bl	8001a4c <HAL_ADC_ErrorCallback>
}
 8001c02:	bd10      	pop	{r4, pc}

08001c04 <HAL_ADC_ConfigChannel>:
  __HAL_LOCK(hadc);
 8001c04:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  __IO uint32_t counter = 0;
 8001c08:	2200      	movs	r2, #0
{
 8001c0a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8001c0c:	2b01      	cmp	r3, #1
{
 8001c0e:	b083      	sub	sp, #12
  __IO uint32_t counter = 0;
 8001c10:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001c12:	f000 809a 	beq.w	8001d4a <HAL_ADC_ConfigChannel+0x146>
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001c16:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8001c18:	2201      	movs	r2, #1
 8001c1a:	6803      	ldr	r3, [r0, #0]
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001c1c:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8001c1e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 8001c22:	b2af      	uxth	r7, r5
 8001c24:	688a      	ldr	r2, [r1, #8]
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001c26:	d828      	bhi.n	8001c7a <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c28:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 8001c2c:	f04f 0c07 	mov.w	ip, #7
 8001c30:	691c      	ldr	r4, [r3, #16]
 8001c32:	fa0c fc06 	lsl.w	ip, ip, r6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c36:	fa02 f606 	lsl.w	r6, r2, r6
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c3a:	ea24 040c 	bic.w	r4, r4, ip
 8001c3e:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c40:	691a      	ldr	r2, [r3, #16]
 8001c42:	4316      	orrs	r6, r2
 8001c44:	611e      	str	r6, [r3, #16]
  if (sConfig->Rank < 7)
 8001c46:	684e      	ldr	r6, [r1, #4]
 8001c48:	2e06      	cmp	r6, #6
 8001c4a:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 8001c4e:	d82d      	bhi.n	8001cac <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c50:	3a05      	subs	r2, #5
 8001c52:	241f      	movs	r4, #31
 8001c54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c56:	4094      	lsls	r4, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c58:	fa07 f202 	lsl.w	r2, r7, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c5c:	ea21 0104 	bic.w	r1, r1, r4
 8001c60:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c62:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c64:	430a      	orrs	r2, r1
 8001c66:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c68:	4a3c      	ldr	r2, [pc, #240]	; (8001d5c <HAL_ADC_ConfigChannel+0x158>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d030      	beq.n	8001cd0 <HAL_ADC_ConfigChannel+0xcc>
  __HAL_UNLOCK(hadc);
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001c74:	4618      	mov	r0, r3
}
 8001c76:	b003      	add	sp, #12
 8001c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c7a:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8001c7e:	f04f 0c07 	mov.w	ip, #7
 8001c82:	68dc      	ldr	r4, [r3, #12]
 8001c84:	3e1e      	subs	r6, #30
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c86:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 8001d60 <HAL_ADC_ConfigChannel+0x15c>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c8a:	fa0c fc06 	lsl.w	ip, ip, r6
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c8e:	4575      	cmp	r5, lr
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c90:	ea24 040c 	bic.w	r4, r4, ip
 8001c94:	60dc      	str	r4, [r3, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c96:	d05b      	beq.n	8001d50 <HAL_ADC_ConfigChannel+0x14c>
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c98:	fa02 f606 	lsl.w	r6, r2, r6
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	4316      	orrs	r6, r2
 8001ca0:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7)
 8001ca2:	684e      	ldr	r6, [r1, #4]
 8001ca4:	2e06      	cmp	r6, #6
 8001ca6:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 8001caa:	d9d1      	bls.n	8001c50 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13)
 8001cac:	2e0c      	cmp	r6, #12
 8001cae:	d837      	bhi.n	8001d20 <HAL_ADC_ConfigChannel+0x11c>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cb0:	f1a2 0423 	sub.w	r4, r2, #35	; 0x23
 8001cb4:	261f      	movs	r6, #31
 8001cb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cb8:	40a6      	lsls	r6, r4
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cba:	fa07 f204 	lsl.w	r2, r7, r4
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cbe:	ea21 0106 	bic.w	r1, r1, r6
 8001cc2:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cc4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001cc6:	4314      	orrs	r4, r2
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cc8:	4a24      	ldr	r2, [pc, #144]	; (8001d5c <HAL_ADC_ConfigChannel+0x158>)
 8001cca:	4293      	cmp	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ccc:	631c      	str	r4, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cce:	d1ce      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x6a>
 8001cd0:	2d12      	cmp	r5, #18
 8001cd2:	d033      	beq.n	8001d3c <HAL_ADC_ConfigChannel+0x138>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cd4:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <HAL_ADC_ConfigChannel+0x15c>)
 8001cd6:	429d      	cmp	r5, r3
 8001cd8:	d001      	beq.n	8001cde <HAL_ADC_ConfigChannel+0xda>
 8001cda:	2d11      	cmp	r5, #17
 8001cdc:	d1c7      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x6a>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001cde:	4a21      	ldr	r2, [pc, #132]	; (8001d64 <HAL_ADC_ConfigChannel+0x160>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ce0:	491f      	ldr	r1, [pc, #124]	; (8001d60 <HAL_ADC_ConfigChannel+0x15c>)
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001ce2:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ce4:	428d      	cmp	r5, r1
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001ce6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cea:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cec:	d1bf      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001cee:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8001cf2:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <HAL_ADC_ConfigChannel+0x164>)
 8001cf4:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f202 3283 	addw	r2, r2, #899	; 0x383
 8001cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001d02:	0c9b      	lsrs	r3, r3, #18
 8001d04:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8001d0c:	9b01      	ldr	r3, [sp, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0ad      	beq.n	8001c6e <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 8001d12:	9b01      	ldr	r3, [sp, #4]
 8001d14:	3b01      	subs	r3, #1
 8001d16:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8001d18:	9b01      	ldr	r3, [sp, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f9      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x10e>
 8001d1e:	e7a6      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x6a>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d20:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8001d24:	261f      	movs	r6, #31
 8001d26:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001d28:	408e      	lsls	r6, r1
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d2a:	fa07 f201 	lsl.w	r2, r7, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d2e:	ea24 0406 	bic.w	r4, r4, r6
 8001d32:	62dc      	str	r4, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d36:	430a      	orrs	r2, r1
 8001d38:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d3a:	e795      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x64>
    ADC->CCR |= ADC_CCR_VBATE;
 8001d3c:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8001d40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d44:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 8001d48:	e791      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 8001d4a:	2002      	movs	r0, #2
}
 8001d4c:	b003      	add	sp, #12
 8001d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001d50:	68de      	ldr	r6, [r3, #12]
 8001d52:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
 8001d56:	60de      	str	r6, [r3, #12]
 8001d58:	e775      	b.n	8001c46 <HAL_ADC_ConfigChannel+0x42>
 8001d5a:	bf00      	nop
 8001d5c:	40012000 	.word	0x40012000
 8001d60:	10000012 	.word	0x10000012
 8001d64:	40012300 	.word	0x40012300
 8001d68:	200000a4 	.word	0x200000a4

08001d6c <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop

08001d70 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d70:	4907      	ldr	r1, [pc, #28]	; (8001d90 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d72:	0200      	lsls	r0, r0, #8
 8001d74:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d76:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d78:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d7c:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d7e:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8001d82:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001d84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d88:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d8a:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 8001d8c:	60c8      	str	r0, [r1, #12]
 8001d8e:	4770      	bx	lr
 8001d90:	e000ed00 	.word	0xe000ed00
 8001d94:	05fa0000 	.word	0x05fa0000

08001d98 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d98:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <HAL_NVIC_SetPriority+0x60>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001da0:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da2:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001da6:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da8:	2d04      	cmp	r5, #4
 8001daa:	bf28      	it	cs
 8001dac:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dae:	2c06      	cmp	r4, #6
 8001db0:	d918      	bls.n	8001de4 <HAL_NVIC_SetPriority+0x4c>
 8001db2:	3b03      	subs	r3, #3
 8001db4:	f04f 34ff 	mov.w	r4, #4294967295
 8001db8:	409c      	lsls	r4, r3
 8001dba:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbe:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8001dc2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	fa02 f205 	lsl.w	r2, r2, r5
 8001dc8:	ea21 0102 	bic.w	r1, r1, r2
 8001dcc:	fa01 f203 	lsl.w	r2, r1, r3
 8001dd0:	ea42 0204 	orr.w	r2, r2, r4
 8001dd4:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8001dd8:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 8001dda:	db06      	blt.n	8001dea <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ddc:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <HAL_NVIC_SetPriority+0x64>)
 8001dde:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001de0:	bc30      	pop	{r4, r5}
 8001de2:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de4:	2400      	movs	r4, #0
 8001de6:	4623      	mov	r3, r4
 8001de8:	e7e9      	b.n	8001dbe <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dea:	f000 000f 	and.w	r0, r0, #15
 8001dee:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <HAL_NVIC_SetPriority+0x68>)
 8001df0:	541a      	strb	r2, [r3, r0]
 8001df2:	bc30      	pop	{r4, r5}
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	e000ed00 	.word	0xe000ed00
 8001dfc:	e000e400 	.word	0xe000e400
 8001e00:	e000ed14 	.word	0xe000ed14

08001e04 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001e04:	2800      	cmp	r0, #0
 8001e06:	db07      	blt.n	8001e18 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e08:	f000 011f 	and.w	r1, r0, #31
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	0940      	lsrs	r0, r0, #5
 8001e10:	4a02      	ldr	r2, [pc, #8]	; (8001e1c <HAL_NVIC_EnableIRQ+0x18>)
 8001e12:	408b      	lsls	r3, r1
 8001e14:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	e000e100 	.word	0xe000e100

08001e20 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e20:	3801      	subs	r0, #1
 8001e22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001e26:	d20d      	bcs.n	8001e44 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e28:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e2a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2c:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2e:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e30:	25f0      	movs	r5, #240	; 0xf0
 8001e32:	4c06      	ldr	r4, [pc, #24]	; (8001e4c <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e34:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e36:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e38:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e3e:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8001e40:	bc30      	pop	{r4, r5}
 8001e42:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001e44:	2001      	movs	r0, #1
 8001e46:	4770      	bx	lr
 8001e48:	e000e010 	.word	0xe000e010
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <HAL_DCMI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001e50:	2800      	cmp	r0, #0
 8001e52:	d044      	beq.n	8001ede <HAL_DCMI_Init+0x8e>
{     
 8001e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8001e56:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001e5a:	4604      	mov	r4, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d03b      	beq.n	8001ed8 <HAL_DCMI_Init+0x88>
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001e60:	6862      	ldr	r2, [r4, #4]
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8001e62:	2502      	movs	r5, #2
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001e64:	6963      	ldr	r3, [r4, #20]
 8001e66:	68e1      	ldr	r1, [r4, #12]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart);
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001e68:	2a10      	cmp	r2, #16
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001e6a:	ea43 0302 	orr.w	r3, r3, r2
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001e6e:	6920      	ldr	r0, [r4, #16]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001e70:	69a6      	ldr	r6, [r4, #24]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001e72:	ea43 0301 	orr.w	r3, r3, r1
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001e76:	68a1      	ldr	r1, [r4, #8]
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8001e78:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001e7c:	ea43 0300 	orr.w	r3, r3, r0
 8001e80:	ea43 0301 	orr.w	r3, r3, r1
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001e84:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001e86:	e9d4 5008 	ldrd	r5, r0, [r4, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001e8a:	ea43 0306 	orr.w	r3, r3, r6
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001e8e:	6826      	ldr	r6, [r4, #0]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001e90:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001e94:	6837      	ldr	r7, [r6, #0]
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001e96:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001e98:	ea43 0300 	orr.w	r3, r3, r0
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001e9c:	6b20      	ldr	r0, [r4, #48]	; 0x30
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001e9e:	ea43 0301 	orr.w	r3, r3, r1
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001ea2:	4910      	ldr	r1, [pc, #64]	; (8001ee4 <HAL_DCMI_Init+0x94>)
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001ea4:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001ea8:	ea01 0107 	and.w	r1, r1, r7
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001eac:	ea43 0300 	orr.w	r3, r3, r0
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001eb0:	6031      	str	r1, [r6, #0]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001eb2:	6831      	ldr	r1, [r6, #0]
 8001eb4:	ea43 0301 	orr.w	r3, r3, r1
 8001eb8:	6033      	str	r3, [r6, #0]
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001eba:	d00a      	beq.n	8001ed2 <HAL_DCMI_Init+0x82>
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001ebc:	68f3      	ldr	r3, [r6, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001ebe:	2200      	movs	r2, #0
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001ec0:	2101      	movs	r1, #1
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001ec2:	f043 031e 	orr.w	r3, r3, #30

  return HAL_OK;
 8001ec6:	4610      	mov	r0, r2
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001ec8:	60f3      	str	r3, [r6, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001eca:	64e2      	str	r2, [r4, #76]	; 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001ecc:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 8001ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001ed2:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001ed4:	61b3      	str	r3, [r6, #24]
 8001ed6:	e7f1      	b.n	8001ebc <HAL_DCMI_Init+0x6c>
    HAL_DCMI_MspInit(hdcmi);
 8001ed8:	f004 fd5c 	bl	8006994 <HAL_DCMI_MspInit>
 8001edc:	e7c0      	b.n	8001e60 <HAL_DCMI_Init+0x10>
     return HAL_ERROR;
 8001ede:	2001      	movs	r0, #1
}
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	ffe0f007 	.word	0xffe0f007

08001ee8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eea:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8001eec:	f7ff fba8 	bl	8001640 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ef0:	2c00      	cmp	r4, #0
 8001ef2:	d053      	beq.n	8001f9c <HAL_DMA_Init+0xb4>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ef4:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ef6:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001efc:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001f00:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8001f02:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001f06:	f022 0201 	bic.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f0c:	e005      	b.n	8001f1a <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f0e:	f7ff fb97 	bl	8001640 <HAL_GetTick>
 8001f12:	1b40      	subs	r0, r0, r5
 8001f14:	2805      	cmp	r0, #5
 8001f16:	d83a      	bhi.n	8001f8e <HAL_DMA_Init+0xa6>
 8001f18:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	07d1      	lsls	r1, r2, #31
 8001f1e:	d4f6      	bmi.n	8001f0e <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f20:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8001f24:	68e1      	ldr	r1, [r4, #12]
 8001f26:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CR;
 8001f28:	681f      	ldr	r7, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f2a:	e9d4 0504 	ldrd	r0, r5, [r4, #16]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f2e:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f30:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f32:	6a20      	ldr	r0, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f34:	e9d4 6106 	ldrd	r6, r1, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f38:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f3a:	4d35      	ldr	r5, [pc, #212]	; (8002010 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f3c:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f3e:	403d      	ands	r5, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f40:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f42:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f44:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f46:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f48:	ea42 0205 	orr.w	r2, r2, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f4c:	d028      	beq.n	8001fa0 <HAL_DMA_Init+0xb8>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f50:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f52:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f56:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4d2e      	ldr	r5, [pc, #184]	; (8002014 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 8001f5c:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f5e:	3a10      	subs	r2, #16
 8001f60:	492d      	ldr	r1, [pc, #180]	; (8002018 <HAL_DMA_Init+0x130>)
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f62:	482e      	ldr	r0, [pc, #184]	; (800201c <HAL_DMA_Init+0x134>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f64:	fba5 5202 	umull	r5, r2, r5, r2
 8001f68:	4019      	ands	r1, r3
  hdma->State = HAL_DMA_STATE_READY;
 8001f6a:	2501      	movs	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f6c:	0913      	lsrs	r3, r2, #4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f6e:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f70:	5cc0      	ldrb	r0, [r0, r3]
  
  if (stream_number > 3U)
 8001f72:	2b03      	cmp	r3, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f74:	f04f 033f 	mov.w	r3, #63	; 0x3f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f78:	bf88      	it	hi
 8001f7a:	3104      	addhi	r1, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f7c:	65e0      	str	r0, [r4, #92]	; 0x5c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f7e:	4083      	lsls	r3, r0
  return HAL_OK;
 8001f80:	4610      	mov	r0, r2
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f82:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f84:	608b      	str	r3, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f86:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001f88:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 8001f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f90:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8001f92:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f94:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f96:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001f9c:	2001      	movs	r0, #1
}
 8001f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fa0:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001fa4:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fa6:	ea45 0001 	orr.w	r0, r5, r1
    tmp |= hdma->Init.FIFOThreshold;
 8001faa:	f047 0104 	orr.w	r1, r7, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fae:	4302      	orrs	r2, r0
  hdma->Instance->CR = tmp;  
 8001fb0:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001fb2:	695a      	ldr	r2, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fb4:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 8001fb8:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fba:	2d00      	cmp	r5, #0
 8001fbc:	d0cc      	beq.n	8001f58 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fbe:	b17e      	cbz	r6, 8001fe0 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fc0:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8001fc4:	d016      	beq.n	8001ff4 <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001fc6:	2f02      	cmp	r7, #2
 8001fc8:	d903      	bls.n	8001fd2 <HAL_DMA_Init+0xea>
 8001fca:	2f03      	cmp	r7, #3
 8001fcc:	d1c4      	bne.n	8001f58 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fce:	01ea      	lsls	r2, r5, #7
 8001fd0:	d5c2      	bpl.n	8001f58 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 8001fd2:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fd4:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 8001fd6:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fd8:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001fda:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8001fe0:	2f01      	cmp	r7, #1
 8001fe2:	d003      	beq.n	8001fec <HAL_DMA_Init+0x104>
 8001fe4:	d3f3      	bcc.n	8001fce <HAL_DMA_Init+0xe6>
 8001fe6:	2f02      	cmp	r7, #2
 8001fe8:	d1b6      	bne.n	8001f58 <HAL_DMA_Init+0x70>
 8001fea:	e7f0      	b.n	8001fce <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fec:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001ff0:	d1b2      	bne.n	8001f58 <HAL_DMA_Init+0x70>
 8001ff2:	e7ee      	b.n	8001fd2 <HAL_DMA_Init+0xea>
    switch (tmp)
 8001ff4:	2f03      	cmp	r7, #3
 8001ff6:	d8af      	bhi.n	8001f58 <HAL_DMA_Init+0x70>
 8001ff8:	a201      	add	r2, pc, #4	; (adr r2, 8002000 <HAL_DMA_Init+0x118>)
 8001ffa:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 8001ffe:	bf00      	nop
 8002000:	08001fd3 	.word	0x08001fd3
 8002004:	08001fcf 	.word	0x08001fcf
 8002008:	08001fd3 	.word	0x08001fd3
 800200c:	08001fed 	.word	0x08001fed
 8002010:	f010803f 	.word	0xf010803f
 8002014:	aaaaaaab 	.word	0xaaaaaaab
 8002018:	fffffc00 	.word	0xfffffc00
 800201c:	08009b34 	.word	0x08009b34

08002020 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8002020:	2800      	cmp	r0, #0
 8002022:	d035      	beq.n	8002090 <HAL_DMA_DeInit+0x70>
 8002024:	4603      	mov	r3, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002026:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 800202a:	b2c0      	uxtb	r0, r0
 800202c:	2802      	cmp	r0, #2
 800202e:	d031      	beq.n	8002094 <HAL_DMA_DeInit+0x74>
  __HAL_DMA_DISABLE(hdma);
 8002030:	681a      	ldr	r2, [r3, #0]
  hdma->Instance->CR   = 0U;
 8002032:	2000      	movs	r0, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002034:	b2d1      	uxtb	r1, r2
{
 8002036:	b470      	push	{r4, r5, r6}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002038:	3910      	subs	r1, #16
  __HAL_DMA_DISABLE(hdma);
 800203a:	6814      	ldr	r4, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800203c:	4d16      	ldr	r5, [pc, #88]	; (8002098 <HAL_DMA_DeInit+0x78>)
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800203e:	2621      	movs	r6, #33	; 0x21
  __HAL_DMA_DISABLE(hdma);
 8002040:	f024 0401 	bic.w	r4, r4, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002044:	fba5 5101 	umull	r5, r1, r5, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002048:	4d14      	ldr	r5, [pc, #80]	; (800209c <HAL_DMA_DeInit+0x7c>)
  __HAL_DMA_DISABLE(hdma);
 800204a:	6014      	str	r4, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800204c:	0909      	lsrs	r1, r1, #4
 800204e:	4c14      	ldr	r4, [pc, #80]	; (80020a0 <HAL_DMA_DeInit+0x80>)
  hdma->Instance->CR   = 0U;
 8002050:	6010      	str	r0, [r2, #0]
 8002052:	4014      	ands	r4, r2
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002054:	5c6d      	ldrb	r5, [r5, r1]
  if (stream_number > 3U)
 8002056:	2903      	cmp	r1, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002058:	f04f 013f 	mov.w	r1, #63	; 0x3f
  hdma->Instance->NDTR = 0U;
 800205c:	6050      	str	r0, [r2, #4]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800205e:	bf88      	it	hi
 8002060:	3404      	addhi	r4, #4
  hdma->Instance->PAR  = 0U;
 8002062:	6090      	str	r0, [r2, #8]
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002064:	40a9      	lsls	r1, r5
  hdma->Instance->M0AR = 0U;
 8002066:	60d0      	str	r0, [r2, #12]
  hdma->Instance->M1AR = 0U;
 8002068:	6110      	str	r0, [r2, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800206a:	6156      	str	r6, [r2, #20]
  hdma->XferCpltCallback = NULL;
 800206c:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800206e:	65dd      	str	r5, [r3, #92]	; 0x5c
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002070:	659c      	str	r4, [r3, #88]	; 0x58
  return HAL_OK;
 8002072:	4610      	mov	r0, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002074:	60a1      	str	r1, [r4, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002076:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8002078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 800207c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 8002080:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8002084:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 8002088:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
}
 800208c:	bc70      	pop	{r4, r5, r6}
 800208e:	4770      	bx	lr
    return HAL_ERROR;
 8002090:	2001      	movs	r0, #1
 8002092:	4770      	bx	lr
}
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	aaaaaaab 	.word	0xaaaaaaab
 800209c:	08009b34 	.word	0x08009b34
 80020a0:	fffffc00 	.word	0xfffffc00

080020a4 <HAL_DMA_Start_IT>:
{
 80020a4:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 80020a6:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80020aa:	2c01      	cmp	r4, #1
 80020ac:	d038      	beq.n	8002120 <HAL_DMA_Start_IT+0x7c>
 80020ae:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80020b0:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020b4:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 80020b6:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 80020b8:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80020bc:	d129      	bne.n	8002112 <HAL_DMA_Start_IT+0x6e>
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020be:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 80020c0:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020c2:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80020c4:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020c8:	6545      	str	r5, [r0, #84]	; 0x54
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020ca:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020cc:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020ce:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020d0:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80020d4:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80020d6:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020d8:	d026      	beq.n	8002128 <HAL_DMA_Start_IT+0x84>
    hdma->Instance->PAR = SrcAddress;
 80020da:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80020dc:	60e2      	str	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020de:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80020e0:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 80020e2:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020e4:	408b      	lsls	r3, r1
 80020e6:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020e8:	6823      	ldr	r3, [r4, #0]
 80020ea:	f043 0316 	orr.w	r3, r3, #22
 80020ee:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80020f0:	6963      	ldr	r3, [r4, #20]
 80020f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020f6:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80020f8:	b11a      	cbz	r2, 8002102 <HAL_DMA_Start_IT+0x5e>
      hdma->Instance->CR  |= DMA_IT_HT;
 80020fa:	6823      	ldr	r3, [r4, #0]
 80020fc:	f043 0308 	orr.w	r3, r3, #8
 8002100:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002102:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002104:	2300      	movs	r3, #0
    __HAL_DMA_ENABLE(hdma);
 8002106:	f042 0201 	orr.w	r2, r2, #1
}
 800210a:	4618      	mov	r0, r3
    __HAL_DMA_ENABLE(hdma);
 800210c:	6022      	str	r2, [r4, #0]
}
 800210e:	bcf0      	pop	{r4, r5, r6, r7}
 8002110:	4770      	bx	lr
    __HAL_UNLOCK(hdma);	  
 8002112:	2200      	movs	r2, #0
    status = HAL_BUSY;
 8002114:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);	  
 8002116:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
}
 800211a:	4618      	mov	r0, r3
 800211c:	bcf0      	pop	{r4, r5, r6, r7}
 800211e:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8002120:	2302      	movs	r3, #2
}
 8002122:	bcf0      	pop	{r4, r5, r6, r7}
 8002124:	4618      	mov	r0, r3
 8002126:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8002128:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800212a:	60e1      	str	r1, [r4, #12]
 800212c:	e7d7      	b.n	80020de <HAL_DMA_Start_IT+0x3a>
 800212e:	bf00      	nop

08002130 <HAL_DMA_IRQHandler>:
{
 8002130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002132:	4604      	mov	r4, r0
 8002134:	b083      	sub	sp, #12
  __IO uint32_t count = 0;
 8002136:	2000      	movs	r0, #0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002138:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 800213a:	4966      	ldr	r1, [pc, #408]	; (80022d4 <HAL_DMA_IRQHandler+0x1a4>)
  __IO uint32_t count = 0;
 800213c:	9001      	str	r0, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 800213e:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002140:	e9d4 7316 	ldrd	r7, r3, [r4, #88]	; 0x58
 8002144:	409a      	lsls	r2, r3
  tmpisr = regs->ISR;
 8002146:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002148:	422a      	tst	r2, r5
 800214a:	d003      	beq.n	8002154 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800214c:	6821      	ldr	r1, [r4, #0]
 800214e:	6808      	ldr	r0, [r1, #0]
 8002150:	0740      	lsls	r0, r0, #29
 8002152:	d459      	bmi.n	8002208 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002154:	2201      	movs	r2, #1
 8002156:	409a      	lsls	r2, r3
 8002158:	422a      	tst	r2, r5
 800215a:	d003      	beq.n	8002164 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800215c:	6821      	ldr	r1, [r4, #0]
 800215e:	6949      	ldr	r1, [r1, #20]
 8002160:	0608      	lsls	r0, r1, #24
 8002162:	d474      	bmi.n	800224e <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002164:	2204      	movs	r2, #4
 8002166:	409a      	lsls	r2, r3
 8002168:	422a      	tst	r2, r5
 800216a:	d003      	beq.n	8002174 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800216c:	6821      	ldr	r1, [r4, #0]
 800216e:	6809      	ldr	r1, [r1, #0]
 8002170:	0789      	lsls	r1, r1, #30
 8002172:	d466      	bmi.n	8002242 <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002174:	2210      	movs	r2, #16
 8002176:	409a      	lsls	r2, r3
 8002178:	422a      	tst	r2, r5
 800217a:	d003      	beq.n	8002184 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800217c:	6821      	ldr	r1, [r4, #0]
 800217e:	6808      	ldr	r0, [r1, #0]
 8002180:	0700      	lsls	r0, r0, #28
 8002182:	d44b      	bmi.n	800221c <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002184:	2220      	movs	r2, #32
 8002186:	409a      	lsls	r2, r3
 8002188:	422a      	tst	r2, r5
 800218a:	d014      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800218c:	6821      	ldr	r1, [r4, #0]
 800218e:	6808      	ldr	r0, [r1, #0]
 8002190:	06c0      	lsls	r0, r0, #27
 8002192:	d510      	bpl.n	80021b6 <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002194:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002196:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800219a:	2a05      	cmp	r2, #5
 800219c:	d063      	beq.n	8002266 <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800219e:	680b      	ldr	r3, [r1, #0]
 80021a0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021a4:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021a6:	d07e      	beq.n	80022a6 <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021a8:	0319      	lsls	r1, r3, #12
 80021aa:	f140 8089 	bpl.w	80022c0 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 80021ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80021b0:	b10b      	cbz	r3, 80021b6 <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 80021b2:	4620      	mov	r0, r4
 80021b4:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80021b8:	b323      	cbz	r3, 8002204 <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80021bc:	07da      	lsls	r2, r3, #31
 80021be:	d51a      	bpl.n	80021f6 <HAL_DMA_IRQHandler+0xc6>
      __HAL_DMA_DISABLE(hdma);
 80021c0:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80021c2:	2105      	movs	r1, #5
  uint32_t timeout = SystemCoreClock / 9600;
 80021c4:	4b44      	ldr	r3, [pc, #272]	; (80022d8 <HAL_DMA_IRQHandler+0x1a8>)
      hdma->State = HAL_DMA_STATE_ABORT;
 80021c6:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600;
 80021ca:	fba3 3606 	umull	r3, r6, r3, r6
      __HAL_DMA_DISABLE(hdma);
 80021ce:	6813      	ldr	r3, [r2, #0]
 80021d0:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 80021d4:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	e002      	b.n	80021e0 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021da:	6813      	ldr	r3, [r2, #0]
 80021dc:	07db      	lsls	r3, r3, #31
 80021de:	d504      	bpl.n	80021ea <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 80021e0:	9b01      	ldr	r3, [sp, #4]
 80021e2:	3301      	adds	r3, #1
 80021e4:	42b3      	cmp	r3, r6
 80021e6:	9301      	str	r3, [sp, #4]
 80021e8:	d9f7      	bls.n	80021da <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 80021ea:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 80021ec:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 80021ee:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80021f2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80021f6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80021f8:	b123      	cbz	r3, 8002204 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 80021fa:	4620      	mov	r0, r4
}
 80021fc:	b003      	add	sp, #12
 80021fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8002202:	4718      	bx	r3
}
 8002204:	b003      	add	sp, #12
 8002206:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002208:	6808      	ldr	r0, [r1, #0]
 800220a:	f020 0004 	bic.w	r0, r0, #4
 800220e:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002210:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002212:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002214:	f042 0201 	orr.w	r2, r2, #1
 8002218:	6562      	str	r2, [r4, #84]	; 0x54
 800221a:	e79b      	b.n	8002154 <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800221c:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800221e:	680a      	ldr	r2, [r1, #0]
 8002220:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002224:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002226:	d118      	bne.n	800225a <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002228:	05d2      	lsls	r2, r2, #23
 800222a:	d403      	bmi.n	8002234 <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800222c:	680a      	ldr	r2, [r1, #0]
 800222e:	f022 0208 	bic.w	r2, r2, #8
 8002232:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002234:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002236:	2a00      	cmp	r2, #0
 8002238:	d0a4      	beq.n	8002184 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 800223a:	4620      	mov	r0, r4
 800223c:	4790      	blx	r2
 800223e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002240:	e7a0      	b.n	8002184 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002242:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002244:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002246:	f042 0204 	orr.w	r2, r2, #4
 800224a:	6562      	str	r2, [r4, #84]	; 0x54
 800224c:	e792      	b.n	8002174 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800224e:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002250:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002252:	f042 0202 	orr.w	r2, r2, #2
 8002256:	6562      	str	r2, [r4, #84]	; 0x54
 8002258:	e784      	b.n	8002164 <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800225a:	0311      	lsls	r1, r2, #12
 800225c:	d5ea      	bpl.n	8002234 <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800225e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002260:	2a00      	cmp	r2, #0
 8002262:	d1ea      	bne.n	800223a <HAL_DMA_IRQHandler+0x10a>
 8002264:	e78e      	b.n	8002184 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002266:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002268:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800226a:	f022 0216 	bic.w	r2, r2, #22
 800226e:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002270:	694a      	ldr	r2, [r1, #20]
 8002272:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002276:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002278:	b338      	cbz	r0, 80022ca <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800227a:	680a      	ldr	r2, [r1, #0]
 800227c:	f022 0208 	bic.w	r2, r2, #8
 8002280:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002282:	223f      	movs	r2, #63	; 0x3f
        __HAL_UNLOCK(hdma);
 8002284:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 8002286:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 800228c:	6d22      	ldr	r2, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800228e:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8002290:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8002294:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8002298:	2a00      	cmp	r2, #0
 800229a:	d0b3      	beq.n	8002204 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 800229c:	4620      	mov	r0, r4
}
 800229e:	b003      	add	sp, #12
 80022a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 80022a4:	4710      	bx	r2
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022a6:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80022aa:	d180      	bne.n	80021ae <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022ac:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80022ae:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022b0:	f022 0210 	bic.w	r2, r2, #16
 80022b4:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 80022b6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80022ba:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 80022be:	e776      	b.n	80021ae <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 80022c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f47f af75 	bne.w	80021b2 <HAL_DMA_IRQHandler+0x82>
 80022c8:	e775      	b.n	80021b6 <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022ca:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80022cc:	2a00      	cmp	r2, #0
 80022ce:	d1d4      	bne.n	800227a <HAL_DMA_IRQHandler+0x14a>
 80022d0:	e7d7      	b.n	8002282 <HAL_DMA_IRQHandler+0x152>
 80022d2:	bf00      	nop
 80022d4:	200000a4 	.word	0x200000a4
 80022d8:	1b4e81b5 	.word	0x1b4e81b5

080022dc <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80022dc:	b470      	push	{r4, r5, r6}
 80022de:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80022e0:	6805      	ldr	r5, [r0, #0]
 80022e2:	ea44 4303 	orr.w	r3, r4, r3, lsl #16

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80022e6:	6846      	ldr	r6, [r0, #4]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80022e8:	6c6c      	ldr	r4, [r5, #68]	; 0x44
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80022ea:	f5b6 3f40 	cmp.w	r6, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80022ee:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 80022f2:	ea43 0304 	orr.w	r3, r3, r4
 80022f6:	646b      	str	r3, [r5, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80022f8:	63ea      	str	r2, [r5, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80022fa:	d002      	beq.n	8002302 <DMA2D_SetConfig+0x26>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80022fc:	60e9      	str	r1, [r5, #12]
  }
}
 80022fe:	bc70      	pop	{r4, r5, r6}
 8002300:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002302:	6882      	ldr	r2, [r0, #8]
 8002304:	b1b2      	cbz	r2, 8002334 <DMA2D_SetConfig+0x58>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002306:	2a01      	cmp	r2, #1
 8002308:	d017      	beq.n	800233a <DMA2D_SetConfig+0x5e>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800230a:	2a02      	cmp	r2, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800230c:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002310:	f401 447f 	and.w	r4, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002314:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002316:	d013      	beq.n	8002340 <DMA2D_SetConfig+0x64>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002318:	2a03      	cmp	r2, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800231a:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800231e:	d017      	beq.n	8002350 <DMA2D_SetConfig+0x74>
      tmp2 = (tmp2 >> 20U);
 8002320:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 8002322:	0b24      	lsrs	r4, r4, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002324:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 8002326:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002328:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800232c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8002330:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002334:	63a9      	str	r1, [r5, #56]	; 0x38
}
 8002336:	bc70      	pop	{r4, r5, r6}
 8002338:	4770      	bx	lr
      tmp = (tmp3 | tmp2 | tmp4);
 800233a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800233e:	e7f9      	b.n	8002334 <DMA2D_SetConfig+0x58>
      tmp2 = (tmp2 >> 19U);
 8002340:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
 8002342:	0aa4      	lsrs	r4, r4, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002344:	02c9      	lsls	r1, r1, #11
 8002346:	ea41 1144 	orr.w	r1, r1, r4, lsl #5
 800234a:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800234e:	e7f1      	b.n	8002334 <DMA2D_SetConfig+0x58>
      tmp2 = (tmp2 >> 19U);
 8002350:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8002352:	0ae4      	lsrs	r4, r4, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002354:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 8002356:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002358:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 800235c:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8002360:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8002364:	e7e6      	b.n	8002334 <DMA2D_SetConfig+0x58>
 8002366:	bf00      	nop

08002368 <HAL_DMA2D_Init>:
  if(hdma2d == NULL)
 8002368:	b340      	cbz	r0, 80023bc <HAL_DMA2D_Init+0x54>
{
 800236a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800236c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002370:	4604      	mov	r4, r0
 8002372:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002376:	b1e3      	cbz	r3, 80023b2 <HAL_DMA2D_Init+0x4a>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002378:	2202      	movs	r2, #2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800237a:	68a7      	ldr	r7, [r4, #8]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800237c:	2500      	movs	r5, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800237e:	2601      	movs	r6, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002380:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  return HAL_OK;
 8002384:	4628      	mov	r0, r5
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002386:	e9d4 3100 	ldrd	r3, r1, [r4]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002390:	430a      	orrs	r2, r1
 8002392:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002394:	6b59      	ldr	r1, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002396:	4a0a      	ldr	r2, [pc, #40]	; (80023c0 <HAL_DMA2D_Init+0x58>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002398:	f021 0107 	bic.w	r1, r1, #7
 800239c:	4339      	orrs	r1, r7
 800239e:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80023a0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80023a2:	400a      	ands	r2, r1
 80023a4:	68e1      	ldr	r1, [r4, #12]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80023aa:	63e5      	str	r5, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80023ac:	f884 6039 	strb.w	r6, [r4, #57]	; 0x39
}
 80023b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 80023b2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 80023b6:	f004 fb77 	bl	8006aa8 <HAL_DMA2D_MspInit>
 80023ba:	e7dd      	b.n	8002378 <HAL_DMA2D_Init+0x10>
     return HAL_ERROR;
 80023bc:	2001      	movs	r0, #1
}
 80023be:	4770      	bx	lr
 80023c0:	ffffc000 	.word	0xffffc000

080023c4 <HAL_DMA2D_Start>:
{
 80023c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 80023c6:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
{
 80023ca:	b083      	sub	sp, #12
  __HAL_LOCK(hdma2d);
 80023cc:	2d01      	cmp	r5, #1
 80023ce:	d011      	beq.n	80023f4 <HAL_DMA2D_Start+0x30>
 80023d0:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80023d2:	9f08      	ldr	r7, [sp, #32]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80023d4:	2502      	movs	r5, #2
 80023d6:	4604      	mov	r4, r0
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80023d8:	9700      	str	r7, [sp, #0]
  __HAL_LOCK(hdma2d);
 80023da:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80023de:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80023e2:	f7ff ff7b 	bl	80022dc <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 80023e6:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 80023e8:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 80023ea:	6813      	ldr	r3, [r2, #0]
 80023ec:	4333      	orrs	r3, r6
 80023ee:	6013      	str	r3, [r2, #0]
}
 80023f0:	b003      	add	sp, #12
 80023f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma2d);
 80023f4:	2002      	movs	r0, #2
}
 80023f6:	b003      	add	sp, #12
 80023f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023fa:	bf00      	nop

080023fc <HAL_DMA2D_PollForTransfer>:
{
 80023fc:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 80023fe:	2200      	movs	r2, #0
{
 8002400:	b082      	sub	sp, #8
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002402:	6803      	ldr	r3, [r0, #0]
{
 8002404:	4605      	mov	r5, r0
  __IO uint32_t isrflags = 0x0U;
 8002406:	9201      	str	r2, [sp, #4]
{
 8002408:	460c      	mov	r4, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	07d2      	lsls	r2, r2, #31
 800240e:	d40f      	bmi.n	8002430 <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002410:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002412:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002414:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 8002416:	0692      	lsls	r2, r2, #26
 8002418:	d433      	bmi.n	8002482 <HAL_DMA2D_PollForTransfer+0x86>
  __HAL_UNLOCK(hdma2d);
 800241a:	2200      	movs	r2, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800241c:	2412      	movs	r4, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800241e:	2101      	movs	r1, #1
  return HAL_OK;
 8002420:	4610      	mov	r0, r2
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002422:	609c      	str	r4, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 8002424:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002428:	f885 1039 	strb.w	r1, [r5, #57]	; 0x39
}
 800242c:	b002      	add	sp, #8
 800242e:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 8002430:	f7ff f906 	bl	8001640 <HAL_GetTick>
 8002434:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002436:	682b      	ldr	r3, [r5, #0]
 8002438:	e001      	b.n	800243e <HAL_DMA2D_PollForTransfer+0x42>
      if(Timeout != HAL_MAX_DELAY)
 800243a:	1c60      	adds	r0, r4, #1
 800243c:	d148      	bne.n	80024d0 <HAL_DMA2D_PollForTransfer+0xd4>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	0791      	lsls	r1, r2, #30
 8002442:	d4e5      	bmi.n	8002410 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002448:	9a01      	ldr	r2, [sp, #4]
 800244a:	f012 0f21 	tst.w	r2, #33	; 0x21
 800244e:	d0f4      	beq.n	800243a <HAL_DMA2D_PollForTransfer+0x3e>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002450:	9a01      	ldr	r2, [sp, #4]
 8002452:	0696      	lsls	r6, r2, #26
 8002454:	d503      	bpl.n	800245e <HAL_DMA2D_PollForTransfer+0x62>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002456:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002458:	f042 0202 	orr.w	r2, r2, #2
 800245c:	63ea      	str	r2, [r5, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800245e:	9a01      	ldr	r2, [sp, #4]
 8002460:	07d4      	lsls	r4, r2, #31
 8002462:	d503      	bpl.n	800246c <HAL_DMA2D_PollForTransfer+0x70>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002464:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002466:	f042 0201 	orr.w	r2, r2, #1
 800246a:	63ea      	str	r2, [r5, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800246c:	2421      	movs	r4, #33	; 0x21
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800246e:	2104      	movs	r1, #4
        __HAL_UNLOCK(hdma2d);
 8002470:	2200      	movs	r2, #0
        return HAL_ERROR;
 8002472:	2001      	movs	r0, #1
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002474:	609c      	str	r4, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8002476:	f885 1039 	strb.w	r1, [r5, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 800247a:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
}
 800247e:	b002      	add	sp, #8
 8002480:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8002482:	f7ff f8dd 	bl	8001640 <HAL_GetTick>
 8002486:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002488:	682b      	ldr	r3, [r5, #0]
 800248a:	e001      	b.n	8002490 <HAL_DMA2D_PollForTransfer+0x94>
      if(Timeout != HAL_MAX_DELAY)
 800248c:	1c61      	adds	r1, r4, #1
 800248e:	d132      	bne.n	80024f6 <HAL_DMA2D_PollForTransfer+0xfa>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	06d2      	lsls	r2, r2, #27
 8002494:	d4c1      	bmi.n	800241a <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800249a:	9a01      	ldr	r2, [sp, #4]
 800249c:	f012 0f29 	tst.w	r2, #41	; 0x29
 80024a0:	d0f4      	beq.n	800248c <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80024a2:	9a01      	ldr	r2, [sp, #4]
 80024a4:	0716      	lsls	r6, r2, #28
 80024a6:	d503      	bpl.n	80024b0 <HAL_DMA2D_PollForTransfer+0xb4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80024a8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80024aa:	f042 0204 	orr.w	r2, r2, #4
 80024ae:	63ea      	str	r2, [r5, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80024b0:	9a01      	ldr	r2, [sp, #4]
 80024b2:	0694      	lsls	r4, r2, #26
 80024b4:	d503      	bpl.n	80024be <HAL_DMA2D_PollForTransfer+0xc2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80024b6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80024b8:	f042 0202 	orr.w	r2, r2, #2
 80024bc:	63ea      	str	r2, [r5, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80024be:	9a01      	ldr	r2, [sp, #4]
 80024c0:	07d0      	lsls	r0, r2, #31
 80024c2:	d503      	bpl.n	80024cc <HAL_DMA2D_PollForTransfer+0xd0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80024c4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80024c6:	f042 0201 	orr.w	r2, r2, #1
 80024ca:	63ea      	str	r2, [r5, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80024cc:	2429      	movs	r4, #41	; 0x29
 80024ce:	e7ce      	b.n	800246e <HAL_DMA2D_PollForTransfer+0x72>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80024d0:	f7ff f8b6 	bl	8001640 <HAL_GetTick>
 80024d4:	1b80      	subs	r0, r0, r6
 80024d6:	42a0      	cmp	r0, r4
 80024d8:	d801      	bhi.n	80024de <HAL_DMA2D_PollForTransfer+0xe2>
 80024da:	2c00      	cmp	r4, #0
 80024dc:	d1ab      	bne.n	8002436 <HAL_DMA2D_PollForTransfer+0x3a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80024de:	6beb      	ldr	r3, [r5, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80024e0:	2203      	movs	r2, #3
          __HAL_UNLOCK(hdma2d);
 80024e2:	2100      	movs	r1, #0
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80024e4:	f043 0320 	orr.w	r3, r3, #32
          return HAL_TIMEOUT;
 80024e8:	4610      	mov	r0, r2
          __HAL_UNLOCK(hdma2d);
 80024ea:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80024ee:	63eb      	str	r3, [r5, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80024f0:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
          return HAL_TIMEOUT;
 80024f4:	e79a      	b.n	800242c <HAL_DMA2D_PollForTransfer+0x30>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80024f6:	f7ff f8a3 	bl	8001640 <HAL_GetTick>
 80024fa:	1b80      	subs	r0, r0, r6
 80024fc:	42a0      	cmp	r0, r4
 80024fe:	d8ee      	bhi.n	80024de <HAL_DMA2D_PollForTransfer+0xe2>
 8002500:	2c00      	cmp	r4, #0
 8002502:	d1c1      	bne.n	8002488 <HAL_DMA2D_PollForTransfer+0x8c>
 8002504:	e7eb      	b.n	80024de <HAL_DMA2D_PollForTransfer+0xe2>
 8002506:	bf00      	nop

08002508 <HAL_DMA2D_LineEventCallback>:
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop

0800250c <HAL_DMA2D_CLUTLoadingCpltCallback>:
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop

08002510 <HAL_DMA2D_IRQHandler>:
{
 8002510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002512:	6803      	ldr	r3, [r0, #0]
{
 8002514:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002516:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002518:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800251a:	07e9      	lsls	r1, r5, #31
 800251c:	d517      	bpl.n	800254e <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800251e:	05f2      	lsls	r2, r6, #23
 8002520:	d515      	bpl.n	800254e <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002522:	681a      	ldr	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002524:	f04f 0e01 	mov.w	lr, #1
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002528:	f04f 0c04 	mov.w	ip, #4
      __HAL_UNLOCK(hdma2d);
 800252c:	2700      	movs	r7, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800252e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
      if(hdma2d->XferErrorCallback != NULL)
 8002532:	6941      	ldr	r1, [r0, #20]
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002534:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002536:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002538:	ea42 020e 	orr.w	r2, r2, lr
 800253c:	63c2      	str	r2, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800253e:	f8c3 e008 	str.w	lr, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002542:	f880 c039 	strb.w	ip, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8002546:	f880 7038 	strb.w	r7, [r0, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 800254a:	b101      	cbz	r1, 800254e <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 800254c:	4788      	blx	r1
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800254e:	06af      	lsls	r7, r5, #26
 8002550:	d516      	bpl.n	8002580 <HAL_DMA2D_IRQHandler+0x70>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002552:	04b0      	lsls	r0, r6, #18
 8002554:	d514      	bpl.n	8002580 <HAL_DMA2D_IRQHandler+0x70>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002556:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002558:	2020      	movs	r0, #32
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800255a:	2104      	movs	r1, #4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002562:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hdma2d);
 8002564:	2200      	movs	r2, #0
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002566:	6098      	str	r0, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002568:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hdma2d);
 800256a:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800256e:	f043 0302 	orr.w	r3, r3, #2
      if(hdma2d->XferErrorCallback != NULL)
 8002572:	6962      	ldr	r2, [r4, #20]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002574:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002576:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
      if(hdma2d->XferErrorCallback != NULL)
 800257a:	b10a      	cbz	r2, 8002580 <HAL_DMA2D_IRQHandler+0x70>
        hdma2d->XferErrorCallback(hdma2d);
 800257c:	4620      	mov	r0, r4
 800257e:	4790      	blx	r2
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002580:	0729      	lsls	r1, r5, #28
 8002582:	d515      	bpl.n	80025b0 <HAL_DMA2D_IRQHandler+0xa0>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002584:	0532      	lsls	r2, r6, #20
 8002586:	d513      	bpl.n	80025b0 <HAL_DMA2D_IRQHandler+0xa0>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002588:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800258a:	2008      	movs	r0, #8
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800258c:	2104      	movs	r1, #4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002594:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hdma2d);
 8002596:	2200      	movs	r2, #0
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002598:	6098      	str	r0, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800259a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hdma2d);
 800259c:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80025a0:	430b      	orrs	r3, r1
      if(hdma2d->XferErrorCallback != NULL)
 80025a2:	6962      	ldr	r2, [r4, #20]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80025a4:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80025a6:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
      if(hdma2d->XferErrorCallback != NULL)
 80025aa:	b10a      	cbz	r2, 80025b0 <HAL_DMA2D_IRQHandler+0xa0>
        hdma2d->XferErrorCallback(hdma2d);
 80025ac:	4620      	mov	r0, r4
 80025ae:	4790      	blx	r2
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80025b0:	076b      	lsls	r3, r5, #29
 80025b2:	d501      	bpl.n	80025b8 <HAL_DMA2D_IRQHandler+0xa8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 80025b4:	0577      	lsls	r7, r6, #21
 80025b6:	d42e      	bmi.n	8002616 <HAL_DMA2D_IRQHandler+0x106>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80025b8:	07a8      	lsls	r0, r5, #30
 80025ba:	d514      	bpl.n	80025e6 <HAL_DMA2D_IRQHandler+0xd6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 80025bc:	05b1      	lsls	r1, r6, #22
 80025be:	d512      	bpl.n	80025e6 <HAL_DMA2D_IRQHandler+0xd6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80025c0:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80025c2:	2702      	movs	r7, #2
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80025c4:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
 80025c6:	2000      	movs	r0, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80025d0:	609f      	str	r7, [r3, #8]
      if(hdma2d->XferCpltCallback != NULL)
 80025d2:	6923      	ldr	r3, [r4, #16]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80025d4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hdma2d);
 80025d6:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80025da:	63e2      	str	r2, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80025dc:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
      if(hdma2d->XferCpltCallback != NULL)
 80025e0:	b10b      	cbz	r3, 80025e6 <HAL_DMA2D_IRQHandler+0xd6>
        hdma2d->XferCpltCallback(hdma2d);
 80025e2:	4620      	mov	r0, r4
 80025e4:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80025e6:	06ea      	lsls	r2, r5, #27
 80025e8:	d501      	bpl.n	80025ee <HAL_DMA2D_IRQHandler+0xde>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80025ea:	04f3      	lsls	r3, r6, #19
 80025ec:	d400      	bmi.n	80025f0 <HAL_DMA2D_IRQHandler+0xe0>
}
 80025ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80025f0:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80025f2:	2610      	movs	r6, #16
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80025f4:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
 80025f6:	2500      	movs	r5, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80025f8:	681a      	ldr	r2, [r3, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80025fa:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80025fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002600:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002602:	609e      	str	r6, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002604:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hdma2d);
 8002606:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800260a:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800260c:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002610:	f7ff ff7c 	bl	800250c <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8002614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002616:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002618:	2104      	movs	r1, #4
      HAL_DMA2D_LineEventCallback(hdma2d);
 800261a:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002622:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002624:	6099      	str	r1, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002626:	f7ff ff6f 	bl	8002508 <HAL_DMA2D_LineEventCallback>
 800262a:	e7c5      	b.n	80025b8 <HAL_DMA2D_IRQHandler+0xa8>

0800262c <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 800262c:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8002630:	2a01      	cmp	r2, #1
 8002632:	d049      	beq.n	80026c8 <HAL_DMA2D_ConfigLayer+0x9c>
 8002634:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002636:	eb00 1001 	add.w	r0, r0, r1, lsl #4
{
 800263a:	b4f0      	push	{r4, r5, r6, r7}
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800263c:	e9d0 2507 	ldrd	r2, r5, [r0, #28]
  __HAL_LOCK(hdma2d);
 8002640:	2701      	movs	r7, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002642:	2402      	movs	r4, #2
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002644:	f1a2 0609 	sub.w	r6, r2, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002648:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
  __HAL_LOCK(hdma2d);
 800264c:	f883 7038 	strb.w	r7, [r3, #56]	; 0x38
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002650:	42be      	cmp	r6, r7
 8002652:	6a45      	ldr	r5, [r0, #36]	; 0x24
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002654:	f883 4039 	strb.w	r4, [r3, #57]	; 0x39
 8002658:	681c      	ldr	r4, [r3, #0]
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800265a:	d91a      	bls.n	8002692 <HAL_DMA2D_ConfigLayer+0x66>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800265c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002660:	b179      	cbz	r1, 8002682 <HAL_DMA2D_ConfigLayer+0x56>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002662:	69e5      	ldr	r5, [r4, #28]
 8002664:	4919      	ldr	r1, [pc, #100]	; (80026cc <HAL_DMA2D_ConfigLayer+0xa0>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002666:	6980      	ldr	r0, [r0, #24]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002668:	4029      	ands	r1, r5
 800266a:	430a      	orrs	r2, r1
 800266c:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800266e:	6120      	str	r0, [r4, #16]
  __HAL_UNLOCK(hdma2d);
 8002670:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002672:	2101      	movs	r1, #1
  return HAL_OK;
 8002674:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002676:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 800267a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 800267e:	bcf0      	pop	{r4, r5, r6, r7}
 8002680:	4770      	bx	lr
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002682:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002684:	4911      	ldr	r1, [pc, #68]	; (80026cc <HAL_DMA2D_ConfigLayer+0xa0>)
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002686:	6998      	ldr	r0, [r3, #24]
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002688:	4029      	ands	r1, r5
 800268a:	430a      	orrs	r2, r1
 800268c:	6262      	str	r2, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800268e:	61a0      	str	r0, [r4, #24]
 8002690:	e7ee      	b.n	8002670 <HAL_DMA2D_ConfigLayer+0x44>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002692:	f005 467f 	and.w	r6, r5, #4278190080	; 0xff000000
 8002696:	4332      	orrs	r2, r6
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002698:	b151      	cbz	r1, 80026b0 <HAL_DMA2D_ConfigLayer+0x84>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800269a:	69e6      	ldr	r6, [r4, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800269c:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80026a0:	490a      	ldr	r1, [pc, #40]	; (80026cc <HAL_DMA2D_ConfigLayer+0xa0>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80026a2:	6980      	ldr	r0, [r0, #24]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80026a4:	4031      	ands	r1, r6
 80026a6:	430a      	orrs	r2, r1
 80026a8:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80026aa:	6120      	str	r0, [r4, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80026ac:	6225      	str	r5, [r4, #32]
 80026ae:	e7df      	b.n	8002670 <HAL_DMA2D_ConfigLayer+0x44>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80026b0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80026b2:	4906      	ldr	r1, [pc, #24]	; (80026cc <HAL_DMA2D_ConfigLayer+0xa0>)
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80026b4:	6a58      	ldr	r0, [r3, #36]	; 0x24
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80026b6:	4029      	ands	r1, r5
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80026b8:	699d      	ldr	r5, [r3, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80026ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80026be:	430a      	orrs	r2, r1
 80026c0:	6262      	str	r2, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80026c2:	61a5      	str	r5, [r4, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80026c4:	62a0      	str	r0, [r4, #40]	; 0x28
 80026c6:	e7d3      	b.n	8002670 <HAL_DMA2D_ConfigLayer+0x44>
  __HAL_LOCK(hdma2d);
 80026c8:	2002      	movs	r0, #2
}
 80026ca:	4770      	bx	lr
 80026cc:	00fcfff0 	.word	0x00fcfff0

080026d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026d4:	f8df c22c 	ldr.w	ip, [pc, #556]	; 8002904 <HAL_GPIO_Init+0x234>
{
 80026d8:	b083      	sub	sp, #12
 80026da:	468e      	mov	lr, r1
  for(position = 0; position < GPIO_NUMBER; position++)
 80026dc:	2500      	movs	r5, #0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026de:	f8df 9228 	ldr.w	r9, [pc, #552]	; 8002908 <HAL_GPIO_Init+0x238>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026e2:	f8d1 8000 	ldr.w	r8, [r1]
 80026e6:	e003      	b.n	80026f0 <HAL_GPIO_Init+0x20>
  for(position = 0; position < GPIO_NUMBER; position++)
 80026e8:	3501      	adds	r5, #1
 80026ea:	2d10      	cmp	r5, #16
 80026ec:	f000 80b6 	beq.w	800285c <HAL_GPIO_Init+0x18c>
    ioposition = ((uint32_t)0x01) << position;
 80026f0:	2301      	movs	r3, #1
 80026f2:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026f4:	ea08 0103 	and.w	r1, r8, r3
    if(iocurrent == ioposition)
 80026f8:	428b      	cmp	r3, r1
 80026fa:	d1f5      	bne.n	80026e8 <HAL_GPIO_Init+0x18>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026fc:	f8de 4004 	ldr.w	r4, [lr, #4]
 8002700:	f024 0710 	bic.w	r7, r4, #16
 8002704:	2f02      	cmp	r7, #2
 8002706:	f040 80ac 	bne.w	8002862 <HAL_GPIO_Init+0x192>
        temp = GPIOx->AFR[position >> 3];
 800270a:	08ef      	lsrs	r7, r5, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800270c:	f005 0a07 	and.w	sl, r5, #7
 8002710:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002714:	f8de 2010 	ldr.w	r2, [lr, #16]
 8002718:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800271c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8002720:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002722:	fa0b fb0a 	lsl.w	fp, fp, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002726:	fa02 f20a 	lsl.w	r2, r2, sl
 800272a:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800272e:	ea26 060b 	bic.w	r6, r6, fp
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002732:	f04f 0b03 	mov.w	fp, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002736:	4332      	orrs	r2, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002738:	fa0b fb0a 	lsl.w	fp, fp, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800273c:	f004 0603 	and.w	r6, r4, #3
        GPIOx->AFR[position >> 3] = temp;
 8002740:	623a      	str	r2, [r7, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002742:	ea6f 020b 	mvn.w	r2, fp
      temp = GPIOx->MODER;
 8002746:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002748:	fa06 f60a 	lsl.w	r6, r6, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800274c:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800274e:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8002750:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8002752:	6886      	ldr	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002754:	f3c4 1700 	ubfx	r7, r4, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002758:	ea06 0b02 	and.w	fp, r6, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 800275c:	f8de 600c 	ldr.w	r6, [lr, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002760:	40af      	lsls	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8002762:	fa06 f60a 	lsl.w	r6, r6, sl
 8002766:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->OSPEEDR = temp;
 800276a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800276c:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800276e:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002772:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 8002774:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8002776:	68c6      	ldr	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002778:	00e7      	lsls	r7, r4, #3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800277a:	f8de 3008 	ldr.w	r3, [lr, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800277e:	ea02 0206 	and.w	r2, r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002782:	fa03 f30a 	lsl.w	r3, r3, sl
 8002786:	ea43 0302 	orr.w	r3, r3, r2
      GPIOx->PUPDR = temp;
 800278a:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800278c:	d5ac      	bpl.n	80026e8 <HAL_GPIO_Init+0x18>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278e:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8002792:	f025 0703 	bic.w	r7, r5, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002796:	f005 0303 	and.w	r3, r5, #3
 800279a:	220f      	movs	r2, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800279c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80027a0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027a4:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a6:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 80027aa:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80027ae:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027b2:	fa02 fa03 	lsl.w	sl, r2, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b6:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 80027ba:	9601      	str	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80027bc:	4e48      	ldr	r6, [pc, #288]	; (80028e0 <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027be:	9a01      	ldr	r2, [sp, #4]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80027c0:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2];
 80027c2:	68ba      	ldr	r2, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027c4:	ea22 020a 	bic.w	r2, r2, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80027c8:	d020      	beq.n	800280c <HAL_GPIO_Init+0x13c>
 80027ca:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80027ce:	42b0      	cmp	r0, r6
 80027d0:	d05e      	beq.n	8002890 <HAL_GPIO_Init+0x1c0>
 80027d2:	4e44      	ldr	r6, [pc, #272]	; (80028e4 <HAL_GPIO_Init+0x214>)
 80027d4:	42b0      	cmp	r0, r6
 80027d6:	d060      	beq.n	800289a <HAL_GPIO_Init+0x1ca>
 80027d8:	4e43      	ldr	r6, [pc, #268]	; (80028e8 <HAL_GPIO_Init+0x218>)
 80027da:	42b0      	cmp	r0, r6
 80027dc:	d062      	beq.n	80028a4 <HAL_GPIO_Init+0x1d4>
 80027de:	4e43      	ldr	r6, [pc, #268]	; (80028ec <HAL_GPIO_Init+0x21c>)
 80027e0:	42b0      	cmp	r0, r6
 80027e2:	d064      	beq.n	80028ae <HAL_GPIO_Init+0x1de>
 80027e4:	4e42      	ldr	r6, [pc, #264]	; (80028f0 <HAL_GPIO_Init+0x220>)
 80027e6:	42b0      	cmp	r0, r6
 80027e8:	d06b      	beq.n	80028c2 <HAL_GPIO_Init+0x1f2>
 80027ea:	4e42      	ldr	r6, [pc, #264]	; (80028f4 <HAL_GPIO_Init+0x224>)
 80027ec:	42b0      	cmp	r0, r6
 80027ee:	d06d      	beq.n	80028cc <HAL_GPIO_Init+0x1fc>
 80027f0:	4e41      	ldr	r6, [pc, #260]	; (80028f8 <HAL_GPIO_Init+0x228>)
 80027f2:	42b0      	cmp	r0, r6
 80027f4:	d060      	beq.n	80028b8 <HAL_GPIO_Init+0x1e8>
 80027f6:	4e41      	ldr	r6, [pc, #260]	; (80028fc <HAL_GPIO_Init+0x22c>)
 80027f8:	42b0      	cmp	r0, r6
 80027fa:	d06c      	beq.n	80028d6 <HAL_GPIO_Init+0x206>
 80027fc:	4e40      	ldr	r6, [pc, #256]	; (8002900 <HAL_GPIO_Init+0x230>)
 80027fe:	42b0      	cmp	r0, r6
 8002800:	bf0c      	ite	eq
 8002802:	2609      	moveq	r6, #9
 8002804:	260a      	movne	r6, #10
 8002806:	fa06 f303 	lsl.w	r3, r6, r3
 800280a:	431a      	orrs	r2, r3
        SYSCFG->EXTICR[position >> 2] = temp;
 800280c:	60ba      	str	r2, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800280e:	03e6      	lsls	r6, r4, #15
        temp = EXTI->IMR;
 8002810:	f8dc 3000 	ldr.w	r3, [ip]
        temp &= ~((uint32_t)iocurrent);
 8002814:	ea6f 0201 	mvn.w	r2, r1
  for(position = 0; position < GPIO_NUMBER; position++)
 8002818:	f105 0501 	add.w	r5, r5, #1
        temp &= ~((uint32_t)iocurrent);
 800281c:	bf54      	ite	pl
 800281e:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8002820:	430b      	orrmi	r3, r1
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002822:	03a7      	lsls	r7, r4, #14
        EXTI->IMR = temp;
 8002824:	f8cc 3000 	str.w	r3, [ip]
        temp = EXTI->EMR;
 8002828:	f8dc 3004 	ldr.w	r3, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
 800282c:	bf54      	ite	pl
 800282e:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8002830:	430b      	orrmi	r3, r1
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002832:	02e6      	lsls	r6, r4, #11
        EXTI->EMR = temp;
 8002834:	f8cc 3004 	str.w	r3, [ip, #4]
        temp = EXTI->RTSR;
 8002838:	f8dc 3008 	ldr.w	r3, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
 800283c:	bf54      	ite	pl
 800283e:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8002840:	430b      	orrmi	r3, r1
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002842:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8002844:	f8cc 3008 	str.w	r3, [ip, #8]
        temp = EXTI->FTSR;
 8002848:	f8dc 300c 	ldr.w	r3, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
 800284c:	bf54      	ite	pl
 800284e:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8002850:	430b      	orrmi	r3, r1
  for(position = 0; position < GPIO_NUMBER; position++)
 8002852:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 8002854:	f8cc 300c 	str.w	r3, [ip, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002858:	f47f af4a 	bne.w	80026f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800285c:	b003      	add	sp, #12
 800285e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002862:	ea4f 0a45 	mov.w	sl, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002866:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 8002868:	f8d0 b000 	ldr.w	fp, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800286c:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800286e:	ea04 0602 	and.w	r6, r4, r2
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002872:	fa02 f20a 	lsl.w	r2, r2, sl
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002876:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002878:	ea6f 0202 	mvn.w	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800287c:	fa06 f60a 	lsl.w	r6, r6, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002880:	ea02 0b0b 	and.w	fp, r2, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002884:	ea46 060b 	orr.w	r6, r6, fp
      GPIOx->MODER = temp;
 8002888:	6006      	str	r6, [r0, #0]
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800288a:	f63f af74 	bhi.w	8002776 <HAL_GPIO_Init+0xa6>
 800288e:	e760      	b.n	8002752 <HAL_GPIO_Init+0x82>
 8002890:	2601      	movs	r6, #1
 8002892:	fa06 f303 	lsl.w	r3, r6, r3
 8002896:	431a      	orrs	r2, r3
 8002898:	e7b8      	b.n	800280c <HAL_GPIO_Init+0x13c>
 800289a:	2602      	movs	r6, #2
 800289c:	fa06 f303 	lsl.w	r3, r6, r3
 80028a0:	431a      	orrs	r2, r3
 80028a2:	e7b3      	b.n	800280c <HAL_GPIO_Init+0x13c>
 80028a4:	2603      	movs	r6, #3
 80028a6:	fa06 f303 	lsl.w	r3, r6, r3
 80028aa:	431a      	orrs	r2, r3
 80028ac:	e7ae      	b.n	800280c <HAL_GPIO_Init+0x13c>
 80028ae:	2604      	movs	r6, #4
 80028b0:	fa06 f303 	lsl.w	r3, r6, r3
 80028b4:	431a      	orrs	r2, r3
 80028b6:	e7a9      	b.n	800280c <HAL_GPIO_Init+0x13c>
 80028b8:	2607      	movs	r6, #7
 80028ba:	fa06 f303 	lsl.w	r3, r6, r3
 80028be:	431a      	orrs	r2, r3
 80028c0:	e7a4      	b.n	800280c <HAL_GPIO_Init+0x13c>
 80028c2:	2605      	movs	r6, #5
 80028c4:	fa06 f303 	lsl.w	r3, r6, r3
 80028c8:	431a      	orrs	r2, r3
 80028ca:	e79f      	b.n	800280c <HAL_GPIO_Init+0x13c>
 80028cc:	2606      	movs	r6, #6
 80028ce:	fa06 f303 	lsl.w	r3, r6, r3
 80028d2:	431a      	orrs	r2, r3
 80028d4:	e79a      	b.n	800280c <HAL_GPIO_Init+0x13c>
 80028d6:	2608      	movs	r6, #8
 80028d8:	fa06 f303 	lsl.w	r3, r6, r3
 80028dc:	431a      	orrs	r2, r3
 80028de:	e795      	b.n	800280c <HAL_GPIO_Init+0x13c>
 80028e0:	40020000 	.word	0x40020000
 80028e4:	40020800 	.word	0x40020800
 80028e8:	40020c00 	.word	0x40020c00
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40021400 	.word	0x40021400
 80028f4:	40021800 	.word	0x40021800
 80028f8:	40021c00 	.word	0x40021c00
 80028fc:	40022000 	.word	0x40022000
 8002900:	40022400 	.word	0x40022400
 8002904:	40013c00 	.word	0x40013c00
 8002908:	40023800 	.word	0x40023800

0800290c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800290c:	b902      	cbnz	r2, 8002910 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800290e:	0409      	lsls	r1, r1, #16
 8002910:	6181      	str	r1, [r0, #24]
  }
}
 8002912:	4770      	bx	lr

08002914 <I2C_IsAcknowledgeFailed.part.1>:
  *                the configuration information for the specified I2C.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 8002914:	b570      	push	{r4, r5, r6, lr}
 8002916:	4605      	mov	r5, r0
 8002918:	460c      	mov	r4, r1
 800291a:	4616      	mov	r6, r2
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800291c:	6828      	ldr	r0, [r5, #0]
 800291e:	e001      	b.n	8002924 <I2C_IsAcknowledgeFailed.part.1+0x10>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002920:	1c63      	adds	r3, r4, #1
 8002922:	d120      	bne.n	8002966 <I2C_IsAcknowledgeFailed.part.1+0x52>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002924:	6983      	ldr	r3, [r0, #24]
 8002926:	0699      	lsls	r1, r3, #26
 8002928:	d5fa      	bpl.n	8002920 <I2C_IsAcknowledgeFailed.part.1+0xc>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800292a:	2210      	movs	r2, #16

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800292c:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800292e:	61c2      	str	r2, [r0, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002930:	61c3      	str	r3, [r0, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002932:	6983      	ldr	r3, [r0, #24]
 8002934:	079a      	lsls	r2, r3, #30
 8002936:	d501      	bpl.n	800293c <I2C_IsAcknowledgeFailed.part.1+0x28>
    hi2c->Instance->TXDR = 0x00U;
 8002938:	2300      	movs	r3, #0
 800293a:	6283      	str	r3, [r0, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800293c:	6983      	ldr	r3, [r0, #24]
 800293e:	07db      	lsls	r3, r3, #31
 8002940:	d524      	bpl.n	800298c <I2C_IsAcknowledgeFailed.part.1+0x78>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002942:	6843      	ldr	r3, [r0, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002944:	2200      	movs	r2, #0
    I2C_RESET_CR2(hi2c);
 8002946:	4c14      	ldr	r4, [pc, #80]	; (8002998 <I2C_IsAcknowledgeFailed.part.1+0x84>)
    hi2c->State = HAL_I2C_STATE_READY;
 8002948:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800294a:	4023      	ands	r3, r4
 800294c:	6043      	str	r3, [r0, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800294e:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002950:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002954:	f043 0304 	orr.w	r3, r3, #4
 8002958:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800295a:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800295e:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42

    return HAL_ERROR;
  }
  return HAL_OK;
}
 8002962:	2001      	movs	r0, #1
 8002964:	bd70      	pop	{r4, r5, r6, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002966:	f7fe fe6b 	bl	8001640 <HAL_GetTick>
 800296a:	1b80      	subs	r0, r0, r6
 800296c:	4284      	cmp	r4, r0
 800296e:	d301      	bcc.n	8002974 <I2C_IsAcknowledgeFailed.part.1+0x60>
 8002970:	2c00      	cmp	r4, #0
 8002972:	d1d3      	bne.n	800291c <I2C_IsAcknowledgeFailed.part.1+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002974:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002976:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002978:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800297a:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
 800297c:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002980:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002982:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002986:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
 800298a:	e7ea      	b.n	8002962 <I2C_IsAcknowledgeFailed.part.1+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800298c:	6983      	ldr	r3, [r0, #24]
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	6183      	str	r3, [r0, #24]
 8002994:	e7d5      	b.n	8002942 <I2C_IsAcknowledgeFailed.part.1+0x2e>
 8002996:	bf00      	nop
 8002998:	fe00e800 	.word	0xfe00e800

0800299c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800299c:	b570      	push	{r4, r5, r6, lr}
 800299e:	4605      	mov	r5, r0
 80029a0:	460c      	mov	r4, r1
 80029a2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029a4:	e001      	b.n	80029aa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 80029a6:	1c61      	adds	r1, r4, #1
 80029a8:	d111      	bne.n	80029ce <I2C_WaitOnTXISFlagUntilTimeout+0x32>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029aa:	682b      	ldr	r3, [r5, #0]
 80029ac:	699a      	ldr	r2, [r3, #24]
 80029ae:	0792      	lsls	r2, r2, #30
 80029b0:	d40b      	bmi.n	80029ca <I2C_WaitOnTXISFlagUntilTimeout+0x2e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	06d8      	lsls	r0, r3, #27
 80029b6:	d5f6      	bpl.n	80029a6 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 80029b8:	4632      	mov	r2, r6
 80029ba:	4621      	mov	r1, r4
 80029bc:	4628      	mov	r0, r5
 80029be:	f7ff ffa9 	bl	8002914 <I2C_IsAcknowledgeFailed.part.1>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80029c2:	2800      	cmp	r0, #0
 80029c4:	d0ef      	beq.n	80029a6 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      return HAL_ERROR;
 80029c6:	2001      	movs	r0, #1
}
 80029c8:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80029ca:	2000      	movs	r0, #0
}
 80029cc:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ce:	f7fe fe37 	bl	8001640 <HAL_GetTick>
 80029d2:	1b80      	subs	r0, r0, r6
 80029d4:	42a0      	cmp	r0, r4
 80029d6:	d801      	bhi.n	80029dc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80029d8:	2c00      	cmp	r4, #0
 80029da:	d1e6      	bne.n	80029aa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029dc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029de:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e0:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 80029e2:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029e4:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 80029e6:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029ea:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029ec:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f0:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 80029f4:	bd70      	pop	{r4, r5, r6, pc}
 80029f6:	bf00      	nop

080029f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80029f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fa:	4605      	mov	r5, r0
 80029fc:	460c      	mov	r4, r1
 80029fe:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a00:	e00b      	b.n	8002a1a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	06db      	lsls	r3, r3, #27
 8002a06:	d502      	bpl.n	8002a0e <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
 8002a08:	f7ff ff84 	bl	8002914 <I2C_IsAcknowledgeFailed.part.1>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a0c:	b9d8      	cbnz	r0, 8002a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a0e:	f7fe fe17 	bl	8001640 <HAL_GetTick>
 8002a12:	1b80      	subs	r0, r0, r6
 8002a14:	42a0      	cmp	r0, r4
 8002a16:	d809      	bhi.n	8002a2c <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 8002a18:	b144      	cbz	r4, 8002a2c <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a1a:	682b      	ldr	r3, [r5, #0]
 8002a1c:	4632      	mov	r2, r6
 8002a1e:	4621      	mov	r1, r4
 8002a20:	4628      	mov	r0, r5
 8002a22:	699f      	ldr	r7, [r3, #24]
 8002a24:	06bf      	lsls	r7, r7, #26
 8002a26:	d5ec      	bpl.n	8002a02 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
  return HAL_OK;
 8002a28:	2000      	movs	r0, #0
}
 8002a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a2c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a2e:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a30:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8002a32:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a34:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8002a36:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a3a:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a3c:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a40:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8002a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8002a46:	2001      	movs	r0, #1
}
 8002a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a4a:	bf00      	nop

08002a4c <I2C_WaitOnFlagUntilTimeout>:
{
 8002a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a50:	4680      	mov	r8, r0
 8002a52:	460f      	mov	r7, r1
 8002a54:	4616      	mov	r6, r2
 8002a56:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a58:	f8d8 4000 	ldr.w	r4, [r8]
 8002a5c:	e001      	b.n	8002a62 <I2C_WaitOnFlagUntilTimeout+0x16>
    if (Timeout != HAL_MAX_DELAY)
 8002a5e:	1c6b      	adds	r3, r5, #1
 8002a60:	d10a      	bne.n	8002a78 <I2C_WaitOnFlagUntilTimeout+0x2c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a62:	69a0      	ldr	r0, [r4, #24]
 8002a64:	ea37 0300 	bics.w	r3, r7, r0
 8002a68:	bf0c      	ite	eq
 8002a6a:	2001      	moveq	r0, #1
 8002a6c:	2000      	movne	r0, #0
 8002a6e:	42b0      	cmp	r0, r6
 8002a70:	d0f5      	beq.n	8002a5e <I2C_WaitOnFlagUntilTimeout+0x12>
  return HAL_OK;
 8002a72:	2000      	movs	r0, #0
}
 8002a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a78:	f7fe fde2 	bl	8001640 <HAL_GetTick>
 8002a7c:	9b06      	ldr	r3, [sp, #24]
 8002a7e:	1ac0      	subs	r0, r0, r3
 8002a80:	42a8      	cmp	r0, r5
 8002a82:	d801      	bhi.n	8002a88 <I2C_WaitOnFlagUntilTimeout+0x3c>
 8002a84:	2d00      	cmp	r5, #0
 8002a86:	d1e7      	bne.n	8002a58 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a88:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a8c:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a8e:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8002a90:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a92:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8002a94:	f888 2040 	strb.w	r2, [r8, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a98:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a9c:	f888 1041 	strb.w	r1, [r8, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa0:	f888 2042 	strb.w	r2, [r8, #66]	; 0x42
 8002aa4:	e7e6      	b.n	8002a74 <I2C_WaitOnFlagUntilTimeout+0x28>
 8002aa6:	bf00      	nop

08002aa8 <I2C_RequestMemoryWrite>:
{
 8002aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002aac:	6806      	ldr	r6, [r0, #0]
 8002aae:	f3c1 0c09 	ubfx	ip, r1, #0, #10
 8002ab2:	4c1c      	ldr	r4, [pc, #112]	; (8002b24 <I2C_RequestMemoryWrite+0x7c>)
{
 8002ab4:	4617      	mov	r7, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002ab6:	491c      	ldr	r1, [pc, #112]	; (8002b28 <I2C_RequestMemoryWrite+0x80>)
{
 8002ab8:	4698      	mov	r8, r3
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002aba:	6872      	ldr	r2, [r6, #4]
 8002abc:	ea4c 0404 	orr.w	r4, ip, r4
 8002ac0:	b2db      	uxtb	r3, r3
{
 8002ac2:	b082      	sub	sp, #8
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002ac4:	400a      	ands	r2, r1
{
 8002ac6:	4605      	mov	r5, r0
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac8:	9908      	ldr	r1, [sp, #32]
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002aca:	4314      	orrs	r4, r2
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002acc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002ace:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8002ad2:	6074      	str	r4, [r6, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ad4:	f7ff ff62 	bl	800299c <I2C_WaitOnTXISFlagUntilTimeout>
 8002ad8:	b9d8      	cbnz	r0, 8002b12 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ada:	f1b8 0f01 	cmp.w	r8, #1
 8002ade:	682b      	ldr	r3, [r5, #0]
 8002ae0:	d10f      	bne.n	8002b02 <I2C_RequestMemoryWrite+0x5a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ae2:	b2ff      	uxtb	r7, r7
 8002ae4:	629f      	str	r7, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ae8:	4628      	mov	r0, r5
 8002aea:	2200      	movs	r2, #0
 8002aec:	2180      	movs	r1, #128	; 0x80
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	9b08      	ldr	r3, [sp, #32]
 8002af2:	f7ff ffab 	bl	8002a4c <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8002af6:	3000      	adds	r0, #0
 8002af8:	bf18      	it	ne
 8002afa:	2001      	movne	r0, #1
}
 8002afc:	b002      	add	sp, #8
 8002afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b02:	0a38      	lsrs	r0, r7, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b04:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b08:	6298      	str	r0, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b0a:	4628      	mov	r0, r5
 8002b0c:	f7ff ff46 	bl	800299c <I2C_WaitOnTXISFlagUntilTimeout>
 8002b10:	b118      	cbz	r0, 8002b1a <I2C_RequestMemoryWrite+0x72>
    return HAL_ERROR;
 8002b12:	2001      	movs	r0, #1
}
 8002b14:	b002      	add	sp, #8
 8002b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b1a:	b2ff      	uxtb	r7, r7
 8002b1c:	682b      	ldr	r3, [r5, #0]
 8002b1e:	629f      	str	r7, [r3, #40]	; 0x28
 8002b20:	e7e1      	b.n	8002ae6 <I2C_RequestMemoryWrite+0x3e>
 8002b22:	bf00      	nop
 8002b24:	81002000 	.word	0x81002000
 8002b28:	fc009800 	.word	0xfc009800

08002b2c <I2C_RequestMemoryRead>:
{
 8002b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002b30:	6806      	ldr	r6, [r0, #0]
 8002b32:	f3c1 0c09 	ubfx	ip, r1, #0, #10
 8002b36:	4c1c      	ldr	r4, [pc, #112]	; (8002ba8 <I2C_RequestMemoryRead+0x7c>)
{
 8002b38:	4617      	mov	r7, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002b3a:	491c      	ldr	r1, [pc, #112]	; (8002bac <I2C_RequestMemoryRead+0x80>)
{
 8002b3c:	4698      	mov	r8, r3
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002b3e:	6872      	ldr	r2, [r6, #4]
 8002b40:	ea4c 0404 	orr.w	r4, ip, r4
 8002b44:	b2db      	uxtb	r3, r3
{
 8002b46:	b082      	sub	sp, #8
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002b48:	400a      	ands	r2, r1
{
 8002b4a:	4605      	mov	r5, r0
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b4c:	9908      	ldr	r1, [sp, #32]
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002b4e:	4314      	orrs	r4, r2
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b50:	9a09      	ldr	r2, [sp, #36]	; 0x24
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002b52:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8002b56:	6074      	str	r4, [r6, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b58:	f7ff ff20 	bl	800299c <I2C_WaitOnTXISFlagUntilTimeout>
 8002b5c:	b9d8      	cbnz	r0, 8002b96 <I2C_RequestMemoryRead+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b5e:	f1b8 0f01 	cmp.w	r8, #1
 8002b62:	682b      	ldr	r3, [r5, #0]
 8002b64:	d10f      	bne.n	8002b86 <I2C_RequestMemoryRead+0x5a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b66:	b2ff      	uxtb	r7, r7
 8002b68:	629f      	str	r7, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b6c:	4628      	mov	r0, r5
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2140      	movs	r1, #64	; 0x40
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	9b08      	ldr	r3, [sp, #32]
 8002b76:	f7ff ff69 	bl	8002a4c <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8002b7a:	3000      	adds	r0, #0
 8002b7c:	bf18      	it	ne
 8002b7e:	2001      	movne	r0, #1
}
 8002b80:	b002      	add	sp, #8
 8002b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b86:	0a38      	lsrs	r0, r7, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b88:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b8c:	6298      	str	r0, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b8e:	4628      	mov	r0, r5
 8002b90:	f7ff ff04 	bl	800299c <I2C_WaitOnTXISFlagUntilTimeout>
 8002b94:	b118      	cbz	r0, 8002b9e <I2C_RequestMemoryRead+0x72>
    return HAL_ERROR;
 8002b96:	2001      	movs	r0, #1
}
 8002b98:	b002      	add	sp, #8
 8002b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b9e:	b2ff      	uxtb	r7, r7
 8002ba0:	682b      	ldr	r3, [r5, #0]
 8002ba2:	629f      	str	r7, [r3, #40]	; 0x28
 8002ba4:	e7e1      	b.n	8002b6a <I2C_RequestMemoryRead+0x3e>
 8002ba6:	bf00      	nop
 8002ba8:	80002000 	.word	0x80002000
 8002bac:	fc009800 	.word	0xfc009800

08002bb0 <HAL_I2C_MspInit>:
}
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop

08002bb4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002bb4:	2800      	cmp	r0, #0
 8002bb6:	d04d      	beq.n	8002c54 <HAL_I2C_Init+0xa0>
{
 8002bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bba:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002bbe:	4604      	mov	r4, r0
 8002bc0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d040      	beq.n	8002c4a <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bc8:	2124      	movs	r1, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bca:	68e5      	ldr	r5, [r4, #12]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bcc:	e9d4 3200 	ldrd	r3, r2, [r4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bd4:	2d01      	cmp	r5, #1
  __HAL_I2C_DISABLE(hi2c);
 8002bd6:	6818      	ldr	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bd8:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
 8002bdc:	68a2      	ldr	r2, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8002bde:	f020 0001 	bic.w	r0, r0, #1
 8002be2:	6018      	str	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002be4:	6119      	str	r1, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002be6:	6899      	ldr	r1, [r3, #8]
 8002be8:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8002bec:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bee:	d028      	beq.n	8002c42 <HAL_I2C_Init+0x8e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bf0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bf4:	2d02      	cmp	r5, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bf6:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bf8:	d102      	bne.n	8002c00 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002bfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bfe:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c00:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c02:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c04:	4814      	ldr	r0, [pc, #80]	; (8002c58 <HAL_I2C_Init+0xa4>)
  hi2c->State = HAL_I2C_STATE_READY;
 8002c06:	2720      	movs	r7, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002c08:	69a6      	ldr	r6, [r4, #24]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c0a:	4310      	orrs	r0, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002c0c:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c10:	6058      	str	r0, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002c12:	432a      	orrs	r2, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c14:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c16:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002c18:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c1c:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c1e:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c22:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c24:	60d8      	str	r0, [r3, #12]
  return HAL_OK;
 8002c26:	4608      	mov	r0, r1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002c28:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c2a:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c34:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c36:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c3a:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c3c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8002c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	e7da      	b.n	8002c00 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 8002c4a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002c4e:	f7ff ffaf 	bl	8002bb0 <HAL_I2C_MspInit>
 8002c52:	e7b9      	b.n	8002bc8 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8002c54:	2001      	movs	r0, #1
}
 8002c56:	4770      	bx	lr
 8002c58:	02008000 	.word	0x02008000

08002c5c <HAL_I2C_MspDeInit>:
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop

08002c60 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8002c60:	b1b0      	cbz	r0, 8002c90 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
 8002c62:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c64:	2324      	movs	r3, #36	; 0x24
{
 8002c66:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c68:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8002c6c:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE(hi2c);
 8002c6e:	6813      	ldr	r3, [r2, #0]
 8002c70:	f023 0301 	bic.w	r3, r3, #1
 8002c74:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8002c76:	f7ff fff1 	bl	8002c5c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8002c7e:	4618      	mov	r0, r3
  hi2c->State = HAL_I2C_STATE_RESET;
 8002c80:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 8002c84:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c88:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8002c8e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002c90:	2001      	movs	r0, #1
}
 8002c92:	4770      	bx	lr

08002c94 <HAL_I2C_Mem_Write>:
{
 8002c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c98:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c9a:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
{
 8002c9e:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ca0:	2820      	cmp	r0, #32
{
 8002ca2:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ca6:	d11d      	bne.n	8002ce4 <HAL_I2C_Mem_Write+0x50>
    if ((pData == NULL) || (Size == 0U))
 8002ca8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002caa:	b1f8      	cbz	r0, 8002cec <HAL_I2C_Mem_Write+0x58>
 8002cac:	b1f7      	cbz	r7, 8002cec <HAL_I2C_Mem_Write+0x58>
    __HAL_LOCK(hi2c);
 8002cae:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8002cb2:	2801      	cmp	r0, #1
 8002cb4:	d016      	beq.n	8002ce4 <HAL_I2C_Mem_Write+0x50>
 8002cb6:	2501      	movs	r5, #1
 8002cb8:	4699      	mov	r9, r3
 8002cba:	4690      	mov	r8, r2
 8002cbc:	468a      	mov	sl, r1
 8002cbe:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002cc2:	f7fe fcbd 	bl	8001640 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cc6:	462a      	mov	r2, r5
 8002cc8:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002cca:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ccc:	2319      	movs	r3, #25
 8002cce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	f7ff feba 	bl	8002a4c <I2C_WaitOnFlagUntilTimeout>
 8002cd8:	4683      	mov	fp, r0
 8002cda:	b170      	cbz	r0, 8002cfa <HAL_I2C_Mem_Write+0x66>
      return HAL_ERROR;
 8002cdc:	2001      	movs	r0, #1
}
 8002cde:	b003      	add	sp, #12
 8002ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 8002ce4:	2002      	movs	r0, #2
}
 8002ce6:	b003      	add	sp, #12
 8002ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002cec:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 8002cf0:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002cf2:	6463      	str	r3, [r4, #68]	; 0x44
}
 8002cf4:	b003      	add	sp, #12
 8002cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cfa:	2040      	movs	r0, #64	; 0x40
    hi2c->pBuffPtr  = pData;
 8002cfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cfe:	990e      	ldr	r1, [sp, #56]	; 0x38
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d00:	f04f 0c21 	mov.w	ip, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 8002d04:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d06:	4642      	mov	r2, r8
    hi2c->XferISR   = NULL;
 8002d08:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d0c:	464b      	mov	r3, r9
 8002d0e:	9100      	str	r1, [sp, #0]
 8002d10:	4651      	mov	r1, sl
 8002d12:	9601      	str	r6, [sp, #4]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d14:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d18:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d1c:	4620      	mov	r0, r4
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d1e:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8002d22:	8567      	strh	r7, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d24:	f7ff fec0 	bl	8002aa8 <I2C_RequestMemoryWrite>
 8002d28:	2800      	cmp	r0, #0
 8002d2a:	d14d      	bne.n	8002dc8 <HAL_I2C_Mem_Write+0x134>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d2c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d2e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8002d32:	6821      	ldr	r1, [r4, #0]
 8002d34:	2bff      	cmp	r3, #255	; 0xff
 8002d36:	d958      	bls.n	8002dea <HAL_I2C_Mem_Write+0x156>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002d38:	684b      	ldr	r3, [r1, #4]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d3a:	20ff      	movs	r0, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002d3c:	4f3d      	ldr	r7, [pc, #244]	; (8002e34 <HAL_I2C_Mem_Write+0x1a0>)
 8002d3e:	4a3e      	ldr	r2, [pc, #248]	; (8002e38 <HAL_I2C_Mem_Write+0x1a4>)
 8002d40:	403b      	ands	r3, r7
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d42:	8520      	strh	r0, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002d44:	ea4a 0202 	orr.w	r2, sl, r2
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]
 8002d4c:	4f3a      	ldr	r7, [pc, #232]	; (8002e38 <HAL_I2C_Mem_Write+0x1a4>)
 8002d4e:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8002e34 <HAL_I2C_Mem_Write+0x1a0>
 8002d52:	ea4a 0707 	orr.w	r7, sl, r7
 8002d56:	e003      	b.n	8002d60 <HAL_I2C_Mem_Write+0xcc>
    while (hi2c->XferCount > 0U);
 8002d58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d052      	beq.n	8002e06 <HAL_I2C_Mem_Write+0x172>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d60:	4632      	mov	r2, r6
 8002d62:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002d64:	4620      	mov	r0, r4
 8002d66:	f7ff fe19 	bl	800299c <I2C_WaitOnTXISFlagUntilTimeout>
 8002d6a:	2800      	cmp	r0, #0
 8002d6c:	d1b6      	bne.n	8002cdc <HAL_I2C_Mem_Write+0x48>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002d70:	6825      	ldr	r5, [r4, #0]
 8002d72:	f812 1b01 	ldrb.w	r1, [r2], #1
      hi2c->XferSize--;
 8002d76:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d78:	62a9      	str	r1, [r5, #40]	; 0x28
      hi2c->XferCount--;
 8002d7a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002d7c:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8002d7e:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002d80:	3901      	subs	r1, #1
      hi2c->XferSize--;
 8002d82:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8002d84:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 8002d86:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002d88:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d8a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002d8c:	b289      	uxth	r1, r1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1e2      	bne.n	8002d58 <HAL_I2C_Mem_Write+0xc4>
 8002d92:	2900      	cmp	r1, #0
 8002d94:	d0e0      	beq.n	8002d58 <HAL_I2C_Mem_Write+0xc4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d96:	4602      	mov	r2, r0
 8002d98:	9600      	str	r6, [sp, #0]
 8002d9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d9c:	2180      	movs	r1, #128	; 0x80
 8002d9e:	4620      	mov	r0, r4
 8002da0:	f7ff fe54 	bl	8002a4c <I2C_WaitOnFlagUntilTimeout>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002da4:	f04a 7c00 	orr.w	ip, sl, #33554432	; 0x2000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002da8:	f04f 0eff 	mov.w	lr, #255	; 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dac:	2800      	cmp	r0, #0
 8002dae:	d195      	bne.n	8002cdc <HAL_I2C_Mem_Write+0x48>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002db0:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002db2:	6822      	ldr	r2, [r4, #0]
 8002db4:	4571      	cmp	r1, lr
 8002db6:	d90b      	bls.n	8002dd0 <HAL_I2C_Mem_Write+0x13c>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002db8:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dba:	f8a4 e028 	strh.w	lr, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002dbe:	ea03 0308 	and.w	r3, r3, r8
 8002dc2:	433b      	orrs	r3, r7
 8002dc4:	6053      	str	r3, [r2, #4]
 8002dc6:	e7c7      	b.n	8002d58 <HAL_I2C_Mem_Write+0xc4>
      __HAL_UNLOCK(hi2c);
 8002dc8:	f884 b040 	strb.w	fp, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002dcc:	4628      	mov	r0, r5
 8002dce:	e78a      	b.n	8002ce6 <HAL_I2C_Mem_Write+0x52>
          hi2c->XferSize = hi2c->XferCount;
 8002dd0:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002dd2:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8002dd4:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002dd6:	ea03 0308 	and.w	r3, r3, r8
 8002dda:	b2c8      	uxtb	r0, r1
          hi2c->XferSize = hi2c->XferCount;
 8002ddc:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002dde:	ea43 030c 	orr.w	r3, r3, ip
 8002de2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002de6:	6053      	str	r3, [r2, #4]
 8002de8:	e7b6      	b.n	8002d58 <HAL_I2C_Mem_Write+0xc4>
      hi2c->XferSize = hi2c->XferCount;
 8002dea:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002dec:	f04a 7300 	orr.w	r3, sl, #33554432	; 0x2000000
 8002df0:	684a      	ldr	r2, [r1, #4]
 8002df2:	4f10      	ldr	r7, [pc, #64]	; (8002e34 <HAL_I2C_Mem_Write+0x1a0>)
      hi2c->XferSize = hi2c->XferCount;
 8002df4:	b280      	uxth	r0, r0
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002df6:	403a      	ands	r2, r7
 8002df8:	b2c7      	uxtb	r7, r0
      hi2c->XferSize = hi2c->XferCount;
 8002dfa:	8520      	strh	r0, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8002e02:	604b      	str	r3, [r1, #4]
 8002e04:	e7a2      	b.n	8002d4c <HAL_I2C_Mem_Write+0xb8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e06:	4632      	mov	r2, r6
 8002e08:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	f7ff fdf4 	bl	80029f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e10:	2800      	cmp	r0, #0
 8002e12:	f47f af63 	bne.w	8002cdc <HAL_I2C_Mem_Write+0x48>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8002e1a:	4d08      	ldr	r5, [pc, #32]	; (8002e3c <HAL_I2C_Mem_Write+0x1a8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e1c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	402a      	ands	r2, r5
 8002e22:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002e24:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002e28:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e2c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002e30:	e759      	b.n	8002ce6 <HAL_I2C_Mem_Write+0x52>
 8002e32:	bf00      	nop
 8002e34:	fc009c00 	.word	0xfc009c00
 8002e38:	01ff0000 	.word	0x01ff0000
 8002e3c:	fe00e800 	.word	0xfe00e800

08002e40 <HAL_I2C_Mem_Read>:
{
 8002e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e44:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e46:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
{
 8002e4a:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e4c:	2820      	cmp	r0, #32
{
 8002e4e:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e52:	d11d      	bne.n	8002e90 <HAL_I2C_Mem_Read+0x50>
    if ((pData == NULL) || (Size == 0U))
 8002e54:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002e56:	b1f8      	cbz	r0, 8002e98 <HAL_I2C_Mem_Read+0x58>
 8002e58:	b1f7      	cbz	r7, 8002e98 <HAL_I2C_Mem_Read+0x58>
    __HAL_LOCK(hi2c);
 8002e5a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8002e5e:	2801      	cmp	r0, #1
 8002e60:	d016      	beq.n	8002e90 <HAL_I2C_Mem_Read+0x50>
 8002e62:	2501      	movs	r5, #1
 8002e64:	4699      	mov	r9, r3
 8002e66:	4690      	mov	r8, r2
 8002e68:	468a      	mov	sl, r1
 8002e6a:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002e6e:	f7fe fbe7 	bl	8001640 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e72:	462a      	mov	r2, r5
 8002e74:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002e76:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e78:	2319      	movs	r3, #25
 8002e7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e7e:	4620      	mov	r0, r4
 8002e80:	f7ff fde4 	bl	8002a4c <I2C_WaitOnFlagUntilTimeout>
 8002e84:	4683      	mov	fp, r0
 8002e86:	b170      	cbz	r0, 8002ea6 <HAL_I2C_Mem_Read+0x66>
      return HAL_ERROR;
 8002e88:	2001      	movs	r0, #1
}
 8002e8a:	b003      	add	sp, #12
 8002e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 8002e90:	2002      	movs	r0, #2
}
 8002e92:	b003      	add	sp, #12
 8002e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e98:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 8002e9c:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e9e:	6463      	str	r3, [r4, #68]	; 0x44
}
 8002ea0:	b003      	add	sp, #12
 8002ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ea6:	2040      	movs	r0, #64	; 0x40
    hi2c->pBuffPtr  = pData;
 8002ea8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002eaa:	990e      	ldr	r1, [sp, #56]	; 0x38
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002eac:	f04f 0c22 	mov.w	ip, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 8002eb0:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002eb2:	4642      	mov	r2, r8
    hi2c->XferISR   = NULL;
 8002eb4:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002eb8:	464b      	mov	r3, r9
 8002eba:	9100      	str	r1, [sp, #0]
 8002ebc:	4651      	mov	r1, sl
 8002ebe:	9601      	str	r6, [sp, #4]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ec0:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ec4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ec8:	4620      	mov	r0, r4
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eca:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8002ece:	8567      	strh	r7, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ed0:	f7ff fe2c 	bl	8002b2c <I2C_RequestMemoryRead>
 8002ed4:	2800      	cmp	r0, #0
 8002ed6:	d14e      	bne.n	8002f76 <HAL_I2C_Mem_Read+0x136>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ed8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002eda:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8002ede:	6821      	ldr	r1, [r4, #0]
 8002ee0:	2bff      	cmp	r3, #255	; 0xff
 8002ee2:	d958      	bls.n	8002f96 <HAL_I2C_Mem_Read+0x156>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002ee4:	684b      	ldr	r3, [r1, #4]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ee6:	20ff      	movs	r0, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002ee8:	4f3d      	ldr	r7, [pc, #244]	; (8002fe0 <HAL_I2C_Mem_Read+0x1a0>)
 8002eea:	4a3e      	ldr	r2, [pc, #248]	; (8002fe4 <HAL_I2C_Mem_Read+0x1a4>)
 8002eec:	403b      	ands	r3, r7
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eee:	8520      	strh	r0, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002ef0:	ea4a 0202 	orr.w	r2, sl, r2
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	604b      	str	r3, [r1, #4]
 8002ef8:	4f3b      	ldr	r7, [pc, #236]	; (8002fe8 <HAL_I2C_Mem_Read+0x1a8>)
 8002efa:	4d3c      	ldr	r5, [pc, #240]	; (8002fec <HAL_I2C_Mem_Read+0x1ac>)
 8002efc:	ea4a 0707 	orr.w	r7, sl, r7
 8002f00:	e003      	b.n	8002f0a <HAL_I2C_Mem_Read+0xca>
    while (hi2c->XferCount > 0U);
 8002f02:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d054      	beq.n	8002fb4 <HAL_I2C_Mem_Read+0x174>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002f0a:	9600      	str	r6, [sp, #0]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f10:	2104      	movs	r1, #4
 8002f12:	4620      	mov	r0, r4
 8002f14:	f7ff fd9a 	bl	8002a4c <I2C_WaitOnFlagUntilTimeout>
 8002f18:	2800      	cmp	r0, #0
 8002f1a:	d1b5      	bne.n	8002e88 <HAL_I2C_Mem_Read+0x48>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f1c:	6822      	ldr	r2, [r4, #0]
 8002f1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f22:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8002f24:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002f26:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002f28:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
 8002f2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002f2c:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 8002f2e:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 8002f30:	3201      	adds	r2, #1
      hi2c->XferSize--;
 8002f32:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8002f34:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f36:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002f38:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f3a:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 8002f3c:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1df      	bne.n	8002f02 <HAL_I2C_Mem_Read+0xc2>
 8002f42:	2900      	cmp	r1, #0
 8002f44:	d0dd      	beq.n	8002f02 <HAL_I2C_Mem_Read+0xc2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f46:	4602      	mov	r2, r0
 8002f48:	9600      	str	r6, [sp, #0]
 8002f4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f4c:	2180      	movs	r1, #128	; 0x80
 8002f4e:	4620      	mov	r0, r4
 8002f50:	f7ff fd7c 	bl	8002a4c <I2C_WaitOnFlagUntilTimeout>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002f54:	f04a 7c00 	orr.w	ip, sl, #33554432	; 0x2000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f58:	f04f 0eff 	mov.w	lr, #255	; 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f5c:	2800      	cmp	r0, #0
 8002f5e:	d193      	bne.n	8002e88 <HAL_I2C_Mem_Read+0x48>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f60:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002f62:	6822      	ldr	r2, [r4, #0]
 8002f64:	4571      	cmp	r1, lr
 8002f66:	d90a      	bls.n	8002f7e <HAL_I2C_Mem_Read+0x13e>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002f68:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f6a:	f8a4 e028 	strh.w	lr, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002f6e:	402b      	ands	r3, r5
 8002f70:	433b      	orrs	r3, r7
 8002f72:	6053      	str	r3, [r2, #4]
 8002f74:	e7c5      	b.n	8002f02 <HAL_I2C_Mem_Read+0xc2>
      __HAL_UNLOCK(hi2c);
 8002f76:	f884 b040 	strb.w	fp, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002f7a:	4628      	mov	r0, r5
 8002f7c:	e789      	b.n	8002e92 <HAL_I2C_Mem_Read+0x52>
          hi2c->XferSize = hi2c->XferCount;
 8002f7e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002f80:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8002f82:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002f84:	402b      	ands	r3, r5
 8002f86:	b2c8      	uxtb	r0, r1
          hi2c->XferSize = hi2c->XferCount;
 8002f88:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002f8a:	ea43 030c 	orr.w	r3, r3, ip
 8002f8e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002f92:	6053      	str	r3, [r2, #4]
 8002f94:	e7b5      	b.n	8002f02 <HAL_I2C_Mem_Read+0xc2>
      hi2c->XferSize = hi2c->XferCount;
 8002f96:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002f98:	4f11      	ldr	r7, [pc, #68]	; (8002fe0 <HAL_I2C_Mem_Read+0x1a0>)
 8002f9a:	684b      	ldr	r3, [r1, #4]
      hi2c->XferSize = hi2c->XferCount;
 8002f9c:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002f9e:	4814      	ldr	r0, [pc, #80]	; (8002ff0 <HAL_I2C_Mem_Read+0x1b0>)
 8002fa0:	403b      	ands	r3, r7
      hi2c->XferSize = hi2c->XferCount;
 8002fa2:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002fa4:	ea4a 0000 	orr.w	r0, sl, r0
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	4303      	orrs	r3, r0
 8002fac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002fb0:	604b      	str	r3, [r1, #4]
 8002fb2:	e7a1      	b.n	8002ef8 <HAL_I2C_Mem_Read+0xb8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fb4:	4632      	mov	r2, r6
 8002fb6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002fb8:	4620      	mov	r0, r4
 8002fba:	f7ff fd1d 	bl	80029f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fbe:	2800      	cmp	r0, #0
 8002fc0:	f47f af62 	bne.w	8002e88 <HAL_I2C_Mem_Read+0x48>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fc4:	6823      	ldr	r3, [r4, #0]
 8002fc6:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8002fc8:	4d0a      	ldr	r5, [pc, #40]	; (8002ff4 <HAL_I2C_Mem_Read+0x1b4>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fca:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	402a      	ands	r2, r5
 8002fd0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002fd2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002fd6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fda:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002fde:	e758      	b.n	8002e92 <HAL_I2C_Mem_Read+0x52>
 8002fe0:	fc009800 	.word	0xfc009800
 8002fe4:	81ff2400 	.word	0x81ff2400
 8002fe8:	01ff0000 	.word	0x01ff0000
 8002fec:	fc009c00 	.word	0xfc009c00
 8002ff0:	82002400 	.word	0x82002400
 8002ff4:	fe00e800 	.word	0xfe00e800

08002ff8 <HAL_I2C_GetState>:
  return hi2c->State;
 8002ff8:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop

08003000 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003000:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003002:	f8d1 c000 	ldr.w	ip, [r1]
{
 8003006:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800300a:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800300c:	6804      	ldr	r4, [r0, #0]
 800300e:	6848      	ldr	r0, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003010:	f10c 0801 	add.w	r8, ip, #1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003014:	68e7      	ldr	r7, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003016:	18a3      	adds	r3, r4, r2

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003018:	f8d1 900c 	ldr.w	r9, [r1, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800301c:	f04f 0e00 	mov.w	lr, #0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003020:	685e      	ldr	r6, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003022:	f3c7 470b 	ubfx	r7, r7, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003026:	688d      	ldr	r5, [r1, #8]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003028:	eb07 0a00 	add.w	sl, r7, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800302c:	f406 4770 	and.w	r7, r6, #61440	; 0xf000
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003030:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003032:	3501      	adds	r5, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003034:	605f      	str	r7, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003036:	68e7      	ldr	r7, [r4, #12]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003038:	f8d1 b018 	ldr.w	fp, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800303c:	f3c7 470b 	ubfx	r7, r7, #16, #12
 8003040:	4447      	add	r7, r8
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003042:	f8d1 8014 	ldr.w	r8, [r1, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003046:	ea47 470a 	orr.w	r7, r7, sl, lsl #16
 800304a:	605f      	str	r7, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800304c:	f8d4 a00c 	ldr.w	sl, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003050:	689f      	ldr	r7, [r3, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003052:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003056:	f407 4770 	and.w	r7, r7, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800305a:	44d1      	add	r9, sl
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800305c:	609f      	str	r7, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800305e:	68e7      	ldr	r7, [r4, #12]
 8003060:	f3c7 0a0a 	ubfx	sl, r7, #0, #11

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003064:	4f2c      	ldr	r7, [pc, #176]	; (8003118 <LTDC_SetConfig+0x118>)
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003066:	4455      	add	r5, sl
 8003068:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 800306c:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800306e:	691d      	ldr	r5, [r3, #16]
 8003070:	f025 0507 	bic.w	r5, r5, #7
 8003074:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003076:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003078:	699d      	ldr	r5, [r3, #24]
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800307a:	f891 a031 	ldrb.w	sl, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800307e:	f891 9032 	ldrb.w	r9, [r1, #50]	; 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003082:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003086:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800308a:	ea45 650b 	orr.w	r5, r5, fp, lsl #24
 800308e:	ea45 250a 	orr.w	r5, r5, sl, lsl #8
 8003092:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8003096:	619d      	str	r5, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003098:	695d      	ldr	r5, [r3, #20]
 800309a:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800309e:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80030a0:	f8c3 8014 	str.w	r8, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80030a4:	69dd      	ldr	r5, [r3, #28]
 80030a6:	402f      	ands	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80030a8:	f101 051c 	add.w	r5, r1, #28
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80030ac:	61df      	str	r7, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80030ae:	e895 01a0 	ldmia.w	r5, {r5, r7, r8}
 80030b2:	433d      	orrs	r5, r7
 80030b4:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80030b6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80030b8:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80030bc:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80030c0:	b31e      	cbz	r6, 800310a <LTDC_SetConfig+0x10a>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80030c2:	2e01      	cmp	r6, #1
 80030c4:	d023      	beq.n	800310e <LTDC_SetConfig+0x10e>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80030c6:	1eb5      	subs	r5, r6, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80030c8:	2d02      	cmp	r5, #2
 80030ca:	d901      	bls.n	80030d0 <LTDC_SetConfig+0xd0>
 80030cc:	2e07      	cmp	r6, #7
 80030ce:	d120      	bne.n	8003112 <LTDC_SetConfig+0x112>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 80030d0:	2702      	movs	r7, #2
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80030d2:	eba0 000c 	sub.w	r0, r0, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80030d6:	6add      	ldr	r5, [r3, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80030d8:	e9d1 6c0a 	ldrd	r6, ip, [r1, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80030dc:	fb07 f000 	mul.w	r0, r7, r0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80030e0:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80030e4:	fb06 f607 	mul.w	r6, r6, r7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80030e8:	490c      	ldr	r1, [pc, #48]	; (800311c <LTDC_SetConfig+0x11c>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80030ea:	3003      	adds	r0, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80030ec:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80030ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80030f2:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80030f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80030f6:	4001      	ands	r1, r0
 80030f8:	6319      	str	r1, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80030fa:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80030fe:	58a3      	ldr	r3, [r4, r2]
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	50a3      	str	r3, [r4, r2]
}
 8003106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = 4U;
 800310a:	2704      	movs	r7, #4
 800310c:	e7e1      	b.n	80030d2 <LTDC_SetConfig+0xd2>
    tmp = 3U;
 800310e:	2703      	movs	r7, #3
 8003110:	e7df      	b.n	80030d2 <LTDC_SetConfig+0xd2>
    tmp = 1U;
 8003112:	2701      	movs	r7, #1
 8003114:	e7dd      	b.n	80030d2 <LTDC_SetConfig+0xd2>
 8003116:	bf00      	nop
 8003118:	fffff8f8 	.word	0xfffff8f8
 800311c:	fffff800 	.word	0xfffff800

08003120 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8003120:	2800      	cmp	r0, #0
 8003122:	d06d      	beq.n	8003200 <HAL_LTDC_Init+0xe0>
{
 8003124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003126:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800312a:	4604      	mov	r4, r0
 800312c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003130:	2b00      	cmp	r3, #0
 8003132:	d060      	beq.n	80031f6 <HAL_LTDC_Init+0xd6>
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003134:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003136:	2502      	movs	r5, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003138:	68e6      	ldr	r6, [r4, #12]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800313a:	2100      	movs	r1, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800313c:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003140:	6925      	ldr	r5, [r4, #16]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003142:	6967      	ldr	r7, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003144:	f8d4 c018 	ldr.w	ip, [r4, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003148:	e9d4 3200 	ldrd	r3, r2, [r4]
 800314c:	4302      	orrs	r2, r0
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800314e:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003150:	4332      	orrs	r2, r6
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003152:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003156:	4e2b      	ldr	r6, [pc, #172]	; (8003204 <HAL_LTDC_Init+0xe4>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003158:	6198      	str	r0, [r3, #24]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800315a:	432a      	orrs	r2, r5
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800315c:	6998      	ldr	r0, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800315e:	2501      	movs	r5, #1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003160:	4302      	orrs	r2, r0
 8003162:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	4032      	ands	r2, r6
 8003168:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800316a:	6898      	ldr	r0, [r3, #8]
 800316c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003170:	69e7      	ldr	r7, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003172:	ea40 000c 	orr.w	r0, r0, ip
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003176:	f8d4 c020 	ldr.w	ip, [r4, #32]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800317a:	6098      	str	r0, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800317c:	68d8      	ldr	r0, [r3, #12]
 800317e:	4030      	ands	r0, r6
 8003180:	60d8      	str	r0, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003188:	6a67      	ldr	r7, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800318a:	ea42 020c 	orr.w	r2, r2, ip
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800318e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003192:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003194:	691a      	ldr	r2, [r3, #16]
 8003196:	4032      	ands	r2, r6
 8003198:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800319a:	6918      	ldr	r0, [r3, #16]
 800319c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.TotalWidth << 16U);
 80031a0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80031a2:	ea40 000c 	orr.w	r0, r0, ip
 80031a6:	6118      	str	r0, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80031a8:	6958      	ldr	r0, [r3, #20]
 80031aa:	4006      	ands	r6, r0
 80031ac:	615e      	str	r6, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80031ae:	695a      	ldr	r2, [r3, #20]
 80031b0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80031b2:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80031b6:	4302      	orrs	r2, r0
 80031b8:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80031ba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80031bc:	f894 7035 	ldrb.w	r7, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80031c0:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80031c4:	f894 6036 	ldrb.w	r6, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80031c8:	62d8      	str	r0, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80031ca:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80031cc:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80031d0:	4302      	orrs	r2, r0
  return HAL_OK;
 80031d2:	4608      	mov	r0, r1
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80031d4:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80031d8:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80031dc:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80031de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031e0:	f042 0206 	orr.w	r2, r2, #6
 80031e4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80031e6:	699a      	ldr	r2, [r3, #24]
 80031e8:	432a      	orrs	r2, r5
 80031ea:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80031ec:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80031f0:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
}
 80031f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hltdc->Lock = HAL_UNLOCKED;
 80031f6:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80031fa:	f003 fc75 	bl	8006ae8 <HAL_LTDC_MspInit>
 80031fe:	e799      	b.n	8003134 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 8003200:	2001      	movs	r0, #1
}
 8003202:	4770      	bx	lr
 8003204:	f000f800 	.word	0xf000f800

08003208 <HAL_LTDC_ErrorCallback>:
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop

0800320c <HAL_LTDC_LineEventCallback>:
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop

08003210 <HAL_LTDC_ReloadEventCallback>:
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop

08003214 <HAL_LTDC_IRQHandler>:
{
 8003214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003216:	6803      	ldr	r3, [r0, #0]
{
 8003218:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800321a:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800321c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800321e:	0769      	lsls	r1, r5, #29
 8003220:	d501      	bpl.n	8003226 <HAL_LTDC_IRQHandler+0x12>
 8003222:	0772      	lsls	r2, r6, #29
 8003224:	d41d      	bmi.n	8003262 <HAL_LTDC_IRQHandler+0x4e>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003226:	07ab      	lsls	r3, r5, #30
 8003228:	d501      	bpl.n	800322e <HAL_LTDC_IRQHandler+0x1a>
 800322a:	07b7      	lsls	r7, r6, #30
 800322c:	d42d      	bmi.n	800328a <HAL_LTDC_IRQHandler+0x76>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800322e:	07e8      	lsls	r0, r5, #31
 8003230:	d501      	bpl.n	8003236 <HAL_LTDC_IRQHandler+0x22>
 8003232:	07f1      	lsls	r1, r6, #31
 8003234:	d440      	bmi.n	80032b8 <HAL_LTDC_IRQHandler+0xa4>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003236:	072a      	lsls	r2, r5, #28
 8003238:	d501      	bpl.n	800323e <HAL_LTDC_IRQHandler+0x2a>
 800323a:	0733      	lsls	r3, r6, #28
 800323c:	d400      	bmi.n	8003240 <HAL_LTDC_IRQHandler+0x2c>
}
 800323e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003240:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003242:	2608      	movs	r6, #8
    hltdc->State = HAL_LTDC_STATE_READY;
 8003244:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
 8003246:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_LTDC_ReloadEventCallback(hltdc);
 800324a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800324c:	f022 0208 	bic.w	r2, r2, #8
 8003250:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003252:	63de      	str	r6, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8003254:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8003258:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800325c:	f7ff ffd8 	bl	8003210 <HAL_LTDC_ReloadEventCallback>
}
 8003260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003264:	2104      	movs	r1, #4
    __HAL_UNLOCK(hltdc);
 8003266:	2700      	movs	r7, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003268:	f022 0204 	bic.w	r2, r2, #4
 800326c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800326e:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003270:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8003274:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003280:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 8003284:	f7ff ffc0 	bl	8003208 <HAL_LTDC_ErrorCallback>
 8003288:	e7cd      	b.n	8003226 <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800328a:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800328c:	2002      	movs	r0, #2
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800328e:	2104      	movs	r1, #4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003290:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003292:	f022 0202 	bic.w	r2, r2, #2
 8003296:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hltdc);
 8003298:	2200      	movs	r2, #0
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800329a:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ErrorCallback(hltdc);
 800329c:	4620      	mov	r0, r4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800329e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 80032a2:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80032a6:	f043 0302 	orr.w	r3, r3, #2
 80032aa:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80032ae:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 80032b2:	f7ff ffa9 	bl	8003208 <HAL_LTDC_ErrorCallback>
 80032b6:	e7ba      	b.n	800322e <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80032b8:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80032ba:	2101      	movs	r1, #1
    __HAL_UNLOCK(hltdc);
 80032bc:	2700      	movs	r7, #0
    HAL_LTDC_LineEventCallback(hltdc);
 80032be:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80032c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032c2:	f022 0201 	bic.w	r2, r2, #1
 80032c6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80032c8:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80032ca:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80032ce:	f884 70a0 	strb.w	r7, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80032d2:	f7ff ff9b 	bl	800320c <HAL_LTDC_LineEventCallback>
 80032d6:	e7ae      	b.n	8003236 <HAL_LTDC_IRQHandler+0x22>

080032d8 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 80032d8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d028      	beq.n	8003332 <HAL_LTDC_ConfigLayer+0x5a>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80032e0:	2302      	movs	r3, #2
 80032e2:	4694      	mov	ip, r2
{
 80032e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80032e8:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 80032ea:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80032ee:	460d      	mov	r5, r1
 80032f0:	4606      	mov	r6, r0
 80032f2:	fb04 0402 	mla	r4, r4, r2, r0
 80032f6:	460f      	mov	r7, r1
  __HAL_LOCK(hltdc);
 80032f8:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80032fc:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003300:	3438      	adds	r4, #56	; 0x38
 8003302:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003306:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003308:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800330a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800330c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800330e:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003310:	4662      	mov	r2, ip
 8003312:	4630      	mov	r0, r6
 8003314:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003316:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003318:	f7ff fe72 	bl	8003000 <LTDC_SetConfig>
  __HAL_UNLOCK(hltdc);
 800331c:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800331e:	6832      	ldr	r2, [r6, #0]
  return HAL_OK;
 8003320:	4618      	mov	r0, r3
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003322:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003326:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800332a:	f886 30a0 	strb.w	r3, [r6, #160]	; 0xa0
}
 800332e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 8003332:	2002      	movs	r0, #2
}
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop

08003338 <HAL_LTDC_GetState>:
  return hltdc->State;
 8003338:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop

08003340 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003340:	4a02      	ldr	r2, [pc, #8]	; (800334c <HAL_PWR_EnableBkUpAccess+0xc>)
 8003342:	6813      	ldr	r3, [r2, #0]
 8003344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003348:	6013      	str	r3, [r2, #0]
}
 800334a:	4770      	bx	lr
 800334c:	40007000 	.word	0x40007000

08003350 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003350:	4a1b      	ldr	r2, [pc, #108]	; (80033c0 <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003352:	4b1c      	ldr	r3, [pc, #112]	; (80033c4 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003354:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003356:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 800335a:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800335c:	6411      	str	r1, [r2, #64]	; 0x40
{
 800335e:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 8003360:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003362:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 8003364:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003368:	9201      	str	r2, [sp, #4]
 800336a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003372:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8003374:	f7fe f964 	bl	8001640 <HAL_GetTick>
 8003378:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800337a:	e005      	b.n	8003388 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800337c:	f7fe f960 	bl	8001640 <HAL_GetTick>
 8003380:	1b40      	subs	r0, r0, r5
 8003382:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003386:	d817      	bhi.n	80033b8 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003388:	6863      	ldr	r3, [r4, #4]
 800338a:	03da      	lsls	r2, r3, #15
 800338c:	d5f6      	bpl.n	800337c <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800338e:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003390:	4d0c      	ldr	r5, [pc, #48]	; (80033c4 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003396:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003398:	f7fe f952 	bl	8001640 <HAL_GetTick>
 800339c:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800339e:	e005      	b.n	80033ac <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033a0:	f7fe f94e 	bl	8001640 <HAL_GetTick>
 80033a4:	1b00      	subs	r0, r0, r4
 80033a6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80033aa:	d805      	bhi.n	80033b8 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033ac:	686b      	ldr	r3, [r5, #4]
 80033ae:	039b      	lsls	r3, r3, #14
 80033b0:	d5f6      	bpl.n	80033a0 <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80033b2:	2000      	movs	r0, #0
}
 80033b4:	b003      	add	sp, #12
 80033b6:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 80033b8:	2003      	movs	r0, #3
}
 80033ba:	b003      	add	sp, #12
 80033bc:	bd30      	pop	{r4, r5, pc}
 80033be:	bf00      	nop
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40007000 	.word	0x40007000

080033c8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 80033c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033cc:	9d08      	ldr	r5, [sp, #32]
 80033ce:	4680      	mov	r8, r0
 80033d0:	460f      	mov	r7, r1
 80033d2:	4616      	mov	r6, r2
 80033d4:	4699      	mov	r9, r3
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80033d6:	f8d8 4000 	ldr.w	r4, [r8]
 80033da:	e001      	b.n	80033e0 <QSPI_WaitFlagStateUntilTimeout+0x18>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033dc:	1c6b      	adds	r3, r5, #1
 80033de:	d109      	bne.n	80033f4 <QSPI_WaitFlagStateUntilTimeout+0x2c>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80033e0:	68a0      	ldr	r0, [r4, #8]
 80033e2:	4238      	tst	r0, r7
 80033e4:	bf14      	ite	ne
 80033e6:	2001      	movne	r0, #1
 80033e8:	2000      	moveq	r0, #0
 80033ea:	42b0      	cmp	r0, r6
 80033ec:	d1f6      	bne.n	80033dc <QSPI_WaitFlagStateUntilTimeout+0x14>
        
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80033ee:	2000      	movs	r0, #0
}
 80033f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80033f4:	b12d      	cbz	r5, 8003402 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 80033f6:	f7fe f923 	bl	8001640 <HAL_GetTick>
 80033fa:	eba0 0009 	sub.w	r0, r0, r9
 80033fe:	42a8      	cmp	r0, r5
 8003400:	d9e9      	bls.n	80033d6 <QSPI_WaitFlagStateUntilTimeout+0xe>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003402:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003404:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003406:	f888 3041 	strb.w	r3, [r8, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800340a:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800340e:	4303      	orrs	r3, r0
 8003410:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 8003414:	e7ec      	b.n	80033f0 <QSPI_WaitFlagStateUntilTimeout+0x28>
 8003416:	bf00      	nop

08003418 <HAL_QSPI_Init>:
{
 8003418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800341a:	4604      	mov	r4, r0
 800341c:	b083      	sub	sp, #12
  uint32_t tickstart = HAL_GetTick();
 800341e:	f7fe f90f 	bl	8001640 <HAL_GetTick>
  if(hqspi == NULL)
 8003422:	2c00      	cmp	r4, #0
 8003424:	d045      	beq.n	80034b2 <HAL_QSPI_Init+0x9a>
  __HAL_LOCK(hqspi);
 8003426:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800342a:	2b01      	cmp	r3, #1
 800342c:	d04e      	beq.n	80034cc <HAL_QSPI_Init+0xb4>
 800342e:	2301      	movs	r3, #1
 8003430:	4605      	mov	r5, r0
 8003432:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003436:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800343a:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 800343e:	2a00      	cmp	r2, #0
 8003440:	d03a      	beq.n	80034b8 <HAL_QSPI_Init+0xa0>
 8003442:	6ca7      	ldr	r7, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8003444:	6826      	ldr	r6, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003446:	462b      	mov	r3, r5
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8003448:	68a1      	ldr	r1, [r4, #8]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800344a:	2200      	movs	r2, #0
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 800344c:	6835      	ldr	r5, [r6, #0]
 800344e:	1e48      	subs	r0, r1, #1
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003450:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8003452:	f425 55f8 	bic.w	r5, r5, #7936	; 0x1f00
 8003456:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800345a:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 800345c:	6035      	str	r5, [r6, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800345e:	9700      	str	r7, [sp, #0]
 8003460:	f7ff ffb2 	bl	80033c8 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8003464:	bb00      	cbnz	r0, 80034a8 <HAL_QSPI_Init+0x90>
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8003466:	68e3      	ldr	r3, [r4, #12]
    hqspi->State = HAL_QSPI_STATE_READY;
 8003468:	2501      	movs	r5, #1
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 800346a:	e9d4 2607 	ldrd	r2, r6, [r4, #28]
 800346e:	4313      	orrs	r3, r2
 8003470:	e9d4 1200 	ldrd	r1, r2, [r4]
 8003474:	4333      	orrs	r3, r6
 8003476:	4e17      	ldr	r6, [pc, #92]	; (80034d4 <HAL_QSPI_Init+0xbc>)
 8003478:	680f      	ldr	r7, [r1, #0]
 800347a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 800347e:	6962      	ldr	r2, [r4, #20]
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8003480:	403e      	ands	r6, r7
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8003482:	69a7      	ldr	r7, [r4, #24]
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8003484:	4333      	orrs	r3, r6
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8003486:	4e14      	ldr	r6, [pc, #80]	; (80034d8 <HAL_QSPI_Init+0xc0>)
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8003488:	600b      	str	r3, [r1, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 800348a:	ea42 0307 	orr.w	r3, r2, r7
 800348e:	684f      	ldr	r7, [r1, #4]
 8003490:	6922      	ldr	r2, [r4, #16]
 8003492:	403e      	ands	r6, r7
 8003494:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003498:	4333      	orrs	r3, r6
 800349a:	604b      	str	r3, [r1, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800349c:	680b      	ldr	r3, [r1, #0]
 800349e:	432b      	orrs	r3, r5
 80034a0:	600b      	str	r3, [r1, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 80034a2:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 80034a4:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80034a8:	2300      	movs	r3, #0
 80034aa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80034ae:	b003      	add	sp, #12
 80034b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80034b2:	2001      	movs	r0, #1
}
 80034b4:	b003      	add	sp, #12
 80034b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hqspi->Lock = HAL_UNLOCKED;
 80034b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 80034bc:	4620      	mov	r0, r4
 80034be:	f003 fba5 	bl	8006c0c <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 80034c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80034c6:	461f      	mov	r7, r3
 80034c8:	64a3      	str	r3, [r4, #72]	; 0x48
 80034ca:	e7bb      	b.n	8003444 <HAL_QSPI_Init+0x2c>
  __HAL_LOCK(hqspi);
 80034cc:	2002      	movs	r0, #2
}
 80034ce:	b003      	add	sp, #12
 80034d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034d2:	bf00      	nop
 80034d4:	00ffff2f 	.word	0x00ffff2f
 80034d8:	ffe0f8fe 	.word	0xffe0f8fe

080034dc <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034dc:	2800      	cmp	r0, #0
 80034de:	f000 8134 	beq.w	800374a <HAL_RCC_OscConfig+0x26e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034e2:	6803      	ldr	r3, [r0, #0]
{
 80034e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034e8:	07dd      	lsls	r5, r3, #31
{
 80034ea:	b082      	sub	sp, #8
 80034ec:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ee:	d535      	bpl.n	800355c <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034f0:	49ab      	ldr	r1, [pc, #684]	; (80037a0 <HAL_RCC_OscConfig+0x2c4>)
 80034f2:	688a      	ldr	r2, [r1, #8]
 80034f4:	f002 020c 	and.w	r2, r2, #12
 80034f8:	2a04      	cmp	r2, #4
 80034fa:	f000 80fe 	beq.w	80036fa <HAL_RCC_OscConfig+0x21e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034fe:	688a      	ldr	r2, [r1, #8]
 8003500:	f002 020c 	and.w	r2, r2, #12
 8003504:	2a08      	cmp	r2, #8
 8003506:	f000 80f4 	beq.w	80036f2 <HAL_RCC_OscConfig+0x216>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800350a:	6863      	ldr	r3, [r4, #4]
 800350c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003510:	d010      	beq.n	8003534 <HAL_RCC_OscConfig+0x58>
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 811b 	beq.w	800374e <HAL_RCC_OscConfig+0x272>
 8003518:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800351c:	4ba0      	ldr	r3, [pc, #640]	; (80037a0 <HAL_RCC_OscConfig+0x2c4>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	f000 8162 	beq.w	80037e8 <HAL_RCC_OscConfig+0x30c>
 8003524:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	e004      	b.n	800353e <HAL_RCC_OscConfig+0x62>
 8003534:	4a9a      	ldr	r2, [pc, #616]	; (80037a0 <HAL_RCC_OscConfig+0x2c4>)
 8003536:	6813      	ldr	r3, [r2, #0]
 8003538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800353c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353e:	f7fe f87f 	bl	8001640 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003542:	4d97      	ldr	r5, [pc, #604]	; (80037a0 <HAL_RCC_OscConfig+0x2c4>)
        tickstart = HAL_GetTick();
 8003544:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003546:	e005      	b.n	8003554 <HAL_RCC_OscConfig+0x78>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003548:	f7fe f87a 	bl	8001640 <HAL_GetTick>
 800354c:	1b80      	subs	r0, r0, r6
 800354e:	2864      	cmp	r0, #100	; 0x64
 8003550:	f200 80ee 	bhi.w	8003730 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003554:	682b      	ldr	r3, [r5, #0]
 8003556:	039a      	lsls	r2, r3, #14
 8003558:	d5f6      	bpl.n	8003548 <HAL_RCC_OscConfig+0x6c>
 800355a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800355c:	079f      	lsls	r7, r3, #30
 800355e:	d442      	bmi.n	80035e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003560:	071a      	lsls	r2, r3, #28
 8003562:	d517      	bpl.n	8003594 <HAL_RCC_OscConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003564:	6963      	ldr	r3, [r4, #20]
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 80b0 	beq.w	80036cc <HAL_RCC_OscConfig+0x1f0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800356c:	4b8c      	ldr	r3, [pc, #560]	; (80037a0 <HAL_RCC_OscConfig+0x2c4>)
 800356e:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003570:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8003572:	f042 0201 	orr.w	r2, r2, #1
 8003576:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003578:	f7fe f862 	bl	8001640 <HAL_GetTick>
 800357c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800357e:	e005      	b.n	800358c <HAL_RCC_OscConfig+0xb0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003580:	f7fe f85e 	bl	8001640 <HAL_GetTick>
 8003584:	1b80      	subs	r0, r0, r6
 8003586:	2802      	cmp	r0, #2
 8003588:	f200 80d2 	bhi.w	8003730 <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800358e:	079b      	lsls	r3, r3, #30
 8003590:	d5f6      	bpl.n	8003580 <HAL_RCC_OscConfig+0xa4>
 8003592:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003594:	075d      	lsls	r5, r3, #29
 8003596:	d56b      	bpl.n	8003670 <HAL_RCC_OscConfig+0x194>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003598:	4b81      	ldr	r3, [pc, #516]	; (80037a0 <HAL_RCC_OscConfig+0x2c4>)
 800359a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800359c:	00d0      	lsls	r0, r2, #3
 800359e:	f100 80ed 	bmi.w	800377c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80035a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80035a4:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80035a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80035aa:	641a      	str	r2, [r3, #64]	; 0x40
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b2:	9301      	str	r3, [sp, #4]
 80035b4:	9b01      	ldr	r3, [sp, #4]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035b6:	4b7b      	ldr	r3, [pc, #492]	; (80037a4 <HAL_RCC_OscConfig+0x2c8>)
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	05d1      	lsls	r1, r2, #23
 80035bc:	f140 80a7 	bpl.w	800370e <HAL_RCC_OscConfig+0x232>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035c0:	68a3      	ldr	r3, [r4, #8]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d039      	beq.n	800363a <HAL_RCC_OscConfig+0x15e>
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 80da 	beq.w	8003780 <HAL_RCC_OscConfig+0x2a4>
 80035cc:	2b05      	cmp	r3, #5
 80035ce:	4b74      	ldr	r3, [pc, #464]	; (80037a0 <HAL_RCC_OscConfig+0x2c4>)
 80035d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035d2:	f000 8111 	beq.w	80037f8 <HAL_RCC_OscConfig+0x31c>
 80035d6:	f022 0201 	bic.w	r2, r2, #1
 80035da:	671a      	str	r2, [r3, #112]	; 0x70
 80035dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035de:	f022 0204 	bic.w	r2, r2, #4
 80035e2:	671a      	str	r2, [r3, #112]	; 0x70
 80035e4:	e02e      	b.n	8003644 <HAL_RCC_OscConfig+0x168>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035e6:	4a6e      	ldr	r2, [pc, #440]	; (80037a0 <HAL_RCC_OscConfig+0x2c4>)
 80035e8:	6891      	ldr	r1, [r2, #8]
 80035ea:	f011 0f0c 	tst.w	r1, #12
 80035ee:	d062      	beq.n	80036b6 <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035f0:	6891      	ldr	r1, [r2, #8]
 80035f2:	f001 010c 	and.w	r1, r1, #12
 80035f6:	2908      	cmp	r1, #8
 80035f8:	d05a      	beq.n	80036b0 <HAL_RCC_OscConfig+0x1d4>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035fa:	68e3      	ldr	r3, [r4, #12]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 80df 	beq.w	80037c0 <HAL_RCC_OscConfig+0x2e4>
        __HAL_RCC_HSI_ENABLE();
 8003602:	4b67      	ldr	r3, [pc, #412]	; (80037a0 <HAL_RCC_OscConfig+0x2c4>)
 8003604:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003606:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 8003608:	f042 0201 	orr.w	r2, r2, #1
 800360c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800360e:	f7fe f817 	bl	8001640 <HAL_GetTick>
 8003612:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003614:	e005      	b.n	8003622 <HAL_RCC_OscConfig+0x146>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003616:	f7fe f813 	bl	8001640 <HAL_GetTick>
 800361a:	1b80      	subs	r0, r0, r6
 800361c:	2802      	cmp	r0, #2
 800361e:	f200 8087 	bhi.w	8003730 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003622:	682b      	ldr	r3, [r5, #0]
 8003624:	0798      	lsls	r0, r3, #30
 8003626:	d5f6      	bpl.n	8003616 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003628:	682b      	ldr	r3, [r5, #0]
 800362a:	6922      	ldr	r2, [r4, #16]
 800362c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003630:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003634:	602b      	str	r3, [r5, #0]
 8003636:	6823      	ldr	r3, [r4, #0]
 8003638:	e792      	b.n	8003560 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800363a:	4a59      	ldr	r2, [pc, #356]	; (80037a0 <HAL_RCC_OscConfig+0x2c4>)
 800363c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003644:	f7fd fffc 	bl	8001640 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003648:	4e55      	ldr	r6, [pc, #340]	; (80037a0 <HAL_RCC_OscConfig+0x2c4>)
      tickstart = HAL_GetTick();
 800364a:	4680      	mov	r8, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800364c:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003650:	e005      	b.n	800365e <HAL_RCC_OscConfig+0x182>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003652:	f7fd fff5 	bl	8001640 <HAL_GetTick>
 8003656:	eba0 0008 	sub.w	r0, r0, r8
 800365a:	42b8      	cmp	r0, r7
 800365c:	d868      	bhi.n	8003730 <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003660:	079b      	lsls	r3, r3, #30
 8003662:	d5f6      	bpl.n	8003652 <HAL_RCC_OscConfig+0x176>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003664:	b125      	cbz	r5, 8003670 <HAL_RCC_OscConfig+0x194>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003666:	4a4e      	ldr	r2, [pc, #312]	; (80037a0 <HAL_RCC_OscConfig+0x2c4>)
 8003668:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800366a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800366e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003670:	69a3      	ldr	r3, [r4, #24]
 8003672:	b1cb      	cbz	r3, 80036a8 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003674:	4a4a      	ldr	r2, [pc, #296]	; (80037a0 <HAL_RCC_OscConfig+0x2c4>)
 8003676:	6891      	ldr	r1, [r2, #8]
 8003678:	f001 010c 	and.w	r1, r1, #12
 800367c:	2908      	cmp	r1, #8
 800367e:	d021      	beq.n	80036c4 <HAL_RCC_OscConfig+0x1e8>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003680:	2b02      	cmp	r3, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003682:	6813      	ldr	r3, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003684:	f000 80c0 	beq.w	8003808 <HAL_RCC_OscConfig+0x32c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003688:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368c:	4614      	mov	r4, r2
        __HAL_RCC_PLL_DISABLE();
 800368e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003690:	f7fd ffd6 	bl	8001640 <HAL_GetTick>
 8003694:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003696:	e004      	b.n	80036a2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003698:	f7fd ffd2 	bl	8001640 <HAL_GetTick>
 800369c:	1b40      	subs	r0, r0, r5
 800369e:	2802      	cmp	r0, #2
 80036a0:	d846      	bhi.n	8003730 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a2:	6823      	ldr	r3, [r4, #0]
 80036a4:	019b      	lsls	r3, r3, #6
 80036a6:	d4f7      	bmi.n	8003698 <HAL_RCC_OscConfig+0x1bc>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80036a8:	2000      	movs	r0, #0
}
 80036aa:	b002      	add	sp, #8
 80036ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036b0:	6852      	ldr	r2, [r2, #4]
 80036b2:	0256      	lsls	r6, r2, #9
 80036b4:	d4a1      	bmi.n	80035fa <HAL_RCC_OscConfig+0x11e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036b6:	4a3a      	ldr	r2, [pc, #232]	; (80037a0 <HAL_RCC_OscConfig+0x2c4>)
 80036b8:	6812      	ldr	r2, [r2, #0]
 80036ba:	0795      	lsls	r5, r2, #30
 80036bc:	d53c      	bpl.n	8003738 <HAL_RCC_OscConfig+0x25c>
 80036be:	68e2      	ldr	r2, [r4, #12]
 80036c0:	2a01      	cmp	r2, #1
 80036c2:	d039      	beq.n	8003738 <HAL_RCC_OscConfig+0x25c>
    return HAL_ERROR;
 80036c4:	2001      	movs	r0, #1
}
 80036c6:	b002      	add	sp, #8
 80036c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80036cc:	4b34      	ldr	r3, [pc, #208]	; (80037a0 <HAL_RCC_OscConfig+0x2c4>)
 80036ce:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d0:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 80036d2:	f022 0201 	bic.w	r2, r2, #1
 80036d6:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80036d8:	f7fd ffb2 	bl	8001640 <HAL_GetTick>
 80036dc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036de:	e004      	b.n	80036ea <HAL_RCC_OscConfig+0x20e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036e0:	f7fd ffae 	bl	8001640 <HAL_GetTick>
 80036e4:	1b80      	subs	r0, r0, r6
 80036e6:	2802      	cmp	r0, #2
 80036e8:	d822      	bhi.n	8003730 <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ea:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80036ec:	079f      	lsls	r7, r3, #30
 80036ee:	d4f7      	bmi.n	80036e0 <HAL_RCC_OscConfig+0x204>
 80036f0:	e74f      	b.n	8003592 <HAL_RCC_OscConfig+0xb6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036f2:	684a      	ldr	r2, [r1, #4]
 80036f4:	0250      	lsls	r0, r2, #9
 80036f6:	f57f af08 	bpl.w	800350a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036fa:	4a29      	ldr	r2, [pc, #164]	; (80037a0 <HAL_RCC_OscConfig+0x2c4>)
 80036fc:	6812      	ldr	r2, [r2, #0]
 80036fe:	0391      	lsls	r1, r2, #14
 8003700:	f57f af2c 	bpl.w	800355c <HAL_RCC_OscConfig+0x80>
 8003704:	6862      	ldr	r2, [r4, #4]
 8003706:	2a00      	cmp	r2, #0
 8003708:	f47f af28 	bne.w	800355c <HAL_RCC_OscConfig+0x80>
 800370c:	e7da      	b.n	80036c4 <HAL_RCC_OscConfig+0x1e8>
      PWR->CR1 |= PWR_CR1_DBP;
 800370e:	681a      	ldr	r2, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003710:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 8003712:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003716:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003718:	f7fd ff92 	bl	8001640 <HAL_GetTick>
 800371c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800371e:	6833      	ldr	r3, [r6, #0]
 8003720:	05da      	lsls	r2, r3, #23
 8003722:	f53f af4d 	bmi.w	80035c0 <HAL_RCC_OscConfig+0xe4>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003726:	f7fd ff8b 	bl	8001640 <HAL_GetTick>
 800372a:	1bc0      	subs	r0, r0, r7
 800372c:	2864      	cmp	r0, #100	; 0x64
 800372e:	d9f6      	bls.n	800371e <HAL_RCC_OscConfig+0x242>
            return HAL_TIMEOUT;
 8003730:	2003      	movs	r0, #3
}
 8003732:	b002      	add	sp, #8
 8003734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003738:	4919      	ldr	r1, [pc, #100]	; (80037a0 <HAL_RCC_OscConfig+0x2c4>)
 800373a:	6920      	ldr	r0, [r4, #16]
 800373c:	680a      	ldr	r2, [r1, #0]
 800373e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003742:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003746:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003748:	e70a      	b.n	8003560 <HAL_RCC_OscConfig+0x84>
    return HAL_ERROR;
 800374a:	2001      	movs	r0, #1
}
 800374c:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800374e:	4b14      	ldr	r3, [pc, #80]	; (80037a0 <HAL_RCC_OscConfig+0x2c4>)
 8003750:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003752:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003754:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003760:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003762:	f7fd ff6d 	bl	8001640 <HAL_GetTick>
 8003766:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003768:	e004      	b.n	8003774 <HAL_RCC_OscConfig+0x298>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800376a:	f7fd ff69 	bl	8001640 <HAL_GetTick>
 800376e:	1b80      	subs	r0, r0, r6
 8003770:	2864      	cmp	r0, #100	; 0x64
 8003772:	d8dd      	bhi.n	8003730 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003774:	682b      	ldr	r3, [r5, #0]
 8003776:	039b      	lsls	r3, r3, #14
 8003778:	d4f7      	bmi.n	800376a <HAL_RCC_OscConfig+0x28e>
 800377a:	e6ee      	b.n	800355a <HAL_RCC_OscConfig+0x7e>
  FlagStatus pwrclkchanged = RESET;
 800377c:	2500      	movs	r5, #0
 800377e:	e71a      	b.n	80035b6 <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003780:	4b07      	ldr	r3, [pc, #28]	; (80037a0 <HAL_RCC_OscConfig+0x2c4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003782:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003786:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003788:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800378a:	f022 0201 	bic.w	r2, r2, #1
 800378e:	671a      	str	r2, [r3, #112]	; 0x70
 8003790:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003792:	f022 0204 	bic.w	r2, r2, #4
 8003796:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003798:	f7fd ff52 	bl	8001640 <HAL_GetTick>
 800379c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x2d6>
 80037a0:	40023800 	.word	0x40023800
 80037a4:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037a8:	f7fd ff4a 	bl	8001640 <HAL_GetTick>
 80037ac:	1bc0      	subs	r0, r0, r7
 80037ae:	4540      	cmp	r0, r8
 80037b0:	d8be      	bhi.n	8003730 <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037b2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80037b4:	0798      	lsls	r0, r3, #30
 80037b6:	d4f7      	bmi.n	80037a8 <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 80037b8:	2d00      	cmp	r5, #0
 80037ba:	f43f af59 	beq.w	8003670 <HAL_RCC_OscConfig+0x194>
 80037be:	e752      	b.n	8003666 <HAL_RCC_OscConfig+0x18a>
        __HAL_RCC_HSI_DISABLE();
 80037c0:	4b2b      	ldr	r3, [pc, #172]	; (8003870 <HAL_RCC_OscConfig+0x394>)
 80037c2:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037c4:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 80037c6:	f022 0201 	bic.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80037cc:	f7fd ff38 	bl	8001640 <HAL_GetTick>
 80037d0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037d2:	e004      	b.n	80037de <HAL_RCC_OscConfig+0x302>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037d4:	f7fd ff34 	bl	8001640 <HAL_GetTick>
 80037d8:	1b80      	subs	r0, r0, r6
 80037da:	2802      	cmp	r0, #2
 80037dc:	d8a8      	bhi.n	8003730 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037de:	682b      	ldr	r3, [r5, #0]
 80037e0:	0799      	lsls	r1, r3, #30
 80037e2:	d4f7      	bmi.n	80037d4 <HAL_RCC_OscConfig+0x2f8>
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	e6bb      	b.n	8003560 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037e8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	e6a2      	b.n	800353e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037f8:	f042 0204 	orr.w	r2, r2, #4
 80037fc:	671a      	str	r2, [r3, #112]	; 0x70
 80037fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003800:	f042 0201 	orr.w	r2, r2, #1
 8003804:	671a      	str	r2, [r3, #112]	; 0x70
 8003806:	e71d      	b.n	8003644 <HAL_RCC_OscConfig+0x168>
        __HAL_RCC_PLL_DISABLE();
 8003808:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800380c:	4615      	mov	r5, r2
        __HAL_RCC_PLL_DISABLE();
 800380e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003810:	f7fd ff16 	bl	8001640 <HAL_GetTick>
 8003814:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003816:	e004      	b.n	8003822 <HAL_RCC_OscConfig+0x346>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003818:	f7fd ff12 	bl	8001640 <HAL_GetTick>
 800381c:	1b80      	subs	r0, r0, r6
 800381e:	2802      	cmp	r0, #2
 8003820:	d886      	bhi.n	8003730 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003822:	682b      	ldr	r3, [r5, #0]
 8003824:	0199      	lsls	r1, r3, #6
 8003826:	d4f7      	bmi.n	8003818 <HAL_RCC_OscConfig+0x33c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003828:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800382c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800382e:	4313      	orrs	r3, r2
 8003830:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8003834:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003838:	4c0d      	ldr	r4, [pc, #52]	; (8003870 <HAL_RCC_OscConfig+0x394>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800383a:	0852      	lsrs	r2, r2, #1
 800383c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003840:	3a01      	subs	r2, #1
 8003842:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003846:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800384a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800384c:	682b      	ldr	r3, [r5, #0]
 800384e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003852:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003854:	f7fd fef4 	bl	8001640 <HAL_GetTick>
 8003858:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800385a:	e005      	b.n	8003868 <HAL_RCC_OscConfig+0x38c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800385c:	f7fd fef0 	bl	8001640 <HAL_GetTick>
 8003860:	1b40      	subs	r0, r0, r5
 8003862:	2802      	cmp	r0, #2
 8003864:	f63f af64 	bhi.w	8003730 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003868:	6823      	ldr	r3, [r4, #0]
 800386a:	019a      	lsls	r2, r3, #6
 800386c:	d5f6      	bpl.n	800385c <HAL_RCC_OscConfig+0x380>
 800386e:	e71b      	b.n	80036a8 <HAL_RCC_OscConfig+0x1cc>
 8003870:	40023800 	.word	0x40023800

08003874 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003874:	4916      	ldr	r1, [pc, #88]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8003876:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003878:	688b      	ldr	r3, [r1, #8]
 800387a:	f003 030c 	and.w	r3, r3, #12
 800387e:	2b04      	cmp	r3, #4
 8003880:	d01b      	beq.n	80038ba <HAL_RCC_GetSysClockFreq+0x46>
 8003882:	2b08      	cmp	r3, #8
 8003884:	d117      	bne.n	80038b6 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003886:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003888:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800388a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800388e:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003890:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8003894:	d113      	bne.n	80038be <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003896:	480f      	ldr	r0, [pc, #60]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x60>)
 8003898:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800389c:	fba1 0100 	umull	r0, r1, r1, r0
 80038a0:	f7fc fcb2 	bl	8000208 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80038a4:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x5c>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80038ac:	3301      	adds	r3, #1
 80038ae:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80038b0:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80038b4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80038b6:	4807      	ldr	r0, [pc, #28]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x60>)
}
 80038b8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80038ba:	4807      	ldr	r0, [pc, #28]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x64>)
}
 80038bc:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038be:	4806      	ldr	r0, [pc, #24]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x64>)
 80038c0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80038c4:	2300      	movs	r3, #0
 80038c6:	fba1 0100 	umull	r0, r1, r1, r0
 80038ca:	f7fc fc9d 	bl	8000208 <__aeabi_uldivmod>
 80038ce:	e7e9      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0x30>
 80038d0:	40023800 	.word	0x40023800
 80038d4:	00f42400 	.word	0x00f42400
 80038d8:	017d7840 	.word	0x017d7840

080038dc <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80038dc:	b178      	cbz	r0, 80038fe <HAL_RCC_ClockConfig+0x22>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038de:	4a4a      	ldr	r2, [pc, #296]	; (8003a08 <HAL_RCC_ClockConfig+0x12c>)
 80038e0:	6813      	ldr	r3, [r2, #0]
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	428b      	cmp	r3, r1
 80038e8:	d20b      	bcs.n	8003902 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ea:	6813      	ldr	r3, [r2, #0]
 80038ec:	f023 030f 	bic.w	r3, r3, #15
 80038f0:	430b      	orrs	r3, r1
 80038f2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f4:	6813      	ldr	r3, [r2, #0]
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	428b      	cmp	r3, r1
 80038fc:	d001      	beq.n	8003902 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 80038fe:	2001      	movs	r0, #1
}
 8003900:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003902:	6803      	ldr	r3, [r0, #0]
{
 8003904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003908:	079d      	lsls	r5, r3, #30
 800390a:	d514      	bpl.n	8003936 <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800390c:	075c      	lsls	r4, r3, #29
 800390e:	d504      	bpl.n	800391a <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003910:	4c3e      	ldr	r4, [pc, #248]	; (8003a0c <HAL_RCC_ClockConfig+0x130>)
 8003912:	68a2      	ldr	r2, [r4, #8]
 8003914:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8003918:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800391a:	071a      	lsls	r2, r3, #28
 800391c:	d504      	bpl.n	8003928 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800391e:	4c3b      	ldr	r4, [pc, #236]	; (8003a0c <HAL_RCC_ClockConfig+0x130>)
 8003920:	68a2      	ldr	r2, [r4, #8]
 8003922:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8003926:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003928:	4c38      	ldr	r4, [pc, #224]	; (8003a0c <HAL_RCC_ClockConfig+0x130>)
 800392a:	6885      	ldr	r5, [r0, #8]
 800392c:	68a2      	ldr	r2, [r4, #8]
 800392e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003932:	432a      	orrs	r2, r5
 8003934:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003936:	07df      	lsls	r7, r3, #31
 8003938:	4604      	mov	r4, r0
 800393a:	460d      	mov	r5, r1
 800393c:	d521      	bpl.n	8003982 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800393e:	6842      	ldr	r2, [r0, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003940:	4b32      	ldr	r3, [pc, #200]	; (8003a0c <HAL_RCC_ClockConfig+0x130>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003942:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003944:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003946:	d056      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x11a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003948:	2a02      	cmp	r2, #2
 800394a:	d059      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x124>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800394c:	0799      	lsls	r1, r3, #30
 800394e:	d528      	bpl.n	80039a2 <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003950:	492e      	ldr	r1, [pc, #184]	; (8003a0c <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003952:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003956:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003958:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800395a:	f023 0303 	bic.w	r3, r3, #3
 800395e:	4313      	orrs	r3, r2
 8003960:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003962:	f7fd fe6d 	bl	8001640 <HAL_GetTick>
 8003966:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003968:	e004      	b.n	8003974 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800396a:	f7fd fe69 	bl	8001640 <HAL_GetTick>
 800396e:	1bc0      	subs	r0, r0, r7
 8003970:	4540      	cmp	r0, r8
 8003972:	d843      	bhi.n	80039fc <HAL_RCC_ClockConfig+0x120>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003974:	68b3      	ldr	r3, [r6, #8]
 8003976:	6862      	ldr	r2, [r4, #4]
 8003978:	f003 030c 	and.w	r3, r3, #12
 800397c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003980:	d1f3      	bne.n	800396a <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003982:	4a21      	ldr	r2, [pc, #132]	; (8003a08 <HAL_RCC_ClockConfig+0x12c>)
 8003984:	6813      	ldr	r3, [r2, #0]
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	42ab      	cmp	r3, r5
 800398c:	d90c      	bls.n	80039a8 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398e:	6813      	ldr	r3, [r2, #0]
 8003990:	f023 030f 	bic.w	r3, r3, #15
 8003994:	432b      	orrs	r3, r5
 8003996:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003998:	6813      	ldr	r3, [r2, #0]
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	42ab      	cmp	r3, r5
 80039a0:	d002      	beq.n	80039a8 <HAL_RCC_ClockConfig+0xcc>
    return HAL_ERROR;
 80039a2:	2001      	movs	r0, #1
}
 80039a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a8:	6823      	ldr	r3, [r4, #0]
 80039aa:	075a      	lsls	r2, r3, #29
 80039ac:	d506      	bpl.n	80039bc <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039ae:	4917      	ldr	r1, [pc, #92]	; (8003a0c <HAL_RCC_ClockConfig+0x130>)
 80039b0:	68e0      	ldr	r0, [r4, #12]
 80039b2:	688a      	ldr	r2, [r1, #8]
 80039b4:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80039b8:	4302      	orrs	r2, r0
 80039ba:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039bc:	071b      	lsls	r3, r3, #28
 80039be:	d411      	bmi.n	80039e4 <HAL_RCC_ClockConfig+0x108>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039c0:	f7ff ff58 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 80039c4:	4b11      	ldr	r3, [pc, #68]	; (8003a0c <HAL_RCC_ClockConfig+0x130>)
 80039c6:	4912      	ldr	r1, [pc, #72]	; (8003a10 <HAL_RCC_ClockConfig+0x134>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	4a12      	ldr	r2, [pc, #72]	; (8003a14 <HAL_RCC_ClockConfig+0x138>)
 80039cc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80039d0:	5ccb      	ldrb	r3, [r1, r3]
 80039d2:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (TICK_INT_PRIORITY);
 80039d6:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039d8:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80039da:	f7fd fdf5 	bl	80015c8 <HAL_InitTick>
  return HAL_OK;
 80039de:	2000      	movs	r0, #0
}
 80039e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039e4:	4a09      	ldr	r2, [pc, #36]	; (8003a0c <HAL_RCC_ClockConfig+0x130>)
 80039e6:	6921      	ldr	r1, [r4, #16]
 80039e8:	6893      	ldr	r3, [r2, #8]
 80039ea:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80039ee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80039f2:	6093      	str	r3, [r2, #8]
 80039f4:	e7e4      	b.n	80039c0 <HAL_RCC_ClockConfig+0xe4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f6:	039e      	lsls	r6, r3, #14
 80039f8:	d4aa      	bmi.n	8003950 <HAL_RCC_ClockConfig+0x74>
 80039fa:	e7d2      	b.n	80039a2 <HAL_RCC_ClockConfig+0xc6>
        return HAL_TIMEOUT;
 80039fc:	2003      	movs	r0, #3
 80039fe:	e7ef      	b.n	80039e0 <HAL_RCC_ClockConfig+0x104>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a00:	0198      	lsls	r0, r3, #6
 8003a02:	d4a5      	bmi.n	8003950 <HAL_RCC_ClockConfig+0x74>
 8003a04:	e7cd      	b.n	80039a2 <HAL_RCC_ClockConfig+0xc6>
 8003a06:	bf00      	nop
 8003a08:	40023c00 	.word	0x40023c00
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	08009b90 	.word	0x08009b90
 8003a14:	200000a4 	.word	0x200000a4

08003a18 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a18:	4b04      	ldr	r3, [pc, #16]	; (8003a2c <HAL_RCC_GetPCLK1Freq+0x14>)
 8003a1a:	4a05      	ldr	r2, [pc, #20]	; (8003a30 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003a1e:	4905      	ldr	r1, [pc, #20]	; (8003a34 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a20:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003a24:	6808      	ldr	r0, [r1, #0]
 8003a26:	5cd3      	ldrb	r3, [r2, r3]
}
 8003a28:	40d8      	lsrs	r0, r3
 8003a2a:	4770      	bx	lr
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	08009ba0 	.word	0x08009ba0
 8003a34:	200000a4 	.word	0x200000a4

08003a38 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a38:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <HAL_RCC_GetPCLK2Freq+0x14>)
 8003a3a:	4a05      	ldr	r2, [pc, #20]	; (8003a50 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003a3e:	4905      	ldr	r1, [pc, #20]	; (8003a54 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a40:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003a44:	6808      	ldr	r0, [r1, #0]
 8003a46:	5cd3      	ldrb	r3, [r2, r3]
}
 8003a48:	40d8      	lsrs	r0, r3
 8003a4a:	4770      	bx	lr
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	08009ba0 	.word	0x08009ba0
 8003a54:	200000a4 	.word	0x200000a4

08003a58 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a58:	6803      	ldr	r3, [r0, #0]
{
 8003a5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a5e:	f013 0601 	ands.w	r6, r3, #1
{
 8003a62:	b083      	sub	sp, #12
 8003a64:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a66:	d00b      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a68:	4ab8      	ldr	r2, [pc, #736]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a6a:	6891      	ldr	r1, [r2, #8]
 8003a6c:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8003a70:	6091      	str	r1, [r2, #8]
 8003a72:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8003a74:	6891      	ldr	r1, [r2, #8]
 8003a76:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a78:	fab6 f686 	clz	r6, r6
 8003a7c:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a7e:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a80:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8003a84:	d010      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a86:	49b1      	ldr	r1, [pc, #708]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a88:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8003a8a:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a8e:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a92:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003a96:	ea42 0205 	orr.w	r2, r2, r5
 8003a9a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a9e:	f000 81b0 	beq.w	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003aa2:	fab5 f585 	clz	r5, r5
 8003aa6:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003aa8:	02d9      	lsls	r1, r3, #11
 8003aaa:	d510      	bpl.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003aac:	48a7      	ldr	r0, [pc, #668]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003aae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003ab0:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ab4:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ab8:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003abc:	ea42 0201 	orr.w	r2, r2, r1
 8003ac0:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ac4:	f000 819b 	beq.w	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x3a6>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8003ac8:	2900      	cmp	r1, #0
 8003aca:	bf08      	it	eq
 8003acc:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8003ace:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003ad2:	bf18      	it	ne
 8003ad4:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ad6:	069a      	lsls	r2, r3, #26
 8003ad8:	f100 8149 	bmi.w	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003adc:	06d9      	lsls	r1, r3, #27
 8003ade:	d50c      	bpl.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ae0:	4a9a      	ldr	r2, [pc, #616]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ae2:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003ae6:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8003aea:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8003aee:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003af2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003af4:	4301      	orrs	r1, r0
 8003af6:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003afa:	045a      	lsls	r2, r3, #17
 8003afc:	d508      	bpl.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003afe:	4993      	ldr	r1, [pc, #588]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b00:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003b02:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003b06:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003b0a:	4302      	orrs	r2, r0
 8003b0c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b10:	041f      	lsls	r7, r3, #16
 8003b12:	d508      	bpl.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b14:	498d      	ldr	r1, [pc, #564]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b16:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003b18:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003b1c:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003b20:	4302      	orrs	r2, r0
 8003b22:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b26:	03d8      	lsls	r0, r3, #15
 8003b28:	d508      	bpl.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b2a:	4988      	ldr	r1, [pc, #544]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b2c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003b2e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003b32:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003b36:	4302      	orrs	r2, r0
 8003b38:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b3c:	0399      	lsls	r1, r3, #14
 8003b3e:	d508      	bpl.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b40:	4982      	ldr	r1, [pc, #520]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b42:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003b44:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003b48:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003b4c:	4302      	orrs	r2, r0
 8003b4e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b52:	065a      	lsls	r2, r3, #25
 8003b54:	d508      	bpl.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b56:	497d      	ldr	r1, [pc, #500]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b58:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003b5a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003b5e:	f022 0203 	bic.w	r2, r2, #3
 8003b62:	4302      	orrs	r2, r0
 8003b64:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b68:	061f      	lsls	r7, r3, #24
 8003b6a:	d508      	bpl.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b6c:	4977      	ldr	r1, [pc, #476]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b6e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003b70:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003b74:	f022 020c 	bic.w	r2, r2, #12
 8003b78:	4302      	orrs	r2, r0
 8003b7a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b7e:	05d8      	lsls	r0, r3, #23
 8003b80:	d508      	bpl.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b82:	4972      	ldr	r1, [pc, #456]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b84:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003b86:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003b8a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003b8e:	4302      	orrs	r2, r0
 8003b90:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b94:	0599      	lsls	r1, r3, #22
 8003b96:	d508      	bpl.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b98:	496c      	ldr	r1, [pc, #432]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b9a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003b9c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003ba0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003ba4:	4302      	orrs	r2, r0
 8003ba6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003baa:	055a      	lsls	r2, r3, #21
 8003bac:	d508      	bpl.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bae:	4967      	ldr	r1, [pc, #412]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003bb2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003bb6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003bba:	4302      	orrs	r2, r0
 8003bbc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003bc0:	051f      	lsls	r7, r3, #20
 8003bc2:	d508      	bpl.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003bc4:	4961      	ldr	r1, [pc, #388]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bc6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bc8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003bcc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003bd0:	4302      	orrs	r2, r0
 8003bd2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003bd6:	04d8      	lsls	r0, r3, #19
 8003bd8:	d508      	bpl.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003bda:	495c      	ldr	r1, [pc, #368]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bdc:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003bde:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003be2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003be6:	4302      	orrs	r2, r0
 8003be8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003bec:	0499      	lsls	r1, r3, #18
 8003bee:	d508      	bpl.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003bf0:	4956      	ldr	r1, [pc, #344]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bf2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003bf4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003bf8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003bfc:	4302      	orrs	r2, r0
 8003bfe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c02:	025a      	lsls	r2, r3, #9
 8003c04:	d508      	bpl.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c06:	4951      	ldr	r1, [pc, #324]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c08:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003c0a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003c0e:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003c12:	4302      	orrs	r2, r0
 8003c14:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c18:	029f      	lsls	r7, r3, #10
 8003c1a:	d50c      	bpl.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c1c:	494b      	ldr	r1, [pc, #300]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c1e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8003c20:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8003c24:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c28:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8003c2c:	bf08      	it	eq
 8003c2e:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c30:	4302      	orrs	r2, r0
 8003c32:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8003c36:	f013 0f08 	tst.w	r3, #8
 8003c3a:	bf18      	it	ne
 8003c3c:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c3e:	0358      	lsls	r0, r3, #13
 8003c40:	d508      	bpl.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c42:	4942      	ldr	r1, [pc, #264]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c44:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003c46:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003c4a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c4e:	4302      	orrs	r2, r0
 8003c50:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c54:	0219      	lsls	r1, r3, #8
 8003c56:	d40b      	bmi.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x218>
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003c58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c5c:	d016      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003c5e:	07f2      	lsls	r2, r6, #31
 8003c60:	d414      	bmi.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003c62:	2d01      	cmp	r5, #1
 8003c64:	f000 80d0 	beq.w	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003c68:	2000      	movs	r0, #0
}
 8003c6a:	b003      	add	sp, #12
 8003c6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c70:	4936      	ldr	r1, [pc, #216]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003c72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c76:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8003c7a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003c7e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003c82:	ea42 0200 	orr.w	r2, r2, r0
 8003c86:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003c8a:	d1e8      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_PLLI2S_DISABLE();
 8003c8c:	4b2f      	ldr	r3, [pc, #188]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c90:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_DISABLE();
 8003c92:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003c96:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003c98:	f7fd fcd2 	bl	8001640 <HAL_GetTick>
 8003c9c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c9e:	e004      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x252>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ca0:	f7fd fcce 	bl	8001640 <HAL_GetTick>
 8003ca4:	1bc0      	subs	r0, r0, r7
 8003ca6:	2864      	cmp	r0, #100	; 0x64
 8003ca8:	d85d      	bhi.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003caa:	6833      	ldr	r3, [r6, #0]
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	d4f7      	bmi.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003cb0:	6823      	ldr	r3, [r4, #0]
 8003cb2:	07df      	lsls	r7, r3, #31
 8003cb4:	d512      	bpl.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x284>
 8003cb6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003cb8:	b982      	cbnz	r2, 8003cdc <HAL_RCCEx_PeriphCLKConfig+0x284>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003cba:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003cbe:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003cc2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8003cc6:	6860      	ldr	r0, [r4, #4]
 8003cc8:	f007 6770 	and.w	r7, r7, #251658240	; 0xf000000
 8003ccc:	68a1      	ldr	r1, [r4, #8]
 8003cce:	433a      	orrs	r2, r7
 8003cd0:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8003cd4:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8003cd8:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003cdc:	031e      	lsls	r6, r3, #12
 8003cde:	f100 8111 	bmi.w	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8003ce2:	02d8      	lsls	r0, r3, #11
 8003ce4:	d504      	bpl.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x298>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ce6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003ce8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8003cec:	f000 810f 	beq.w	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cf0:	01d9      	lsls	r1, r3, #7
 8003cf2:	d511      	bpl.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003cf4:	4e15      	ldr	r6, [pc, #84]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003cf6:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003cf8:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cfc:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003d00:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8003d04:	6921      	ldr	r1, [r4, #16]
 8003d06:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 8003d0a:	433a      	orrs	r2, r7
 8003d0c:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8003d10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003d14:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d18:	019a      	lsls	r2, r3, #6
 8003d1a:	d50d      	bpl.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d1c:	6923      	ldr	r3, [r4, #16]
 8003d1e:	6862      	ldr	r2, [r4, #4]
 8003d20:	041b      	lsls	r3, r3, #16
 8003d22:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8003d26:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003d2a:	4a08      	ldr	r2, [pc, #32]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d2c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003d30:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003d34:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003d38:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d3a:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d3c:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_ENABLE();
 8003d3e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003d42:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003d44:	f7fd fc7c 	bl	8001640 <HAL_GetTick>
 8003d48:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d4a:	e006      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x302>
 8003d4c:	40023800 	.word	0x40023800
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d50:	f7fd fc76 	bl	8001640 <HAL_GetTick>
 8003d54:	1bc0      	subs	r0, r0, r7
 8003d56:	2864      	cmp	r0, #100	; 0x64
 8003d58:	d805      	bhi.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d5a:	6833      	ldr	r3, [r6, #0]
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	d5f7      	bpl.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  if(pllsaiused == 1)
 8003d60:	2d01      	cmp	r5, #1
 8003d62:	d181      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003d64:	e050      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        return HAL_TIMEOUT;
 8003d66:	2003      	movs	r0, #3
}
 8003d68:	b003      	add	sp, #12
 8003d6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d6e:	4a87      	ldr	r2, [pc, #540]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x534>)
    PWR->CR1 |= PWR_CR1_DBP;
 8003d70:	4b87      	ldr	r3, [pc, #540]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d72:	6c11      	ldr	r1, [r2, #64]	; 0x40
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d74:	461f      	mov	r7, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d76:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003d7a:	6411      	str	r1, [r2, #64]	; 0x40
 8003d7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d7e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003d82:	9201      	str	r2, [sp, #4]
 8003d84:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d8c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003d8e:	f7fd fc57 	bl	8001640 <HAL_GetTick>
 8003d92:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d94:	e005      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d96:	f7fd fc53 	bl	8001640 <HAL_GetTick>
 8003d9a:	eba0 0008 	sub.w	r0, r0, r8
 8003d9e:	2864      	cmp	r0, #100	; 0x64
 8003da0:	d8e1      	bhi.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	05db      	lsls	r3, r3, #23
 8003da6:	d5f6      	bpl.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x33e>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003da8:	4a78      	ldr	r2, [pc, #480]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8003daa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003dac:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003dae:	f403 7040 	and.w	r0, r3, #768	; 0x300
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003db2:	f411 7140 	ands.w	r1, r1, #768	; 0x300
 8003db6:	d011      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003db8:	4288      	cmp	r0, r1
 8003dba:	d00f      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x384>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dbc:	6f11      	ldr	r1, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dbe:	6f17      	ldr	r7, [r2, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dc0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dc4:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
 8003dc8:	6717      	str	r7, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dca:	6f17      	ldr	r7, [r2, #112]	; 0x70
 8003dcc:	f427 3780 	bic.w	r7, r7, #65536	; 0x10000
 8003dd0:	6717      	str	r7, [r2, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8003dd2:	6711      	str	r1, [r2, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003dd4:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003dd6:	07cf      	lsls	r7, r1, #31
 8003dd8:	f100 80c3 	bmi.w	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ddc:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8003de0:	f000 80b1 	beq.w	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003de4:	4969      	ldr	r1, [pc, #420]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8003de6:	688a      	ldr	r2, [r1, #8]
 8003de8:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8003dec:	608a      	str	r2, [r1, #8]
 8003dee:	4a67      	ldr	r2, [pc, #412]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8003df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df4:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003df6:	430b      	orrs	r3, r1
 8003df8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	e66e      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x84>
      plli2sused = 1;
 8003dfe:	2601      	movs	r6, #1
 8003e00:	e665      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x76>
  uint32_t pllsaiused = 0;
 8003e02:	2500      	movs	r5, #0
      plli2sused = 1;
 8003e04:	2601      	movs	r6, #1
 8003e06:	e64f      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x50>
    __HAL_RCC_PLLSAI_DISABLE();
 8003e08:	4b60      	ldr	r3, [pc, #384]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8003e0a:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e0c:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_DISABLE();
 8003e0e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003e12:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003e14:	f7fd fc14 	bl	8001640 <HAL_GetTick>
 8003e18:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e1a:	e004      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e1c:	f7fd fc10 	bl	8001640 <HAL_GetTick>
 8003e20:	1b80      	subs	r0, r0, r6
 8003e22:	2864      	cmp	r0, #100	; 0x64
 8003e24:	d89f      	bhi.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e26:	682b      	ldr	r3, [r5, #0]
 8003e28:	009f      	lsls	r7, r3, #2
 8003e2a:	d4f7      	bmi.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003e2c:	6823      	ldr	r3, [r4, #0]
 8003e2e:	031d      	lsls	r5, r3, #12
 8003e30:	f100 8092 	bmi.w	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8003e34:	02d8      	lsls	r0, r3, #11
 8003e36:	d51d      	bpl.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e38:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003e3a:	b9da      	cbnz	r2, 8003e74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e3c:	4953      	ldr	r1, [pc, #332]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e3e:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e40:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e44:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e48:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8003e4c:	69a0      	ldr	r0, [r4, #24]
 8003e4e:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 8003e52:	4332      	orrs	r2, r6
 8003e54:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8003e58:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8003e5c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e60:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8003e64:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003e66:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8003e6a:	3801      	subs	r0, #1
 8003e6c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003e70:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003e74:	0299      	lsls	r1, r3, #10
 8003e76:	d515      	bpl.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 8003e78:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8003e7a:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 8003e7e:	d111      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x44c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e80:	4942      	ldr	r1, [pc, #264]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003e82:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e84:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e88:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003e8c:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8003e90:	6a20      	ldr	r0, [r4, #32]
 8003e92:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 8003e96:	4332      	orrs	r2, r6
 8003e98:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8003e9c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003ea0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003ea4:	071a      	lsls	r2, r3, #28
 8003ea6:	d519      	bpl.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x484>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ea8:	4a38      	ldr	r2, [pc, #224]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003eaa:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003eac:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003eb0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003eb4:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8003eb8:	69e0      	ldr	r0, [r4, #28]
 8003eba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ebe:	430b      	orrs	r3, r1
 8003ec0:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8003ec4:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 8003ec8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ecc:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003ed0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003ed2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003ed6:	430b      	orrs	r3, r1
 8003ed8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8003edc:	4b2b      	ldr	r3, [pc, #172]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8003ede:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ee0:	461c      	mov	r4, r3
    __HAL_RCC_PLLSAI_ENABLE();
 8003ee2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ee6:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003ee8:	f7fd fbaa 	bl	8001640 <HAL_GetTick>
 8003eec:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003eee:	e005      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ef0:	f7fd fba6 	bl	8001640 <HAL_GetTick>
 8003ef4:	1b40      	subs	r0, r0, r5
 8003ef6:	2864      	cmp	r0, #100	; 0x64
 8003ef8:	f63f af35 	bhi.w	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003efc:	6823      	ldr	r3, [r4, #0]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	d5f6      	bpl.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003f02:	e6b1      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x210>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f04:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003f06:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003f0a:	f47f aeea 	bne.w	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x28a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f0e:	4e1f      	ldr	r6, [pc, #124]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003f10:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f12:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f16:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003f1a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8003f1e:	68e1      	ldr	r1, [r4, #12]
 8003f20:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 8003f24:	433a      	orrs	r2, r7
 8003f26:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8003f2a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003f2e:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f32:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8003f36:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003f38:	f021 011f 	bic.w	r1, r1, #31
 8003f3c:	3a01      	subs	r2, #1
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 8003f44:	e6d4      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x298>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f46:	4811      	ldr	r0, [pc, #68]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8003f48:	4912      	ldr	r1, [pc, #72]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003f4a:	6882      	ldr	r2, [r0, #8]
 8003f4c:	4019      	ands	r1, r3
 8003f4e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8003f52:	430a      	orrs	r2, r1
 8003f54:	6082      	str	r2, [r0, #8]
 8003f56:	e74a      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x396>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f58:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003f5a:	2a00      	cmp	r2, #0
 8003f5c:	f43f af6e 	beq.w	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003f60:	e768      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f62:	4617      	mov	r7, r2
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f64:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003f68:	f7fd fb6a 	bl	8001640 <HAL_GetTick>
 8003f6c:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f6e:	e006      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x526>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f70:	f7fd fb66 	bl	8001640 <HAL_GetTick>
 8003f74:	eba0 0009 	sub.w	r0, r0, r9
 8003f78:	4540      	cmp	r0, r8
 8003f7a:	f63f aef4 	bhi.w	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f80:	0798      	lsls	r0, r3, #30
 8003f82:	d5f5      	bpl.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003f84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003f86:	f403 7040 	and.w	r0, r3, #768	; 0x300
 8003f8a:	e727      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	40007000 	.word	0x40007000
 8003f94:	0ffffcff 	.word	0x0ffffcff

08003f98 <HAL_RTC_SetAlarm>:
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f98:	7f03      	ldrb	r3, [r0, #28]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	f000 80d7 	beq.w	800414e <HAL_RTC_SetAlarm+0x1b6>

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fa0:	2302      	movs	r3, #2
{
 8003fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fa6:	4605      	mov	r5, r0
  __HAL_LOCK(hrtc);
 8003fa8:	2001      	movs	r0, #1
 8003faa:	682f      	ldr	r7, [r5, #0]
 8003fac:	7728      	strb	r0, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fae:	776b      	strb	r3, [r5, #29]

  if(Format == RTC_FORMAT_BIN)
 8003fb0:	2a00      	cmp	r2, #0
 8003fb2:	d04d      	beq.n	8004050 <HAL_RTC_SetAlarm+0xb8>
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
              ((uint32_t)sAlarm->AlarmMask));
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003fb4:	68bc      	ldr	r4, [r7, #8]
 8003fb6:	f014 0e40 	ands.w	lr, r4, #64	; 0x40
 8003fba:	f000 80c2 	beq.w	8004142 <HAL_RTC_SetAlarm+0x1aa>
 8003fbe:	7b0c      	ldrb	r4, [r1, #12]
 8003fc0:	ea4f 4e04 	mov.w	lr, r4, lsl #16
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8003fc4:	6a0b      	ldr	r3, [r1, #32]
 8003fc6:	698c      	ldr	r4, [r1, #24]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003fc8:	788a      	ldrb	r2, [r1, #2]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8003fca:	431c      	orrs	r4, r3
 8003fcc:	780b      	ldrb	r3, [r1, #0]
 8003fce:	4314      	orrs	r4, r2
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8003fd0:	784a      	ldrb	r2, [r1, #1]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8003fd2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8003fd6:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8003fda:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8003fde:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
 8003fe2:	ea44 040e 	orr.w	r4, r4, lr

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003fe6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003fe8:	20ca      	movs	r0, #202	; 0xca
 8003fea:	2253      	movs	r2, #83	; 0x53
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003fec:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8003ff0:	69ce      	ldr	r6, [r1, #28]
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ff6:	6278      	str	r0, [r7, #36]	; 0x24
 8003ff8:	627a      	str	r2, [r7, #36]	; 0x24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003ffa:	ea48 0806 	orr.w	r8, r8, r6
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003ffe:	68bb      	ldr	r3, [r7, #8]
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004000:	f000 8081 	beq.w	8004106 <HAL_RTC_SetAlarm+0x16e>
    __HAL_RTC_ALARMA_ENABLE(hrtc);
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004004:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004008:	60bb      	str	r3, [r7, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004010:	60bb      	str	r3, [r7, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004012:	f7fd fb15 	bl	8001640 <HAL_GetTick>
 8004016:	4607      	mov	r7, r0

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8004018:	e005      	b.n	8004026 <HAL_RTC_SetAlarm+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800401a:	f7fd fb11 	bl	8001640 <HAL_GetTick>
 800401e:	1bc0      	subs	r0, r0, r7
 8004020:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004024:	d866      	bhi.n	80040f4 <HAL_RTC_SetAlarm+0x15c>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8004026:	682a      	ldr	r2, [r5, #0]
 8004028:	68d6      	ldr	r6, [r2, #12]
 800402a:	f016 0602 	ands.w	r6, r6, #2
 800402e:	d0f4      	beq.n	800401a <HAL_RTC_SetAlarm+0x82>

        return HAL_TIMEOUT;
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004030:	6214      	str	r4, [r2, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004032:	f8c2 8048 	str.w	r8, [r2, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004036:	6893      	ldr	r3, [r2, #8]
 8004038:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800403c:	6093      	str	r3, [r2, #8]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800403e:	2300      	movs	r3, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004040:	20ff      	movs	r0, #255	; 0xff
  hrtc->State = HAL_RTC_STATE_READY;
 8004042:	2101      	movs	r1, #1
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004044:	6250      	str	r0, [r2, #36]	; 0x24

  return HAL_OK;
 8004046:	4618      	mov	r0, r3
  hrtc->State = HAL_RTC_STATE_READY;
 8004048:	7769      	strb	r1, [r5, #29]
  __HAL_UNLOCK(hrtc);
 800404a:	772b      	strb	r3, [r5, #28]
}
 800404c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004050:	68be      	ldr	r6, [r7, #8]
 8004052:	f016 0c40 	ands.w	ip, r6, #64	; 0x40
 8004056:	d077      	beq.n	8004148 <HAL_RTC_SetAlarm+0x1b0>
 8004058:	f891 c00c 	ldrb.w	ip, [r1, #12]
 800405c:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8004060:	780b      	ldrb	r3, [r1, #0]
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8004062:	2000      	movs	r0, #0
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8004064:	6a0e      	ldr	r6, [r1, #32]

  while(Value >= 10)
 8004066:	2b09      	cmp	r3, #9
 8004068:	d906      	bls.n	8004078 <HAL_RTC_SetAlarm+0xe0>
  {
    bcdhigh++;
    Value -= 10;
 800406a:	3b0a      	subs	r3, #10
    bcdhigh++;
 800406c:	3001      	adds	r0, #1
    Value -= 10;
 800406e:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 8004070:	2b09      	cmp	r3, #9
 8004072:	d8fa      	bhi.n	800406a <HAL_RTC_SetAlarm+0xd2>
 8004074:	0100      	lsls	r0, r0, #4
 8004076:	b2c0      	uxtb	r0, r0
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8004078:	4318      	orrs	r0, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800407a:	784b      	ldrb	r3, [r1, #1]
  uint32_t bcdhigh = 0;
 800407c:	2400      	movs	r4, #0
  while(Value >= 10)
 800407e:	2b09      	cmp	r3, #9
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8004080:	ea4f 4000 	mov.w	r0, r0, lsl #16
  while(Value >= 10)
 8004084:	d906      	bls.n	8004094 <HAL_RTC_SetAlarm+0xfc>
    Value -= 10;
 8004086:	3b0a      	subs	r3, #10
    bcdhigh++;
 8004088:	3401      	adds	r4, #1
    Value -= 10;
 800408a:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 800408c:	2b09      	cmp	r3, #9
 800408e:	d8fa      	bhi.n	8004086 <HAL_RTC_SetAlarm+0xee>
 8004090:	0124      	lsls	r4, r4, #4
 8004092:	b2e4      	uxtb	r4, r4
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8004094:	4323      	orrs	r3, r4
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004096:	788c      	ldrb	r4, [r1, #2]
  while(Value >= 10)
 8004098:	2c09      	cmp	r4, #9
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800409a:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while(Value >= 10)
 800409e:	d95a      	bls.n	8004156 <HAL_RTC_SetAlarm+0x1be>
  uint32_t bcdhigh = 0;
 80040a0:	f04f 0e00 	mov.w	lr, #0
    Value -= 10;
 80040a4:	3c0a      	subs	r4, #10
    bcdhigh++;
 80040a6:	f10e 0e01 	add.w	lr, lr, #1
    Value -= 10;
 80040aa:	b2e4      	uxtb	r4, r4
  while(Value >= 10)
 80040ac:	2c09      	cmp	r4, #9
 80040ae:	d8f9      	bhi.n	80040a4 <HAL_RTC_SetAlarm+0x10c>
 80040b0:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
 80040b4:	fa5f f88e 	uxtb.w	r8, lr
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80040b8:	f891 e024 	ldrb.w	lr, [r1, #36]	; 0x24
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80040bc:	ea44 0408 	orr.w	r4, r4, r8
  while(Value >= 10)
 80040c0:	f1be 0f09 	cmp.w	lr, #9
 80040c4:	d945      	bls.n	8004152 <HAL_RTC_SetAlarm+0x1ba>
    Value -= 10;
 80040c6:	f1ae 0e0a 	sub.w	lr, lr, #10
    bcdhigh++;
 80040ca:	3201      	adds	r2, #1
    Value -= 10;
 80040cc:	fa5f fe8e 	uxtb.w	lr, lr
  while(Value >= 10)
 80040d0:	f1be 0f09 	cmp.w	lr, #9
 80040d4:	d8f7      	bhi.n	80040c6 <HAL_RTC_SetAlarm+0x12e>
 80040d6:	0112      	lsls	r2, r2, #4
 80040d8:	b2d2      	uxtb	r2, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80040da:	ea4e 0e02 	orr.w	lr, lr, r2
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80040de:	698a      	ldr	r2, [r1, #24]
 80040e0:	4316      	orrs	r6, r2
 80040e2:	ea46 0c0c 	orr.w	ip, r6, ip
 80040e6:	ea4c 0000 	orr.w	r0, ip, r0
 80040ea:	4303      	orrs	r3, r0
 80040ec:	431c      	orrs	r4, r3
 80040ee:	ea44 640e 	orr.w	r4, r4, lr, lsl #24
 80040f2:	e778      	b.n	8003fe6 <HAL_RTC_SetAlarm+0x4e>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040f6:	682a      	ldr	r2, [r5, #0]
 80040f8:	21ff      	movs	r1, #255	; 0xff
        return HAL_TIMEOUT;
 80040fa:	4618      	mov	r0, r3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040fc:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 80040fe:	772e      	strb	r6, [r5, #28]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004100:	776b      	strb	r3, [r5, #29]
}
 8004102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004106:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800410a:	60bb      	str	r3, [r7, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004112:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8004114:	f7fd fa94 	bl	8001640 <HAL_GetTick>
 8004118:	4607      	mov	r7, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800411a:	e005      	b.n	8004128 <HAL_RTC_SetAlarm+0x190>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800411c:	f7fd fa90 	bl	8001640 <HAL_GetTick>
 8004120:	1bc0      	subs	r0, r0, r7
 8004122:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004126:	d8e5      	bhi.n	80040f4 <HAL_RTC_SetAlarm+0x15c>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8004128:	682a      	ldr	r2, [r5, #0]
 800412a:	68d6      	ldr	r6, [r2, #12]
 800412c:	f016 0601 	ands.w	r6, r6, #1
 8004130:	d0f4      	beq.n	800411c <HAL_RTC_SetAlarm+0x184>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004132:	61d4      	str	r4, [r2, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004134:	f8c2 8044 	str.w	r8, [r2, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004138:	6893      	ldr	r3, [r2, #8]
 800413a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800413e:	6093      	str	r3, [r2, #8]
 8004140:	e77d      	b.n	800403e <HAL_RTC_SetAlarm+0xa6>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8004142:	f881 e00c 	strb.w	lr, [r1, #12]
 8004146:	e73d      	b.n	8003fc4 <HAL_RTC_SetAlarm+0x2c>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8004148:	f881 c00c 	strb.w	ip, [r1, #12]
 800414c:	e788      	b.n	8004060 <HAL_RTC_SetAlarm+0xc8>
  __HAL_LOCK(hrtc);
 800414e:	2002      	movs	r0, #2
}
 8004150:	4770      	bx	lr
  while(Value >= 10)
 8004152:	2200      	movs	r2, #0
 8004154:	e7c1      	b.n	80040da <HAL_RTC_SetAlarm+0x142>
 8004156:	f04f 0800 	mov.w	r8, #0
 800415a:	e7ad      	b.n	80040b8 <HAL_RTC_SetAlarm+0x120>

0800415c <HAL_RTC_WaitForSynchro>:
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800415c:	6802      	ldr	r2, [r0, #0]
{
 800415e:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004160:	68d3      	ldr	r3, [r2, #12]
{
 8004162:	4604      	mov	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004164:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004168:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 800416a:	f7fd fa69 	bl	8001640 <HAL_GetTick>
 800416e:	4605      	mov	r5, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004170:	e005      	b.n	800417e <HAL_RTC_WaitForSynchro+0x22>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004172:	f7fd fa65 	bl	8001640 <HAL_GetTick>
 8004176:	1b40      	subs	r0, r0, r5
 8004178:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800417c:	d805      	bhi.n	800418a <HAL_RTC_WaitForSynchro+0x2e>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800417e:	6823      	ldr	r3, [r4, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	069b      	lsls	r3, r3, #26
 8004184:	d5f5      	bpl.n	8004172 <HAL_RTC_WaitForSynchro+0x16>
  return HAL_OK;
 8004186:	2000      	movs	r0, #0
}
 8004188:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 800418a:	2003      	movs	r0, #3
}
 800418c:	bd38      	pop	{r3, r4, r5, pc}
 800418e:	bf00      	nop

08004190 <RTC_EnterInitMode>:
{
 8004190:	b538      	push	{r3, r4, r5, lr}
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004192:	6803      	ldr	r3, [r0, #0]
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	0652      	lsls	r2, r2, #25
 8004198:	d501      	bpl.n	800419e <RTC_EnterInitMode+0xe>
  return HAL_OK;
 800419a:	2000      	movs	r0, #0
}
 800419c:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800419e:	f04f 32ff 	mov.w	r2, #4294967295
 80041a2:	4604      	mov	r4, r0
 80041a4:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80041a6:	f7fd fa4b 	bl	8001640 <HAL_GetTick>
 80041aa:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	065b      	lsls	r3, r3, #25
 80041b2:	d4f2      	bmi.n	800419a <RTC_EnterInitMode+0xa>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80041b4:	f7fd fa44 	bl	8001640 <HAL_GetTick>
 80041b8:	1b40      	subs	r0, r0, r5
 80041ba:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80041be:	d9f5      	bls.n	80041ac <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 80041c0:	2003      	movs	r0, #3
}
 80041c2:	bd38      	pop	{r3, r4, r5, pc}

080041c4 <HAL_RTC_Init>:
  if(hrtc == NULL)
 80041c4:	2800      	cmp	r0, #0
 80041c6:	d041      	beq.n	800424c <HAL_RTC_Init+0x88>
{
 80041c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80041ca:	7f43      	ldrb	r3, [r0, #29]
 80041cc:	4604      	mov	r4, r0
 80041ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d036      	beq.n	8004244 <HAL_RTC_Init+0x80>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80041d6:	2002      	movs	r0, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	21ca      	movs	r1, #202	; 0xca
 80041dc:	2253      	movs	r2, #83	; 0x53
  hrtc->State = HAL_RTC_STATE_BUSY;
 80041de:	7760      	strb	r0, [r4, #29]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80041e0:	4620      	mov	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041e2:	6259      	str	r1, [r3, #36]	; 0x24
 80041e4:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80041e6:	f7ff ffd3 	bl	8004190 <RTC_EnterInitMode>
 80041ea:	bb20      	cbnz	r0, 8004236 <HAL_RTC_Init+0x72>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80041ec:	6823      	ldr	r3, [r4, #0]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041ee:	25ff      	movs	r5, #255	; 0xff
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80041f0:	4917      	ldr	r1, [pc, #92]	; (8004250 <HAL_RTC_Init+0x8c>)
 80041f2:	689e      	ldr	r6, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80041f4:	6862      	ldr	r2, [r4, #4]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80041f6:	4031      	ands	r1, r6
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80041f8:	6926      	ldr	r6, [r4, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80041fa:	68a7      	ldr	r7, [r4, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80041fc:	4332      	orrs	r2, r6
 80041fe:	6966      	ldr	r6, [r4, #20]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004200:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004202:	4332      	orrs	r2, r6
 8004204:	689e      	ldr	r6, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004206:	68e1      	ldr	r1, [r4, #12]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004208:	4332      	orrs	r2, r6
    hrtc->State = HAL_RTC_STATE_READY;
 800420a:	2601      	movs	r6, #1
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800420c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800420e:	6119      	str	r1, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8004210:	6919      	ldr	r1, [r3, #16]
 8004212:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8004216:	69a7      	ldr	r7, [r4, #24]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8004218:	6119      	str	r1, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800421a:	68d9      	ldr	r1, [r3, #12]
 800421c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004220:	60d9      	str	r1, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8004222:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004224:	f021 0108 	bic.w	r1, r1, #8
 8004228:	64d9      	str	r1, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800422a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800422c:	433a      	orrs	r2, r7
 800422e:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004230:	625d      	str	r5, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004232:	7766      	strb	r6, [r4, #29]
}
 8004234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004236:	6822      	ldr	r2, [r4, #0]
 8004238:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 800423a:	2304      	movs	r3, #4
    return HAL_ERROR;
 800423c:	2001      	movs	r0, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800423e:	6251      	str	r1, [r2, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004240:	7763      	strb	r3, [r4, #29]
}
 8004242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8004244:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8004246:	f002 fd4d 	bl	8006ce4 <HAL_RTC_MspInit>
 800424a:	e7c4      	b.n	80041d6 <HAL_RTC_Init+0x12>
     return HAL_ERROR;
 800424c:	2001      	movs	r0, #1
}
 800424e:	4770      	bx	lr
 8004250:	ff8fffbf 	.word	0xff8fffbf

08004254 <HAL_RTC_SetTime>:
{
 8004254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004256:	7f03      	ldrb	r3, [r0, #28]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d07c      	beq.n	8004356 <HAL_RTC_SetTime+0x102>
 800425c:	460d      	mov	r5, r1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800425e:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 8004260:	2101      	movs	r1, #1
 8004262:	6806      	ldr	r6, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004264:	7743      	strb	r3, [r0, #29]
 8004266:	4604      	mov	r4, r0
  __HAL_LOCK(hrtc);
 8004268:	7701      	strb	r1, [r0, #28]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800426a:	68b7      	ldr	r7, [r6, #8]
  if(Format == RTC_FORMAT_BIN)
 800426c:	2a00      	cmp	r2, #0
 800426e:	d033      	beq.n	80042d8 <HAL_RTC_SetTime+0x84>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004270:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8004274:	d06b      	beq.n	800434e <HAL_RTC_SetTime+0xfa>
 8004276:	7b2f      	ldrb	r7, [r5, #12]
 8004278:	043f      	lsls	r7, r7, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800427a:	7868      	ldrb	r0, [r5, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800427c:	782a      	ldrb	r2, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800427e:	0200      	lsls	r0, r0, #8
              ((uint32_t)sTime->Seconds) | \
 8004280:	78ab      	ldrb	r3, [r5, #2]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8004282:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8004286:	4318      	orrs	r0, r3
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8004288:	4307      	orrs	r7, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800428a:	22ca      	movs	r2, #202	; 0xca
 800428c:	2353      	movs	r3, #83	; 0x53
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800428e:	4620      	mov	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004290:	6272      	str	r2, [r6, #36]	; 0x24
 8004292:	6273      	str	r3, [r6, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004294:	f7ff ff7c 	bl	8004190 <RTC_EnterInitMode>
 8004298:	4606      	mov	r6, r0
 800429a:	2800      	cmp	r0, #0
 800429c:	d14d      	bne.n	800433a <HAL_RTC_SetTime+0xe6>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800429e:	4937      	ldr	r1, [pc, #220]	; (800437c <HAL_RTC_SetTime+0x128>)
 80042a0:	6823      	ldr	r3, [r4, #0]
 80042a2:	4039      	ands	r1, r7
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80042a4:	e9d5 2004 	ldrd	r2, r0, [r5, #16]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80042a8:	6019      	str	r1, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80042aa:	6899      	ldr	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80042ac:	4302      	orrs	r2, r0
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80042ae:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80042b2:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80042b4:	6899      	ldr	r1, [r3, #8]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80042ba:	68da      	ldr	r2, [r3, #12]
 80042bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042c0:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	0692      	lsls	r2, r2, #26
 80042c6:	d549      	bpl.n	800435c <HAL_RTC_SetTime+0x108>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042c8:	20ff      	movs	r0, #255	; 0xff
   hrtc->State = HAL_RTC_STATE_READY;
 80042ca:	2101      	movs	r1, #1
   __HAL_UNLOCK(hrtc);
 80042cc:	2200      	movs	r2, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042ce:	6258      	str	r0, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80042d0:	7761      	strb	r1, [r4, #29]
   __HAL_UNLOCK(hrtc);
 80042d2:	7722      	strb	r2, [r4, #28]
}
 80042d4:	4630      	mov	r0, r6
 80042d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80042d8:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 80042dc:	d039      	beq.n	8004352 <HAL_RTC_SetTime+0xfe>
 80042de:	7b2f      	ldrb	r7, [r5, #12]
 80042e0:	043f      	lsls	r7, r7, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80042e2:	782b      	ldrb	r3, [r5, #0]
  uint32_t bcdhigh = 0;
 80042e4:	2100      	movs	r1, #0
  while(Value >= 10)
 80042e6:	2b09      	cmp	r3, #9
 80042e8:	d906      	bls.n	80042f8 <HAL_RTC_SetTime+0xa4>
    Value -= 10;
 80042ea:	3b0a      	subs	r3, #10
    bcdhigh++;
 80042ec:	3101      	adds	r1, #1
    Value -= 10;
 80042ee:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 80042f0:	2b09      	cmp	r3, #9
 80042f2:	d8fa      	bhi.n	80042ea <HAL_RTC_SetTime+0x96>
 80042f4:	0109      	lsls	r1, r1, #4
 80042f6:	b2c9      	uxtb	r1, r1
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80042f8:	4319      	orrs	r1, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80042fa:	786b      	ldrb	r3, [r5, #1]
  uint32_t bcdhigh = 0;
 80042fc:	2000      	movs	r0, #0
  while(Value >= 10)
 80042fe:	2b09      	cmp	r3, #9
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8004300:	ea4f 4101 	mov.w	r1, r1, lsl #16
  while(Value >= 10)
 8004304:	d906      	bls.n	8004314 <HAL_RTC_SetTime+0xc0>
    Value -= 10;
 8004306:	3b0a      	subs	r3, #10
    bcdhigh++;
 8004308:	3001      	adds	r0, #1
    Value -= 10;
 800430a:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 800430c:	2b09      	cmp	r3, #9
 800430e:	d8fa      	bhi.n	8004306 <HAL_RTC_SetTime+0xb2>
 8004310:	0100      	lsls	r0, r0, #4
 8004312:	b2c0      	uxtb	r0, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8004314:	4303      	orrs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004316:	78a8      	ldrb	r0, [r5, #2]
  while(Value >= 10)
 8004318:	2809      	cmp	r0, #9
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800431a:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while(Value >= 10)
 800431e:	d92b      	bls.n	8004378 <HAL_RTC_SetTime+0x124>
    Value -= 10;
 8004320:	380a      	subs	r0, #10
    bcdhigh++;
 8004322:	3201      	adds	r2, #1
    Value -= 10;
 8004324:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8004326:	2809      	cmp	r0, #9
 8004328:	d8fa      	bhi.n	8004320 <HAL_RTC_SetTime+0xcc>
 800432a:	0112      	lsls	r2, r2, #4
 800432c:	b2d2      	uxtb	r2, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800432e:	430f      	orrs	r7, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004330:	4310      	orrs	r0, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8004332:	433b      	orrs	r3, r7
 8004334:	ea43 0700 	orr.w	r7, r3, r0
 8004338:	e7a7      	b.n	800428a <HAL_RTC_SetTime+0x36>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800433a:	6821      	ldr	r1, [r4, #0]
 800433c:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 800433e:	2204      	movs	r2, #4
    __HAL_UNLOCK(hrtc);
 8004340:	2300      	movs	r3, #0
    return HAL_ERROR;
 8004342:	2601      	movs	r6, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004344:	6248      	str	r0, [r1, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004346:	7762      	strb	r2, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8004348:	7723      	strb	r3, [r4, #28]
}
 800434a:	4630      	mov	r0, r6
 800434c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      sTime->TimeFormat = 0x00;
 800434e:	732f      	strb	r7, [r5, #12]
 8004350:	e793      	b.n	800427a <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 8004352:	732f      	strb	r7, [r5, #12]
 8004354:	e7c5      	b.n	80042e2 <HAL_RTC_SetTime+0x8e>
  __HAL_LOCK(hrtc);
 8004356:	2602      	movs	r6, #2
}
 8004358:	4630      	mov	r0, r6
 800435a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800435c:	4620      	mov	r0, r4
 800435e:	f7ff fefd 	bl	800415c <HAL_RTC_WaitForSynchro>
 8004362:	b908      	cbnz	r0, 8004368 <HAL_RTC_SetTime+0x114>
 8004364:	6823      	ldr	r3, [r4, #0]
 8004366:	e7af      	b.n	80042c8 <HAL_RTC_SetTime+0x74>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004368:	6822      	ldr	r2, [r4, #0]
 800436a:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 800436c:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800436e:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8004370:	7726      	strb	r6, [r4, #28]
        return HAL_ERROR;
 8004372:	2601      	movs	r6, #1
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004374:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8004376:	e7ad      	b.n	80042d4 <HAL_RTC_SetTime+0x80>
  while(Value >= 10)
 8004378:	2200      	movs	r2, #0
 800437a:	e7d8      	b.n	800432e <HAL_RTC_SetTime+0xda>
 800437c:	007f7f7f 	.word	0x007f7f7f

08004380 <HAL_RTC_SetDate>:
 __HAL_LOCK(hrtc);
 8004380:	7f03      	ldrb	r3, [r0, #28]
 8004382:	2b01      	cmp	r3, #1
{
 8004384:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8004386:	d06a      	beq.n	800445e <HAL_RTC_SetDate+0xde>
 8004388:	4605      	mov	r5, r0
  hrtc->State = HAL_RTC_STATE_BUSY;
 800438a:	2302      	movs	r3, #2
 __HAL_LOCK(hrtc);
 800438c:	2001      	movs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800438e:	776b      	strb	r3, [r5, #29]
 __HAL_LOCK(hrtc);
 8004390:	7728      	strb	r0, [r5, #28]
 8004392:	780e      	ldrb	r6, [r1, #0]
 8004394:	78cb      	ldrb	r3, [r1, #3]
 8004396:	0376      	lsls	r6, r6, #13
 8004398:	7848      	ldrb	r0, [r1, #1]
 800439a:	788c      	ldrb	r4, [r1, #2]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800439c:	b312      	cbz	r2, 80043e4 <HAL_RTC_SetDate+0x64>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800439e:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 80043a2:	431c      	orrs	r4, r3
 80043a4:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043a8:	682b      	ldr	r3, [r5, #0]
 80043aa:	21ca      	movs	r1, #202	; 0xca
 80043ac:	2253      	movs	r2, #83	; 0x53
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80043ae:	4628      	mov	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043b0:	6259      	str	r1, [r3, #36]	; 0x24
 80043b2:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80043b4:	f7ff feec 	bl	8004190 <RTC_EnterInitMode>
 80043b8:	4606      	mov	r6, r0
 80043ba:	2800      	cmp	r0, #0
 80043bc:	d145      	bne.n	800444a <HAL_RTC_SetDate+0xca>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80043be:	4a31      	ldr	r2, [pc, #196]	; (8004484 <HAL_RTC_SetDate+0x104>)
 80043c0:	682b      	ldr	r3, [r5, #0]
 80043c2:	4022      	ands	r2, r4
 80043c4:	605a      	str	r2, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043cc:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	0692      	lsls	r2, r2, #26
 80043d2:	d547      	bpl.n	8004464 <HAL_RTC_SetDate+0xe4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043d4:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_READY ;
 80043d6:	2101      	movs	r1, #1
    __HAL_UNLOCK(hrtc);
 80043d8:	2200      	movs	r2, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043da:	6258      	str	r0, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80043dc:	7769      	strb	r1, [r5, #29]
    __HAL_UNLOCK(hrtc);
 80043de:	772a      	strb	r2, [r5, #28]
}
 80043e0:	4630      	mov	r0, r6
 80043e2:	bd70      	pop	{r4, r5, r6, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80043e4:	f010 0f10 	tst.w	r0, #16
 80043e8:	d004      	beq.n	80043f4 <HAL_RTC_SetDate+0x74>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80043ea:	f020 0010 	bic.w	r0, r0, #16
 80043ee:	300a      	adds	r0, #10
 80043f0:	b2c0      	uxtb	r0, r0
 80043f2:	7048      	strb	r0, [r1, #1]
  while(Value >= 10)
 80043f4:	2b09      	cmp	r3, #9
  uint32_t bcdhigh = 0;
 80043f6:	f04f 0100 	mov.w	r1, #0
  while(Value >= 10)
 80043fa:	d906      	bls.n	800440a <HAL_RTC_SetDate+0x8a>
    Value -= 10;
 80043fc:	3b0a      	subs	r3, #10
    bcdhigh++;
 80043fe:	3101      	adds	r1, #1
    Value -= 10;
 8004400:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 8004402:	2b09      	cmp	r3, #9
 8004404:	d8fa      	bhi.n	80043fc <HAL_RTC_SetDate+0x7c>
 8004406:	0109      	lsls	r1, r1, #4
 8004408:	b2c9      	uxtb	r1, r1
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800440a:	430b      	orrs	r3, r1
  while(Value >= 10)
 800440c:	2809      	cmp	r0, #9
  uint32_t bcdhigh = 0;
 800440e:	f04f 0100 	mov.w	r1, #0
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004412:	ea4f 4303 	mov.w	r3, r3, lsl #16
  while(Value >= 10)
 8004416:	d906      	bls.n	8004426 <HAL_RTC_SetDate+0xa6>
    Value -= 10;
 8004418:	380a      	subs	r0, #10
    bcdhigh++;
 800441a:	3101      	adds	r1, #1
    Value -= 10;
 800441c:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 800441e:	2809      	cmp	r0, #9
 8004420:	d8fa      	bhi.n	8004418 <HAL_RTC_SetDate+0x98>
 8004422:	0109      	lsls	r1, r1, #4
 8004424:	b2c9      	uxtb	r1, r1
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8004426:	4308      	orrs	r0, r1
  while(Value >= 10)
 8004428:	2c09      	cmp	r4, #9
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800442a:	ea4f 2100 	mov.w	r1, r0, lsl #8
  while(Value >= 10)
 800442e:	d927      	bls.n	8004480 <HAL_RTC_SetDate+0x100>
    Value -= 10;
 8004430:	3c0a      	subs	r4, #10
    bcdhigh++;
 8004432:	3201      	adds	r2, #1
    Value -= 10;
 8004434:	b2e4      	uxtb	r4, r4
  while(Value >= 10)
 8004436:	2c09      	cmp	r4, #9
 8004438:	d8fa      	bhi.n	8004430 <HAL_RTC_SetDate+0xb0>
 800443a:	0112      	lsls	r2, r2, #4
 800443c:	b2d0      	uxtb	r0, r2
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800443e:	431e      	orrs	r6, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004440:	4304      	orrs	r4, r0
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004442:	ea46 0001 	orr.w	r0, r6, r1
 8004446:	4304      	orrs	r4, r0
 8004448:	e7ae      	b.n	80043a8 <HAL_RTC_SetDate+0x28>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800444a:	6829      	ldr	r1, [r5, #0]
 800444c:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 800444e:	2204      	movs	r2, #4
    __HAL_UNLOCK(hrtc);
 8004450:	2300      	movs	r3, #0
    return HAL_ERROR;
 8004452:	2601      	movs	r6, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004454:	6248      	str	r0, [r1, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004456:	776a      	strb	r2, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8004458:	772b      	strb	r3, [r5, #28]
}
 800445a:	4630      	mov	r0, r6
 800445c:	bd70      	pop	{r4, r5, r6, pc}
 __HAL_LOCK(hrtc);
 800445e:	2602      	movs	r6, #2
}
 8004460:	4630      	mov	r0, r6
 8004462:	bd70      	pop	{r4, r5, r6, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004464:	4628      	mov	r0, r5
 8004466:	f7ff fe79 	bl	800415c <HAL_RTC_WaitForSynchro>
 800446a:	b908      	cbnz	r0, 8004470 <HAL_RTC_SetDate+0xf0>
 800446c:	682b      	ldr	r3, [r5, #0]
 800446e:	e7b1      	b.n	80043d4 <HAL_RTC_SetDate+0x54>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004470:	682a      	ldr	r2, [r5, #0]
 8004472:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004474:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004476:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8004478:	772e      	strb	r6, [r5, #28]
        return HAL_ERROR;
 800447a:	2601      	movs	r6, #1
        hrtc->State = HAL_RTC_STATE_ERROR;
 800447c:	776b      	strb	r3, [r5, #29]
        return HAL_ERROR;
 800447e:	e7af      	b.n	80043e0 <HAL_RTC_SetDate+0x60>
  while(Value >= 10)
 8004480:	2000      	movs	r0, #0
 8004482:	e7dc      	b.n	800443e <HAL_RTC_SetDate+0xbe>
 8004484:	00ffff3f 	.word	0x00ffff3f

08004488 <HAL_RTCEx_SetTimeStamp>:
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004488:	7f03      	ldrb	r3, [r0, #28]
 800448a:	2b01      	cmp	r3, #1
{
 800448c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hrtc);
 800448e:	d021      	beq.n	80044d4 <HAL_RTCEx_SetTimeStamp+0x4c>

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8004490:	6803      	ldr	r3, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004492:	2602      	movs	r6, #2

  tmpreg|= TimeStampEdge;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004494:	25ca      	movs	r5, #202	; 0xca
 8004496:	2453      	movs	r4, #83	; 0x53
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004498:	7746      	strb	r6, [r0, #29]
  hrtc->Instance->CR = (uint32_t)tmpreg;

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800449a:	26ff      	movs	r6, #255	; 0xff
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800449c:	689f      	ldr	r7, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800449e:	625d      	str	r5, [r3, #36]	; 0x24
 80044a0:	625c      	str	r4, [r3, #36]	; 0x24
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80044a2:	f6a4 045c 	subw	r4, r4, #2140	; 0x85c
  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80044a6:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80044a8:	403c      	ands	r4, r7

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80044aa:	2701      	movs	r7, #1
  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80044ac:	f025 0506 	bic.w	r5, r5, #6
  tmpreg|= TimeStampEdge;
 80044b0:	430c      	orrs	r4, r1
  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80044b2:	64dd      	str	r5, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80044b4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80044b6:	430a      	orrs	r2, r1

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80044b8:	2100      	movs	r1, #0
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80044ba:	64da      	str	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80044bc:	460d      	mov	r5, r1
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80044be:	609c      	str	r4, [r3, #8]
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80044c0:	689a      	ldr	r2, [r3, #8]
 80044c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044c6:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044c8:	625e      	str	r6, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80044ca:	7747      	strb	r7, [r0, #29]
  __HAL_UNLOCK(hrtc);
 80044cc:	7701      	strb	r1, [r0, #28]
}
 80044ce:	4628      	mov	r0, r5
 80044d0:	bcf0      	pop	{r4, r5, r6, r7}
 80044d2:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80044d4:	2502      	movs	r5, #2
}
 80044d6:	4628      	mov	r0, r5
 80044d8:	bcf0      	pop	{r4, r5, r6, r7}
 80044da:	4770      	bx	lr

080044dc <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80044dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044e0:	4605      	mov	r5, r0
 80044e2:	b089      	sub	sp, #36	; 0x24
 80044e4:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 80044e6:	f7fd f8ab 	bl	8001640 <HAL_GetTick>
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 80044ea:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 80044ec:	4606      	mov	r6, r0
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 80044ee:	2108      	movs	r1, #8
 80044f0:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2] = {0, 0};
 80044f2:	e9cd 3300 	strd	r3, r3, [sp]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 80044f6:	f001 f9d3 	bl	80058a0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 80044fa:	4604      	mov	r4, r0
 80044fc:	b118      	cbz	r0, 8004506 <SD_FindSCR+0x2a>
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
  }

  return HAL_SD_ERROR_NONE;
}
 80044fe:	4620      	mov	r0, r4
 8004500:	b009      	add	sp, #36	; 0x24
 8004502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8004506:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8004508:	6828      	ldr	r0, [r5, #0]
 800450a:	0409      	lsls	r1, r1, #16
 800450c:	f001 fa56 	bl	80059bc <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 8004510:	4604      	mov	r4, r0
 8004512:	2800      	cmp	r0, #0
 8004514:	d1f3      	bne.n	80044fe <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004516:	f04f 32ff 	mov.w	r2, #4294967295
  config.DataLength    = 8;
 800451a:	2308      	movs	r3, #8
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800451c:	2130      	movs	r1, #48	; 0x30
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800451e:	9006      	str	r0, [sp, #24]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004520:	9202      	str	r2, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004522:	2202      	movs	r2, #2
  config.DataLength    = 8;
 8004524:	9303      	str	r3, [sp, #12]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004526:	2301      	movs	r3, #1
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004528:	9104      	str	r1, [sp, #16]
  SDMMC_ConfigData(hsd->Instance, &config);
 800452a:	a902      	add	r1, sp, #8
 800452c:	6828      	ldr	r0, [r5, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800452e:	9205      	str	r2, [sp, #20]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004530:	9307      	str	r3, [sp, #28]
  SDMMC_ConfigData(hsd->Instance, &config);
 8004532:	f001 f99f 	bl	8005874 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004536:	6828      	ldr	r0, [r5, #0]
 8004538:	f001 fa76 	bl	8005a28 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 800453c:	4604      	mov	r4, r0
 800453e:	2800      	cmp	r0, #0
 8004540:	d1dd      	bne.n	80044fe <SD_FindSCR+0x22>
  uint32_t index = 0;
 8004542:	4681      	mov	r9, r0
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8004544:	f240 482a 	movw	r8, #1066	; 0x42a
 8004548:	e004      	b.n	8004554 <SD_FindSCR+0x78>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800454a:	f7fd f879 	bl	8001640 <HAL_GetTick>
 800454e:	1b80      	subs	r0, r0, r6
 8004550:	3001      	adds	r0, #1
 8004552:	d023      	beq.n	800459c <SD_FindSCR+0xc0>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8004554:	6828      	ldr	r0, [r5, #0]
 8004556:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004558:	ea13 0f08 	tst.w	r3, r8
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800455c:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800455e:	d10b      	bne.n	8004578 <SD_FindSCR+0x9c>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8004560:	029b      	lsls	r3, r3, #10
 8004562:	d5f2      	bpl.n	800454a <SD_FindSCR+0x6e>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8004564:	f001 f96e 	bl	8005844 <SDMMC_ReadFIFO>
 8004568:	ab08      	add	r3, sp, #32
 800456a:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800456e:	f109 0901 	add.w	r9, r9, #1
 8004572:	f843 0c20 	str.w	r0, [r3, #-32]
 8004576:	e7e8      	b.n	800454a <SD_FindSCR+0x6e>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004578:	0719      	lsls	r1, r3, #28
 800457a:	d412      	bmi.n	80045a2 <SD_FindSCR+0xc6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800457c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800457e:	079a      	lsls	r2, r3, #30
 8004580:	d412      	bmi.n	80045a8 <SD_FindSCR+0xcc>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004582:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004584:	069b      	lsls	r3, r3, #26
 8004586:	d412      	bmi.n	80045ae <SD_FindSCR+0xd2>
 8004588:	9a00      	ldr	r2, [sp, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800458a:	f240 51ff 	movw	r1, #1535	; 0x5ff
 800458e:	9b01      	ldr	r3, [sp, #4]
 8004590:	ba12      	rev	r2, r2
 8004592:	6381      	str	r1, [r0, #56]	; 0x38
 8004594:	ba1b      	rev	r3, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004596:	e9c7 3200 	strd	r3, r2, [r7]
  return HAL_SD_ERROR_NONE;
 800459a:	e7b0      	b.n	80044fe <SD_FindSCR+0x22>
      return HAL_SD_ERROR_TIMEOUT;
 800459c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80045a0:	e7ad      	b.n	80044fe <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80045a2:	2408      	movs	r4, #8
 80045a4:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80045a6:	e7aa      	b.n	80044fe <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80045a8:	2402      	movs	r4, #2
 80045aa:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80045ac:	e7a7      	b.n	80044fe <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80045ae:	2420      	movs	r4, #32
 80045b0:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 80045b2:	e7a4      	b.n	80044fe <SD_FindSCR+0x22>

080045b4 <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 80045b4:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 80045b6:	0f9a      	lsrs	r2, r3, #30
{
 80045b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 80045ba:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 80045bc:	f3c3 6783 	ubfx	r7, r3, #26, #4
  pCSD->Reserved1      = tmp & 0x03;
 80045c0:	f3c3 6501 	ubfx	r5, r3, #24, #2
  pCSD->TAAC = (uint8_t)tmp;
 80045c4:	f3c3 4407 	ubfx	r4, r3, #16, #8
  pCSD->NSAC = (uint8_t)tmp;
 80045c8:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80045cc:	b2db      	uxtb	r3, r3
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 80045ce:	704f      	strb	r7, [r1, #1]
  pCSD->Reserved2       = 0; /*!< Reserved */
 80045d0:	2600      	movs	r6, #0
  pCSD->Reserved1      = tmp & 0x03;
 80045d2:	708d      	strb	r5, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 80045d4:	70cc      	strb	r4, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 80045d6:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80045d8:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 80045da:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80045dc:	0e1d      	lsrs	r5, r3, #24
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 80045de:	f3c3 5403 	ubfx	r4, r3, #20, #4
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 80045e2:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 80045e6:	012d      	lsls	r5, r5, #4
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 80045e8:	ea4f 1cd2 	mov.w	ip, r2, lsr #7
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 80045ec:	80cd      	strh	r5, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 80045ee:	f3c3 4503 	ubfx	r5, r3, #16, #4
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 80045f2:	88cf      	ldrh	r7, [r1, #6]
 80045f4:	433c      	orrs	r4, r7
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 80045f6:	f3c2 1780 	ubfx	r7, r2, #6, #1
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 80045fa:	80cc      	strh	r4, [r1, #6]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 80045fc:	f3c2 1400 	ubfx	r4, r2, #4, #1
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8004600:	720d      	strb	r5, [r1, #8]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8004602:	f3c2 1540 	ubfx	r5, r2, #5, #1
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8004606:	f881 c009 	strb.w	ip, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 800460a:	728f      	strb	r7, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 800460c:	72cd      	strb	r5, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 800460e:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8004610:	734e      	strb	r6, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8004612:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004614:	2c00      	cmp	r4, #0
 8004616:	f040 8088 	bne.w	800472a <HAL_SD_GetCardCSD+0x176>
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 800461a:	0292      	lsls	r2, r2, #10
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 800461c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp) << 2;
 800461e:	009b      	lsls	r3, r3, #2
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8004620:	2501      	movs	r5, #1
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8004622:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8004626:	0be6      	lsrs	r6, r4, #15
    pCSD->DeviceSize |= (tmp) << 2;
 8004628:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 800462c:	f3c4 6c02 	ubfx	ip, r4, #24, #3
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8004630:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8004632:	f006 0606 	and.w	r6, r6, #6
    pCSD->DeviceSize |= (tmp) << 2;
 8004636:	690a      	ldr	r2, [r1, #16]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8004638:	f3c4 5742 	ubfx	r7, r4, #21, #3
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 800463c:	f3c4 6ec2 	ubfx	lr, r4, #27, #3
    pCSD->DeviceSize |= (tmp) << 2;
 8004640:	431a      	orrs	r2, r3
 8004642:	610a      	str	r2, [r1, #16]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8004644:	f3c4 4282 	ubfx	r2, r4, #18, #3
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8004648:	690b      	ldr	r3, [r1, #16]
 800464a:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800464e:	610b      	str	r3, [r1, #16]
 8004650:	f3c4 2307 	ubfx	r3, r4, #8, #8
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8004654:	f881 e014 	strb.w	lr, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8004658:	f881 c015 	strb.w	ip, [r1, #21]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 800465c:	f3c4 3cc0 	ubfx	ip, r4, #15, #1
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8004660:	758f      	strb	r7, [r1, #22]
    hsd->SdCard.LogBlockSize = 512;
 8004662:	f44f 7700 	mov.w	r7, #512	; 0x200
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8004666:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8004668:	760e      	strb	r6, [r1, #24]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 800466a:	7e0a      	ldrb	r2, [r1, #24]
 800466c:	ea42 020c 	orr.w	r2, r2, ip
 8004670:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8004672:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8004674:	7e0e      	ldrb	r6, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8004676:	442a      	add	r2, r5
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8004678:	3602      	adds	r6, #2
 800467a:	40b2      	lsls	r2, r6
 800467c:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 800467e:	7a0e      	ldrb	r6, [r1, #8]
    hsd->SdCard.LogBlockSize = 512;
 8004680:	6607      	str	r7, [r0, #96]	; 0x60
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8004682:	40b5      	lsls	r5, r6
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8004684:	0a6e      	lsrs	r6, r5, #9
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8004686:	6585      	str	r5, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8004688:	fb02 f206 	mul.w	r2, r2, r6
 800468c:	65c2      	str	r2, [r0, #92]	; 0x5c
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 800468e:	005d      	lsls	r5, r3, #1
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8004690:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8004694:	f3c4 17c0 	ubfx	r7, r4, #7, #1
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8004698:	f004 037f 	and.w	r3, r4, #127	; 0x7f
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 800469c:	f005 047e 	and.w	r4, r5, #126	; 0x7e
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 80046a0:	764a      	strb	r2, [r1, #25]
  pCSD->Reserved3           = 0;
 80046a2:	2500      	movs	r5, #0
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 80046a4:	768c      	strb	r4, [r1, #26]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 80046a6:	7e8a      	ldrb	r2, [r1, #26]
  return HAL_OK;
 80046a8:	462e      	mov	r6, r5
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 80046aa:	433a      	orrs	r2, r7
  pCSD->Reserved4 = 1;
 80046ac:	2701      	movs	r7, #1
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 80046ae:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 80046b0:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 80046b2:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 80046b4:	0fda      	lsrs	r2, r3, #31
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 80046b6:	f3c3 7041 	ubfx	r0, r3, #29, #2
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 80046ba:	0d9c      	lsrs	r4, r3, #22
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 80046bc:	f3c3 5c40 	ubfx	ip, r3, #21, #1
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 80046c0:	770a      	strb	r2, [r1, #28]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 80046c2:	f3c3 6282 	ubfx	r2, r3, #26, #3
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 80046c6:	f004 040c 	and.w	r4, r4, #12
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 80046ca:	7748      	strb	r0, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 80046cc:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 80046ce:	f3c3 5081 	ubfx	r0, r3, #22, #2
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 80046d2:	77cc      	strb	r4, [r1, #31]
  pCSD->ContentProtectAppli = (tmp & 0x01);
 80046d4:	f3c3 4400 	ubfx	r4, r3, #16, #1
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 80046d8:	7fca      	ldrb	r2, [r1, #31]
 80046da:	4302      	orrs	r2, r0
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 80046dc:	f3c3 30c0 	ubfx	r0, r3, #15, #1
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 80046e0:	77ca      	strb	r2, [r1, #31]
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 80046e2:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 80046e6:	f881 c020 	strb.w	ip, [r1, #32]
  pCSD->Reserved3           = 0;
 80046ea:	f881 5021 	strb.w	r5, [r1, #33]	; 0x21
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 80046ee:	f3c3 3540 	ubfx	r5, r3, #13, #1
  pCSD->ContentProtectAppli = (tmp & 0x01);
 80046f2:	f881 4022 	strb.w	r4, [r1, #34]	; 0x22
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 80046f6:	f3c3 3400 	ubfx	r4, r3, #12, #1
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 80046fa:	f881 0023 	strb.w	r0, [r1, #35]	; 0x23
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 80046fe:	f3c3 2081 	ubfx	r0, r3, #10, #2
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8004702:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->ECC              = (tmp & 0x03);
 8004706:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 800470a:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 800470e:	f881 5025 	strb.w	r5, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8004712:	f881 4026 	strb.w	r4, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8004716:	f881 0027 	strb.w	r0, [r1, #39]	; 0x27
}
 800471a:	4630      	mov	r0, r6
  pCSD->ECC              = (tmp & 0x03);
 800471c:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8004720:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8004724:	f881 702a 	strb.w	r7, [r1, #42]	; 0x2a
}
 8004728:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800472a:	2c01      	cmp	r4, #1
 800472c:	d00d      	beq.n	800474a <HAL_SD_GetCardCSD+0x196>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 800472e:	6803      	ldr	r3, [r0, #0]
 8004730:	f240 51ff 	movw	r1, #1535	; 0x5ff
    hsd->State = HAL_SD_STATE_READY;
 8004734:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8004736:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004738:	6b83      	ldr	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 800473a:	4616      	mov	r6, r2
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800473c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004740:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004742:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
}
 8004746:	4630      	mov	r0, r6
 8004748:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 800474a:	041a      	lsls	r2, r3, #16
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 800474c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 800474e:	f44f 7600 	mov.w	r6, #512	; 0x200
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8004752:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8004756:	0e23      	lsrs	r3, r4, #24
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8004758:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 800475a:	f3c4 4207 	ubfx	r2, r4, #16, #8
    pCSD->DeviceSize |= (tmp << 8);
 800475e:	690d      	ldr	r5, [r1, #16]
 8004760:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
 8004764:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8004768:	610d      	str	r5, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 800476a:	690d      	ldr	r5, [r1, #16]
 800476c:	432a      	orrs	r2, r5
 800476e:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8004770:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8004772:	6586      	str	r6, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8004774:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8004776:	6606      	str	r6, [r0, #96]	; 0x60
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8004778:	0292      	lsls	r2, r2, #10
 800477a:	6542      	str	r2, [r0, #84]	; 0x54
 800477c:	65c2      	str	r2, [r0, #92]	; 0x5c
 800477e:	e786      	b.n	800468e <HAL_SD_GetCardCSD+0xda>

08004780 <HAL_SD_InitCard>:
{
 8004780:	b570      	push	{r4, r5, r6, lr}
 8004782:	b098      	sub	sp, #96	; 0x60
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004784:	2500      	movs	r5, #0
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8004786:	2176      	movs	r1, #118	; 0x76
{
 8004788:	4604      	mov	r4, r0
  SDMMC_Init(hsd->Instance, Init);
 800478a:	aa0a      	add	r2, sp, #40	; 0x28
 800478c:	6806      	ldr	r6, [r0, #0]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800478e:	950a      	str	r5, [sp, #40]	; 0x28
  SDMMC_Init(hsd->Instance, Init);
 8004790:	ab07      	add	r3, sp, #28
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004792:	9509      	str	r5, [sp, #36]	; 0x24
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8004794:	e9cd 510b 	strd	r5, r1, [sp, #44]	; 0x2c
  SDMMC_Init(hsd->Instance, Init);
 8004798:	ca07      	ldmia	r2, {r0, r1, r2}
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800479a:	e9cd 5507 	strd	r5, r5, [sp, #28]
  SDMMC_Init(hsd->Instance, Init);
 800479e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80047a2:	4630      	mov	r0, r6
 80047a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047a6:	f001 f831 	bl	800580c <SDMMC_Init>
  __HAL_SD_DISABLE(hsd); 
 80047aa:	6823      	ldr	r3, [r4, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 80047ae:	4618      	mov	r0, r3
  __HAL_SD_DISABLE(hsd); 
 80047b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047b4:	605a      	str	r2, [r3, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 80047b6:	f001 f849 	bl	800584c <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 80047ba:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(2);
 80047bc:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 80047be:	6853      	ldr	r3, [r2, #4]
 80047c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c4:	6053      	str	r3, [r2, #4]
  HAL_Delay(2);
 80047c6:	f7fc ff41 	bl	800164c <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80047ca:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0;
 80047cc:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80047ce:	f001 f889 	bl	80058e4 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 80047d2:	4605      	mov	r5, r0
 80047d4:	b138      	cbz	r0, 80047e6 <HAL_SD_InitCard+0x66>
    hsd->State = HAL_SD_STATE_READY;
 80047d6:	2001      	movs	r0, #1
 80047d8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80047dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80047de:	431d      	orrs	r5, r3
 80047e0:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80047e2:	b018      	add	sp, #96	; 0x60
 80047e4:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80047e6:	6820      	ldr	r0, [r4, #0]
 80047e8:	f001 f8a8 	bl	800593c <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 80047ec:	2800      	cmp	r0, #0
 80047ee:	d04b      	beq.n	8004888 <HAL_SD_InitCard+0x108>
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80047f0:	f64f 76ff 	movw	r6, #65535	; 0xffff
    hsd->SdCard.CardVersion = CARD_V1_X;
 80047f4:	64a5      	str	r5, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80047f6:	9b06      	ldr	r3, [sp, #24]
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80047f8:	2100      	movs	r1, #0
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80047fa:	1c5a      	adds	r2, r3, #1
 80047fc:	42b3      	cmp	r3, r6
 80047fe:	9206      	str	r2, [sp, #24]
 8004800:	f000 80b5 	beq.w	800496e <HAL_SD_InitCard+0x1ee>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004804:	6820      	ldr	r0, [r4, #0]
 8004806:	f001 f8d9 	bl	80059bc <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 800480a:	2800      	cmp	r0, #0
 800480c:	f040 80b2 	bne.w	8004974 <HAL_SD_InitCard+0x1f4>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8004810:	4601      	mov	r1, r0
 8004812:	6820      	ldr	r0, [r4, #0]
 8004814:	f001 f8e4 	bl	80059e0 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8004818:	2800      	cmp	r0, #0
 800481a:	f040 80ab 	bne.w	8004974 <HAL_SD_InitCard+0x1f4>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800481e:	4601      	mov	r1, r0
 8004820:	6820      	ldr	r0, [r4, #0]
 8004822:	f001 f81d 	bl	8005860 <SDMMC_GetResponse>
    while(validvoltage == 0)
 8004826:	2800      	cmp	r0, #0
 8004828:	dae5      	bge.n	80047f6 <HAL_SD_InitCard+0x76>
    hsd->SdCard.CardType = CARD_SDSC;
 800482a:	2300      	movs	r3, #0
 800482c:	6463      	str	r3, [r4, #68]	; 0x44
  uint16_t sd_rca = 1;
 800482e:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8004830:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1;
 8004832:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8004836:	f001 f80f 	bl	8005858 <SDMMC_GetPowerState>
 800483a:	2800      	cmp	r0, #0
 800483c:	f000 8094 	beq.w	8004968 <HAL_SD_InitCard+0x1e8>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004840:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004842:	6823      	ldr	r3, [r4, #0]
 8004844:	2a03      	cmp	r2, #3
 8004846:	d142      	bne.n	80048ce <HAL_SD_InitCard+0x14e>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8004848:	4618      	mov	r0, r3
 800484a:	2104      	movs	r1, #4
 800484c:	f001 f808 	bl	8005860 <SDMMC_GetResponse>
  HAL_SD_GetCardCSD(hsd, &CSD);
 8004850:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8004852:	0d03      	lsrs	r3, r0, #20
  HAL_SD_GetCardCSD(hsd, &CSD);
 8004854:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8004856:	64e3      	str	r3, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 8004858:	f7ff feac 	bl	80045b4 <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 800485c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800485e:	2300      	movs	r3, #0
 8004860:	6820      	ldr	r0, [r4, #0]
 8004862:	0412      	lsls	r2, r2, #16
 8004864:	f001 f82c 	bl	80058c0 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004868:	4605      	mov	r5, r0
 800486a:	2800      	cmp	r0, #0
 800486c:	d1b3      	bne.n	80047d6 <HAL_SD_InitCard+0x56>
  SDMMC_Init(hsd->Instance, hsd->Init);
 800486e:	1d23      	adds	r3, r4, #4
 8004870:	f854 6b10 	ldr.w	r6, [r4], #16
 8004874:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004878:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800487c:	4630      	mov	r0, r6
 800487e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004880:	f000 ffc4 	bl	800580c <SDMMC_Init>
  return HAL_OK;
 8004884:	4628      	mov	r0, r5
 8004886:	e7ac      	b.n	80047e2 <HAL_SD_InitCard+0x62>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004888:	2301      	movs	r3, #1
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800488a:	f64f 76ff 	movw	r6, #65535	; 0xffff
    hsd->SdCard.CardVersion = CARD_V2_X;
 800488e:	64a3      	str	r3, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004890:	9b06      	ldr	r3, [sp, #24]
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004892:	2100      	movs	r1, #0
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	42b3      	cmp	r3, r6
 8004898:	9206      	str	r2, [sp, #24]
 800489a:	d068      	beq.n	800496e <HAL_SD_InitCard+0x1ee>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800489c:	6820      	ldr	r0, [r4, #0]
 800489e:	f001 f88d 	bl	80059bc <SDMMC_CmdAppCommand>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 80048a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      if(errorstate != HAL_SD_ERROR_NONE)
 80048a6:	4605      	mov	r5, r0
 80048a8:	2800      	cmp	r0, #0
 80048aa:	d194      	bne.n	80047d6 <HAL_SD_InitCard+0x56>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 80048ac:	6820      	ldr	r0, [r4, #0]
 80048ae:	f001 f897 	bl	80059e0 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80048b2:	4605      	mov	r5, r0
 80048b4:	2800      	cmp	r0, #0
 80048b6:	d18e      	bne.n	80047d6 <HAL_SD_InitCard+0x56>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80048b8:	4601      	mov	r1, r0
 80048ba:	6820      	ldr	r0, [r4, #0]
 80048bc:	f000 ffd0 	bl	8005860 <SDMMC_GetResponse>
    while(validvoltage == 0)
 80048c0:	2800      	cmp	r0, #0
 80048c2:	dae5      	bge.n	8004890 <HAL_SD_InitCard+0x110>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80048c4:	0043      	lsls	r3, r0, #1
 80048c6:	d5b0      	bpl.n	800482a <HAL_SD_InitCard+0xaa>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80048c8:	2301      	movs	r3, #1
 80048ca:	6463      	str	r3, [r4, #68]	; 0x44
 80048cc:	e7af      	b.n	800482e <HAL_SD_InitCard+0xae>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80048ce:	4618      	mov	r0, r3
 80048d0:	f001 f8bc 	bl	8005a4c <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 80048d4:	4605      	mov	r5, r0
 80048d6:	2800      	cmp	r0, #0
 80048d8:	f47f af7d 	bne.w	80047d6 <HAL_SD_InitCard+0x56>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80048dc:	4601      	mov	r1, r0
 80048de:	6820      	ldr	r0, [r4, #0]
 80048e0:	f000 ffbe 	bl	8005860 <SDMMC_GetResponse>
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80048e4:	2104      	movs	r1, #4
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80048e6:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80048e8:	6820      	ldr	r0, [r4, #0]
 80048ea:	f000 ffb9 	bl	8005860 <SDMMC_GetResponse>
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80048ee:	2108      	movs	r1, #8
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80048f0:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80048f2:	6820      	ldr	r0, [r4, #0]
 80048f4:	f000 ffb4 	bl	8005860 <SDMMC_GetResponse>
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80048f8:	210c      	movs	r1, #12
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80048fa:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80048fc:	6820      	ldr	r0, [r4, #0]
 80048fe:	f000 ffaf 	bl	8005860 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004902:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004904:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004908:	2b03      	cmp	r3, #3
 800490a:	d036      	beq.n	800497a <HAL_SD_InitCard+0x1fa>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800490c:	f10d 0116 	add.w	r1, sp, #22
 8004910:	6820      	ldr	r0, [r4, #0]
 8004912:	f001 f8bb 	bl	8005a8c <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004916:	4605      	mov	r5, r0
 8004918:	2800      	cmp	r0, #0
 800491a:	f47f af5c 	bne.w	80047d6 <HAL_SD_InitCard+0x56>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800491e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004920:	6823      	ldr	r3, [r4, #0]
 8004922:	2a03      	cmp	r2, #3
 8004924:	d090      	beq.n	8004848 <HAL_SD_InitCard+0xc8>
    hsd->SdCard.RelCardAdd = sd_rca;
 8004926:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800492a:	4618      	mov	r0, r3
    hsd->SdCard.RelCardAdd = sd_rca;
 800492c:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800492e:	0409      	lsls	r1, r1, #16
 8004930:	f001 f89c 	bl	8005a6c <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004934:	4605      	mov	r5, r0
 8004936:	2800      	cmp	r0, #0
 8004938:	f47f af4d 	bne.w	80047d6 <HAL_SD_InitCard+0x56>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800493c:	4601      	mov	r1, r0
 800493e:	6820      	ldr	r0, [r4, #0]
 8004940:	f000 ff8e 	bl	8005860 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004944:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004946:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004948:	6820      	ldr	r0, [r4, #0]
 800494a:	f000 ff89 	bl	8005860 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800494e:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004950:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004952:	6820      	ldr	r0, [r4, #0]
 8004954:	f000 ff84 	bl	8005860 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004958:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800495a:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800495c:	6820      	ldr	r0, [r4, #0]
 800495e:	f000 ff7f 	bl	8005860 <SDMMC_GetResponse>
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	6720      	str	r0, [r4, #112]	; 0x70
 8004966:	e76f      	b.n	8004848 <HAL_SD_InitCard+0xc8>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004968:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 800496c:	e733      	b.n	80047d6 <HAL_SD_InitCard+0x56>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800496e:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8004972:	e730      	b.n	80047d6 <HAL_SD_InitCard+0x56>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004974:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8004978:	e72d      	b.n	80047d6 <HAL_SD_InitCard+0x56>
 800497a:	6823      	ldr	r3, [r4, #0]
 800497c:	e764      	b.n	8004848 <HAL_SD_InitCard+0xc8>
 800497e:	bf00      	nop

08004980 <HAL_SD_Init>:
  if(hsd == NULL)
 8004980:	b1c0      	cbz	r0, 80049b4 <HAL_SD_Init+0x34>
  if(hsd->State == HAL_SD_STATE_RESET)
 8004982:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 8004986:	b510      	push	{r4, lr}
  if(hsd->State == HAL_SD_STATE_RESET)
 8004988:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800498c:	4604      	mov	r4, r0
 800498e:	b16b      	cbz	r3, 80049ac <HAL_SD_Init+0x2c>
  hsd->State = HAL_SD_STATE_BUSY;
 8004990:	2303      	movs	r3, #3
  HAL_SD_InitCard(hsd);
 8004992:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 8004994:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 8004998:	f7ff fef2 	bl	8004780 <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800499c:	2300      	movs	r3, #0
  hsd->State = HAL_SD_STATE_READY;
 800499e:	2201      	movs	r2, #1
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80049a0:	63a3      	str	r3, [r4, #56]	; 0x38
  return HAL_OK;
 80049a2:	4618      	mov	r0, r3
  hsd->Context = SD_CONTEXT_NONE;
 80049a4:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80049a6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 80049aa:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 80049ac:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 80049ae:	f002 f9a7 	bl	8006d00 <HAL_SD_MspInit>
 80049b2:	e7ed      	b.n	8004990 <HAL_SD_Init+0x10>
    return HAL_ERROR;
 80049b4:	2001      	movs	r0, #1
}
 80049b6:	4770      	bx	lr

080049b8 <HAL_SD_ConfigWideBusOperation>:
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80049b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
  hsd->State = HAL_SD_STATE_BUSY;
 80049ba:	2303      	movs	r3, #3
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80049bc:	2a03      	cmp	r2, #3
{
 80049be:	b5f0      	push	{r4, r5, r6, r7, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 80049c0:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
{
 80049c4:	b08b      	sub	sp, #44	; 0x2c
 80049c6:	4604      	mov	r4, r0
 80049c8:	460e      	mov	r6, r1
 80049ca:	6803      	ldr	r3, [r0, #0]
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80049cc:	d029      	beq.n	8004a22 <HAL_SD_ConfigWideBusOperation+0x6a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80049ce:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80049d2:	d026      	beq.n	8004a22 <HAL_SD_ConfigWideBusOperation+0x6a>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80049d4:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80049d8:	d052      	beq.n	8004a80 <HAL_SD_ConfigWideBusOperation+0xc8>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80049da:	2900      	cmp	r1, #0
 80049dc:	d031      	beq.n	8004a42 <HAL_SD_ConfigWideBusOperation+0x8a>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80049de:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80049e0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80049e4:	6382      	str	r2, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80049e6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80049e8:	bb15      	cbnz	r5, 8004a30 <HAL_SD_ConfigWideBusOperation+0x78>
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80049ea:	69a2      	ldr	r2, [r4, #24]
    SDMMC_Init(hsd->Instance, Init);
 80049ec:	af04      	add	r7, sp, #16
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80049ee:	6961      	ldr	r1, [r4, #20]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80049f0:	9209      	str	r2, [sp, #36]	; 0x24
    SDMMC_Init(hsd->Instance, Init);
 80049f2:	aa0a      	add	r2, sp, #40	; 0x28
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80049f4:	e9cd 6107 	strd	r6, r1, [sp, #28]
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80049f8:	6866      	ldr	r6, [r4, #4]
    SDMMC_Init(hsd->Instance, Init);
 80049fa:	e912 0007 	ldmdb	r2, {r0, r1, r2}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80049fe:	9604      	str	r6, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004a00:	68a6      	ldr	r6, [r4, #8]
    SDMMC_Init(hsd->Instance, Init);
 8004a02:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004a06:	68e2      	ldr	r2, [r4, #12]
    SDMMC_Init(hsd->Instance, Init);
 8004a08:	4618      	mov	r0, r3
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004a0a:	e9cd 6205 	strd	r6, r2, [sp, #20]
    SDMMC_Init(hsd->Instance, Init);
 8004a0e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8004a12:	f000 fefb 	bl	800580c <SDMMC_Init>
  return HAL_OK;
 8004a16:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8004a1e:	b00b      	add	sp, #44	; 0x2c
 8004a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a22:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004a24:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004a28:	63a2      	str	r2, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004a2a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8004a2c:	2d00      	cmp	r5, #0
 8004a2e:	d0dc      	beq.n	80049ea <HAL_SD_ConfigWideBusOperation+0x32>
    hsd->State = HAL_SD_STATE_READY;
 8004a30:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004a32:	f240 51ff 	movw	r1, #1535	; 0x5ff
    return HAL_ERROR;
 8004a36:	4610      	mov	r0, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004a38:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004a3a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 8004a3e:	b00b      	add	sp, #44	; 0x2c
 8004a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004a42:	4618      	mov	r0, r3
  uint32_t scr[2] = {0, 0};
 8004a44:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004a48:	f000 ff0a 	bl	8005860 <SDMMC_GetResponse>
 8004a4c:	0181      	lsls	r1, r0, #6
 8004a4e:	d420      	bmi.n	8004a92 <HAL_SD_ConfigWideBusOperation+0xda>
  errorstate = SD_FindSCR(hsd, scr);
 8004a50:	a904      	add	r1, sp, #16
 8004a52:	4620      	mov	r0, r4
 8004a54:	f7ff fd42 	bl	80044dc <SD_FindSCR>
  if(errorstate != HAL_OK)
 8004a58:	b968      	cbnz	r0, 8004a76 <HAL_SD_ConfigWideBusOperation+0xbe>
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004a5a:	9a05      	ldr	r2, [sp, #20]
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	03d2      	lsls	r2, r2, #15
 8004a60:	d531      	bpl.n	8004ac6 <HAL_SD_ConfigWideBusOperation+0x10e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8004a62:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004a64:	4618      	mov	r0, r3
 8004a66:	0409      	lsls	r1, r1, #16
 8004a68:	f000 ffa8 	bl	80059bc <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8004a6c:	b918      	cbnz	r0, 8004a76 <HAL_SD_ConfigWideBusOperation+0xbe>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 8004a6e:	4601      	mov	r1, r0
 8004a70:	6820      	ldr	r0, [r4, #0]
 8004a72:	f000 ffc7 	bl	8005a04 <SDMMC_CmdBusWidth>
 8004a76:	6823      	ldr	r3, [r4, #0]
      hsd->ErrorCode |= errorstate;
 8004a78:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004a7a:	4310      	orrs	r0, r2
 8004a7c:	63a0      	str	r0, [r4, #56]	; 0x38
 8004a7e:	e7d4      	b.n	8004a2a <HAL_SD_ConfigWideBusOperation+0x72>
  uint32_t scr[2] = {0, 0};
 8004a80:	2200      	movs	r2, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004a82:	4618      	mov	r0, r3
 8004a84:	4611      	mov	r1, r2
  uint32_t scr[2] = {0, 0};
 8004a86:	e9cd 2204 	strd	r2, r2, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004a8a:	f000 fee9 	bl	8005860 <SDMMC_GetResponse>
 8004a8e:	0185      	lsls	r5, r0, #6
 8004a90:	d503      	bpl.n	8004a9a <HAL_SD_ConfigWideBusOperation+0xe2>
 8004a92:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004a94:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004a98:	e7ee      	b.n	8004a78 <HAL_SD_ConfigWideBusOperation+0xc0>
  errorstate = SD_FindSCR(hsd, scr);
 8004a9a:	a904      	add	r1, sp, #16
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	f7ff fd1d 	bl	80044dc <SD_FindSCR>
  if(errorstate != HAL_OK)
 8004aa2:	2800      	cmp	r0, #0
 8004aa4:	d1e7      	bne.n	8004a76 <HAL_SD_ConfigWideBusOperation+0xbe>
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004aa6:	9a05      	ldr	r2, [sp, #20]
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	0350      	lsls	r0, r2, #13
 8004aac:	d50b      	bpl.n	8004ac6 <HAL_SD_ConfigWideBusOperation+0x10e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8004aae:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	0409      	lsls	r1, r1, #16
 8004ab4:	f000 ff82 	bl	80059bc <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8004ab8:	2800      	cmp	r0, #0
 8004aba:	d1dc      	bne.n	8004a76 <HAL_SD_ConfigWideBusOperation+0xbe>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8004abc:	2102      	movs	r1, #2
 8004abe:	6820      	ldr	r0, [r4, #0]
 8004ac0:	f000 ffa0 	bl	8005a04 <SDMMC_CmdBusWidth>
 8004ac4:	e7d7      	b.n	8004a76 <HAL_SD_ConfigWideBusOperation+0xbe>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004ac6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004aca:	e7d5      	b.n	8004a78 <HAL_SD_ConfigWideBusOperation+0xc0>

08004acc <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004acc:	b1e8      	cbz	r0, 8004b0a <HAL_SDRAM_Init+0x3e>
{   
 8004ace:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004ad0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004ad4:	4604      	mov	r4, r0
 8004ad6:	460d      	mov	r5, r1
 8004ad8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004adc:	b183      	cbz	r3, 8004b00 <HAL_SDRAM_Init+0x34>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004ade:	2302      	movs	r3, #2
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004ae0:	1d21      	adds	r1, r4, #4
 8004ae2:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004ae4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004ae8:	f000 fcde 	bl	80054a8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004aec:	4629      	mov	r1, r5
 8004aee:	e9d4 0200 	ldrd	r0, r2, [r4]
 8004af2:	f000 fd17 	bl	8005524 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004af6:	2301      	movs	r3, #1
  
  return HAL_OK;
 8004af8:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004afa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8004afe:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8004b00:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8004b04:	f002 f9e2 	bl	8006ecc <HAL_SDRAM_MspInit>
 8004b08:	e7e9      	b.n	8004ade <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 8004b0a:	2001      	movs	r0, #1
}
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop

08004b10 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004b10:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004b12:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d010      	beq.n	8004b3e <HAL_SDRAM_SendCommand+0x2e>
 8004b1c:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004b1e:	2302      	movs	r3, #2
 8004b20:	460d      	mov	r5, r1
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004b22:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004b24:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004b28:	f000 fd4e 	bl	80055c8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004b2c:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 8004b2e:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004b30:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004b32:	bf0c      	ite	eq
 8004b34:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004b36:	2301      	movne	r3, #1
 8004b38:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8004b3c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8004b3e:	4618      	mov	r0, r3
}
 8004b40:	bd38      	pop	{r3, r4, r5, pc}
 8004b42:	bf00      	nop

08004b44 <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004b44:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d00c      	beq.n	8004b68 <HAL_SDRAM_ProgramRefreshRate+0x24>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004b4e:	2302      	movs	r3, #2
{
 8004b50:	b510      	push	{r4, lr}
 8004b52:	4604      	mov	r4, r0
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004b54:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004b56:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004b5a:	f000 fd4b 	bl	80055f4 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004b5e:	2301      	movs	r3, #1
  
  return HAL_OK;   
 8004b60:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004b62:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8004b66:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8004b68:	4618      	mov	r0, r3
}
 8004b6a:	4770      	bx	lr

08004b6c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b6c:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b6e:	4a09      	ldr	r2, [pc, #36]	; (8004b94 <HAL_TIM_Base_Start_IT+0x28>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b70:	68d9      	ldr	r1, [r3, #12]
 8004b72:	f041 0101 	orr.w	r1, r1, #1
 8004b76:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b78:	6899      	ldr	r1, [r3, #8]
 8004b7a:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b7c:	2a06      	cmp	r2, #6
 8004b7e:	d006      	beq.n	8004b8e <HAL_TIM_Base_Start_IT+0x22>
 8004b80:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004b84:	d003      	beq.n	8004b8e <HAL_TIM_Base_Start_IT+0x22>
  {
    __HAL_TIM_ENABLE(htim);
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	f042 0201 	orr.w	r2, r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8004b8e:	2000      	movs	r0, #0
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	00010007 	.word	0x00010007

08004b98 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b98:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d05b      	beq.n	8004c58 <HAL_TIM_ConfigClockSource+0xc0>
 8004ba0:	4602      	mov	r2, r0

  htim->State = HAL_TIM_STATE_BUSY;
 8004ba2:	2002      	movs	r0, #2

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ba4:	6813      	ldr	r3, [r2, #0]
{
 8004ba6:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba8:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004bac:	2501      	movs	r5, #1
  tmpsmcr = htim->Instance->SMCR;
 8004bae:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bb0:	4c4c      	ldr	r4, [pc, #304]	; (8004ce4 <HAL_TIM_ConfigClockSource+0x14c>)
  __HAL_LOCK(htim);
 8004bb2:	f882 503c 	strb.w	r5, [r2, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bb6:	4004      	ands	r4, r0
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8004bb8:	6808      	ldr	r0, [r1, #0]
 8004bba:	2840      	cmp	r0, #64	; 0x40
  htim->Instance->SMCR = tmpsmcr;
 8004bbc:	609c      	str	r4, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8004bbe:	d076      	beq.n	8004cae <HAL_TIM_ConfigClockSource+0x116>
 8004bc0:	d94c      	bls.n	8004c5c <HAL_TIM_ConfigClockSource+0xc4>
 8004bc2:	2860      	cmp	r0, #96	; 0x60
 8004bc4:	d02f      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0x8e>
 8004bc6:	d958      	bls.n	8004c7a <HAL_TIM_ConfigClockSource+0xe2>
 8004bc8:	2870      	cmp	r0, #112	; 0x70
 8004bca:	d01b      	beq.n	8004c04 <HAL_TIM_ConfigClockSource+0x6c>
 8004bcc:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8004bd0:	d10f      	bne.n	8004bf2 <HAL_TIM_ConfigClockSource+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bd2:	68cc      	ldr	r4, [r1, #12]
 8004bd4:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
 8004bd8:	ea40 0105 	orr.w	r1, r0, r5
  tmpsmcr = TIMx->SMCR;
 8004bdc:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bde:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004be2:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004be6:	4301      	orrs	r1, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004be8:	6099      	str	r1, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bea:	6899      	ldr	r1, [r3, #8]
 8004bec:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004bf0:	6099      	str	r1, [r3, #8]
  __HAL_UNLOCK(htim);
 8004bf2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004bf4:	2101      	movs	r1, #1
  return HAL_OK;
 8004bf6:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8004bf8:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004bfc:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8004c00:	bc70      	pop	{r4, r5, r6}
 8004c02:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c04:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
 8004c08:	68cc      	ldr	r4, [r1, #12]
 8004c0a:	ea40 0105 	orr.w	r1, r0, r5
  tmpsmcr = TIMx->SMCR;
 8004c0e:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c10:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c14:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c18:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 8004c1a:	6099      	str	r1, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004c1c:	6899      	ldr	r1, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c1e:	f041 0177 	orr.w	r1, r1, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004c22:	6099      	str	r1, [r3, #8]
      break;
 8004c24:	e7e5      	b.n	8004bf2 <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c26:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c28:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c2a:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c2e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c30:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c32:	6998      	ldr	r0, [r3, #24]
  tmpccer = TIMx->CCER;
 8004c34:	6a19      	ldr	r1, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c36:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c3a:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c3e:	ea40 3006 	orr.w	r0, r0, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c42:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8004c46:	6198      	str	r0, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c48:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8004c4a:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c4c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c50:	f041 0167 	orr.w	r1, r1, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004c54:	6099      	str	r1, [r3, #8]
 8004c56:	e7cc      	b.n	8004bf2 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8004c58:	2002      	movs	r0, #2
}
 8004c5a:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8004c5c:	2810      	cmp	r0, #16
 8004c5e:	d004      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0xd2>
 8004c60:	d93d      	bls.n	8004cde <HAL_TIM_ConfigClockSource+0x146>
 8004c62:	2820      	cmp	r0, #32
 8004c64:	d001      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0xd2>
 8004c66:	2830      	cmp	r0, #48	; 0x30
 8004c68:	d1c3      	bne.n	8004bf2 <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 8004c6a:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c6c:	f040 0007 	orr.w	r0, r0, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c70:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c74:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 8004c76:	6098      	str	r0, [r3, #8]
 8004c78:	e7bb      	b.n	8004bf2 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004c7a:	2850      	cmp	r0, #80	; 0x50
 8004c7c:	d1b9      	bne.n	8004bf2 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8004c7e:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c80:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c82:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c84:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c88:	f024 0401 	bic.w	r4, r4, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c8c:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 8004c8e:	4328      	orrs	r0, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c90:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c92:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c94:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c98:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004c9c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c9e:	6218      	str	r0, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8004ca0:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ca2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ca6:	f041 0157 	orr.w	r1, r1, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8004caa:	6099      	str	r1, [r3, #8]
 8004cac:	e7a1      	b.n	8004bf2 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8004cae:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cb0:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cb2:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cb4:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cb8:	f024 0401 	bic.w	r4, r4, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cbc:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 8004cbe:	4328      	orrs	r0, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cc0:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cc2:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cc4:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cc8:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004ccc:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cce:	6218      	str	r0, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8004cd0:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cd2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cd6:	f041 0147 	orr.w	r1, r1, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8004cda:	6099      	str	r1, [r3, #8]
 8004cdc:	e789      	b.n	8004bf2 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004cde:	2800      	cmp	r0, #0
 8004ce0:	d0c3      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0xd2>
 8004ce2:	e786      	b.n	8004bf2 <HAL_TIM_ConfigClockSource+0x5a>
 8004ce4:	fffe0088 	.word	0xfffe0088

08004ce8 <HAL_TIM_OC_DelayElapsedCallback>:
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop

08004cec <HAL_TIM_IC_CaptureCallback>:
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop

08004cf0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop

08004cf4 <HAL_TIM_TriggerCallback>:
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop

08004cf8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cf8:	6803      	ldr	r3, [r0, #0]
 8004cfa:	691a      	ldr	r2, [r3, #16]
 8004cfc:	0791      	lsls	r1, r2, #30
{
 8004cfe:	b510      	push	{r4, lr}
 8004d00:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d02:	d502      	bpl.n	8004d0a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	0792      	lsls	r2, r2, #30
 8004d08:	d468      	bmi.n	8004ddc <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d0a:	691a      	ldr	r2, [r3, #16]
 8004d0c:	0752      	lsls	r2, r2, #29
 8004d0e:	d502      	bpl.n	8004d16 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	0750      	lsls	r0, r2, #29
 8004d14:	d44f      	bmi.n	8004db6 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d16:	691a      	ldr	r2, [r3, #16]
 8004d18:	0711      	lsls	r1, r2, #28
 8004d1a:	d502      	bpl.n	8004d22 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	0712      	lsls	r2, r2, #28
 8004d20:	d437      	bmi.n	8004d92 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d22:	691a      	ldr	r2, [r3, #16]
 8004d24:	06d0      	lsls	r0, r2, #27
 8004d26:	d502      	bpl.n	8004d2e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d28:	68da      	ldr	r2, [r3, #12]
 8004d2a:	06d1      	lsls	r1, r2, #27
 8004d2c:	d41e      	bmi.n	8004d6c <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d2e:	691a      	ldr	r2, [r3, #16]
 8004d30:	07d2      	lsls	r2, r2, #31
 8004d32:	d502      	bpl.n	8004d3a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	07d0      	lsls	r0, r2, #31
 8004d38:	d469      	bmi.n	8004e0e <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	0611      	lsls	r1, r2, #24
 8004d3e:	d502      	bpl.n	8004d46 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d40:	68da      	ldr	r2, [r3, #12]
 8004d42:	0612      	lsls	r2, r2, #24
 8004d44:	d46b      	bmi.n	8004e1e <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	05d0      	lsls	r0, r2, #23
 8004d4a:	d502      	bpl.n	8004d52 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d4c:	68da      	ldr	r2, [r3, #12]
 8004d4e:	0611      	lsls	r1, r2, #24
 8004d50:	d46d      	bmi.n	8004e2e <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d52:	691a      	ldr	r2, [r3, #16]
 8004d54:	0652      	lsls	r2, r2, #25
 8004d56:	d502      	bpl.n	8004d5e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d58:	68da      	ldr	r2, [r3, #12]
 8004d5a:	0650      	lsls	r0, r2, #25
 8004d5c:	d46f      	bmi.n	8004e3e <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d5e:	691a      	ldr	r2, [r3, #16]
 8004d60:	0691      	lsls	r1, r2, #26
 8004d62:	d502      	bpl.n	8004d6a <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d64:	68da      	ldr	r2, [r3, #12]
 8004d66:	0692      	lsls	r2, r2, #26
 8004d68:	d449      	bmi.n	8004dfe <HAL_TIM_IRQHandler+0x106>
}
 8004d6a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d6c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d70:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8004d72:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d74:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d76:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d78:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d7a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004d7e:	d16f      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d80:	f7ff ffb2 	bl	8004ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d84:	4620      	mov	r0, r4
 8004d86:	f7ff ffb3 	bl	8004cf0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	6823      	ldr	r3, [r4, #0]
 8004d8e:	7722      	strb	r2, [r4, #28]
 8004d90:	e7cd      	b.n	8004d2e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d92:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d96:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8004d98:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d9a:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d9c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d9e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004da0:	079b      	lsls	r3, r3, #30
 8004da2:	d15a      	bne.n	8004e5a <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da4:	f7ff ffa0 	bl	8004ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004da8:	4620      	mov	r0, r4
 8004daa:	f7ff ffa1 	bl	8004cf0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dae:	2200      	movs	r2, #0
 8004db0:	6823      	ldr	r3, [r4, #0]
 8004db2:	7722      	strb	r2, [r4, #28]
 8004db4:	e7b5      	b.n	8004d22 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004db6:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dba:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8004dbc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dbe:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dc0:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dc2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dc4:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004dc8:	d144      	bne.n	8004e54 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dca:	f7ff ff8d 	bl	8004ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dce:	4620      	mov	r0, r4
 8004dd0:	f7ff ff8e 	bl	8004cf0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	6823      	ldr	r3, [r4, #0]
 8004dd8:	7722      	strb	r2, [r4, #28]
 8004dda:	e79c      	b.n	8004d16 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ddc:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004de0:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004de2:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004de4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004de6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004de8:	0799      	lsls	r1, r3, #30
 8004dea:	d130      	bne.n	8004e4e <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dec:	f7ff ff7c 	bl	8004ce8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df0:	4620      	mov	r0, r4
 8004df2:	f7ff ff7d 	bl	8004cf0 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df6:	2200      	movs	r2, #0
 8004df8:	6823      	ldr	r3, [r4, #0]
 8004dfa:	7722      	strb	r2, [r4, #28]
 8004dfc:	e785      	b.n	8004d0a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dfe:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004e02:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e04:	611a      	str	r2, [r3, #16]
}
 8004e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8004e0a:	f000 b8e9 	b.w	8004fe0 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e0e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e12:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e14:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e16:	f000 ffe1 	bl	8005ddc <HAL_TIM_PeriodElapsedCallback>
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	e78d      	b.n	8004d3a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e1e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8004e22:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e24:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004e26:	f000 f8dd 	bl	8004fe4 <HAL_TIMEx_BreakCallback>
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	e78b      	b.n	8004d46 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8004e32:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e34:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004e36:	f000 f8d7 	bl	8004fe8 <HAL_TIMEx_Break2Callback>
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	e789      	b.n	8004d52 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8004e42:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e44:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004e46:	f7ff ff55 	bl	8004cf4 <HAL_TIM_TriggerCallback>
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	e787      	b.n	8004d5e <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8004e4e:	f7ff ff4d 	bl	8004cec <HAL_TIM_IC_CaptureCallback>
 8004e52:	e7d0      	b.n	8004df6 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8004e54:	f7ff ff4a 	bl	8004cec <HAL_TIM_IC_CaptureCallback>
 8004e58:	e7bc      	b.n	8004dd4 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8004e5a:	f7ff ff47 	bl	8004cec <HAL_TIM_IC_CaptureCallback>
 8004e5e:	e7a6      	b.n	8004dae <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8004e60:	f7ff ff44 	bl	8004cec <HAL_TIM_IC_CaptureCallback>
 8004e64:	e791      	b.n	8004d8a <HAL_TIM_IRQHandler+0x92>
 8004e66:	bf00      	nop

08004e68 <TIM_Base_SetConfig>:
{
 8004e68:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e6a:	4e32      	ldr	r6, [pc, #200]	; (8004f34 <TIM_Base_SetConfig+0xcc>)
 8004e6c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004e70:	4f31      	ldr	r7, [pc, #196]	; (8004f38 <TIM_Base_SetConfig+0xd0>)
 8004e72:	eba0 0606 	sub.w	r6, r0, r6
  tmpcr1 = TIMx->CR1;
 8004e76:	6803      	ldr	r3, [r0, #0]
 8004e78:	eba0 0707 	sub.w	r7, r0, r7
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e7c:	fab6 f686 	clz	r6, r6
 8004e80:	fab7 f787 	clz	r7, r7
 8004e84:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8004e88:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8004e8c:	d025      	beq.n	8004eda <TIM_Base_SetConfig+0x72>
 8004e8e:	bb26      	cbnz	r6, 8004eda <TIM_Base_SetConfig+0x72>
 8004e90:	4a2a      	ldr	r2, [pc, #168]	; (8004f3c <TIM_Base_SetConfig+0xd4>)
 8004e92:	4290      	cmp	r0, r2
 8004e94:	d03e      	beq.n	8004f14 <TIM_Base_SetConfig+0xac>
 8004e96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e9a:	4290      	cmp	r0, r2
 8004e9c:	d03a      	beq.n	8004f14 <TIM_Base_SetConfig+0xac>
 8004e9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ea2:	4290      	cmp	r0, r2
 8004ea4:	d03b      	beq.n	8004f1e <TIM_Base_SetConfig+0xb6>
 8004ea6:	2f00      	cmp	r7, #0
 8004ea8:	d139      	bne.n	8004f1e <TIM_Base_SetConfig+0xb6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eaa:	4a25      	ldr	r2, [pc, #148]	; (8004f40 <TIM_Base_SetConfig+0xd8>)
 8004eac:	4290      	cmp	r0, r2
 8004eae:	d018      	beq.n	8004ee2 <TIM_Base_SetConfig+0x7a>
 8004eb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004eb4:	4290      	cmp	r0, r2
 8004eb6:	d014      	beq.n	8004ee2 <TIM_Base_SetConfig+0x7a>
 8004eb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ebc:	4290      	cmp	r0, r2
 8004ebe:	d010      	beq.n	8004ee2 <TIM_Base_SetConfig+0x7a>
 8004ec0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004ec4:	4290      	cmp	r0, r2
 8004ec6:	d00c      	beq.n	8004ee2 <TIM_Base_SetConfig+0x7a>
 8004ec8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ecc:	4290      	cmp	r0, r2
 8004ece:	d008      	beq.n	8004ee2 <TIM_Base_SetConfig+0x7a>
 8004ed0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ed4:	4290      	cmp	r0, r2
 8004ed6:	d108      	bne.n	8004eea <TIM_Base_SetConfig+0x82>
 8004ed8:	e003      	b.n	8004ee2 <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004ede:	684d      	ldr	r5, [r1, #4]
 8004ee0:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ee6:	68cd      	ldr	r5, [r1, #12]
 8004ee8:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eea:	694a      	ldr	r2, [r1, #20]
 8004eec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ef0:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ef2:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8004ef4:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8004ef6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ef8:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004efa:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004efc:	b926      	cbnz	r6, 8004f08 <TIM_Base_SetConfig+0xa0>
 8004efe:	b91f      	cbnz	r7, 8004f08 <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 8004f00:	2301      	movs	r3, #1
}
 8004f02:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 8004f04:	6143      	str	r3, [r0, #20]
}
 8004f06:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8004f08:	690b      	ldr	r3, [r1, #16]
 8004f0a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004f0c:	2301      	movs	r3, #1
}
 8004f0e:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 8004f10:	6143      	str	r3, [r0, #20]
}
 8004f12:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004f18:	684a      	ldr	r2, [r1, #4]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	e7e1      	b.n	8004ee2 <TIM_Base_SetConfig+0x7a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f1e:	4a09      	ldr	r2, [pc, #36]	; (8004f44 <TIM_Base_SetConfig+0xdc>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004f24:	684c      	ldr	r4, [r1, #4]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f26:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8004f28:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f2c:	d0d9      	beq.n	8004ee2 <TIM_Base_SetConfig+0x7a>
 8004f2e:	2f00      	cmp	r7, #0
 8004f30:	d1d7      	bne.n	8004ee2 <TIM_Base_SetConfig+0x7a>
 8004f32:	e7ba      	b.n	8004eaa <TIM_Base_SetConfig+0x42>
 8004f34:	40010000 	.word	0x40010000
 8004f38:	40010400 	.word	0x40010400
 8004f3c:	40000400 	.word	0x40000400
 8004f40:	40014000 	.word	0x40014000
 8004f44:	40000c00 	.word	0x40000c00

08004f48 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004f48:	b1b8      	cbz	r0, 8004f7a <HAL_TIM_Base_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004f4a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8004f4e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004f50:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004f54:	4604      	mov	r4, r0
 8004f56:	b15b      	cbz	r3, 8004f70 <HAL_TIM_Base_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 8004f58:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f5a:	6820      	ldr	r0, [r4, #0]
 8004f5c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8004f5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f62:	f7ff ff81 	bl	8004e68 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8004f66:	2301      	movs	r3, #1
  return HAL_OK;
 8004f68:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004f6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004f6e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004f70:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004f74:	f001 ff12 	bl	8006d9c <HAL_TIM_Base_MspInit>
 8004f78:	e7ee      	b.n	8004f58 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8004f7a:	2001      	movs	r0, #1
}
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop

08004f80 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f80:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d025      	beq.n	8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0x54>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f88:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004f8a:	2302      	movs	r3, #2
{
 8004f8c:	b470      	push	{r4, r5, r6}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f8e:	4d13      	ldr	r5, [pc, #76]	; (8004fdc <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004f90:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f94:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8004f96:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004f98:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f9a:	d016      	beq.n	8004fca <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8004f9c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004fa0:	42aa      	cmp	r2, r5
 8004fa2:	d012      	beq.n	8004fca <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fa4:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004fa6:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004faa:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fb0:	2601      	movs	r6, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fb2:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fb4:	4321      	orrs	r1, r4

  __HAL_UNLOCK(htim);
 8004fb6:	2500      	movs	r5, #0
  htim->Instance->CR2 = tmpcr2;
 8004fb8:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR = tmpsmcr;
 8004fba:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004fbc:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004fc0:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8004fc4:	4628      	mov	r0, r5
 8004fc6:	bc70      	pop	{r4, r5, r6}
 8004fc8:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004fca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004fce:	684d      	ldr	r5, [r1, #4]
 8004fd0:	432b      	orrs	r3, r5
 8004fd2:	e7e7      	b.n	8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0x24>
  __HAL_LOCK(htim);
 8004fd4:	2302      	movs	r3, #2
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40010000 	.word	0x40010000

08004fe0 <HAL_TIMEx_CommutCallback>:
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop

08004fe4 <HAL_TIMEx_BreakCallback>:
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop

08004fe8 <HAL_TIMEx_Break2Callback>:
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop

08004fec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fee:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ff0:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ff2:	49ae      	ldr	r1, [pc, #696]	; (80052ac <UART_SetConfig+0x2c0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ff4:	69e6      	ldr	r6, [r4, #28]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ff6:	68e7      	ldr	r7, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ff8:	4dad      	ldr	r5, [pc, #692]	; (80052b0 <UART_SetConfig+0x2c4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ffa:	e9d0 2004 	ldrd	r2, r0, [r0, #16]
 8004ffe:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005000:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005002:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005004:	6818      	ldr	r0, [r3, #0]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005006:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005008:	ea01 0100 	and.w	r1, r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800500c:	ea42 0206 	orr.w	r2, r2, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005010:	ea42 0201 	orr.w	r2, r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005014:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005016:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005018:	6858      	ldr	r0, [r3, #4]
  tmpreg |= huart->Init.OneBitSampling;
 800501a:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800501c:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
  tmpreg |= huart->Init.OneBitSampling;
 8005020:	ea42 0201 	orr.w	r2, r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005024:	ea40 0007 	orr.w	r0, r0, r7
 8005028:	6058      	str	r0, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800502a:	6899      	ldr	r1, [r3, #8]
 800502c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8005030:	ea42 0201 	orr.w	r2, r2, r1
 8005034:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005036:	d03f      	beq.n	80050b8 <UART_SetConfig+0xcc>
 8005038:	4a9e      	ldr	r2, [pc, #632]	; (80052b4 <UART_SetConfig+0x2c8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d01b      	beq.n	8005076 <UART_SetConfig+0x8a>
 800503e:	4a9e      	ldr	r2, [pc, #632]	; (80052b8 <UART_SetConfig+0x2cc>)
 8005040:	4293      	cmp	r3, r2
 8005042:	f000 80af 	beq.w	80051a4 <UART_SetConfig+0x1b8>
 8005046:	4a9d      	ldr	r2, [pc, #628]	; (80052bc <UART_SetConfig+0x2d0>)
 8005048:	4293      	cmp	r3, r2
 800504a:	f000 80dd 	beq.w	8005208 <UART_SetConfig+0x21c>
 800504e:	4a9c      	ldr	r2, [pc, #624]	; (80052c0 <UART_SetConfig+0x2d4>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d051      	beq.n	80050f8 <UART_SetConfig+0x10c>
 8005054:	4a9b      	ldr	r2, [pc, #620]	; (80052c4 <UART_SetConfig+0x2d8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	f000 80bc 	beq.w	80051d4 <UART_SetConfig+0x1e8>
 800505c:	4a9a      	ldr	r2, [pc, #616]	; (80052c8 <UART_SetConfig+0x2dc>)
 800505e:	4293      	cmp	r3, r2
 8005060:	f000 8103 	beq.w	800526a <UART_SetConfig+0x27e>
 8005064:	4a99      	ldr	r2, [pc, #612]	; (80052cc <UART_SetConfig+0x2e0>)
 8005066:	4293      	cmp	r3, r2
 8005068:	f000 810f 	beq.w	800528a <UART_SetConfig+0x29e>
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800506c:	2300      	movs	r3, #0
      ret = HAL_ERROR;
 800506e:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 8005070:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60

  return ret;
}
 8005074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005076:	4b96      	ldr	r3, [pc, #600]	; (80052d0 <UART_SetConfig+0x2e4>)
 8005078:	4a96      	ldr	r2, [pc, #600]	; (80052d4 <UART_SetConfig+0x2e8>)
 800507a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507e:	f003 030c 	and.w	r3, r3, #12
 8005082:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005084:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8005088:	d01e      	beq.n	80050c8 <UART_SetConfig+0xdc>
    switch (clocksource)
 800508a:	2b08      	cmp	r3, #8
 800508c:	d8ee      	bhi.n	800506c <UART_SetConfig+0x80>
 800508e:	a201      	add	r2, pc, #4	; (adr r2, 8005094 <UART_SetConfig+0xa8>)
 8005090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005094:	08005193 	.word	0x08005193
 8005098:	08005125 	.word	0x08005125
 800509c:	08005243 	.word	0x08005243
 80050a0:	0800506d 	.word	0x0800506d
 80050a4:	080051eb 	.word	0x080051eb
 80050a8:	0800506d 	.word	0x0800506d
 80050ac:	0800506d 	.word	0x0800506d
 80050b0:	0800506d 	.word	0x0800506d
 80050b4:	080051c5 	.word	0x080051c5
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050b8:	4b85      	ldr	r3, [pc, #532]	; (80052d0 <UART_SetConfig+0x2e4>)
 80050ba:	4a87      	ldr	r2, [pc, #540]	; (80052d8 <UART_SetConfig+0x2ec>)
 80050bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c0:	f003 0303 	and.w	r3, r3, #3
 80050c4:	5cd3      	ldrb	r3, [r2, r3]
 80050c6:	e7dd      	b.n	8005084 <UART_SetConfig+0x98>
    switch (clocksource)
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d8cf      	bhi.n	800506c <UART_SetConfig+0x80>
 80050cc:	a201      	add	r2, pc, #4	; (adr r2, 80050d4 <UART_SetConfig+0xe8>)
 80050ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d2:	bf00      	nop
 80050d4:	080051fd 	.word	0x080051fd
 80050d8:	0800514f 	.word	0x0800514f
 80050dc:	08005223 	.word	0x08005223
 80050e0:	0800506d 	.word	0x0800506d
 80050e4:	08005203 	.word	0x08005203
 80050e8:	0800506d 	.word	0x0800506d
 80050ec:	0800506d 	.word	0x0800506d
 80050f0:	0800506d 	.word	0x0800506d
 80050f4:	08005233 	.word	0x08005233
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050f8:	4b75      	ldr	r3, [pc, #468]	; (80052d0 <UART_SetConfig+0x2e4>)
 80050fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005106:	d06d      	beq.n	80051e4 <UART_SetConfig+0x1f8>
 8005108:	d93d      	bls.n	8005186 <UART_SetConfig+0x19a>
 800510a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800510e:	f000 8085 	beq.w	800521c <UART_SetConfig+0x230>
 8005112:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005116:	d052      	beq.n	80051be <UART_SetConfig+0x1d2>
 8005118:	e7a8      	b.n	800506c <UART_SetConfig+0x80>
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1a6      	bne.n	800506c <UART_SetConfig+0x80>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800511e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8005122:	d014      	beq.n	800514e <UART_SetConfig+0x162>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005124:	f7fe fc88 	bl	8003a38 <HAL_RCC_GetPCLK2Freq>
 8005128:	6862      	ldr	r2, [r4, #4]
 800512a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800512e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005132:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005134:	f1a3 0110 	sub.w	r1, r3, #16
 8005138:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800513c:	4291      	cmp	r1, r2
 800513e:	d895      	bhi.n	800506c <UART_SetConfig+0x80>
      huart->Instance->BRR = usartdiv;
 8005140:	6822      	ldr	r2, [r4, #0]
 8005142:	2000      	movs	r0, #0
 8005144:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8005146:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8005148:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 800514c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800514e:	f7fe fc73 	bl	8003a38 <HAL_RCC_GetPCLK2Freq>
 8005152:	6862      	ldr	r2, [r4, #4]
 8005154:	0853      	lsrs	r3, r2, #1
 8005156:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800515a:	fbb3 f3f2 	udiv	r3, r3, r2
 800515e:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005160:	f1a3 0110 	sub.w	r1, r3, #16
 8005164:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005168:	4291      	cmp	r1, r2
 800516a:	f63f af7f 	bhi.w	800506c <UART_SetConfig+0x80>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800516e:	f023 020f 	bic.w	r2, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005172:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8005176:	6821      	ldr	r1, [r4, #0]
 8005178:	2000      	movs	r0, #0
 800517a:	4313      	orrs	r3, r2
 800517c:	60cb      	str	r3, [r1, #12]
  huart->RxISR = NULL;
 800517e:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8005180:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 8005184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005186:	2b00      	cmp	r3, #0
 8005188:	f47f af70 	bne.w	800506c <UART_SetConfig+0x80>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800518c:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8005190:	d034      	beq.n	80051fc <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005192:	f7fe fc41 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 8005196:	6862      	ldr	r2, [r4, #4]
 8005198:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800519c:	fbb3 f3f2 	udiv	r3, r3, r2
 80051a0:	b29b      	uxth	r3, r3
        break;
 80051a2:	e7c7      	b.n	8005134 <UART_SetConfig+0x148>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051a4:	4b4a      	ldr	r3, [pc, #296]	; (80052d0 <UART_SetConfig+0x2e4>)
 80051a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051ae:	2b10      	cmp	r3, #16
 80051b0:	d018      	beq.n	80051e4 <UART_SetConfig+0x1f8>
 80051b2:	d9e8      	bls.n	8005186 <UART_SetConfig+0x19a>
 80051b4:	2b20      	cmp	r3, #32
 80051b6:	d031      	beq.n	800521c <UART_SetConfig+0x230>
 80051b8:	2b30      	cmp	r3, #48	; 0x30
 80051ba:	f47f af57 	bne.w	800506c <UART_SetConfig+0x80>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051be:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 80051c2:	d036      	beq.n	8005232 <UART_SetConfig+0x246>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80051c4:	6862      	ldr	r2, [r4, #4]
 80051c6:	0853      	lsrs	r3, r2, #1
 80051c8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80051cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80051d0:	b29b      	uxth	r3, r3
        break;
 80051d2:	e7af      	b.n	8005134 <UART_SetConfig+0x148>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051d4:	4b3e      	ldr	r3, [pc, #248]	; (80052d0 <UART_SetConfig+0x2e4>)
 80051d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051da:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051e2:	d136      	bne.n	8005252 <UART_SetConfig+0x266>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051e4:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 80051e8:	d00b      	beq.n	8005202 <UART_SetConfig+0x216>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80051ea:	f7fe fb43 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 80051ee:	6862      	ldr	r2, [r4, #4]
 80051f0:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80051f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80051f8:	b29b      	uxth	r3, r3
        break;
 80051fa:	e79b      	b.n	8005134 <UART_SetConfig+0x148>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80051fc:	f7fe fc0c 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 8005200:	e7a7      	b.n	8005152 <UART_SetConfig+0x166>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005202:	f7fe fb37 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 8005206:	e7a4      	b.n	8005152 <UART_SetConfig+0x166>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005208:	4b31      	ldr	r3, [pc, #196]	; (80052d0 <UART_SetConfig+0x2e4>)
 800520a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005212:	2b40      	cmp	r3, #64	; 0x40
 8005214:	d0e6      	beq.n	80051e4 <UART_SetConfig+0x1f8>
 8005216:	d9b6      	bls.n	8005186 <UART_SetConfig+0x19a>
 8005218:	2b80      	cmp	r3, #128	; 0x80
 800521a:	d123      	bne.n	8005264 <UART_SetConfig+0x278>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800521c:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8005220:	d10f      	bne.n	8005242 <UART_SetConfig+0x256>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005222:	6862      	ldr	r2, [r4, #4]
 8005224:	4b2d      	ldr	r3, [pc, #180]	; (80052dc <UART_SetConfig+0x2f0>)
 8005226:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800522a:	fbb3 f3f2 	udiv	r3, r3, r2
 800522e:	b29b      	uxth	r3, r3
        break;
 8005230:	e796      	b.n	8005160 <UART_SetConfig+0x174>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005232:	6862      	ldr	r2, [r4, #4]
 8005234:	0853      	lsrs	r3, r2, #1
 8005236:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800523a:	fbb3 f3f2 	udiv	r3, r3, r2
 800523e:	b29b      	uxth	r3, r3
        break;
 8005240:	e78e      	b.n	8005160 <UART_SetConfig+0x174>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005242:	6862      	ldr	r2, [r4, #4]
 8005244:	4b26      	ldr	r3, [pc, #152]	; (80052e0 <UART_SetConfig+0x2f4>)
 8005246:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800524a:	fbb3 f3f2 	udiv	r3, r3, r2
 800524e:	b29b      	uxth	r3, r3
        break;
 8005250:	e770      	b.n	8005134 <UART_SetConfig+0x148>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005252:	f67f af62 	bls.w	800511a <UART_SetConfig+0x12e>
 8005256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800525a:	d0df      	beq.n	800521c <UART_SetConfig+0x230>
 800525c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005260:	d0ad      	beq.n	80051be <UART_SetConfig+0x1d2>
 8005262:	e703      	b.n	800506c <UART_SetConfig+0x80>
 8005264:	2bc0      	cmp	r3, #192	; 0xc0
 8005266:	d0aa      	beq.n	80051be <UART_SetConfig+0x1d2>
 8005268:	e700      	b.n	800506c <UART_SetConfig+0x80>
 800526a:	4b19      	ldr	r3, [pc, #100]	; (80052d0 <UART_SetConfig+0x2e4>)
 800526c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005270:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005278:	d0b4      	beq.n	80051e4 <UART_SetConfig+0x1f8>
 800527a:	d984      	bls.n	8005186 <UART_SetConfig+0x19a>
 800527c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005280:	d0cc      	beq.n	800521c <UART_SetConfig+0x230>
 8005282:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005286:	d09a      	beq.n	80051be <UART_SetConfig+0x1d2>
 8005288:	e6f0      	b.n	800506c <UART_SetConfig+0x80>
 800528a:	4b11      	ldr	r3, [pc, #68]	; (80052d0 <UART_SetConfig+0x2e4>)
 800528c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005290:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005298:	d0a4      	beq.n	80051e4 <UART_SetConfig+0x1f8>
 800529a:	f67f af74 	bls.w	8005186 <UART_SetConfig+0x19a>
 800529e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a2:	d0bb      	beq.n	800521c <UART_SetConfig+0x230>
 80052a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80052a8:	d089      	beq.n	80051be <UART_SetConfig+0x1d2>
 80052aa:	e6df      	b.n	800506c <UART_SetConfig+0x80>
 80052ac:	efff69f3 	.word	0xefff69f3
 80052b0:	40011000 	.word	0x40011000
 80052b4:	40004400 	.word	0x40004400
 80052b8:	40004800 	.word	0x40004800
 80052bc:	40004c00 	.word	0x40004c00
 80052c0:	40005000 	.word	0x40005000
 80052c4:	40011400 	.word	0x40011400
 80052c8:	40007800 	.word	0x40007800
 80052cc:	40007c00 	.word	0x40007c00
 80052d0:	40023800 	.word	0x40023800
 80052d4:	08009b40 	.word	0x08009b40
 80052d8:	08009b3c 	.word	0x08009b3c
 80052dc:	01e84800 	.word	0x01e84800
 80052e0:	00f42400 	.word	0x00f42400

080052e4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80052e6:	07da      	lsls	r2, r3, #31
{
 80052e8:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052ea:	d506      	bpl.n	80052fa <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052ec:	6801      	ldr	r1, [r0, #0]
 80052ee:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80052f0:	684a      	ldr	r2, [r1, #4]
 80052f2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80052f6:	4322      	orrs	r2, r4
 80052f8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052fa:	079c      	lsls	r4, r3, #30
 80052fc:	d506      	bpl.n	800530c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052fe:	6801      	ldr	r1, [r0, #0]
 8005300:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005302:	684a      	ldr	r2, [r1, #4]
 8005304:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005308:	4322      	orrs	r2, r4
 800530a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800530c:	0759      	lsls	r1, r3, #29
 800530e:	d506      	bpl.n	800531e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005310:	6801      	ldr	r1, [r0, #0]
 8005312:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005314:	684a      	ldr	r2, [r1, #4]
 8005316:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800531a:	4322      	orrs	r2, r4
 800531c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800531e:	071a      	lsls	r2, r3, #28
 8005320:	d506      	bpl.n	8005330 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005322:	6801      	ldr	r1, [r0, #0]
 8005324:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005326:	684a      	ldr	r2, [r1, #4]
 8005328:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800532c:	4322      	orrs	r2, r4
 800532e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005330:	06dc      	lsls	r4, r3, #27
 8005332:	d506      	bpl.n	8005342 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005334:	6801      	ldr	r1, [r0, #0]
 8005336:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005338:	688a      	ldr	r2, [r1, #8]
 800533a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800533e:	4322      	orrs	r2, r4
 8005340:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005342:	0699      	lsls	r1, r3, #26
 8005344:	d506      	bpl.n	8005354 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005346:	6801      	ldr	r1, [r0, #0]
 8005348:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800534a:	688a      	ldr	r2, [r1, #8]
 800534c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005350:	4322      	orrs	r2, r4
 8005352:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005354:	065a      	lsls	r2, r3, #25
 8005356:	d50a      	bpl.n	800536e <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005358:	6801      	ldr	r1, [r0, #0]
 800535a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800535c:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800535e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005362:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005366:	ea42 0204 	orr.w	r2, r2, r4
 800536a:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800536c:	d00b      	beq.n	8005386 <UART_AdvFeatureConfig+0xa2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800536e:	061b      	lsls	r3, r3, #24
 8005370:	d506      	bpl.n	8005380 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005372:	6802      	ldr	r2, [r0, #0]
 8005374:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005376:	6853      	ldr	r3, [r2, #4]
 8005378:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800537c:	430b      	orrs	r3, r1
 800537e:	6053      	str	r3, [r2, #4]
  }
}
 8005380:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005384:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005386:	684a      	ldr	r2, [r1, #4]
 8005388:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800538a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800538e:	4322      	orrs	r2, r4
 8005390:	604a      	str	r2, [r1, #4]
 8005392:	e7ec      	b.n	800536e <UART_AdvFeatureConfig+0x8a>

08005394 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005398:	9d08      	ldr	r5, [sp, #32]
 800539a:	4680      	mov	r8, r0
 800539c:	460f      	mov	r7, r1
 800539e:	4616      	mov	r6, r2
 80053a0:	4699      	mov	r9, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053a2:	f8d8 4000 	ldr.w	r4, [r8]
 80053a6:	e001      	b.n	80053ac <UART_WaitOnFlagUntilTimeout+0x18>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053a8:	1c6b      	adds	r3, r5, #1
 80053aa:	d10a      	bne.n	80053c2 <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053ac:	69e0      	ldr	r0, [r4, #28]
 80053ae:	ea37 0300 	bics.w	r3, r7, r0
 80053b2:	bf0c      	ite	eq
 80053b4:	2001      	moveq	r0, #1
 80053b6:	2000      	movne	r0, #0
 80053b8:	42b0      	cmp	r0, r6
 80053ba:	d0f5      	beq.n	80053a8 <UART_WaitOnFlagUntilTimeout+0x14>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80053bc:	2000      	movs	r0, #0
}
 80053be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c2:	f7fc f93d 	bl	8001640 <HAL_GetTick>
 80053c6:	eba0 0009 	sub.w	r0, r0, r9
 80053ca:	42a8      	cmp	r0, r5
 80053cc:	d801      	bhi.n	80053d2 <UART_WaitOnFlagUntilTimeout+0x3e>
 80053ce:	2d00      	cmp	r5, #0
 80053d0:	d1e7      	bne.n	80053a2 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053d2:	f8d8 3000 	ldr.w	r3, [r8]
        huart->gState = HAL_UART_STATE_READY;
 80053d6:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 80053d8:	2400      	movs	r4, #0
 80053da:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80053e2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e4:	689a      	ldr	r2, [r3, #8]
 80053e6:	f022 0201 	bic.w	r2, r2, #1
 80053ea:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80053ec:	f8c8 1074 	str.w	r1, [r8, #116]	; 0x74
        __HAL_UNLOCK(huart);
 80053f0:	f888 4070 	strb.w	r4, [r8, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 80053f4:	f8c8 1078 	str.w	r1, [r8, #120]	; 0x78
 80053f8:	e7e1      	b.n	80053be <UART_WaitOnFlagUntilTimeout+0x2a>
 80053fa:	bf00      	nop

080053fc <UART_CheckIdleState>:
{
 80053fc:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053fe:	2500      	movs	r5, #0
{
 8005400:	4604      	mov	r4, r0
 8005402:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005404:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8005406:	f7fc f91b 	bl	8001640 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800540a:	6822      	ldr	r2, [r4, #0]
 800540c:	6812      	ldr	r2, [r2, #0]
 800540e:	0713      	lsls	r3, r2, #28
 8005410:	d408      	bmi.n	8005424 <UART_CheckIdleState+0x28>
  __HAL_UNLOCK(huart);
 8005412:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8005414:	2220      	movs	r2, #32
  return HAL_OK;
 8005416:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8005418:	6762      	str	r2, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800541a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 800541e:	67a2      	str	r2, [r4, #120]	; 0x78
}
 8005420:	b002      	add	sp, #8
 8005422:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005424:	f06f 467e 	mvn.w	r6, #4261412864	; 0xfe000000
 8005428:	4603      	mov	r3, r0
 800542a:	462a      	mov	r2, r5
 800542c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005430:	9600      	str	r6, [sp, #0]
 8005432:	4620      	mov	r0, r4
 8005434:	f7ff ffae 	bl	8005394 <UART_WaitOnFlagUntilTimeout>
 8005438:	2800      	cmp	r0, #0
 800543a:	d0ea      	beq.n	8005412 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800543c:	2003      	movs	r0, #3
}
 800543e:	b002      	add	sp, #8
 8005440:	bd70      	pop	{r4, r5, r6, pc}
 8005442:	bf00      	nop

08005444 <HAL_UART_Init>:
  if (huart == NULL)
 8005444:	b370      	cbz	r0, 80054a4 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005446:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8005448:	b510      	push	{r4, lr}
 800544a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800544c:	b1fb      	cbz	r3, 800548e <HAL_UART_Init+0x4a>
  __HAL_UART_DISABLE(huart);
 800544e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005450:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005452:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8005454:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8005456:	6813      	ldr	r3, [r2, #0]
 8005458:	f023 0301 	bic.w	r3, r3, #1
 800545c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800545e:	f7ff fdc5 	bl	8004fec <UART_SetConfig>
 8005462:	2801      	cmp	r0, #1
 8005464:	d018      	beq.n	8005498 <HAL_UART_Init+0x54>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005468:	b9c3      	cbnz	r3, 800549c <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800546a:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800546c:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005474:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800547c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	f042 0201 	orr.w	r2, r2, #1
}
 8005484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8005488:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800548a:	f7ff bfb7 	b.w	80053fc <UART_CheckIdleState>
    huart->Lock = HAL_UNLOCKED;
 800548e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8005492:	f001 fcd3 	bl	8006e3c <HAL_UART_MspInit>
 8005496:	e7da      	b.n	800544e <HAL_UART_Init+0xa>
}
 8005498:	2001      	movs	r0, #1
 800549a:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 800549c:	4620      	mov	r0, r4
 800549e:	f7ff ff21 	bl	80052e4 <UART_AdvFeatureConfig>
 80054a2:	e7e2      	b.n	800546a <HAL_UART_Init+0x26>
}
 80054a4:	2001      	movs	r0, #1
 80054a6:	4770      	bx	lr

080054a8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80054a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80054ac:	680f      	ldr	r7, [r1, #0]
 80054ae:	f8d1 e024 	ldr.w	lr, [r1, #36]	; 0x24
 80054b2:	2f01      	cmp	r7, #1
 80054b4:	e9d1 3207 	ldrd	r3, r2, [r1, #28]
 80054b8:	e9d1 4801 	ldrd	r4, r8, [r1, #4]
 80054bc:	e9d1 c603 	ldrd	ip, r6, [r1, #12]
 80054c0:	e9d1 5105 	ldrd	r5, r1, [r1, #20]
 80054c4:	d012      	beq.n	80054ec <FMC_SDRAM_Init+0x44>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80054c6:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80054c8:	4f15      	ldr	r7, [pc, #84]	; (8005520 <FMC_SDRAM_Init+0x78>)
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80054ca:	6803      	ldr	r3, [r0, #0]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80054cc:	ea42 020e 	orr.w	r2, r2, lr
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80054d0:	401f      	ands	r7, r3
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80054d2:	4322      	orrs	r2, r4
 80054d4:	ea42 0308 	orr.w	r3, r2, r8
 80054d8:	ea43 030c 	orr.w	r3, r3, ip
 80054dc:	4333      	orrs	r3, r6
 80054de:	432b      	orrs	r3, r5
 80054e0:	430b      	orrs	r3, r1
 80054e2:	433b      	orrs	r3, r7
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80054e4:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 80054e6:	2000      	movs	r0, #0
 80054e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80054ec:	ea44 0408 	orr.w	r4, r4, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80054f0:	431a      	orrs	r2, r3
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80054f2:	6807      	ldr	r7, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80054f4:	ea44 030c 	orr.w	r3, r4, ip
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80054f8:	f8d0 c004 	ldr.w	ip, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80054fc:	4c08      	ldr	r4, [pc, #32]	; (8005520 <FMC_SDRAM_Init+0x78>)
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80054fe:	ea42 020e 	orr.w	r2, r2, lr
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005502:	4333      	orrs	r3, r6
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005504:	f427 46f8 	bic.w	r6, r7, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005508:	ea0c 0404 	and.w	r4, ip, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800550c:	432b      	orrs	r3, r5
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800550e:	4332      	orrs	r2, r6
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005510:	430b      	orrs	r3, r1
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005512:	6002      	str	r2, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005514:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005516:	6043      	str	r3, [r0, #4]
}
 8005518:	2000      	movs	r0, #0
 800551a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800551e:	bf00      	nop
 8005520:	ffff8000 	.word	0xffff8000

08005524 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005528:	690b      	ldr	r3, [r1, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800552a:	2a01      	cmp	r2, #1
 800552c:	68cf      	ldr	r7, [r1, #12]
 800552e:	694e      	ldr	r6, [r1, #20]
 8005530:	f103 33ff 	add.w	r3, r3, #4294967295
 8005534:	684d      	ldr	r5, [r1, #4]
 8005536:	f107 37ff 	add.w	r7, r7, #4294967295
 800553a:	688c      	ldr	r4, [r1, #8]
 800553c:	f106 36ff 	add.w	r6, r6, #4294967295
 8005540:	f8d1 c018 	ldr.w	ip, [r1, #24]
 8005544:	f105 35ff 	add.w	r5, r5, #4294967295
 8005548:	6809      	ldr	r1, [r1, #0]
 800554a:	f104 34ff 	add.w	r4, r4, #4294967295
 800554e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005552:	ea4f 3707 	mov.w	r7, r7, lsl #12
 8005556:	f101 38ff 	add.w	r8, r1, #4294967295
 800555a:	ea4f 5606 	mov.w	r6, r6, lsl #20
 800555e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8005562:	ea4f 2104 	mov.w	r1, r4, lsl #8
 8005566:	ea4f 4e03 	mov.w	lr, r3, lsl #16
 800556a:	ea4f 6c0c 	mov.w	ip, ip, lsl #24
 800556e:	d012      	beq.n	8005596 <FMC_SDRAM_Timing_Init+0x72>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005570:	ea47 0206 	orr.w	r2, r7, r6
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005574:	6884      	ldr	r4, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005576:	ea42 0208 	orr.w	r2, r2, r8
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800557a:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800557e:	ea42 0305 	orr.w	r3, r2, r5
 8005582:	430b      	orrs	r3, r1
 8005584:	ea43 030e 	orr.w	r3, r3, lr
 8005588:	ea43 030c 	orr.w	r3, r3, ip
 800558c:	4323      	orrs	r3, r4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800558e:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8005590:	2000      	movs	r0, #0
 8005592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005596:	4329      	orrs	r1, r5
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005598:	ea47 0206 	orr.w	r2, r7, r6
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800559c:	6885      	ldr	r5, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800559e:	ea41 0108 	orr.w	r1, r1, r8
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80055a2:	68c4      	ldr	r4, [r0, #12]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80055a4:	4e07      	ldr	r6, [pc, #28]	; (80055c4 <FMC_SDRAM_Timing_Init+0xa0>)
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80055a6:	ea41 030e 	orr.w	r3, r1, lr
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80055aa:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80055ae:	402e      	ands	r6, r5
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80055b0:	ea43 030c 	orr.w	r3, r3, ip
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80055b4:	4316      	orrs	r6, r2
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80055b6:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80055b8:	6086      	str	r6, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80055ba:	60c3      	str	r3, [r0, #12]
}
 80055bc:	2000      	movs	r0, #0
 80055be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055c2:	bf00      	nop
 80055c4:	ff0f0fff 	.word	0xff0f0fff

080055c8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80055c8:	b430      	push	{r4, r5}
  __IO uint32_t tmpr = 0;
 80055ca:	2200      	movs	r2, #0
{
 80055cc:	b082      	sub	sp, #8
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80055ce:	684d      	ldr	r5, [r1, #4]
{
 80055d0:	4604      	mov	r4, r0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80055d2:	680b      	ldr	r3, [r1, #0]
                    );
    
  Device->SDCMR = tmpr;
  
  return HAL_OK;  
}
 80055d4:	4610      	mov	r0, r2
  __IO uint32_t tmpr = 0;
 80055d6:	9201      	str	r2, [sp, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80055d8:	432b      	orrs	r3, r5
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80055da:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80055de:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80055e2:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80055e4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80055e8:	9301      	str	r3, [sp, #4]
  Device->SDCMR = tmpr;
 80055ea:	9b01      	ldr	r3, [sp, #4]
 80055ec:	6123      	str	r3, [r4, #16]
}
 80055ee:	b002      	add	sp, #8
 80055f0:	bc30      	pop	{r4, r5}
 80055f2:	4770      	bx	lr

080055f4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80055f4:	4602      	mov	r2, r0
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
  
  return HAL_OK;   
}
 80055f6:	2000      	movs	r0, #0
  Device->SDRTR |= (RefreshRate<<1);
 80055f8:	6953      	ldr	r3, [r2, #20]
 80055fa:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 80055fe:	6151      	str	r1, [r2, #20]
}
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop

08005604 <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005604:	4a17      	ldr	r2, [pc, #92]	; (8005664 <SDMMC_GetCmdResp2+0x60>)
{
 8005606:	4601      	mov	r1, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005608:	f241 3388 	movw	r3, #5000	; 0x1388
 800560c:	6812      	ldr	r2, [r2, #0]
{
 800560e:	b410      	push	{r4}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005610:	4c15      	ldr	r4, [pc, #84]	; (8005668 <SDMMC_GetCmdResp2+0x64>)
 8005612:	fba4 0202 	umull	r0, r2, r4, r2
 8005616:	0a52      	lsrs	r2, r2, #9
 8005618:	fb03 f302 	mul.w	r3, r3, r2
 800561c:	e003      	b.n	8005626 <SDMMC_GetCmdResp2+0x22>
    if (count-- == 0)
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800561e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8005620:	f012 0f45 	tst.w	r2, #69	; 0x45
 8005624:	d107      	bne.n	8005636 <SDMMC_GetCmdResp2+0x32>
    if (count-- == 0)
 8005626:	f113 33ff 	adds.w	r3, r3, #4294967295
 800562a:	d2f8      	bcs.n	800561e <SDMMC_GetCmdResp2+0x1a>
      return SDMMC_ERROR_TIMEOUT;
 800562c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 8005630:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005634:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005636:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005638:	075b      	lsls	r3, r3, #29
 800563a:	d40e      	bmi.n	800565a <SDMMC_GetCmdResp2+0x56>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800563c:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800563e:	f010 0001 	ands.w	r0, r0, #1
 8005642:	d105      	bne.n	8005650 <SDMMC_GetCmdResp2+0x4c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005644:	f240 53ff 	movw	r3, #1535	; 0x5ff
}
 8005648:	f85d 4b04 	ldr.w	r4, [sp], #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800564c:	638b      	str	r3, [r1, #56]	; 0x38
}
 800564e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005650:	2001      	movs	r0, #1
}
 8005652:	f85d 4b04 	ldr.w	r4, [sp], #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005656:	6388      	str	r0, [r1, #56]	; 0x38
}
 8005658:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800565a:	2004      	movs	r0, #4
}
 800565c:	f85d 4b04 	ldr.w	r4, [sp], #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005660:	6388      	str	r0, [r1, #56]	; 0x38
}
 8005662:	4770      	bx	lr
 8005664:	200000a4 	.word	0x200000a4
 8005668:	10624dd3 	.word	0x10624dd3

0800566c <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800566c:	4a13      	ldr	r2, [pc, #76]	; (80056bc <SDMMC_GetCmdResp3+0x50>)
{
 800566e:	4601      	mov	r1, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005670:	f241 3388 	movw	r3, #5000	; 0x1388
 8005674:	6812      	ldr	r2, [r2, #0]
{
 8005676:	b410      	push	{r4}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005678:	4c11      	ldr	r4, [pc, #68]	; (80056c0 <SDMMC_GetCmdResp3+0x54>)
 800567a:	fba4 0202 	umull	r0, r2, r4, r2
 800567e:	0a52      	lsrs	r2, r2, #9
 8005680:	fb03 f302 	mul.w	r3, r3, r2
 8005684:	e003      	b.n	800568e <SDMMC_GetCmdResp3+0x22>
    if (count-- == 0)
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005686:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8005688:	f012 0f45 	tst.w	r2, #69	; 0x45
 800568c:	d107      	bne.n	800569e <SDMMC_GetCmdResp3+0x32>
    if (count-- == 0)
 800568e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8005692:	d2f8      	bcs.n	8005686 <SDMMC_GetCmdResp3+0x1a>
      return SDMMC_ERROR_TIMEOUT;
 8005694:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
  }
  
  return SDMMC_ERROR_NONE;
}
 8005698:	f85d 4b04 	ldr.w	r4, [sp], #4
 800569c:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800569e:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80056a0:	f010 0004 	ands.w	r0, r0, #4
 80056a4:	d105      	bne.n	80056b2 <SDMMC_GetCmdResp3+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80056a6:	f240 53ff 	movw	r3, #1535	; 0x5ff
}
 80056aa:	f85d 4b04 	ldr.w	r4, [sp], #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80056ae:	638b      	str	r3, [r1, #56]	; 0x38
}
 80056b0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80056b2:	2004      	movs	r0, #4
}
 80056b4:	f85d 4b04 	ldr.w	r4, [sp], #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80056b8:	6388      	str	r0, [r1, #56]	; 0x38
}
 80056ba:	4770      	bx	lr
 80056bc:	200000a4 	.word	0x200000a4
 80056c0:	10624dd3 	.word	0x10624dd3

080056c4 <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80056c4:	4b4e      	ldr	r3, [pc, #312]	; (8005800 <SDMMC_GetCmdResp1+0x13c>)
{
 80056c6:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80056c8:	681b      	ldr	r3, [r3, #0]
{
 80056ca:	b083      	sub	sp, #12
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80056cc:	4c4d      	ldr	r4, [pc, #308]	; (8005804 <SDMMC_GetCmdResp1+0x140>)
 80056ce:	fba4 4303 	umull	r4, r3, r4, r3
 80056d2:	0a5b      	lsrs	r3, r3, #9
 80056d4:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0)
 80056d8:	b1a2      	cbz	r2, 8005704 <SDMMC_GetCmdResp1+0x40>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80056da:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80056dc:	3a01      	subs	r2, #1
 80056de:	f013 0f45 	tst.w	r3, #69	; 0x45
 80056e2:	d0f9      	beq.n	80056d8 <SDMMC_GetCmdResp1+0x14>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80056e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80056e6:	075a      	lsls	r2, r3, #29
 80056e8:	d419      	bmi.n	800571e <SDMMC_GetCmdResp1+0x5a>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80056ea:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80056ec:	f012 0201 	ands.w	r2, r2, #1
 80056f0:	d10e      	bne.n	8005710 <SDMMC_GetCmdResp1+0x4c>
  return (uint8_t)(SDMMCx->RESPCMD);
 80056f2:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	4299      	cmp	r1, r3
 80056f8:	d018      	beq.n	800572c <SDMMC_GetCmdResp1+0x68>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80056fa:	2001      	movs	r0, #1
}
 80056fc:	b003      	add	sp, #12
 80056fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005702:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8005704:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005708:	b003      	add	sp, #12
 800570a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800570e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005710:	2301      	movs	r3, #1
 8005712:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005714:	4618      	mov	r0, r3
}
 8005716:	b003      	add	sp, #12
 8005718:	f85d 4b04 	ldr.w	r4, [sp], #4
 800571c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800571e:	2304      	movs	r3, #4
 8005720:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005722:	4618      	mov	r0, r3
}
 8005724:	b003      	add	sp, #12
 8005726:	f85d 4b04 	ldr.w	r4, [sp], #4
 800572a:	4770      	bx	lr
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800572c:	f240 54ff 	movw	r4, #1535	; 0x5ff
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8005730:	f100 0114 	add.w	r1, r0, #20
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005734:	4b34      	ldr	r3, [pc, #208]	; (8005808 <SDMMC_GetCmdResp1+0x144>)
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005736:	6384      	str	r4, [r0, #56]	; 0x38
  __IO uint32_t tmp = 0;
 8005738:	9201      	str	r2, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800573a:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 800573c:	9a01      	ldr	r2, [sp, #4]
 800573e:	6812      	ldr	r2, [r2, #0]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005740:	4013      	ands	r3, r2
 8005742:	b34b      	cbz	r3, 8005798 <SDMMC_GetCmdResp1+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005744:	2a00      	cmp	r2, #0
 8005746:	db2b      	blt.n	80057a0 <SDMMC_GetCmdResp1+0xdc>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005748:	0053      	lsls	r3, r2, #1
 800574a:	d427      	bmi.n	800579c <SDMMC_GetCmdResp1+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800574c:	0094      	lsls	r4, r2, #2
 800574e:	d42a      	bmi.n	80057a6 <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005750:	00d1      	lsls	r1, r2, #3
 8005752:	d42a      	bmi.n	80057aa <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005754:	0113      	lsls	r3, r2, #4
 8005756:	d42b      	bmi.n	80057b0 <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005758:	0154      	lsls	r4, r2, #5
 800575a:	d42c      	bmi.n	80057b6 <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800575c:	01d1      	lsls	r1, r2, #7
 800575e:	d430      	bmi.n	80057c2 <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005760:	0213      	lsls	r3, r2, #8
 8005762:	d42b      	bmi.n	80057bc <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005764:	0254      	lsls	r4, r2, #9
 8005766:	d432      	bmi.n	80057ce <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005768:	0291      	lsls	r1, r2, #10
 800576a:	d42d      	bmi.n	80057c8 <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800576c:	02d3      	lsls	r3, r2, #11
 800576e:	d437      	bmi.n	80057e0 <SDMMC_GetCmdResp1+0x11c>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005770:	0354      	lsls	r4, r2, #13
 8005772:	d432      	bmi.n	80057da <SDMMC_GetCmdResp1+0x116>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005774:	0391      	lsls	r1, r2, #14
 8005776:	d43f      	bmi.n	80057f8 <SDMMC_GetCmdResp1+0x134>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005778:	03d3      	lsls	r3, r2, #15
 800577a:	d43a      	bmi.n	80057f2 <SDMMC_GetCmdResp1+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800577c:	0414      	lsls	r4, r2, #16
 800577e:	d435      	bmi.n	80057ec <SDMMC_GetCmdResp1+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005780:	0451      	lsls	r1, r2, #17
 8005782:	d430      	bmi.n	80057e6 <SDMMC_GetCmdResp1+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005784:	0493      	lsls	r3, r2, #18
 8005786:	d425      	bmi.n	80057d4 <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005788:	f012 0f08 	tst.w	r2, #8
 800578c:	bf14      	ite	ne
 800578e:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8005792:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8005796:	e7b7      	b.n	8005708 <SDMMC_GetCmdResp1+0x44>
    return SDMMC_ERROR_NONE;
 8005798:	4618      	mov	r0, r3
 800579a:	e7b5      	b.n	8005708 <SDMMC_GetCmdResp1+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800579c:	2040      	movs	r0, #64	; 0x40
 800579e:	e7b3      	b.n	8005708 <SDMMC_GetCmdResp1+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80057a0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80057a4:	e7b0      	b.n	8005708 <SDMMC_GetCmdResp1+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80057a6:	2080      	movs	r0, #128	; 0x80
 80057a8:	e7ae      	b.n	8005708 <SDMMC_GetCmdResp1+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80057aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80057ae:	e7ab      	b.n	8005708 <SDMMC_GetCmdResp1+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80057b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80057b4:	e7a8      	b.n	8005708 <SDMMC_GetCmdResp1+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80057b6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80057ba:	e7a5      	b.n	8005708 <SDMMC_GetCmdResp1+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80057bc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80057c0:	e7a2      	b.n	8005708 <SDMMC_GetCmdResp1+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80057c2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80057c6:	e79f      	b.n	8005708 <SDMMC_GetCmdResp1+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80057c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80057cc:	e79c      	b.n	8005708 <SDMMC_GetCmdResp1+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80057ce:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80057d2:	e799      	b.n	8005708 <SDMMC_GetCmdResp1+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 80057d4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80057d8:	e796      	b.n	8005708 <SDMMC_GetCmdResp1+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80057da:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80057de:	e793      	b.n	8005708 <SDMMC_GetCmdResp1+0x44>
    return SDMMC_ERROR_CC_ERR;
 80057e0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80057e4:	e790      	b.n	8005708 <SDMMC_GetCmdResp1+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80057e6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80057ea:	e78d      	b.n	8005708 <SDMMC_GetCmdResp1+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80057ec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80057f0:	e78a      	b.n	8005708 <SDMMC_GetCmdResp1+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80057f2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80057f6:	e787      	b.n	8005708 <SDMMC_GetCmdResp1+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80057f8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80057fc:	e784      	b.n	8005708 <SDMMC_GetCmdResp1+0x44>
 80057fe:	bf00      	nop
 8005800:	200000a4 	.word	0x200000a4
 8005804:	10624dd3 	.word	0x10624dd3
 8005808:	fdffe008 	.word	0xfdffe008

0800580c <SDMMC_Init>:
{
 800580c:	b084      	sub	sp, #16
 800580e:	b470      	push	{r4, r5, r6}
 8005810:	ae04      	add	r6, sp, #16
             Init.ClockPowerSave      |\
 8005812:	9c07      	ldr	r4, [sp, #28]
{
 8005814:	4605      	mov	r5, r0
}
 8005816:	2000      	movs	r0, #0
{
 8005818:	e886 000e 	stmia.w	r6, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 800581c:	460b      	mov	r3, r1
             Init.ClockBypass         |\
 800581e:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
  tmpreg |= (Init.ClockEdge           |\
 8005822:	4313      	orrs	r3, r2
             Init.BusWide             |\
 8005824:	9a08      	ldr	r2, [sp, #32]
             Init.ClockBypass         |\
 8005826:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8005828:	9909      	ldr	r1, [sp, #36]	; 0x24
             Init.ClockPowerSave      |\
 800582a:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800582c:	686c      	ldr	r4, [r5, #4]
             Init.BusWide             |\
 800582e:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005830:	4a03      	ldr	r2, [pc, #12]	; (8005840 <SDMMC_Init+0x34>)
             Init.HardwareFlowControl |\
 8005832:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005834:	4022      	ands	r2, r4
 8005836:	4313      	orrs	r3, r2
 8005838:	606b      	str	r3, [r5, #4]
}
 800583a:	bc70      	pop	{r4, r5, r6}
 800583c:	b004      	add	sp, #16
 800583e:	4770      	bx	lr
 8005840:	ffff8100 	.word	0xffff8100

08005844 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 8005844:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop

0800584c <SDMMC_PowerState_ON>:
{  
 800584c:	4603      	mov	r3, r0
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800584e:	2203      	movs	r2, #3
}
 8005850:	2000      	movs	r0, #0
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005852:	601a      	str	r2, [r3, #0]
}
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop

08005858 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005858:	6800      	ldr	r0, [r0, #0]
}
 800585a:	f000 0003 	and.w	r0, r0, #3
 800585e:	4770      	bx	lr

08005860 <SDMMC_GetResponse>:
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8005860:	3014      	adds	r0, #20
{
 8005862:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8005864:	2300      	movs	r3, #0
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8005866:	4401      	add	r1, r0
  __IO uint32_t tmp = 0;
 8005868:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800586a:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 800586c:	9b01      	ldr	r3, [sp, #4]
 800586e:	6818      	ldr	r0, [r3, #0]
}  
 8005870:	b002      	add	sp, #8
 8005872:	4770      	bx	lr

08005874 <SDMMC_ConfigData>:
{
 8005874:	b430      	push	{r4, r5}
 8005876:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005878:	680c      	ldr	r4, [r1, #0]
}
 800587a:	2000      	movs	r0, #0
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800587c:	e9d1 3502 	ldrd	r3, r5, [r1, #8]
 8005880:	432b      	orrs	r3, r5
  SDMMCx->DLEN = Data->DataLength;
 8005882:	684d      	ldr	r5, [r1, #4]
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005884:	6254      	str	r4, [r2, #36]	; 0x24
                       Data->TransferDir   |\
 8005886:	690c      	ldr	r4, [r1, #16]
  SDMMCx->DLEN = Data->DataLength;
 8005888:	6295      	str	r5, [r2, #40]	; 0x28
                       Data->TransferDir   |\
 800588a:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 800588c:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800588e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
                       Data->TransferMode  |\
 8005890:	432b      	orrs	r3, r5
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005892:	f024 01f7 	bic.w	r1, r4, #247	; 0xf7
 8005896:	430b      	orrs	r3, r1
}
 8005898:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800589a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop

080058a0 <SDMMC_CmdBlockLength>:
{
 80058a0:	b430      	push	{r4, r5}
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80058a2:	4b06      	ldr	r3, [pc, #24]	; (80058bc <SDMMC_CmdBlockLength+0x1c>)
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80058a4:	f241 3288 	movw	r2, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 80058a8:	6081      	str	r1, [r0, #8]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80058aa:	2110      	movs	r1, #16
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80058ac:	68c5      	ldr	r5, [r0, #12]
 80058ae:	402b      	ands	r3, r5
 80058b0:	f443 638a 	orr.w	r3, r3, #1104	; 0x450
}
 80058b4:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80058b6:	60c3      	str	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80058b8:	f7ff bf04 	b.w	80056c4 <SDMMC_GetCmdResp1>
 80058bc:	fffff000 	.word	0xfffff000

080058c0 <SDMMC_CmdSelDesel>:
{
 80058c0:	b470      	push	{r4, r5, r6}
  SDMMCx->ARG = Command->Argument;
 80058c2:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80058c4:	f240 4447 	movw	r4, #1095	; 0x447
 80058c8:	68c6      	ldr	r6, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80058ca:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80058ce:	4d04      	ldr	r5, [pc, #16]	; (80058e0 <SDMMC_CmdSelDesel+0x20>)
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80058d0:	2107      	movs	r1, #7
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80058d2:	4035      	ands	r5, r6
 80058d4:	432c      	orrs	r4, r5
 80058d6:	60c4      	str	r4, [r0, #12]
}
 80058d8:	bc70      	pop	{r4, r5, r6}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80058da:	f7ff bef3 	b.w	80056c4 <SDMMC_GetCmdResp1>
 80058de:	bf00      	nop
 80058e0:	fffff000 	.word	0xfffff000

080058e4 <SDMMC_CmdGoIdleState>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80058e4:	4b13      	ldr	r3, [pc, #76]	; (8005934 <SDMMC_CmdGoIdleState+0x50>)
{
 80058e6:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 80058e8:	2200      	movs	r2, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80058ea:	6818      	ldr	r0, [r3, #0]
 80058ec:	f241 3388 	movw	r3, #5000	; 0x1388
{
 80058f0:	b410      	push	{r4}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80058f2:	4c11      	ldr	r4, [pc, #68]	; (8005938 <SDMMC_CmdGoIdleState+0x54>)
  SDMMCx->ARG = Command->Argument;
 80058f4:	608a      	str	r2, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80058f6:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80058fa:	fba4 4000 	umull	r4, r0, r4, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80058fe:	68cc      	ldr	r4, [r1, #12]
 8005900:	4022      	ands	r2, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005902:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005904:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005908:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800590c:	60ca      	str	r2, [r1, #12]
 800590e:	e002      	b.n	8005916 <SDMMC_CmdGoIdleState+0x32>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8005910:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8005912:	0612      	lsls	r2, r2, #24
 8005914:	d407      	bmi.n	8005926 <SDMMC_CmdGoIdleState+0x42>
    if (count-- == 0)
 8005916:	f113 33ff 	adds.w	r3, r3, #4294967295
 800591a:	d2f9      	bcs.n	8005910 <SDMMC_CmdGoIdleState+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800591c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005920:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005924:	4770      	bx	lr
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005926:	f240 53ff 	movw	r3, #1535	; 0x5ff
  return SDMMC_ERROR_NONE;
 800592a:	2000      	movs	r0, #0
}
 800592c:	f85d 4b04 	ldr.w	r4, [sp], #4
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005930:	638b      	str	r3, [r1, #56]	; 0x38
}
 8005932:	4770      	bx	lr
 8005934:	200000a4 	.word	0x200000a4
 8005938:	10624dd3 	.word	0x10624dd3

0800593c <SDMMC_CmdOperCond>:
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800593c:	4b1c      	ldr	r3, [pc, #112]	; (80059b0 <SDMMC_CmdOperCond+0x74>)
{
 800593e:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 8005940:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005944:	6818      	ldr	r0, [r3, #0]
 8005946:	f241 3388 	movw	r3, #5000	; 0x1388
{
 800594a:	b410      	push	{r4}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800594c:	4c19      	ldr	r4, [pc, #100]	; (80059b4 <SDMMC_CmdOperCond+0x78>)
  SDMMCx->ARG = Command->Argument;
 800594e:	608a      	str	r2, [r1, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005950:	fba4 4000 	umull	r4, r0, r4, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005954:	4a18      	ldr	r2, [pc, #96]	; (80059b8 <SDMMC_CmdOperCond+0x7c>)
 8005956:	68cc      	ldr	r4, [r1, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005958:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800595a:	4022      	ands	r2, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800595c:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005960:	f442 6289 	orr.w	r2, r2, #1096	; 0x448
 8005964:	60ca      	str	r2, [r1, #12]
 8005966:	e003      	b.n	8005970 <SDMMC_CmdOperCond+0x34>
    if (count-- == 0)
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005968:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800596a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800596e:	d107      	bne.n	8005980 <SDMMC_CmdOperCond+0x44>
    if (count-- == 0)
 8005970:	f113 33ff 	adds.w	r3, r3, #4294967295
 8005974:	d2f8      	bcs.n	8005968 <SDMMC_CmdOperCond+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8005976:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800597a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800597e:	4770      	bx	lr

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005980:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8005982:	f010 0004 	ands.w	r0, r0, #4
 8005986:	d10c      	bne.n	80059a2 <SDMMC_CmdOperCond+0x66>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005988:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800598a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800598e:	d004      	beq.n	800599a <SDMMC_CmdOperCond+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005990:	2340      	movs	r3, #64	; 0x40
}
 8005992:	f85d 4b04 	ldr.w	r4, [sp], #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005996:	638b      	str	r3, [r1, #56]	; 0x38
}
 8005998:	4770      	bx	lr
  }
  
  return SDMMC_ERROR_NONE;
 800599a:	4618      	mov	r0, r3
}
 800599c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059a0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80059a2:	2340      	movs	r3, #64	; 0x40
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80059a4:	2004      	movs	r0, #4
}
 80059a6:	f85d 4b04 	ldr.w	r4, [sp], #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80059aa:	638b      	str	r3, [r1, #56]	; 0x38
}
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	200000a4 	.word	0x200000a4
 80059b4:	10624dd3 	.word	0x10624dd3
 80059b8:	fffff000 	.word	0xfffff000

080059bc <SDMMC_CmdAppCommand>:
{
 80059bc:	b470      	push	{r4, r5, r6}
  SDMMCx->ARG = Command->Argument;
 80059be:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80059c0:	f240 4477 	movw	r4, #1143	; 0x477
 80059c4:	68c6      	ldr	r6, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80059c6:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80059ca:	4d04      	ldr	r5, [pc, #16]	; (80059dc <SDMMC_CmdAppCommand+0x20>)
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80059cc:	2137      	movs	r1, #55	; 0x37
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80059ce:	4035      	ands	r5, r6
 80059d0:	432c      	orrs	r4, r5
 80059d2:	60c4      	str	r4, [r0, #12]
}
 80059d4:	bc70      	pop	{r4, r5, r6}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80059d6:	f7ff be75 	b.w	80056c4 <SDMMC_GetCmdResp1>
 80059da:	bf00      	nop
 80059dc:	fffff000 	.word	0xfffff000

080059e0 <SDMMC_CmdAppOperCommand>:
{
 80059e0:	b430      	push	{r4, r5}
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80059e2:	4d06      	ldr	r5, [pc, #24]	; (80059fc <SDMMC_CmdAppOperCommand+0x1c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80059e4:	f240 4269 	movw	r2, #1129	; 0x469
 80059e8:	4c05      	ldr	r4, [pc, #20]	; (8005a00 <SDMMC_CmdAppOperCommand+0x20>)
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80059ea:	430d      	orrs	r5, r1
  SDMMCx->ARG = Command->Argument;
 80059ec:	6085      	str	r5, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80059ee:	68c1      	ldr	r1, [r0, #12]
 80059f0:	400c      	ands	r4, r1
 80059f2:	4322      	orrs	r2, r4
}
 80059f4:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80059f6:	60c2      	str	r2, [r0, #12]
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80059f8:	f7ff be38 	b.w	800566c <SDMMC_GetCmdResp3>
 80059fc:	80100000 	.word	0x80100000
 8005a00:	fffff000 	.word	0xfffff000

08005a04 <SDMMC_CmdBusWidth>:
{
 8005a04:	b470      	push	{r4, r5, r6}
  SDMMCx->ARG = Command->Argument;
 8005a06:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005a08:	f240 4446 	movw	r4, #1094	; 0x446
 8005a0c:	68c6      	ldr	r6, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8005a0e:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005a12:	4d04      	ldr	r5, [pc, #16]	; (8005a24 <SDMMC_CmdBusWidth+0x20>)
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8005a14:	2106      	movs	r1, #6
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005a16:	4035      	ands	r5, r6
 8005a18:	432c      	orrs	r4, r5
 8005a1a:	60c4      	str	r4, [r0, #12]
}
 8005a1c:	bc70      	pop	{r4, r5, r6}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8005a1e:	f7ff be51 	b.w	80056c4 <SDMMC_GetCmdResp1>
 8005a22:	bf00      	nop
 8005a24:	fffff000 	.word	0xfffff000

08005a28 <SDMMC_CmdSendSCR>:
  SDMMCx->ARG = Command->Argument;
 8005a28:	2200      	movs	r2, #0
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8005a2a:	2133      	movs	r1, #51	; 0x33
{
 8005a2c:	b470      	push	{r4, r5, r6}
  SDMMCx->ARG = Command->Argument;
 8005a2e:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005a30:	f240 4473 	movw	r4, #1139	; 0x473
 8005a34:	68c6      	ldr	r6, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8005a36:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005a3a:	4d03      	ldr	r5, [pc, #12]	; (8005a48 <SDMMC_CmdSendSCR+0x20>)
 8005a3c:	4035      	ands	r5, r6
 8005a3e:	432c      	orrs	r4, r5
 8005a40:	60c4      	str	r4, [r0, #12]
}
 8005a42:	bc70      	pop	{r4, r5, r6}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8005a44:	f7ff be3e 	b.w	80056c4 <SDMMC_GetCmdResp1>
 8005a48:	fffff000 	.word	0xfffff000

08005a4c <SDMMC_CmdSendCID>:
{
 8005a4c:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8005a4e:	2400      	movs	r4, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005a50:	4905      	ldr	r1, [pc, #20]	; (8005a68 <SDMMC_CmdSendCID+0x1c>)
 8005a52:	f240 42c2 	movw	r2, #1218	; 0x4c2
  SDMMCx->ARG = Command->Argument;
 8005a56:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005a58:	68c4      	ldr	r4, [r0, #12]
 8005a5a:	4021      	ands	r1, r4
}
 8005a5c:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005a60:	430a      	orrs	r2, r1
 8005a62:	60c2      	str	r2, [r0, #12]
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005a64:	f7ff bdce 	b.w	8005604 <SDMMC_GetCmdResp2>
 8005a68:	fffff000 	.word	0xfffff000

08005a6c <SDMMC_CmdSendCSD>:
{
 8005a6c:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8005a6e:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005a70:	f240 42c9 	movw	r2, #1225	; 0x4c9
 8005a74:	68c1      	ldr	r1, [r0, #12]
 8005a76:	4c04      	ldr	r4, [pc, #16]	; (8005a88 <SDMMC_CmdSendCSD+0x1c>)
 8005a78:	400c      	ands	r4, r1
 8005a7a:	4322      	orrs	r2, r4
}
 8005a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005a80:	60c2      	str	r2, [r0, #12]
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005a82:	f7ff bdbf 	b.w	8005604 <SDMMC_GetCmdResp2>
 8005a86:	bf00      	nop
 8005a88:	fffff000 	.word	0xfffff000

08005a8c <SDMMC_CmdSetRelAdd>:
{
 8005a8c:	b470      	push	{r4, r5, r6}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005a8e:	4b2c      	ldr	r3, [pc, #176]	; (8005b40 <SDMMC_CmdSetRelAdd+0xb4>)
  SDMMCx->ARG = Command->Argument;
 8005a90:	2400      	movs	r4, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005a92:	4a2c      	ldr	r2, [pc, #176]	; (8005b44 <SDMMC_CmdSetRelAdd+0xb8>)
{
 8005a94:	b083      	sub	sp, #12
  SDMMCx->ARG = Command->Argument;
 8005a96:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005a98:	f240 4443 	movw	r4, #1091	; 0x443
 8005a9c:	68c6      	ldr	r6, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005a9e:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005aa0:	4d29      	ldr	r5, [pc, #164]	; (8005b48 <SDMMC_CmdSetRelAdd+0xbc>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005aa2:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005aa6:	4035      	ands	r5, r6
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005aa8:	0a5a      	lsrs	r2, r3, #9
 8005aaa:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005aae:	432c      	orrs	r4, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005ab0:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005ab4:	60c4      	str	r4, [r0, #12]
 8005ab6:	e003      	b.n	8005ac0 <SDMMC_CmdSetRelAdd+0x34>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005ab8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005aba:	f012 0f45 	tst.w	r2, #69	; 0x45
 8005abe:	d107      	bne.n	8005ad0 <SDMMC_CmdSetRelAdd+0x44>
    if (count-- == 0)
 8005ac0:	f113 33ff 	adds.w	r3, r3, #4294967295
 8005ac4:	d2f8      	bcs.n	8005ab8 <SDMMC_CmdSetRelAdd+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8005ac6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005aca:	b003      	add	sp, #12
 8005acc:	bc70      	pop	{r4, r5, r6}
 8005ace:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005ad0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005ad2:	075c      	lsls	r4, r3, #29
 8005ad4:	d411      	bmi.n	8005afa <SDMMC_CmdSetRelAdd+0x6e>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005ad6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005ad8:	f013 0301 	ands.w	r3, r3, #1
 8005adc:	d107      	bne.n	8005aee <SDMMC_CmdSetRelAdd+0x62>
  return (uint8_t)(SDMMCx->RESPCMD);
 8005ade:	6902      	ldr	r2, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005ae0:	b2d2      	uxtb	r2, r2
 8005ae2:	2a03      	cmp	r2, #3
 8005ae4:	d00f      	beq.n	8005b06 <SDMMC_CmdSetRelAdd+0x7a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ae6:	2001      	movs	r0, #1
}
 8005ae8:	b003      	add	sp, #12
 8005aea:	bc70      	pop	{r4, r5, r6}
 8005aec:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005aee:	2301      	movs	r3, #1
 8005af0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005af2:	4618      	mov	r0, r3
}
 8005af4:	b003      	add	sp, #12
 8005af6:	bc70      	pop	{r4, r5, r6}
 8005af8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005afa:	2304      	movs	r3, #4
 8005afc:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005afe:	4618      	mov	r0, r3
}
 8005b00:	b003      	add	sp, #12
 8005b02:	bc70      	pop	{r4, r5, r6}
 8005b04:	4770      	bx	lr
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8005b06:	f100 0214 	add.w	r2, r0, #20
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005b0a:	f240 54ff 	movw	r4, #1535	; 0x5ff
 8005b0e:	6384      	str	r4, [r0, #56]	; 0x38
  __IO uint32_t tmp = 0;
 8005b10:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8005b12:	9201      	str	r2, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 8005b14:	9b01      	ldr	r3, [sp, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005b18:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8005b1c:	d009      	beq.n	8005b32 <SDMMC_CmdSetRelAdd+0xa6>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005b1e:	045a      	lsls	r2, r3, #17
 8005b20:	d40a      	bmi.n	8005b38 <SDMMC_CmdSetRelAdd+0xac>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005b22:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005b26:	bf14      	ite	ne
 8005b28:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8005b2c:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8005b30:	e7cb      	b.n	8005aca <SDMMC_CmdSetRelAdd+0x3e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005b32:	0c1b      	lsrs	r3, r3, #16
 8005b34:	800b      	strh	r3, [r1, #0]
 8005b36:	e7c8      	b.n	8005aca <SDMMC_CmdSetRelAdd+0x3e>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005b38:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005b3c:	e7c5      	b.n	8005aca <SDMMC_CmdSetRelAdd+0x3e>
 8005b3e:	bf00      	nop
 8005b40:	200000a4 	.word	0x200000a4
 8005b44:	10624dd3 	.word	0x10624dd3
 8005b48:	fffff000 	.word	0xfffff000

08005b4c <Init_Display>:

//
//  }

void Init_Display(void)
{
 8005b4c:	b510      	push	{r4, lr}
	BSP_LCD_Init();
 8005b4e:	f7fb fa5b 	bl	8001008 <BSP_LCD_Init>

	/* Initialize TouchScreen in Interrupts Mode */
	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8005b52:	f7fa ff5d 	bl	8000a10 <BSP_LCD_GetXSize>
 8005b56:	4604      	mov	r4, r0
 8005b58:	f7fa ff66 	bl	8000a28 <BSP_LCD_GetYSize>
 8005b5c:	b281      	uxth	r1, r0
 8005b5e:	b2a0      	uxth	r0, r4
 8005b60:	f7fb fbfe 	bl	8001360 <BSP_TS_Init>

	BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FB_START_ADDRESS);
 8005b64:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8005b68:	2001      	movs	r0, #1
 8005b6a:	f7fa ff69 	bl	8000a40 <BSP_LCD_LayerDefaultInit>

	/* Set LCD Foreground Layer  */
	BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8005b6e:	2001      	movs	r0, #1
 8005b70:	f7fa ffa2 	bl	8000ab8 <BSP_LCD_SelectLayer>

	/* Enable LCD Display */
	BSP_LCD_DisplayOn();
 8005b74:	f7fb f972 	bl	8000e5c <BSP_LCD_DisplayOn>


	/* Clear the LCD */
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8005b78:	f04f 30ff 	mov.w	r0, #4294967295
 8005b7c:	f7fa ffae 	bl	8000adc <BSP_LCD_SetBackColor>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8005b80:	f04f 30ff 	mov.w	r0, #4294967295
 8005b84:	f7fa ffc6 	bl	8000b14 <BSP_LCD_Clear>


	/* Set the LCD Text Color */
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8005b88:	4802      	ldr	r0, [pc, #8]	; (8005b94 <Init_Display+0x48>)

	/* Display LCD messages */
	//BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"KiCAD Team Bitch !", CENTER_MODE);
	//BSP_LCD_DisplayStringAt(0, 35, (uint8_t *)"Drivers examples", CENTER_MODE);
}
 8005b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8005b8e:	f7fa bf99 	b.w	8000ac4 <BSP_LCD_SetTextColor>
 8005b92:	bf00      	nop
 8005b94:	ff000080 	.word	0xff000080

08005b98 <Display_Render>:


void Display_Render(void)
{
 8005b98:	b510      	push	{r4, lr}
	/* Clear the LCD */
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8005b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b9e:	f7fa ff9d 	bl	8000adc <BSP_LCD_SetBackColor>
	//BSP_LCD_Clear(LCD_COLOR_WHITE);

	/* Set the LCD Text Color */
	BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 8005ba2:	480c      	ldr	r0, [pc, #48]	; (8005bd4 <Display_Render+0x3c>)
 8005ba4:	f7fa ff8e 	bl	8000ac4 <BSP_LCD_SetTextColor>

	/* Main Analyzer Title */
	BSP_LCD_SetFont(&Font16);
 8005ba8:	480b      	ldr	r0, [pc, #44]	; (8005bd8 <Display_Render+0x40>)
 8005baa:	f7fa ffa5 	bl	8000af8 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"CPE Lyon : Raw Signal !", CENTER_MODE);
 8005bae:	2301      	movs	r3, #1
 8005bb0:	4a0a      	ldr	r2, [pc, #40]	; (8005bdc <Display_Render+0x44>)
 8005bb2:	210a      	movs	r1, #10
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	f7fb f845 	bl	8000c44 <BSP_LCD_DisplayStringAt>

	/* Plot Background */
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8005bba:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8005bbe:	f7fa ff81 	bl	8000ac4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(PLOT_X, PLOT_Y, PLOT_WIDTH, PLOT_HEIGHT);
 8005bc2:	2396      	movs	r3, #150	; 0x96
 8005bc4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8005bc8:	2128      	movs	r1, #40	; 0x28
 8005bca:	2014      	movs	r0, #20

	//Plot_Signal((uint8_t*)signal_test_buffer, SIGNAL_BUFF);
}
 8005bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	BSP_LCD_FillRect(PLOT_X, PLOT_Y, PLOT_WIDTH, PLOT_HEIGHT);
 8005bd0:	f7fb b91c 	b.w	8000e0c <BSP_LCD_FillRect>
 8005bd4:	ffffa500 	.word	0xffffa500
 8005bd8:	20000028 	.word	0x20000028
 8005bdc:	08009b50 	.word	0x08009b50

08005be0 <Draw_GUI>:

void Draw_GUI(void)
{
 8005be0:	b570      	push	{r4, r5, r6, lr}
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8005be2:	f04f 30ff 	mov.w	r0, #4294967295
 8005be6:	4c25      	ldr	r4, [pc, #148]	; (8005c7c <Draw_GUI+0x9c>)
 8005be8:	f7fa ff6c 	bl	8000ac4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(GUI_X, GUI_Y, GUI_WIDTH, GUI_HEIGHT);
 8005bec:	2350      	movs	r3, #80	; 0x50
 8005bee:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8005bf2:	21c3      	movs	r1, #195	; 0xc3
 8005bf4:	2014      	movs	r0, #20
		}
		else
		{
			BSP_LCD_FillRect(button_list[i].x_pos, button_list[i].y_pos, button_list[i].width, button_list[i].height);
		}
		BSP_LCD_SetFont(&Font8);
 8005bf6:	4e22      	ldr	r6, [pc, #136]	; (8005c80 <Draw_GUI+0xa0>)
 8005bf8:	f104 053c 	add.w	r5, r4, #60	; 0x3c
	BSP_LCD_FillRect(GUI_X, GUI_Y, GUI_WIDTH, GUI_HEIGHT);
 8005bfc:	f7fb f906 	bl	8000e0c <BSP_LCD_FillRect>
		BSP_LCD_SetTextColor(button_list[i].color);
 8005c00:	68e0      	ldr	r0, [r4, #12]
 8005c02:	f7fa ff5f 	bl	8000ac4 <BSP_LCD_SetTextColor>
		if(button_list[i].is_active == 0)
 8005c06:	7823      	ldrb	r3, [r4, #0]
 8005c08:	bb8b      	cbnz	r3, 8005c6e <Draw_GUI+0x8e>
			BSP_LCD_DrawRect(button_list[i].x_pos, button_list[i].y_pos, button_list[i].width, button_list[i].height);
 8005c0a:	8923      	ldrh	r3, [r4, #8]
 8005c0c:	88e2      	ldrh	r2, [r4, #6]
 8005c0e:	88a1      	ldrh	r1, [r4, #4]
 8005c10:	8860      	ldrh	r0, [r4, #2]
 8005c12:	f7fb f8c5 	bl	8000da0 <BSP_LCD_DrawRect>
		BSP_LCD_SetFont(&Font8);
 8005c16:	4630      	mov	r0, r6
 8005c18:	3414      	adds	r4, #20
 8005c1a:	f7fa ff6d 	bl	8000af8 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(button_list[i].x_pos + 15, button_list[i].y_pos + 15, button_list[i].text, LEFT_MODE);
 8005c1e:	f834 1c10 	ldrh.w	r1, [r4, #-16]
 8005c22:	f834 0c12 	ldrh.w	r0, [r4, #-18]
 8005c26:	2303      	movs	r3, #3
 8005c28:	310f      	adds	r1, #15
 8005c2a:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8005c2e:	300f      	adds	r0, #15
 8005c30:	b289      	uxth	r1, r1
 8005c32:	b280      	uxth	r0, r0
 8005c34:	f7fb f806 	bl	8000c44 <BSP_LCD_DisplayStringAt>
	for(int i = 0; i < NUMBER_OF_BUTTON ; i++)
 8005c38:	42ac      	cmp	r4, r5
 8005c3a:	d1e1      	bne.n	8005c00 <Draw_GUI+0x20>
	}

	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTCYAN);
 8005c3c:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8005c40:	f7fa ff40 	bl	8000ac4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(DETEC_CNT_X, DETEC_CNT_Y, DETEC_CNT_WIDTH, DETEC_CNT_HEIGHT);
 8005c44:	231e      	movs	r3, #30
 8005c46:	2264      	movs	r2, #100	; 0x64
 8005c48:	21f0      	movs	r1, #240	; 0xf0
 8005c4a:	2014      	movs	r0, #20
 8005c4c:	f7fb f8de 	bl	8000e0c <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8005c50:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8005c54:	f7fa ff36 	bl	8000ac4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font8);
 8005c58:	4809      	ldr	r0, [pc, #36]	; (8005c80 <Draw_GUI+0xa0>)
 8005c5a:	f7fa ff4d 	bl	8000af8 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(DETEC_CNT_X + 10, DETEC_CNT_Y + 10, detection_label, LEFT_MODE);
 8005c5e:	2303      	movs	r3, #3
 8005c60:	4a08      	ldr	r2, [pc, #32]	; (8005c84 <Draw_GUI+0xa4>)
 8005c62:	21fa      	movs	r1, #250	; 0xfa
 8005c64:	201e      	movs	r0, #30

}
 8005c66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	BSP_LCD_DisplayStringAt(DETEC_CNT_X + 10, DETEC_CNT_Y + 10, detection_label, LEFT_MODE);
 8005c6a:	f7fa bfeb 	b.w	8000c44 <BSP_LCD_DisplayStringAt>
			BSP_LCD_FillRect(button_list[i].x_pos, button_list[i].y_pos, button_list[i].width, button_list[i].height);
 8005c6e:	8923      	ldrh	r3, [r4, #8]
 8005c70:	88e2      	ldrh	r2, [r4, #6]
 8005c72:	88a1      	ldrh	r1, [r4, #4]
 8005c74:	8860      	ldrh	r0, [r4, #2]
 8005c76:	f7fb f8c9 	bl	8000e0c <BSP_LCD_FillRect>
 8005c7a:	e7cc      	b.n	8005c16 <Draw_GUI+0x36>
 8005c7c:	20000048 	.word	0x20000048
 8005c80:	20000038 	.word	0x20000038
 8005c84:	20000084 	.word	0x20000084

08005c88 <Plot_Signal>:

void Plot_Signal(uint8_t *buffer, uint16_t nbr_pts)
{
 8005c88:	b570      	push	{r4, r5, r6, lr}
 8005c8a:	4606      	mov	r6, r0
	float time_step = 0;

	time_step = 1;

	/* Clear Last Signal */
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8005c8c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
{
 8005c90:	460d      	mov	r5, r1
 8005c92:	ed2d 8b04 	vpush	{d8-d9}
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8005c96:	f7fa ff15 	bl	8000ac4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(PLOT_X, PLOT_Y, PLOT_WIDTH, PLOT_HEIGHT);
 8005c9a:	2396      	movs	r3, #150	; 0x96
 8005c9c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8005ca0:	2128      	movs	r1, #40	; 0x28
 8005ca2:	2014      	movs	r0, #20
 8005ca4:	f7fb f8b2 	bl	8000e0c <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);
 8005ca8:	4820      	ldr	r0, [pc, #128]	; (8005d2c <Plot_Signal+0xa4>)
 8005caa:	f7fa ff0b 	bl	8000ac4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(PLOT_X - 5, PLOT_Y - 5, PLOT_WIDTH + 10, PLOT_HEIGHT + 10);
 8005cae:	200f      	movs	r0, #15
 8005cb0:	23a0      	movs	r3, #160	; 0xa0
 8005cb2:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8005cb6:	2123      	movs	r1, #35	; 0x23
 8005cb8:	f7fb f8a8 	bl	8000e0c <BSP_LCD_FillRect>

	BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8005cbc:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8005cc0:	f7fa ff00 	bl	8000ac4 <BSP_LCD_SetTextColor>

	for(uint16_t i = 0 ; i < nbr_pts ; i++)
 8005cc4:	b37d      	cbz	r5, 8005d26 <Plot_Signal+0x9e>
 8005cc6:	3d01      	subs	r5, #1
 8005cc8:	1e74      	subs	r4, r6, #1
	{
		pts1 = buffer[i];
		pts1 = (pts1 / 0xFF);
 8005cca:	ed9f 9a19 	vldr	s18, [pc, #100]	; 8005d30 <Plot_Signal+0xa8>
 8005cce:	fa16 f585 	uxtah	r5, r6, r5
		pts1 = (1 - pts1);

		pts1 = PLOT_Y + pts1 * PLOT_HEIGHT;
 8005cd2:	eddf 8a18 	vldr	s17, [pc, #96]	; 8005d34 <Plot_Signal+0xac>
 8005cd6:	ed9f 8a18 	vldr	s16, [pc, #96]	; 8005d38 <Plot_Signal+0xb0>
		pts1 = buffer[i];
 8005cda:	f814 3f01 	ldrb.w	r3, [r4, #1]!
		pts1 = (1 - pts1);
 8005cde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0

		BSP_LCD_DrawPixel(PLOT_X + (uint16_t)(time_step * i), (uint16_t)(pts1), LCD_COLOR_YELLOW);
 8005ce2:	f06f 02ff 	mvn.w	r2, #255	; 0xff
		pts1 = buffer[i];
 8005ce6:	ee06 3a90 	vmov	s13, r3
		BSP_LCD_DrawPixel(PLOT_X + (uint16_t)(time_step * i), (uint16_t)(pts1), LCD_COLOR_YELLOW);
 8005cea:	1ba3      	subs	r3, r4, r6
		pts1 = buffer[i];
 8005cec:	eef8 6a66 	vcvt.f32.u32	s13, s13
		BSP_LCD_DrawPixel(PLOT_X + (uint16_t)(time_step * i), (uint16_t)(pts1), LCD_COLOR_YELLOW);
 8005cf0:	ee07 3a90 	vmov	s15, r3
 8005cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		pts1 = (pts1 / 0xFF);
 8005cf8:	ee86 6a89 	vdiv.f32	s12, s13, s18
		BSP_LCD_DrawPixel(PLOT_X + (uint16_t)(time_step * i), (uint16_t)(pts1), LCD_COLOR_YELLOW);
 8005cfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d00:	ee17 0a90 	vmov	r0, s15
 8005d04:	3014      	adds	r0, #20
 8005d06:	b280      	uxth	r0, r0
		pts1 = (1 - pts1);
 8005d08:	ee77 7a46 	vsub.f32	s15, s14, s12
		pts1 = PLOT_Y + pts1 * PLOT_HEIGHT;
 8005d0c:	eeb0 7a48 	vmov.f32	s14, s16
 8005d10:	eea7 7aa8 	vfma.f32	s14, s15, s17
		BSP_LCD_DrawPixel(PLOT_X + (uint16_t)(time_step * i), (uint16_t)(pts1), LCD_COLOR_YELLOW);
 8005d14:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8005d18:	ee17 3a90 	vmov	r3, s15
 8005d1c:	b299      	uxth	r1, r3
 8005d1e:	f7fb f859 	bl	8000dd4 <BSP_LCD_DrawPixel>
	for(uint16_t i = 0 ; i < nbr_pts ; i++)
 8005d22:	42a5      	cmp	r5, r4
 8005d24:	d1d9      	bne.n	8005cda <Plot_Signal+0x52>

	}


}
 8005d26:	ecbd 8b04 	vpop	{d8-d9}
 8005d2a:	bd70      	pop	{r4, r5, r6, pc}
 8005d2c:	ff404040 	.word	0xff404040
 8005d30:	437f0000 	.word	0x437f0000
 8005d34:	43160000 	.word	0x43160000
 8005d38:	42200000 	.word	0x42200000

08005d3c <TouchScreen_Polling>:
		}
	}
}

void TouchScreen_Polling(void)
{
 8005d3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	static uint8_t t = 0;
	uint16_t x = 0;
	uint16_t y = 0;

	BSP_TS_GetState(&TS_State);
 8005d40:	4e20      	ldr	r6, [pc, #128]	; (8005dc4 <TouchScreen_Polling+0x88>)
 8005d42:	4630      	mov	r0, r6
 8005d44:	f7fb fb78 	bl	8001438 <BSP_TS_GetState>

	if(TS_State.touchDetected)
 8005d48:	7833      	ldrb	r3, [r6, #0]
 8005d4a:	b1e3      	cbz	r3, 8005d86 <TouchScreen_Polling+0x4a>
 8005d4c:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8005dc8 <TouchScreen_Polling+0x8c>
	{
		x = TS_State.touchX[0];
		y = TS_State.touchY[0];

		for(int i = 0; i < NUMBER_OF_BUTTON ; i++)
 8005d50:	2500      	movs	r5, #0
		x = TS_State.touchX[0];
 8005d52:	8877      	ldrh	r7, [r6, #2]
			plot_id = j;
 8005d54:	f04f 0a01 	mov.w	sl, #1
 8005d58:	4644      	mov	r4, r8
			button_list[j].is_active = 0;
 8005d5a:	46a9      	mov	r9, r5
		y = TS_State.touchY[0];
 8005d5c:	89b6      	ldrh	r6, [r6, #12]
 8005d5e:	f8df b06c 	ldr.w	fp, [pc, #108]	; 8005dcc <TouchScreen_Polling+0x90>
		{
			if(x > button_list[i].x_pos && x < (button_list[i].x_pos + button_list[i].width))
 8005d62:	8863      	ldrh	r3, [r4, #2]
 8005d64:	42bb      	cmp	r3, r7
 8005d66:	d20a      	bcs.n	8005d7e <TouchScreen_Polling+0x42>
 8005d68:	88e2      	ldrh	r2, [r4, #6]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	429f      	cmp	r7, r3
 8005d6e:	da06      	bge.n	8005d7e <TouchScreen_Polling+0x42>
			{
				if(y > button_list[i].y_pos && y < (button_list[i].y_pos + button_list[i].height))
 8005d70:	88a3      	ldrh	r3, [r4, #4]
 8005d72:	42b3      	cmp	r3, r6
 8005d74:	d203      	bcs.n	8005d7e <TouchScreen_Polling+0x42>
 8005d76:	8922      	ldrh	r2, [r4, #8]
 8005d78:	4413      	add	r3, r2
 8005d7a:	429e      	cmp	r6, r3
 8005d7c:	db05      	blt.n	8005d8a <TouchScreen_Polling+0x4e>
		for(int i = 0; i < NUMBER_OF_BUTTON ; i++)
 8005d7e:	3501      	adds	r5, #1
 8005d80:	3414      	adds	r4, #20
 8005d82:	2d03      	cmp	r5, #3
 8005d84:	d1ed      	bne.n	8005d62 <TouchScreen_Polling+0x26>
			}
		}


	}
}
 8005d86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(j != index)
 8005d8a:	b16d      	cbz	r5, 8005da8 <TouchScreen_Polling+0x6c>
 8005d8c:	2d01      	cmp	r5, #1
			button_list[j].is_active = 0;
 8005d8e:	f888 9000 	strb.w	r9, [r8]
		if(j != index)
 8005d92:	d011      	beq.n	8005db8 <TouchScreen_Polling+0x7c>
			plot_id = j;
 8005d94:	2302      	movs	r3, #2
			button_list[j].is_active = 0;
 8005d96:	f888 9014 	strb.w	r9, [r8, #20]
			button_list[j].is_active = 1;
 8005d9a:	f888 a028 	strb.w	sl, [r8, #40]	; 0x28
 8005d9e:	f88b 3000 	strb.w	r3, [fp]
					Draw_GUI();
 8005da2:	f7ff ff1d 	bl	8005be0 <Draw_GUI>
 8005da6:	e7ea      	b.n	8005d7e <TouchScreen_Polling+0x42>
			button_list[j].is_active = 1;
 8005da8:	f888 a000 	strb.w	sl, [r8]
			plot_id = j;
 8005dac:	462b      	mov	r3, r5
			button_list[j].is_active = 0;
 8005dae:	f888 5014 	strb.w	r5, [r8, #20]
 8005db2:	f888 5028 	strb.w	r5, [r8, #40]	; 0x28
 8005db6:	e7f2      	b.n	8005d9e <TouchScreen_Polling+0x62>
			plot_id = j;
 8005db8:	462b      	mov	r3, r5
			button_list[j].is_active = 1;
 8005dba:	f888 5014 	strb.w	r5, [r8, #20]
			button_list[j].is_active = 0;
 8005dbe:	f888 9028 	strb.w	r9, [r8, #40]	; 0x28
 8005dc2:	e7ec      	b.n	8005d9e <TouchScreen_Polling+0x62>
 8005dc4:	200002bc 	.word	0x200002bc
 8005dc8:	20000048 	.word	0x20000048
 8005dcc:	200002e8 	.word	0x200002e8

08005dd0 <get_current_plot_ID>:

PLOT_ID get_current_plot_ID()
{
	return plot_id;
 8005dd0:	4b01      	ldr	r3, [pc, #4]	; (8005dd8 <get_current_plot_ID+0x8>)
}
 8005dd2:	7818      	ldrb	r0, [r3, #0]
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	200002e8 	.word	0x200002e8

08005ddc <HAL_TIM_PeriodElapsedCallback>:
//		}



	}
	else if(htim->Instance==TIM3)
 8005ddc:	6802      	ldr	r2, [r0, #0]
 8005dde:	4b03      	ldr	r3, [pc, #12]	; (8005dec <HAL_TIM_PeriodElapsedCallback+0x10>)
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d000      	beq.n	8005de6 <HAL_TIM_PeriodElapsedCallback+0xa>
	{
		TouchScreen_Polling();
	}
}
 8005de4:	4770      	bx	lr
		TouchScreen_Polling();
 8005de6:	f7ff bfa9 	b.w	8005d3c <TouchScreen_Polling>
 8005dea:	bf00      	nop
 8005dec:	40000400 	.word	0x40000400

08005df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005df4:	2400      	movs	r4, #0
{
 8005df6:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005df8:	2230      	movs	r2, #48	; 0x30
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005dfa:	2502      	movs	r5, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005dfc:	4621      	mov	r1, r4
 8005dfe:	a807      	add	r0, sp, #28
 8005e00:	f001 f97c 	bl	80070fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005e04:	4621      	mov	r1, r4
 8005e06:	2284      	movs	r2, #132	; 0x84
 8005e08:	a813      	add	r0, sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005e0a:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8005e0c:	2601      	movs	r6, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8005e0e:	2709      	movs	r7, #9

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8005e10:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8005ed8 <SystemClock_Config+0xe8>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005e14:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8005e18:	e9cd 4404 	strd	r4, r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005e1c:	f001 f96e 	bl	80070fc <memset>
  HAL_PWR_EnableBkUpAccess();
 8005e20:	f7fd fa8e 	bl	8003340 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e24:	4a2a      	ldr	r2, [pc, #168]	; (8005ed0 <SystemClock_Config+0xe0>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e26:	4b2b      	ldr	r3, [pc, #172]	; (8005ed4 <SystemClock_Config+0xe4>)
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005e28:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e2a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8005e2c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8005e30:	6411      	str	r1, [r2, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005e32:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e36:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005e38:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8005e3c:	9200      	str	r2, [sp, #0]
 8005e3e:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005e46:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLM = 25;
 8005e48:	2219      	movs	r2, #25
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e4a:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005e4c:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005e4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8005e56:	9707      	str	r7, [sp, #28]
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8005e58:	9712      	str	r7, [sp, #72]	; 0x48
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005e5a:	270f      	movs	r7, #15
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e5c:	9301      	str	r3, [sp, #4]
 8005e5e:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLN = 400;
 8005e60:	f44f 73c8 	mov.w	r3, #400	; 0x190
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005e64:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 400;
 8005e66:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 25;
 8005e68:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005e6c:	e9cd 650c 	strd	r6, r5, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005e70:	f7fd fb34 	bl	80034dc <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005e74:	f7fd fa6c 	bl	8003350 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005e78:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005e7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8005e80:	a802      	add	r0, sp, #8
 8005e82:	2106      	movs	r1, #6
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005e84:	9702      	str	r7, [sp, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8005e86:	2703      	movs	r7, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005e88:	e9cd 2305 	strd	r2, r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005e8c:	e9cd 5403 	strd	r5, r4, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8005e90:	f7fd fd24 	bl	80038dc <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8005e94:	f44f 7ec0 	mov.w	lr, #384	; 0x180
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8005e98:	f04f 0c05 	mov.w	ip, #5
  PeriphClkInitStruct.PLLSAIDivQ = 1;
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8005e9c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8005ea0:	f44f 7200 	mov.w	r2, #512	; 0x200
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8005ea4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005ea8:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8005eaa:	9519      	str	r5, [sp, #100]	; 0x64
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8005eac:	961d      	str	r6, [sp, #116]	; 0x74
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005eae:	9424      	str	r4, [sp, #144]	; 0x90
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8005eb0:	9433      	str	r4, [sp, #204]	; 0xcc
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8005eb2:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8005eb6:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8005eba:	9332      	str	r3, [sp, #200]	; 0xc8
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8005ebc:	e9cd c71a 	strd	ip, r7, [sp, #104]	; 0x68
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8005ec0:	e9cd 121e 	strd	r1, r2, [sp, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005ec4:	f7fd fdc8 	bl	8003a58 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8005ec8:	b034      	add	sp, #208	; 0xd0
 8005eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ece:	bf00      	nop
 8005ed0:	40023800 	.word	0x40023800
 8005ed4:	40007000 	.word	0x40007000
 8005ed8:	00a00068 	.word	0x00a00068

08005edc <main>:
{
 8005edc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8005ee0:	b0a3      	sub	sp, #140	; 0x8c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005ee2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005ee6:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8005eea:	4ad8      	ldr	r2, [pc, #864]	; (800624c <main+0x370>)
 8005eec:	2100      	movs	r1, #0
 8005eee:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8005ef2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005ef6:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8005efa:	6953      	ldr	r3, [r2, #20]
 8005efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f00:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005f02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005f06:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8005f0a:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8005f0e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8005f12:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005f16:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005f1a:	f3c3 06c9 	ubfx	r6, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8005f1e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8005f22:	07b7      	lsls	r7, r6, #30
 8005f24:	015c      	lsls	r4, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005f26:	ea04 050c 	and.w	r5, r4, ip
 8005f2a:	4638      	mov	r0, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005f2c:	4631      	mov	r1, r6
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005f2e:	ea40 0305 	orr.w	r3, r0, r5
      } while (ways-- != 0U);
 8005f32:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005f34:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
 8005f38:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8005f3c:	1c4b      	adds	r3, r1, #1
 8005f3e:	d1f6      	bne.n	8005f2e <main+0x52>
 8005f40:	3c20      	subs	r4, #32
    } while(sets-- != 0U);
 8005f42:	f114 0f20 	cmn.w	r4, #32
 8005f46:	d1ee      	bne.n	8005f26 <main+0x4a>
 8005f48:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8005f4c:	6953      	ldr	r3, [r2, #20]
 8005f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f52:	6153      	str	r3, [r2, #20]
 8005f54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005f58:	f3bf 8f6f 	isb	sy
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f5c:	4bbc      	ldr	r3, [pc, #752]	; (8006250 <main+0x374>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f5e:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f60:	2502      	movs	r5, #2
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8005f62:	f04f 0b08 	mov.w	fp, #8
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f66:	9301      	str	r3, [sp, #4]
  HAL_Init();
 8005f68:	f7fb fb52 	bl	8001610 <HAL_Init>
  SystemClock_Config();
 8005f6c:	f7ff ff40 	bl	8005df0 <SystemClock_Config>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f70:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f72:	9418      	str	r4, [sp, #96]	; 0x60
  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005f74:	f04f 0904 	mov.w	r9, #4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f78:	9419      	str	r4, [sp, #100]	; 0x64
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8005f7a:	2201      	movs	r2, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f7c:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8005f7e:	2120      	movs	r1, #32
 8005f80:	48b4      	ldr	r0, [pc, #720]	; (8006254 <main+0x378>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f82:	2703      	movs	r7, #3
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005f84:	f04f 0a0b 	mov.w	sl, #11
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8005f88:	f04f 080a 	mov.w	r8, #10
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f8c:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f90:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8005f92:	f046 0c10 	orr.w	ip, r6, #16
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f96:	4616      	mov	r6, r2
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f98:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8005f9c:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8005fa0:	f00c 0c10 	and.w	ip, ip, #16
 8005fa4:	f8cd c010 	str.w	ip, [sp, #16]
 8005fa8:	f8dd c010 	ldr.w	ip, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005fac:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8005fb0:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
 8005fb4:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8005fb8:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8005fbc:	f00c 0c40 	and.w	ip, ip, #64	; 0x40
 8005fc0:	f8cd c014 	str.w	ip, [sp, #20]
 8005fc4:	f8dd c014 	ldr.w	ip, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fc8:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8005fcc:	ea4c 0c05 	orr.w	ip, ip, r5
 8005fd0:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8005fd4:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8005fd8:	ea0c 0c05 	and.w	ip, ip, r5
 8005fdc:	f8cd c018 	str.w	ip, [sp, #24]
 8005fe0:	f8dd c018 	ldr.w	ip, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005fe4:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8005fe8:	ea4c 0c0b 	orr.w	ip, ip, fp
 8005fec:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8005ff0:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8005ff4:	ea0c 0c0b 	and.w	ip, ip, fp
 8005ff8:	f8cd c01c 	str.w	ip, [sp, #28]
 8005ffc:	f8dd c01c 	ldr.w	ip, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006000:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8006004:	ea4c 0c09 	orr.w	ip, ip, r9
 8006008:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800600c:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8006010:	ea0c 0c09 	and.w	ip, ip, r9
 8006014:	f8cd c020 	str.w	ip, [sp, #32]
 8006018:	f8dd c020 	ldr.w	ip, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800601c:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8006020:	ea4c 0c02 	orr.w	ip, ip, r2
 8006024:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8006028:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800602c:	ea0c 0c02 	and.w	ip, ip, r2
 8006030:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8006034:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006038:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800603c:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
 8006040:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8006044:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8006048:	f40c 7c00 	and.w	ip, ip, #512	; 0x200
 800604c:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8006050:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006054:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8006058:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 800605c:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8006060:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8006064:	f40c 7c80 	and.w	ip, ip, #256	; 0x100
 8006068:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800606c:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8006070:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8006074:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
 8006078:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800607c:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8006080:	f40c 6c80 	and.w	ip, ip, #1024	; 0x400
 8006084:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8006088:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800608c:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8006090:	ea4c 0c01 	orr.w	ip, ip, r1
 8006094:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8006098:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800609c:	ea0c 0c01 	and.w	ip, ip, r1
 80060a0:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 80060a4:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80060a8:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 80060ac:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 80060b0:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 80060b4:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 80060b8:	9301      	str	r3, [sp, #4]
 80060ba:	f00c 0c80 	and.w	ip, ip, #128	; 0x80
 80060be:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 80060c2:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80060c6:	f7fc fc21 	bl	800290c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80060ca:	4622      	mov	r2, r4
 80060cc:	210c      	movs	r1, #12
 80060ce:	4862      	ldr	r0, [pc, #392]	; (8006258 <main+0x37c>)
 80060d0:	f7fc fc1c 	bl	800290c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80060d4:	4632      	mov	r2, r6
 80060d6:	4659      	mov	r1, fp
 80060d8:	4860      	ldr	r0, [pc, #384]	; (800625c <main+0x380>)
 80060da:	f7fc fc17 	bl	800290c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80060de:	4632      	mov	r2, r6
 80060e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80060e4:	485c      	ldr	r0, [pc, #368]	; (8006258 <main+0x37c>)
 80060e6:	f7fc fc11 	bl	800290c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80060ea:	4622      	mov	r2, r4
 80060ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060f0:	485b      	ldr	r0, [pc, #364]	; (8006260 <main+0x384>)
 80060f2:	f7fc fc0b 	bl	800290c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80060f6:	4622      	mov	r2, r4
 80060f8:	21c8      	movs	r1, #200	; 0xc8
 80060fa:	485a      	ldr	r0, [pc, #360]	; (8006264 <main+0x388>)
 80060fc:	f7fc fc06 	bl	800290c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8006100:	a915      	add	r1, sp, #84	; 0x54
 8006102:	4859      	ldr	r0, [pc, #356]	; (8006268 <main+0x38c>)
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8006104:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006108:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800610c:	f7fc fae0 	bl	80026d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8006110:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006114:	a915      	add	r1, sp, #84	; 0x54
 8006116:	4853      	ldr	r0, [pc, #332]	; (8006264 <main+0x388>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006118:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800611a:	e9cd 2515 	strd	r2, r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800611e:	e9cd 7a18 	strd	r7, sl, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006122:	f7fc fad5 	bl	80026d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006126:	2312      	movs	r3, #18
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8006128:	f44f 7240 	mov.w	r2, #768	; 0x300
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800612c:	a915      	add	r1, sp, #84	; 0x54
 800612e:	484f      	ldr	r0, [pc, #316]	; (800626c <main+0x390>)
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8006130:	9215      	str	r2, [sp, #84]	; 0x54
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006132:	f8cd 9064 	str.w	r9, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006136:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006138:	e9cd 3616 	strd	r3, r6, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800613c:	f7fc fac8 	bl	80026d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8006140:	f643 4223 	movw	r2, #15395	; 0x3c23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006144:	a915      	add	r1, sp, #84	; 0x54
 8006146:	4849      	ldr	r0, [pc, #292]	; (800626c <main+0x390>)
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8006148:	9215      	str	r2, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800614a:	9718      	str	r7, [sp, #96]	; 0x60
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800614c:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006150:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006154:	f7fc fabc 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8006158:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800615a:	a915      	add	r1, sp, #84	; 0x54
 800615c:	483d      	ldr	r0, [pc, #244]	; (8006254 <main+0x378>)
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800615e:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006160:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8006164:	e9cd 4b18 	strd	r4, fp, [sp, #96]	; 0x60
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8006168:	f7fc fab2 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800616c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8006170:	a915      	add	r1, sp, #84	; 0x54
 8006172:	483f      	ldr	r0, [pc, #252]	; (8006270 <main+0x394>)
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8006174:	9215      	str	r2, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006176:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800617a:	e9cd 4618 	strd	r4, r6, [sp, #96]	; 0x60
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800617e:	f7fc faa7 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8006182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8006186:	a915      	add	r1, sp, #84	; 0x54
 8006188:	483a      	ldr	r0, [pc, #232]	; (8006274 <main+0x398>)
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800618a:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800618c:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8006190:	f7fc fa9e 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8006194:	4b38      	ldr	r3, [pc, #224]	; (8006278 <main+0x39c>)
 8006196:	2240      	movs	r2, #64	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8006198:	a915      	add	r1, sp, #84	; 0x54
 800619a:	482e      	ldr	r0, [pc, #184]	; (8006254 <main+0x378>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800619c:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800619e:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80061a2:	f7fc fa95 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80061a6:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061aa:	a915      	add	r1, sp, #84	; 0x54
 80061ac:	4830      	ldr	r0, [pc, #192]	; (8006270 <main+0x394>)
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80061ae:	9215      	str	r2, [sp, #84]	; 0x54
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80061b0:	e9cd 7818 	strd	r7, r8, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061b4:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061b8:	f7fc fa8a 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80061bc:	22f0      	movs	r2, #240	; 0xf0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80061be:	a915      	add	r1, sp, #84	; 0x54
 80061c0:	4825      	ldr	r0, [pc, #148]	; (8006258 <main+0x37c>)
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80061c2:	9215      	str	r2, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061c4:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80061c8:	e9cd 4818 	strd	r4, r8, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80061cc:	f7fc fa80 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80061d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80061d4:	a915      	add	r1, sp, #84	; 0x54
 80061d6:	4823      	ldr	r0, [pc, #140]	; (8006264 <main+0x388>)
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80061d8:	9215      	str	r2, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061da:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80061de:	e9cd 4818 	strd	r4, r8, [sp, #96]	; 0x60
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80061e2:	f7fc fa75 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80061e6:	2220      	movs	r2, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80061e8:	a915      	add	r1, sp, #84	; 0x54
 80061ea:	481a      	ldr	r0, [pc, #104]	; (8006254 <main+0x378>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80061ec:	9215      	str	r2, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061ee:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061f0:	e9cd 6416 	strd	r6, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80061f4:	f7fc fa6c 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80061f8:	f241 020c 	movw	r2, #4108	; 0x100c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80061fc:	a915      	add	r1, sp, #84	; 0x54
 80061fe:	4816      	ldr	r0, [pc, #88]	; (8006258 <main+0x37c>)
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8006200:	9215      	str	r2, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006202:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006204:	e9cd 6416 	strd	r6, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006208:	f7fc fa62 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800620c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8006210:	a915      	add	r1, sp, #84	; 0x54
 8006212:	481a      	ldr	r0, [pc, #104]	; (800627c <main+0x3a0>)
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8006214:	9215      	str	r2, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006216:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800621a:	f7fc fa59 	bl	80026d0 <HAL_GPIO_Init>
  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800621e:	a915      	add	r1, sp, #84	; 0x54
 8006220:	480e      	ldr	r0, [pc, #56]	; (800625c <main+0x380>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006222:	e9cd b615 	strd	fp, r6, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006226:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800622a:	f7fc fa51 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800622e:	2210      	movs	r2, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8006230:	a915      	add	r1, sp, #84	; 0x54
 8006232:	4808      	ldr	r0, [pc, #32]	; (8006254 <main+0x378>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8006234:	9215      	str	r2, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006236:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800623a:	f7fc fa49 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800623e:	f248 0204 	movw	r2, #32772	; 0x8004
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006242:	a915      	add	r1, sp, #84	; 0x54
 8006244:	4806      	ldr	r0, [pc, #24]	; (8006260 <main+0x384>)
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8006246:	9215      	str	r2, [sp, #84]	; 0x54
 8006248:	e01a      	b.n	8006280 <main+0x3a4>
 800624a:	bf00      	nop
 800624c:	e000ed00 	.word	0xe000ed00
 8006250:	40023800 	.word	0x40023800
 8006254:	40020c00 	.word	0x40020c00
 8006258:	40022000 	.word	0x40022000
 800625c:	40022800 	.word	0x40022800
 8006260:	40021c00 	.word	0x40021c00
 8006264:	40021800 	.word	0x40021800
 8006268:	40021000 	.word	0x40021000
 800626c:	40020400 	.word	0x40020400
 8006270:	40020000 	.word	0x40020000
 8006274:	40022400 	.word	0x40022400
 8006278:	10120000 	.word	0x10120000
 800627c:	40020800 	.word	0x40020800
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006280:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006284:	f7fc fa24 	bl	80026d0 <HAL_GPIO_Init>
  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006288:	2205      	movs	r2, #5
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800628a:	a915      	add	r1, sp, #84	; 0x54
 800628c:	48cc      	ldr	r0, [pc, #816]	; (80065c0 <main+0x6e4>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800628e:	9219      	str	r2, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006290:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006294:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8006298:	f7fc fa1a 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800629c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80062a0:	a915      	add	r1, sp, #84	; 0x54
 80062a2:	48c8      	ldr	r0, [pc, #800]	; (80065c4 <main+0x6e8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80062a4:	e9cd 2615 	strd	r2, r6, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062a8:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80062ac:	f7fc fa10 	bl	80026d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80062b0:	a915      	add	r1, sp, #84	; 0x54
 80062b2:	48c3      	ldr	r0, [pc, #780]	; (80065c0 <main+0x6e4>)
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80062b4:	9519      	str	r5, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062b6:	e9cd 6515 	strd	r6, r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062ba:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80062be:	f7fc fa07 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80062c2:	f44f 7280 	mov.w	r2, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80062c6:	a915      	add	r1, sp, #84	; 0x54
 80062c8:	48bf      	ldr	r0, [pc, #764]	; (80065c8 <main+0x6ec>)
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80062ca:	9215      	str	r2, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062cc:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80062d0:	e9cd 4618 	strd	r4, r6, [sp, #96]	; 0x60
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80062d4:	f7fc f9fc 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80062d8:	4bbc      	ldr	r3, [pc, #752]	; (80065cc <main+0x6f0>)
 80062da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80062de:	a915      	add	r1, sp, #84	; 0x54
 80062e0:	48b7      	ldr	r0, [pc, #732]	; (80065c0 <main+0x6e4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062e2:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80062e4:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80062e8:	f7fc f9f2 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80062ec:	22c0      	movs	r2, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80062ee:	a915      	add	r1, sp, #84	; 0x54
 80062f0:	48b7      	ldr	r0, [pc, #732]	; (80065d0 <main+0x6f4>)
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80062f2:	9215      	str	r2, [sp, #84]	; 0x54
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80062f4:	e9cd 7b18 	strd	r7, fp, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062f8:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80062fc:	f7fc f9e8 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8006300:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8006302:	a915      	add	r1, sp, #84	; 0x54
 8006304:	48af      	ldr	r0, [pc, #700]	; (80065c4 <main+0x6e8>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8006306:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
  hltdc.Instance = LTDC;
 800630a:	f8df b2fc 	ldr.w	fp, [pc, #764]	; 8006608 <main+0x72c>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800630e:	e9cd 3515 	strd	r3, r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006312:	e9cd 4717 	strd	r4, r7, [sp, #92]	; 0x5c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8006316:	f7fc f9db 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800631a:	22c8      	movs	r2, #200	; 0xc8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800631c:	a915      	add	r1, sp, #84	; 0x54
 800631e:	48ad      	ldr	r0, [pc, #692]	; (80065d4 <main+0x6f8>)
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8006320:	9215      	str	r2, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006322:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006324:	e9cd 6416 	strd	r6, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006328:	f7fc f9d2 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin 
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 800632c:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006330:	a915      	add	r1, sp, #84	; 0x54
 8006332:	48a9      	ldr	r0, [pc, #676]	; (80065d8 <main+0x6fc>)
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8006334:	9215      	str	r2, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006336:	e9cd 7416 	strd	r7, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800633a:	f7fc f9c9 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800633e:	2305      	movs	r3, #5
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006340:	a915      	add	r1, sp, #84	; 0x54
 8006342:	48a3      	ldr	r0, [pc, #652]	; (80065d0 <main+0x6f4>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8006344:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006348:	e9cd 3515 	strd	r3, r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800634c:	e9cd 4717 	strd	r4, r7, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006350:	f7fc f9be 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006354:	2232      	movs	r2, #50	; 0x32
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006356:	a915      	add	r1, sp, #84	; 0x54
 8006358:	489d      	ldr	r0, [pc, #628]	; (80065d0 <main+0x6f4>)
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800635a:	9215      	str	r2, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800635c:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006360:	e9cd 7a18 	strd	r7, sl, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006364:	f7fc f9b4 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8006368:	a915      	add	r1, sp, #84	; 0x54
 800636a:	489a      	ldr	r0, [pc, #616]	; (80065d4 <main+0x6f8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800636c:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800636e:	e9cd 9415 	strd	r9, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8006372:	f7fc f9ad 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006376:	2286      	movs	r2, #134	; 0x86
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006378:	a915      	add	r1, sp, #84	; 0x54
 800637a:	4893      	ldr	r0, [pc, #588]	; (80065c8 <main+0x6ec>)
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800637c:	9215      	str	r2, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800637e:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006382:	e9cd 7a18 	strd	r7, sl, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006386:	f7fc f9a3 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800638a:	a915      	add	r1, sp, #84	; 0x54
 800638c:	488e      	ldr	r0, [pc, #568]	; (80065c8 <main+0x6ec>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800638e:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006390:	e9cd 6715 	strd	r6, r7, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006394:	f7fc f99c 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006398:	2312      	movs	r3, #18
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800639a:	a915      	add	r1, sp, #84	; 0x54
 800639c:	4889      	ldr	r0, [pc, #548]	; (80065c4 <main+0x6e8>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800639e:	e9cd 3616 	strd	r3, r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80063a2:	f44f 73c0 	mov.w	r3, #384	; 0x180
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80063a6:	e9cd 7918 	strd	r7, r9, [sp, #96]	; 0x60
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80063aa:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80063ac:	f7fc f990 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80063b0:	2328      	movs	r3, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063b2:	a915      	add	r1, sp, #84	; 0x54
 80063b4:	4884      	ldr	r0, [pc, #528]	; (80065c8 <main+0x6ec>)
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80063b6:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80063b8:	e9cd 7818 	strd	r7, r8, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063bc:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063c0:	f7fc f986 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80063c4:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80063c6:	a915      	add	r1, sp, #84	; 0x54
 80063c8:	487e      	ldr	r0, [pc, #504]	; (80065c4 <main+0x6e8>)
  hdma2d.Instance = DMA2D;
 80063ca:	f8df 8240 	ldr.w	r8, [pc, #576]	; 800660c <main+0x730>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063ce:	e9cd 3515 	strd	r3, r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80063d2:	2309      	movs	r3, #9
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063d4:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80063d8:	9319      	str	r3, [sp, #100]	; 0x64
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80063da:	f7fc f979 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80063de:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80063e2:	2305      	movs	r3, #5
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063e4:	a915      	add	r1, sp, #84	; 0x54
 80063e6:	487d      	ldr	r0, [pc, #500]	; (80065dc <main+0x700>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80063e8:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80063ea:	9215      	str	r2, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063ec:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063ee:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063f2:	f7fc f96d 	bl	80026d0 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80063f6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80063f8:	4621      	mov	r1, r4
 80063fa:	4622      	mov	r2, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 80063fc:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8006400:	203c      	movs	r0, #60	; 0x3c
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006402:	f44c 0c80 	orr.w	ip, ip, #4194304	; 0x400000
 8006406:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800640a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006410:	9303      	str	r3, [sp, #12]
 8006412:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8006414:	f7fb fcc0 	bl	8001d98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8006418:	203c      	movs	r0, #60	; 0x3c
 800641a:	f7fb fcf3 	bl	8001e04 <HAL_NVIC_EnableIRQ>
  hdcmi.Instance = DCMI;
 800641e:	4b70      	ldr	r3, [pc, #448]	; (80065e0 <main+0x704>)
 8006420:	4a70      	ldr	r2, [pc, #448]	; (80065e4 <main+0x708>)
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8006422:	4618      	mov	r0, r3
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8006424:	631c      	str	r4, [r3, #48]	; 0x30
  hdcmi.Instance = DCMI;
 8006426:	601a      	str	r2, [r3, #0]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8006428:	e9c3 4401 	strd	r4, r4, [r3, #4]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800642c:	e9c3 4403 	strd	r4, r4, [r3, #12]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8006430:	e9c3 4405 	strd	r4, r4, [r3, #20]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8006434:	e9c3 4408 	strd	r4, r4, [r3, #32]
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8006438:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800643c:	f7fb fd08 	bl	8001e50 <HAL_DCMI_Init>
  hdma2d.Instance = DMA2D;
 8006440:	4b69      	ldr	r3, [pc, #420]	; (80065e8 <main+0x70c>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8006442:	4640      	mov	r0, r8
  hdma2d.Init.OutputOffset = 0;
 8006444:	f8c8 400c 	str.w	r4, [r8, #12]
  hdma2d.Instance = DMA2D;
 8006448:	f8c8 3000 	str.w	r3, [r8]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800644c:	e9c8 440a 	strd	r4, r4, [r8, #40]	; 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8006450:	e9c8 440c 	strd	r4, r4, [r8, #48]	; 0x30
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8006454:	e9c8 4401 	strd	r4, r4, [r8, #4]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8006458:	f7fb ff86 	bl	8002368 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800645c:	4631      	mov	r1, r6
 800645e:	4640      	mov	r0, r8
  hltdc.Init.TotalWidth = 565;
 8006460:	f240 181d 	movw	r8, #285	; 0x11d
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8006464:	f7fc f8e2 	bl	800262c <HAL_DMA2D_ConfigLayer>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8006468:	4b60      	ldr	r3, [pc, #384]	; (80065ec <main+0x710>)
 800646a:	4a61      	ldr	r2, [pc, #388]	; (80065f0 <main+0x714>)
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800646c:	f04f 0c40 	mov.w	ip, #64	; 0x40
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8006470:	a915      	add	r1, sp, #84	; 0x54
 8006472:	4618      	mov	r0, r3
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8006474:	601a      	str	r2, [r3, #0]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8006476:	2207      	movs	r2, #7
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8006478:	f8c3 900c 	str.w	r9, [r3, #12]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800647c:	9216      	str	r2, [sp, #88]	; 0x58
  SdramTiming.RowCycleDelay = 7;
 800647e:	9218      	str	r2, [sp, #96]	; 0x60
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8006480:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006484:	61dc      	str	r4, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8006486:	621a      	str	r2, [r3, #32]
  SdramTiming.LoadToActiveDelay = 2;
 8006488:	9515      	str	r5, [sp, #84]	; 0x54
  SdramTiming.SelfRefreshTime = 4;
 800648a:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
  hltdc.Init.AccumulatedActiveW = 533;
 800648e:	f240 191b 	movw	r9, #283	; 0x11b
  SdramTiming.RCDDelay = 2;
 8006492:	951b      	str	r5, [sp, #108]	; 0x6c
  SdramTiming.RPDelay = 2;
 8006494:	e9cd 7519 	strd	r7, r5, [sp, #100]	; 0x64
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8006498:	2710      	movs	r7, #16
 800649a:	611f      	str	r7, [r3, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800649c:	f44f 77c0 	mov.w	r7, #384	; 0x180
 80064a0:	e9c3 c705 	strd	ip, r7, [r3, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80064a4:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80064a8:	e9c3 4401 	strd	r4, r4, [r3, #4]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80064ac:	e9c3 7409 	strd	r7, r4, [r3, #36]	; 0x24
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80064b0:	f7fe fb0c 	bl	8004acc <HAL_SDRAM_Init>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80064b4:	4621      	mov	r1, r4
 80064b6:	a815      	add	r0, sp, #84	; 0x54
 80064b8:	2234      	movs	r2, #52	; 0x34
 80064ba:	f000 fe1f 	bl	80070fc <memset>
  hltdc.Instance = LTDC;
 80064be:	f8df c150 	ldr.w	ip, [pc, #336]	; 8006610 <main+0x734>
  hltdc.Init.VerticalSync = 9;
 80064c2:	2135      	movs	r1, #53	; 0x35
  hltdc.Init.AccumulatedVBP = 11;
 80064c4:	f240 2215 	movw	r2, #533	; 0x215
  hltdc.Init.AccumulatedActiveH = 283;
 80064c8:	f240 2e35 	movw	lr, #565	; 0x235
  hltdc.Init.HorizontalSync = 40;
 80064cc:	2309      	movs	r3, #9
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80064ce:	2028      	movs	r0, #40	; 0x28
  hltdc.Instance = LTDC;
 80064d0:	f8cb c000 	str.w	ip, [fp]
  hltdc.Init.HorizontalSync = 40;
 80064d4:	f8cb 3018 	str.w	r3, [fp, #24]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80064d8:	f8cb 0014 	str.w	r0, [fp, #20]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80064dc:	4658      	mov	r0, fp
  hltdc.Init.VerticalSync = 9;
 80064de:	f8cb 101c 	str.w	r1, [fp, #28]
  hltdc.Init.AccumulatedHBP = 53;
 80064e2:	f8cb a020 	str.w	sl, [fp, #32]
  hltdc.Init.TotalHeigh = 285;
 80064e6:	f8ab 4034 	strh.w	r4, [fp, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80064ea:	f88b 4036 	strb.w	r4, [fp, #54]	; 0x36
  hrtc.Instance = RTC;
 80064ee:	4f41      	ldr	r7, [pc, #260]	; (80065f4 <main+0x718>)
  hltdc.Init.AccumulatedActiveW = 533;
 80064f0:	e9cb 2909 	strd	r2, r9, [fp, #36]	; 0x24
  hltdc.Init.TotalWidth = 565;
 80064f4:	e9cb e80b 	strd	lr, r8, [fp, #44]	; 0x2c
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80064f8:	e9cb 4401 	strd	r4, r4, [fp, #4]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80064fc:	e9cb 4403 	strd	r4, r4, [fp, #12]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8006500:	f7fc fe0e 	bl	8003120 <HAL_LTDC_Init>
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8006504:	2307      	movs	r3, #7
  pLayerCfg.WindowX0 = 0;
 8006506:	f44f 7cf0 	mov.w	ip, #480	; 0x1e0
  pLayerCfg.Alpha0 = 0;
 800650a:	f44f 6ec0 	mov.w	lr, #1536	; 0x600
  pLayerCfg.WindowY0 = 0;
 800650e:	f44f 7988 	mov.w	r9, #272	; 0x110
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8006512:	931d      	str	r3, [sp, #116]	; 0x74
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8006514:	f04f 4840 	mov.w	r8, #3221225472	; 0xc0000000
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8006518:	23ff      	movs	r3, #255	; 0xff
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800651a:	a915      	add	r1, sp, #84	; 0x54
 800651c:	4622      	mov	r2, r4
 800651e:	4658      	mov	r0, fp
  pLayerCfg.Alpha0 = 0;
 8006520:	f8cd e070 	str.w	lr, [sp, #112]	; 0x70
  pLayerCfg.WindowX0 = 0;
 8006524:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
  pLayerCfg.FBStartAdress = 0xC0000000;
 8006528:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
  pLayerCfg.WindowY1 = 272;
 800652c:	9519      	str	r5, [sp, #100]	; 0x64
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800652e:	931a      	str	r3, [sp, #104]	; 0x68
  pLayerCfg.WindowX0 = 0;
 8006530:	9415      	str	r4, [sp, #84]	; 0x54
  pLayerCfg.WindowX1 = 480;
 8006532:	9417      	str	r4, [sp, #92]	; 0x5c
  pLayerCfg.Alpha = 255;
 8006534:	941b      	str	r4, [sp, #108]	; 0x6c
  pLayerCfg.ImageHeight = 272;
 8006536:	f8ad 4084 	strh.w	r4, [sp, #132]	; 0x84
  pLayerCfg.Backcolor.Green = 0;
 800653a:	f88d 4086 	strb.w	r4, [sp, #134]	; 0x86
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800653e:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
  pLayerCfg.WindowY0 = 0;
 8006542:	f8cd 9060 	str.w	r9, [sp, #96]	; 0x60
  pLayerCfg.ImageWidth = 480;
 8006546:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800654a:	f7fc fec5 	bl	80032d8 <HAL_LTDC_ConfigLayer>
  hqspi.Instance = QUADSPI;
 800654e:	4b2a      	ldr	r3, [pc, #168]	; (80065f8 <main+0x71c>)
  hqspi.Init.ClockPrescaler = 255;
 8006550:	21ff      	movs	r1, #255	; 0xff
  hqspi.Instance = QUADSPI;
 8006552:	4a2a      	ldr	r2, [pc, #168]	; (80065fc <main+0x720>)
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8006554:	4618      	mov	r0, r3
  hqspi.Instance = QUADSPI;
 8006556:	601a      	str	r2, [r3, #0]
  hqspi.Init.FifoThreshold = 1;
 8006558:	e9c3 1601 	strd	r1, r6, [r3, #4]
  hqspi.Init.FlashSize = 1;
 800655c:	e9c3 4603 	strd	r4, r6, [r3, #12]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8006560:	e9c3 4405 	strd	r4, r4, [r3, #20]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8006564:	e9c3 4407 	strd	r4, r4, [r3, #28]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8006568:	f7fc ff56 	bl	8003418 <HAL_QSPI_Init>
  RTC_AlarmTypeDef sAlarm = {0};
 800656c:	4621      	mov	r1, r4
 800656e:	a815      	add	r0, sp, #84	; 0x54
 8006570:	222c      	movs	r2, #44	; 0x2c
  RTC_TimeTypeDef sTime = {0};
 8006572:	940f      	str	r4, [sp, #60]	; 0x3c
  RTC_DateTypeDef sDate = {0};
 8006574:	9402      	str	r4, [sp, #8]
  RTC_TimeTypeDef sTime = {0};
 8006576:	9414      	str	r4, [sp, #80]	; 0x50
 8006578:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 800657c:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  RTC_AlarmTypeDef sAlarm = {0};
 8006580:	f000 fdbc 	bl	80070fc <memset>
  hrtc.Init.AsynchPrediv = 127;
 8006584:	237f      	movs	r3, #127	; 0x7f
  hrtc.Instance = RTC;
 8006586:	4a1e      	ldr	r2, [pc, #120]	; (8006600 <main+0x724>)
  hrtc.Init.SynchPrediv = 255;
 8006588:	21ff      	movs	r1, #255	; 0xff
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800658a:	4638      	mov	r0, r7
  hrtc.Init.AsynchPrediv = 127;
 800658c:	60bb      	str	r3, [r7, #8]
  hrtc.Init.SynchPrediv = 255;
 800658e:	60f9      	str	r1, [r7, #12]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006590:	607c      	str	r4, [r7, #4]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006592:	61bc      	str	r4, [r7, #24]
  hrtc.Instance = RTC;
 8006594:	603a      	str	r2, [r7, #0]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006596:	e9c7 4404 	strd	r4, r4, [r7, #16]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800659a:	f7fd fe13 	bl	80041c4 <HAL_RTC_Init>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800659e:	a90f      	add	r1, sp, #60	; 0x3c
 80065a0:	4632      	mov	r2, r6
 80065a2:	4638      	mov	r0, r7
  sTime.Hours = 0x0;
 80065a4:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
  sTime.Minutes = 0x0;
 80065a8:	f88d 403e 	strb.w	r4, [sp, #62]	; 0x3e
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80065ac:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80065b0:	f7fd fe50 	bl	8004254 <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80065b4:	a922      	add	r1, sp, #136	; 0x88
 80065b6:	4b13      	ldr	r3, [pc, #76]	; (8006604 <main+0x728>)
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80065b8:	4632      	mov	r2, r6
 80065ba:	4638      	mov	r0, r7
 80065bc:	e02a      	b.n	8006614 <main+0x738>
 80065be:	bf00      	nop
 80065c0:	40022000 	.word	0x40022000
 80065c4:	40021c00 	.word	0x40021c00
 80065c8:	40020000 	.word	0x40020000
 80065cc:	10120000 	.word	0x10120000
 80065d0:	40020800 	.word	0x40020800
 80065d4:	40021800 	.word	0x40021800
 80065d8:	40021400 	.word	0x40021400
 80065dc:	40020400 	.word	0x40020400
 80065e0:	20040b8c 	.word	0x20040b8c
 80065e4:	50050000 	.word	0x50050000
 80065e8:	4002b000 	.word	0x4002b000
 80065ec:	20040d1c 	.word	0x20040d1c
 80065f0:	a0000140 	.word	0xa0000140
 80065f4:	20040cbc 	.word	0x20040cbc
 80065f8:	20040d90 	.word	0x20040d90
 80065fc:	a0001000 	.word	0xa0001000
 8006600:	40002800 	.word	0x40002800
 8006604:	00010101 	.word	0x00010101
 8006608:	20040a9c 	.word	0x20040a9c
 800660c:	20040cdc 	.word	0x20040cdc
 8006610:	40016800 	.word	0x40016800
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8006614:	f841 3d80 	str.w	r3, [r1, #-128]!
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8006618:	f7fd feb2 	bl	8004380 <HAL_RTC_SetDate>
  sAlarm.Alarm = RTC_ALARM_A;
 800661c:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8006620:	a915      	add	r1, sp, #84	; 0x54
 8006622:	4632      	mov	r2, r6
 8006624:	4638      	mov	r0, r7
  sAlarm.AlarmDateWeekDay = 0x1;
 8006626:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
  sAlarm.Alarm = RTC_ALARM_A;
 800662a:	931f      	str	r3, [sp, #124]	; 0x7c
  sAlarm.AlarmTime.Hours = 0x0;
 800662c:	f8ad 4054 	strh.w	r4, [sp, #84]	; 0x54
  sAlarm.AlarmTime.Minutes = 0x0;
 8006630:	f88d 4056 	strb.w	r4, [sp, #86]	; 0x56
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8006634:	9416      	str	r4, [sp, #88]	; 0x58
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8006636:	941d      	str	r4, [sp, #116]	; 0x74
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006638:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800663c:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8006640:	f7fd fcaa 	bl	8003f98 <HAL_RTC_SetAlarm>
  sAlarm.Alarm = RTC_ALARM_B;
 8006644:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8006648:	a915      	add	r1, sp, #84	; 0x54
 800664a:	4632      	mov	r2, r6
 800664c:	4638      	mov	r0, r7
  sAlarm.Alarm = RTC_ALARM_B;
 800664e:	931f      	str	r3, [sp, #124]	; 0x7c
  sAlarm.AlarmDateWeekDay = 0x1;
 8006650:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8006654:	f7fd fca0 	bl	8003f98 <HAL_RTC_SetAlarm>
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8006658:	462a      	mov	r2, r5
 800665a:	4621      	mov	r1, r4
  hsd1.Instance = SDMMC1;
 800665c:	4d54      	ldr	r5, [pc, #336]	; (80067b0 <main+0x8d4>)
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800665e:	4638      	mov	r0, r7
 8006660:	f7fd ff12 	bl	8004488 <HAL_RTCEx_SetTimeStamp>
  hsd1.Instance = SDMMC1;
 8006664:	4b53      	ldr	r3, [pc, #332]	; (80067b4 <main+0x8d8>)
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8006666:	4628      	mov	r0, r5
  huart1.Instance = USART1;
 8006668:	4f53      	ldr	r7, [pc, #332]	; (80067b8 <main+0x8dc>)
  hsd1.Instance = SDMMC1;
 800666a:	602b      	str	r3, [r5, #0]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800666c:	e9c5 4401 	strd	r4, r4, [r5, #4]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8006670:	e9c5 4403 	strd	r4, r4, [r5, #12]
  hsd1.Init.ClockDiv = 0;
 8006674:	e9c5 4405 	strd	r4, r4, [r5, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8006678:	f7fe f982 	bl	8004980 <HAL_SD_Init>
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800667c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006680:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 8006682:	4d4e      	ldr	r5, [pc, #312]	; (80067bc <main+0x8e0>)
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8006684:	f7fe f998 	bl	80049b8 <HAL_SD_ConfigWideBusOperation>
  huart1.Instance = USART1;
 8006688:	4b4d      	ldr	r3, [pc, #308]	; (80067c0 <main+0x8e4>)
  huart1.Init.BaudRate = 115200;
 800668a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 800668e:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006690:	4618      	mov	r0, r3
  huart1.Init.Parity = UART_PARITY_NONE;
 8006692:	611c      	str	r4, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006694:	615a      	str	r2, [r3, #20]
  huart1.Init.BaudRate = 115200;
 8006696:	e9c3 7100 	strd	r7, r1, [r3]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800669a:	e9c3 4402 	strd	r4, r4, [r3, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800669e:	e9c3 4406 	strd	r4, r4, [r3, #24]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80066a2:	e9c3 4408 	strd	r4, r4, [r3, #32]
  hadc1.Instance = ADC1;
 80066a6:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80066aa:	f7fe fecb 	bl	8005444 <HAL_UART_Init>
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80066ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80066b2:	4b44      	ldr	r3, [pc, #272]	; (80067c4 <main+0x8e8>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80066b4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80066b8:	4628      	mov	r0, r5
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80066ba:	60aa      	str	r2, [r5, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80066bc:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc1.Init.ContinuousConvMode = ENABLE;
 80066be:	61ae      	str	r6, [r5, #24]
  hadc1.Init.NbrOfConversion = 1;
 80066c0:	61ee      	str	r6, [r5, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80066c2:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 80066c6:	9418      	str	r4, [sp, #96]	; 0x60
 80066c8:	9415      	str	r4, [sp, #84]	; 0x54
  hadc1.Init.ScanConvMode = DISABLE;
 80066ca:	612c      	str	r4, [r5, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80066cc:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80066d0:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80066d2:	60ec      	str	r4, [r5, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80066d4:	616c      	str	r4, [r5, #20]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80066d6:	e9c5 7100 	strd	r7, r1, [r5]
  ADC_ChannelConfTypeDef sConfig = {0};
 80066da:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  htim7.Instance = TIM7;
 80066de:	4f3a      	ldr	r7, [pc, #232]	; (80067c8 <main+0x8ec>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80066e0:	f7fa ffc6 	bl	8001670 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80066e4:	a915      	add	r1, sp, #84	; 0x54
 80066e6:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80066e8:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80066ea:	e9cd 4615 	strd	r4, r6, [sp, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80066ee:	f7fb fa89 	bl	8001c04 <HAL_ADC_ConfigChannel>
  htim7.Instance = TIM7;
 80066f2:	4a36      	ldr	r2, [pc, #216]	; (80067cc <main+0x8f0>)
  htim7.Init.Period = 4165;
 80066f4:	f241 0345 	movw	r3, #4165	; 0x1045
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80066f8:	2180      	movs	r1, #128	; 0x80
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80066fa:	4638      	mov	r0, r7
  htim3.Instance = TIM3;
 80066fc:	4e34      	ldr	r6, [pc, #208]	; (80067d0 <main+0x8f4>)
  htim7.Instance = TIM7;
 80066fe:	603a      	str	r2, [r7, #0]
  htim7.Init.Period = 4165;
 8006700:	60fb      	str	r3, [r7, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006702:	61b9      	str	r1, [r7, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006704:	9415      	str	r4, [sp, #84]	; 0x54
 8006706:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800670a:	e9c7 4401 	strd	r4, r4, [r7, #4]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800670e:	f7fe fc1b 	bl	8004f48 <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006712:	a915      	add	r1, sp, #84	; 0x54
 8006714:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006716:	9415      	str	r4, [sp, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006718:	9417      	str	r4, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800671a:	f7fe fc31 	bl	8004f80 <HAL_TIMEx_MasterConfigSynchronization>
  htim3.Init.Prescaler = 199;
 800671e:	22c7      	movs	r2, #199	; 0xc7
  htim3.Instance = TIM3;
 8006720:	492c      	ldr	r1, [pc, #176]	; (80067d4 <main+0x8f8>)
  htim3.Init.Period = 19999;
 8006722:	f644 631f 	movw	r3, #19999	; 0x4e1f
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006726:	4630      	mov	r0, r6
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006728:	9418      	str	r4, [sp, #96]	; 0x60
  htim3.Init.Period = 19999;
 800672a:	60f3      	str	r3, [r6, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800672c:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800672e:	940f      	str	r4, [sp, #60]	; 0x3c
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006730:	60b4      	str	r4, [r6, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006732:	6134      	str	r4, [r6, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006734:	61b4      	str	r4, [r6, #24]
  htim3.Init.Prescaler = 199;
 8006736:	e9c6 1200 	strd	r1, r2, [r6]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800673a:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800673e:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006742:	f7fe fc01 	bl	8004f48 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800674a:	a915      	add	r1, sp, #84	; 0x54
 800674c:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800674e:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006750:	f7fe fa22 	bl	8004b98 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006754:	a90f      	add	r1, sp, #60	; 0x3c
 8006756:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006758:	940f      	str	r4, [sp, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800675a:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800675c:	f7fe fc10 	bl	8004f80 <HAL_TIMEx_MasterConfigSynchronization>
  Init_Display();
 8006760:	f7ff f9f4 	bl	8005b4c <Init_Display>
  Display_Render();
 8006764:	f7ff fa18 	bl	8005b98 <Display_Render>
  Draw_GUI();
 8006768:	f7ff fa3a 	bl	8005be0 <Draw_GUI>
  Init_Sampling(&hadc1);
 800676c:	4628      	mov	r0, r5
 800676e:	f000 f83d 	bl	80067ec <Init_Sampling>
  HAL_TIM_Base_Start_IT(&htim3);
 8006772:	4630      	mov	r0, r6
 8006774:	f7fe f9fa 	bl	8004b6c <HAL_TIM_Base_Start_IT>
 8006778:	e002      	b.n	8006780 <main+0x8a4>
	HAL_Delay(50);
 800677a:	2032      	movs	r0, #50	; 0x32
 800677c:	f7fa ff66 	bl	800164c <HAL_Delay>
	signal_handler_process();
 8006780:	f000 f85e 	bl	8006840 <signal_handler_process>
	if(can_display() == 1)
 8006784:	f000 f870 	bl	8006868 <can_display>
 8006788:	2801      	cmp	r0, #1
 800678a:	d1f6      	bne.n	800677a <main+0x89e>
		switch(get_current_plot_ID())
 800678c:	f7ff fb20 	bl	8005dd0 <get_current_plot_ID>
 8006790:	2801      	cmp	r0, #1
 8006792:	d005      	beq.n	80067a0 <main+0x8c4>
 8006794:	2802      	cmp	r0, #2
 8006796:	d003      	beq.n	80067a0 <main+0x8c4>
 8006798:	b110      	cbz	r0, 80067a0 <main+0x8c4>
		disable_signal_display();
 800679a:	f000 f86b 	bl	8006874 <disable_signal_display>
 800679e:	e7ec      	b.n	800677a <main+0x89e>
				Plot_Signal( get_signal_data(CORR) , DISPLAY_BUFF_SIZE);
 80067a0:	f000 f86e 	bl	8006880 <get_signal_data>
 80067a4:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80067a8:	f7ff fa6e 	bl	8005c88 <Plot_Signal>
				break;
 80067ac:	e7f5      	b.n	800679a <main+0x8be>
 80067ae:	bf00      	nop
 80067b0:	200409d8 	.word	0x200409d8
 80067b4:	40012c00 	.word	0x40012c00
 80067b8:	40011000 	.word	0x40011000
 80067bc:	20040b44 	.word	0x20040b44
 80067c0:	20040bdc 	.word	0x20040bdc
 80067c4:	0f000001 	.word	0x0f000001
 80067c8:	20040d50 	.word	0x20040d50
 80067cc:	40001400 	.word	0x40001400
 80067d0:	20040a5c 	.word	0x20040a5c
 80067d4:	40000400 	.word	0x40000400

080067d8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop

080067dc <HAL_ADC_ConvCpltCallback>:
##########################################################################
*/

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
	samples_pck.is_ready = 1;
 80067dc:	4b02      	ldr	r3, [pc, #8]	; (80067e8 <HAL_ADC_ConvCpltCallback+0xc>)
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
}
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	200002ec 	.word	0x200002ec

080067ec <Init_Sampling>:
			CORE FUNCTIONS
##########################################################################
*/

void Init_Sampling(ADC_HandleTypeDef * hadc1)
{
 80067ec:	b510      	push	{r4, lr}
 80067ee:	4604      	mov	r4, r0
//	signals_pck->corr_max = 0;
//	signals_pck->ref_sampled = 0;
//	signals_pck->result_ready = 0;
//	signals_pck->sample_corr_max = 0;

	HAL_ADC_Start(hadc1);
 80067f0:	f7fa fff4 	bl	80017dc <HAL_ADC_Start>
	HAL_ADC_Start_DMA(hadc1, samples_pck.sampling_buff, SAMPLES_NBR);
 80067f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067f8:	4902      	ldr	r1, [pc, #8]	; (8006804 <Init_Sampling+0x18>)
 80067fa:	4620      	mov	r0, r4

}
 80067fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_ADC_Start_DMA(hadc1, samples_pck.sampling_buff, SAMPLES_NBR);
 8006800:	f7fb b876 	b.w	80018f0 <HAL_ADC_Start_DMA>
 8006804:	200002ec 	.word	0x200002ec

08006808 <signals_analyse>:
	}
}

void signals_analyse()
{
	if(signals_pck.ref_sampled == 0)
 8006808:	480a      	ldr	r0, [pc, #40]	; (8006834 <signals_analyse+0x2c>)
 800680a:	4b0b      	ldr	r3, [pc, #44]	; (8006838 <signals_analyse+0x30>)
 800680c:	5cc2      	ldrb	r2, [r0, r3]
 800680e:	b95a      	cbnz	r2, 8006828 <signals_analyse+0x20>
 8006810:	f200 13ff 	addw	r3, r0, #511	; 0x1ff
 8006814:	f200 31ff 	addw	r1, r0, #1023	; 0x3ff
	{
		//strncpy(signals_pck.ref_signal, samples_pck.sampling_buff, SAMPLES_NBR);
		for(int i = 0 ; i < SAMPLES_NBR ; i++)
		{
			signals_pck.ref_signal[i] = 0;//samples_pck.sampling_buff[i];
 8006818:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(int i = 0 ; i < SAMPLES_NBR ; i++)
 800681c:	428b      	cmp	r3, r1
 800681e:	d1fb      	bne.n	8006818 <signals_analyse+0x10>
		}
		signals_pck.ref_sampled = 1;
 8006820:	4b05      	ldr	r3, [pc, #20]	; (8006838 <signals_analyse+0x30>)
 8006822:	2201      	movs	r2, #1
 8006824:	54c2      	strb	r2, [r0, r3]


	}


}
 8006826:	4770      	bx	lr
		strncpy(signals_pck.raw_signal, samples_pck.sampling_buff, SAMPLES_NBR);
 8006828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800682c:	4903      	ldr	r1, [pc, #12]	; (800683c <signals_analyse+0x34>)
 800682e:	f000 bc6d 	b.w	800710c <strncpy>
 8006832:	bf00      	nop
 8006834:	200004f0 	.word	0x200004f0
 8006838:	000403ff 	.word	0x000403ff
 800683c:	200002ec 	.word	0x200002ec

08006840 <signal_handler_process>:
{
 8006840:	b538      	push	{r3, r4, r5, lr}
	if(samples_pck.is_ready == 1)
 8006842:	4d07      	ldr	r5, [pc, #28]	; (8006860 <signal_handler_process+0x20>)
 8006844:	f895 4200 	ldrb.w	r4, [r5, #512]	; 0x200
 8006848:	b2e4      	uxtb	r4, r4
 800684a:	2c01      	cmp	r4, #1
 800684c:	d000      	beq.n	8006850 <signal_handler_process+0x10>
}
 800684e:	bd38      	pop	{r3, r4, r5, pc}
		signals_analyse();
 8006850:	f7ff ffda 	bl	8006808 <signals_analyse>
		display_ready = 1;
 8006854:	4a03      	ldr	r2, [pc, #12]	; (8006864 <signal_handler_process+0x24>)
		samples_pck.is_ready = 0;
 8006856:	2300      	movs	r3, #0
		display_ready = 1;
 8006858:	7014      	strb	r4, [r2, #0]
		samples_pck.is_ready = 0;
 800685a:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
}
 800685e:	bd38      	pop	{r3, r4, r5, pc}
 8006860:	200002ec 	.word	0x200002ec
 8006864:	200002e9 	.word	0x200002e9

08006868 <can_display>:

}

uint8_t can_display()
{
	return display_ready;
 8006868:	4b01      	ldr	r3, [pc, #4]	; (8006870 <can_display+0x8>)
}
 800686a:	7818      	ldrb	r0, [r3, #0]
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	200002e9 	.word	0x200002e9

08006874 <disable_signal_display>:

uint8_t disable_signal_display()
{
	display_ready = 0;
 8006874:	4b01      	ldr	r3, [pc, #4]	; (800687c <disable_signal_display+0x8>)
 8006876:	2200      	movs	r2, #0
 8006878:	701a      	strb	r2, [r3, #0]
}
 800687a:	4770      	bx	lr
 800687c:	200002e9 	.word	0x200002e9

08006880 <get_signal_data>:

uint8_t* get_signal_data(SIGNAL_ID id)
{
	uint8_t* ret = 0;

	switch(id)
 8006880:	b150      	cbz	r0, 8006898 <get_signal_data+0x18>
 8006882:	2801      	cmp	r0, #1
 8006884:	d101      	bne.n	800688a <get_signal_data+0xa>
	{
	case INPUT:
		ret = signals_pck.raw_signal;
		break;
	case REF:
		ret = signals_pck.ref_signal;
 8006886:	4805      	ldr	r0, [pc, #20]	; (800689c <get_signal_data+0x1c>)
 8006888:	4770      	bx	lr
		break;
	default:
		ret = (signals_pck.corr_func + (signals_pck.sample_corr_max - 200));
 800688a:	4805      	ldr	r0, [pc, #20]	; (80068a0 <get_signal_data+0x20>)
 800688c:	4b05      	ldr	r3, [pc, #20]	; (80068a4 <get_signal_data+0x24>)
 800688e:	5cc3      	ldrb	r3, [r0, r3]
 8006890:	4418      	add	r0, r3
 8006892:	f500 704e 	add.w	r0, r0, #824	; 0x338
		break;
 8006896:	4770      	bx	lr
		ret = signals_pck.raw_signal;
 8006898:	4801      	ldr	r0, [pc, #4]	; (80068a0 <get_signal_data+0x20>)
	}

	return ret;
}
 800689a:	4770      	bx	lr
 800689c:	200006f0 	.word	0x200006f0
 80068a0:	200004f0 	.word	0x200004f0
 80068a4:	00040402 	.word	0x00040402

080068a8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80068a8:	4b0a      	ldr	r3, [pc, #40]	; (80068d4 <HAL_MspInit+0x2c>)
{
 80068aa:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80068ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80068b2:	641a      	str	r2, [r3, #64]	; 0x40
 80068b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068b6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80068ba:	9200      	str	r2, [sp, #0]
 80068bc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068c4:	645a      	str	r2, [r3, #68]	; 0x44
 80068c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068cc:	9301      	str	r3, [sp, #4]
 80068ce:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80068d0:	b002      	add	sp, #8
 80068d2:	4770      	bx	lr
 80068d4:	40023800 	.word	0x40023800

080068d8 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80068d8:	4b2a      	ldr	r3, [pc, #168]	; (8006984 <HAL_ADC_MspInit+0xac>)
 80068da:	6802      	ldr	r2, [r0, #0]
{
 80068dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hadc->Instance==ADC1)
 80068de:	429a      	cmp	r2, r3
{
 80068e0:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068e2:	f04f 0400 	mov.w	r4, #0
 80068e6:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80068ea:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80068ee:	9407      	str	r4, [sp, #28]
  if(hadc->Instance==ADC1)
 80068f0:	d001      	beq.n	80068f6 <HAL_ADC_MspInit+0x1e>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80068f2:	b009      	add	sp, #36	; 0x24
 80068f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80068f6:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80068fa:	4606      	mov	r6, r0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80068fc:	2001      	movs	r0, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068fe:	2503      	movs	r5, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006900:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006902:	a903      	add	r1, sp, #12
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006904:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006908:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800690c:	645a      	str	r2, [r3, #68]	; 0x44
 800690e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006910:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8006914:	9201      	str	r2, [sp, #4]
 8006916:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800691a:	4302      	orrs	r2, r0
 800691c:	631a      	str	r2, [r3, #48]	; 0x30
 800691e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006920:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006922:	4003      	ands	r3, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006924:	4818      	ldr	r0, [pc, #96]	; (8006988 <HAL_ADC_MspInit+0xb0>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006926:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006928:	9302      	str	r3, [sp, #8]
    hdma_adc1.Instance = DMA2_Stream4;
 800692a:	4d18      	ldr	r5, [pc, #96]	; (800698c <HAL_ADC_MspInit+0xb4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800692c:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800692e:	f7fb fecf 	bl	80026d0 <HAL_GPIO_Init>
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006932:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_adc1.Instance = DMA2_Stream4;
 8006936:	f8df c058 	ldr.w	ip, [pc, #88]	; 8006990 <HAL_ADC_MspInit+0xb8>
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800693a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800693e:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8006942:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006946:	6128      	str	r0, [r5, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006948:	4628      	mov	r0, r5
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800694a:	606c      	str	r4, [r5, #4]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800694c:	626c      	str	r4, [r5, #36]	; 0x24
    hdma_adc1.Instance = DMA2_Stream4;
 800694e:	f8c5 c000 	str.w	ip, [r5]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006952:	e9c5 4402 	strd	r4, r4, [r5, #8]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006956:	e9c5 7105 	strd	r7, r1, [r5, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800695a:	e9c5 2307 	strd	r2, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800695e:	f7fb fac3 	bl	8001ee8 <HAL_DMA_Init>
 8006962:	b958      	cbnz	r0, 800697c <HAL_ADC_MspInit+0xa4>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8006964:	2200      	movs	r2, #0
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006966:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8006968:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800696a:	63ae      	str	r6, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800696c:	4611      	mov	r1, r2
 800696e:	f7fb fa13 	bl	8001d98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006972:	2012      	movs	r0, #18
 8006974:	f7fb fa46 	bl	8001e04 <HAL_NVIC_EnableIRQ>
}
 8006978:	b009      	add	sp, #36	; 0x24
 800697a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 800697c:	f7ff ff2c 	bl	80067d8 <Error_Handler>
 8006980:	e7f0      	b.n	8006964 <HAL_ADC_MspInit+0x8c>
 8006982:	bf00      	nop
 8006984:	40012000 	.word	0x40012000
 8006988:	40020000 	.word	0x40020000
 800698c:	20040c5c 	.word	0x20040c5c
 8006990:	40026470 	.word	0x40026470

08006994 <HAL_DCMI_MspInit>:
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdcmi->Instance==DCMI)
 8006994:	6802      	ldr	r2, [r0, #0]
 8006996:	4b3d      	ldr	r3, [pc, #244]	; (8006a8c <HAL_DCMI_MspInit+0xf8>)
{
 8006998:	b570      	push	{r4, r5, r6, lr}
  if(hdcmi->Instance==DCMI)
 800699a:	429a      	cmp	r2, r3
{
 800699c:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800699e:	f04f 0400 	mov.w	r4, #0
 80069a2:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80069a6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80069aa:	940b      	str	r4, [sp, #44]	; 0x2c
  if(hdcmi->Instance==DCMI)
 80069ac:	d001      	beq.n	80069b2 <HAL_DCMI_MspInit+0x1e>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80069ae:	b00c      	add	sp, #48	; 0x30
 80069b0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DCMI_CLK_ENABLE();
 80069b2:	4b37      	ldr	r3, [pc, #220]	; (8006a90 <HAL_DCMI_MspInit+0xfc>)
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80069b4:	2060      	movs	r0, #96	; 0x60
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069b6:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80069b8:	250d      	movs	r5, #13
    __HAL_RCC_DCMI_CLK_ENABLE();
 80069ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80069bc:	a907      	add	r1, sp, #28
    __HAL_RCC_DCMI_CLK_ENABLE();
 80069be:	f042 0201 	orr.w	r2, r2, #1
 80069c2:	635a      	str	r2, [r3, #52]	; 0x34
 80069c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069c6:	f002 0201 	and.w	r2, r2, #1
 80069ca:	9201      	str	r2, [sp, #4]
 80069cc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80069ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069d0:	f042 0210 	orr.w	r2, r2, #16
 80069d4:	631a      	str	r2, [r3, #48]	; 0x30
 80069d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069d8:	f002 0210 	and.w	r2, r2, #16
 80069dc:	9202      	str	r2, [sp, #8]
 80069de:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80069e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069e2:	f042 0208 	orr.w	r2, r2, #8
 80069e6:	631a      	str	r2, [r3, #48]	; 0x30
 80069e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069ea:	f002 0208 	and.w	r2, r2, #8
 80069ee:	9203      	str	r2, [sp, #12]
 80069f0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80069f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069f8:	631a      	str	r2, [r3, #48]	; 0x30
 80069fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069fc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8006a00:	9204      	str	r2, [sp, #16]
 8006a02:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a0a:	631a      	str	r2, [r3, #48]	; 0x30
 8006a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a0e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8006a12:	9205      	str	r2, [sp, #20]
 8006a14:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a18:	f042 0201 	orr.w	r2, r2, #1
 8006a1c:	631a      	str	r2, [r3, #48]	; 0x30
 8006a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8006a20:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a22:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006a26:	481b      	ldr	r0, [pc, #108]	; (8006a94 <HAL_DCMI_MspInit+0x100>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a28:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a2a:	9306      	str	r3, [sp, #24]
 8006a2c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8006a2e:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006a30:	f7fb fe4e 	bl	80026d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8006a34:	2308      	movs	r3, #8
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8006a36:	a907      	add	r1, sp, #28
 8006a38:	4817      	ldr	r0, [pc, #92]	; (8006a98 <HAL_DCMI_MspInit+0x104>)
    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8006a3a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a3c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8006a3e:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a40:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8006a44:	f7fb fe44 	bl	80026d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8006a48:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8006a4c:	a907      	add	r1, sp, #28
 8006a4e:	4813      	ldr	r0, [pc, #76]	; (8006a9c <HAL_DCMI_MspInit+0x108>)
    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8006a50:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a52:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8006a54:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a56:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8006a5a:	f7fb fe39 	bl	80026d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8006a5e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006a62:	a907      	add	r1, sp, #28
 8006a64:	480e      	ldr	r0, [pc, #56]	; (8006aa0 <HAL_DCMI_MspInit+0x10c>)
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8006a66:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a68:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8006a6a:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a6c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006a70:	f7fb fe2e 	bl	80026d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8006a74:	2350      	movs	r3, #80	; 0x50
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a76:	a907      	add	r1, sp, #28
 8006a78:	480a      	ldr	r0, [pc, #40]	; (8006aa4 <HAL_DCMI_MspInit+0x110>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a7a:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8006a7c:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8006a7e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a80:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a84:	f7fb fe24 	bl	80026d0 <HAL_GPIO_Init>
}
 8006a88:	b00c      	add	sp, #48	; 0x30
 8006a8a:	bd70      	pop	{r4, r5, r6, pc}
 8006a8c:	50050000 	.word	0x50050000
 8006a90:	40023800 	.word	0x40023800
 8006a94:	40021000 	.word	0x40021000
 8006a98:	40020c00 	.word	0x40020c00
 8006a9c:	40021800 	.word	0x40021800
 8006aa0:	40021c00 	.word	0x40021c00
 8006aa4:	40020000 	.word	0x40020000

08006aa8 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8006aa8:	6802      	ldr	r2, [r0, #0]
 8006aaa:	4b0e      	ldr	r3, [pc, #56]	; (8006ae4 <HAL_DMA2D_MspInit+0x3c>)
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d000      	beq.n	8006ab2 <HAL_DMA2D_MspInit+0xa>
 8006ab0:	4770      	bx	lr
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8006ab2:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	205a      	movs	r0, #90	; 0x5a
 8006aba:	4611      	mov	r1, r2
{
 8006abc:	b510      	push	{r4, lr}
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8006abe:	6b1c      	ldr	r4, [r3, #48]	; 0x30
{
 8006ac0:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8006ac2:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 8006ac6:	631c      	str	r4, [r3, #48]	; 0x30
 8006ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ace:	9301      	str	r3, [sp, #4]
 8006ad0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8006ad2:	f7fb f961 	bl	8001d98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8006ad6:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8006ad8:	b002      	add	sp, #8
 8006ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8006ade:	f7fb b991 	b.w	8001e04 <HAL_NVIC_EnableIRQ>
 8006ae2:	bf00      	nop
 8006ae4:	4002b000 	.word	0x4002b000

08006ae8 <HAL_LTDC_MspInit>:
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hltdc->Instance==LTDC)
 8006ae8:	6802      	ldr	r2, [r0, #0]
 8006aea:	4b42      	ldr	r3, [pc, #264]	; (8006bf4 <HAL_LTDC_MspInit+0x10c>)
{
 8006aec:	b570      	push	{r4, r5, r6, lr}
  if(hltdc->Instance==LTDC)
 8006aee:	429a      	cmp	r2, r3
{
 8006af0:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006af2:	f04f 0400 	mov.w	r4, #0
 8006af6:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8006afa:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8006afe:	940b      	str	r4, [sp, #44]	; 0x2c
  if(hltdc->Instance==LTDC)
 8006b00:	d001      	beq.n	8006b06 <HAL_LTDC_MspInit+0x1e>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8006b02:	b00c      	add	sp, #48	; 0x30
 8006b04:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 8006b06:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8006b0a:	2010      	movs	r0, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b0c:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006b0e:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 8006b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8006b12:	a907      	add	r1, sp, #28
    __HAL_RCC_LTDC_CLK_ENABLE();
 8006b14:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006b18:	645a      	str	r2, [r3, #68]	; 0x44
 8006b1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b1c:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8006b20:	9201      	str	r2, [sp, #4]
 8006b22:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b26:	4302      	orrs	r2, r0
 8006b28:	631a      	str	r2, [r3, #48]	; 0x30
 8006b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b2c:	4002      	ands	r2, r0
 8006b2e:	9202      	str	r2, [sp, #8]
 8006b30:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006b32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b38:	631a      	str	r2, [r3, #48]	; 0x30
 8006b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b3c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8006b40:	9203      	str	r2, [sp, #12]
 8006b42:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8006b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b4a:	631a      	str	r2, [r3, #48]	; 0x30
 8006b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b4e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8006b52:	9204      	str	r2, [sp, #16]
 8006b54:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006b56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b5c:	631a      	str	r2, [r3, #48]	; 0x30
 8006b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b60:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8006b64:	9205      	str	r2, [sp, #20]
 8006b66:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8006b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b6e:	631a      	str	r2, [r3, #48]	; 0x30
 8006b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8006b72:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8006b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8006b78:	481f      	ldr	r0, [pc, #124]	; (8006bf8 <HAL_LTDC_MspInit+0x110>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b7a:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8006b7c:	9306      	str	r3, [sp, #24]
 8006b7e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006b80:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8006b82:	f7fb fda5 	bl	80026d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8006b86:	f64e 73ff 	movw	r3, #61439	; 0xefff
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8006b8a:	a907      	add	r1, sp, #28
 8006b8c:	481b      	ldr	r0, [pc, #108]	; (8006bfc <HAL_LTDC_MspInit+0x114>)
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8006b8e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b90:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006b92:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b94:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8006b98:	f7fb fd9a 	bl	80026d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8006b9c:	23f7      	movs	r3, #247	; 0xf7
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8006b9e:	a907      	add	r1, sp, #28
 8006ba0:	4817      	ldr	r0, [pc, #92]	; (8006c00 <HAL_LTDC_MspInit+0x118>)
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8006ba2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ba4:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006ba6:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ba8:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8006bac:	f7fb fd90 	bl	80026d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8006bb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8006bb4:	2309      	movs	r3, #9
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8006bb6:	a907      	add	r1, sp, #28
 8006bb8:	4812      	ldr	r0, [pc, #72]	; (8006c04 <HAL_LTDC_MspInit+0x11c>)
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8006bba:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8006bbc:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bbe:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bc0:	e9cd 5408 	strd	r5, r4, [sp, #32]
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8006bc4:	f7fb fd84 	bl	80026d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8006bc8:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006bcc:	a907      	add	r1, sp, #28
 8006bce:	480e      	ldr	r0, [pc, #56]	; (8006c08 <HAL_LTDC_MspInit+0x120>)
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8006bd0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006bd2:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bd4:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bd6:	e9cd 5408 	strd	r5, r4, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006bda:	f7fb fd79 	bl	80026d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8006bde:	4622      	mov	r2, r4
 8006be0:	4621      	mov	r1, r4
 8006be2:	2058      	movs	r0, #88	; 0x58
 8006be4:	f7fb f8d8 	bl	8001d98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8006be8:	2058      	movs	r0, #88	; 0x58
 8006bea:	f7fb f90b 	bl	8001e04 <HAL_NVIC_EnableIRQ>
}
 8006bee:	b00c      	add	sp, #48	; 0x30
 8006bf0:	bd70      	pop	{r4, r5, r6, pc}
 8006bf2:	bf00      	nop
 8006bf4:	40016800 	.word	0x40016800
 8006bf8:	40021000 	.word	0x40021000
 8006bfc:	40022400 	.word	0x40022400
 8006c00:	40022800 	.word	0x40022800
 8006c04:	40021800 	.word	0x40021800
 8006c08:	40022000 	.word	0x40022000

08006c0c <HAL_QSPI_MspInit>:
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hqspi->Instance==QUADSPI)
 8006c0c:	6802      	ldr	r2, [r0, #0]
 8006c0e:	4b30      	ldr	r3, [pc, #192]	; (8006cd0 <HAL_QSPI_MspInit+0xc4>)
{
 8006c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hqspi->Instance==QUADSPI)
 8006c14:	429a      	cmp	r2, r3
{
 8006c16:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c18:	f04f 0400 	mov.w	r4, #0
 8006c1c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8006c20:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8006c24:	9409      	str	r4, [sp, #36]	; 0x24
  if(hqspi->Instance==QUADSPI)
 8006c26:	d002      	beq.n	8006c2e <HAL_QSPI_MspInit+0x22>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8006c28:	b00a      	add	sp, #40	; 0x28
 8006c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_QSPI_CLK_ENABLE();
 8006c2e:	4b29      	ldr	r3, [pc, #164]	; (8006cd4 <HAL_QSPI_MspInit+0xc8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c30:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c32:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8006c34:	2709      	movs	r7, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 8006c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8006c38:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8006c3c:	a905      	add	r1, sp, #20
 8006c3e:	4826      	ldr	r0, [pc, #152]	; (8006cd8 <HAL_QSPI_MspInit+0xcc>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8006c40:	4332      	orrs	r2, r6
 8006c42:	639a      	str	r2, [r3, #56]	; 0x38
 8006c44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c46:	4032      	ands	r2, r6
 8006c48:	9201      	str	r2, [sp, #4]
 8006c4a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006c4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c4e:	f042 0210 	orr.w	r2, r2, #16
 8006c52:	631a      	str	r2, [r3, #48]	; 0x30
 8006c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c56:	f002 0210 	and.w	r2, r2, #16
 8006c5a:	9202      	str	r2, [sp, #8]
 8006c5c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c60:	4332      	orrs	r2, r6
 8006c62:	631a      	str	r2, [r3, #48]	; 0x30
 8006c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c66:	4032      	ands	r2, r6
 8006c68:	9203      	str	r2, [sp, #12]
 8006c6a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c6e:	f042 0208 	orr.w	r2, r2, #8
 8006c72:	631a      	str	r2, [r3, #48]	; 0x30
 8006c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8006c76:	f8cd 8014 	str.w	r8, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006c7a:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c7e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c80:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006c82:	9304      	str	r3, [sp, #16]
 8006c84:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8006c86:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8006c88:	f7fb fd22 	bl	80026d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8006c8c:	2240      	movs	r2, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8006c8e:	230a      	movs	r3, #10
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8006c90:	a905      	add	r1, sp, #20
 8006c92:	4812      	ldr	r0, [pc, #72]	; (8006cdc <HAL_QSPI_MspInit+0xd0>)
    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8006c94:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8006c96:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c98:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c9a:	e9cd 4507 	strd	r4, r5, [sp, #28]
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8006c9e:	f7fb fd17 	bl	80026d0 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ca2:	a905      	add	r1, sp, #20
 8006ca4:	480d      	ldr	r0, [pc, #52]	; (8006cdc <HAL_QSPI_MspInit+0xd0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ca6:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ca8:	e9cd 8605 	strd	r8, r6, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8006cac:	e9cd 5708 	strd	r5, r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cb0:	f7fb fd0e 	bl	80026d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8006cb4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006cb8:	a905      	add	r1, sp, #20
 8006cba:	4809      	ldr	r0, [pc, #36]	; (8006ce0 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cbc:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cbe:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8006cc0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8006cc2:	e9cd 5708 	strd	r5, r7, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006cc6:	f7fb fd03 	bl	80026d0 <HAL_GPIO_Init>
}
 8006cca:	b00a      	add	sp, #40	; 0x28
 8006ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cd0:	a0001000 	.word	0xa0001000
 8006cd4:	40023800 	.word	0x40023800
 8006cd8:	40021000 	.word	0x40021000
 8006cdc:	40020400 	.word	0x40020400
 8006ce0:	40020c00 	.word	0x40020c00

08006ce4 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8006ce4:	6802      	ldr	r2, [r0, #0]
 8006ce6:	4b04      	ldr	r3, [pc, #16]	; (8006cf8 <HAL_RTC_MspInit+0x14>)
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d104      	bne.n	8006cf6 <HAL_RTC_MspInit+0x12>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006cec:	4a03      	ldr	r2, [pc, #12]	; (8006cfc <HAL_RTC_MspInit+0x18>)
 8006cee:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8006cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cf4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006cf6:	4770      	bx	lr
 8006cf8:	40002800 	.word	0x40002800
 8006cfc:	40023800 	.word	0x40023800

08006d00 <HAL_SD_MspInit>:
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hsd->Instance==SDMMC1)
 8006d00:	6802      	ldr	r2, [r0, #0]
 8006d02:	4b23      	ldr	r3, [pc, #140]	; (8006d90 <HAL_SD_MspInit+0x90>)
{
 8006d04:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hsd->Instance==SDMMC1)
 8006d06:	429a      	cmp	r2, r3
{
 8006d08:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d0a:	f04f 0400 	mov.w	r4, #0
 8006d0e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8006d12:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8006d16:	9407      	str	r4, [sp, #28]
  if(hsd->Instance==SDMMC1)
 8006d18:	d001      	beq.n	8006d1e <HAL_SD_MspInit+0x1e>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8006d1a:	b009      	add	sp, #36	; 0x24
 8006d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8006d1e:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8006d22:	250c      	movs	r5, #12
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8006d24:	f44f 50f8 	mov.w	r0, #7936	; 0x1f00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d28:	2702      	movs	r7, #2
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8006d2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d2c:	2603      	movs	r6, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d2e:	eb0d 0105 	add.w	r1, sp, r5
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8006d32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d36:	645a      	str	r2, [r3, #68]	; 0x44
 8006d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d3a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006d3e:	9200      	str	r2, [sp, #0]
 8006d40:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d44:	f042 0204 	orr.w	r2, r2, #4
 8006d48:	631a      	str	r2, [r3, #48]	; 0x30
 8006d4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d4c:	f002 0204 	and.w	r2, r2, #4
 8006d50:	9201      	str	r2, [sp, #4]
 8006d52:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d56:	f042 0208 	orr.w	r2, r2, #8
 8006d5a:	631a      	str	r2, [r3, #48]	; 0x30
 8006d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8006d5e:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d60:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d64:	480b      	ldr	r0, [pc, #44]	; (8006d94 <HAL_SD_MspInit+0x94>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d66:	9704      	str	r7, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d68:	9302      	str	r3, [sp, #8]
 8006d6a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8006d6c:	e9cd 6506 	strd	r6, r5, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d70:	f7fb fcae 	bl	80026d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8006d74:	2304      	movs	r3, #4
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8006d76:	eb0d 0105 	add.w	r1, sp, r5
 8006d7a:	4807      	ldr	r0, [pc, #28]	; (8006d98 <HAL_SD_MspInit+0x98>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d7c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d7e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8006d80:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8006d82:	e9cd 6506 	strd	r6, r5, [sp, #24]
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8006d86:	f7fb fca3 	bl	80026d0 <HAL_GPIO_Init>
}
 8006d8a:	b009      	add	sp, #36	; 0x24
 8006d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	40012c00 	.word	0x40012c00
 8006d94:	40020800 	.word	0x40020800
 8006d98:	40020c00 	.word	0x40020c00

08006d9c <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM3)
 8006d9c:	6803      	ldr	r3, [r0, #0]
 8006d9e:	4a23      	ldr	r2, [pc, #140]	; (8006e2c <HAL_TIM_Base_MspInit+0x90>)
{
 8006da0:	b570      	push	{r4, r5, r6, lr}
  if(htim_base->Instance==TIM3)
 8006da2:	4293      	cmp	r3, r2
{
 8006da4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006da6:	f04f 0400 	mov.w	r4, #0
 8006daa:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8006dae:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8006db2:	9407      	str	r4, [sp, #28]
  if(htim_base->Instance==TIM3)
 8006db4:	d018      	beq.n	8006de8 <HAL_TIM_Base_MspInit+0x4c>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8006db6:	4a1e      	ldr	r2, [pc, #120]	; (8006e30 <HAL_TIM_Base_MspInit+0x94>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d001      	beq.n	8006dc0 <HAL_TIM_Base_MspInit+0x24>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8006dbc:	b008      	add	sp, #32
 8006dbe:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006dc0:	4b1c      	ldr	r3, [pc, #112]	; (8006e34 <HAL_TIM_Base_MspInit+0x98>)
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006dc2:	4622      	mov	r2, r4
 8006dc4:	4621      	mov	r1, r4
 8006dc6:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006dc8:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8006dca:	f044 0420 	orr.w	r4, r4, #32
 8006dce:	641c      	str	r4, [r3, #64]	; 0x40
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd2:	f003 0320 	and.w	r3, r3, #32
 8006dd6:	9302      	str	r3, [sp, #8]
 8006dd8:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006dda:	f7fa ffdd 	bl	8001d98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006dde:	2037      	movs	r0, #55	; 0x37
 8006de0:	f7fb f810 	bl	8001e04 <HAL_NVIC_EnableIRQ>
}
 8006de4:	b008      	add	sp, #32
 8006de6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006de8:	4b12      	ldr	r3, [pc, #72]	; (8006e34 <HAL_TIM_Base_MspInit+0x98>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dea:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8006dec:	2610      	movs	r6, #16
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8006dee:	a903      	add	r1, sp, #12
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006df0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8006df2:	4811      	ldr	r0, [pc, #68]	; (8006e38 <HAL_TIM_Base_MspInit+0x9c>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006df4:	432a      	orrs	r2, r5
 8006df6:	641a      	str	r2, [r3, #64]	; 0x40
 8006df8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dfa:	402a      	ands	r2, r5
 8006dfc:	9200      	str	r2, [sp, #0]
 8006dfe:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e02:	432a      	orrs	r2, r5
 8006e04:	631a      	str	r2, [r3, #48]	; 0x30
 8006e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8006e08:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e0a:	402b      	ands	r3, r5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e0c:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006e0e:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e10:	9301      	str	r3, [sp, #4]
 8006e12:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8006e14:	f7fb fc5c 	bl	80026d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006e18:	4622      	mov	r2, r4
 8006e1a:	4621      	mov	r1, r4
 8006e1c:	201d      	movs	r0, #29
 8006e1e:	f7fa ffbb 	bl	8001d98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006e22:	201d      	movs	r0, #29
 8006e24:	f7fa ffee 	bl	8001e04 <HAL_NVIC_EnableIRQ>
}
 8006e28:	b008      	add	sp, #32
 8006e2a:	bd70      	pop	{r4, r5, r6, pc}
 8006e2c:	40000400 	.word	0x40000400
 8006e30:	40001400 	.word	0x40001400
 8006e34:	40023800 	.word	0x40023800
 8006e38:	40020400 	.word	0x40020400

08006e3c <HAL_UART_MspInit>:
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 8006e3c:	6802      	ldr	r2, [r0, #0]
 8006e3e:	4b20      	ldr	r3, [pc, #128]	; (8006ec0 <HAL_UART_MspInit+0x84>)
{
 8006e40:	b570      	push	{r4, r5, r6, lr}
  if(huart->Instance==USART1)
 8006e42:	429a      	cmp	r2, r3
{
 8006e44:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e46:	f04f 0400 	mov.w	r4, #0
 8006e4a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8006e4e:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8006e52:	9407      	str	r4, [sp, #28]
  if(huart->Instance==USART1)
 8006e54:	d001      	beq.n	8006e5a <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006e56:	b008      	add	sp, #32
 8006e58:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8006e5a:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e5e:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8006e60:	2080      	movs	r0, #128	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006e62:	2507      	movs	r5, #7
    __HAL_RCC_USART1_CLK_ENABLE();
 8006e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8006e66:	a903      	add	r1, sp, #12
    __HAL_RCC_USART1_CLK_ENABLE();
 8006e68:	f042 0210 	orr.w	r2, r2, #16
 8006e6c:	645a      	str	r2, [r3, #68]	; 0x44
 8006e6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e70:	f002 0210 	and.w	r2, r2, #16
 8006e74:	9200      	str	r2, [sp, #0]
 8006e76:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e7a:	4332      	orrs	r2, r6
 8006e7c:	631a      	str	r2, [r3, #48]	; 0x30
 8006e7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e80:	4032      	ands	r2, r6
 8006e82:	9201      	str	r2, [sp, #4]
 8006e84:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e88:	f042 0201 	orr.w	r2, r2, #1
 8006e8c:	631a      	str	r2, [r3, #48]	; 0x30
 8006e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8006e90:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e92:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8006e96:	480b      	ldr	r0, [pc, #44]	; (8006ec4 <HAL_UART_MspInit+0x88>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e98:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e9a:	9302      	str	r3, [sp, #8]
 8006e9c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006e9e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8006ea0:	f7fb fc16 	bl	80026d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8006ea4:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8006ea8:	a903      	add	r1, sp, #12
 8006eaa:	4807      	ldr	r0, [pc, #28]	; (8006ec8 <HAL_UART_MspInit+0x8c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006eac:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006eae:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8006eb0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006eb2:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8006eb6:	f7fb fc0b 	bl	80026d0 <HAL_GPIO_Init>
}
 8006eba:	b008      	add	sp, #32
 8006ebc:	bd70      	pop	{r4, r5, r6, pc}
 8006ebe:	bf00      	nop
 8006ec0:	40011000 	.word	0x40011000
 8006ec4:	40020400 	.word	0x40020400
 8006ec8:	40020000 	.word	0x40020000

08006ecc <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FMC_Initialized) {
 8006ecc:	4a2d      	ldr	r2, [pc, #180]	; (8006f84 <HAL_SDRAM_MspInit+0xb8>)
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8006ece:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8006ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FMC_Initialized) {
 8006ed2:	6814      	ldr	r4, [r2, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8006ed4:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8006ed6:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8006eda:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8006ede:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 8006ee0:	b10c      	cbz	r4, 8006ee6 <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8006ee2:	b007      	add	sp, #28
 8006ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 8006ee6:	2101      	movs	r1, #1
  __HAL_RCC_FMC_CLK_ENABLE();
 8006ee8:	4b27      	ldr	r3, [pc, #156]	; (8006f88 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8006eea:	f64f 7083 	movw	r0, #65411	; 0xff83
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006eee:	2702      	movs	r7, #2
  FMC_Initialized = 1;
 8006ef0:	6011      	str	r1, [r2, #0]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ef2:	2603      	movs	r6, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8006ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006ef6:	250c      	movs	r5, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8006ef8:	430a      	orrs	r2, r1
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006efa:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8006efc:	639a      	str	r2, [r3, #56]	; 0x38
 8006efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8006f00:	9001      	str	r0, [sp, #4]
  __HAL_RCC_FMC_CLK_ENABLE();
 8006f02:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006f06:	4821      	ldr	r0, [pc, #132]	; (8006f8c <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f08:	9702      	str	r7, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006f0e:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006f12:	f7fb fbdd 	bl	80026d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8006f16:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006f1a:	a901      	add	r1, sp, #4
 8006f1c:	481c      	ldr	r0, [pc, #112]	; (8006f90 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8006f1e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f20:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f22:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006f24:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006f28:	f7fb fbd2 	bl	80026d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8006f2c:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f30:	a901      	add	r1, sp, #4
 8006f32:	4818      	ldr	r0, [pc, #96]	; (8006f94 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8006f34:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f36:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f38:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006f3a:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f3e:	f7fb fbc7 	bl	80026d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8006f42:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006f46:	a901      	add	r1, sp, #4
 8006f48:	4813      	ldr	r0, [pc, #76]	; (8006f98 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8006f4a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f4c:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f4e:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006f50:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006f54:	f7fb fbbc 	bl	80026d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8006f58:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006f5a:	a901      	add	r1, sp, #4
 8006f5c:	480f      	ldr	r0, [pc, #60]	; (8006f9c <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8006f5e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f60:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f62:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006f64:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006f68:	f7fb fbb2 	bl	80026d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8006f6c:	2308      	movs	r3, #8
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8006f6e:	a901      	add	r1, sp, #4
 8006f70:	480b      	ldr	r0, [pc, #44]	; (8006fa0 <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f72:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f74:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8006f76:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006f78:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8006f7c:	f7fb fba8 	bl	80026d0 <HAL_GPIO_Init>
}
 8006f80:	b007      	add	sp, #28
 8006f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f84:	200408f4 	.word	0x200408f4
 8006f88:	40023800 	.word	0x40023800
 8006f8c:	40021000 	.word	0x40021000
 8006f90:	40021800 	.word	0x40021800
 8006f94:	40020c00 	.word	0x40020c00
 8006f98:	40021400 	.word	0x40021400
 8006f9c:	40021c00 	.word	0x40021c00
 8006fa0:	40020800 	.word	0x40020800

08006fa4 <SysTick_Handler>:
extern LTDC_HandleTypeDef hltdc;
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim7;
/* USER CODE BEGIN EV */
void SysTick_Handler(void) {
    HAL_IncTick();
 8006fa4:	f7fa bb40 	b.w	8001628 <HAL_IncTick>

08006fa8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop

08006fac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006fac:	e7fe      	b.n	8006fac <HardFault_Handler>
 8006fae:	bf00      	nop

08006fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006fb0:	e7fe      	b.n	8006fb0 <MemManage_Handler>
 8006fb2:	bf00      	nop

08006fb4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006fb4:	e7fe      	b.n	8006fb4 <BusFault_Handler>
 8006fb6:	bf00      	nop

08006fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006fb8:	e7fe      	b.n	8006fb8 <UsageFault_Handler>
 8006fba:	bf00      	nop

08006fbc <SVC_Handler>:
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop

08006fc0 <DebugMon_Handler>:
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop

08006fc4 <PendSV_Handler>:
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop

08006fc8 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006fc8:	4801      	ldr	r0, [pc, #4]	; (8006fd0 <ADC_IRQHandler+0x8>)
 8006fca:	f7fa bd41 	b.w	8001a50 <HAL_ADC_IRQHandler>
 8006fce:	bf00      	nop
 8006fd0:	20040b44 	.word	0x20040b44

08006fd4 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006fd4:	4801      	ldr	r0, [pc, #4]	; (8006fdc <TIM3_IRQHandler+0x8>)
 8006fd6:	f7fd be8f 	b.w	8004cf8 <HAL_TIM_IRQHandler>
 8006fda:	bf00      	nop
 8006fdc:	20040a5c 	.word	0x20040a5c

08006fe0 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006fe0:	4801      	ldr	r0, [pc, #4]	; (8006fe8 <TIM7_IRQHandler+0x8>)
 8006fe2:	f7fd be89 	b.w	8004cf8 <HAL_TIM_IRQHandler>
 8006fe6:	bf00      	nop
 8006fe8:	20040d50 	.word	0x20040d50

08006fec <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006fec:	4801      	ldr	r0, [pc, #4]	; (8006ff4 <DMA2_Stream4_IRQHandler+0x8>)
 8006fee:	f7fb b89f 	b.w	8002130 <HAL_DMA_IRQHandler>
 8006ff2:	bf00      	nop
 8006ff4:	20040c5c 	.word	0x20040c5c

08006ff8 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8006ff8:	4801      	ldr	r0, [pc, #4]	; (8007000 <LTDC_IRQHandler+0x8>)
 8006ffa:	f7fc b90b 	b.w	8003214 <HAL_LTDC_IRQHandler>
 8006ffe:	bf00      	nop
 8007000:	20040a9c 	.word	0x20040a9c

08007004 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8007004:	4801      	ldr	r0, [pc, #4]	; (800700c <DMA2D_IRQHandler+0x8>)
 8007006:	f7fb ba83 	b.w	8002510 <HAL_DMA2D_IRQHandler>
 800700a:	bf00      	nop
 800700c:	20040cdc 	.word	0x20040cdc

08007010 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007010:	4a0f      	ldr	r2, [pc, #60]	; (8007050 <SystemInit+0x40>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007012:	4b10      	ldr	r3, [pc, #64]	; (8007054 <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007014:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007018:	490f      	ldr	r1, [pc, #60]	; (8007058 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800701a:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
{
 800701e:	b470      	push	{r4, r5, r6}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007020:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
  RCC->CFGR = 0x00000000;
 8007024:	2400      	movs	r4, #0
  RCC->CR |= (uint32_t)0x00000001;
 8007026:	6818      	ldr	r0, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007028:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  RCC->PLLCFGR = 0x24003010;
 800702c:	4e0b      	ldr	r6, [pc, #44]	; (800705c <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 800702e:	f040 0001 	orr.w	r0, r0, #1
 8007032:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0x00000000;
 8007034:	609c      	str	r4, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007036:	6818      	ldr	r0, [r3, #0]
 8007038:	4001      	ands	r1, r0
 800703a:	6019      	str	r1, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 800703c:	605e      	str	r6, [r3, #4]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800703e:	6819      	ldr	r1, [r3, #0]
 8007040:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8007044:	6019      	str	r1, [r3, #0]
  RCC->CIR = 0x00000000;
 8007046:	60dc      	str	r4, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007048:	6095      	str	r5, [r2, #8]
#endif
}
 800704a:	bc70      	pop	{r4, r5, r6}
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	e000ed00 	.word	0xe000ed00
 8007054:	40023800 	.word	0x40023800
 8007058:	fef6ffff 	.word	0xfef6ffff
 800705c:	24003010 	.word	0x24003010

08007060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007098 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007064:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007066:	e003      	b.n	8007070 <LoopCopyDataInit>

08007068 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007068:	4b0c      	ldr	r3, [pc, #48]	; (800709c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800706a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800706c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800706e:	3104      	adds	r1, #4

08007070 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007070:	480b      	ldr	r0, [pc, #44]	; (80070a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007072:	4b0c      	ldr	r3, [pc, #48]	; (80070a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007074:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007076:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007078:	d3f6      	bcc.n	8007068 <CopyDataInit>
  ldr  r2, =_sbss
 800707a:	4a0b      	ldr	r2, [pc, #44]	; (80070a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800707c:	e002      	b.n	8007084 <LoopFillZerobss>

0800707e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800707e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007080:	f842 3b04 	str.w	r3, [r2], #4

08007084 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007084:	4b09      	ldr	r3, [pc, #36]	; (80070ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007086:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007088:	d3f9      	bcc.n	800707e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800708a:	f7ff ffc1 	bl	8007010 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800708e:	f000 f811 	bl	80070b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007092:	f7fe ff23 	bl	8005edc <main>
  bx  lr    
 8007096:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007098:	2004ffff 	.word	0x2004ffff
  ldr  r3, =_sidata
 800709c:	08009bb8 	.word	0x08009bb8
  ldr  r0, =_sdata
 80070a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80070a4:	200000a8 	.word	0x200000a8
  ldr  r2, =_sbss
 80070a8:	200000a8 	.word	0x200000a8
  ldr  r3, = _ebss
 80070ac:	20040ddc 	.word	0x20040ddc

080070b0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80070b0:	e7fe      	b.n	80070b0 <CAN1_RX0_IRQHandler>
	...

080070b4 <__libc_init_array>:
 80070b4:	b570      	push	{r4, r5, r6, lr}
 80070b6:	4e0d      	ldr	r6, [pc, #52]	; (80070ec <__libc_init_array+0x38>)
 80070b8:	4c0d      	ldr	r4, [pc, #52]	; (80070f0 <__libc_init_array+0x3c>)
 80070ba:	1ba4      	subs	r4, r4, r6
 80070bc:	10a4      	asrs	r4, r4, #2
 80070be:	2500      	movs	r5, #0
 80070c0:	42a5      	cmp	r5, r4
 80070c2:	d109      	bne.n	80070d8 <__libc_init_array+0x24>
 80070c4:	4e0b      	ldr	r6, [pc, #44]	; (80070f4 <__libc_init_array+0x40>)
 80070c6:	4c0c      	ldr	r4, [pc, #48]	; (80070f8 <__libc_init_array+0x44>)
 80070c8:	f000 f836 	bl	8007138 <_init>
 80070cc:	1ba4      	subs	r4, r4, r6
 80070ce:	10a4      	asrs	r4, r4, #2
 80070d0:	2500      	movs	r5, #0
 80070d2:	42a5      	cmp	r5, r4
 80070d4:	d105      	bne.n	80070e2 <__libc_init_array+0x2e>
 80070d6:	bd70      	pop	{r4, r5, r6, pc}
 80070d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070dc:	4798      	blx	r3
 80070de:	3501      	adds	r5, #1
 80070e0:	e7ee      	b.n	80070c0 <__libc_init_array+0xc>
 80070e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070e6:	4798      	blx	r3
 80070e8:	3501      	adds	r5, #1
 80070ea:	e7f2      	b.n	80070d2 <__libc_init_array+0x1e>
 80070ec:	08009bb0 	.word	0x08009bb0
 80070f0:	08009bb0 	.word	0x08009bb0
 80070f4:	08009bb0 	.word	0x08009bb0
 80070f8:	08009bb4 	.word	0x08009bb4

080070fc <memset>:
 80070fc:	4402      	add	r2, r0
 80070fe:	4603      	mov	r3, r0
 8007100:	4293      	cmp	r3, r2
 8007102:	d100      	bne.n	8007106 <memset+0xa>
 8007104:	4770      	bx	lr
 8007106:	f803 1b01 	strb.w	r1, [r3], #1
 800710a:	e7f9      	b.n	8007100 <memset+0x4>

0800710c <strncpy>:
 800710c:	b570      	push	{r4, r5, r6, lr}
 800710e:	3901      	subs	r1, #1
 8007110:	4604      	mov	r4, r0
 8007112:	b902      	cbnz	r2, 8007116 <strncpy+0xa>
 8007114:	bd70      	pop	{r4, r5, r6, pc}
 8007116:	4623      	mov	r3, r4
 8007118:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800711c:	f803 5b01 	strb.w	r5, [r3], #1
 8007120:	1e56      	subs	r6, r2, #1
 8007122:	b92d      	cbnz	r5, 8007130 <strncpy+0x24>
 8007124:	4414      	add	r4, r2
 8007126:	42a3      	cmp	r3, r4
 8007128:	d0f4      	beq.n	8007114 <strncpy+0x8>
 800712a:	f803 5b01 	strb.w	r5, [r3], #1
 800712e:	e7fa      	b.n	8007126 <strncpy+0x1a>
 8007130:	461c      	mov	r4, r3
 8007132:	4632      	mov	r2, r6
 8007134:	e7ed      	b.n	8007112 <strncpy+0x6>
	...

08007138 <_init>:
 8007138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800713a:	bf00      	nop
 800713c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800713e:	bc08      	pop	{r3}
 8007140:	469e      	mov	lr, r3
 8007142:	4770      	bx	lr

08007144 <_fini>:
 8007144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007146:	bf00      	nop
 8007148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800714a:	bc08      	pop	{r3}
 800714c:	469e      	mov	lr, r3
 800714e:	4770      	bx	lr
