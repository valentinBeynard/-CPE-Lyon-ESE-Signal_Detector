
Signal_Detector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d88  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000028f8  08007f50  08007f50  00017f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a848  0800a848  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  0800a848  0800a848  0001a848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a850  0800a850  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a850  0800a850  0001a850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a854  0800a854  0001a854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  0800a858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000548  20000020  0800a878  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  0800a878  00020568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001934e  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032bb  00000000  00000000  0003939e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001640  00000000  00000000  0003c660  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001498  00000000  00000000  0003dca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004bde  00000000  00000000  0003f138  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012b96  00000000  00000000  00043d16  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f84f8  00000000  00000000  000568ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014eda4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005da0  00000000  00000000  0014ee20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000020 	.word	0x20000020
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007f38 	.word	0x08007f38

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000024 	.word	0x20000024
 8000204:	08007f38 	.word	0x08007f38

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800050c:	4b31      	ldr	r3, [pc, #196]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800050e:	2228      	movs	r2, #40	; 0x28
 8000510:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8000512:	4b30      	ldr	r3, [pc, #192]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000514:	2209      	movs	r2, #9
 8000516:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8000518:	4b2e      	ldr	r3, [pc, #184]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800051a:	2235      	movs	r2, #53	; 0x35
 800051c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800051e:	4b2d      	ldr	r3, [pc, #180]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000520:	220b      	movs	r2, #11
 8000522:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8000524:	4b2b      	ldr	r3, [pc, #172]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000526:	f240 121b 	movw	r2, #283	; 0x11b
 800052a:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800052c:	4b29      	ldr	r3, [pc, #164]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800052e:	f240 2215 	movw	r2, #533	; 0x215
 8000532:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8000534:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000536:	f240 121d 	movw	r2, #285	; 0x11d
 800053a:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800053c:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800053e:	f240 2235 	movw	r2, #565	; 0x235
 8000542:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8000544:	2100      	movs	r1, #0
 8000546:	4823      	ldr	r0, [pc, #140]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000548:	f000 fc1c 	bl	8000d84 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800054c:	4b21      	ldr	r3, [pc, #132]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800054e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000552:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000556:	f44f 7288 	mov.w	r2, #272	; 0x110
 800055a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800055c:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800055e:	2200      	movs	r2, #0
 8000560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8000564:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000566:	2200      	movs	r2, #0
 8000568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 800056c:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800056e:	2200      	movs	r2, #0
 8000570:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000574:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000576:	2200      	movs	r2, #0
 8000578:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800057a:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000586:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800058e:	4a12      	ldr	r2, [pc, #72]	; (80005d8 <BSP_LCD_Init+0xd0>)
 8000590:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8000592:	4810      	ldr	r0, [pc, #64]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000594:	f002 f9bc 	bl	8002910 <HAL_LTDC_GetState>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d103      	bne.n	80005a6 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800059e:	2100      	movs	r1, #0
 80005a0:	480c      	ldr	r0, [pc, #48]	; (80005d4 <BSP_LCD_Init+0xcc>)
 80005a2:	f000 fb15 	bl	8000bd0 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80005a6:	480b      	ldr	r0, [pc, #44]	; (80005d4 <BSP_LCD_Init+0xcc>)
 80005a8:	f001 ffe2 	bl	8002570 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b2:	480a      	ldr	r0, [pc, #40]	; (80005dc <BSP_LCD_Init+0xd4>)
 80005b4:	f001 ffc2 	bl	800253c <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	2108      	movs	r1, #8
 80005bc:	4808      	ldr	r0, [pc, #32]	; (80005e0 <BSP_LCD_Init+0xd8>)
 80005be:	f001 ffbd 	bl	800253c <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80005c2:	f000 fcff 	bl	8000fc4 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80005c6:	4807      	ldr	r0, [pc, #28]	; (80005e4 <BSP_LCD_Init+0xdc>)
 80005c8:	f000 f8d8 	bl	800077c <BSP_LCD_SetFont>
  
  return LCD_OK;
 80005cc:	2300      	movs	r3, #0
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200001ac 	.word	0x200001ac
 80005d8:	40016800 	.word	0x40016800
 80005dc:	40022000 	.word	0x40022000
 80005e0:	40022800 	.word	0x40022800
 80005e4:	20000000 	.word	0x20000000

080005e8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <BSP_LCD_GetXSize+0x20>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a06      	ldr	r2, [pc, #24]	; (800060c <BSP_LCD_GetXSize+0x24>)
 80005f2:	2134      	movs	r1, #52	; 0x34
 80005f4:	fb01 f303 	mul.w	r3, r1, r3
 80005f8:	4413      	add	r3, r2
 80005fa:	3360      	adds	r3, #96	; 0x60
 80005fc:	681b      	ldr	r3, [r3, #0]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	2000007c 	.word	0x2000007c
 800060c:	200001ac 	.word	0x200001ac

08000610 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <BSP_LCD_GetYSize+0x20>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a06      	ldr	r2, [pc, #24]	; (8000634 <BSP_LCD_GetYSize+0x24>)
 800061a:	2134      	movs	r1, #52	; 0x34
 800061c:	fb01 f303 	mul.w	r3, r1, r3
 8000620:	4413      	add	r3, r2
 8000622:	3364      	adds	r3, #100	; 0x64
 8000624:	681b      	ldr	r3, [r3, #0]
}
 8000626:	4618      	mov	r0, r3
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	2000007c 	.word	0x2000007c
 8000634:	200001ac 	.word	0x200001ac

08000638 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8000638:	b580      	push	{r7, lr}
 800063a:	b090      	sub	sp, #64	; 0x40
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	6039      	str	r1, [r7, #0]
 8000642:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8000648:	f7ff ffce 	bl	80005e8 <BSP_LCD_GetXSize>
 800064c:	4603      	mov	r3, r0
 800064e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000654:	f7ff ffdc 	bl	8000610 <BSP_LCD_GetYSize>
 8000658:	4603      	mov	r3, r0
 800065a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8000664:	23ff      	movs	r3, #255	; 0xff
 8000666:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800067e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000684:	2307      	movs	r3, #7
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8000688:	f7ff ffae 	bl	80005e8 <BSP_LCD_GetXSize>
 800068c:	4603      	mov	r3, r0
 800068e:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8000690:	f7ff ffbe 	bl	8000610 <BSP_LCD_GetYSize>
 8000694:	4603      	mov	r3, r0
 8000696:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8000698:	88fa      	ldrh	r2, [r7, #6]
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	4619      	mov	r1, r3
 80006a0:	4812      	ldr	r0, [pc, #72]	; (80006ec <BSP_LCD_LayerDefaultInit+0xb4>)
 80006a2:	f002 f8f7 	bl	8002894 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80006a6:	88fa      	ldrh	r2, [r7, #6]
 80006a8:	4911      	ldr	r1, [pc, #68]	; (80006f0 <BSP_LCD_LayerDefaultInit+0xb8>)
 80006aa:	4613      	mov	r3, r2
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	4413      	add	r3, r2
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	440b      	add	r3, r1
 80006b4:	3304      	adds	r3, #4
 80006b6:	f04f 32ff 	mov.w	r2, #4294967295
 80006ba:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80006bc:	88fa      	ldrh	r2, [r7, #6]
 80006be:	490c      	ldr	r1, [pc, #48]	; (80006f0 <BSP_LCD_LayerDefaultInit+0xb8>)
 80006c0:	4613      	mov	r3, r2
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	4413      	add	r3, r2
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	440b      	add	r3, r1
 80006ca:	3308      	adds	r3, #8
 80006cc:	4a09      	ldr	r2, [pc, #36]	; (80006f4 <BSP_LCD_LayerDefaultInit+0xbc>)
 80006ce:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80006d0:	88fa      	ldrh	r2, [r7, #6]
 80006d2:	4907      	ldr	r1, [pc, #28]	; (80006f0 <BSP_LCD_LayerDefaultInit+0xb8>)
 80006d4:	4613      	mov	r3, r2
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	4413      	add	r3, r2
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	440b      	add	r3, r1
 80006de:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80006e2:	601a      	str	r2, [r3, #0]
}
 80006e4:	bf00      	nop
 80006e6:	3740      	adds	r7, #64	; 0x40
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200001ac 	.word	0x200001ac
 80006f0:	20000080 	.word	0x20000080
 80006f4:	20000000 	.word	0x20000000

080006f8 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8000700:	4a04      	ldr	r2, [pc, #16]	; (8000714 <BSP_LCD_SelectLayer+0x1c>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6013      	str	r3, [r2, #0]
} 
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	2000007c 	.word	0x2000007c

08000718 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <BSP_LCD_SetTextColor+0x28>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4907      	ldr	r1, [pc, #28]	; (8000744 <BSP_LCD_SetTextColor+0x2c>)
 8000726:	4613      	mov	r3, r2
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	4413      	add	r3, r2
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	440b      	add	r3, r1
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	601a      	str	r2, [r3, #0]
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	2000007c 	.word	0x2000007c
 8000744:	20000080 	.word	0x20000080

08000748 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <BSP_LCD_SetBackColor+0x2c>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4908      	ldr	r1, [pc, #32]	; (8000778 <BSP_LCD_SetBackColor+0x30>)
 8000756:	4613      	mov	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	440b      	add	r3, r1
 8000760:	3304      	adds	r3, #4
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	601a      	str	r2, [r3, #0]
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	2000007c 	.word	0x2000007c
 8000778:	20000080 	.word	0x20000080

0800077c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <BSP_LCD_SetFont+0x2c>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4908      	ldr	r1, [pc, #32]	; (80007ac <BSP_LCD_SetFont+0x30>)
 800078a:	4613      	mov	r3, r2
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	4413      	add	r3, r2
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	440b      	add	r3, r1
 8000794:	3308      	adds	r3, #8
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	601a      	str	r2, [r3, #0]
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	2000007c 	.word	0x2000007c
 80007ac:	20000080 	.word	0x20000080

080007b0 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80007b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af02      	add	r7, sp, #8
 80007b6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <BSP_LCD_Clear+0x48>)
 80007ba:	681c      	ldr	r4, [r3, #0]
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <BSP_LCD_Clear+0x48>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <BSP_LCD_Clear+0x4c>)
 80007c2:	2134      	movs	r1, #52	; 0x34
 80007c4:	fb01 f303 	mul.w	r3, r1, r3
 80007c8:	4413      	add	r3, r2
 80007ca:	335c      	adds	r3, #92	; 0x5c
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	461d      	mov	r5, r3
 80007d0:	f7ff ff0a 	bl	80005e8 <BSP_LCD_GetXSize>
 80007d4:	4606      	mov	r6, r0
 80007d6:	f7ff ff1b 	bl	8000610 <BSP_LCD_GetYSize>
 80007da:	4602      	mov	r2, r0
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	9301      	str	r3, [sp, #4]
 80007e0:	2300      	movs	r3, #0
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	4613      	mov	r3, r2
 80007e6:	4632      	mov	r2, r6
 80007e8:	4629      	mov	r1, r5
 80007ea:	4620      	mov	r0, r4
 80007ec:	f000 fb9e 	bl	8000f2c <LL_FillBuffer>
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007f8:	2000007c 	.word	0x2000007c
 80007fc:	200001ac 	.word	0x200001ac

08000800 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	80fb      	strh	r3, [r7, #6]
 800080a:	460b      	mov	r3, r1
 800080c:	80bb      	strh	r3, [r7, #4]
 800080e:	4613      	mov	r3, r2
 8000810:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000812:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <BSP_LCD_DisplayChar+0x80>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	491b      	ldr	r1, [pc, #108]	; (8000884 <BSP_LCD_DisplayChar+0x84>)
 8000818:	4613      	mov	r3, r2
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	4413      	add	r3, r2
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	440b      	add	r3, r1
 8000822:	3308      	adds	r3, #8
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	6819      	ldr	r1, [r3, #0]
 8000828:	78fb      	ldrb	r3, [r7, #3]
 800082a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <BSP_LCD_DisplayChar+0x80>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	4c14      	ldr	r4, [pc, #80]	; (8000884 <BSP_LCD_DisplayChar+0x84>)
 8000834:	4613      	mov	r3, r2
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	4413      	add	r3, r2
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4423      	add	r3, r4
 800083e:	3308      	adds	r3, #8
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000844:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000848:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <BSP_LCD_DisplayChar+0x80>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4c0d      	ldr	r4, [pc, #52]	; (8000884 <BSP_LCD_DisplayChar+0x84>)
 800084e:	4613      	mov	r3, r2
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	4413      	add	r3, r2
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	4423      	add	r3, r4
 8000858:	3308      	adds	r3, #8
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	889b      	ldrh	r3, [r3, #4]
 800085e:	3307      	adds	r3, #7
 8000860:	2b00      	cmp	r3, #0
 8000862:	da00      	bge.n	8000866 <BSP_LCD_DisplayChar+0x66>
 8000864:	3307      	adds	r3, #7
 8000866:	10db      	asrs	r3, r3, #3
 8000868:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800086c:	18ca      	adds	r2, r1, r3
 800086e:	88b9      	ldrh	r1, [r7, #4]
 8000870:	88fb      	ldrh	r3, [r7, #6]
 8000872:	4618      	mov	r0, r3
 8000874:	f000 faa2 	bl	8000dbc <DrawChar>
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	bd90      	pop	{r4, r7, pc}
 8000880:	2000007c 	.word	0x2000007c
 8000884:	20000080 	.word	0x20000080

08000888 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8000888:	b5b0      	push	{r4, r5, r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0
 800088e:	60ba      	str	r2, [r7, #8]
 8000890:	461a      	mov	r2, r3
 8000892:	4603      	mov	r3, r0
 8000894:	81fb      	strh	r3, [r7, #14]
 8000896:	460b      	mov	r3, r1
 8000898:	81bb      	strh	r3, [r7, #12]
 800089a:	4613      	mov	r3, r2
 800089c:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800089e:	2301      	movs	r3, #1
 80008a0:	83fb      	strh	r3, [r7, #30]
 80008a2:	2300      	movs	r3, #0
 80008a4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80008b2:	e002      	b.n	80008ba <BSP_LCD_DisplayStringAt+0x32>
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	3301      	adds	r3, #1
 80008b8:	61bb      	str	r3, [r7, #24]
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	1c5a      	adds	r2, r3, #1
 80008be:	617a      	str	r2, [r7, #20]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d1f6      	bne.n	80008b4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80008c6:	f7ff fe8f 	bl	80005e8 <BSP_LCD_GetXSize>
 80008ca:	4b4f      	ldr	r3, [pc, #316]	; (8000a08 <BSP_LCD_DisplayStringAt+0x180>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	494f      	ldr	r1, [pc, #316]	; (8000a0c <BSP_LCD_DisplayStringAt+0x184>)
 80008d0:	4613      	mov	r3, r2
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	4413      	add	r3, r2
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	440b      	add	r3, r1
 80008da:	3308      	adds	r3, #8
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	889b      	ldrh	r3, [r3, #4]
 80008e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80008e4:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	d01c      	beq.n	8000926 <BSP_LCD_DisplayStringAt+0x9e>
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	d017      	beq.n	8000920 <BSP_LCD_DisplayStringAt+0x98>
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d12e      	bne.n	8000952 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	69bb      	ldr	r3, [r7, #24]
 80008f8:	1ad1      	subs	r1, r2, r3
 80008fa:	4b43      	ldr	r3, [pc, #268]	; (8000a08 <BSP_LCD_DisplayStringAt+0x180>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	4843      	ldr	r0, [pc, #268]	; (8000a0c <BSP_LCD_DisplayStringAt+0x184>)
 8000900:	4613      	mov	r3, r2
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	4413      	add	r3, r2
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	4403      	add	r3, r0
 800090a:	3308      	adds	r3, #8
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	889b      	ldrh	r3, [r3, #4]
 8000910:	fb03 f301 	mul.w	r3, r3, r1
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	b29a      	uxth	r2, r3
 8000918:	89fb      	ldrh	r3, [r7, #14]
 800091a:	4413      	add	r3, r2
 800091c:	83fb      	strh	r3, [r7, #30]
      break;
 800091e:	e01b      	b.n	8000958 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8000920:	89fb      	ldrh	r3, [r7, #14]
 8000922:	83fb      	strh	r3, [r7, #30]
      break;
 8000924:	e018      	b.n	8000958 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	b299      	uxth	r1, r3
 800092e:	4b36      	ldr	r3, [pc, #216]	; (8000a08 <BSP_LCD_DisplayStringAt+0x180>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	4836      	ldr	r0, [pc, #216]	; (8000a0c <BSP_LCD_DisplayStringAt+0x184>)
 8000934:	4613      	mov	r3, r2
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	4413      	add	r3, r2
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	4403      	add	r3, r0
 800093e:	3308      	adds	r3, #8
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	889b      	ldrh	r3, [r3, #4]
 8000944:	fb11 f303 	smulbb	r3, r1, r3
 8000948:	b29a      	uxth	r2, r3
 800094a:	89fb      	ldrh	r3, [r7, #14]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	83fb      	strh	r3, [r7, #30]
      break;
 8000950:	e002      	b.n	8000958 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 8000952:	89fb      	ldrh	r3, [r7, #14]
 8000954:	83fb      	strh	r3, [r7, #30]
      break;
 8000956:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8000958:	8bfb      	ldrh	r3, [r7, #30]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d003      	beq.n	8000966 <BSP_LCD_DisplayStringAt+0xde>
 800095e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000962:	2b00      	cmp	r3, #0
 8000964:	da1d      	bge.n	80009a2 <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8000966:	2301      	movs	r3, #1
 8000968:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800096a:	e01a      	b.n	80009a2 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	781a      	ldrb	r2, [r3, #0]
 8000970:	89b9      	ldrh	r1, [r7, #12]
 8000972:	8bfb      	ldrh	r3, [r7, #30]
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff43 	bl	8000800 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800097a:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <BSP_LCD_DisplayStringAt+0x180>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	4923      	ldr	r1, [pc, #140]	; (8000a0c <BSP_LCD_DisplayStringAt+0x184>)
 8000980:	4613      	mov	r3, r2
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	4413      	add	r3, r2
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	440b      	add	r3, r1
 800098a:	3308      	adds	r3, #8
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	889a      	ldrh	r2, [r3, #4]
 8000990:	8bfb      	ldrh	r3, [r7, #30]
 8000992:	4413      	add	r3, r2
 8000994:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	3301      	adds	r3, #1
 800099a:	60bb      	str	r3, [r7, #8]
    i++;
 800099c:	8bbb      	ldrh	r3, [r7, #28]
 800099e:	3301      	adds	r3, #1
 80009a0:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	bf14      	ite	ne
 80009aa:	2301      	movne	r3, #1
 80009ac:	2300      	moveq	r3, #0
 80009ae:	b2dc      	uxtb	r4, r3
 80009b0:	f7ff fe1a 	bl	80005e8 <BSP_LCD_GetXSize>
 80009b4:	4605      	mov	r5, r0
 80009b6:	8bb9      	ldrh	r1, [r7, #28]
 80009b8:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <BSP_LCD_DisplayStringAt+0x180>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4813      	ldr	r0, [pc, #76]	; (8000a0c <BSP_LCD_DisplayStringAt+0x184>)
 80009be:	4613      	mov	r3, r2
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	4413      	add	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	4403      	add	r3, r0
 80009c8:	3308      	adds	r3, #8
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	889b      	ldrh	r3, [r3, #4]
 80009ce:	fb03 f301 	mul.w	r3, r3, r1
 80009d2:	1aeb      	subs	r3, r5, r3
 80009d4:	b299      	uxth	r1, r3
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <BSP_LCD_DisplayStringAt+0x180>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	480c      	ldr	r0, [pc, #48]	; (8000a0c <BSP_LCD_DisplayStringAt+0x184>)
 80009dc:	4613      	mov	r3, r2
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	4413      	add	r3, r2
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	4403      	add	r3, r0
 80009e6:	3308      	adds	r3, #8
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	889b      	ldrh	r3, [r3, #4]
 80009ec:	4299      	cmp	r1, r3
 80009ee:	bf2c      	ite	cs
 80009f0:	2301      	movcs	r3, #1
 80009f2:	2300      	movcc	r3, #0
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	4023      	ands	r3, r4
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d1b6      	bne.n	800096c <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 80009fe:	bf00      	nop
 8000a00:	3720      	adds	r7, #32
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bdb0      	pop	{r4, r5, r7, pc}
 8000a06:	bf00      	nop
 8000a08:	2000007c 	.word	0x2000007c
 8000a0c:	20000080 	.word	0x20000080

08000a10 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8000a10:	b5b0      	push	{r4, r5, r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	603a      	str	r2, [r7, #0]
 8000a1a:	80fb      	strh	r3, [r7, #6]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000a20:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <BSP_LCD_DrawPixel+0x88>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a1d      	ldr	r2, [pc, #116]	; (8000a9c <BSP_LCD_DrawPixel+0x8c>)
 8000a26:	2134      	movs	r1, #52	; 0x34
 8000a28:	fb01 f303 	mul.w	r3, r1, r3
 8000a2c:	4413      	add	r3, r2
 8000a2e:	3348      	adds	r3, #72	; 0x48
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b02      	cmp	r3, #2
 8000a34:	d116      	bne.n	8000a64 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <BSP_LCD_DrawPixel+0x88>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a18      	ldr	r2, [pc, #96]	; (8000a9c <BSP_LCD_DrawPixel+0x8c>)
 8000a3c:	2134      	movs	r1, #52	; 0x34
 8000a3e:	fb01 f303 	mul.w	r3, r1, r3
 8000a42:	4413      	add	r3, r2
 8000a44:	335c      	adds	r3, #92	; 0x5c
 8000a46:	681c      	ldr	r4, [r3, #0]
 8000a48:	88bd      	ldrh	r5, [r7, #4]
 8000a4a:	f7ff fdcd 	bl	80005e8 <BSP_LCD_GetXSize>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	fb03 f205 	mul.w	r2, r3, r5
 8000a54:	88fb      	ldrh	r3, [r7, #6]
 8000a56:	4413      	add	r3, r2
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	4423      	add	r3, r4
 8000a5c:	683a      	ldr	r2, [r7, #0]
 8000a5e:	b292      	uxth	r2, r2
 8000a60:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8000a62:	e015      	b.n	8000a90 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <BSP_LCD_DrawPixel+0x88>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0c      	ldr	r2, [pc, #48]	; (8000a9c <BSP_LCD_DrawPixel+0x8c>)
 8000a6a:	2134      	movs	r1, #52	; 0x34
 8000a6c:	fb01 f303 	mul.w	r3, r1, r3
 8000a70:	4413      	add	r3, r2
 8000a72:	335c      	adds	r3, #92	; 0x5c
 8000a74:	681c      	ldr	r4, [r3, #0]
 8000a76:	88bd      	ldrh	r5, [r7, #4]
 8000a78:	f7ff fdb6 	bl	80005e8 <BSP_LCD_GetXSize>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	fb03 f205 	mul.w	r2, r3, r5
 8000a82:	88fb      	ldrh	r3, [r7, #6]
 8000a84:	4413      	add	r3, r2
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	4423      	add	r3, r4
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	6013      	str	r3, [r2, #0]
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bdb0      	pop	{r4, r5, r7, pc}
 8000a98:	2000007c 	.word	0x2000007c
 8000a9c:	200001ac 	.word	0x200001ac

08000aa0 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8000aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000aa4:	b086      	sub	sp, #24
 8000aa6:	af02      	add	r7, sp, #8
 8000aa8:	4604      	mov	r4, r0
 8000aaa:	4608      	mov	r0, r1
 8000aac:	4611      	mov	r1, r2
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4623      	mov	r3, r4
 8000ab2:	80fb      	strh	r3, [r7, #6]
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	80bb      	strh	r3, [r7, #4]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	807b      	strh	r3, [r7, #2]
 8000abc:	4613      	mov	r3, r2
 8000abe:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8000ac4:	4b30      	ldr	r3, [pc, #192]	; (8000b88 <BSP_LCD_FillRect+0xe8>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4930      	ldr	r1, [pc, #192]	; (8000b8c <BSP_LCD_FillRect+0xec>)
 8000aca:	4613      	mov	r3, r2
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	4413      	add	r3, r2
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	440b      	add	r3, r1
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fe1e 	bl	8000718 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000adc:	4b2a      	ldr	r3, [pc, #168]	; (8000b88 <BSP_LCD_FillRect+0xe8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a2b      	ldr	r2, [pc, #172]	; (8000b90 <BSP_LCD_FillRect+0xf0>)
 8000ae2:	2134      	movs	r1, #52	; 0x34
 8000ae4:	fb01 f303 	mul.w	r3, r1, r3
 8000ae8:	4413      	add	r3, r2
 8000aea:	3348      	adds	r3, #72	; 0x48
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d114      	bne.n	8000b1c <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8000af2:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <BSP_LCD_FillRect+0xe8>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a26      	ldr	r2, [pc, #152]	; (8000b90 <BSP_LCD_FillRect+0xf0>)
 8000af8:	2134      	movs	r1, #52	; 0x34
 8000afa:	fb01 f303 	mul.w	r3, r1, r3
 8000afe:	4413      	add	r3, r2
 8000b00:	335c      	adds	r3, #92	; 0x5c
 8000b02:	681c      	ldr	r4, [r3, #0]
 8000b04:	f7ff fd70 	bl	80005e8 <BSP_LCD_GetXSize>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	88bb      	ldrh	r3, [r7, #4]
 8000b0c:	fb03 f202 	mul.w	r2, r3, r2
 8000b10:	88fb      	ldrh	r3, [r7, #6]
 8000b12:	4413      	add	r3, r2
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	4423      	add	r3, r4
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	e013      	b.n	8000b44 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <BSP_LCD_FillRect+0xe8>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a1b      	ldr	r2, [pc, #108]	; (8000b90 <BSP_LCD_FillRect+0xf0>)
 8000b22:	2134      	movs	r1, #52	; 0x34
 8000b24:	fb01 f303 	mul.w	r3, r1, r3
 8000b28:	4413      	add	r3, r2
 8000b2a:	335c      	adds	r3, #92	; 0x5c
 8000b2c:	681c      	ldr	r4, [r3, #0]
 8000b2e:	f7ff fd5b 	bl	80005e8 <BSP_LCD_GetXSize>
 8000b32:	4602      	mov	r2, r0
 8000b34:	88bb      	ldrh	r3, [r7, #4]
 8000b36:	fb03 f202 	mul.w	r2, r3, r2
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	4423      	add	r3, r4
 8000b42:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8000b44:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <BSP_LCD_FillRect+0xe8>)
 8000b46:	681c      	ldr	r4, [r3, #0]
 8000b48:	68fd      	ldr	r5, [r7, #12]
 8000b4a:	887e      	ldrh	r6, [r7, #2]
 8000b4c:	f8b7 8000 	ldrh.w	r8, [r7]
 8000b50:	f7ff fd4a 	bl	80005e8 <BSP_LCD_GetXSize>
 8000b54:	4602      	mov	r2, r0
 8000b56:	887b      	ldrh	r3, [r7, #2]
 8000b58:	1ad1      	subs	r1, r2, r3
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <BSP_LCD_FillRect+0xe8>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	480b      	ldr	r0, [pc, #44]	; (8000b8c <BSP_LCD_FillRect+0xec>)
 8000b60:	4613      	mov	r3, r2
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	4413      	add	r3, r2
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	4403      	add	r3, r0
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	9301      	str	r3, [sp, #4]
 8000b6e:	9100      	str	r1, [sp, #0]
 8000b70:	4643      	mov	r3, r8
 8000b72:	4632      	mov	r2, r6
 8000b74:	4629      	mov	r1, r5
 8000b76:	4620      	mov	r0, r4
 8000b78:	f000 f9d8 	bl	8000f2c <LL_FillBuffer>
}
 8000b7c:	bf00      	nop
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b86:	bf00      	nop
 8000b88:	2000007c 	.word	0x2000007c
 8000b8c:	20000080 	.word	0x20000080
 8000b90:	200001ac 	.word	0x200001ac

08000b94 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8000b98:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <BSP_LCD_DisplayOn+0x30>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	699a      	ldr	r2, [r3, #24]
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <BSP_LCD_DisplayOn+0x30>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f042 0201 	orr.w	r2, r2, #1
 8000ba6:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bae:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <BSP_LCD_DisplayOn+0x34>)
 8000bb0:	f001 fcc4 	bl	800253c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2108      	movs	r1, #8
 8000bb8:	4804      	ldr	r0, [pc, #16]	; (8000bcc <BSP_LCD_DisplayOn+0x38>)
 8000bba:	f001 fcbf 	bl	800253c <HAL_GPIO_WritePin>
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200001ac 	.word	0x200001ac
 8000bc8:	40022000 	.word	0x40022000
 8000bcc:	40022800 	.word	0x40022800

08000bd0 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b090      	sub	sp, #64	; 0x40
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000bda:	4b64      	ldr	r3, [pc, #400]	; (8000d6c <BSP_LCD_MspInit+0x19c>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	4a63      	ldr	r2, [pc, #396]	; (8000d6c <BSP_LCD_MspInit+0x19c>)
 8000be0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000be4:	6453      	str	r3, [r2, #68]	; 0x44
 8000be6:	4b61      	ldr	r3, [pc, #388]	; (8000d6c <BSP_LCD_MspInit+0x19c>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8000bf2:	4b5e      	ldr	r3, [pc, #376]	; (8000d6c <BSP_LCD_MspInit+0x19c>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a5d      	ldr	r2, [pc, #372]	; (8000d6c <BSP_LCD_MspInit+0x19c>)
 8000bf8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b5b      	ldr	r3, [pc, #364]	; (8000d6c <BSP_LCD_MspInit+0x19c>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
 8000c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c0a:	4b58      	ldr	r3, [pc, #352]	; (8000d6c <BSP_LCD_MspInit+0x19c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a57      	ldr	r2, [pc, #348]	; (8000d6c <BSP_LCD_MspInit+0x19c>)
 8000c10:	f043 0310 	orr.w	r3, r3, #16
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b55      	ldr	r3, [pc, #340]	; (8000d6c <BSP_LCD_MspInit+0x19c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0310 	and.w	r3, r3, #16
 8000c1e:	623b      	str	r3, [r7, #32]
 8000c20:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c22:	4b52      	ldr	r3, [pc, #328]	; (8000d6c <BSP_LCD_MspInit+0x19c>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a51      	ldr	r2, [pc, #324]	; (8000d6c <BSP_LCD_MspInit+0x19c>)
 8000c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b4f      	ldr	r3, [pc, #316]	; (8000d6c <BSP_LCD_MspInit+0x19c>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c36:	61fb      	str	r3, [r7, #28]
 8000c38:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c3a:	4b4c      	ldr	r3, [pc, #304]	; (8000d6c <BSP_LCD_MspInit+0x19c>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a4b      	ldr	r2, [pc, #300]	; (8000d6c <BSP_LCD_MspInit+0x19c>)
 8000c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b49      	ldr	r3, [pc, #292]	; (8000d6c <BSP_LCD_MspInit+0x19c>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c4e:	61bb      	str	r3, [r7, #24]
 8000c50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c52:	4b46      	ldr	r3, [pc, #280]	; (8000d6c <BSP_LCD_MspInit+0x19c>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a45      	ldr	r2, [pc, #276]	; (8000d6c <BSP_LCD_MspInit+0x19c>)
 8000c58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b43      	ldr	r3, [pc, #268]	; (8000d6c <BSP_LCD_MspInit+0x19c>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000c6a:	4b40      	ldr	r3, [pc, #256]	; (8000d6c <BSP_LCD_MspInit+0x19c>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a3f      	ldr	r2, [pc, #252]	; (8000d6c <BSP_LCD_MspInit+0x19c>)
 8000c70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b3d      	ldr	r3, [pc, #244]	; (8000d6c <BSP_LCD_MspInit+0x19c>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8000c82:	4b3a      	ldr	r3, [pc, #232]	; (8000d6c <BSP_LCD_MspInit+0x19c>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a39      	ldr	r2, [pc, #228]	; (8000d6c <BSP_LCD_MspInit+0x19c>)
 8000c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b37      	ldr	r3, [pc, #220]	; (8000d6c <BSP_LCD_MspInit+0x19c>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8000c9a:	4b34      	ldr	r3, [pc, #208]	; (8000d6c <BSP_LCD_MspInit+0x19c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a33      	ldr	r2, [pc, #204]	; (8000d6c <BSP_LCD_MspInit+0x19c>)
 8000ca0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b31      	ldr	r3, [pc, #196]	; (8000d6c <BSP_LCD_MspInit+0x19c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8000cb2:	2310      	movs	r3, #16
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8000cc2:	230e      	movs	r3, #14
 8000cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000cc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4828      	ldr	r0, [pc, #160]	; (8000d70 <BSP_LCD_MspInit+0x1a0>)
 8000cce:	f001 fa8b 	bl	80021e8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8000cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8000cdc:	2309      	movs	r3, #9
 8000cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8000ce0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4823      	ldr	r0, [pc, #140]	; (8000d74 <BSP_LCD_MspInit+0x1a4>)
 8000ce8:	f001 fa7e 	bl	80021e8 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8000cec:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8000cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8000cf6:	230e      	movs	r3, #14
 8000cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8000cfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cfe:	4619      	mov	r1, r3
 8000d00:	481d      	ldr	r0, [pc, #116]	; (8000d78 <BSP_LCD_MspInit+0x1a8>)
 8000d02:	f001 fa71 	bl	80021e8 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8000d06:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8000d10:	230e      	movs	r3, #14
 8000d12:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8000d14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4818      	ldr	r0, [pc, #96]	; (8000d7c <BSP_LCD_MspInit+0x1ac>)
 8000d1c:	f001 fa64 	bl	80021e8 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8000d20:	23f7      	movs	r3, #247	; 0xf7
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8000d28:	230e      	movs	r3, #14
 8000d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8000d2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d30:	4619      	mov	r1, r3
 8000d32:	4813      	ldr	r0, [pc, #76]	; (8000d80 <BSP_LCD_MspInit+0x1b0>)
 8000d34:	f001 fa58 	bl	80021e8 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8000d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8000d42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d46:	4619      	mov	r1, r3
 8000d48:	480b      	ldr	r0, [pc, #44]	; (8000d78 <BSP_LCD_MspInit+0x1a8>)
 8000d4a:	f001 fa4d 	bl	80021e8 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8000d4e:	2308      	movs	r3, #8
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8000d56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4808      	ldr	r0, [pc, #32]	; (8000d80 <BSP_LCD_MspInit+0x1b0>)
 8000d5e:	f001 fa43 	bl	80021e8 <HAL_GPIO_Init>
}
 8000d62:	bf00      	nop
 8000d64:	3740      	adds	r7, #64	; 0x40
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40021000 	.word	0x40021000
 8000d74:	40021800 	.word	0x40021800
 8000d78:	40022000 	.word	0x40022000
 8000d7c:	40022400 	.word	0x40022400
 8000d80:	40022800 	.word	0x40022800

08000d84 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <BSP_LCD_ClockConfig+0x34>)
 8000d90:	2208      	movs	r2, #8
 8000d92:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <BSP_LCD_ClockConfig+0x34>)
 8000d96:	22c0      	movs	r2, #192	; 0xc0
 8000d98:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8000d9a:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <BSP_LCD_ClockConfig+0x34>)
 8000d9c:	2205      	movs	r2, #5
 8000d9e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <BSP_LCD_ClockConfig+0x34>)
 8000da2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000da6:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8000da8:	4803      	ldr	r0, [pc, #12]	; (8000db8 <BSP_LCD_ClockConfig+0x34>)
 8000daa:	f002 fcc7 	bl	800373c <HAL_RCCEx_PeriphCLKConfig>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000098 	.word	0x20000098

08000dbc <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	603a      	str	r2, [r7, #0]
 8000dc6:	80fb      	strh	r3, [r7, #6]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8000dd4:	4b53      	ldr	r3, [pc, #332]	; (8000f24 <DrawChar+0x168>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4953      	ldr	r1, [pc, #332]	; (8000f28 <DrawChar+0x16c>)
 8000dda:	4613      	mov	r3, r2
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	4413      	add	r3, r2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	440b      	add	r3, r1
 8000de4:	3308      	adds	r3, #8
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	88db      	ldrh	r3, [r3, #6]
 8000dea:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8000dec:	4b4d      	ldr	r3, [pc, #308]	; (8000f24 <DrawChar+0x168>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	494d      	ldr	r1, [pc, #308]	; (8000f28 <DrawChar+0x16c>)
 8000df2:	4613      	mov	r3, r2
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	4413      	add	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	3308      	adds	r3, #8
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	889b      	ldrh	r3, [r3, #4]
 8000e02:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8000e04:	8a3b      	ldrh	r3, [r7, #16]
 8000e06:	3307      	adds	r3, #7
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	da00      	bge.n	8000e0e <DrawChar+0x52>
 8000e0c:	3307      	adds	r3, #7
 8000e0e:	10db      	asrs	r3, r3, #3
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	8a3b      	ldrh	r3, [r7, #16]
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
 8000e22:	e076      	b.n	8000f12 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8000e24:	8a3b      	ldrh	r3, [r7, #16]
 8000e26:	3307      	adds	r3, #7
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	da00      	bge.n	8000e2e <DrawChar+0x72>
 8000e2c:	3307      	adds	r3, #7
 8000e2e:	10db      	asrs	r3, r3, #3
 8000e30:	461a      	mov	r2, r3
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	fb03 f302 	mul.w	r3, r3, r2
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8000e3e:	8a3b      	ldrh	r3, [r7, #16]
 8000e40:	3307      	adds	r3, #7
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	da00      	bge.n	8000e48 <DrawChar+0x8c>
 8000e46:	3307      	adds	r3, #7
 8000e48:	10db      	asrs	r3, r3, #3
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d002      	beq.n	8000e54 <DrawChar+0x98>
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d004      	beq.n	8000e5c <DrawChar+0xa0>
 8000e52:	e00c      	b.n	8000e6e <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	617b      	str	r3, [r7, #20]
      break;
 8000e5a:	e016      	b.n	8000e8a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	021b      	lsls	r3, r3, #8
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	3201      	adds	r2, #1
 8000e66:	7812      	ldrb	r2, [r2, #0]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	617b      	str	r3, [r7, #20]
      break;
 8000e6c:	e00d      	b.n	8000e8a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	041a      	lsls	r2, r3, #16
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	3301      	adds	r3, #1
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	021b      	lsls	r3, r3, #8
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	3202      	adds	r2, #2
 8000e82:	7812      	ldrb	r2, [r2, #0]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	617b      	str	r3, [r7, #20]
      break;
 8000e88:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]
 8000e8e:	e036      	b.n	8000efe <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8000e90:	8a3a      	ldrh	r2, [r7, #16]
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	1ad2      	subs	r2, r2, r3
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
 8000e98:	4413      	add	r3, r2
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d012      	beq.n	8000ed2 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	b298      	uxth	r0, r3
 8000eb6:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <DrawChar+0x168>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	491b      	ldr	r1, [pc, #108]	; (8000f28 <DrawChar+0x16c>)
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	4413      	add	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	440b      	add	r3, r1
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	88bb      	ldrh	r3, [r7, #4]
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f7ff fda0 	bl	8000a10 <BSP_LCD_DrawPixel>
 8000ed0:	e012      	b.n	8000ef8 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	4413      	add	r3, r2
 8000eda:	b298      	uxth	r0, r3
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <DrawChar+0x168>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4911      	ldr	r1, [pc, #68]	; (8000f28 <DrawChar+0x16c>)
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	4413      	add	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	440b      	add	r3, r1
 8000eec:	3304      	adds	r3, #4
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	88bb      	ldrh	r3, [r7, #4]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f7ff fd8c 	bl	8000a10 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	3301      	adds	r3, #1
 8000efc:	61bb      	str	r3, [r7, #24]
 8000efe:	8a3b      	ldrh	r3, [r7, #16]
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d3c4      	bcc.n	8000e90 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8000f06:	88bb      	ldrh	r3, [r7, #4]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	61fb      	str	r3, [r7, #28]
 8000f12:	8a7b      	ldrh	r3, [r7, #18]
 8000f14:	69fa      	ldr	r2, [r7, #28]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d384      	bcc.n	8000e24 <DrawChar+0x68>
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	3720      	adds	r7, #32
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	2000007c 	.word	0x2000007c
 8000f28:	20000080 	.word	0x20000080

08000f2c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af02      	add	r7, sp, #8
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8000f3a:	4b1e      	ldr	r3, [pc, #120]	; (8000fb4 <LL_FillBuffer+0x88>)
 8000f3c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f40:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000f42:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <LL_FillBuffer+0x8c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a1d      	ldr	r2, [pc, #116]	; (8000fbc <LL_FillBuffer+0x90>)
 8000f48:	2134      	movs	r1, #52	; 0x34
 8000f4a:	fb01 f303 	mul.w	r3, r1, r3
 8000f4e:	4413      	add	r3, r2
 8000f50:	3348      	adds	r3, #72	; 0x48
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d103      	bne.n	8000f60 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8000f58:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <LL_FillBuffer+0x88>)
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	e002      	b.n	8000f66 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <LL_FillBuffer+0x88>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8000f66:	4a13      	ldr	r2, [pc, #76]	; (8000fb4 <LL_FillBuffer+0x88>)
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <LL_FillBuffer+0x88>)
 8000f6e:	4a14      	ldr	r2, [pc, #80]	; (8000fc0 <LL_FillBuffer+0x94>)
 8000f70:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8000f72:	4810      	ldr	r0, [pc, #64]	; (8000fb4 <LL_FillBuffer+0x88>)
 8000f74:	f000 fd9c 	bl	8001ab0 <HAL_DMA2D_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d115      	bne.n	8000faa <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8000f7e:	68f9      	ldr	r1, [r7, #12]
 8000f80:	480c      	ldr	r0, [pc, #48]	; (8000fb4 <LL_FillBuffer+0x88>)
 8000f82:	f001 f803 	bl	8001f8c <HAL_DMA2D_ConfigLayer>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d10e      	bne.n	8000faa <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69f9      	ldr	r1, [r7, #28]
 8000f96:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <LL_FillBuffer+0x88>)
 8000f98:	f000 fdd4 	bl	8001b44 <HAL_DMA2D_Start>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d103      	bne.n	8000faa <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8000fa2:	210a      	movs	r1, #10
 8000fa4:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <LL_FillBuffer+0x88>)
 8000fa6:	f000 fdf8 	bl	8001b9a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	2000003c 	.word	0x2000003c
 8000fb8:	2000007c 	.word	0x2000007c
 8000fbc:	200001ac 	.word	0x200001ac
 8000fc0:	4002b000 	.word	0x4002b000

08000fc4 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8000fc8:	4b29      	ldr	r3, [pc, #164]	; (8001070 <BSP_SDRAM_Init+0xac>)
 8000fca:	4a2a      	ldr	r2, [pc, #168]	; (8001074 <BSP_SDRAM_Init+0xb0>)
 8000fcc:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8000fce:	4b2a      	ldr	r3, [pc, #168]	; (8001078 <BSP_SDRAM_Init+0xb4>)
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8000fd4:	4b28      	ldr	r3, [pc, #160]	; (8001078 <BSP_SDRAM_Init+0xb4>)
 8000fd6:	2207      	movs	r2, #7
 8000fd8:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8000fda:	4b27      	ldr	r3, [pc, #156]	; (8001078 <BSP_SDRAM_Init+0xb4>)
 8000fdc:	2204      	movs	r2, #4
 8000fde:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8000fe0:	4b25      	ldr	r3, [pc, #148]	; (8001078 <BSP_SDRAM_Init+0xb4>)
 8000fe2:	2207      	movs	r2, #7
 8000fe4:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8000fe6:	4b24      	ldr	r3, [pc, #144]	; (8001078 <BSP_SDRAM_Init+0xb4>)
 8000fe8:	2202      	movs	r2, #2
 8000fea:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8000fec:	4b22      	ldr	r3, [pc, #136]	; (8001078 <BSP_SDRAM_Init+0xb4>)
 8000fee:	2202      	movs	r2, #2
 8000ff0:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8000ff2:	4b21      	ldr	r3, [pc, #132]	; (8001078 <BSP_SDRAM_Init+0xb4>)
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <BSP_SDRAM_Init+0xac>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <BSP_SDRAM_Init+0xac>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <BSP_SDRAM_Init+0xac>)
 8001006:	2204      	movs	r2, #4
 8001008:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800100a:	4b19      	ldr	r3, [pc, #100]	; (8001070 <BSP_SDRAM_Init+0xac>)
 800100c:	2210      	movs	r2, #16
 800100e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001010:	4b17      	ldr	r3, [pc, #92]	; (8001070 <BSP_SDRAM_Init+0xac>)
 8001012:	2240      	movs	r2, #64	; 0x40
 8001014:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8001016:	4b16      	ldr	r3, [pc, #88]	; (8001070 <BSP_SDRAM_Init+0xac>)
 8001018:	f44f 7280 	mov.w	r2, #256	; 0x100
 800101c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <BSP_SDRAM_Init+0xac>)
 8001020:	2200      	movs	r2, #0
 8001022:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <BSP_SDRAM_Init+0xac>)
 8001026:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800102a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800102c:	4b10      	ldr	r3, [pc, #64]	; (8001070 <BSP_SDRAM_Init+0xac>)
 800102e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001032:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001034:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <BSP_SDRAM_Init+0xac>)
 8001036:	2200      	movs	r2, #0
 8001038:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800103a:	2100      	movs	r1, #0
 800103c:	480c      	ldr	r0, [pc, #48]	; (8001070 <BSP_SDRAM_Init+0xac>)
 800103e:	f000 f87f 	bl	8001140 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001042:	490d      	ldr	r1, [pc, #52]	; (8001078 <BSP_SDRAM_Init+0xb4>)
 8001044:	480a      	ldr	r0, [pc, #40]	; (8001070 <BSP_SDRAM_Init+0xac>)
 8001046:	f004 f930 	bl	80052aa <HAL_SDRAM_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <BSP_SDRAM_Init+0xb8>)
 8001052:	2201      	movs	r2, #1
 8001054:	701a      	strb	r2, [r3, #0]
 8001056:	e002      	b.n	800105e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <BSP_SDRAM_Init+0xb8>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800105e:	f240 6003 	movw	r0, #1539	; 0x603
 8001062:	f000 f80d 	bl	8001080 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8001066:	4b05      	ldr	r3, [pc, #20]	; (800107c <BSP_SDRAM_Init+0xb8>)
 8001068:	781b      	ldrb	r3, [r3, #0]
}
 800106a:	4618      	mov	r0, r3
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000254 	.word	0x20000254
 8001074:	a0000140 	.word	0xa0000140
 8001078:	2000011c 	.word	0x2000011c
 800107c:	20000010 	.word	0x20000010

08001080 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800108c:	4b2a      	ldr	r3, [pc, #168]	; (8001138 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800108e:	2201      	movs	r2, #1
 8001090:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001092:	4b29      	ldr	r3, [pc, #164]	; (8001138 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001094:	2210      	movs	r2, #16
 8001096:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001098:	4b27      	ldr	r3, [pc, #156]	; (8001138 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800109a:	2201      	movs	r2, #1
 800109c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800109e:	4b26      	ldr	r3, [pc, #152]	; (8001138 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80010a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010a8:	4923      	ldr	r1, [pc, #140]	; (8001138 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80010aa:	4824      	ldr	r0, [pc, #144]	; (800113c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80010ac:	f004 f931 	bl	8005312 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80010b0:	2001      	movs	r0, #1
 80010b2:	f000 f99b 	bl	80013ec <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80010b6:	4b20      	ldr	r3, [pc, #128]	; (8001138 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80010b8:	2202      	movs	r2, #2
 80010ba:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80010bc:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80010be:	2210      	movs	r2, #16
 80010c0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80010c2:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80010ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010d2:	4919      	ldr	r1, [pc, #100]	; (8001138 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80010d4:	4819      	ldr	r0, [pc, #100]	; (800113c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80010d6:	f004 f91c 	bl	8005312 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80010dc:	2203      	movs	r2, #3
 80010de:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80010e0:	4b15      	ldr	r3, [pc, #84]	; (8001138 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80010e2:	2210      	movs	r2, #16
 80010e4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80010e8:	2208      	movs	r2, #8
 80010ea:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80010f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f6:	4910      	ldr	r1, [pc, #64]	; (8001138 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80010f8:	4810      	ldr	r0, [pc, #64]	; (800113c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80010fa:	f004 f90a 	bl	8005312 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80010fe:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001102:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001106:	2204      	movs	r2, #4
 8001108:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800110c:	2210      	movs	r2, #16
 800110e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001112:	2201      	movs	r2, #1
 8001114:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4a07      	ldr	r2, [pc, #28]	; (8001138 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800111a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800111c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001120:	4905      	ldr	r1, [pc, #20]	; (8001138 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001122:	4806      	ldr	r0, [pc, #24]	; (800113c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001124:	f004 f8f5 	bl	8005312 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	4804      	ldr	r0, [pc, #16]	; (800113c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800112c:	f004 f91c 	bl	8005368 <HAL_SDRAM_ProgramRefreshRate>
}
 8001130:	bf00      	nop
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000138 	.word	0x20000138
 800113c:	20000254 	.word	0x20000254

08001140 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8001140:	b580      	push	{r7, lr}
 8001142:	b090      	sub	sp, #64	; 0x40
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800114a:	4b70      	ldr	r3, [pc, #448]	; (800130c <BSP_SDRAM_MspInit+0x1cc>)
 800114c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800114e:	4a6f      	ldr	r2, [pc, #444]	; (800130c <BSP_SDRAM_MspInit+0x1cc>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6393      	str	r3, [r2, #56]	; 0x38
 8001156:	4b6d      	ldr	r3, [pc, #436]	; (800130c <BSP_SDRAM_MspInit+0x1cc>)
 8001158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001160:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8001162:	4b6a      	ldr	r3, [pc, #424]	; (800130c <BSP_SDRAM_MspInit+0x1cc>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a69      	ldr	r2, [pc, #420]	; (800130c <BSP_SDRAM_MspInit+0x1cc>)
 8001168:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b67      	ldr	r3, [pc, #412]	; (800130c <BSP_SDRAM_MspInit+0x1cc>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
 8001178:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117a:	4b64      	ldr	r3, [pc, #400]	; (800130c <BSP_SDRAM_MspInit+0x1cc>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a63      	ldr	r2, [pc, #396]	; (800130c <BSP_SDRAM_MspInit+0x1cc>)
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b61      	ldr	r3, [pc, #388]	; (800130c <BSP_SDRAM_MspInit+0x1cc>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	623b      	str	r3, [r7, #32]
 8001190:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001192:	4b5e      	ldr	r3, [pc, #376]	; (800130c <BSP_SDRAM_MspInit+0x1cc>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a5d      	ldr	r2, [pc, #372]	; (800130c <BSP_SDRAM_MspInit+0x1cc>)
 8001198:	f043 0308 	orr.w	r3, r3, #8
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b5b      	ldr	r3, [pc, #364]	; (800130c <BSP_SDRAM_MspInit+0x1cc>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0308 	and.w	r3, r3, #8
 80011a6:	61fb      	str	r3, [r7, #28]
 80011a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011aa:	4b58      	ldr	r3, [pc, #352]	; (800130c <BSP_SDRAM_MspInit+0x1cc>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a57      	ldr	r2, [pc, #348]	; (800130c <BSP_SDRAM_MspInit+0x1cc>)
 80011b0:	f043 0310 	orr.w	r3, r3, #16
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b55      	ldr	r3, [pc, #340]	; (800130c <BSP_SDRAM_MspInit+0x1cc>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0310 	and.w	r3, r3, #16
 80011be:	61bb      	str	r3, [r7, #24]
 80011c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011c2:	4b52      	ldr	r3, [pc, #328]	; (800130c <BSP_SDRAM_MspInit+0x1cc>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a51      	ldr	r2, [pc, #324]	; (800130c <BSP_SDRAM_MspInit+0x1cc>)
 80011c8:	f043 0320 	orr.w	r3, r3, #32
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b4f      	ldr	r3, [pc, #316]	; (800130c <BSP_SDRAM_MspInit+0x1cc>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0320 	and.w	r3, r3, #32
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011da:	4b4c      	ldr	r3, [pc, #304]	; (800130c <BSP_SDRAM_MspInit+0x1cc>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a4b      	ldr	r2, [pc, #300]	; (800130c <BSP_SDRAM_MspInit+0x1cc>)
 80011e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b49      	ldr	r3, [pc, #292]	; (800130c <BSP_SDRAM_MspInit+0x1cc>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011f2:	4b46      	ldr	r3, [pc, #280]	; (800130c <BSP_SDRAM_MspInit+0x1cc>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a45      	ldr	r2, [pc, #276]	; (800130c <BSP_SDRAM_MspInit+0x1cc>)
 80011f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b43      	ldr	r3, [pc, #268]	; (800130c <BSP_SDRAM_MspInit+0x1cc>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800120e:	2301      	movs	r3, #1
 8001210:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8001212:	2302      	movs	r3, #2
 8001214:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001216:	230c      	movs	r3, #12
 8001218:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800121a:	2308      	movs	r3, #8
 800121c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800121e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001222:	4619      	mov	r1, r3
 8001224:	483a      	ldr	r0, [pc, #232]	; (8001310 <BSP_SDRAM_MspInit+0x1d0>)
 8001226:	f000 ffdf 	bl	80021e8 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800122a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001230:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001234:	4619      	mov	r1, r3
 8001236:	4837      	ldr	r0, [pc, #220]	; (8001314 <BSP_SDRAM_MspInit+0x1d4>)
 8001238:	f000 ffd6 	bl	80021e8 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800123c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001242:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001246:	4619      	mov	r1, r3
 8001248:	4833      	ldr	r0, [pc, #204]	; (8001318 <BSP_SDRAM_MspInit+0x1d8>)
 800124a:	f000 ffcd 	bl	80021e8 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800124e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001254:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001258:	4619      	mov	r1, r3
 800125a:	4830      	ldr	r0, [pc, #192]	; (800131c <BSP_SDRAM_MspInit+0x1dc>)
 800125c:	f000 ffc4 	bl	80021e8 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8001260:	f248 1333 	movw	r3, #33075	; 0x8133
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001266:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800126a:	4619      	mov	r1, r3
 800126c:	482c      	ldr	r0, [pc, #176]	; (8001320 <BSP_SDRAM_MspInit+0x1e0>)
 800126e:	f000 ffbb 	bl	80021e8 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8001272:	2328      	movs	r3, #40	; 0x28
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001276:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800127a:	4619      	mov	r1, r3
 800127c:	4829      	ldr	r0, [pc, #164]	; (8001324 <BSP_SDRAM_MspInit+0x1e4>)
 800127e:	f000 ffb3 	bl	80021e8 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001282:	4b29      	ldr	r3, [pc, #164]	; (8001328 <BSP_SDRAM_MspInit+0x1e8>)
 8001284:	2200      	movs	r2, #0
 8001286:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001288:	4b27      	ldr	r3, [pc, #156]	; (8001328 <BSP_SDRAM_MspInit+0x1e8>)
 800128a:	2280      	movs	r2, #128	; 0x80
 800128c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800128e:	4b26      	ldr	r3, [pc, #152]	; (8001328 <BSP_SDRAM_MspInit+0x1e8>)
 8001290:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001294:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8001296:	4b24      	ldr	r3, [pc, #144]	; (8001328 <BSP_SDRAM_MspInit+0x1e8>)
 8001298:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800129c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800129e:	4b22      	ldr	r3, [pc, #136]	; (8001328 <BSP_SDRAM_MspInit+0x1e8>)
 80012a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012a4:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80012a6:	4b20      	ldr	r3, [pc, #128]	; (8001328 <BSP_SDRAM_MspInit+0x1e8>)
 80012a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ac:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80012ae:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <BSP_SDRAM_MspInit+0x1e8>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80012b4:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <BSP_SDRAM_MspInit+0x1e8>)
 80012b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012ba:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80012bc:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <BSP_SDRAM_MspInit+0x1e8>)
 80012be:	2200      	movs	r2, #0
 80012c0:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80012c2:	4b19      	ldr	r3, [pc, #100]	; (8001328 <BSP_SDRAM_MspInit+0x1e8>)
 80012c4:	2203      	movs	r2, #3
 80012c6:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80012c8:	4b17      	ldr	r3, [pc, #92]	; (8001328 <BSP_SDRAM_MspInit+0x1e8>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80012ce:	4b16      	ldr	r3, [pc, #88]	; (8001328 <BSP_SDRAM_MspInit+0x1e8>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80012d4:	4b14      	ldr	r3, [pc, #80]	; (8001328 <BSP_SDRAM_MspInit+0x1e8>)
 80012d6:	4a15      	ldr	r2, [pc, #84]	; (800132c <BSP_SDRAM_MspInit+0x1ec>)
 80012d8:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a12      	ldr	r2, [pc, #72]	; (8001328 <BSP_SDRAM_MspInit+0x1e8>)
 80012de:	631a      	str	r2, [r3, #48]	; 0x30
 80012e0:	4a11      	ldr	r2, [pc, #68]	; (8001328 <BSP_SDRAM_MspInit+0x1e8>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80012e6:	4810      	ldr	r0, [pc, #64]	; (8001328 <BSP_SDRAM_MspInit+0x1e8>)
 80012e8:	f000 fad4 	bl	8001894 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80012ec:	480e      	ldr	r0, [pc, #56]	; (8001328 <BSP_SDRAM_MspInit+0x1e8>)
 80012ee:	f000 fa23 	bl	8001738 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	210f      	movs	r1, #15
 80012f6:	2038      	movs	r0, #56	; 0x38
 80012f8:	f000 f975 	bl	80015e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80012fc:	2038      	movs	r0, #56	; 0x38
 80012fe:	f000 f98e 	bl	800161e <HAL_NVIC_EnableIRQ>
}
 8001302:	bf00      	nop
 8001304:	3740      	adds	r7, #64	; 0x40
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800
 8001310:	40020800 	.word	0x40020800
 8001314:	40020c00 	.word	0x40020c00
 8001318:	40021000 	.word	0x40021000
 800131c:	40021400 	.word	0x40021400
 8001320:	40021800 	.word	0x40021800
 8001324:	40021c00 	.word	0x40021c00
 8001328:	20000148 	.word	0x20000148
 800132c:	40026410 	.word	0x40026410

08001330 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001334:	2003      	movs	r0, #3
 8001336:	f000 f94b 	bl	80015d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800133a:	2000      	movs	r0, #0
 800133c:	f000 f806 	bl	800134c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001340:	f006 f954 	bl	80075ec <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_InitTick+0x54>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <HAL_InitTick+0x58>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	4619      	mov	r1, r3
 800135e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001362:	fbb3 f3f1 	udiv	r3, r3, r1
 8001366:	fbb2 f3f3 	udiv	r3, r2, r3
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f965 	bl	800163a <HAL_SYSTICK_Config>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e00e      	b.n	8001398 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b0f      	cmp	r3, #15
 800137e:	d80a      	bhi.n	8001396 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001380:	2200      	movs	r2, #0
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	f04f 30ff 	mov.w	r0, #4294967295
 8001388:	f000 f92d 	bl	80015e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800138c:	4a06      	ldr	r2, [pc, #24]	; (80013a8 <HAL_InitTick+0x5c>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001392:	2300      	movs	r3, #0
 8001394:	e000      	b.n	8001398 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
}
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	2000001c 	.word	0x2000001c
 80013a4:	20000018 	.word	0x20000018
 80013a8:	20000014 	.word	0x20000014

080013ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_IncTick+0x20>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_IncTick+0x24>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <HAL_IncTick+0x24>)
 80013be:	6013      	str	r3, [r2, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000018 	.word	0x20000018
 80013d0:	20000288 	.word	0x20000288

080013d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return uwTick;
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <HAL_GetTick+0x14>)
 80013da:	681b      	ldr	r3, [r3, #0]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000288 	.word	0x20000288

080013ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f4:	f7ff ffee 	bl	80013d4 <HAL_GetTick>
 80013f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001404:	d005      	beq.n	8001412 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <HAL_Delay+0x40>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4413      	add	r3, r2
 8001410:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001412:	bf00      	nop
 8001414:	f7ff ffde 	bl	80013d4 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	429a      	cmp	r2, r3
 8001422:	d8f7      	bhi.n	8001414 <HAL_Delay+0x28>
  {
  }
}
 8001424:	bf00      	nop
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000018 	.word	0x20000018

08001430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <__NVIC_SetPriorityGrouping+0x40>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800144c:	4013      	ands	r3, r2
 800144e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <__NVIC_SetPriorityGrouping+0x44>)
 800145a:	4313      	orrs	r3, r2
 800145c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145e:	4a04      	ldr	r2, [pc, #16]	; (8001470 <__NVIC_SetPriorityGrouping+0x40>)
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	60d3      	str	r3, [r2, #12]
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000ed00 	.word	0xe000ed00
 8001474:	05fa0000 	.word	0x05fa0000

08001478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <__NVIC_GetPriorityGrouping+0x18>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	f003 0307 	and.w	r3, r3, #7
}
 8001486:	4618      	mov	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	db0b      	blt.n	80014be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	f003 021f 	and.w	r2, r3, #31
 80014ac:	4907      	ldr	r1, [pc, #28]	; (80014cc <__NVIC_EnableIRQ+0x38>)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	095b      	lsrs	r3, r3, #5
 80014b4:	2001      	movs	r0, #1
 80014b6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000e100 	.word	0xe000e100

080014d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	6039      	str	r1, [r7, #0]
 80014da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	db0a      	blt.n	80014fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	490c      	ldr	r1, [pc, #48]	; (800151c <__NVIC_SetPriority+0x4c>)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	0112      	lsls	r2, r2, #4
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	440b      	add	r3, r1
 80014f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f8:	e00a      	b.n	8001510 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4908      	ldr	r1, [pc, #32]	; (8001520 <__NVIC_SetPriority+0x50>)
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	3b04      	subs	r3, #4
 8001508:	0112      	lsls	r2, r2, #4
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	440b      	add	r3, r1
 800150e:	761a      	strb	r2, [r3, #24]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000e100 	.word	0xe000e100
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001524:	b480      	push	{r7}
 8001526:	b089      	sub	sp, #36	; 0x24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f1c3 0307 	rsb	r3, r3, #7
 800153e:	2b04      	cmp	r3, #4
 8001540:	bf28      	it	cs
 8001542:	2304      	movcs	r3, #4
 8001544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3304      	adds	r3, #4
 800154a:	2b06      	cmp	r3, #6
 800154c:	d902      	bls.n	8001554 <NVIC_EncodePriority+0x30>
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3b03      	subs	r3, #3
 8001552:	e000      	b.n	8001556 <NVIC_EncodePriority+0x32>
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	f04f 32ff 	mov.w	r2, #4294967295
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43da      	mvns	r2, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	401a      	ands	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800156c:	f04f 31ff 	mov.w	r1, #4294967295
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	fa01 f303 	lsl.w	r3, r1, r3
 8001576:	43d9      	mvns	r1, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157c:	4313      	orrs	r3, r2
         );
}
 800157e:	4618      	mov	r0, r3
 8001580:	3724      	adds	r7, #36	; 0x24
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3b01      	subs	r3, #1
 8001598:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800159c:	d301      	bcc.n	80015a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800159e:	2301      	movs	r3, #1
 80015a0:	e00f      	b.n	80015c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015a2:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <SysTick_Config+0x40>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015aa:	210f      	movs	r1, #15
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295
 80015b0:	f7ff ff8e 	bl	80014d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <SysTick_Config+0x40>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ba:	4b04      	ldr	r3, [pc, #16]	; (80015cc <SysTick_Config+0x40>)
 80015bc:	2207      	movs	r2, #7
 80015be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	e000e010 	.word	0xe000e010

080015d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff ff29 	bl	8001430 <__NVIC_SetPriorityGrouping>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b086      	sub	sp, #24
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
 80015f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015f8:	f7ff ff3e 	bl	8001478 <__NVIC_GetPriorityGrouping>
 80015fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	6978      	ldr	r0, [r7, #20]
 8001604:	f7ff ff8e 	bl	8001524 <NVIC_EncodePriority>
 8001608:	4602      	mov	r2, r0
 800160a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160e:	4611      	mov	r1, r2
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff5d 	bl	80014d0 <__NVIC_SetPriority>
}
 8001616:	bf00      	nop
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff31 	bl	8001494 <__NVIC_EnableIRQ>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ffa2 	bl	800158c <SysTick_Config>
 8001648:	4603      	mov	r3, r0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e062      	b.n	800172c <HAL_DCMI_Init+0xd8>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d102      	bne.n	8001678 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else  
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f005 ffde 	bl	8007634 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2202      	movs	r2, #2
 800167c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6819      	ldr	r1, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	4b2a      	ldr	r3, [pc, #168]	; (8001734 <HAL_DCMI_Init+0xe0>)
 800168c:	400b      	ands	r3, r1
 800168e:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6819      	ldr	r1, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80016a4:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80016b0:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80016bc:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c2:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80016c8:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ce:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80016d4:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	601a      	str	r2, [r3, #0]
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b10      	cmp	r3, #16
 80016e4:	d112      	bne.n	800170c <HAL_DCMI_Init+0xb8>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	7f1b      	ldrb	r3, [r3, #28]
 80016ea:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	7f5b      	ldrb	r3, [r3, #29]
 80016f0:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 80016f2:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	7f9b      	ldrb	r3, [r3, #30]
 80016f8:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 80016fa:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	7fdb      	ldrb	r3, [r3, #31]
 8001702:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001708:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 800170a:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68da      	ldr	r2, [r3, #12]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f042 021e 	orr.w	r2, r2, #30
 800171a:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	ffe0f007 	.word	0xffe0f007

08001738 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001744:	f7ff fe46 	bl	80013d4 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e099      	b.n	8001888 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2202      	movs	r2, #2
 8001760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 0201 	bic.w	r2, r2, #1
 8001772:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001774:	e00f      	b.n	8001796 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001776:	f7ff fe2d 	bl	80013d4 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b05      	cmp	r3, #5
 8001782:	d908      	bls.n	8001796 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2220      	movs	r2, #32
 8001788:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2203      	movs	r2, #3
 800178e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e078      	b.n	8001888 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1e8      	bne.n	8001776 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	4b38      	ldr	r3, [pc, #224]	; (8001890 <HAL_DMA_Init+0x158>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d107      	bne.n	8001800 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	4313      	orrs	r3, r2
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f023 0307 	bic.w	r3, r3, #7
 8001816:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	4313      	orrs	r3, r2
 8001820:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001826:	2b04      	cmp	r3, #4
 8001828:	d117      	bne.n	800185a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	4313      	orrs	r3, r2
 8001832:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00e      	beq.n	800185a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 f8bd 	bl	80019bc <DMA_CheckFifoParam>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d008      	beq.n	800185a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2240      	movs	r2, #64	; 0x40
 800184c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001856:	2301      	movs	r3, #1
 8001858:	e016      	b.n	8001888 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 f874 	bl	8001950 <DMA_CalcBaseAndBitshift>
 8001868:	4603      	mov	r3, r0
 800186a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001870:	223f      	movs	r2, #63	; 0x3f
 8001872:	409a      	lsls	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	f010803f 	.word	0xf010803f

08001894 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e050      	b.n	8001948 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d101      	bne.n	80018b6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80018b2:	2302      	movs	r3, #2
 80018b4:	e048      	b.n	8001948 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0201 	bic.w	r2, r2, #1
 80018c4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2200      	movs	r2, #0
 80018d4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2200      	movs	r2, #0
 80018e4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2200      	movs	r2, #0
 80018ec:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2221      	movs	r2, #33	; 0x21
 80018f4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 f82a 	bl	8001950 <DMA_CalcBaseAndBitshift>
 80018fc:	4603      	mov	r3, r0
 80018fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001904:	223f      	movs	r2, #63	; 0x3f
 8001906:	409a      	lsls	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	b2db      	uxtb	r3, r3
 800195e:	3b10      	subs	r3, #16
 8001960:	4a13      	ldr	r2, [pc, #76]	; (80019b0 <DMA_CalcBaseAndBitshift+0x60>)
 8001962:	fba2 2303 	umull	r2, r3, r2, r3
 8001966:	091b      	lsrs	r3, r3, #4
 8001968:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800196a:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <DMA_CalcBaseAndBitshift+0x64>)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4413      	add	r3, r2
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	461a      	mov	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2b03      	cmp	r3, #3
 800197c:	d908      	bls.n	8001990 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	461a      	mov	r2, r3
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <DMA_CalcBaseAndBitshift+0x68>)
 8001986:	4013      	ands	r3, r2
 8001988:	1d1a      	adds	r2, r3, #4
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	659a      	str	r2, [r3, #88]	; 0x58
 800198e:	e006      	b.n	800199e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <DMA_CalcBaseAndBitshift+0x68>)
 8001998:	4013      	ands	r3, r2
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	aaaaaaab 	.word	0xaaaaaaab
 80019b4:	0800a628 	.word	0x0800a628
 80019b8:	fffffc00 	.word	0xfffffc00

080019bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019c4:	2300      	movs	r3, #0
 80019c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d11f      	bne.n	8001a16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d855      	bhi.n	8001a88 <DMA_CheckFifoParam+0xcc>
 80019dc:	a201      	add	r2, pc, #4	; (adr r2, 80019e4 <DMA_CheckFifoParam+0x28>)
 80019de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e2:	bf00      	nop
 80019e4:	080019f5 	.word	0x080019f5
 80019e8:	08001a07 	.word	0x08001a07
 80019ec:	080019f5 	.word	0x080019f5
 80019f0:	08001a89 	.word	0x08001a89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d045      	beq.n	8001a8c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a04:	e042      	b.n	8001a8c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a0e:	d13f      	bne.n	8001a90 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a14:	e03c      	b.n	8001a90 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a1e:	d121      	bne.n	8001a64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	d836      	bhi.n	8001a94 <DMA_CheckFifoParam+0xd8>
 8001a26:	a201      	add	r2, pc, #4	; (adr r2, 8001a2c <DMA_CheckFifoParam+0x70>)
 8001a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a2c:	08001a3d 	.word	0x08001a3d
 8001a30:	08001a43 	.word	0x08001a43
 8001a34:	08001a3d 	.word	0x08001a3d
 8001a38:	08001a55 	.word	0x08001a55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8001a40:	e02f      	b.n	8001aa2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d024      	beq.n	8001a98 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a52:	e021      	b.n	8001a98 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a5c:	d11e      	bne.n	8001a9c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a62:	e01b      	b.n	8001a9c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d902      	bls.n	8001a70 <DMA_CheckFifoParam+0xb4>
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d003      	beq.n	8001a76 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a6e:	e018      	b.n	8001aa2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
      break;
 8001a74:	e015      	b.n	8001aa2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00e      	beq.n	8001aa0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	73fb      	strb	r3, [r7, #15]
      break;
 8001a86:	e00b      	b.n	8001aa0 <DMA_CheckFifoParam+0xe4>
      break;
 8001a88:	bf00      	nop
 8001a8a:	e00a      	b.n	8001aa2 <DMA_CheckFifoParam+0xe6>
      break;
 8001a8c:	bf00      	nop
 8001a8e:	e008      	b.n	8001aa2 <DMA_CheckFifoParam+0xe6>
      break;
 8001a90:	bf00      	nop
 8001a92:	e006      	b.n	8001aa2 <DMA_CheckFifoParam+0xe6>
      break;
 8001a94:	bf00      	nop
 8001a96:	e004      	b.n	8001aa2 <DMA_CheckFifoParam+0xe6>
      break;
 8001a98:	bf00      	nop
 8001a9a:	e002      	b.n	8001aa2 <DMA_CheckFifoParam+0xe6>
      break;   
 8001a9c:	bf00      	nop
 8001a9e:	e000      	b.n	8001aa2 <DMA_CheckFifoParam+0xe6>
      break;
 8001aa0:	bf00      	nop
    }
  } 
  
  return status; 
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e039      	b.n	8001b36 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d106      	bne.n	8001adc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f005 fe6a 	bl	80077b0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2202      	movs	r2, #2
 8001ae0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b00:	f023 0107 	bic.w	r1, r3, #7
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b16:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <HAL_DMA2D_Init+0x90>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	68d1      	ldr	r1, [r2, #12]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6812      	ldr	r2, [r2, #0]
 8001b22:	430b      	orrs	r3, r1
 8001b24:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	ffffc000 	.word	0xffffc000

08001b44 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
 8001b50:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d101      	bne.n	8001b60 <HAL_DMA2D_Start+0x1c>
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	e018      	b.n	8001b92 <HAL_DMA2D_Start+0x4e>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	68b9      	ldr	r1, [r7, #8]
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 fa98 	bl	80020b0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0201 	orr.w	r2, r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d056      	beq.n	8001c64 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8001bb6:	f7ff fc0d 	bl	80013d4 <HAL_GetTick>
 8001bba:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001bbc:	e04b      	b.n	8001c56 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d023      	beq.n	8001c18 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 0320 	and.w	r3, r3, #32
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d005      	beq.n	8001be6 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bde:	f043 0202 	orr.w	r2, r3, #2
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d005      	beq.n	8001bfc <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf4:	f043 0201 	orr.w	r2, r3, #1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2221      	movs	r2, #33	; 0x21
 8001c02:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2204      	movs	r2, #4
 8001c08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0a5      	b.n	8001d64 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1e:	d01a      	beq.n	8001c56 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001c20:	f7ff fbd8 	bl	80013d4 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d302      	bcc.n	8001c36 <HAL_DMA2D_PollForTransfer+0x9c>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10f      	bne.n	8001c56 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c3a:	f043 0220 	orr.w	r2, r3, #32
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2203      	movs	r2, #3
 8001c46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e086      	b.n	8001d64 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0ac      	beq.n	8001bbe <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	f003 0320 	and.w	r3, r3, #32
 8001c6e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	f003 0320 	and.w	r3, r3, #32
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d061      	beq.n	8001d4a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c86:	f7ff fba5 	bl	80013d4 <HAL_GetTick>
 8001c8a:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001c8c:	e056      	b.n	8001d3c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d02e      	beq.n	8001cfe <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d005      	beq.n	8001cb6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cae:	f043 0204 	orr.w	r2, r3, #4
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f003 0320 	and.w	r3, r3, #32
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d005      	beq.n	8001ccc <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc4:	f043 0202 	orr.w	r2, r3, #2
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d005      	beq.n	8001ce2 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cda:	f043 0201 	orr.w	r2, r3, #1
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2229      	movs	r2, #41	; 0x29
 8001ce8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2204      	movs	r2, #4
 8001cee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e032      	b.n	8001d64 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d04:	d01a      	beq.n	8001d3c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001d06:	f7ff fb65 	bl	80013d4 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d302      	bcc.n	8001d1c <HAL_DMA2D_PollForTransfer+0x182>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10f      	bne.n	8001d3c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d20:	f043 0220 	orr.w	r2, r3, #32
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e013      	b.n	8001d64 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 0310 	and.w	r3, r3, #16
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0a1      	beq.n	8001c8e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2212      	movs	r2, #18
 8001d50:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d026      	beq.n	8001ddc <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d021      	beq.n	8001ddc <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001da6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dac:	f043 0201 	orr.w	r2, r3, #1
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2201      	movs	r2, #1
 8001dba:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2204      	movs	r2, #4
 8001dc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f003 0320 	and.w	r3, r3, #32
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d026      	beq.n	8001e34 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d021      	beq.n	8001e34 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dfe:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2220      	movs	r2, #32
 8001e06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0c:	f043 0202 	orr.w	r2, r3, #2
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2204      	movs	r2, #4
 8001e18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d026      	beq.n	8001e8c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d021      	beq.n	8001e8c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e56:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2208      	movs	r2, #8
 8001e5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e64:	f043 0204 	orr.w	r2, r3, #4
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2204      	movs	r2, #4
 8001e70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f003 0304 	and.w	r3, r3, #4
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d013      	beq.n	8001ebe <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00e      	beq.n	8001ebe <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eae:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 f853 	bl	8001f64 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d024      	beq.n	8001f12 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d01f      	beq.n	8001f12 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ee0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f003 0310 	and.w	r3, r3, #16
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d01f      	beq.n	8001f5c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d01a      	beq.n	8001f5c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f34:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2210      	movs	r2, #16
 8001f3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f80e 	bl	8001f78 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001f5c:	bf00      	nop
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d101      	bne.n	8001fac <HAL_DMA2D_ConfigLayer+0x20>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e079      	b.n	80020a0 <HAL_DMA2D_ConfigLayer+0x114>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	011b      	lsls	r3, r3, #4
 8001fc0:	3318      	adds	r3, #24
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	041b      	lsls	r3, r3, #16
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001fd6:	4b35      	ldr	r3, [pc, #212]	; (80020ac <HAL_DMA2D_ConfigLayer+0x120>)
 8001fd8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b0a      	cmp	r3, #10
 8001fe0:	d003      	beq.n	8001fea <HAL_DMA2D_ConfigLayer+0x5e>
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b09      	cmp	r3, #9
 8001fe8:	d107      	bne.n	8001ffa <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	e005      	b.n	8002006 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	061b      	lsls	r3, r3, #24
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	4313      	orrs	r3, r2
 8002004:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d120      	bne.n	800204e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	43db      	mvns	r3, r3
 8002016:	ea02 0103 	and.w	r1, r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	430a      	orrs	r2, r1
 8002022:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b0a      	cmp	r3, #10
 8002034:	d003      	beq.n	800203e <HAL_DMA2D_ConfigLayer+0xb2>
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b09      	cmp	r3, #9
 800203c:	d127      	bne.n	800208e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800204a:	629a      	str	r2, [r3, #40]	; 0x28
 800204c:	e01f      	b.n	800208e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	69da      	ldr	r2, [r3, #28]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	43db      	mvns	r3, r3
 8002058:	ea02 0103 	and.w	r1, r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	430a      	orrs	r2, r1
 8002064:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b0a      	cmp	r3, #10
 8002076:	d003      	beq.n	8002080 <HAL_DMA2D_ConfigLayer+0xf4>
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b09      	cmp	r3, #9
 800207e:	d106      	bne.n	800208e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800208c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	371c      	adds	r7, #28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	ff03000f 	.word	0xff03000f

080020b0 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b08b      	sub	sp, #44	; 0x2c
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
 80020bc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	041a      	lsls	r2, r3, #16
 80020cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ce:	431a      	orrs	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80020e8:	d174      	bne.n	80021d4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80020f0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80020f8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002100:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d108      	bne.n	8002122 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	431a      	orrs	r2, r3
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	4313      	orrs	r3, r2
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4313      	orrs	r3, r2
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
 8002120:	e053      	b.n	80021ca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d106      	bne.n	8002138 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	4313      	orrs	r3, r2
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	4313      	orrs	r3, r2
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
 8002136:	e048      	b.n	80021ca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d111      	bne.n	8002164 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	0cdb      	lsrs	r3, r3, #19
 8002144:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	0a9b      	lsrs	r3, r3, #10
 800214a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	08db      	lsrs	r3, r3, #3
 8002150:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	015a      	lsls	r2, r3, #5
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	02db      	lsls	r3, r3, #11
 800215a:	4313      	orrs	r3, r2
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	4313      	orrs	r3, r2
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
 8002162:	e032      	b.n	80021ca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b03      	cmp	r3, #3
 800216a:	d117      	bne.n	800219c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	0fdb      	lsrs	r3, r3, #31
 8002170:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	0cdb      	lsrs	r3, r3, #19
 8002176:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	0adb      	lsrs	r3, r3, #11
 800217c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	08db      	lsrs	r3, r3, #3
 8002182:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	015a      	lsls	r2, r3, #5
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	029b      	lsls	r3, r3, #10
 800218c:	431a      	orrs	r2, r3
 800218e:	6a3b      	ldr	r3, [r7, #32]
 8002190:	03db      	lsls	r3, r3, #15
 8002192:	4313      	orrs	r3, r2
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	4313      	orrs	r3, r2
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
 800219a:	e016      	b.n	80021ca <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	0f1b      	lsrs	r3, r3, #28
 80021a0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	0d1b      	lsrs	r3, r3, #20
 80021a6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	0b1b      	lsrs	r3, r3, #12
 80021ac:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	011a      	lsls	r2, r3, #4
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	021b      	lsls	r3, r3, #8
 80021bc:	431a      	orrs	r2, r3
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	031b      	lsls	r3, r3, #12
 80021c2:	4313      	orrs	r3, r2
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80021d2:	e003      	b.n	80021dc <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	60da      	str	r2, [r3, #12]
}
 80021dc:	bf00      	nop
 80021de:	372c      	adds	r7, #44	; 0x2c
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b089      	sub	sp, #36	; 0x24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80021fe:	2300      	movs	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
 8002206:	e175      	b.n	80024f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002208:	2201      	movs	r2, #1
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	429a      	cmp	r2, r3
 8002222:	f040 8164 	bne.w	80024ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d003      	beq.n	8002236 <HAL_GPIO_Init+0x4e>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b12      	cmp	r3, #18
 8002234:	d123      	bne.n	800227e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	08da      	lsrs	r2, r3, #3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3208      	adds	r2, #8
 800223e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	220f      	movs	r2, #15
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	691a      	ldr	r2, [r3, #16]
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	08da      	lsrs	r2, r3, #3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3208      	adds	r2, #8
 8002278:	69b9      	ldr	r1, [r7, #24]
 800227a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	2203      	movs	r2, #3
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 0203 	and.w	r2, r3, #3
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d00b      	beq.n	80022d2 <HAL_GPIO_Init+0xea>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d007      	beq.n	80022d2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022c6:	2b11      	cmp	r3, #17
 80022c8:	d003      	beq.n	80022d2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b12      	cmp	r3, #18
 80022d0:	d130      	bne.n	8002334 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	2203      	movs	r2, #3
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002308:	2201      	movs	r2, #1
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f003 0201 	and.w	r2, r3, #1
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	2203      	movs	r2, #3
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 80be 	beq.w	80024ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002372:	4b65      	ldr	r3, [pc, #404]	; (8002508 <HAL_GPIO_Init+0x320>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	4a64      	ldr	r2, [pc, #400]	; (8002508 <HAL_GPIO_Init+0x320>)
 8002378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800237c:	6453      	str	r3, [r2, #68]	; 0x44
 800237e:	4b62      	ldr	r3, [pc, #392]	; (8002508 <HAL_GPIO_Init+0x320>)
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800238a:	4a60      	ldr	r2, [pc, #384]	; (800250c <HAL_GPIO_Init+0x324>)
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	089b      	lsrs	r3, r3, #2
 8002390:	3302      	adds	r3, #2
 8002392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002396:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	220f      	movs	r2, #15
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a57      	ldr	r2, [pc, #348]	; (8002510 <HAL_GPIO_Init+0x328>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d037      	beq.n	8002426 <HAL_GPIO_Init+0x23e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a56      	ldr	r2, [pc, #344]	; (8002514 <HAL_GPIO_Init+0x32c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d031      	beq.n	8002422 <HAL_GPIO_Init+0x23a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a55      	ldr	r2, [pc, #340]	; (8002518 <HAL_GPIO_Init+0x330>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d02b      	beq.n	800241e <HAL_GPIO_Init+0x236>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a54      	ldr	r2, [pc, #336]	; (800251c <HAL_GPIO_Init+0x334>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d025      	beq.n	800241a <HAL_GPIO_Init+0x232>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a53      	ldr	r2, [pc, #332]	; (8002520 <HAL_GPIO_Init+0x338>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d01f      	beq.n	8002416 <HAL_GPIO_Init+0x22e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a52      	ldr	r2, [pc, #328]	; (8002524 <HAL_GPIO_Init+0x33c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d019      	beq.n	8002412 <HAL_GPIO_Init+0x22a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a51      	ldr	r2, [pc, #324]	; (8002528 <HAL_GPIO_Init+0x340>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d013      	beq.n	800240e <HAL_GPIO_Init+0x226>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a50      	ldr	r2, [pc, #320]	; (800252c <HAL_GPIO_Init+0x344>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d00d      	beq.n	800240a <HAL_GPIO_Init+0x222>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4f      	ldr	r2, [pc, #316]	; (8002530 <HAL_GPIO_Init+0x348>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d007      	beq.n	8002406 <HAL_GPIO_Init+0x21e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a4e      	ldr	r2, [pc, #312]	; (8002534 <HAL_GPIO_Init+0x34c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d101      	bne.n	8002402 <HAL_GPIO_Init+0x21a>
 80023fe:	2309      	movs	r3, #9
 8002400:	e012      	b.n	8002428 <HAL_GPIO_Init+0x240>
 8002402:	230a      	movs	r3, #10
 8002404:	e010      	b.n	8002428 <HAL_GPIO_Init+0x240>
 8002406:	2308      	movs	r3, #8
 8002408:	e00e      	b.n	8002428 <HAL_GPIO_Init+0x240>
 800240a:	2307      	movs	r3, #7
 800240c:	e00c      	b.n	8002428 <HAL_GPIO_Init+0x240>
 800240e:	2306      	movs	r3, #6
 8002410:	e00a      	b.n	8002428 <HAL_GPIO_Init+0x240>
 8002412:	2305      	movs	r3, #5
 8002414:	e008      	b.n	8002428 <HAL_GPIO_Init+0x240>
 8002416:	2304      	movs	r3, #4
 8002418:	e006      	b.n	8002428 <HAL_GPIO_Init+0x240>
 800241a:	2303      	movs	r3, #3
 800241c:	e004      	b.n	8002428 <HAL_GPIO_Init+0x240>
 800241e:	2302      	movs	r3, #2
 8002420:	e002      	b.n	8002428 <HAL_GPIO_Init+0x240>
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <HAL_GPIO_Init+0x240>
 8002426:	2300      	movs	r3, #0
 8002428:	69fa      	ldr	r2, [r7, #28]
 800242a:	f002 0203 	and.w	r2, r2, #3
 800242e:	0092      	lsls	r2, r2, #2
 8002430:	4093      	lsls	r3, r2
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002438:	4934      	ldr	r1, [pc, #208]	; (800250c <HAL_GPIO_Init+0x324>)
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	089b      	lsrs	r3, r3, #2
 800243e:	3302      	adds	r3, #2
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002446:	4b3c      	ldr	r3, [pc, #240]	; (8002538 <HAL_GPIO_Init+0x350>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800246a:	4a33      	ldr	r2, [pc, #204]	; (8002538 <HAL_GPIO_Init+0x350>)
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002470:	4b31      	ldr	r3, [pc, #196]	; (8002538 <HAL_GPIO_Init+0x350>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002494:	4a28      	ldr	r2, [pc, #160]	; (8002538 <HAL_GPIO_Init+0x350>)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800249a:	4b27      	ldr	r3, [pc, #156]	; (8002538 <HAL_GPIO_Init+0x350>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024be:	4a1e      	ldr	r2, [pc, #120]	; (8002538 <HAL_GPIO_Init+0x350>)
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024c4:	4b1c      	ldr	r3, [pc, #112]	; (8002538 <HAL_GPIO_Init+0x350>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024e8:	4a13      	ldr	r2, [pc, #76]	; (8002538 <HAL_GPIO_Init+0x350>)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	3301      	adds	r3, #1
 80024f2:	61fb      	str	r3, [r7, #28]
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	2b0f      	cmp	r3, #15
 80024f8:	f67f ae86 	bls.w	8002208 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80024fc:	bf00      	nop
 80024fe:	3724      	adds	r7, #36	; 0x24
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	40023800 	.word	0x40023800
 800250c:	40013800 	.word	0x40013800
 8002510:	40020000 	.word	0x40020000
 8002514:	40020400 	.word	0x40020400
 8002518:	40020800 	.word	0x40020800
 800251c:	40020c00 	.word	0x40020c00
 8002520:	40021000 	.word	0x40021000
 8002524:	40021400 	.word	0x40021400
 8002528:	40021800 	.word	0x40021800
 800252c:	40021c00 	.word	0x40021c00
 8002530:	40022000 	.word	0x40022000
 8002534:	40022400 	.word	0x40022400
 8002538:	40013c00 	.word	0x40013c00

0800253c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	807b      	strh	r3, [r7, #2]
 8002548:	4613      	mov	r3, r2
 800254a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800254c:	787b      	ldrb	r3, [r7, #1]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002552:	887a      	ldrh	r2, [r7, #2]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002558:	e003      	b.n	8002562 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800255a:	887b      	ldrh	r3, [r7, #2]
 800255c:	041a      	lsls	r2, r3, #16
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	619a      	str	r2, [r3, #24]
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
	...

08002570 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e0bf      	b.n	8002702 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d106      	bne.n	800259c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f005 f930 	bl	80077fc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	699a      	ldr	r2, [r3, #24]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80025b2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6999      	ldr	r1, [r3, #24]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80025c8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6899      	ldr	r1, [r3, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	4b4a      	ldr	r3, [pc, #296]	; (800270c <HAL_LTDC_Init+0x19c>)
 80025e4:	400b      	ands	r3, r1
 80025e6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	041b      	lsls	r3, r3, #16
 80025ee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6899      	ldr	r1, [r3, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699a      	ldr	r2, [r3, #24]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	431a      	orrs	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68d9      	ldr	r1, [r3, #12]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4b3e      	ldr	r3, [pc, #248]	; (800270c <HAL_LTDC_Init+0x19c>)
 8002612:	400b      	ands	r3, r1
 8002614:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	041b      	lsls	r3, r3, #16
 800261c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68d9      	ldr	r1, [r3, #12]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a1a      	ldr	r2, [r3, #32]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6919      	ldr	r1, [r3, #16]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	4b33      	ldr	r3, [pc, #204]	; (800270c <HAL_LTDC_Init+0x19c>)
 8002640:	400b      	ands	r3, r1
 8002642:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	041b      	lsls	r3, r3, #16
 800264a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6919      	ldr	r1, [r3, #16]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	431a      	orrs	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6959      	ldr	r1, [r3, #20]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4b27      	ldr	r3, [pc, #156]	; (800270c <HAL_LTDC_Init+0x19c>)
 800266e:	400b      	ands	r3, r1
 8002670:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002676:	041b      	lsls	r3, r3, #16
 8002678:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6959      	ldr	r1, [r3, #20]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002696:	021b      	lsls	r3, r3, #8
 8002698:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80026a0:	041b      	lsls	r3, r3, #16
 80026a2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80026b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4313      	orrs	r3, r2
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0206 	orr.w	r2, r2, #6
 80026de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699a      	ldr	r2, [r3, #24]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	f000f800 	.word	0xf000f800

08002710 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002726:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	2b00      	cmp	r3, #0
 8002730:	d023      	beq.n	800277a <HAL_LTDC_IRQHandler+0x6a>
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	d01e      	beq.n	800277a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0204 	bic.w	r2, r2, #4
 800274a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2204      	movs	r2, #4
 8002752:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800275a:	f043 0201 	orr.w	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2204      	movs	r2, #4
 8002768:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f86f 	bl	8002858 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d023      	beq.n	80027cc <HAL_LTDC_IRQHandler+0xbc>
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d01e      	beq.n	80027cc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0202 	bic.w	r2, r2, #2
 800279c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2202      	movs	r2, #2
 80027a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80027ac:	f043 0202 	orr.w	r2, r3, #2
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2204      	movs	r2, #4
 80027ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f846 	bl	8002858 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d01b      	beq.n	800280e <HAL_LTDC_IRQHandler+0xfe>
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d016      	beq.n	800280e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0201 	bic.w	r2, r2, #1
 80027ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2201      	movs	r2, #1
 80027f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f82f 	bl	800286c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f003 0308 	and.w	r3, r3, #8
 8002814:	2b00      	cmp	r3, #0
 8002816:	d01b      	beq.n	8002850 <HAL_LTDC_IRQHandler+0x140>
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b00      	cmp	r3, #0
 8002820:	d016      	beq.n	8002850 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0208 	bic.w	r2, r2, #8
 8002830:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2208      	movs	r2, #8
 8002838:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f818 	bl	8002880 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8002850:	bf00      	nop
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002894:	b5b0      	push	{r4, r5, r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_LTDC_ConfigLayer+0x1a>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e02c      	b.n	8002908 <HAL_LTDC_ConfigLayer+0x74>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2202      	movs	r2, #2
 80028ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2134      	movs	r1, #52	; 0x34
 80028c4:	fb01 f303 	mul.w	r3, r1, r3
 80028c8:	4413      	add	r3, r2
 80028ca:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	4614      	mov	r4, r2
 80028d2:	461d      	mov	r5, r3
 80028d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028e0:	682b      	ldr	r3, [r5, #0]
 80028e2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	68b9      	ldr	r1, [r7, #8]
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 f81f 	bl	800292c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2201      	movs	r2, #1
 80028f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bdb0      	pop	{r4, r5, r7, pc}

08002910 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800291e:	b2db      	uxtb	r3, r3
}
 8002920:	4618      	mov	r0, r3
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800292c:	b480      	push	{r7}
 800292e:	b089      	sub	sp, #36	; 0x24
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	0c1b      	lsrs	r3, r3, #16
 8002944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002948:	4413      	add	r3, r2
 800294a:	041b      	lsls	r3, r3, #16
 800294c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	461a      	mov	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	01db      	lsls	r3, r3, #7
 8002958:	4413      	add	r3, r2
 800295a:	3384      	adds	r3, #132	; 0x84
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	4611      	mov	r1, r2
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	01d2      	lsls	r2, r2, #7
 8002968:	440a      	add	r2, r1
 800296a:	3284      	adds	r2, #132	; 0x84
 800296c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002970:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	0c1b      	lsrs	r3, r3, #16
 800297e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002982:	4413      	add	r3, r2
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4619      	mov	r1, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	01db      	lsls	r3, r3, #7
 8002990:	440b      	add	r3, r1
 8002992:	3384      	adds	r3, #132	; 0x84
 8002994:	4619      	mov	r1, r3
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	4313      	orrs	r3, r2
 800299a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029aa:	4413      	add	r3, r2
 80029ac:	041b      	lsls	r3, r3, #16
 80029ae:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	461a      	mov	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	01db      	lsls	r3, r3, #7
 80029ba:	4413      	add	r3, r2
 80029bc:	3384      	adds	r3, #132	; 0x84
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	4611      	mov	r1, r2
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	01d2      	lsls	r2, r2, #7
 80029ca:	440a      	add	r2, r1
 80029cc:	3284      	adds	r2, #132	; 0x84
 80029ce:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80029d2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029e2:	4413      	add	r3, r2
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4619      	mov	r1, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	01db      	lsls	r3, r3, #7
 80029f0:	440b      	add	r3, r1
 80029f2:	3384      	adds	r3, #132	; 0x84
 80029f4:	4619      	mov	r1, r3
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	461a      	mov	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	01db      	lsls	r3, r3, #7
 8002a06:	4413      	add	r3, r2
 8002a08:	3384      	adds	r3, #132	; 0x84
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	6812      	ldr	r2, [r2, #0]
 8002a10:	4611      	mov	r1, r2
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	01d2      	lsls	r2, r2, #7
 8002a16:	440a      	add	r2, r1
 8002a18:	3284      	adds	r2, #132	; 0x84
 8002a1a:	f023 0307 	bic.w	r3, r3, #7
 8002a1e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	461a      	mov	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	01db      	lsls	r3, r3, #7
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3384      	adds	r3, #132	; 0x84
 8002a2e:	461a      	mov	r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002a3c:	021b      	lsls	r3, r3, #8
 8002a3e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002a46:	041b      	lsls	r3, r3, #16
 8002a48:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	061b      	lsls	r3, r3, #24
 8002a50:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	01db      	lsls	r3, r3, #7
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3384      	adds	r3, #132	; 0x84
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	01db      	lsls	r3, r3, #7
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3384      	adds	r3, #132	; 0x84
 8002a70:	461a      	mov	r2, r3
 8002a72:	2300      	movs	r3, #0
 8002a74:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	431a      	orrs	r2, r3
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	431a      	orrs	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	01db      	lsls	r3, r3, #7
 8002a90:	440b      	add	r3, r1
 8002a92:	3384      	adds	r3, #132	; 0x84
 8002a94:	4619      	mov	r1, r3
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	01db      	lsls	r3, r3, #7
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3384      	adds	r3, #132	; 0x84
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	4611      	mov	r1, r2
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	01d2      	lsls	r2, r2, #7
 8002ab6:	440a      	add	r2, r1
 8002ab8:	3284      	adds	r2, #132	; 0x84
 8002aba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002abe:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	01db      	lsls	r3, r3, #7
 8002aca:	4413      	add	r3, r2
 8002acc:	3384      	adds	r3, #132	; 0x84
 8002ace:	461a      	mov	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	01db      	lsls	r3, r3, #7
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3384      	adds	r3, #132	; 0x84
 8002ae4:	69da      	ldr	r2, [r3, #28]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4619      	mov	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	01db      	lsls	r3, r3, #7
 8002af0:	440b      	add	r3, r1
 8002af2:	3384      	adds	r3, #132	; 0x84
 8002af4:	4619      	mov	r1, r3
 8002af6:	4b58      	ldr	r3, [pc, #352]	; (8002c58 <LTDC_SetConfig+0x32c>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	69da      	ldr	r2, [r3, #28]
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	68f9      	ldr	r1, [r7, #12]
 8002b06:	6809      	ldr	r1, [r1, #0]
 8002b08:	4608      	mov	r0, r1
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	01c9      	lsls	r1, r1, #7
 8002b0e:	4401      	add	r1, r0
 8002b10:	3184      	adds	r1, #132	; 0x84
 8002b12:	4313      	orrs	r3, r2
 8002b14:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	01db      	lsls	r3, r3, #7
 8002b20:	4413      	add	r3, r2
 8002b22:	3384      	adds	r3, #132	; 0x84
 8002b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	01db      	lsls	r3, r3, #7
 8002b30:	4413      	add	r3, r2
 8002b32:	3384      	adds	r3, #132	; 0x84
 8002b34:	461a      	mov	r2, r3
 8002b36:	2300      	movs	r3, #0
 8002b38:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	01db      	lsls	r3, r3, #7
 8002b44:	4413      	add	r3, r2
 8002b46:	3384      	adds	r3, #132	; 0x84
 8002b48:	461a      	mov	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d102      	bne.n	8002b5e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8002b58:	2304      	movs	r3, #4
 8002b5a:	61fb      	str	r3, [r7, #28]
 8002b5c:	e01b      	b.n	8002b96 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d102      	bne.n	8002b6c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8002b66:	2303      	movs	r3, #3
 8002b68:	61fb      	str	r3, [r7, #28]
 8002b6a:	e014      	b.n	8002b96 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d00b      	beq.n	8002b8c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d007      	beq.n	8002b8c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d003      	beq.n	8002b8c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002b88:	2b07      	cmp	r3, #7
 8002b8a:	d102      	bne.n	8002b92 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	61fb      	str	r3, [r7, #28]
 8002b90:	e001      	b.n	8002b96 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8002b92:	2301      	movs	r3, #1
 8002b94:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	01db      	lsls	r3, r3, #7
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3384      	adds	r3, #132	; 0x84
 8002ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	4611      	mov	r1, r2
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	01d2      	lsls	r2, r2, #7
 8002bb0:	440a      	add	r2, r1
 8002bb2:	3284      	adds	r2, #132	; 0x84
 8002bb4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8002bb8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	fb02 f303 	mul.w	r3, r2, r3
 8002bc4:	041a      	lsls	r2, r3, #16
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	6859      	ldr	r1, [r3, #4]
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	1acb      	subs	r3, r1, r3
 8002bd0:	69f9      	ldr	r1, [r7, #28]
 8002bd2:	fb01 f303 	mul.w	r3, r1, r3
 8002bd6:	3303      	adds	r3, #3
 8002bd8:	68f9      	ldr	r1, [r7, #12]
 8002bda:	6809      	ldr	r1, [r1, #0]
 8002bdc:	4608      	mov	r0, r1
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	01c9      	lsls	r1, r1, #7
 8002be2:	4401      	add	r1, r0
 8002be4:	3184      	adds	r1, #132	; 0x84
 8002be6:	4313      	orrs	r3, r2
 8002be8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	01db      	lsls	r3, r3, #7
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3384      	adds	r3, #132	; 0x84
 8002bf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4619      	mov	r1, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	01db      	lsls	r3, r3, #7
 8002c04:	440b      	add	r3, r1
 8002c06:	3384      	adds	r3, #132	; 0x84
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4b14      	ldr	r3, [pc, #80]	; (8002c5c <LTDC_SetConfig+0x330>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	01db      	lsls	r3, r3, #7
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3384      	adds	r3, #132	; 0x84
 8002c1e:	461a      	mov	r2, r3
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	01db      	lsls	r3, r3, #7
 8002c30:	4413      	add	r3, r2
 8002c32:	3384      	adds	r3, #132	; 0x84
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	6812      	ldr	r2, [r2, #0]
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	01d2      	lsls	r2, r2, #7
 8002c40:	440a      	add	r2, r1
 8002c42:	3284      	adds	r2, #132	; 0x84
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	6013      	str	r3, [r2, #0]
}
 8002c4a:	bf00      	nop
 8002c4c:	3724      	adds	r7, #36	; 0x24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	fffff8f8 	.word	0xfffff8f8
 8002c5c:	fffff800 	.word	0xfffff800

08002c60 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c64:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a04      	ldr	r2, [pc, #16]	; (8002c7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c6e:	6013      	str	r3, [r2, #0]
}
 8002c70:	bf00      	nop
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40007000 	.word	0x40007000

08002c80 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c8a:	4b23      	ldr	r3, [pc, #140]	; (8002d18 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	4a22      	ldr	r2, [pc, #136]	; (8002d18 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c94:	6413      	str	r3, [r2, #64]	; 0x40
 8002c96:	4b20      	ldr	r3, [pc, #128]	; (8002d18 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9e:	603b      	str	r3, [r7, #0]
 8002ca0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002ca2:	4b1e      	ldr	r3, [pc, #120]	; (8002d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a1d      	ldr	r2, [pc, #116]	; (8002d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cae:	f7fe fb91 	bl	80013d4 <HAL_GetTick>
 8002cb2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cb4:	e009      	b.n	8002cca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cb6:	f7fe fb8d 	bl	80013d4 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cc4:	d901      	bls.n	8002cca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e022      	b.n	8002d10 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cca:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd6:	d1ee      	bne.n	8002cb6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002cd8:	4b10      	ldr	r3, [pc, #64]	; (8002d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a0f      	ldr	r2, [pc, #60]	; (8002d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ce4:	f7fe fb76 	bl	80013d4 <HAL_GetTick>
 8002ce8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002cea:	e009      	b.n	8002d00 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cec:	f7fe fb72 	bl	80013d4 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cfa:	d901      	bls.n	8002d00 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e007      	b.n	8002d10 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d00:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d0c:	d1ee      	bne.n	8002cec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40007000 	.word	0x40007000

08002d20 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002d2c:	f7fe fb52 	bl	80013d4 <HAL_GetTick>
 8002d30:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e073      	b.n	8002e24 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_QSPI_Init+0x2c>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e06b      	b.n	8002e24 <HAL_QSPI_Init+0x104>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10b      	bne.n	8002d78 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f004 fe0f 	bl	800798c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8002d6e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f85e 	bl	8002e34 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	021a      	lsls	r2, r3, #8
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2120      	movs	r1, #32
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f856 	bl	8002e50 <QSPI_WaitFlagStateUntilTimeout>
 8002da4:	4603      	mov	r3, r0
 8002da6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d135      	bne.n	8002e1a <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	4b1d      	ldr	r3, [pc, #116]	; (8002e2c <HAL_QSPI_Init+0x10c>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6852      	ldr	r2, [r2, #4]
 8002dbc:	0611      	lsls	r1, r2, #24
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	68d2      	ldr	r2, [r2, #12]
 8002dc2:	4311      	orrs	r1, r2
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	69d2      	ldr	r2, [r2, #28]
 8002dc8:	4311      	orrs	r1, r2
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6a12      	ldr	r2, [r2, #32]
 8002dce:	4311      	orrs	r1, r2
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6812      	ldr	r2, [r2, #0]
 8002dd4:	430b      	orrs	r3, r1
 8002dd6:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <HAL_QSPI_Init+0x110>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6912      	ldr	r2, [r2, #16]
 8002de6:	0411      	lsls	r1, r2, #16
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6952      	ldr	r2, [r2, #20]
 8002dec:	4311      	orrs	r1, r2
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6992      	ldr	r2, [r2, #24]
 8002df2:	4311      	orrs	r1, r2
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6812      	ldr	r2, [r2, #0]
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	00ffff2f 	.word	0x00ffff2f
 8002e30:	ffe0f8fe 	.word	0xffe0f8fe

08002e34 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	603b      	str	r3, [r7, #0]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002e60:	e01a      	b.n	8002e98 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e68:	d016      	beq.n	8002e98 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d007      	beq.n	8002e80 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002e70:	f7fe fab0 	bl	80013d4 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d20b      	bcs.n	8002e98 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2204      	movs	r2, #4
 8002e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8c:	f043 0201 	orr.w	r2, r3, #1
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e00e      	b.n	8002eb6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	bf14      	ite	ne
 8002ea6:	2301      	movne	r3, #1
 8002ea8:	2300      	moveq	r3, #0
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	461a      	mov	r2, r3
 8002eae:	79fb      	ldrb	r3, [r7, #7]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d1d6      	bne.n	8002e62 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e25c      	b.n	8003390 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 8087 	beq.w	8002ff2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ee4:	4b96      	ldr	r3, [pc, #600]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 030c 	and.w	r3, r3, #12
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d00c      	beq.n	8002f0a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ef0:	4b93      	ldr	r3, [pc, #588]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 030c 	and.w	r3, r3, #12
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d112      	bne.n	8002f22 <HAL_RCC_OscConfig+0x62>
 8002efc:	4b90      	ldr	r3, [pc, #576]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f08:	d10b      	bne.n	8002f22 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f0a:	4b8d      	ldr	r3, [pc, #564]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d06c      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x130>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d168      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e236      	b.n	8003390 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f2a:	d106      	bne.n	8002f3a <HAL_RCC_OscConfig+0x7a>
 8002f2c:	4b84      	ldr	r3, [pc, #528]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a83      	ldr	r2, [pc, #524]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	e02e      	b.n	8002f98 <HAL_RCC_OscConfig+0xd8>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10c      	bne.n	8002f5c <HAL_RCC_OscConfig+0x9c>
 8002f42:	4b7f      	ldr	r3, [pc, #508]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a7e      	ldr	r2, [pc, #504]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	4b7c      	ldr	r3, [pc, #496]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a7b      	ldr	r2, [pc, #492]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002f54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	e01d      	b.n	8002f98 <HAL_RCC_OscConfig+0xd8>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f64:	d10c      	bne.n	8002f80 <HAL_RCC_OscConfig+0xc0>
 8002f66:	4b76      	ldr	r3, [pc, #472]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a75      	ldr	r2, [pc, #468]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	4b73      	ldr	r3, [pc, #460]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a72      	ldr	r2, [pc, #456]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	e00b      	b.n	8002f98 <HAL_RCC_OscConfig+0xd8>
 8002f80:	4b6f      	ldr	r3, [pc, #444]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a6e      	ldr	r2, [pc, #440]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8a:	6013      	str	r3, [r2, #0]
 8002f8c:	4b6c      	ldr	r3, [pc, #432]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a6b      	ldr	r2, [pc, #428]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d013      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa0:	f7fe fa18 	bl	80013d4 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fa8:	f7fe fa14 	bl	80013d4 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b64      	cmp	r3, #100	; 0x64
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e1ea      	b.n	8003390 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fba:	4b61      	ldr	r3, [pc, #388]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f0      	beq.n	8002fa8 <HAL_RCC_OscConfig+0xe8>
 8002fc6:	e014      	b.n	8002ff2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fa04 	bl	80013d4 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fd0:	f7fe fa00 	bl	80013d4 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b64      	cmp	r3, #100	; 0x64
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e1d6      	b.n	8003390 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fe2:	4b57      	ldr	r3, [pc, #348]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x110>
 8002fee:	e000      	b.n	8002ff2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d069      	beq.n	80030d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ffe:	4b50      	ldr	r3, [pc, #320]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 030c 	and.w	r3, r3, #12
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00b      	beq.n	8003022 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800300a:	4b4d      	ldr	r3, [pc, #308]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 030c 	and.w	r3, r3, #12
 8003012:	2b08      	cmp	r3, #8
 8003014:	d11c      	bne.n	8003050 <HAL_RCC_OscConfig+0x190>
 8003016:	4b4a      	ldr	r3, [pc, #296]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d116      	bne.n	8003050 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003022:	4b47      	ldr	r3, [pc, #284]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d005      	beq.n	800303a <HAL_RCC_OscConfig+0x17a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d001      	beq.n	800303a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e1aa      	b.n	8003390 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800303a:	4b41      	ldr	r3, [pc, #260]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	493d      	ldr	r1, [pc, #244]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 800304a:	4313      	orrs	r3, r2
 800304c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304e:	e040      	b.n	80030d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d023      	beq.n	80030a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003058:	4b39      	ldr	r3, [pc, #228]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a38      	ldr	r2, [pc, #224]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003064:	f7fe f9b6 	bl	80013d4 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800306c:	f7fe f9b2 	bl	80013d4 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e188      	b.n	8003390 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800307e:	4b30      	ldr	r3, [pc, #192]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308a:	4b2d      	ldr	r3, [pc, #180]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4929      	ldr	r1, [pc, #164]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 800309a:	4313      	orrs	r3, r2
 800309c:	600b      	str	r3, [r1, #0]
 800309e:	e018      	b.n	80030d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030a0:	4b27      	ldr	r3, [pc, #156]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a26      	ldr	r2, [pc, #152]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 80030a6:	f023 0301 	bic.w	r3, r3, #1
 80030aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f7fe f992 	bl	80013d4 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030b4:	f7fe f98e 	bl	80013d4 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e164      	b.n	8003390 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c6:	4b1e      	ldr	r3, [pc, #120]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f0      	bne.n	80030b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d038      	beq.n	8003150 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d019      	beq.n	800311a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030e6:	4b16      	ldr	r3, [pc, #88]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 80030e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ea:	4a15      	ldr	r2, [pc, #84]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f2:	f7fe f96f 	bl	80013d4 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030fa:	f7fe f96b 	bl	80013d4 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e141      	b.n	8003390 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800310c:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 800310e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0f0      	beq.n	80030fa <HAL_RCC_OscConfig+0x23a>
 8003118:	e01a      	b.n	8003150 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800311a:	4b09      	ldr	r3, [pc, #36]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 800311c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800311e:	4a08      	ldr	r2, [pc, #32]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8003120:	f023 0301 	bic.w	r3, r3, #1
 8003124:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003126:	f7fe f955 	bl	80013d4 <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800312c:	e00a      	b.n	8003144 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800312e:	f7fe f951 	bl	80013d4 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d903      	bls.n	8003144 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e127      	b.n	8003390 <HAL_RCC_OscConfig+0x4d0>
 8003140:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003144:	4b94      	ldr	r3, [pc, #592]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 8003146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1ee      	bne.n	800312e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80a4 	beq.w	80032a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800315e:	4b8e      	ldr	r3, [pc, #568]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10d      	bne.n	8003186 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800316a:	4b8b      	ldr	r3, [pc, #556]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	4a8a      	ldr	r2, [pc, #552]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 8003170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003174:	6413      	str	r3, [r2, #64]	; 0x40
 8003176:	4b88      	ldr	r3, [pc, #544]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003182:	2301      	movs	r3, #1
 8003184:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003186:	4b85      	ldr	r3, [pc, #532]	; (800339c <HAL_RCC_OscConfig+0x4dc>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318e:	2b00      	cmp	r3, #0
 8003190:	d118      	bne.n	80031c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003192:	4b82      	ldr	r3, [pc, #520]	; (800339c <HAL_RCC_OscConfig+0x4dc>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a81      	ldr	r2, [pc, #516]	; (800339c <HAL_RCC_OscConfig+0x4dc>)
 8003198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800319c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800319e:	f7fe f919 	bl	80013d4 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80031a6:	f7fe f915 	bl	80013d4 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b64      	cmp	r3, #100	; 0x64
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e0eb      	b.n	8003390 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b8:	4b78      	ldr	r3, [pc, #480]	; (800339c <HAL_RCC_OscConfig+0x4dc>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0f0      	beq.n	80031a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d106      	bne.n	80031da <HAL_RCC_OscConfig+0x31a>
 80031cc:	4b72      	ldr	r3, [pc, #456]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 80031ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d0:	4a71      	ldr	r2, [pc, #452]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	6713      	str	r3, [r2, #112]	; 0x70
 80031d8:	e02d      	b.n	8003236 <HAL_RCC_OscConfig+0x376>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10c      	bne.n	80031fc <HAL_RCC_OscConfig+0x33c>
 80031e2:	4b6d      	ldr	r3, [pc, #436]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 80031e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e6:	4a6c      	ldr	r2, [pc, #432]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 80031e8:	f023 0301 	bic.w	r3, r3, #1
 80031ec:	6713      	str	r3, [r2, #112]	; 0x70
 80031ee:	4b6a      	ldr	r3, [pc, #424]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 80031f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f2:	4a69      	ldr	r2, [pc, #420]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 80031f4:	f023 0304 	bic.w	r3, r3, #4
 80031f8:	6713      	str	r3, [r2, #112]	; 0x70
 80031fa:	e01c      	b.n	8003236 <HAL_RCC_OscConfig+0x376>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2b05      	cmp	r3, #5
 8003202:	d10c      	bne.n	800321e <HAL_RCC_OscConfig+0x35e>
 8003204:	4b64      	ldr	r3, [pc, #400]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 8003206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003208:	4a63      	ldr	r2, [pc, #396]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 800320a:	f043 0304 	orr.w	r3, r3, #4
 800320e:	6713      	str	r3, [r2, #112]	; 0x70
 8003210:	4b61      	ldr	r3, [pc, #388]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 8003212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003214:	4a60      	ldr	r2, [pc, #384]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 8003216:	f043 0301 	orr.w	r3, r3, #1
 800321a:	6713      	str	r3, [r2, #112]	; 0x70
 800321c:	e00b      	b.n	8003236 <HAL_RCC_OscConfig+0x376>
 800321e:	4b5e      	ldr	r3, [pc, #376]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 8003220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003222:	4a5d      	ldr	r2, [pc, #372]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 8003224:	f023 0301 	bic.w	r3, r3, #1
 8003228:	6713      	str	r3, [r2, #112]	; 0x70
 800322a:	4b5b      	ldr	r3, [pc, #364]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322e:	4a5a      	ldr	r2, [pc, #360]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 8003230:	f023 0304 	bic.w	r3, r3, #4
 8003234:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d015      	beq.n	800326a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323e:	f7fe f8c9 	bl	80013d4 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003244:	e00a      	b.n	800325c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003246:	f7fe f8c5 	bl	80013d4 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	f241 3288 	movw	r2, #5000	; 0x1388
 8003254:	4293      	cmp	r3, r2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e099      	b.n	8003390 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325c:	4b4e      	ldr	r3, [pc, #312]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 800325e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0ee      	beq.n	8003246 <HAL_RCC_OscConfig+0x386>
 8003268:	e014      	b.n	8003294 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326a:	f7fe f8b3 	bl	80013d4 <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003270:	e00a      	b.n	8003288 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003272:	f7fe f8af 	bl	80013d4 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003280:	4293      	cmp	r3, r2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e083      	b.n	8003390 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003288:	4b43      	ldr	r3, [pc, #268]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 800328a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1ee      	bne.n	8003272 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003294:	7dfb      	ldrb	r3, [r7, #23]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d105      	bne.n	80032a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800329a:	4b3f      	ldr	r3, [pc, #252]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	4a3e      	ldr	r2, [pc, #248]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 80032a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d06f      	beq.n	800338e <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ae:	4b3a      	ldr	r3, [pc, #232]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 030c 	and.w	r3, r3, #12
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d067      	beq.n	800338a <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d149      	bne.n	8003356 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c2:	4b35      	ldr	r3, [pc, #212]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a34      	ldr	r2, [pc, #208]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 80032c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ce:	f7fe f881 	bl	80013d4 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d6:	f7fe f87d 	bl	80013d4 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e053      	b.n	8003390 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e8:	4b2b      	ldr	r3, [pc, #172]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1f0      	bne.n	80032d6 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	69da      	ldr	r2, [r3, #28]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	019b      	lsls	r3, r3, #6
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330a:	085b      	lsrs	r3, r3, #1
 800330c:	3b01      	subs	r3, #1
 800330e:	041b      	lsls	r3, r3, #16
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003316:	061b      	lsls	r3, r3, #24
 8003318:	4313      	orrs	r3, r2
 800331a:	4a1f      	ldr	r2, [pc, #124]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 800331c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003320:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003322:	4b1d      	ldr	r3, [pc, #116]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a1c      	ldr	r2, [pc, #112]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 8003328:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800332c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332e:	f7fe f851 	bl	80013d4 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003336:	f7fe f84d 	bl	80013d4 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e023      	b.n	8003390 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003348:	4b13      	ldr	r3, [pc, #76]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0f0      	beq.n	8003336 <HAL_RCC_OscConfig+0x476>
 8003354:	e01b      	b.n	800338e <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003356:	4b10      	ldr	r3, [pc, #64]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a0f      	ldr	r2, [pc, #60]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 800335c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003360:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003362:	f7fe f837 	bl	80013d4 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800336a:	f7fe f833 	bl	80013d4 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e009      	b.n	8003390 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337c:	4b06      	ldr	r3, [pc, #24]	; (8003398 <HAL_RCC_OscConfig+0x4d8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1f0      	bne.n	800336a <HAL_RCC_OscConfig+0x4aa>
 8003388:	e001      	b.n	800338e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3718      	adds	r7, #24
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40023800 	.word	0x40023800
 800339c:	40007000 	.word	0x40007000

080033a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e0ce      	b.n	8003556 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033b8:	4b69      	ldr	r3, [pc, #420]	; (8003560 <HAL_RCC_ClockConfig+0x1c0>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 030f 	and.w	r3, r3, #15
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d910      	bls.n	80033e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c6:	4b66      	ldr	r3, [pc, #408]	; (8003560 <HAL_RCC_ClockConfig+0x1c0>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f023 020f 	bic.w	r2, r3, #15
 80033ce:	4964      	ldr	r1, [pc, #400]	; (8003560 <HAL_RCC_ClockConfig+0x1c0>)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d6:	4b62      	ldr	r3, [pc, #392]	; (8003560 <HAL_RCC_ClockConfig+0x1c0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d001      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e0b6      	b.n	8003556 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d020      	beq.n	8003436 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003400:	4b58      	ldr	r3, [pc, #352]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	4a57      	ldr	r2, [pc, #348]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 8003406:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800340a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b00      	cmp	r3, #0
 8003416:	d005      	beq.n	8003424 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003418:	4b52      	ldr	r3, [pc, #328]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	4a51      	ldr	r2, [pc, #324]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 800341e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003422:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003424:	4b4f      	ldr	r3, [pc, #316]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	494c      	ldr	r1, [pc, #304]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 8003432:	4313      	orrs	r3, r2
 8003434:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d040      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d107      	bne.n	800345a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344a:	4b46      	ldr	r3, [pc, #280]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d115      	bne.n	8003482 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e07d      	b.n	8003556 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d107      	bne.n	8003472 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003462:	4b40      	ldr	r3, [pc, #256]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e071      	b.n	8003556 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003472:	4b3c      	ldr	r3, [pc, #240]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e069      	b.n	8003556 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003482:	4b38      	ldr	r3, [pc, #224]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f023 0203 	bic.w	r2, r3, #3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	4935      	ldr	r1, [pc, #212]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 8003490:	4313      	orrs	r3, r2
 8003492:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003494:	f7fd ff9e 	bl	80013d4 <HAL_GetTick>
 8003498:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349a:	e00a      	b.n	80034b2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800349c:	f7fd ff9a 	bl	80013d4 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e051      	b.n	8003556 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b2:	4b2c      	ldr	r3, [pc, #176]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 020c 	and.w	r2, r3, #12
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d1eb      	bne.n	800349c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034c4:	4b26      	ldr	r3, [pc, #152]	; (8003560 <HAL_RCC_ClockConfig+0x1c0>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 030f 	and.w	r3, r3, #15
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d210      	bcs.n	80034f4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d2:	4b23      	ldr	r3, [pc, #140]	; (8003560 <HAL_RCC_ClockConfig+0x1c0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f023 020f 	bic.w	r2, r3, #15
 80034da:	4921      	ldr	r1, [pc, #132]	; (8003560 <HAL_RCC_ClockConfig+0x1c0>)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	4313      	orrs	r3, r2
 80034e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e2:	4b1f      	ldr	r3, [pc, #124]	; (8003560 <HAL_RCC_ClockConfig+0x1c0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d001      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e030      	b.n	8003556 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003500:	4b18      	ldr	r3, [pc, #96]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	4915      	ldr	r1, [pc, #84]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 800350e:	4313      	orrs	r3, r2
 8003510:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	2b00      	cmp	r3, #0
 800351c:	d009      	beq.n	8003532 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800351e:	4b11      	ldr	r3, [pc, #68]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	490d      	ldr	r1, [pc, #52]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 800352e:	4313      	orrs	r3, r2
 8003530:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003532:	f000 f81d 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 8003536:	4601      	mov	r1, r0
 8003538:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	091b      	lsrs	r3, r3, #4
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	4a09      	ldr	r2, [pc, #36]	; (8003568 <HAL_RCC_ClockConfig+0x1c8>)
 8003544:	5cd3      	ldrb	r3, [r2, r3]
 8003546:	fa21 f303 	lsr.w	r3, r1, r3
 800354a:	4a08      	ldr	r2, [pc, #32]	; (800356c <HAL_RCC_ClockConfig+0x1cc>)
 800354c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800354e:	2000      	movs	r0, #0
 8003550:	f7fd fefc 	bl	800134c <HAL_InitTick>

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40023c00 	.word	0x40023c00
 8003564:	40023800 	.word	0x40023800
 8003568:	0800a830 	.word	0x0800a830
 800356c:	2000001c 	.word	0x2000001c

08003570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	607b      	str	r3, [r7, #4]
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	2300      	movs	r3, #0
 8003580:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003586:	4b50      	ldr	r3, [pc, #320]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 030c 	and.w	r3, r3, #12
 800358e:	2b04      	cmp	r3, #4
 8003590:	d007      	beq.n	80035a2 <HAL_RCC_GetSysClockFreq+0x32>
 8003592:	2b08      	cmp	r3, #8
 8003594:	d008      	beq.n	80035a8 <HAL_RCC_GetSysClockFreq+0x38>
 8003596:	2b00      	cmp	r3, #0
 8003598:	f040 808d 	bne.w	80036b6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800359c:	4b4b      	ldr	r3, [pc, #300]	; (80036cc <HAL_RCC_GetSysClockFreq+0x15c>)
 800359e:	60bb      	str	r3, [r7, #8]
       break;
 80035a0:	e08c      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035a2:	4b4b      	ldr	r3, [pc, #300]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80035a4:	60bb      	str	r3, [r7, #8]
      break;
 80035a6:	e089      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035a8:	4b47      	ldr	r3, [pc, #284]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035b0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80035b2:	4b45      	ldr	r3, [pc, #276]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d023      	beq.n	8003606 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035be:	4b42      	ldr	r3, [pc, #264]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	099b      	lsrs	r3, r3, #6
 80035c4:	f04f 0400 	mov.w	r4, #0
 80035c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	ea03 0501 	and.w	r5, r3, r1
 80035d4:	ea04 0602 	and.w	r6, r4, r2
 80035d8:	4a3d      	ldr	r2, [pc, #244]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80035da:	fb02 f106 	mul.w	r1, r2, r6
 80035de:	2200      	movs	r2, #0
 80035e0:	fb02 f205 	mul.w	r2, r2, r5
 80035e4:	440a      	add	r2, r1
 80035e6:	493a      	ldr	r1, [pc, #232]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80035e8:	fba5 0101 	umull	r0, r1, r5, r1
 80035ec:	1853      	adds	r3, r2, r1
 80035ee:	4619      	mov	r1, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f04f 0400 	mov.w	r4, #0
 80035f6:	461a      	mov	r2, r3
 80035f8:	4623      	mov	r3, r4
 80035fa:	f7fc fe05 	bl	8000208 <__aeabi_uldivmod>
 80035fe:	4603      	mov	r3, r0
 8003600:	460c      	mov	r4, r1
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	e049      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003606:	4b30      	ldr	r3, [pc, #192]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	099b      	lsrs	r3, r3, #6
 800360c:	f04f 0400 	mov.w	r4, #0
 8003610:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	ea03 0501 	and.w	r5, r3, r1
 800361c:	ea04 0602 	and.w	r6, r4, r2
 8003620:	4629      	mov	r1, r5
 8003622:	4632      	mov	r2, r6
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	f04f 0400 	mov.w	r4, #0
 800362c:	0154      	lsls	r4, r2, #5
 800362e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003632:	014b      	lsls	r3, r1, #5
 8003634:	4619      	mov	r1, r3
 8003636:	4622      	mov	r2, r4
 8003638:	1b49      	subs	r1, r1, r5
 800363a:	eb62 0206 	sbc.w	r2, r2, r6
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	f04f 0400 	mov.w	r4, #0
 8003646:	0194      	lsls	r4, r2, #6
 8003648:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800364c:	018b      	lsls	r3, r1, #6
 800364e:	1a5b      	subs	r3, r3, r1
 8003650:	eb64 0402 	sbc.w	r4, r4, r2
 8003654:	f04f 0100 	mov.w	r1, #0
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	00e2      	lsls	r2, r4, #3
 800365e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003662:	00d9      	lsls	r1, r3, #3
 8003664:	460b      	mov	r3, r1
 8003666:	4614      	mov	r4, r2
 8003668:	195b      	adds	r3, r3, r5
 800366a:	eb44 0406 	adc.w	r4, r4, r6
 800366e:	f04f 0100 	mov.w	r1, #0
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	02a2      	lsls	r2, r4, #10
 8003678:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800367c:	0299      	lsls	r1, r3, #10
 800367e:	460b      	mov	r3, r1
 8003680:	4614      	mov	r4, r2
 8003682:	4618      	mov	r0, r3
 8003684:	4621      	mov	r1, r4
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f04f 0400 	mov.w	r4, #0
 800368c:	461a      	mov	r2, r3
 800368e:	4623      	mov	r3, r4
 8003690:	f7fc fdba 	bl	8000208 <__aeabi_uldivmod>
 8003694:	4603      	mov	r3, r0
 8003696:	460c      	mov	r4, r1
 8003698:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800369a:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x158>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	0c1b      	lsrs	r3, r3, #16
 80036a0:	f003 0303 	and.w	r3, r3, #3
 80036a4:	3301      	adds	r3, #1
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b2:	60bb      	str	r3, [r7, #8]
      break;
 80036b4:	e002      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036b6:	4b05      	ldr	r3, [pc, #20]	; (80036cc <HAL_RCC_GetSysClockFreq+0x15c>)
 80036b8:	60bb      	str	r3, [r7, #8]
      break;
 80036ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036bc:	68bb      	ldr	r3, [r7, #8]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40023800 	.word	0x40023800
 80036cc:	00f42400 	.word	0x00f42400
 80036d0:	017d7840 	.word	0x017d7840

080036d4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036d8:	4b03      	ldr	r3, [pc, #12]	; (80036e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036da:	681b      	ldr	r3, [r3, #0]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	2000001c 	.word	0x2000001c

080036ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036f0:	f7ff fff0 	bl	80036d4 <HAL_RCC_GetHCLKFreq>
 80036f4:	4601      	mov	r1, r0
 80036f6:	4b05      	ldr	r3, [pc, #20]	; (800370c <HAL_RCC_GetPCLK1Freq+0x20>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	0a9b      	lsrs	r3, r3, #10
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	4a03      	ldr	r2, [pc, #12]	; (8003710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003702:	5cd3      	ldrb	r3, [r2, r3]
 8003704:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003708:	4618      	mov	r0, r3
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40023800 	.word	0x40023800
 8003710:	0800a840 	.word	0x0800a840

08003714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003718:	f7ff ffdc 	bl	80036d4 <HAL_RCC_GetHCLKFreq>
 800371c:	4601      	mov	r1, r0
 800371e:	4b05      	ldr	r3, [pc, #20]	; (8003734 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	0b5b      	lsrs	r3, r3, #13
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	4a03      	ldr	r2, [pc, #12]	; (8003738 <HAL_RCC_GetPCLK2Freq+0x24>)
 800372a:	5cd3      	ldrb	r3, [r2, r3]
 800372c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003730:	4618      	mov	r0, r3
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40023800 	.word	0x40023800
 8003738:	0800a840 	.word	0x0800a840

0800373c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003748:	2300      	movs	r3, #0
 800374a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003750:	2300      	movs	r3, #0
 8003752:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003754:	2300      	movs	r3, #0
 8003756:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b00      	cmp	r3, #0
 8003762:	d012      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003764:	4b69      	ldr	r3, [pc, #420]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	4a68      	ldr	r2, [pc, #416]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800376a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800376e:	6093      	str	r3, [r2, #8]
 8003770:	4b66      	ldr	r3, [pc, #408]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003778:	4964      	ldr	r1, [pc, #400]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800377a:	4313      	orrs	r3, r2
 800377c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003786:	2301      	movs	r3, #1
 8003788:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d017      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003796:	4b5d      	ldr	r3, [pc, #372]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800379c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a4:	4959      	ldr	r1, [pc, #356]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037b4:	d101      	bne.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80037b6:	2301      	movs	r3, #1
 80037b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80037c2:	2301      	movs	r3, #1
 80037c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d017      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037d2:	4b4e      	ldr	r3, [pc, #312]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	494a      	ldr	r1, [pc, #296]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037f0:	d101      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80037f2:	2301      	movs	r3, #1
 80037f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80037fe:	2301      	movs	r3, #1
 8003800:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800380e:	2301      	movs	r3, #1
 8003810:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 808b 	beq.w	8003936 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003820:	4b3a      	ldr	r3, [pc, #232]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	4a39      	ldr	r2, [pc, #228]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800382a:	6413      	str	r3, [r2, #64]	; 0x40
 800382c:	4b37      	ldr	r3, [pc, #220]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003838:	4b35      	ldr	r3, [pc, #212]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a34      	ldr	r2, [pc, #208]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800383e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003842:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003844:	f7fd fdc6 	bl	80013d4 <HAL_GetTick>
 8003848:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800384a:	e008      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800384c:	f7fd fdc2 	bl	80013d4 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b64      	cmp	r3, #100	; 0x64
 8003858:	d901      	bls.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e355      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800385e:	4b2c      	ldr	r3, [pc, #176]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800386a:	4b28      	ldr	r3, [pc, #160]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800386c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003872:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d035      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	429a      	cmp	r2, r3
 8003886:	d02e      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003888:	4b20      	ldr	r3, [pc, #128]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800388a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003890:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003892:	4b1e      	ldr	r3, [pc, #120]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003896:	4a1d      	ldr	r2, [pc, #116]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800389c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800389e:	4b1b      	ldr	r3, [pc, #108]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a2:	4a1a      	ldr	r2, [pc, #104]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80038aa:	4a18      	ldr	r2, [pc, #96]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80038b0:	4b16      	ldr	r3, [pc, #88]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d114      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038bc:	f7fd fd8a 	bl	80013d4 <HAL_GetTick>
 80038c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c2:	e00a      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038c4:	f7fd fd86 	bl	80013d4 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d901      	bls.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e317      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038da:	4b0c      	ldr	r3, [pc, #48]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0ee      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038f2:	d111      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003900:	4b04      	ldr	r3, [pc, #16]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003902:	400b      	ands	r3, r1
 8003904:	4901      	ldr	r1, [pc, #4]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003906:	4313      	orrs	r3, r2
 8003908:	608b      	str	r3, [r1, #8]
 800390a:	e00b      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800390c:	40023800 	.word	0x40023800
 8003910:	40007000 	.word	0x40007000
 8003914:	0ffffcff 	.word	0x0ffffcff
 8003918:	4bb0      	ldr	r3, [pc, #704]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	4aaf      	ldr	r2, [pc, #700]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800391e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003922:	6093      	str	r3, [r2, #8]
 8003924:	4bad      	ldr	r3, [pc, #692]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003926:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003930:	49aa      	ldr	r1, [pc, #680]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003932:	4313      	orrs	r3, r2
 8003934:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0310 	and.w	r3, r3, #16
 800393e:	2b00      	cmp	r3, #0
 8003940:	d010      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003942:	4ba6      	ldr	r3, [pc, #664]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003948:	4aa4      	ldr	r2, [pc, #656]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800394a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800394e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003952:	4ba2      	ldr	r3, [pc, #648]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003954:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395c:	499f      	ldr	r1, [pc, #636]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800395e:	4313      	orrs	r3, r2
 8003960:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00a      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003970:	4b9a      	ldr	r3, [pc, #616]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003976:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800397e:	4997      	ldr	r1, [pc, #604]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003980:	4313      	orrs	r3, r2
 8003982:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003992:	4b92      	ldr	r3, [pc, #584]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003998:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039a0:	498e      	ldr	r1, [pc, #568]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00a      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039b4:	4b89      	ldr	r3, [pc, #548]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80039b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039c2:	4986      	ldr	r1, [pc, #536]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039d6:	4b81      	ldr	r3, [pc, #516]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80039d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e4:	497d      	ldr	r1, [pc, #500]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00a      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039f8:	4b78      	ldr	r3, [pc, #480]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80039fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fe:	f023 0203 	bic.w	r2, r3, #3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a06:	4975      	ldr	r1, [pc, #468]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a1a:	4b70      	ldr	r3, [pc, #448]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a20:	f023 020c 	bic.w	r2, r3, #12
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a28:	496c      	ldr	r1, [pc, #432]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a3c:	4b67      	ldr	r3, [pc, #412]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a42:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4a:	4964      	ldr	r1, [pc, #400]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a5e:	4b5f      	ldr	r3, [pc, #380]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a64:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a6c:	495b      	ldr	r1, [pc, #364]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a80:	4b56      	ldr	r3, [pc, #344]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8e:	4953      	ldr	r1, [pc, #332]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003aa2:	4b4e      	ldr	r3, [pc, #312]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab0:	494a      	ldr	r1, [pc, #296]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003ac4:	4b45      	ldr	r3, [pc, #276]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad2:	4942      	ldr	r1, [pc, #264]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003ae6:	4b3d      	ldr	r3, [pc, #244]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af4:	4939      	ldr	r1, [pc, #228]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b08:	4b34      	ldr	r3, [pc, #208]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b16:	4931      	ldr	r1, [pc, #196]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d011      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003b2a:	4b2c      	ldr	r3, [pc, #176]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b30:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b38:	4928      	ldr	r1, [pc, #160]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b48:	d101      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b6a:	4b1c      	ldr	r3, [pc, #112]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b70:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b78:	4918      	ldr	r1, [pc, #96]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00b      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b8c:	4b13      	ldr	r3, [pc, #76]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b92:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b9c:	490f      	ldr	r1, [pc, #60]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d005      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bb2:	f040 80d8 	bne.w	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003bb6:	4b09      	ldr	r3, [pc, #36]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a08      	ldr	r2, [pc, #32]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003bbc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bc2:	f7fd fc07 	bl	80013d4 <HAL_GetTick>
 8003bc6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bc8:	e00a      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bca:	f7fd fc03 	bl	80013d4 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b64      	cmp	r3, #100	; 0x64
 8003bd6:	d903      	bls.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e196      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003bdc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003be0:	4b6c      	ldr	r3, [pc, #432]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1ee      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d021      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d11d      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c00:	4b64      	ldr	r3, [pc, #400]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c06:	0c1b      	lsrs	r3, r3, #16
 8003c08:	f003 0303 	and.w	r3, r3, #3
 8003c0c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c0e:	4b61      	ldr	r3, [pc, #388]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c14:	0e1b      	lsrs	r3, r3, #24
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	019a      	lsls	r2, r3, #6
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	041b      	lsls	r3, r3, #16
 8003c26:	431a      	orrs	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	061b      	lsls	r3, r3, #24
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	071b      	lsls	r3, r3, #28
 8003c34:	4957      	ldr	r1, [pc, #348]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d004      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c50:	d00a      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d02e      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c66:	d129      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c68:	4b4a      	ldr	r3, [pc, #296]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c6e:	0c1b      	lsrs	r3, r3, #16
 8003c70:	f003 0303 	and.w	r3, r3, #3
 8003c74:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c76:	4b47      	ldr	r3, [pc, #284]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003c78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c7c:	0f1b      	lsrs	r3, r3, #28
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	019a      	lsls	r2, r3, #6
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	041b      	lsls	r3, r3, #16
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	061b      	lsls	r3, r3, #24
 8003c96:	431a      	orrs	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	071b      	lsls	r3, r3, #28
 8003c9c:	493d      	ldr	r1, [pc, #244]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ca4:	4b3b      	ldr	r3, [pc, #236]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003caa:	f023 021f 	bic.w	r2, r3, #31
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	4937      	ldr	r1, [pc, #220]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d01d      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003cc8:	4b32      	ldr	r3, [pc, #200]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cce:	0e1b      	lsrs	r3, r3, #24
 8003cd0:	f003 030f 	and.w	r3, r3, #15
 8003cd4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cd6:	4b2f      	ldr	r3, [pc, #188]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cdc:	0f1b      	lsrs	r3, r3, #28
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	019a      	lsls	r2, r3, #6
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	041b      	lsls	r3, r3, #16
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	061b      	lsls	r3, r3, #24
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	071b      	lsls	r3, r3, #28
 8003cfc:	4925      	ldr	r1, [pc, #148]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d011      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	019a      	lsls	r2, r3, #6
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	041b      	lsls	r3, r3, #16
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	061b      	lsls	r3, r3, #24
 8003d24:	431a      	orrs	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	071b      	lsls	r3, r3, #28
 8003d2c:	4919      	ldr	r1, [pc, #100]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d34:	4b17      	ldr	r3, [pc, #92]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a16      	ldr	r2, [pc, #88]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003d3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d40:	f7fd fb48 	bl	80013d4 <HAL_GetTick>
 8003d44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d48:	f7fd fb44 	bl	80013d4 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b64      	cmp	r3, #100	; 0x64
 8003d54:	d901      	bls.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e0d7      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d5a:	4b0e      	ldr	r3, [pc, #56]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0f0      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	f040 80cd 	bne.w	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d6e:	4b09      	ldr	r3, [pc, #36]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a08      	ldr	r2, [pc, #32]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d7a:	f7fd fb2b 	bl	80013d4 <HAL_GetTick>
 8003d7e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d80:	e00a      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d82:	f7fd fb27 	bl	80013d4 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b64      	cmp	r3, #100	; 0x64
 8003d8e:	d903      	bls.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e0ba      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003d94:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d98:	4b5e      	ldr	r3, [pc, #376]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003da0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003da4:	d0ed      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d009      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d02e      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d12a      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003dce:	4b51      	ldr	r3, [pc, #324]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd4:	0c1b      	lsrs	r3, r3, #16
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ddc:	4b4d      	ldr	r3, [pc, #308]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de2:	0f1b      	lsrs	r3, r3, #28
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	019a      	lsls	r2, r3, #6
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	041b      	lsls	r3, r3, #16
 8003df4:	431a      	orrs	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	061b      	lsls	r3, r3, #24
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	071b      	lsls	r3, r3, #28
 8003e02:	4944      	ldr	r1, [pc, #272]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e0a:	4b42      	ldr	r3, [pc, #264]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e10:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	021b      	lsls	r3, r3, #8
 8003e1c:	493d      	ldr	r1, [pc, #244]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d022      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e38:	d11d      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e3a:	4b36      	ldr	r3, [pc, #216]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e40:	0e1b      	lsrs	r3, r3, #24
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e48:	4b32      	ldr	r3, [pc, #200]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4e:	0f1b      	lsrs	r3, r3, #28
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	019a      	lsls	r2, r3, #6
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	041b      	lsls	r3, r3, #16
 8003e62:	431a      	orrs	r2, r3
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	061b      	lsls	r3, r3, #24
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	071b      	lsls	r3, r3, #28
 8003e6e:	4929      	ldr	r1, [pc, #164]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d028      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e82:	4b24      	ldr	r3, [pc, #144]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e88:	0e1b      	lsrs	r3, r3, #24
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e90:	4b20      	ldr	r3, [pc, #128]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e96:	0c1b      	lsrs	r3, r3, #16
 8003e98:	f003 0303 	and.w	r3, r3, #3
 8003e9c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	019a      	lsls	r2, r3, #6
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	041b      	lsls	r3, r3, #16
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	061b      	lsls	r3, r3, #24
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	071b      	lsls	r3, r3, #28
 8003eb6:	4917      	ldr	r1, [pc, #92]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ebe:	4b15      	ldr	r3, [pc, #84]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ec4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ecc:	4911      	ldr	r1, [pc, #68]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ed4:	4b0f      	ldr	r3, [pc, #60]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a0e      	ldr	r2, [pc, #56]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ede:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ee0:	f7fd fa78 	bl	80013d4 <HAL_GetTick>
 8003ee4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ee8:	f7fd fa74 	bl	80013d4 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b64      	cmp	r3, #100	; 0x64
 8003ef4:	d901      	bls.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e007      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003efa:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f06:	d1ef      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3720      	adds	r7, #32
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	40023800 	.word	0x40023800

08003f18 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e06b      	b.n	8004002 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	7f5b      	ldrb	r3, [r3, #29]
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d105      	bne.n	8003f40 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f003 fdb6 	bl	8007aac <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2202      	movs	r2, #2
 8003f44:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	22ca      	movs	r2, #202	; 0xca
 8003f4c:	625a      	str	r2, [r3, #36]	; 0x24
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2253      	movs	r2, #83	; 0x53
 8003f54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fb00 	bl	800455c <RTC_EnterInitMode>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d008      	beq.n	8003f74 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	22ff      	movs	r2, #255	; 0xff
 8003f68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2204      	movs	r2, #4
 8003f6e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e046      	b.n	8004002 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6899      	ldr	r1, [r3, #8]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	4b23      	ldr	r3, [pc, #140]	; (800400c <HAL_RTC_Init+0xf4>)
 8003f80:	400b      	ands	r3, r1
 8003f82:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6899      	ldr	r1, [r3, #8]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	68d2      	ldr	r2, [r2, #12]
 8003faa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6919      	ldr	r1, [r3, #16]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	041a      	lsls	r2, r3, #16
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fce:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0208 	bic.w	r2, r2, #8
 8003fde:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699a      	ldr	r2, [r3, #24]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	22ff      	movs	r2, #255	; 0xff
 8003ff8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004000:	2300      	movs	r3, #0
  }
}
 8004002:	4618      	mov	r0, r3
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	ff8fffbf 	.word	0xff8fffbf

08004010 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004010:	b590      	push	{r4, r7, lr}
 8004012:	b087      	sub	sp, #28
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800401c:	2300      	movs	r3, #0
 800401e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	7f1b      	ldrb	r3, [r3, #28]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d101      	bne.n	800402c <HAL_RTC_SetTime+0x1c>
 8004028:	2302      	movs	r3, #2
 800402a:	e0a8      	b.n	800417e <HAL_RTC_SetTime+0x16e>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2201      	movs	r2, #1
 8004030:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2202      	movs	r2, #2
 8004036:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d126      	bne.n	800408c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004048:	2b00      	cmp	r3, #0
 800404a:	d102      	bne.n	8004052 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	2200      	movs	r2, #0
 8004050:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f000 faac 	bl	80045b4 <RTC_ByteToBcd2>
 800405c:	4603      	mov	r3, r0
 800405e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	785b      	ldrb	r3, [r3, #1]
 8004064:	4618      	mov	r0, r3
 8004066:	f000 faa5 	bl	80045b4 <RTC_ByteToBcd2>
 800406a:	4603      	mov	r3, r0
 800406c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800406e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	789b      	ldrb	r3, [r3, #2]
 8004074:	4618      	mov	r0, r3
 8004076:	f000 fa9d 	bl	80045b4 <RTC_ByteToBcd2>
 800407a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800407c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	7b1b      	ldrb	r3, [r3, #12]
 8004084:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8004086:	4313      	orrs	r3, r2
 8004088:	617b      	str	r3, [r7, #20]
 800408a:	e018      	b.n	80040be <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004096:	2b00      	cmp	r3, #0
 8004098:	d102      	bne.n	80040a0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2200      	movs	r2, #0
 800409e:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	785b      	ldrb	r3, [r3, #1]
 80040aa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80040ac:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80040b2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	7b1b      	ldrb	r3, [r3, #12]
 80040b8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80040ba:	4313      	orrs	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	22ca      	movs	r2, #202	; 0xca
 80040c4:	625a      	str	r2, [r3, #36]	; 0x24
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2253      	movs	r2, #83	; 0x53
 80040cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 fa44 	bl	800455c <RTC_EnterInitMode>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00b      	beq.n	80040f2 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	22ff      	movs	r2, #255	; 0xff
 80040e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2204      	movs	r2, #4
 80040e6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e045      	b.n	800417e <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	6979      	ldr	r1, [r7, #20]
 80040f8:	4b23      	ldr	r3, [pc, #140]	; (8004188 <HAL_RTC_SetTime+0x178>)
 80040fa:	400b      	ands	r3, r1
 80040fc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800410c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6899      	ldr	r1, [r3, #8]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	431a      	orrs	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004134:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 0320 	and.w	r3, r3, #32
 8004140:	2b00      	cmp	r3, #0
 8004142:	d111      	bne.n	8004168 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 f9e1 	bl	800450c <HAL_RTC_WaitForSynchro>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00b      	beq.n	8004168 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	22ff      	movs	r2, #255	; 0xff
 8004156:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2204      	movs	r2, #4
 800415c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e00a      	b.n	800417e <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	22ff      	movs	r2, #255	; 0xff
 800416e:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2201      	movs	r2, #1
 8004174:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800417c:	2300      	movs	r3, #0
  }
}
 800417e:	4618      	mov	r0, r3
 8004180:	371c      	adds	r7, #28
 8004182:	46bd      	mov	sp, r7
 8004184:	bd90      	pop	{r4, r7, pc}
 8004186:	bf00      	nop
 8004188:	007f7f7f 	.word	0x007f7f7f

0800418c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800418c:	b590      	push	{r4, r7, lr}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8004198:	2300      	movs	r3, #0
 800419a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	7f1b      	ldrb	r3, [r3, #28]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d101      	bne.n	80041a8 <HAL_RTC_SetDate+0x1c>
 80041a4:	2302      	movs	r3, #2
 80041a6:	e092      	b.n	80042ce <HAL_RTC_SetDate+0x142>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2201      	movs	r2, #1
 80041ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2202      	movs	r2, #2
 80041b2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10e      	bne.n	80041d8 <HAL_RTC_SetDate+0x4c>
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	785b      	ldrb	r3, [r3, #1]
 80041be:	f003 0310 	and.w	r3, r3, #16
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d008      	beq.n	80041d8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	785b      	ldrb	r3, [r3, #1]
 80041ca:	f023 0310 	bic.w	r3, r3, #16
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	330a      	adds	r3, #10
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d11c      	bne.n	8004218 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	78db      	ldrb	r3, [r3, #3]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 f9e6 	bl	80045b4 <RTC_ByteToBcd2>
 80041e8:	4603      	mov	r3, r0
 80041ea:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	785b      	ldrb	r3, [r3, #1]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 f9df 	bl	80045b4 <RTC_ByteToBcd2>
 80041f6:	4603      	mov	r3, r0
 80041f8:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80041fa:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	789b      	ldrb	r3, [r3, #2]
 8004200:	4618      	mov	r0, r3
 8004202:	f000 f9d7 	bl	80045b4 <RTC_ByteToBcd2>
 8004206:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8004208:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004212:	4313      	orrs	r3, r2
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	e00e      	b.n	8004236 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	78db      	ldrb	r3, [r3, #3]
 800421c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	785b      	ldrb	r3, [r3, #1]
 8004222:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8004224:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800422a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	22ca      	movs	r2, #202	; 0xca
 800423c:	625a      	str	r2, [r3, #36]	; 0x24
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2253      	movs	r2, #83	; 0x53
 8004244:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 f988 	bl	800455c <RTC_EnterInitMode>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00b      	beq.n	800426a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	22ff      	movs	r2, #255	; 0xff
 8004258:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2204      	movs	r2, #4
 800425e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e031      	b.n	80042ce <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	6979      	ldr	r1, [r7, #20]
 8004270:	4b19      	ldr	r3, [pc, #100]	; (80042d8 <HAL_RTC_SetDate+0x14c>)
 8004272:	400b      	ands	r3, r1
 8004274:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004284:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	2b00      	cmp	r3, #0
 8004292:	d111      	bne.n	80042b8 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 f939 	bl	800450c <HAL_RTC_WaitForSynchro>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00b      	beq.n	80042b8 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	22ff      	movs	r2, #255	; 0xff
 80042a6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2204      	movs	r2, #4
 80042ac:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e00a      	b.n	80042ce <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	22ff      	movs	r2, #255	; 0xff
 80042be:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2201      	movs	r2, #1
 80042c4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80042cc:	2300      	movs	r3, #0
  }
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	371c      	adds	r7, #28
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd90      	pop	{r4, r7, pc}
 80042d6:	bf00      	nop
 80042d8:	00ffff3f 	.word	0x00ffff3f

080042dc <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80042dc:	b590      	push	{r4, r7, lr}
 80042de:	b089      	sub	sp, #36	; 0x24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 80042ec:	2300      	movs	r3, #0
 80042ee:	61fb      	str	r3, [r7, #28]
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	7f1b      	ldrb	r3, [r3, #28]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d101      	bne.n	8004300 <HAL_RTC_SetAlarm+0x24>
 80042fc:	2302      	movs	r3, #2
 80042fe:	e101      	b.n	8004504 <HAL_RTC_SetAlarm+0x228>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2201      	movs	r2, #1
 8004304:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2202      	movs	r2, #2
 800430a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d137      	bne.n	8004382 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431c:	2b00      	cmp	r3, #0
 800431e:	d102      	bne.n	8004326 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2200      	movs	r2, #0
 8004324:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f000 f942 	bl	80045b4 <RTC_ByteToBcd2>
 8004330:	4603      	mov	r3, r0
 8004332:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	785b      	ldrb	r3, [r3, #1]
 8004338:	4618      	mov	r0, r3
 800433a:	f000 f93b 	bl	80045b4 <RTC_ByteToBcd2>
 800433e:	4603      	mov	r3, r0
 8004340:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8004342:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	789b      	ldrb	r3, [r3, #2]
 8004348:	4618      	mov	r0, r3
 800434a:	f000 f933 	bl	80045b4 <RTC_ByteToBcd2>
 800434e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8004350:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	7b1b      	ldrb	r3, [r3, #12]
 8004358:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800435a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004364:	4618      	mov	r0, r3
 8004366:	f000 f925 	bl	80045b4 <RTC_ByteToBcd2>
 800436a:	4603      	mov	r3, r0
 800436c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800436e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8004376:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800437c:	4313      	orrs	r3, r2
 800437e:	61fb      	str	r3, [r7, #28]
 8004380:	e023      	b.n	80043ca <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438c:	2b00      	cmp	r3, #0
 800438e:	d102      	bne.n	8004396 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2200      	movs	r2, #0
 8004394:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	785b      	ldrb	r3, [r3, #1]
 80043a0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80043a2:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80043a8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	7b1b      	ldrb	r3, [r3, #12]
 80043ae:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80043b0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043b8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80043ba:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80043c0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80043c6:	4313      	orrs	r3, r2
 80043c8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	22ca      	movs	r2, #202	; 0xca
 80043dc:	625a      	str	r2, [r3, #36]	; 0x24
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2253      	movs	r2, #83	; 0x53
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ee:	d13f      	bne.n	8004470 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689a      	ldr	r2, [r3, #8]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043fe:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800440e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004410:	f7fc ffe0 	bl	80013d4 <HAL_GetTick>
 8004414:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8004416:	e013      	b.n	8004440 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004418:	f7fc ffdc 	bl	80013d4 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004426:	d90b      	bls.n	8004440 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	22ff      	movs	r2, #255	; 0xff
 800442e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2203      	movs	r2, #3
 8004434:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e061      	b.n	8004504 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0e4      	beq.n	8004418 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69fa      	ldr	r2, [r7, #28]
 8004454:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800446c:	609a      	str	r2, [r3, #8]
 800446e:	e03e      	b.n	80044ee <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800447e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800448e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004490:	f7fc ffa0 	bl	80013d4 <HAL_GetTick>
 8004494:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8004496:	e013      	b.n	80044c0 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004498:	f7fc ff9c 	bl	80013d4 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044a6:	d90b      	bls.n	80044c0 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	22ff      	movs	r2, #255	; 0xff
 80044ae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2203      	movs	r2, #3
 80044b4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e021      	b.n	8004504 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0e4      	beq.n	8004498 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69fa      	ldr	r2, [r7, #28]
 80044d4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ec:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	22ff      	movs	r2, #255	; 0xff
 80044f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2201      	movs	r2, #1
 80044fa:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3724      	adds	r7, #36	; 0x24
 8004508:	46bd      	mov	sp, r7
 800450a:	bd90      	pop	{r4, r7, pc}

0800450c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004514:	2300      	movs	r3, #0
 8004516:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004526:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004528:	f7fc ff54 	bl	80013d4 <HAL_GetTick>
 800452c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800452e:	e009      	b.n	8004544 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004530:	f7fc ff50 	bl	80013d4 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800453e:	d901      	bls.n	8004544 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e007      	b.n	8004554 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f003 0320 	and.w	r3, r3, #32
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0ee      	beq.n	8004530 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004572:	2b00      	cmp	r3, #0
 8004574:	d119      	bne.n	80045aa <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f04f 32ff 	mov.w	r2, #4294967295
 800457e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004580:	f7fc ff28 	bl	80013d4 <HAL_GetTick>
 8004584:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004586:	e009      	b.n	800459c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004588:	f7fc ff24 	bl	80013d4 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004596:	d901      	bls.n	800459c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e007      	b.n	80045ac <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0ee      	beq.n	8004588 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	4603      	mov	r3, r0
 80045bc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80045be:	2300      	movs	r3, #0
 80045c0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80045c2:	e005      	b.n	80045d0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	3301      	adds	r3, #1
 80045c8:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80045ca:	79fb      	ldrb	r3, [r7, #7]
 80045cc:	3b0a      	subs	r3, #10
 80045ce:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80045d0:	79fb      	ldrb	r3, [r7, #7]
 80045d2:	2b09      	cmp	r3, #9
 80045d4:	d8f6      	bhi.n	80045c4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	79fb      	ldrb	r3, [r7, #7]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	b2db      	uxtb	r3, r3
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	7f1b      	ldrb	r3, [r3, #28]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d101      	bne.n	800460c <HAL_RTCEx_SetTimeStamp+0x1c>
 8004608:	2302      	movs	r3, #2
 800460a:	e03e      	b.n	800468a <HAL_RTCEx_SetTimeStamp+0x9a>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2201      	movs	r2, #1
 8004610:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2202      	movs	r2, #2
 8004616:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689a      	ldr	r2, [r3, #8]
 800461e:	4b1e      	ldr	r3, [pc, #120]	; (8004698 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8004620:	4013      	ands	r3, r2
 8004622:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	4313      	orrs	r3, r2
 800462a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	22ca      	movs	r2, #202	; 0xca
 8004632:	625a      	str	r2, [r3, #36]	; 0x24
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2253      	movs	r2, #83	; 0x53
 800463a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0206 	bic.w	r2, r2, #6
 800464a:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	430a      	orrs	r2, r1
 800465a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689a      	ldr	r2, [r3, #8]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004672:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	22ff      	movs	r2, #255	; 0xff
 800467a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2201      	movs	r2, #1
 8004680:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	371c      	adds	r7, #28
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	fffff7f7 	.word	0xfffff7f7

0800469c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e01d      	b.n	80046ea <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d105      	bne.n	80046c6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f003 fa0d 	bl	8007ae0 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2203      	movs	r2, #3
 80046ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f80f 	bl	80046f2 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80046f2:	b5b0      	push	{r4, r5, r7, lr}
 80046f4:	b08e      	sub	sp, #56	; 0x38
 80046f6:	af04      	add	r7, sp, #16
 80046f8:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80046fa:	2300      	movs	r3, #0
 80046fc:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80046fe:	2300      	movs	r3, #0
 8004700:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8004702:	2300      	movs	r3, #0
 8004704:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004706:	2300      	movs	r3, #0
 8004708:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800470a:	2300      	movs	r3, #0
 800470c:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800470e:	2300      	movs	r3, #0
 8004710:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8004712:	2376      	movs	r3, #118	; 0x76
 8004714:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681d      	ldr	r5, [r3, #0]
 800471a:	466c      	mov	r4, sp
 800471c:	f107 0318 	add.w	r3, r7, #24
 8004720:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004724:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004728:	f107 030c 	add.w	r3, r7, #12
 800472c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800472e:	4628      	mov	r0, r5
 8004730:	f001 fb6c 	bl	8005e0c <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004742:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4618      	mov	r0, r3
 800474a:	f001 fb98 	bl	8005e7e <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800475c:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 800475e:	2002      	movs	r0, #2
 8004760:	f7fc fe44 	bl	80013ec <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 fb95 	bl	8004e94 <SD_PowerON>
 800476a:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00b      	beq.n	800478a <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e013      	b.n	80047b2 <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 fab9 	bl	8004d02 <SD_InitCard>
 8004790:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00b      	beq.n	80047b0 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	431a      	orrs	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e000      	b.n	80047b2 <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3728      	adds	r7, #40	; 0x28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bdb0      	pop	{r4, r5, r7, pc}

080047ba <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b085      	sub	sp, #20
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 80047c4:	2300      	movs	r3, #0
 80047c6:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047cc:	0e1b      	lsrs	r3, r3, #24
 80047ce:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	099b      	lsrs	r3, r3, #6
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	089b      	lsrs	r3, r3, #2
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	f003 0303 	and.w	r3, r3, #3
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004802:	0c1b      	lsrs	r3, r3, #16
 8004804:	b2db      	uxtb	r3, r3
 8004806:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	b2da      	uxtb	r2, r3
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004814:	0a1b      	lsrs	r3, r3, #8
 8004816:	b2db      	uxtb	r3, r3
 8004818:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	b2da      	uxtb	r2, r3
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004826:	b2db      	uxtb	r3, r3
 8004828:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	b2da      	uxtb	r2, r3
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004836:	0e1b      	lsrs	r3, r3, #24
 8004838:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	b29b      	uxth	r3, r3
 800483e:	011b      	lsls	r3, r3, #4
 8004840:	b29a      	uxth	r2, r3
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800484a:	0c1b      	lsrs	r3, r3, #16
 800484c:	b2db      	uxtb	r3, r3
 800484e:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	88db      	ldrh	r3, [r3, #6]
 8004854:	b29a      	uxth	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	091b      	lsrs	r3, r3, #4
 800485a:	b29b      	uxth	r3, r3
 800485c:	f003 030f 	and.w	r3, r3, #15
 8004860:	b29b      	uxth	r3, r3
 8004862:	4313      	orrs	r3, r2
 8004864:	b29a      	uxth	r2, r3
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	b2db      	uxtb	r3, r3
 800486e:	f003 030f 	and.w	r3, r3, #15
 8004872:	b2da      	uxtb	r2, r3
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800487c:	0a1b      	lsrs	r3, r3, #8
 800487e:	b2db      	uxtb	r3, r3
 8004880:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	09db      	lsrs	r3, r3, #7
 8004886:	b2db      	uxtb	r3, r3
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	b2da      	uxtb	r2, r3
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	099b      	lsrs	r3, r3, #6
 8004896:	b2db      	uxtb	r3, r3
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	b2da      	uxtb	r2, r3
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	095b      	lsrs	r3, r3, #5
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	091b      	lsrs	r3, r3, #4
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2200      	movs	r2, #0
 80048c6:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f040 8086 	bne.w	80049de <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	029b      	lsls	r3, r3, #10
 80048d6:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	691a      	ldr	r2, [r3, #16]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	431a      	orrs	r2, r3
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048f8:	0e1b      	lsrs	r3, r3, #24
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	691a      	ldr	r2, [r3, #16]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	099b      	lsrs	r3, r3, #6
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	431a      	orrs	r2, r3
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	08db      	lsrs	r3, r3, #3
 8004914:	b2db      	uxtb	r3, r3
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	b2da      	uxtb	r2, r3
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	b2db      	uxtb	r3, r3
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	b2da      	uxtb	r2, r3
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004932:	0c1b      	lsrs	r3, r3, #16
 8004934:	b2db      	uxtb	r3, r3
 8004936:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	095b      	lsrs	r3, r3, #5
 800493c:	b2db      	uxtb	r3, r3
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	b2da      	uxtb	r2, r3
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	089b      	lsrs	r3, r3, #2
 800494c:	b2db      	uxtb	r3, r3
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	b2da      	uxtb	r2, r3
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	b2db      	uxtb	r3, r3
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	b2db      	uxtb	r3, r3
 8004960:	f003 0306 	and.w	r3, r3, #6
 8004964:	b2da      	uxtb	r2, r3
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800496e:	0a1b      	lsrs	r3, r3, #8
 8004970:	b2db      	uxtb	r3, r3
 8004972:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	7e1b      	ldrb	r3, [r3, #24]
 8004978:	b2da      	uxtb	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	09db      	lsrs	r3, r3, #7
 800497e:	b2db      	uxtb	r3, r3
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	b2db      	uxtb	r3, r3
 8004986:	4313      	orrs	r3, r2
 8004988:	b2da      	uxtb	r2, r3
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	7e1b      	ldrb	r3, [r3, #24]
 800499c:	b2db      	uxtb	r3, r3
 800499e:	3302      	adds	r3, #2
 80049a0:	2201      	movs	r2, #1
 80049a2:	409a      	lsls	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a8:	fb02 f203 	mul.w	r2, r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	7a1b      	ldrb	r3, [r3, #8]
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	461a      	mov	r2, r3
 80049b8:	2301      	movs	r3, #1
 80049ba:	4093      	lsls	r3, r2
 80049bc:	461a      	mov	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80049ca:	0a52      	lsrs	r2, r2, #9
 80049cc:	fb02 f203 	mul.w	r2, r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049da:	661a      	str	r2, [r3, #96]	; 0x60
 80049dc:	e04d      	b.n	8004a7a <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d138      	bne.n	8004a58 <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	041b      	lsls	r3, r3, #16
 80049f2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049fe:	0e1b      	lsrs	r3, r3, #24
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	691a      	ldr	r2, [r3, #16]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	021b      	lsls	r3, r3, #8
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a16:	0c1b      	lsrs	r3, r3, #16
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	691a      	ldr	r2, [r3, #16]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	431a      	orrs	r2, r3
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a2c:	0a1b      	lsrs	r3, r3, #8
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	3301      	adds	r3, #1
 8004a38:	029a      	lsls	r2, r3, #10
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	655a      	str	r2, [r3, #84]	; 0x54
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a4c:	659a      	str	r2, [r3, #88]	; 0x58
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	661a      	str	r2, [r3, #96]	; 0x60
 8004a56:	e010      	b.n	8004a7a <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004a60:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a66:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e0c1      	b.n	8004bfe <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	099b      	lsrs	r3, r3, #6
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004a96:	b2da      	uxtb	r2, r3
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	7e9b      	ldrb	r3, [r3, #26]
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	09db      	lsrs	r3, r3, #7
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	b2da      	uxtb	r2, r3
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad0:	0e1b      	lsrs	r3, r3, #24
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	09db      	lsrs	r3, r3, #7
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	095b      	lsrs	r3, r3, #5
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	f003 0303 	and.w	r3, r3, #3
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	089b      	lsrs	r3, r3, #2
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	f003 030c 	and.w	r3, r3, #12
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1c:	0c1b      	lsrs	r3, r3, #16
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	7fdb      	ldrb	r3, [r3, #31]
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	099b      	lsrs	r3, r3, #6
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	4313      	orrs	r3, r2
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	095b      	lsrs	r3, r3, #5
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6a:	0a1b      	lsrs	r3, r3, #8
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	09db      	lsrs	r3, r3, #7
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	099b      	lsrs	r3, r3, #6
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	095b      	lsrs	r3, r3, #5
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	091b      	lsrs	r3, r3, #4
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	089b      	lsrs	r3, r3, #2
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	085b      	lsrs	r3, r3, #1
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004c0a:	b5b0      	push	{r4, r5, r7, lr}
 8004c0c:	b08e      	sub	sp, #56	; 0x38
 8004c0e:	af04      	add	r7, sp, #16
 8004c10:	6078      	str	r0, [r7, #4]
 8004c12:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004c14:	2300      	movs	r3, #0
 8004c16:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2203      	movs	r2, #3
 8004c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c24:	2b03      	cmp	r3, #3
 8004c26:	d02e      	beq.n	8004c86 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c2e:	d106      	bne.n	8004c3e <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c34:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	639a      	str	r2, [r3, #56]	; 0x38
 8004c3c:	e029      	b.n	8004c92 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c44:	d10a      	bne.n	8004c5c <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f9cc 	bl	8004fe4 <SD_WideBus_Enable>
 8004c4c:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	431a      	orrs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	639a      	str	r2, [r3, #56]	; 0x38
 8004c5a:	e01a      	b.n	8004c92 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10a      	bne.n	8004c78 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 fa0b 	bl	800507e <SD_WideBus_Disable>
 8004c68:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	431a      	orrs	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	639a      	str	r2, [r3, #56]	; 0x38
 8004c76:	e00c      	b.n	8004c92 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	639a      	str	r2, [r3, #56]	; 0x38
 8004c84:	e005      	b.n	8004c92 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00a      	beq.n	8004cb0 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004ca2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e024      	b.n	8004cfa <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681d      	ldr	r5, [r3, #0]
 8004cd6:	466c      	mov	r4, sp
 8004cd8:	f107 0318 	add.w	r3, r7, #24
 8004cdc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004ce0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004ce4:	f107 030c 	add.w	r3, r7, #12
 8004ce8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004cea:	4628      	mov	r0, r5
 8004cec:	f001 f88e 	bl	8005e0c <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3728      	adds	r7, #40	; 0x28
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bdb0      	pop	{r4, r5, r7, pc}

08004d02 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004d02:	b5b0      	push	{r4, r5, r7, lr}
 8004d04:	b094      	sub	sp, #80	; 0x50
 8004d06:	af04      	add	r7, sp, #16
 8004d08:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f001 f8bf 	bl	8005e9a <SDMMC_GetPowerState>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d102      	bne.n	8004d28 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004d22:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004d26:	e0b1      	b.n	8004e8c <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2c:	2b03      	cmp	r3, #3
 8004d2e:	d02f      	beq.n	8004d90 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f001 fa52 	bl	80061de <SDMMC_CmdSendCID>
 8004d3a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <SD_InitCard+0x44>
    {
      return errorstate;
 8004d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d44:	e0a2      	b.n	8004e8c <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f001 f8ea 	bl	8005f26 <SDMMC_GetResponse>
 8004d52:	4602      	mov	r2, r0
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2104      	movs	r1, #4
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f001 f8e1 	bl	8005f26 <SDMMC_GetResponse>
 8004d64:	4602      	mov	r2, r0
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2108      	movs	r1, #8
 8004d70:	4618      	mov	r0, r3
 8004d72:	f001 f8d8 	bl	8005f26 <SDMMC_GetResponse>
 8004d76:	4602      	mov	r2, r0
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	210c      	movs	r1, #12
 8004d82:	4618      	mov	r0, r3
 8004d84:	f001 f8cf 	bl	8005f26 <SDMMC_GetResponse>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d00d      	beq.n	8004db4 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f107 020e 	add.w	r2, r7, #14
 8004da0:	4611      	mov	r1, r2
 8004da2:	4618      	mov	r0, r3
 8004da4:	f001 fa5c 	bl	8006260 <SDMMC_CmdSetRelAdd>
 8004da8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <SD_InitCard+0xb2>
    {
      return errorstate;
 8004db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004db2:	e06b      	b.n	8004e8c <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db8:	2b03      	cmp	r3, #3
 8004dba:	d036      	beq.n	8004e2a <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004dbc:	89fb      	ldrh	r3, [r7, #14]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dcc:	041b      	lsls	r3, r3, #16
 8004dce:	4619      	mov	r1, r3
 8004dd0:	4610      	mov	r0, r2
 8004dd2:	f001 fa24 	bl	800621e <SDMMC_CmdSendCSD>
 8004dd6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <SD_InitCard+0xe0>
    {
      return errorstate;
 8004dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004de0:	e054      	b.n	8004e8c <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2100      	movs	r1, #0
 8004de8:	4618      	mov	r0, r3
 8004dea:	f001 f89c 	bl	8005f26 <SDMMC_GetResponse>
 8004dee:	4602      	mov	r2, r0
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2104      	movs	r1, #4
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f001 f893 	bl	8005f26 <SDMMC_GetResponse>
 8004e00:	4602      	mov	r2, r0
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2108      	movs	r1, #8
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f001 f88a 	bl	8005f26 <SDMMC_GetResponse>
 8004e12:	4602      	mov	r2, r0
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	210c      	movs	r1, #12
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f001 f881 	bl	8005f26 <SDMMC_GetResponse>
 8004e24:	4602      	mov	r2, r0
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2104      	movs	r1, #4
 8004e30:	4618      	mov	r0, r3
 8004e32:	f001 f878 	bl	8005f26 <SDMMC_GetResponse>
 8004e36:	4603      	mov	r3, r0
 8004e38:	0d1a      	lsrs	r2, r3, #20
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8004e3e:	f107 0310 	add.w	r3, r7, #16
 8004e42:	4619      	mov	r1, r3
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f7ff fcb8 	bl	80047ba <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6819      	ldr	r1, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e52:	041b      	lsls	r3, r3, #16
 8004e54:	f04f 0400 	mov.w	r4, #0
 8004e58:	461a      	mov	r2, r3
 8004e5a:	4623      	mov	r3, r4
 8004e5c:	4608      	mov	r0, r1
 8004e5e:	f001 f8c7 	bl	8005ff0 <SDMMC_CmdSelDesel>
 8004e62:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <SD_InitCard+0x16c>
  {
    return errorstate;
 8004e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e6c:	e00e      	b.n	8004e8c <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681d      	ldr	r5, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	466c      	mov	r4, sp
 8004e76:	f103 0210 	add.w	r2, r3, #16
 8004e7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8004e7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004e80:	3304      	adds	r3, #4
 8004e82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e84:	4628      	mov	r0, r5
 8004e86:	f000 ffc1 	bl	8005e0c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3740      	adds	r7, #64	; 0x40
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bdb0      	pop	{r4, r5, r7, pc}

08004e94 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f001 f8c2 	bl	800603a <SDMMC_CmdGoIdleState>
 8004eb6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <SD_PowerON+0x2e>
  {
    return errorstate;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	e08c      	b.n	8004fdc <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f001 f8d7 	bl	800607a <SDMMC_CmdOperCond>
 8004ecc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d03d      	beq.n	8004f50 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8004eda:	e032      	b.n	8004f42 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	60ba      	str	r2, [r7, #8]
 8004ee2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d102      	bne.n	8004ef0 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004eea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004eee:	e075      	b.n	8004fdc <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f001 f8e0 	bl	80060bc <SDMMC_CmdAppCommand>
 8004efc:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004f04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004f08:	e068      	b.n	8004fdc <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2100      	movs	r1, #0
 8004f10:	4618      	mov	r0, r3
 8004f12:	f001 f8f7 	bl	8006104 <SDMMC_CmdAppOperCommand>
 8004f16:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d002      	beq.n	8004f24 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004f1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004f22:	e05b      	b.n	8004fdc <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2100      	movs	r1, #0
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 fffb 	bl	8005f26 <SDMMC_GetResponse>
 8004f30:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	0fdb      	lsrs	r3, r3, #31
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	bf0c      	ite	eq
 8004f3a:	2301      	moveq	r3, #1
 8004f3c:	2300      	movne	r3, #0
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d0c9      	beq.n	8004edc <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	645a      	str	r2, [r3, #68]	; 0x44
 8004f4e:	e044      	b.n	8004fda <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8004f56:	e031      	b.n	8004fbc <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	60ba      	str	r2, [r7, #8]
 8004f5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d102      	bne.n	8004f6c <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004f66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f6a:	e037      	b.n	8004fdc <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2100      	movs	r1, #0
 8004f72:	4618      	mov	r0, r3
 8004f74:	f001 f8a2 	bl	80060bc <SDMMC_CmdAppCommand>
 8004f78:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <SD_PowerON+0xf0>
      {
        return errorstate;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	e02b      	b.n	8004fdc <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f001 f8b9 	bl	8006104 <SDMMC_CmdAppOperCommand>
 8004f92:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <SD_PowerON+0x10a>
      {
        return errorstate;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	e01e      	b.n	8004fdc <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f000 ffbe 	bl	8005f26 <SDMMC_GetResponse>
 8004faa:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	0fdb      	lsrs	r3, r3, #31
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	bf0c      	ite	eq
 8004fb4:	2301      	moveq	r3, #1
 8004fb6:	2300      	movne	r3, #0
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d0ca      	beq.n	8004f58 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	645a      	str	r2, [r3, #68]	; 0x44
 8004fd2:	e002      	b.n	8004fda <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3718      	adds	r7, #24
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8004fec:	2300      	movs	r3, #0
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 ff91 	bl	8005f26 <SDMMC_GetResponse>
 8005004:	4603      	mov	r3, r0
 8005006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800500a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800500e:	d102      	bne.n	8005016 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005010:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005014:	e02f      	b.n	8005076 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005016:	f107 030c 	add.w	r3, r7, #12
 800501a:	4619      	mov	r1, r3
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f87b 	bl	8005118 <SD_FindSCR>
 8005022:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	e023      	b.n	8005076 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d01c      	beq.n	8005072 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005040:	041b      	lsls	r3, r3, #16
 8005042:	4619      	mov	r1, r3
 8005044:	4610      	mov	r0, r2
 8005046:	f001 f839 	bl	80060bc <SDMMC_CmdAppCommand>
 800504a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	e00f      	b.n	8005076 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2102      	movs	r1, #2
 800505c:	4618      	mov	r0, r3
 800505e:	f001 f877 	bl	8006150 <SDMMC_CmdBusWidth>
 8005062:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	e003      	b.n	8005076 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 800506e:	2300      	movs	r3, #0
 8005070:	e001      	b.n	8005076 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005072:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005076:	4618      	mov	r0, r3
 8005078:	3718      	adds	r7, #24
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b086      	sub	sp, #24
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8005086:	2300      	movs	r3, #0
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	2300      	movs	r3, #0
 800508c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800508e:	2300      	movs	r3, #0
 8005090:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2100      	movs	r1, #0
 8005098:	4618      	mov	r0, r3
 800509a:	f000 ff44 	bl	8005f26 <SDMMC_GetResponse>
 800509e:	4603      	mov	r3, r0
 80050a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050a8:	d102      	bne.n	80050b0 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80050aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80050ae:	e02f      	b.n	8005110 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80050b0:	f107 030c 	add.w	r3, r7, #12
 80050b4:	4619      	mov	r1, r3
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f82e 	bl	8005118 <SD_FindSCR>
 80050bc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	e023      	b.n	8005110 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d01c      	beq.n	800510c <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050da:	041b      	lsls	r3, r3, #16
 80050dc:	4619      	mov	r1, r3
 80050de:	4610      	mov	r0, r2
 80050e0:	f000 ffec 	bl	80060bc <SDMMC_CmdAppCommand>
 80050e4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d001      	beq.n	80050f0 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	e00f      	b.n	8005110 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2100      	movs	r1, #0
 80050f6:	4618      	mov	r0, r3
 80050f8:	f001 f82a 	bl	8006150 <SDMMC_CmdBusWidth>
 80050fc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	e003      	b.n	8005110 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8005108:	2300      	movs	r3, #0
 800510a:	e001      	b.n	8005110 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800510c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005110:	4618      	mov	r0, r3
 8005112:	3718      	adds	r7, #24
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005118:	b590      	push	{r4, r7, lr}
 800511a:	b08f      	sub	sp, #60	; 0x3c
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005122:	2300      	movs	r3, #0
 8005124:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8005126:	f7fc f955 	bl	80013d4 <HAL_GetTick>
 800512a:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 800512c:	2300      	movs	r3, #0
 800512e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 8005130:	2300      	movs	r3, #0
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	2300      	movs	r3, #0
 8005136:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2108      	movs	r1, #8
 800513e:	4618      	mov	r0, r3
 8005140:	f000 ff32 	bl	8005fa8 <SDMMC_CmdBlockLength>
 8005144:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8005146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <SD_FindSCR+0x38>
  {
    return errorstate;
 800514c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514e:	e0a8      	b.n	80052a2 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005158:	041b      	lsls	r3, r3, #16
 800515a:	4619      	mov	r1, r3
 800515c:	4610      	mov	r0, r2
 800515e:	f000 ffad 	bl	80060bc <SDMMC_CmdAppCommand>
 8005162:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8005164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <SD_FindSCR+0x56>
  {
    return errorstate;
 800516a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516c:	e099      	b.n	80052a2 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800516e:	f04f 33ff 	mov.w	r3, #4294967295
 8005172:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 8005174:	2308      	movs	r3, #8
 8005176:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005178:	2330      	movs	r3, #48	; 0x30
 800517a:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800517c:	2302      	movs	r3, #2
 800517e:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005180:	2300      	movs	r3, #0
 8005182:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005184:	2301      	movs	r3, #1
 8005186:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f107 0214 	add.w	r2, r7, #20
 8005190:	4611      	mov	r1, r2
 8005192:	4618      	mov	r0, r3
 8005194:	f000 fedc 	bl	8005f50 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4618      	mov	r0, r3
 800519e:	f000 fffb 	bl	8006198 <SDMMC_CmdSendSCR>
 80051a2:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80051a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d022      	beq.n	80051f0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80051aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ac:	e079      	b.n	80052a2 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00e      	beq.n	80051da <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6819      	ldr	r1, [r3, #0]
 80051c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	f107 020c 	add.w	r2, r7, #12
 80051c8:	18d4      	adds	r4, r2, r3
 80051ca:	4608      	mov	r0, r1
 80051cc:	f000 fe4a 	bl	8005e64 <SDMMC_ReadFIFO>
 80051d0:	4603      	mov	r3, r0
 80051d2:	6023      	str	r3, [r4, #0]
      index++;
 80051d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d6:	3301      	adds	r3, #1
 80051d8:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80051da:	f7fc f8fb 	bl	80013d4 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e8:	d102      	bne.n	80051f0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80051ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80051ee:	e058      	b.n	80052a2 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051f6:	f240 432a 	movw	r3, #1066	; 0x42a
 80051fa:	4013      	ands	r3, r2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0d6      	beq.n	80051ae <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005206:	f003 0308 	and.w	r3, r3, #8
 800520a:	2b00      	cmp	r3, #0
 800520c:	d005      	beq.n	800521a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2208      	movs	r2, #8
 8005214:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005216:	2308      	movs	r3, #8
 8005218:	e043      	b.n	80052a2 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d005      	beq.n	8005234 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2202      	movs	r2, #2
 800522e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005230:	2302      	movs	r3, #2
 8005232:	e036      	b.n	80052a2 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523a:	f003 0320 	and.w	r3, r3, #32
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2220      	movs	r2, #32
 8005248:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 800524a:	2320      	movs	r3, #32
 800524c:	e029      	b.n	80052a2 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005256:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	061a      	lsls	r2, r3, #24
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	021b      	lsls	r3, r3, #8
 8005260:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005264:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	0a1b      	lsrs	r3, r3, #8
 800526a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800526e:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 800527a:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800527c:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	061a      	lsls	r2, r3, #24
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	021b      	lsls	r3, r3, #8
 8005286:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800528a:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	0a1b      	lsrs	r3, r3, #8
 8005290:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005294:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	0e1b      	lsrs	r3, r3, #24
 800529a:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	373c      	adds	r7, #60	; 0x3c
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd90      	pop	{r4, r7, pc}

080052aa <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b082      	sub	sp, #8
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e025      	b.n	800530a <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d106      	bne.n	80052d8 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f002 fd58 	bl	8007d88 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	3304      	adds	r3, #4
 80052e8:	4619      	mov	r1, r3
 80052ea:	4610      	mov	r0, r2
 80052ec:	f000 fc68 	bl	8005bc0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6818      	ldr	r0, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	461a      	mov	r2, r3
 80052fa:	6839      	ldr	r1, [r7, #0]
 80052fc:	f000 fcd2 	bl	8005ca4 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b084      	sub	sp, #16
 8005316:	af00      	add	r7, sp, #0
 8005318:	60f8      	str	r0, [r7, #12]
 800531a:	60b9      	str	r1, [r7, #8]
 800531c:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d101      	bne.n	800532e <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800532a:	2302      	movs	r3, #2
 800532c:	e018      	b.n	8005360 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2202      	movs	r2, #2
 8005332:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	68b9      	ldr	r1, [r7, #8]
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fd30 	bl	8005da4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b02      	cmp	r3, #2
 800534a:	d104      	bne.n	8005356 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2205      	movs	r2, #5
 8005350:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005354:	e003      	b.n	800535e <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d101      	bne.n	8005382 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800537e:	2302      	movs	r3, #2
 8005380:	e00e      	b.n	80053a0 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2202      	movs	r2, #2
 8005386:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6839      	ldr	r1, [r7, #0]
 8005390:	4618      	mov	r0, r3
 8005392:	f000 fd28 	bl	8005de6 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e040      	b.n	800543c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d106      	bne.n	80053d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f002 fbea 	bl	8007ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2224      	movs	r2, #36	; 0x24
 80053d4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0201 	bic.w	r2, r2, #1
 80053e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f82c 	bl	8005444 <UART_SetConfig>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d101      	bne.n	80053f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e022      	b.n	800543c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d002      	beq.n	8005404 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fac4 	bl	800598c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005412:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689a      	ldr	r2, [r3, #8]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005422:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f042 0201 	orr.w	r2, r2, #1
 8005432:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fb4b 	bl	8005ad0 <UART_CheckIdleState>
 800543a:	4603      	mov	r3, r0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3708      	adds	r7, #8
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b088      	sub	sp, #32
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800544c:	2300      	movs	r3, #0
 800544e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005450:	2300      	movs	r3, #0
 8005452:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	431a      	orrs	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	69db      	ldr	r3, [r3, #28]
 8005468:	4313      	orrs	r3, r2
 800546a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	4bb1      	ldr	r3, [pc, #708]	; (8005738 <UART_SetConfig+0x2f4>)
 8005474:	4013      	ands	r3, r2
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	6812      	ldr	r2, [r2, #0]
 800547a:	6939      	ldr	r1, [r7, #16]
 800547c:	430b      	orrs	r3, r1
 800547e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a9f      	ldr	r2, [pc, #636]	; (800573c <UART_SetConfig+0x2f8>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d121      	bne.n	8005508 <UART_SetConfig+0xc4>
 80054c4:	4b9e      	ldr	r3, [pc, #632]	; (8005740 <UART_SetConfig+0x2fc>)
 80054c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ca:	f003 0303 	and.w	r3, r3, #3
 80054ce:	2b03      	cmp	r3, #3
 80054d0:	d816      	bhi.n	8005500 <UART_SetConfig+0xbc>
 80054d2:	a201      	add	r2, pc, #4	; (adr r2, 80054d8 <UART_SetConfig+0x94>)
 80054d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d8:	080054e9 	.word	0x080054e9
 80054dc:	080054f5 	.word	0x080054f5
 80054e0:	080054ef 	.word	0x080054ef
 80054e4:	080054fb 	.word	0x080054fb
 80054e8:	2301      	movs	r3, #1
 80054ea:	77fb      	strb	r3, [r7, #31]
 80054ec:	e151      	b.n	8005792 <UART_SetConfig+0x34e>
 80054ee:	2302      	movs	r3, #2
 80054f0:	77fb      	strb	r3, [r7, #31]
 80054f2:	e14e      	b.n	8005792 <UART_SetConfig+0x34e>
 80054f4:	2304      	movs	r3, #4
 80054f6:	77fb      	strb	r3, [r7, #31]
 80054f8:	e14b      	b.n	8005792 <UART_SetConfig+0x34e>
 80054fa:	2308      	movs	r3, #8
 80054fc:	77fb      	strb	r3, [r7, #31]
 80054fe:	e148      	b.n	8005792 <UART_SetConfig+0x34e>
 8005500:	2310      	movs	r3, #16
 8005502:	77fb      	strb	r3, [r7, #31]
 8005504:	bf00      	nop
 8005506:	e144      	b.n	8005792 <UART_SetConfig+0x34e>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a8d      	ldr	r2, [pc, #564]	; (8005744 <UART_SetConfig+0x300>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d134      	bne.n	800557c <UART_SetConfig+0x138>
 8005512:	4b8b      	ldr	r3, [pc, #556]	; (8005740 <UART_SetConfig+0x2fc>)
 8005514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005518:	f003 030c 	and.w	r3, r3, #12
 800551c:	2b0c      	cmp	r3, #12
 800551e:	d829      	bhi.n	8005574 <UART_SetConfig+0x130>
 8005520:	a201      	add	r2, pc, #4	; (adr r2, 8005528 <UART_SetConfig+0xe4>)
 8005522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005526:	bf00      	nop
 8005528:	0800555d 	.word	0x0800555d
 800552c:	08005575 	.word	0x08005575
 8005530:	08005575 	.word	0x08005575
 8005534:	08005575 	.word	0x08005575
 8005538:	08005569 	.word	0x08005569
 800553c:	08005575 	.word	0x08005575
 8005540:	08005575 	.word	0x08005575
 8005544:	08005575 	.word	0x08005575
 8005548:	08005563 	.word	0x08005563
 800554c:	08005575 	.word	0x08005575
 8005550:	08005575 	.word	0x08005575
 8005554:	08005575 	.word	0x08005575
 8005558:	0800556f 	.word	0x0800556f
 800555c:	2300      	movs	r3, #0
 800555e:	77fb      	strb	r3, [r7, #31]
 8005560:	e117      	b.n	8005792 <UART_SetConfig+0x34e>
 8005562:	2302      	movs	r3, #2
 8005564:	77fb      	strb	r3, [r7, #31]
 8005566:	e114      	b.n	8005792 <UART_SetConfig+0x34e>
 8005568:	2304      	movs	r3, #4
 800556a:	77fb      	strb	r3, [r7, #31]
 800556c:	e111      	b.n	8005792 <UART_SetConfig+0x34e>
 800556e:	2308      	movs	r3, #8
 8005570:	77fb      	strb	r3, [r7, #31]
 8005572:	e10e      	b.n	8005792 <UART_SetConfig+0x34e>
 8005574:	2310      	movs	r3, #16
 8005576:	77fb      	strb	r3, [r7, #31]
 8005578:	bf00      	nop
 800557a:	e10a      	b.n	8005792 <UART_SetConfig+0x34e>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a71      	ldr	r2, [pc, #452]	; (8005748 <UART_SetConfig+0x304>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d120      	bne.n	80055c8 <UART_SetConfig+0x184>
 8005586:	4b6e      	ldr	r3, [pc, #440]	; (8005740 <UART_SetConfig+0x2fc>)
 8005588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800558c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005590:	2b10      	cmp	r3, #16
 8005592:	d00f      	beq.n	80055b4 <UART_SetConfig+0x170>
 8005594:	2b10      	cmp	r3, #16
 8005596:	d802      	bhi.n	800559e <UART_SetConfig+0x15a>
 8005598:	2b00      	cmp	r3, #0
 800559a:	d005      	beq.n	80055a8 <UART_SetConfig+0x164>
 800559c:	e010      	b.n	80055c0 <UART_SetConfig+0x17c>
 800559e:	2b20      	cmp	r3, #32
 80055a0:	d005      	beq.n	80055ae <UART_SetConfig+0x16a>
 80055a2:	2b30      	cmp	r3, #48	; 0x30
 80055a4:	d009      	beq.n	80055ba <UART_SetConfig+0x176>
 80055a6:	e00b      	b.n	80055c0 <UART_SetConfig+0x17c>
 80055a8:	2300      	movs	r3, #0
 80055aa:	77fb      	strb	r3, [r7, #31]
 80055ac:	e0f1      	b.n	8005792 <UART_SetConfig+0x34e>
 80055ae:	2302      	movs	r3, #2
 80055b0:	77fb      	strb	r3, [r7, #31]
 80055b2:	e0ee      	b.n	8005792 <UART_SetConfig+0x34e>
 80055b4:	2304      	movs	r3, #4
 80055b6:	77fb      	strb	r3, [r7, #31]
 80055b8:	e0eb      	b.n	8005792 <UART_SetConfig+0x34e>
 80055ba:	2308      	movs	r3, #8
 80055bc:	77fb      	strb	r3, [r7, #31]
 80055be:	e0e8      	b.n	8005792 <UART_SetConfig+0x34e>
 80055c0:	2310      	movs	r3, #16
 80055c2:	77fb      	strb	r3, [r7, #31]
 80055c4:	bf00      	nop
 80055c6:	e0e4      	b.n	8005792 <UART_SetConfig+0x34e>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a5f      	ldr	r2, [pc, #380]	; (800574c <UART_SetConfig+0x308>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d120      	bne.n	8005614 <UART_SetConfig+0x1d0>
 80055d2:	4b5b      	ldr	r3, [pc, #364]	; (8005740 <UART_SetConfig+0x2fc>)
 80055d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80055dc:	2b40      	cmp	r3, #64	; 0x40
 80055de:	d00f      	beq.n	8005600 <UART_SetConfig+0x1bc>
 80055e0:	2b40      	cmp	r3, #64	; 0x40
 80055e2:	d802      	bhi.n	80055ea <UART_SetConfig+0x1a6>
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d005      	beq.n	80055f4 <UART_SetConfig+0x1b0>
 80055e8:	e010      	b.n	800560c <UART_SetConfig+0x1c8>
 80055ea:	2b80      	cmp	r3, #128	; 0x80
 80055ec:	d005      	beq.n	80055fa <UART_SetConfig+0x1b6>
 80055ee:	2bc0      	cmp	r3, #192	; 0xc0
 80055f0:	d009      	beq.n	8005606 <UART_SetConfig+0x1c2>
 80055f2:	e00b      	b.n	800560c <UART_SetConfig+0x1c8>
 80055f4:	2300      	movs	r3, #0
 80055f6:	77fb      	strb	r3, [r7, #31]
 80055f8:	e0cb      	b.n	8005792 <UART_SetConfig+0x34e>
 80055fa:	2302      	movs	r3, #2
 80055fc:	77fb      	strb	r3, [r7, #31]
 80055fe:	e0c8      	b.n	8005792 <UART_SetConfig+0x34e>
 8005600:	2304      	movs	r3, #4
 8005602:	77fb      	strb	r3, [r7, #31]
 8005604:	e0c5      	b.n	8005792 <UART_SetConfig+0x34e>
 8005606:	2308      	movs	r3, #8
 8005608:	77fb      	strb	r3, [r7, #31]
 800560a:	e0c2      	b.n	8005792 <UART_SetConfig+0x34e>
 800560c:	2310      	movs	r3, #16
 800560e:	77fb      	strb	r3, [r7, #31]
 8005610:	bf00      	nop
 8005612:	e0be      	b.n	8005792 <UART_SetConfig+0x34e>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a4d      	ldr	r2, [pc, #308]	; (8005750 <UART_SetConfig+0x30c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d124      	bne.n	8005668 <UART_SetConfig+0x224>
 800561e:	4b48      	ldr	r3, [pc, #288]	; (8005740 <UART_SetConfig+0x2fc>)
 8005620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800562c:	d012      	beq.n	8005654 <UART_SetConfig+0x210>
 800562e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005632:	d802      	bhi.n	800563a <UART_SetConfig+0x1f6>
 8005634:	2b00      	cmp	r3, #0
 8005636:	d007      	beq.n	8005648 <UART_SetConfig+0x204>
 8005638:	e012      	b.n	8005660 <UART_SetConfig+0x21c>
 800563a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800563e:	d006      	beq.n	800564e <UART_SetConfig+0x20a>
 8005640:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005644:	d009      	beq.n	800565a <UART_SetConfig+0x216>
 8005646:	e00b      	b.n	8005660 <UART_SetConfig+0x21c>
 8005648:	2300      	movs	r3, #0
 800564a:	77fb      	strb	r3, [r7, #31]
 800564c:	e0a1      	b.n	8005792 <UART_SetConfig+0x34e>
 800564e:	2302      	movs	r3, #2
 8005650:	77fb      	strb	r3, [r7, #31]
 8005652:	e09e      	b.n	8005792 <UART_SetConfig+0x34e>
 8005654:	2304      	movs	r3, #4
 8005656:	77fb      	strb	r3, [r7, #31]
 8005658:	e09b      	b.n	8005792 <UART_SetConfig+0x34e>
 800565a:	2308      	movs	r3, #8
 800565c:	77fb      	strb	r3, [r7, #31]
 800565e:	e098      	b.n	8005792 <UART_SetConfig+0x34e>
 8005660:	2310      	movs	r3, #16
 8005662:	77fb      	strb	r3, [r7, #31]
 8005664:	bf00      	nop
 8005666:	e094      	b.n	8005792 <UART_SetConfig+0x34e>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a39      	ldr	r2, [pc, #228]	; (8005754 <UART_SetConfig+0x310>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d124      	bne.n	80056bc <UART_SetConfig+0x278>
 8005672:	4b33      	ldr	r3, [pc, #204]	; (8005740 <UART_SetConfig+0x2fc>)
 8005674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005678:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800567c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005680:	d012      	beq.n	80056a8 <UART_SetConfig+0x264>
 8005682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005686:	d802      	bhi.n	800568e <UART_SetConfig+0x24a>
 8005688:	2b00      	cmp	r3, #0
 800568a:	d007      	beq.n	800569c <UART_SetConfig+0x258>
 800568c:	e012      	b.n	80056b4 <UART_SetConfig+0x270>
 800568e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005692:	d006      	beq.n	80056a2 <UART_SetConfig+0x25e>
 8005694:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005698:	d009      	beq.n	80056ae <UART_SetConfig+0x26a>
 800569a:	e00b      	b.n	80056b4 <UART_SetConfig+0x270>
 800569c:	2301      	movs	r3, #1
 800569e:	77fb      	strb	r3, [r7, #31]
 80056a0:	e077      	b.n	8005792 <UART_SetConfig+0x34e>
 80056a2:	2302      	movs	r3, #2
 80056a4:	77fb      	strb	r3, [r7, #31]
 80056a6:	e074      	b.n	8005792 <UART_SetConfig+0x34e>
 80056a8:	2304      	movs	r3, #4
 80056aa:	77fb      	strb	r3, [r7, #31]
 80056ac:	e071      	b.n	8005792 <UART_SetConfig+0x34e>
 80056ae:	2308      	movs	r3, #8
 80056b0:	77fb      	strb	r3, [r7, #31]
 80056b2:	e06e      	b.n	8005792 <UART_SetConfig+0x34e>
 80056b4:	2310      	movs	r3, #16
 80056b6:	77fb      	strb	r3, [r7, #31]
 80056b8:	bf00      	nop
 80056ba:	e06a      	b.n	8005792 <UART_SetConfig+0x34e>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a25      	ldr	r2, [pc, #148]	; (8005758 <UART_SetConfig+0x314>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d124      	bne.n	8005710 <UART_SetConfig+0x2cc>
 80056c6:	4b1e      	ldr	r3, [pc, #120]	; (8005740 <UART_SetConfig+0x2fc>)
 80056c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056cc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80056d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d4:	d012      	beq.n	80056fc <UART_SetConfig+0x2b8>
 80056d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056da:	d802      	bhi.n	80056e2 <UART_SetConfig+0x29e>
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d007      	beq.n	80056f0 <UART_SetConfig+0x2ac>
 80056e0:	e012      	b.n	8005708 <UART_SetConfig+0x2c4>
 80056e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056e6:	d006      	beq.n	80056f6 <UART_SetConfig+0x2b2>
 80056e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056ec:	d009      	beq.n	8005702 <UART_SetConfig+0x2be>
 80056ee:	e00b      	b.n	8005708 <UART_SetConfig+0x2c4>
 80056f0:	2300      	movs	r3, #0
 80056f2:	77fb      	strb	r3, [r7, #31]
 80056f4:	e04d      	b.n	8005792 <UART_SetConfig+0x34e>
 80056f6:	2302      	movs	r3, #2
 80056f8:	77fb      	strb	r3, [r7, #31]
 80056fa:	e04a      	b.n	8005792 <UART_SetConfig+0x34e>
 80056fc:	2304      	movs	r3, #4
 80056fe:	77fb      	strb	r3, [r7, #31]
 8005700:	e047      	b.n	8005792 <UART_SetConfig+0x34e>
 8005702:	2308      	movs	r3, #8
 8005704:	77fb      	strb	r3, [r7, #31]
 8005706:	e044      	b.n	8005792 <UART_SetConfig+0x34e>
 8005708:	2310      	movs	r3, #16
 800570a:	77fb      	strb	r3, [r7, #31]
 800570c:	bf00      	nop
 800570e:	e040      	b.n	8005792 <UART_SetConfig+0x34e>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a11      	ldr	r2, [pc, #68]	; (800575c <UART_SetConfig+0x318>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d139      	bne.n	800578e <UART_SetConfig+0x34a>
 800571a:	4b09      	ldr	r3, [pc, #36]	; (8005740 <UART_SetConfig+0x2fc>)
 800571c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005720:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005724:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005728:	d027      	beq.n	800577a <UART_SetConfig+0x336>
 800572a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800572e:	d817      	bhi.n	8005760 <UART_SetConfig+0x31c>
 8005730:	2b00      	cmp	r3, #0
 8005732:	d01c      	beq.n	800576e <UART_SetConfig+0x32a>
 8005734:	e027      	b.n	8005786 <UART_SetConfig+0x342>
 8005736:	bf00      	nop
 8005738:	efff69f3 	.word	0xefff69f3
 800573c:	40011000 	.word	0x40011000
 8005740:	40023800 	.word	0x40023800
 8005744:	40004400 	.word	0x40004400
 8005748:	40004800 	.word	0x40004800
 800574c:	40004c00 	.word	0x40004c00
 8005750:	40005000 	.word	0x40005000
 8005754:	40011400 	.word	0x40011400
 8005758:	40007800 	.word	0x40007800
 800575c:	40007c00 	.word	0x40007c00
 8005760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005764:	d006      	beq.n	8005774 <UART_SetConfig+0x330>
 8005766:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800576a:	d009      	beq.n	8005780 <UART_SetConfig+0x33c>
 800576c:	e00b      	b.n	8005786 <UART_SetConfig+0x342>
 800576e:	2300      	movs	r3, #0
 8005770:	77fb      	strb	r3, [r7, #31]
 8005772:	e00e      	b.n	8005792 <UART_SetConfig+0x34e>
 8005774:	2302      	movs	r3, #2
 8005776:	77fb      	strb	r3, [r7, #31]
 8005778:	e00b      	b.n	8005792 <UART_SetConfig+0x34e>
 800577a:	2304      	movs	r3, #4
 800577c:	77fb      	strb	r3, [r7, #31]
 800577e:	e008      	b.n	8005792 <UART_SetConfig+0x34e>
 8005780:	2308      	movs	r3, #8
 8005782:	77fb      	strb	r3, [r7, #31]
 8005784:	e005      	b.n	8005792 <UART_SetConfig+0x34e>
 8005786:	2310      	movs	r3, #16
 8005788:	77fb      	strb	r3, [r7, #31]
 800578a:	bf00      	nop
 800578c:	e001      	b.n	8005792 <UART_SetConfig+0x34e>
 800578e:	2310      	movs	r3, #16
 8005790:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800579a:	d17c      	bne.n	8005896 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800579c:	7ffb      	ldrb	r3, [r7, #31]
 800579e:	2b08      	cmp	r3, #8
 80057a0:	d859      	bhi.n	8005856 <UART_SetConfig+0x412>
 80057a2:	a201      	add	r2, pc, #4	; (adr r2, 80057a8 <UART_SetConfig+0x364>)
 80057a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a8:	080057cd 	.word	0x080057cd
 80057ac:	080057eb 	.word	0x080057eb
 80057b0:	08005809 	.word	0x08005809
 80057b4:	08005857 	.word	0x08005857
 80057b8:	08005821 	.word	0x08005821
 80057bc:	08005857 	.word	0x08005857
 80057c0:	08005857 	.word	0x08005857
 80057c4:	08005857 	.word	0x08005857
 80057c8:	0800583f 	.word	0x0800583f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80057cc:	f7fd ff8e 	bl	80036ec <HAL_RCC_GetPCLK1Freq>
 80057d0:	4603      	mov	r3, r0
 80057d2:	005a      	lsls	r2, r3, #1
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	085b      	lsrs	r3, r3, #1
 80057da:	441a      	add	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	61bb      	str	r3, [r7, #24]
        break;
 80057e8:	e038      	b.n	800585c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80057ea:	f7fd ff93 	bl	8003714 <HAL_RCC_GetPCLK2Freq>
 80057ee:	4603      	mov	r3, r0
 80057f0:	005a      	lsls	r2, r3, #1
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	085b      	lsrs	r3, r3, #1
 80057f8:	441a      	add	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005802:	b29b      	uxth	r3, r3
 8005804:	61bb      	str	r3, [r7, #24]
        break;
 8005806:	e029      	b.n	800585c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	085a      	lsrs	r2, r3, #1
 800580e:	4b5d      	ldr	r3, [pc, #372]	; (8005984 <UART_SetConfig+0x540>)
 8005810:	4413      	add	r3, r2
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	6852      	ldr	r2, [r2, #4]
 8005816:	fbb3 f3f2 	udiv	r3, r3, r2
 800581a:	b29b      	uxth	r3, r3
 800581c:	61bb      	str	r3, [r7, #24]
        break;
 800581e:	e01d      	b.n	800585c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005820:	f7fd fea6 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 8005824:	4603      	mov	r3, r0
 8005826:	005a      	lsls	r2, r3, #1
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	085b      	lsrs	r3, r3, #1
 800582e:	441a      	add	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	fbb2 f3f3 	udiv	r3, r2, r3
 8005838:	b29b      	uxth	r3, r3
 800583a:	61bb      	str	r3, [r7, #24]
        break;
 800583c:	e00e      	b.n	800585c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	085b      	lsrs	r3, r3, #1
 8005844:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005850:	b29b      	uxth	r3, r3
 8005852:	61bb      	str	r3, [r7, #24]
        break;
 8005854:	e002      	b.n	800585c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	75fb      	strb	r3, [r7, #23]
        break;
 800585a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	2b0f      	cmp	r3, #15
 8005860:	d916      	bls.n	8005890 <UART_SetConfig+0x44c>
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005868:	d212      	bcs.n	8005890 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	b29b      	uxth	r3, r3
 800586e:	f023 030f 	bic.w	r3, r3, #15
 8005872:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	085b      	lsrs	r3, r3, #1
 8005878:	b29b      	uxth	r3, r3
 800587a:	f003 0307 	and.w	r3, r3, #7
 800587e:	b29a      	uxth	r2, r3
 8005880:	89fb      	ldrh	r3, [r7, #14]
 8005882:	4313      	orrs	r3, r2
 8005884:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	89fa      	ldrh	r2, [r7, #14]
 800588c:	60da      	str	r2, [r3, #12]
 800588e:	e06e      	b.n	800596e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	75fb      	strb	r3, [r7, #23]
 8005894:	e06b      	b.n	800596e <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8005896:	7ffb      	ldrb	r3, [r7, #31]
 8005898:	2b08      	cmp	r3, #8
 800589a:	d857      	bhi.n	800594c <UART_SetConfig+0x508>
 800589c:	a201      	add	r2, pc, #4	; (adr r2, 80058a4 <UART_SetConfig+0x460>)
 800589e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a2:	bf00      	nop
 80058a4:	080058c9 	.word	0x080058c9
 80058a8:	080058e5 	.word	0x080058e5
 80058ac:	08005901 	.word	0x08005901
 80058b0:	0800594d 	.word	0x0800594d
 80058b4:	08005919 	.word	0x08005919
 80058b8:	0800594d 	.word	0x0800594d
 80058bc:	0800594d 	.word	0x0800594d
 80058c0:	0800594d 	.word	0x0800594d
 80058c4:	08005935 	.word	0x08005935
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80058c8:	f7fd ff10 	bl	80036ec <HAL_RCC_GetPCLK1Freq>
 80058cc:	4602      	mov	r2, r0
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	085b      	lsrs	r3, r3, #1
 80058d4:	441a      	add	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	fbb2 f3f3 	udiv	r3, r2, r3
 80058de:	b29b      	uxth	r3, r3
 80058e0:	61bb      	str	r3, [r7, #24]
        break;
 80058e2:	e036      	b.n	8005952 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80058e4:	f7fd ff16 	bl	8003714 <HAL_RCC_GetPCLK2Freq>
 80058e8:	4602      	mov	r2, r0
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	085b      	lsrs	r3, r3, #1
 80058f0:	441a      	add	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	61bb      	str	r3, [r7, #24]
        break;
 80058fe:	e028      	b.n	8005952 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	085a      	lsrs	r2, r3, #1
 8005906:	4b20      	ldr	r3, [pc, #128]	; (8005988 <UART_SetConfig+0x544>)
 8005908:	4413      	add	r3, r2
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	6852      	ldr	r2, [r2, #4]
 800590e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005912:	b29b      	uxth	r3, r3
 8005914:	61bb      	str	r3, [r7, #24]
        break;
 8005916:	e01c      	b.n	8005952 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005918:	f7fd fe2a 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 800591c:	4602      	mov	r2, r0
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	085b      	lsrs	r3, r3, #1
 8005924:	441a      	add	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	fbb2 f3f3 	udiv	r3, r2, r3
 800592e:	b29b      	uxth	r3, r3
 8005930:	61bb      	str	r3, [r7, #24]
        break;
 8005932:	e00e      	b.n	8005952 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	085b      	lsrs	r3, r3, #1
 800593a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	fbb2 f3f3 	udiv	r3, r2, r3
 8005946:	b29b      	uxth	r3, r3
 8005948:	61bb      	str	r3, [r7, #24]
        break;
 800594a:	e002      	b.n	8005952 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	75fb      	strb	r3, [r7, #23]
        break;
 8005950:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	2b0f      	cmp	r3, #15
 8005956:	d908      	bls.n	800596a <UART_SetConfig+0x526>
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800595e:	d204      	bcs.n	800596a <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	60da      	str	r2, [r3, #12]
 8005968:	e001      	b.n	800596e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800597a:	7dfb      	ldrb	r3, [r7, #23]
}
 800597c:	4618      	mov	r0, r3
 800597e:	3720      	adds	r7, #32
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	01e84800 	.word	0x01e84800
 8005988:	00f42400 	.word	0x00f42400

0800598c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00a      	beq.n	80059b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ba:	f003 0302 	and.w	r3, r3, #2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00a      	beq.n	80059d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	f003 0304 	and.w	r3, r3, #4
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00a      	beq.n	80059fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fe:	f003 0308 	and.w	r3, r3, #8
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00a      	beq.n	8005a1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a20:	f003 0310 	and.w	r3, r3, #16
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00a      	beq.n	8005a3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a42:	f003 0320 	and.w	r3, r3, #32
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00a      	beq.n	8005a60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d01a      	beq.n	8005aa2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a8a:	d10a      	bne.n	8005aa2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00a      	beq.n	8005ac4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	605a      	str	r2, [r3, #4]
  }
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af02      	add	r7, sp, #8
 8005ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005ade:	f7fb fc79 	bl	80013d4 <HAL_GetTick>
 8005ae2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0308 	and.w	r3, r3, #8
 8005aee:	2b08      	cmp	r3, #8
 8005af0:	d10e      	bne.n	8005b10 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005af2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f814 	bl	8005b2e <UART_WaitOnFlagUntilTimeout>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d001      	beq.n	8005b10 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e00a      	b.n	8005b26 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2220      	movs	r2, #32
 8005b14:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b084      	sub	sp, #16
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	60f8      	str	r0, [r7, #12]
 8005b36:	60b9      	str	r1, [r7, #8]
 8005b38:	603b      	str	r3, [r7, #0]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b3e:	e02a      	b.n	8005b96 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b46:	d026      	beq.n	8005b96 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b48:	f7fb fc44 	bl	80013d4 <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d302      	bcc.n	8005b5e <UART_WaitOnFlagUntilTimeout+0x30>
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d11b      	bne.n	8005b96 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b6c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f022 0201 	bic.w	r2, r2, #1
 8005b7c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2220      	movs	r2, #32
 8005b82:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2220      	movs	r2, #32
 8005b88:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e00f      	b.n	8005bb6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	69da      	ldr	r2, [r3, #28]
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	bf0c      	ite	eq
 8005ba6:	2301      	moveq	r3, #1
 8005ba8:	2300      	movne	r3, #0
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	461a      	mov	r2, r3
 8005bae:	79fb      	ldrb	r3, [r7, #7]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d0c5      	beq.n	8005b40 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
	...

08005bc0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d027      	beq.n	8005c2a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4b2f      	ldr	r3, [pc, #188]	; (8005ca0 <FMC_SDRAM_Init+0xe0>)
 8005be4:	4013      	ands	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005bf0:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8005bf6:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8005bfc:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8005c02:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8005c08:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8005c0e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8005c14:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005c1a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	e032      	b.n	8005c90 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c36:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005c40:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005c46:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	4b12      	ldr	r3, [pc, #72]	; (8005ca0 <FMC_SDRAM_Init+0xe0>)
 8005c58:	4013      	ands	r3, r2
 8005c5a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005c64:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8005c6a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8005c70:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8005c76:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8005c7c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	ffff8000 	.word	0xffff8000

08005ca4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d02e      	beq.n	8005d1c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005cca:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005cda:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005ce4:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	3b01      	subs	r3, #1
 8005cec:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005cee:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005cf8:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005d02:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	609a      	str	r2, [r3, #8]
 8005d1a:	e039      	b.n	8005d90 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	4b1e      	ldr	r3, [pc, #120]	; (8005da0 <FMC_SDRAM_Timing_Init+0xfc>)
 8005d26:	4013      	ands	r3, r2
 8005d28:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005d4e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005d5e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	3b01      	subs	r3, #1
 8005d66:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005d68:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8005d72:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	371c      	adds	r7, #28
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	ff0f0fff 	.word	0xff0f0fff

08005da4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b087      	sub	sp, #28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8005db0:	2300      	movs	r3, #0
 8005db2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005dbc:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8005dc6:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	371c      	adds	r7, #28
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b083      	sub	sp, #12
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	695a      	ldr	r2, [r3, #20]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005e0c:	b084      	sub	sp, #16
 8005e0e:	b480      	push	{r7}
 8005e10:	b085      	sub	sp, #20
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
 8005e16:	f107 001c 	add.w	r0, r7, #28
 8005e1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005e22:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005e24:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005e26:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005e2a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005e2e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005e32:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005e36:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	4b07      	ldr	r3, [pc, #28]	; (8005e60 <SDMMC_Init+0x54>)
 8005e44:	4013      	ands	r3, r2
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	b004      	add	sp, #16
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	ffff8100 	.word	0xffff8100

08005e64 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8005e7e:	b480      	push	{r7}
 8005e80:	b083      	sub	sp, #12
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2203      	movs	r2, #3
 8005e8a:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b083      	sub	sp, #12
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0303 	and.w	r3, r3, #3
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
	...

08005eb8 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005ed6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005edc:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005ee2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68da      	ldr	r2, [r3, #12]
 8005eee:	4b06      	ldr	r3, [pc, #24]	; (8005f08 <SDMMC_SendCommand+0x50>)
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	431a      	orrs	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	fffff000 	.word	0xfffff000

08005f0c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	b2db      	uxtb	r3, r3
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b085      	sub	sp, #20
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
 8005f2e:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 8005f30:	2300      	movs	r3, #0
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	3314      	adds	r3, #20
 8005f38:	461a      	mov	r2, r3
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
}  
 8005f44:	4618      	mov	r0, r3
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005f76:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005f7c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005f82:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	431a      	orrs	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0

}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3714      	adds	r7, #20
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b088      	sub	sp, #32
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005fba:	2310      	movs	r3, #16
 8005fbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005fbe:	2340      	movs	r3, #64	; 0x40
 8005fc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005fc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fca:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005fcc:	f107 0308 	add.w	r3, r7, #8
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7ff ff70 	bl	8005eb8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fdc:	2110      	movs	r1, #16
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f98c 	bl	80062fc <SDMMC_GetCmdResp1>
 8005fe4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fe6:	69fb      	ldr	r3, [r7, #28]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3720      	adds	r7, #32
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b08a      	sub	sp, #40	; 0x28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006004:	2307      	movs	r3, #7
 8006006:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006008:	2340      	movs	r3, #64	; 0x40
 800600a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800600c:	2300      	movs	r3, #0
 800600e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006010:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006014:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006016:	f107 0310 	add.w	r3, r7, #16
 800601a:	4619      	mov	r1, r3
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f7ff ff4b 	bl	8005eb8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8006022:	f241 3288 	movw	r2, #5000	; 0x1388
 8006026:	2107      	movs	r1, #7
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 f967 	bl	80062fc <SDMMC_GetCmdResp1>
 800602e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006032:	4618      	mov	r0, r3
 8006034:	3728      	adds	r7, #40	; 0x28
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b088      	sub	sp, #32
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006042:	2300      	movs	r3, #0
 8006044:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 8006046:	2300      	movs	r3, #0
 8006048:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800604a:	2300      	movs	r3, #0
 800604c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800604e:	2300      	movs	r3, #0
 8006050:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006052:	2300      	movs	r3, #0
 8006054:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800605a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800605c:	f107 0308 	add.w	r3, r7, #8
 8006060:	4619      	mov	r1, r3
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7ff ff28 	bl	8005eb8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f91d 	bl	80062a8 <SDMMC_GetCmdError>
 800606e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006070:	69fb      	ldr	r3, [r7, #28]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3720      	adds	r7, #32
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b088      	sub	sp, #32
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006082:	2300      	movs	r3, #0
 8006084:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006086:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800608a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800608c:	2308      	movs	r3, #8
 800608e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006090:	2340      	movs	r3, #64	; 0x40
 8006092:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006094:	2300      	movs	r3, #0
 8006096:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006098:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800609c:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800609e:	f107 0308 	add.w	r3, r7, #8
 80060a2:	4619      	mov	r1, r3
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7ff ff07 	bl	8005eb8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 faee 	bl	800668c <SDMMC_GetCmdResp7>
 80060b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060b2:	69fb      	ldr	r3, [r7, #28]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3720      	adds	r7, #32
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b088      	sub	sp, #32
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80060c6:	2300      	movs	r3, #0
 80060c8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80060ce:	2337      	movs	r3, #55	; 0x37
 80060d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80060d2:	2340      	movs	r3, #64	; 0x40
 80060d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80060d6:	2300      	movs	r3, #0
 80060d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80060da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060de:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80060e0:	f107 0308 	add.w	r3, r7, #8
 80060e4:	4619      	mov	r1, r3
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7ff fee6 	bl	8005eb8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80060ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80060f0:	2137      	movs	r1, #55	; 0x37
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f902 	bl	80062fc <SDMMC_GetCmdResp1>
 80060f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060fa:	69fb      	ldr	r3, [r7, #28]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3720      	adds	r7, #32
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b088      	sub	sp, #32
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800610e:	2300      	movs	r3, #0
 8006110:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8006112:	683a      	ldr	r2, [r7, #0]
 8006114:	4b0d      	ldr	r3, [pc, #52]	; (800614c <SDMMC_CmdAppOperCommand+0x48>)
 8006116:	4313      	orrs	r3, r2
 8006118:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800611a:	2329      	movs	r3, #41	; 0x29
 800611c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800611e:	2340      	movs	r3, #64	; 0x40
 8006120:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006122:	2300      	movs	r3, #0
 8006124:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006126:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800612a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800612c:	f107 0308 	add.w	r3, r7, #8
 8006130:	4619      	mov	r1, r3
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7ff fec0 	bl	8005eb8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fa05 	bl	8006548 <SDMMC_GetCmdResp3>
 800613e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006140:	69fb      	ldr	r3, [r7, #28]
}
 8006142:	4618      	mov	r0, r3
 8006144:	3720      	adds	r7, #32
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	80100000 	.word	0x80100000

08006150 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b088      	sub	sp, #32
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800615a:	2300      	movs	r3, #0
 800615c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006162:	2306      	movs	r3, #6
 8006164:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006166:	2340      	movs	r3, #64	; 0x40
 8006168:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800616a:	2300      	movs	r3, #0
 800616c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800616e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006172:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006174:	f107 0308 	add.w	r3, r7, #8
 8006178:	4619      	mov	r1, r3
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7ff fe9c 	bl	8005eb8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8006180:	f241 3288 	movw	r2, #5000	; 0x1388
 8006184:	2106      	movs	r1, #6
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 f8b8 	bl	80062fc <SDMMC_GetCmdResp1>
 800618c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800618e:	69fb      	ldr	r3, [r7, #28]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3720      	adds	r7, #32
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b088      	sub	sp, #32
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80061a0:	2300      	movs	r3, #0
 80061a2:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 80061a4:	2300      	movs	r3, #0
 80061a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80061a8:	2333      	movs	r3, #51	; 0x33
 80061aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80061ac:	2340      	movs	r3, #64	; 0x40
 80061ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80061b0:	2300      	movs	r3, #0
 80061b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80061b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061b8:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80061ba:	f107 0308 	add.w	r3, r7, #8
 80061be:	4619      	mov	r1, r3
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7ff fe79 	bl	8005eb8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80061c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80061ca:	2133      	movs	r1, #51	; 0x33
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 f895 	bl	80062fc <SDMMC_GetCmdResp1>
 80061d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061d4:	69fb      	ldr	r3, [r7, #28]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3720      	adds	r7, #32
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b088      	sub	sp, #32
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80061e6:	2300      	movs	r3, #0
 80061e8:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 80061ea:	2300      	movs	r3, #0
 80061ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80061ee:	2302      	movs	r3, #2
 80061f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80061f2:	23c0      	movs	r3, #192	; 0xc0
 80061f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80061f6:	2300      	movs	r3, #0
 80061f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80061fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061fe:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006200:	f107 0308 	add.w	r3, r7, #8
 8006204:	4619      	mov	r1, r3
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7ff fe56 	bl	8005eb8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 f95b 	bl	80064c8 <SDMMC_GetCmdResp2>
 8006212:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006214:	69fb      	ldr	r3, [r7, #28]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3720      	adds	r7, #32
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b088      	sub	sp, #32
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006228:	2300      	movs	r3, #0
 800622a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006230:	2309      	movs	r3, #9
 8006232:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006234:	23c0      	movs	r3, #192	; 0xc0
 8006236:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006238:	2300      	movs	r3, #0
 800623a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800623c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006240:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006242:	f107 0308 	add.w	r3, r7, #8
 8006246:	4619      	mov	r1, r3
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f7ff fe35 	bl	8005eb8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f93a 	bl	80064c8 <SDMMC_GetCmdResp2>
 8006254:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006256:	69fb      	ldr	r3, [r7, #28]
}
 8006258:	4618      	mov	r0, r3
 800625a:	3720      	adds	r7, #32
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b088      	sub	sp, #32
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800626a:	2300      	movs	r3, #0
 800626c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 800626e:	2300      	movs	r3, #0
 8006270:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006272:	2303      	movs	r3, #3
 8006274:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006276:	2340      	movs	r3, #64	; 0x40
 8006278:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800627a:	2300      	movs	r3, #0
 800627c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800627e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006282:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006284:	f107 0308 	add.w	r3, r7, #8
 8006288:	4619      	mov	r1, r3
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7ff fe14 	bl	8005eb8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	2103      	movs	r1, #3
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f98b 	bl	80065b0 <SDMMC_GetCmdResp6>
 800629a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800629c:	69fb      	ldr	r3, [r7, #28]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3720      	adds	r7, #32
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
	...

080062a8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80062a8:	b490      	push	{r4, r7}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80062b0:	4b10      	ldr	r3, [pc, #64]	; (80062f4 <SDMMC_GetCmdError+0x4c>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a10      	ldr	r2, [pc, #64]	; (80062f8 <SDMMC_GetCmdError+0x50>)
 80062b6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ba:	0a5b      	lsrs	r3, r3, #9
 80062bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80062c0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80062c4:	4623      	mov	r3, r4
 80062c6:	1e5c      	subs	r4, r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d102      	bne.n	80062d2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80062cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80062d0:	e00a      	b.n	80062e8 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d0f2      	beq.n	80062c4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80062e4:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3708      	adds	r7, #8
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bc90      	pop	{r4, r7}
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	2000001c 	.word	0x2000001c
 80062f8:	10624dd3 	.word	0x10624dd3

080062fc <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80062fc:	b590      	push	{r4, r7, lr}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	460b      	mov	r3, r1
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800630a:	4b6c      	ldr	r3, [pc, #432]	; (80064bc <SDMMC_GetCmdResp1+0x1c0>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a6c      	ldr	r2, [pc, #432]	; (80064c0 <SDMMC_GetCmdResp1+0x1c4>)
 8006310:	fba2 2303 	umull	r2, r3, r2, r3
 8006314:	0a5b      	lsrs	r3, r3, #9
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800631c:	4623      	mov	r3, r4
 800631e:	1e5c      	subs	r4, r3, #1
 8006320:	2b00      	cmp	r3, #0
 8006322:	d102      	bne.n	800632a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006324:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006328:	e0c3      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800632e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006332:	2b00      	cmp	r3, #0
 8006334:	d0f2      	beq.n	800631c <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800633a:	f003 0304 	and.w	r3, r3, #4
 800633e:	2b00      	cmp	r3, #0
 8006340:	d004      	beq.n	800634c <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2204      	movs	r2, #4
 8006346:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006348:	2304      	movs	r3, #4
 800634a:	e0b2      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	2b00      	cmp	r3, #0
 8006356:	d004      	beq.n	8006362 <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2201      	movs	r2, #1
 800635c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800635e:	2301      	movs	r3, #1
 8006360:	e0a7      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f7ff fdd2 	bl	8005f0c <SDMMC_GetCommandResponse>
 8006368:	4603      	mov	r3, r0
 800636a:	461a      	mov	r2, r3
 800636c:	7afb      	ldrb	r3, [r7, #11]
 800636e:	4293      	cmp	r3, r2
 8006370:	d001      	beq.n	8006376 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006372:	2301      	movs	r3, #1
 8006374:	e09d      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800637c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800637e:	2100      	movs	r1, #0
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f7ff fdd0 	bl	8005f26 <SDMMC_GetResponse>
 8006386:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	4b4e      	ldr	r3, [pc, #312]	; (80064c4 <SDMMC_GetCmdResp1+0x1c8>)
 800638c:	4013      	ands	r3, r2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 8006392:	2300      	movs	r3, #0
 8006394:	e08d      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2b00      	cmp	r3, #0
 800639a:	da02      	bge.n	80063a2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800639c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063a0:	e087      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80063ac:	2340      	movs	r3, #64	; 0x40
 80063ae:	e080      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d001      	beq.n	80063be <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80063ba:	2380      	movs	r3, #128	; 0x80
 80063bc:	e079      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d002      	beq.n	80063ce <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80063c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063cc:	e071      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80063d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063dc:	e069      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d002      	beq.n	80063ee <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80063e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063ec:	e061      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d002      	beq.n	80063fe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80063f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063fc:	e059      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d002      	beq.n	800640e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800640c:	e051      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d002      	beq.n	800641e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006418:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800641c:	e049      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006428:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800642c:	e041      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d002      	beq.n	800643e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8006438:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800643c:	e039      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006448:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800644c:	e031      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006458:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800645c:	e029      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d002      	beq.n	800646e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006468:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800646c:	e021      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d002      	beq.n	800647e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006478:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800647c:	e019      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d002      	beq.n	800648e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006488:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800648c:	e011      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d002      	beq.n	800649e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006498:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800649c:	e009      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f003 0308 	and.w	r3, r3, #8
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d002      	beq.n	80064ae <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80064a8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80064ac:	e001      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80064ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	371c      	adds	r7, #28
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd90      	pop	{r4, r7, pc}
 80064ba:	bf00      	nop
 80064bc:	2000001c 	.word	0x2000001c
 80064c0:	10624dd3 	.word	0x10624dd3
 80064c4:	fdffe008 	.word	0xfdffe008

080064c8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80064c8:	b490      	push	{r4, r7}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80064d0:	4b1b      	ldr	r3, [pc, #108]	; (8006540 <SDMMC_GetCmdResp2+0x78>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a1b      	ldr	r2, [pc, #108]	; (8006544 <SDMMC_GetCmdResp2+0x7c>)
 80064d6:	fba2 2303 	umull	r2, r3, r2, r3
 80064da:	0a5b      	lsrs	r3, r3, #9
 80064dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80064e0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80064e4:	4623      	mov	r3, r4
 80064e6:	1e5c      	subs	r4, r3, #1
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d102      	bne.n	80064f2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80064ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80064f0:	e020      	b.n	8006534 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d0f2      	beq.n	80064e4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006502:	f003 0304 	and.w	r3, r3, #4
 8006506:	2b00      	cmp	r3, #0
 8006508:	d004      	beq.n	8006514 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2204      	movs	r2, #4
 800650e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006510:	2304      	movs	r3, #4
 8006512:	e00f      	b.n	8006534 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	2b00      	cmp	r3, #0
 800651e:	d004      	beq.n	800652a <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006526:	2301      	movs	r3, #1
 8006528:	e004      	b.n	8006534 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006530:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bc90      	pop	{r4, r7}
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	2000001c 	.word	0x2000001c
 8006544:	10624dd3 	.word	0x10624dd3

08006548 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8006548:	b490      	push	{r4, r7}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006550:	4b15      	ldr	r3, [pc, #84]	; (80065a8 <SDMMC_GetCmdResp3+0x60>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a15      	ldr	r2, [pc, #84]	; (80065ac <SDMMC_GetCmdResp3+0x64>)
 8006556:	fba2 2303 	umull	r2, r3, r2, r3
 800655a:	0a5b      	lsrs	r3, r3, #9
 800655c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006560:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8006564:	4623      	mov	r3, r4
 8006566:	1e5c      	subs	r4, r3, #1
 8006568:	2b00      	cmp	r3, #0
 800656a:	d102      	bne.n	8006572 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800656c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006570:	e015      	b.n	800659e <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006576:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800657a:	2b00      	cmp	r3, #0
 800657c:	d0f2      	beq.n	8006564 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006582:	f003 0304 	and.w	r3, r3, #4
 8006586:	2b00      	cmp	r3, #0
 8006588:	d004      	beq.n	8006594 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2204      	movs	r2, #4
 800658e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006590:	2304      	movs	r3, #4
 8006592:	e004      	b.n	800659e <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800659a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3708      	adds	r7, #8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bc90      	pop	{r4, r7}
 80065a6:	4770      	bx	lr
 80065a8:	2000001c 	.word	0x2000001c
 80065ac:	10624dd3 	.word	0x10624dd3

080065b0 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80065b0:	b590      	push	{r4, r7, lr}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	460b      	mov	r3, r1
 80065ba:	607a      	str	r2, [r7, #4]
 80065bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80065be:	4b31      	ldr	r3, [pc, #196]	; (8006684 <SDMMC_GetCmdResp6+0xd4>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a31      	ldr	r2, [pc, #196]	; (8006688 <SDMMC_GetCmdResp6+0xd8>)
 80065c4:	fba2 2303 	umull	r2, r3, r2, r3
 80065c8:	0a5b      	lsrs	r3, r3, #9
 80065ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ce:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80065d2:	4623      	mov	r3, r4
 80065d4:	1e5c      	subs	r4, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d102      	bne.n	80065e0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80065da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80065de:	e04c      	b.n	800667a <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e4:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d0f2      	beq.n	80065d2 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f0:	f003 0304 	and.w	r3, r3, #4
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d004      	beq.n	8006602 <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2204      	movs	r2, #4
 80065fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80065fe:	2304      	movs	r3, #4
 8006600:	e03b      	b.n	800667a <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b00      	cmp	r3, #0
 800660c:	d004      	beq.n	8006618 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2201      	movs	r2, #1
 8006612:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006614:	2301      	movs	r3, #1
 8006616:	e030      	b.n	800667a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f7ff fc77 	bl	8005f0c <SDMMC_GetCommandResponse>
 800661e:	4603      	mov	r3, r0
 8006620:	461a      	mov	r2, r3
 8006622:	7afb      	ldrb	r3, [r7, #11]
 8006624:	4293      	cmp	r3, r2
 8006626:	d001      	beq.n	800662c <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006628:	2301      	movs	r3, #1
 800662a:	e026      	b.n	800667a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006632:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006634:	2100      	movs	r1, #0
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f7ff fc75 	bl	8005f26 <SDMMC_GetResponse>
 800663c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d106      	bne.n	8006656 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	0c1b      	lsrs	r3, r3, #16
 800664c:	b29a      	uxth	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006652:	2300      	movs	r3, #0
 8006654:	e011      	b.n	800667a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d002      	beq.n	8006666 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006664:	e009      	b.n	800667a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006674:	e001      	b.n	800667a <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006676:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800667a:	4618      	mov	r0, r3
 800667c:	371c      	adds	r7, #28
 800667e:	46bd      	mov	sp, r7
 8006680:	bd90      	pop	{r4, r7, pc}
 8006682:	bf00      	nop
 8006684:	2000001c 	.word	0x2000001c
 8006688:	10624dd3 	.word	0x10624dd3

0800668c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800668c:	b490      	push	{r4, r7}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006694:	4b18      	ldr	r3, [pc, #96]	; (80066f8 <SDMMC_GetCmdResp7+0x6c>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a18      	ldr	r2, [pc, #96]	; (80066fc <SDMMC_GetCmdResp7+0x70>)
 800669a:	fba2 2303 	umull	r2, r3, r2, r3
 800669e:	0a5b      	lsrs	r3, r3, #9
 80066a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066a4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80066a8:	4623      	mov	r3, r4
 80066aa:	1e5c      	subs	r4, r3, #1
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d102      	bne.n	80066b6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80066b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80066b4:	e01a      	b.n	80066ec <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d0f2      	beq.n	80066a8 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c6:	f003 0304 	and.w	r3, r3, #4
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d004      	beq.n	80066d8 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2240      	movs	r2, #64	; 0x40
 80066d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80066d4:	2304      	movs	r3, #4
 80066d6:	e009      	b.n	80066ec <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d002      	beq.n	80066ea <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2240      	movs	r2, #64	; 0x40
 80066e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80066ea:	2300      	movs	r3, #0
  
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bc90      	pop	{r4, r7}
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	2000001c 	.word	0x2000001c
 80066fc:	10624dd3 	.word	0x10624dd3

08006700 <Init_Display>:
1172,1218,1264,1310,1358,1405,1453,1501,
1550,1599,1648,1697,1747,1797,1847,1897,1947,
1997 };

void Init_Display(void)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	af00      	add	r7, sp, #0
	BSP_LCD_Init();
 8006704:	f7f9 ff00 	bl	8000508 <BSP_LCD_Init>

	BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FB_START_ADDRESS);
 8006708:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800670c:	2001      	movs	r0, #1
 800670e:	f7f9 ff93 	bl	8000638 <BSP_LCD_LayerDefaultInit>

	/* Set LCD Foreground Layer  */
	BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8006712:	2001      	movs	r0, #1
 8006714:	f7f9 fff0 	bl	80006f8 <BSP_LCD_SelectLayer>

	/* Enable LCD Display */
	BSP_LCD_DisplayOn();
 8006718:	f7fa fa3c 	bl	8000b94 <BSP_LCD_DisplayOn>

	/* Clear the LCD */
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800671c:	f04f 30ff 	mov.w	r0, #4294967295
 8006720:	f7fa f812 	bl	8000748 <BSP_LCD_SetBackColor>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8006724:	f04f 30ff 	mov.w	r0, #4294967295
 8006728:	f7fa f842 	bl	80007b0 <BSP_LCD_Clear>

	/* Set the LCD Text Color */
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 800672c:	4808      	ldr	r0, [pc, #32]	; (8006750 <Init_Display+0x50>)
 800672e:	f7f9 fff3 	bl	8000718 <BSP_LCD_SetTextColor>

	/* Display LCD messages */
	BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"KiCAD Team Bitch !", CENTER_MODE);
 8006732:	2301      	movs	r3, #1
 8006734:	4a07      	ldr	r2, [pc, #28]	; (8006754 <Init_Display+0x54>)
 8006736:	210a      	movs	r1, #10
 8006738:	2000      	movs	r0, #0
 800673a:	f7fa f8a5 	bl	8000888 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, 35, (uint8_t *)"Drivers examples", CENTER_MODE);
 800673e:	2301      	movs	r3, #1
 8006740:	4a05      	ldr	r2, [pc, #20]	; (8006758 <Init_Display+0x58>)
 8006742:	2123      	movs	r1, #35	; 0x23
 8006744:	2000      	movs	r0, #0
 8006746:	f7fa f89f 	bl	8000888 <BSP_LCD_DisplayStringAt>
}
 800674a:	bf00      	nop
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	ff000080 	.word	0xff000080
 8006754:	08007f50 	.word	0x08007f50
 8006758:	08007f64 	.word	0x08007f64

0800675c <Display_Render>:


void Display_Render(void)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	af00      	add	r7, sp, #0
	/* Clear the LCD */
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8006760:	f04f 30ff 	mov.w	r0, #4294967295
 8006764:	f7f9 fff0 	bl	8000748 <BSP_LCD_SetBackColor>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8006768:	f04f 30ff 	mov.w	r0, #4294967295
 800676c:	f7fa f820 	bl	80007b0 <BSP_LCD_Clear>

	/* Set the LCD Text Color */
	BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 8006770:	480e      	ldr	r0, [pc, #56]	; (80067ac <Display_Render+0x50>)
 8006772:	f7f9 ffd1 	bl	8000718 <BSP_LCD_SetTextColor>

	/* Main Analyzer Title */
	BSP_LCD_SetFont(&Font16);
 8006776:	480e      	ldr	r0, [pc, #56]	; (80067b0 <Display_Render+0x54>)
 8006778:	f7fa f800 	bl	800077c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"CPE Lyon : Raw Signal !", CENTER_MODE);
 800677c:	2301      	movs	r3, #1
 800677e:	4a0d      	ldr	r2, [pc, #52]	; (80067b4 <Display_Render+0x58>)
 8006780:	210a      	movs	r1, #10
 8006782:	2000      	movs	r0, #0
 8006784:	f7fa f880 	bl	8000888 <BSP_LCD_DisplayStringAt>

	/* Plot Background */
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8006788:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800678c:	f7f9 ffc4 	bl	8000718 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(PLOT_X, PLOT_Y, PLOT_WIDTH, PLOT_HEIGHT);
 8006790:	23c8      	movs	r3, #200	; 0xc8
 8006792:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8006796:	2128      	movs	r1, #40	; 0x28
 8006798:	2014      	movs	r0, #20
 800679a:	f7fa f981 	bl	8000aa0 <BSP_LCD_FillRect>

	Plot_Signal(signal_test_buffer, SIGNAL_BUFF);
 800679e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80067a2:	4805      	ldr	r0, [pc, #20]	; (80067b8 <Display_Render+0x5c>)
 80067a4:	f000 f80a 	bl	80067bc <Plot_Signal>
}
 80067a8:	bf00      	nop
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	ffffa500 	.word	0xffffa500
 80067b0:	20000008 	.word	0x20000008
 80067b4:	08007f78 	.word	0x08007f78
 80067b8:	0800a630 	.word	0x0800a630

080067bc <Plot_Signal>:

void Plot_Signal(uint16_t *buffer, uint16_t nbr_pts)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b086      	sub	sp, #24
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	460b      	mov	r3, r1
 80067c6:	807b      	strh	r3, [r7, #2]
	float pts1 = 0;
 80067c8:	f04f 0300 	mov.w	r3, #0
 80067cc:	613b      	str	r3, [r7, #16]
	float pts2 = 0;
 80067ce:	f04f 0300 	mov.w	r3, #0
 80067d2:	60fb      	str	r3, [r7, #12]
	float time_step = 0;
 80067d4:	f04f 0300 	mov.w	r3, #0
 80067d8:	60bb      	str	r3, [r7, #8]

	time_step = PLOT_WIDTH / ((float)nbr_pts);
 80067da:	887b      	ldrh	r3, [r7, #2]
 80067dc:	ee07 3a90 	vmov	s15, r3
 80067e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80067e4:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800689c <Plot_Signal+0xe0>
 80067e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067ec:	edc7 7a02 	vstr	s15, [r7, #8]

	/* Set the LCD Text Color */
	BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 80067f0:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 80067f4:	f7f9 ff90 	bl	8000718 <BSP_LCD_SetTextColor>

	for(uint16_t i = 0 ; i < nbr_pts ; i++)
 80067f8:	2300      	movs	r3, #0
 80067fa:	82fb      	strh	r3, [r7, #22]
 80067fc:	e045      	b.n	800688a <Plot_Signal+0xce>
		pts1 = PLOT_Y + pts1 * PLOT_HEIGHT;
		pts1 = PLOT_Y + pts2 * PLOT_HEIGHT;

		BSP_LCD_DrawLine(PLOT_X + (int)(time_step * i), (int)(pts1), PLOT_X +  (int)(time_step * (i+1)), (int)(pts2));
		*/
		pts1 = buffer[i];
 80067fe:	8afb      	ldrh	r3, [r7, #22]
 8006800:	005b      	lsls	r3, r3, #1
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	4413      	add	r3, r2
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	ee07 3a90 	vmov	s15, r3
 800680c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006810:	edc7 7a04 	vstr	s15, [r7, #16]
		pts1 = (pts1 / 0xFFF);
 8006814:	ed97 7a04 	vldr	s14, [r7, #16]
 8006818:	eddf 6a21 	vldr	s13, [pc, #132]	; 80068a0 <Plot_Signal+0xe4>
 800681c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006820:	edc7 7a04 	vstr	s15, [r7, #16]
		pts1 = (1 - pts1);
 8006824:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006828:	edd7 7a04 	vldr	s15, [r7, #16]
 800682c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006830:	edc7 7a04 	vstr	s15, [r7, #16]

		pts1 = PLOT_Y + pts1 * PLOT_HEIGHT;
 8006834:	edd7 7a04 	vldr	s15, [r7, #16]
 8006838:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80068a4 <Plot_Signal+0xe8>
 800683c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006840:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80068a8 <Plot_Signal+0xec>
 8006844:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006848:	edc7 7a04 	vstr	s15, [r7, #16]

		BSP_LCD_DrawPixel(PLOT_X + (int)(time_step * i), (int)(pts1), LCD_COLOR_YELLOW);
 800684c:	8afb      	ldrh	r3, [r7, #22]
 800684e:	ee07 3a90 	vmov	s15, r3
 8006852:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006856:	edd7 7a02 	vldr	s15, [r7, #8]
 800685a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800685e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006862:	ee17 3a90 	vmov	r3, s15
 8006866:	b29b      	uxth	r3, r3
 8006868:	3314      	adds	r3, #20
 800686a:	b29b      	uxth	r3, r3
 800686c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006870:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006874:	ee17 2a90 	vmov	r2, s15
 8006878:	b291      	uxth	r1, r2
 800687a:	f06f 02ff 	mvn.w	r2, #255	; 0xff
 800687e:	4618      	mov	r0, r3
 8006880:	f7fa f8c6 	bl	8000a10 <BSP_LCD_DrawPixel>
	for(uint16_t i = 0 ; i < nbr_pts ; i++)
 8006884:	8afb      	ldrh	r3, [r7, #22]
 8006886:	3301      	adds	r3, #1
 8006888:	82fb      	strh	r3, [r7, #22]
 800688a:	8afa      	ldrh	r2, [r7, #22]
 800688c:	887b      	ldrh	r3, [r7, #2]
 800688e:	429a      	cmp	r2, r3
 8006890:	d3b5      	bcc.n	80067fe <Plot_Signal+0x42>


	}
}
 8006892:	bf00      	nop
 8006894:	3718      	adds	r7, #24
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	43dc0000 	.word	0x43dc0000
 80068a0:	457ff000 	.word	0x457ff000
 80068a4:	43480000 	.word	0x43480000
 80068a8:	42200000 	.word	0x42200000

080068ac <SCB_EnableICache>:
{
 80068ac:	b480      	push	{r7}
 80068ae:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80068b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80068b4:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80068b8:	4b0b      	ldr	r3, [pc, #44]	; (80068e8 <SCB_EnableICache+0x3c>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80068c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80068c4:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80068c8:	4b07      	ldr	r3, [pc, #28]	; (80068e8 <SCB_EnableICache+0x3c>)
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	4a06      	ldr	r2, [pc, #24]	; (80068e8 <SCB_EnableICache+0x3c>)
 80068ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068d2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80068d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80068d8:	f3bf 8f6f 	isb	sy
}
 80068dc:	bf00      	nop
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	e000ed00 	.word	0xe000ed00

080068ec <SCB_EnableDCache>:
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80068f2:	4b1d      	ldr	r3, [pc, #116]	; (8006968 <SCB_EnableDCache+0x7c>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80068fa:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80068fe:	4b1a      	ldr	r3, [pc, #104]	; (8006968 <SCB_EnableDCache+0x7c>)
 8006900:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006904:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	0b5b      	lsrs	r3, r3, #13
 800690a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800690e:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	08db      	lsrs	r3, r3, #3
 8006914:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006918:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	015a      	lsls	r2, r3, #5
 800691e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8006922:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006928:	490f      	ldr	r1, [pc, #60]	; (8006968 <SCB_EnableDCache+0x7c>)
 800692a:	4313      	orrs	r3, r2
 800692c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	1e5a      	subs	r2, r3, #1
 8006934:	60ba      	str	r2, [r7, #8]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1ef      	bne.n	800691a <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	1e5a      	subs	r2, r3, #1
 800693e:	60fa      	str	r2, [r7, #12]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1e5      	bne.n	8006910 <SCB_EnableDCache+0x24>
 8006944:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8006948:	4b07      	ldr	r3, [pc, #28]	; (8006968 <SCB_EnableDCache+0x7c>)
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	4a06      	ldr	r2, [pc, #24]	; (8006968 <SCB_EnableDCache+0x7c>)
 800694e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006952:	6153      	str	r3, [r2, #20]
 8006954:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006958:	f3bf 8f6f 	isb	sy
}
 800695c:	bf00      	nop
 800695e:	3714      	adds	r7, #20
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr
 8006968:	e000ed00 	.word	0xe000ed00

0800696c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8006970:	f7ff ff9c 	bl	80068ac <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8006974:	f7ff ffba 	bl	80068ec <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006978:	f7fa fcda 	bl	8001330 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800697c:	f000 f818 	bl	80069b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006980:	f000 fb30 	bl	8006fe4 <MX_GPIO_Init>
  MX_DCMI_Init();
 8006984:	f000 f8c2 	bl	8006b0c <MX_DCMI_Init>
  MX_DMA2D_Init();
 8006988:	f000 f8f4 	bl	8006b74 <MX_DMA2D_Init>
  MX_FMC_Init();
 800698c:	f000 fada 	bl	8006f44 <MX_FMC_Init>
  MX_LTDC_Init();
 8006990:	f000 f922 	bl	8006bd8 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8006994:	f000 f9a2 	bl	8006cdc <MX_QUADSPI_Init>
  MX_RTC_Init();
 8006998:	f000 f9cc 	bl	8006d34 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 800699c:	f000 fa72 	bl	8006e84 <MX_SDMMC1_SD_Init>
  MX_USART1_UART_Init();
 80069a0:	f000 faa0 	bl	8006ee4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  Init_Display();
 80069a4:	f7ff feac 	bl	8006700 <Init_Display>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Display_Render();
 80069a8:	f7ff fed8 	bl	800675c <Display_Render>
 80069ac:	e7fc      	b.n	80069a8 <main+0x3c>
	...

080069b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b0b4      	sub	sp, #208	; 0xd0
 80069b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80069b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80069ba:	2230      	movs	r2, #48	; 0x30
 80069bc:	2100      	movs	r1, #0
 80069be:	4618      	mov	r0, r3
 80069c0:	f001 fab2 	bl	8007f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80069c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80069c8:	2200      	movs	r2, #0
 80069ca:	601a      	str	r2, [r3, #0]
 80069cc:	605a      	str	r2, [r3, #4]
 80069ce:	609a      	str	r2, [r3, #8]
 80069d0:	60da      	str	r2, [r3, #12]
 80069d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80069d4:	f107 0308 	add.w	r3, r7, #8
 80069d8:	2284      	movs	r2, #132	; 0x84
 80069da:	2100      	movs	r1, #0
 80069dc:	4618      	mov	r0, r3
 80069de:	f001 faa3 	bl	8007f28 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80069e2:	f7fc f93d 	bl	8002c60 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80069e6:	4b46      	ldr	r3, [pc, #280]	; (8006b00 <SystemClock_Config+0x150>)
 80069e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ea:	4a45      	ldr	r2, [pc, #276]	; (8006b00 <SystemClock_Config+0x150>)
 80069ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069f0:	6413      	str	r3, [r2, #64]	; 0x40
 80069f2:	4b43      	ldr	r3, [pc, #268]	; (8006b00 <SystemClock_Config+0x150>)
 80069f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069fa:	607b      	str	r3, [r7, #4]
 80069fc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80069fe:	4b41      	ldr	r3, [pc, #260]	; (8006b04 <SystemClock_Config+0x154>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a40      	ldr	r2, [pc, #256]	; (8006b04 <SystemClock_Config+0x154>)
 8006a04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a08:	6013      	str	r3, [r2, #0]
 8006a0a:	4b3e      	ldr	r3, [pc, #248]	; (8006b04 <SystemClock_Config+0x154>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006a12:	603b      	str	r3, [r7, #0]
 8006a14:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8006a16:	2309      	movs	r3, #9
 8006a18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006a1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006a20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006a24:	2301      	movs	r3, #1
 8006a26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006a2a:	2302      	movs	r3, #2
 8006a2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006a30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006a34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8006a38:	2319      	movs	r3, #25
 8006a3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8006a3e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006a42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006a46:	2302      	movs	r3, #2
 8006a48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8006a4c:	2309      	movs	r3, #9
 8006a4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006a52:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7fc fa32 	bl	8002ec0 <HAL_RCC_OscConfig>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d001      	beq.n	8006a66 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8006a62:	f000 fdbb 	bl	80075dc <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8006a66:	f7fc f90b 	bl	8002c80 <HAL_PWREx_EnableOverDrive>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d001      	beq.n	8006a74 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8006a70:	f000 fdb4 	bl	80075dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006a74:	230f      	movs	r3, #15
 8006a76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006a7a:	2302      	movs	r3, #2
 8006a7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006a80:	2300      	movs	r3, #0
 8006a82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006a86:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006a8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8006a96:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006a9a:	2106      	movs	r1, #6
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7fc fc7f 	bl	80033a0 <HAL_RCC_ClockConfig>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d001      	beq.n	8006aac <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8006aa8:	f000 fd98 	bl	80075dc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8006aac:	4b16      	ldr	r3, [pc, #88]	; (8006b08 <SystemClock_Config+0x158>)
 8006aae:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8006ab0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006ab4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8006ab6:	2305      	movs	r3, #5
 8006ab8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8006aba:	2302      	movs	r3, #2
 8006abc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8006ac6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006aca:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8006acc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ad0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8006ad6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ada:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006ae4:	f107 0308 	add.w	r3, r7, #8
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7fc fe27 	bl	800373c <HAL_RCCEx_PeriphCLKConfig>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d001      	beq.n	8006af8 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8006af4:	f000 fd72 	bl	80075dc <Error_Handler>
  }
}
 8006af8:	bf00      	nop
 8006afa:	37d0      	adds	r7, #208	; 0xd0
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	40023800 	.word	0x40023800
 8006b04:	40007000 	.word	0x40007000
 8006b08:	00a00068 	.word	0x00a00068

08006b0c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8006b10:	4b16      	ldr	r3, [pc, #88]	; (8006b6c <MX_DCMI_Init+0x60>)
 8006b12:	4a17      	ldr	r2, [pc, #92]	; (8006b70 <MX_DCMI_Init+0x64>)
 8006b14:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8006b16:	4b15      	ldr	r3, [pc, #84]	; (8006b6c <MX_DCMI_Init+0x60>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8006b1c:	4b13      	ldr	r3, [pc, #76]	; (8006b6c <MX_DCMI_Init+0x60>)
 8006b1e:	2200      	movs	r2, #0
 8006b20:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8006b22:	4b12      	ldr	r3, [pc, #72]	; (8006b6c <MX_DCMI_Init+0x60>)
 8006b24:	2200      	movs	r2, #0
 8006b26:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8006b28:	4b10      	ldr	r3, [pc, #64]	; (8006b6c <MX_DCMI_Init+0x60>)
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8006b2e:	4b0f      	ldr	r3, [pc, #60]	; (8006b6c <MX_DCMI_Init+0x60>)
 8006b30:	2200      	movs	r2, #0
 8006b32:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8006b34:	4b0d      	ldr	r3, [pc, #52]	; (8006b6c <MX_DCMI_Init+0x60>)
 8006b36:	2200      	movs	r2, #0
 8006b38:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8006b3a:	4b0c      	ldr	r3, [pc, #48]	; (8006b6c <MX_DCMI_Init+0x60>)
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8006b40:	4b0a      	ldr	r3, [pc, #40]	; (8006b6c <MX_DCMI_Init+0x60>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8006b46:	4b09      	ldr	r3, [pc, #36]	; (8006b6c <MX_DCMI_Init+0x60>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8006b4c:	4b07      	ldr	r3, [pc, #28]	; (8006b6c <MX_DCMI_Init+0x60>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8006b52:	4b06      	ldr	r3, [pc, #24]	; (8006b6c <MX_DCMI_Init+0x60>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8006b58:	4804      	ldr	r0, [pc, #16]	; (8006b6c <MX_DCMI_Init+0x60>)
 8006b5a:	f7fa fd7b 	bl	8001654 <HAL_DCMI_Init>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d001      	beq.n	8006b68 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8006b64:	f000 fd3a 	bl	80075dc <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8006b68:	bf00      	nop
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	200003b8 	.word	0x200003b8
 8006b70:	50050000 	.word	0x50050000

08006b74 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8006b78:	4b15      	ldr	r3, [pc, #84]	; (8006bd0 <MX_DMA2D_Init+0x5c>)
 8006b7a:	4a16      	ldr	r2, [pc, #88]	; (8006bd4 <MX_DMA2D_Init+0x60>)
 8006b7c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8006b7e:	4b14      	ldr	r3, [pc, #80]	; (8006bd0 <MX_DMA2D_Init+0x5c>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8006b84:	4b12      	ldr	r3, [pc, #72]	; (8006bd0 <MX_DMA2D_Init+0x5c>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8006b8a:	4b11      	ldr	r3, [pc, #68]	; (8006bd0 <MX_DMA2D_Init+0x5c>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8006b90:	4b0f      	ldr	r3, [pc, #60]	; (8006bd0 <MX_DMA2D_Init+0x5c>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8006b96:	4b0e      	ldr	r3, [pc, #56]	; (8006bd0 <MX_DMA2D_Init+0x5c>)
 8006b98:	2200      	movs	r2, #0
 8006b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8006b9c:	4b0c      	ldr	r3, [pc, #48]	; (8006bd0 <MX_DMA2D_Init+0x5c>)
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8006ba2:	4b0b      	ldr	r3, [pc, #44]	; (8006bd0 <MX_DMA2D_Init+0x5c>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8006ba8:	4809      	ldr	r0, [pc, #36]	; (8006bd0 <MX_DMA2D_Init+0x5c>)
 8006baa:	f7fa ff81 	bl	8001ab0 <HAL_DMA2D_Init>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d001      	beq.n	8006bb8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8006bb4:	f000 fd12 	bl	80075dc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8006bb8:	2101      	movs	r1, #1
 8006bba:	4805      	ldr	r0, [pc, #20]	; (8006bd0 <MX_DMA2D_Init+0x5c>)
 8006bbc:	f7fb f9e6 	bl	8001f8c <HAL_DMA2D_ConfigLayer>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d001      	beq.n	8006bca <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8006bc6:	f000 fd09 	bl	80075dc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8006bca:	bf00      	nop
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	200004a8 	.word	0x200004a8
 8006bd4:	4002b000 	.word	0x4002b000

08006bd8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b08e      	sub	sp, #56	; 0x38
 8006bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8006bde:	1d3b      	adds	r3, r7, #4
 8006be0:	2234      	movs	r2, #52	; 0x34
 8006be2:	2100      	movs	r1, #0
 8006be4:	4618      	mov	r0, r3
 8006be6:	f001 f99f 	bl	8007f28 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8006bea:	4b3a      	ldr	r3, [pc, #232]	; (8006cd4 <MX_LTDC_Init+0xfc>)
 8006bec:	4a3a      	ldr	r2, [pc, #232]	; (8006cd8 <MX_LTDC_Init+0x100>)
 8006bee:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8006bf0:	4b38      	ldr	r3, [pc, #224]	; (8006cd4 <MX_LTDC_Init+0xfc>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8006bf6:	4b37      	ldr	r3, [pc, #220]	; (8006cd4 <MX_LTDC_Init+0xfc>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8006bfc:	4b35      	ldr	r3, [pc, #212]	; (8006cd4 <MX_LTDC_Init+0xfc>)
 8006bfe:	2200      	movs	r2, #0
 8006c00:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8006c02:	4b34      	ldr	r3, [pc, #208]	; (8006cd4 <MX_LTDC_Init+0xfc>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8006c08:	4b32      	ldr	r3, [pc, #200]	; (8006cd4 <MX_LTDC_Init+0xfc>)
 8006c0a:	2228      	movs	r2, #40	; 0x28
 8006c0c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8006c0e:	4b31      	ldr	r3, [pc, #196]	; (8006cd4 <MX_LTDC_Init+0xfc>)
 8006c10:	2209      	movs	r2, #9
 8006c12:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8006c14:	4b2f      	ldr	r3, [pc, #188]	; (8006cd4 <MX_LTDC_Init+0xfc>)
 8006c16:	2235      	movs	r2, #53	; 0x35
 8006c18:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8006c1a:	4b2e      	ldr	r3, [pc, #184]	; (8006cd4 <MX_LTDC_Init+0xfc>)
 8006c1c:	220b      	movs	r2, #11
 8006c1e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8006c20:	4b2c      	ldr	r3, [pc, #176]	; (8006cd4 <MX_LTDC_Init+0xfc>)
 8006c22:	f240 2215 	movw	r2, #533	; 0x215
 8006c26:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8006c28:	4b2a      	ldr	r3, [pc, #168]	; (8006cd4 <MX_LTDC_Init+0xfc>)
 8006c2a:	f240 121b 	movw	r2, #283	; 0x11b
 8006c2e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8006c30:	4b28      	ldr	r3, [pc, #160]	; (8006cd4 <MX_LTDC_Init+0xfc>)
 8006c32:	f240 2235 	movw	r2, #565	; 0x235
 8006c36:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8006c38:	4b26      	ldr	r3, [pc, #152]	; (8006cd4 <MX_LTDC_Init+0xfc>)
 8006c3a:	f240 121d 	movw	r2, #285	; 0x11d
 8006c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8006c40:	4b24      	ldr	r3, [pc, #144]	; (8006cd4 <MX_LTDC_Init+0xfc>)
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8006c48:	4b22      	ldr	r3, [pc, #136]	; (8006cd4 <MX_LTDC_Init+0xfc>)
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8006c50:	4b20      	ldr	r3, [pc, #128]	; (8006cd4 <MX_LTDC_Init+0xfc>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8006c58:	481e      	ldr	r0, [pc, #120]	; (8006cd4 <MX_LTDC_Init+0xfc>)
 8006c5a:	f7fb fc89 	bl	8002570 <HAL_LTDC_Init>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d001      	beq.n	8006c68 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8006c64:	f000 fcba 	bl	80075dc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8006c6c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006c70:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8006c72:	2300      	movs	r3, #0
 8006c74:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8006c76:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006c7a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8006c80:	23ff      	movs	r3, #255	; 0xff
 8006c82:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8006c84:	2300      	movs	r3, #0
 8006c86:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8006c88:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006c8c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8006c8e:	2307      	movs	r3, #7
 8006c90:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8006c92:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8006c96:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8006c98:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8006c9e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006ca2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8006caa:	2300      	movs	r3, #0
 8006cac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8006cb6:	1d3b      	adds	r3, r7, #4
 8006cb8:	2200      	movs	r2, #0
 8006cba:	4619      	mov	r1, r3
 8006cbc:	4805      	ldr	r0, [pc, #20]	; (8006cd4 <MX_LTDC_Init+0xfc>)
 8006cbe:	f7fb fde9 	bl	8002894 <HAL_LTDC_ConfigLayer>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8006cc8:	f000 fc88 	bl	80075dc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8006ccc:	bf00      	nop
 8006cce:	3738      	adds	r7, #56	; 0x38
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	20000310 	.word	0x20000310
 8006cd8:	40016800 	.word	0x40016800

08006cdc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8006ce0:	4b12      	ldr	r3, [pc, #72]	; (8006d2c <MX_QUADSPI_Init+0x50>)
 8006ce2:	4a13      	ldr	r2, [pc, #76]	; (8006d30 <MX_QUADSPI_Init+0x54>)
 8006ce4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8006ce6:	4b11      	ldr	r3, [pc, #68]	; (8006d2c <MX_QUADSPI_Init+0x50>)
 8006ce8:	22ff      	movs	r2, #255	; 0xff
 8006cea:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8006cec:	4b0f      	ldr	r3, [pc, #60]	; (8006d2c <MX_QUADSPI_Init+0x50>)
 8006cee:	2201      	movs	r2, #1
 8006cf0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8006cf2:	4b0e      	ldr	r3, [pc, #56]	; (8006d2c <MX_QUADSPI_Init+0x50>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8006cf8:	4b0c      	ldr	r3, [pc, #48]	; (8006d2c <MX_QUADSPI_Init+0x50>)
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8006cfe:	4b0b      	ldr	r3, [pc, #44]	; (8006d2c <MX_QUADSPI_Init+0x50>)
 8006d00:	2200      	movs	r2, #0
 8006d02:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8006d04:	4b09      	ldr	r3, [pc, #36]	; (8006d2c <MX_QUADSPI_Init+0x50>)
 8006d06:	2200      	movs	r2, #0
 8006d08:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8006d0a:	4b08      	ldr	r3, [pc, #32]	; (8006d2c <MX_QUADSPI_Init+0x50>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8006d10:	4b06      	ldr	r3, [pc, #24]	; (8006d2c <MX_QUADSPI_Init+0x50>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8006d16:	4805      	ldr	r0, [pc, #20]	; (8006d2c <MX_QUADSPI_Init+0x50>)
 8006d18:	f7fc f802 	bl	8002d20 <HAL_QSPI_Init>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d001      	beq.n	8006d26 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8006d22:	f000 fc5b 	bl	80075dc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8006d26:	bf00      	nop
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	2000051c 	.word	0x2000051c
 8006d30:	a0001000 	.word	0xa0001000

08006d34 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b092      	sub	sp, #72	; 0x48
 8006d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8006d3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d3e:	2200      	movs	r2, #0
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	605a      	str	r2, [r3, #4]
 8006d44:	609a      	str	r2, [r3, #8]
 8006d46:	60da      	str	r2, [r3, #12]
 8006d48:	611a      	str	r2, [r3, #16]
 8006d4a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8006d50:	463b      	mov	r3, r7
 8006d52:	222c      	movs	r2, #44	; 0x2c
 8006d54:	2100      	movs	r1, #0
 8006d56:	4618      	mov	r0, r3
 8006d58:	f001 f8e6 	bl	8007f28 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8006d5c:	4b47      	ldr	r3, [pc, #284]	; (8006e7c <MX_RTC_Init+0x148>)
 8006d5e:	4a48      	ldr	r2, [pc, #288]	; (8006e80 <MX_RTC_Init+0x14c>)
 8006d60:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006d62:	4b46      	ldr	r3, [pc, #280]	; (8006e7c <MX_RTC_Init+0x148>)
 8006d64:	2200      	movs	r2, #0
 8006d66:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8006d68:	4b44      	ldr	r3, [pc, #272]	; (8006e7c <MX_RTC_Init+0x148>)
 8006d6a:	227f      	movs	r2, #127	; 0x7f
 8006d6c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8006d6e:	4b43      	ldr	r3, [pc, #268]	; (8006e7c <MX_RTC_Init+0x148>)
 8006d70:	22ff      	movs	r2, #255	; 0xff
 8006d72:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006d74:	4b41      	ldr	r3, [pc, #260]	; (8006e7c <MX_RTC_Init+0x148>)
 8006d76:	2200      	movs	r2, #0
 8006d78:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006d7a:	4b40      	ldr	r3, [pc, #256]	; (8006e7c <MX_RTC_Init+0x148>)
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006d80:	4b3e      	ldr	r3, [pc, #248]	; (8006e7c <MX_RTC_Init+0x148>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006d86:	483d      	ldr	r0, [pc, #244]	; (8006e7c <MX_RTC_Init+0x148>)
 8006d88:	f7fd f8c6 	bl	8003f18 <HAL_RTC_Init>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8006d92:	f000 fc23 	bl	80075dc <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8006d96:	2300      	movs	r3, #0
 8006d98:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8006da2:	2300      	movs	r3, #0
 8006da4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006da8:	2300      	movs	r3, #0
 8006daa:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006dac:	2300      	movs	r3, #0
 8006dae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8006db0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006db4:	2201      	movs	r2, #1
 8006db6:	4619      	mov	r1, r3
 8006db8:	4830      	ldr	r0, [pc, #192]	; (8006e7c <MX_RTC_Init+0x148>)
 8006dba:	f7fd f929 	bl	8004010 <HAL_RTC_SetTime>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d001      	beq.n	8006dc8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8006dc4:	f000 fc0a 	bl	80075dc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8006de0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006de4:	2201      	movs	r2, #1
 8006de6:	4619      	mov	r1, r3
 8006de8:	4824      	ldr	r0, [pc, #144]	; (8006e7c <MX_RTC_Init+0x148>)
 8006dea:	f7fd f9cf 	bl	800418c <HAL_RTC_SetDate>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d001      	beq.n	8006df8 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8006df4:	f000 fbf2 	bl	80075dc <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8006e00:	2300      	movs	r3, #0
 8006e02:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8006e04:	2300      	movs	r3, #0
 8006e06:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8006e10:	2300      	movs	r3, #0
 8006e12:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8006e14:	2300      	movs	r3, #0
 8006e16:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8006e22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8006e28:	463b      	mov	r3, r7
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	4813      	ldr	r0, [pc, #76]	; (8006e7c <MX_RTC_Init+0x148>)
 8006e30:	f7fd fa54 	bl	80042dc <HAL_RTC_SetAlarm>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d001      	beq.n	8006e3e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8006e3a:	f000 fbcf 	bl	80075dc <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8006e44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e48:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8006e4a:	463b      	mov	r3, r7
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	4619      	mov	r1, r3
 8006e50:	480a      	ldr	r0, [pc, #40]	; (8006e7c <MX_RTC_Init+0x148>)
 8006e52:	f7fd fa43 	bl	80042dc <HAL_RTC_SetAlarm>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d001      	beq.n	8006e60 <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 8006e5c:	f000 fbbe 	bl	80075dc <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8006e60:	2202      	movs	r2, #2
 8006e62:	2100      	movs	r1, #0
 8006e64:	4805      	ldr	r0, [pc, #20]	; (8006e7c <MX_RTC_Init+0x148>)
 8006e66:	f7fd fbc3 	bl	80045f0 <HAL_RTCEx_SetTimeStamp>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d001      	beq.n	8006e74 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 8006e70:	f000 fbb4 	bl	80075dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8006e74:	bf00      	nop
 8006e76:	3748      	adds	r7, #72	; 0x48
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	20000488 	.word	0x20000488
 8006e80:	40002800 	.word	0x40002800

08006e84 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8006e88:	4b14      	ldr	r3, [pc, #80]	; (8006edc <MX_SDMMC1_SD_Init+0x58>)
 8006e8a:	4a15      	ldr	r2, [pc, #84]	; (8006ee0 <MX_SDMMC1_SD_Init+0x5c>)
 8006e8c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8006e8e:	4b13      	ldr	r3, [pc, #76]	; (8006edc <MX_SDMMC1_SD_Init+0x58>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8006e94:	4b11      	ldr	r3, [pc, #68]	; (8006edc <MX_SDMMC1_SD_Init+0x58>)
 8006e96:	2200      	movs	r2, #0
 8006e98:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006e9a:	4b10      	ldr	r3, [pc, #64]	; (8006edc <MX_SDMMC1_SD_Init+0x58>)
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8006ea0:	4b0e      	ldr	r3, [pc, #56]	; (8006edc <MX_SDMMC1_SD_Init+0x58>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006ea6:	4b0d      	ldr	r3, [pc, #52]	; (8006edc <MX_SDMMC1_SD_Init+0x58>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8006eac:	4b0b      	ldr	r3, [pc, #44]	; (8006edc <MX_SDMMC1_SD_Init+0x58>)
 8006eae:	2200      	movs	r2, #0
 8006eb0:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8006eb2:	480a      	ldr	r0, [pc, #40]	; (8006edc <MX_SDMMC1_SD_Init+0x58>)
 8006eb4:	f7fd fbf2 	bl	800469c <HAL_SD_Init>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 8006ebe:	f000 fb8d 	bl	80075dc <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8006ec2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006ec6:	4805      	ldr	r0, [pc, #20]	; (8006edc <MX_SDMMC1_SD_Init+0x58>)
 8006ec8:	f7fd fe9f 	bl	8004c0a <HAL_SD_ConfigWideBusOperation>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d001      	beq.n	8006ed6 <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 8006ed2:	f000 fb83 	bl	80075dc <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8006ed6:	bf00      	nop
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	2000028c 	.word	0x2000028c
 8006ee0:	40012c00 	.word	0x40012c00

08006ee4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006ee8:	4b14      	ldr	r3, [pc, #80]	; (8006f3c <MX_USART1_UART_Init+0x58>)
 8006eea:	4a15      	ldr	r2, [pc, #84]	; (8006f40 <MX_USART1_UART_Init+0x5c>)
 8006eec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006eee:	4b13      	ldr	r3, [pc, #76]	; (8006f3c <MX_USART1_UART_Init+0x58>)
 8006ef0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006ef4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006ef6:	4b11      	ldr	r3, [pc, #68]	; (8006f3c <MX_USART1_UART_Init+0x58>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006efc:	4b0f      	ldr	r3, [pc, #60]	; (8006f3c <MX_USART1_UART_Init+0x58>)
 8006efe:	2200      	movs	r2, #0
 8006f00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006f02:	4b0e      	ldr	r3, [pc, #56]	; (8006f3c <MX_USART1_UART_Init+0x58>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006f08:	4b0c      	ldr	r3, [pc, #48]	; (8006f3c <MX_USART1_UART_Init+0x58>)
 8006f0a:	220c      	movs	r2, #12
 8006f0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f0e:	4b0b      	ldr	r3, [pc, #44]	; (8006f3c <MX_USART1_UART_Init+0x58>)
 8006f10:	2200      	movs	r2, #0
 8006f12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f14:	4b09      	ldr	r3, [pc, #36]	; (8006f3c <MX_USART1_UART_Init+0x58>)
 8006f16:	2200      	movs	r2, #0
 8006f18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006f1a:	4b08      	ldr	r3, [pc, #32]	; (8006f3c <MX_USART1_UART_Init+0x58>)
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006f20:	4b06      	ldr	r3, [pc, #24]	; (8006f3c <MX_USART1_UART_Init+0x58>)
 8006f22:	2200      	movs	r2, #0
 8006f24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006f26:	4805      	ldr	r0, [pc, #20]	; (8006f3c <MX_USART1_UART_Init+0x58>)
 8006f28:	f7fe fa3e 	bl	80053a8 <HAL_UART_Init>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d001      	beq.n	8006f36 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8006f32:	f000 fb53 	bl	80075dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006f36:	bf00      	nop
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	20000408 	.word	0x20000408
 8006f40:	40011000 	.word	0x40011000

08006f44 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b088      	sub	sp, #32
 8006f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8006f4a:	1d3b      	adds	r3, r7, #4
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	601a      	str	r2, [r3, #0]
 8006f50:	605a      	str	r2, [r3, #4]
 8006f52:	609a      	str	r2, [r3, #8]
 8006f54:	60da      	str	r2, [r3, #12]
 8006f56:	611a      	str	r2, [r3, #16]
 8006f58:	615a      	str	r2, [r3, #20]
 8006f5a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8006f5c:	4b1f      	ldr	r3, [pc, #124]	; (8006fdc <MX_FMC_Init+0x98>)
 8006f5e:	4a20      	ldr	r2, [pc, #128]	; (8006fe0 <MX_FMC_Init+0x9c>)
 8006f60:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8006f62:	4b1e      	ldr	r3, [pc, #120]	; (8006fdc <MX_FMC_Init+0x98>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8006f68:	4b1c      	ldr	r3, [pc, #112]	; (8006fdc <MX_FMC_Init+0x98>)
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8006f6e:	4b1b      	ldr	r3, [pc, #108]	; (8006fdc <MX_FMC_Init+0x98>)
 8006f70:	2204      	movs	r2, #4
 8006f72:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8006f74:	4b19      	ldr	r3, [pc, #100]	; (8006fdc <MX_FMC_Init+0x98>)
 8006f76:	2210      	movs	r2, #16
 8006f78:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006f7a:	4b18      	ldr	r3, [pc, #96]	; (8006fdc <MX_FMC_Init+0x98>)
 8006f7c:	2240      	movs	r2, #64	; 0x40
 8006f7e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8006f80:	4b16      	ldr	r3, [pc, #88]	; (8006fdc <MX_FMC_Init+0x98>)
 8006f82:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8006f86:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006f88:	4b14      	ldr	r3, [pc, #80]	; (8006fdc <MX_FMC_Init+0x98>)
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8006f8e:	4b13      	ldr	r3, [pc, #76]	; (8006fdc <MX_FMC_Init+0x98>)
 8006f90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f94:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8006f96:	4b11      	ldr	r3, [pc, #68]	; (8006fdc <MX_FMC_Init+0x98>)
 8006f98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006f9c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8006f9e:	4b0f      	ldr	r3, [pc, #60]	; (8006fdc <MX_FMC_Init+0x98>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8006fa8:	2307      	movs	r3, #7
 8006faa:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8006fac:	2304      	movs	r3, #4
 8006fae:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8006fb0:	2307      	movs	r3, #7
 8006fb2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8006fb8:	2302      	movs	r3, #2
 8006fba:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8006fc0:	1d3b      	adds	r3, r7, #4
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	4805      	ldr	r0, [pc, #20]	; (8006fdc <MX_FMC_Init+0x98>)
 8006fc6:	f7fe f970 	bl	80052aa <HAL_SDRAM_Init>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d001      	beq.n	8006fd4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8006fd0:	f000 fb04 	bl	80075dc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8006fd4:	bf00      	nop
 8006fd6:	3720      	adds	r7, #32
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	200004e8 	.word	0x200004e8
 8006fe0:	a0000140 	.word	0xa0000140

08006fe4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b090      	sub	sp, #64	; 0x40
 8006fe8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006fee:	2200      	movs	r2, #0
 8006ff0:	601a      	str	r2, [r3, #0]
 8006ff2:	605a      	str	r2, [r3, #4]
 8006ff4:	609a      	str	r2, [r3, #8]
 8006ff6:	60da      	str	r2, [r3, #12]
 8006ff8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006ffa:	4bae      	ldr	r3, [pc, #696]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 8006ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffe:	4aad      	ldr	r2, [pc, #692]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 8007000:	f043 0310 	orr.w	r3, r3, #16
 8007004:	6313      	str	r3, [r2, #48]	; 0x30
 8007006:	4bab      	ldr	r3, [pc, #684]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 8007008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700a:	f003 0310 	and.w	r3, r3, #16
 800700e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007010:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007012:	4ba8      	ldr	r3, [pc, #672]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 8007014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007016:	4aa7      	ldr	r2, [pc, #668]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 8007018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800701c:	6313      	str	r3, [r2, #48]	; 0x30
 800701e:	4ba5      	ldr	r3, [pc, #660]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 8007020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007026:	627b      	str	r3, [r7, #36]	; 0x24
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800702a:	4ba2      	ldr	r3, [pc, #648]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 800702c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702e:	4aa1      	ldr	r2, [pc, #644]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 8007030:	f043 0302 	orr.w	r3, r3, #2
 8007034:	6313      	str	r3, [r2, #48]	; 0x30
 8007036:	4b9f      	ldr	r3, [pc, #636]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 8007038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	623b      	str	r3, [r7, #32]
 8007040:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007042:	4b9c      	ldr	r3, [pc, #624]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 8007044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007046:	4a9b      	ldr	r2, [pc, #620]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 8007048:	f043 0308 	orr.w	r3, r3, #8
 800704c:	6313      	str	r3, [r2, #48]	; 0x30
 800704e:	4b99      	ldr	r3, [pc, #612]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 8007050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007052:	f003 0308 	and.w	r3, r3, #8
 8007056:	61fb      	str	r3, [r7, #28]
 8007058:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800705a:	4b96      	ldr	r3, [pc, #600]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 800705c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705e:	4a95      	ldr	r2, [pc, #596]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 8007060:	f043 0304 	orr.w	r3, r3, #4
 8007064:	6313      	str	r3, [r2, #48]	; 0x30
 8007066:	4b93      	ldr	r3, [pc, #588]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 8007068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706a:	f003 0304 	and.w	r3, r3, #4
 800706e:	61bb      	str	r3, [r7, #24]
 8007070:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007072:	4b90      	ldr	r3, [pc, #576]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 8007074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007076:	4a8f      	ldr	r2, [pc, #572]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 8007078:	f043 0301 	orr.w	r3, r3, #1
 800707c:	6313      	str	r3, [r2, #48]	; 0x30
 800707e:	4b8d      	ldr	r3, [pc, #564]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 8007080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	617b      	str	r3, [r7, #20]
 8007088:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800708a:	4b8a      	ldr	r3, [pc, #552]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 800708c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708e:	4a89      	ldr	r2, [pc, #548]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 8007090:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007094:	6313      	str	r3, [r2, #48]	; 0x30
 8007096:	4b87      	ldr	r3, [pc, #540]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 8007098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800709e:	613b      	str	r3, [r7, #16]
 80070a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80070a2:	4b84      	ldr	r3, [pc, #528]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 80070a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a6:	4a83      	ldr	r2, [pc, #524]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 80070a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070ac:	6313      	str	r3, [r2, #48]	; 0x30
 80070ae:	4b81      	ldr	r3, [pc, #516]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 80070b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b6:	60fb      	str	r3, [r7, #12]
 80070b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80070ba:	4b7e      	ldr	r3, [pc, #504]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 80070bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070be:	4a7d      	ldr	r2, [pc, #500]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 80070c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80070c4:	6313      	str	r3, [r2, #48]	; 0x30
 80070c6:	4b7b      	ldr	r3, [pc, #492]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 80070c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070ce:	60bb      	str	r3, [r7, #8]
 80070d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80070d2:	4b78      	ldr	r3, [pc, #480]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 80070d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d6:	4a77      	ldr	r2, [pc, #476]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 80070d8:	f043 0320 	orr.w	r3, r3, #32
 80070dc:	6313      	str	r3, [r2, #48]	; 0x30
 80070de:	4b75      	ldr	r3, [pc, #468]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 80070e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e2:	f003 0320 	and.w	r3, r3, #32
 80070e6:	607b      	str	r3, [r7, #4]
 80070e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80070ea:	4b72      	ldr	r3, [pc, #456]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 80070ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ee:	4a71      	ldr	r2, [pc, #452]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 80070f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070f4:	6313      	str	r3, [r2, #48]	; 0x30
 80070f6:	4b6f      	ldr	r3, [pc, #444]	; (80072b4 <MX_GPIO_Init+0x2d0>)
 80070f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fe:	603b      	str	r3, [r7, #0]
 8007100:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8007102:	2201      	movs	r2, #1
 8007104:	2120      	movs	r1, #32
 8007106:	486c      	ldr	r0, [pc, #432]	; (80072b8 <MX_GPIO_Init+0x2d4>)
 8007108:	f7fb fa18 	bl	800253c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800710c:	2200      	movs	r2, #0
 800710e:	210c      	movs	r1, #12
 8007110:	486a      	ldr	r0, [pc, #424]	; (80072bc <MX_GPIO_Init+0x2d8>)
 8007112:	f7fb fa13 	bl	800253c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8007116:	2201      	movs	r2, #1
 8007118:	2108      	movs	r1, #8
 800711a:	4869      	ldr	r0, [pc, #420]	; (80072c0 <MX_GPIO_Init+0x2dc>)
 800711c:	f7fb fa0e 	bl	800253c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8007120:	2201      	movs	r2, #1
 8007122:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007126:	4865      	ldr	r0, [pc, #404]	; (80072bc <MX_GPIO_Init+0x2d8>)
 8007128:	f7fb fa08 	bl	800253c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800712c:	2200      	movs	r2, #0
 800712e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007132:	4864      	ldr	r0, [pc, #400]	; (80072c4 <MX_GPIO_Init+0x2e0>)
 8007134:	f7fb fa02 	bl	800253c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8007138:	2200      	movs	r2, #0
 800713a:	21c8      	movs	r1, #200	; 0xc8
 800713c:	4862      	ldr	r0, [pc, #392]	; (80072c8 <MX_GPIO_Init+0x2e4>)
 800713e:	f7fb f9fd 	bl	800253c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8007142:	2308      	movs	r3, #8
 8007144:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007146:	2300      	movs	r3, #0
 8007148:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800714a:	2300      	movs	r3, #0
 800714c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800714e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007152:	4619      	mov	r1, r3
 8007154:	485d      	ldr	r0, [pc, #372]	; (80072cc <MX_GPIO_Init+0x2e8>)
 8007156:	f7fb f847 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800715a:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800715e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007160:	2302      	movs	r3, #2
 8007162:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007164:	2300      	movs	r3, #0
 8007166:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007168:	2303      	movs	r3, #3
 800716a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800716c:	230b      	movs	r3, #11
 800716e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007170:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007174:	4619      	mov	r1, r3
 8007176:	4854      	ldr	r0, [pc, #336]	; (80072c8 <MX_GPIO_Init+0x2e4>)
 8007178:	f7fb f836 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800717c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007180:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007182:	2312      	movs	r3, #18
 8007184:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007186:	2301      	movs	r3, #1
 8007188:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800718a:	2300      	movs	r3, #0
 800718c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800718e:	2304      	movs	r3, #4
 8007190:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007192:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007196:	4619      	mov	r1, r3
 8007198:	484d      	ldr	r0, [pc, #308]	; (80072d0 <MX_GPIO_Init+0x2ec>)
 800719a:	f7fb f825 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 800719e:	f643 4323 	movw	r3, #15395	; 0x3c23
 80071a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071a4:	2302      	movs	r3, #2
 80071a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071a8:	2300      	movs	r3, #0
 80071aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071ac:	2303      	movs	r3, #3
 80071ae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80071b0:	230a      	movs	r3, #10
 80071b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80071b8:	4619      	mov	r1, r3
 80071ba:	4845      	ldr	r0, [pc, #276]	; (80072d0 <MX_GPIO_Init+0x2ec>)
 80071bc:	f7fb f814 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80071c0:	2310      	movs	r3, #16
 80071c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071c4:	2302      	movs	r3, #2
 80071c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071c8:	2300      	movs	r3, #0
 80071ca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071cc:	2300      	movs	r3, #0
 80071ce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80071d0:	2302      	movs	r3, #2
 80071d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80071d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80071d8:	4619      	mov	r1, r3
 80071da:	483d      	ldr	r0, [pc, #244]	; (80072d0 <MX_GPIO_Init+0x2ec>)
 80071dc:	f7fb f804 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80071e0:	2380      	movs	r3, #128	; 0x80
 80071e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071e4:	2302      	movs	r3, #2
 80071e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071e8:	2300      	movs	r3, #0
 80071ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071ec:	2300      	movs	r3, #0
 80071ee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80071f0:	2308      	movs	r3, #8
 80071f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80071f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80071f8:	4619      	mov	r1, r3
 80071fa:	482f      	ldr	r0, [pc, #188]	; (80072b8 <MX_GPIO_Init+0x2d4>)
 80071fc:	f7fa fff4 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8007200:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007204:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007206:	2302      	movs	r3, #2
 8007208:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800720a:	2300      	movs	r3, #0
 800720c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800720e:	2300      	movs	r3, #0
 8007210:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007212:	2301      	movs	r3, #1
 8007214:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8007216:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800721a:	4619      	mov	r1, r3
 800721c:	482d      	ldr	r0, [pc, #180]	; (80072d4 <MX_GPIO_Init+0x2f0>)
 800721e:	f7fa ffe3 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8007222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007226:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007228:	2300      	movs	r3, #0
 800722a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800722c:	2300      	movs	r3, #0
 800722e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8007230:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007234:	4619      	mov	r1, r3
 8007236:	4828      	ldr	r0, [pc, #160]	; (80072d8 <MX_GPIO_Init+0x2f4>)
 8007238:	f7fa ffd6 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800723c:	2340      	movs	r3, #64	; 0x40
 800723e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8007240:	4b26      	ldr	r3, [pc, #152]	; (80072dc <MX_GPIO_Init+0x2f8>)
 8007242:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007244:	2300      	movs	r3, #0
 8007246:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8007248:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800724c:	4619      	mov	r1, r3
 800724e:	481a      	ldr	r0, [pc, #104]	; (80072b8 <MX_GPIO_Init+0x2d4>)
 8007250:	f7fa ffca 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8007254:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007258:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800725a:	2302      	movs	r3, #2
 800725c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800725e:	2300      	movs	r3, #0
 8007260:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007262:	2303      	movs	r3, #3
 8007264:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007266:	230a      	movs	r3, #10
 8007268:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800726a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800726e:	4619      	mov	r1, r3
 8007270:	4818      	ldr	r0, [pc, #96]	; (80072d4 <MX_GPIO_Init+0x2f0>)
 8007272:	f7fa ffb9 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8007276:	23f0      	movs	r3, #240	; 0xf0
 8007278:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800727a:	2302      	movs	r3, #2
 800727c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800727e:	2300      	movs	r3, #0
 8007280:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007282:	2300      	movs	r3, #0
 8007284:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8007286:	230a      	movs	r3, #10
 8007288:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800728a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800728e:	4619      	mov	r1, r3
 8007290:	480a      	ldr	r0, [pc, #40]	; (80072bc <MX_GPIO_Init+0x2d8>)
 8007292:	f7fa ffa9 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8007296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800729a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800729c:	2302      	movs	r3, #2
 800729e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072a0:	2300      	movs	r3, #0
 80072a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072a4:	2300      	movs	r3, #0
 80072a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80072a8:	230a      	movs	r3, #10
 80072aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80072ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80072b0:	4619      	mov	r1, r3
 80072b2:	e015      	b.n	80072e0 <MX_GPIO_Init+0x2fc>
 80072b4:	40023800 	.word	0x40023800
 80072b8:	40020c00 	.word	0x40020c00
 80072bc:	40022000 	.word	0x40022000
 80072c0:	40022800 	.word	0x40022800
 80072c4:	40021c00 	.word	0x40021c00
 80072c8:	40021800 	.word	0x40021800
 80072cc:	40021000 	.word	0x40021000
 80072d0:	40020400 	.word	0x40020400
 80072d4:	40020000 	.word	0x40020000
 80072d8:	40022400 	.word	0x40022400
 80072dc:	10120000 	.word	0x10120000
 80072e0:	48b4      	ldr	r0, [pc, #720]	; (80075b4 <MX_GPIO_Init+0x5d0>)
 80072e2:	f7fa ff81 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80072e6:	2320      	movs	r3, #32
 80072e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072ea:	2301      	movs	r3, #1
 80072ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072ee:	2300      	movs	r3, #0
 80072f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072f2:	2300      	movs	r3, #0
 80072f4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80072f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80072fa:	4619      	mov	r1, r3
 80072fc:	48ae      	ldr	r0, [pc, #696]	; (80075b8 <MX_GPIO_Init+0x5d4>)
 80072fe:	f7fa ff73 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8007302:	f241 030c 	movw	r3, #4108	; 0x100c
 8007306:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007308:	2301      	movs	r3, #1
 800730a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800730c:	2300      	movs	r3, #0
 800730e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007310:	2300      	movs	r3, #0
 8007312:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8007314:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007318:	4619      	mov	r1, r3
 800731a:	48a8      	ldr	r0, [pc, #672]	; (80075bc <MX_GPIO_Init+0x5d8>)
 800731c:	f7fa ff64 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8007320:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007324:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007326:	2300      	movs	r3, #0
 8007328:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800732a:	2300      	movs	r3, #0
 800732c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800732e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007332:	4619      	mov	r1, r3
 8007334:	48a2      	ldr	r0, [pc, #648]	; (80075c0 <MX_GPIO_Init+0x5dc>)
 8007336:	f7fa ff57 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800733a:	2308      	movs	r3, #8
 800733c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800733e:	2301      	movs	r3, #1
 8007340:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007342:	2300      	movs	r3, #0
 8007344:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007346:	2300      	movs	r3, #0
 8007348:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800734a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800734e:	4619      	mov	r1, r3
 8007350:	489c      	ldr	r0, [pc, #624]	; (80075c4 <MX_GPIO_Init+0x5e0>)
 8007352:	f7fa ff49 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8007356:	2310      	movs	r3, #16
 8007358:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800735a:	2300      	movs	r3, #0
 800735c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800735e:	2300      	movs	r3, #0
 8007360:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8007362:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007366:	4619      	mov	r1, r3
 8007368:	4893      	ldr	r0, [pc, #588]	; (80075b8 <MX_GPIO_Init+0x5d4>)
 800736a:	f7fa ff3d 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800736e:	f248 0304 	movw	r3, #32772	; 0x8004
 8007372:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007374:	2300      	movs	r3, #0
 8007376:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007378:	2300      	movs	r3, #0
 800737a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800737c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007380:	4619      	mov	r1, r3
 8007382:	4891      	ldr	r0, [pc, #580]	; (80075c8 <MX_GPIO_Init+0x5e4>)
 8007384:	f7fa ff30 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8007388:	2302      	movs	r3, #2
 800738a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800738c:	2302      	movs	r3, #2
 800738e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007390:	2300      	movs	r3, #0
 8007392:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007394:	2300      	movs	r3, #0
 8007396:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007398:	2305      	movs	r3, #5
 800739a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800739c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80073a0:	4619      	mov	r1, r3
 80073a2:	4886      	ldr	r0, [pc, #536]	; (80075bc <MX_GPIO_Init+0x5d8>)
 80073a4:	f7fa ff20 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80073a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80073ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80073ae:	2301      	movs	r3, #1
 80073b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073b2:	2300      	movs	r3, #0
 80073b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073b6:	2300      	movs	r3, #0
 80073b8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80073ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80073be:	4619      	mov	r1, r3
 80073c0:	4881      	ldr	r0, [pc, #516]	; (80075c8 <MX_GPIO_Init+0x5e4>)
 80073c2:	f7fa ff11 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80073c6:	2301      	movs	r3, #1
 80073c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073ca:	2302      	movs	r3, #2
 80073cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073ce:	2300      	movs	r3, #0
 80073d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073d2:	2300      	movs	r3, #0
 80073d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80073d6:	2302      	movs	r3, #2
 80073d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80073da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80073de:	4619      	mov	r1, r3
 80073e0:	4876      	ldr	r0, [pc, #472]	; (80075bc <MX_GPIO_Init+0x5d8>)
 80073e2:	f7fa ff01 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80073e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073ec:	2302      	movs	r3, #2
 80073ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073f0:	2300      	movs	r3, #0
 80073f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073f4:	2300      	movs	r3, #0
 80073f6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80073f8:	2301      	movs	r3, #1
 80073fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80073fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007400:	4619      	mov	r1, r3
 8007402:	4872      	ldr	r0, [pc, #456]	; (80075cc <MX_GPIO_Init+0x5e8>)
 8007404:	f7fa fef0 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8007408:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800740c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800740e:	4b70      	ldr	r3, [pc, #448]	; (80075d0 <MX_GPIO_Init+0x5ec>)
 8007410:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007412:	2300      	movs	r3, #0
 8007414:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8007416:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800741a:	4619      	mov	r1, r3
 800741c:	4867      	ldr	r0, [pc, #412]	; (80075bc <MX_GPIO_Init+0x5d8>)
 800741e:	f7fa fee3 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8007422:	23c0      	movs	r3, #192	; 0xc0
 8007424:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007426:	2302      	movs	r3, #2
 8007428:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800742a:	2300      	movs	r3, #0
 800742c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800742e:	2303      	movs	r3, #3
 8007430:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007432:	2308      	movs	r3, #8
 8007434:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007436:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800743a:	4619      	mov	r1, r3
 800743c:	4860      	ldr	r0, [pc, #384]	; (80075c0 <MX_GPIO_Init+0x5dc>)
 800743e:	f7fa fed3 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8007442:	2310      	movs	r3, #16
 8007444:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007446:	2302      	movs	r3, #2
 8007448:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800744a:	2300      	movs	r3, #0
 800744c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800744e:	2303      	movs	r3, #3
 8007450:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8007452:	230a      	movs	r3, #10
 8007454:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8007456:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800745a:	4619      	mov	r1, r3
 800745c:	485a      	ldr	r0, [pc, #360]	; (80075c8 <MX_GPIO_Init+0x5e4>)
 800745e:	f7fa fec3 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8007462:	23c8      	movs	r3, #200	; 0xc8
 8007464:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007466:	2301      	movs	r3, #1
 8007468:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800746a:	2300      	movs	r3, #0
 800746c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800746e:	2300      	movs	r3, #0
 8007470:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007472:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007476:	4619      	mov	r1, r3
 8007478:	484e      	ldr	r0, [pc, #312]	; (80075b4 <MX_GPIO_Init+0x5d0>)
 800747a:	f7fa feb5 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin 
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 800747e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8007482:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007484:	2303      	movs	r3, #3
 8007486:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007488:	2300      	movs	r3, #0
 800748a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800748c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007490:	4619      	mov	r1, r3
 8007492:	4850      	ldr	r0, [pc, #320]	; (80075d4 <MX_GPIO_Init+0x5f0>)
 8007494:	f7fa fea8 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8007498:	2305      	movs	r3, #5
 800749a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800749c:	2302      	movs	r3, #2
 800749e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074a0:	2300      	movs	r3, #0
 80074a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074a4:	2303      	movs	r3, #3
 80074a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80074a8:	230a      	movs	r3, #10
 80074aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80074ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80074b0:	4619      	mov	r1, r3
 80074b2:	4843      	ldr	r0, [pc, #268]	; (80075c0 <MX_GPIO_Init+0x5dc>)
 80074b4:	f7fa fe98 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80074b8:	2332      	movs	r3, #50	; 0x32
 80074ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074bc:	2302      	movs	r3, #2
 80074be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074c0:	2300      	movs	r3, #0
 80074c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074c4:	2303      	movs	r3, #3
 80074c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80074c8:	230b      	movs	r3, #11
 80074ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80074cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80074d0:	4619      	mov	r1, r3
 80074d2:	483b      	ldr	r0, [pc, #236]	; (80075c0 <MX_GPIO_Init+0x5dc>)
 80074d4:	f7fa fe88 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80074d8:	2304      	movs	r3, #4
 80074da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80074dc:	2300      	movs	r3, #0
 80074de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074e0:	2300      	movs	r3, #0
 80074e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80074e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80074e8:	4619      	mov	r1, r3
 80074ea:	4832      	ldr	r0, [pc, #200]	; (80075b4 <MX_GPIO_Init+0x5d0>)
 80074ec:	f7fa fe7c 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80074f0:	2386      	movs	r3, #134	; 0x86
 80074f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074f4:	2302      	movs	r3, #2
 80074f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074f8:	2300      	movs	r3, #0
 80074fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074fc:	2303      	movs	r3, #3
 80074fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007500:	230b      	movs	r3, #11
 8007502:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007504:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007508:	4619      	mov	r1, r3
 800750a:	4830      	ldr	r0, [pc, #192]	; (80075cc <MX_GPIO_Init+0x5e8>)
 800750c:	f7fa fe6c 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8007510:	2301      	movs	r3, #1
 8007512:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007514:	2303      	movs	r3, #3
 8007516:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007518:	2300      	movs	r3, #0
 800751a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800751c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007520:	4619      	mov	r1, r3
 8007522:	482a      	ldr	r0, [pc, #168]	; (80075cc <MX_GPIO_Init+0x5e8>)
 8007524:	f7fa fe60 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8007528:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800752c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800752e:	2312      	movs	r3, #18
 8007530:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007532:	2301      	movs	r3, #1
 8007534:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007536:	2303      	movs	r3, #3
 8007538:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800753a:	2304      	movs	r3, #4
 800753c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800753e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007542:	4619      	mov	r1, r3
 8007544:	4820      	ldr	r0, [pc, #128]	; (80075c8 <MX_GPIO_Init+0x5e4>)
 8007546:	f7fa fe4f 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800754a:	2328      	movs	r3, #40	; 0x28
 800754c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800754e:	2302      	movs	r3, #2
 8007550:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007552:	2300      	movs	r3, #0
 8007554:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007556:	2303      	movs	r3, #3
 8007558:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800755a:	230a      	movs	r3, #10
 800755c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800755e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007562:	4619      	mov	r1, r3
 8007564:	4819      	ldr	r0, [pc, #100]	; (80075cc <MX_GPIO_Init+0x5e8>)
 8007566:	f7fa fe3f 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800756a:	2340      	movs	r3, #64	; 0x40
 800756c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800756e:	2302      	movs	r3, #2
 8007570:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007572:	2300      	movs	r3, #0
 8007574:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007576:	2300      	movs	r3, #0
 8007578:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800757a:	2309      	movs	r3, #9
 800757c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800757e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007582:	4619      	mov	r1, r3
 8007584:	4810      	ldr	r0, [pc, #64]	; (80075c8 <MX_GPIO_Init+0x5e4>)
 8007586:	f7fa fe2f 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800758a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800758e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007590:	2302      	movs	r3, #2
 8007592:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007594:	2300      	movs	r3, #0
 8007596:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007598:	2300      	movs	r3, #0
 800759a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800759c:	2305      	movs	r3, #5
 800759e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80075a4:	4619      	mov	r1, r3
 80075a6:	480c      	ldr	r0, [pc, #48]	; (80075d8 <MX_GPIO_Init+0x5f4>)
 80075a8:	f7fa fe1e 	bl	80021e8 <HAL_GPIO_Init>

}
 80075ac:	bf00      	nop
 80075ae:	3740      	adds	r7, #64	; 0x40
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	40021800 	.word	0x40021800
 80075b8:	40020c00 	.word	0x40020c00
 80075bc:	40022000 	.word	0x40022000
 80075c0:	40020800 	.word	0x40020800
 80075c4:	40022800 	.word	0x40022800
 80075c8:	40021c00 	.word	0x40021c00
 80075cc:	40020000 	.word	0x40020000
 80075d0:	10120000 	.word	0x10120000
 80075d4:	40021400 	.word	0x40021400
 80075d8:	40020400 	.word	0x40020400

080075dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80075dc:	b480      	push	{r7}
 80075de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80075e0:	bf00      	nop
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
	...

080075ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80075f2:	4b0f      	ldr	r3, [pc, #60]	; (8007630 <HAL_MspInit+0x44>)
 80075f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f6:	4a0e      	ldr	r2, [pc, #56]	; (8007630 <HAL_MspInit+0x44>)
 80075f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075fc:	6413      	str	r3, [r2, #64]	; 0x40
 80075fe:	4b0c      	ldr	r3, [pc, #48]	; (8007630 <HAL_MspInit+0x44>)
 8007600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007606:	607b      	str	r3, [r7, #4]
 8007608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800760a:	4b09      	ldr	r3, [pc, #36]	; (8007630 <HAL_MspInit+0x44>)
 800760c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800760e:	4a08      	ldr	r2, [pc, #32]	; (8007630 <HAL_MspInit+0x44>)
 8007610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007614:	6453      	str	r3, [r2, #68]	; 0x44
 8007616:	4b06      	ldr	r3, [pc, #24]	; (8007630 <HAL_MspInit+0x44>)
 8007618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800761a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800761e:	603b      	str	r3, [r7, #0]
 8007620:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007622:	bf00      	nop
 8007624:	370c      	adds	r7, #12
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	40023800 	.word	0x40023800

08007634 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b08e      	sub	sp, #56	; 0x38
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800763c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007640:	2200      	movs	r2, #0
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	605a      	str	r2, [r3, #4]
 8007646:	609a      	str	r2, [r3, #8]
 8007648:	60da      	str	r2, [r3, #12]
 800764a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a50      	ldr	r2, [pc, #320]	; (8007794 <HAL_DCMI_MspInit+0x160>)
 8007652:	4293      	cmp	r3, r2
 8007654:	f040 809a 	bne.w	800778c <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8007658:	4b4f      	ldr	r3, [pc, #316]	; (8007798 <HAL_DCMI_MspInit+0x164>)
 800765a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800765c:	4a4e      	ldr	r2, [pc, #312]	; (8007798 <HAL_DCMI_MspInit+0x164>)
 800765e:	f043 0301 	orr.w	r3, r3, #1
 8007662:	6353      	str	r3, [r2, #52]	; 0x34
 8007664:	4b4c      	ldr	r3, [pc, #304]	; (8007798 <HAL_DCMI_MspInit+0x164>)
 8007666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007668:	f003 0301 	and.w	r3, r3, #1
 800766c:	623b      	str	r3, [r7, #32]
 800766e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007670:	4b49      	ldr	r3, [pc, #292]	; (8007798 <HAL_DCMI_MspInit+0x164>)
 8007672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007674:	4a48      	ldr	r2, [pc, #288]	; (8007798 <HAL_DCMI_MspInit+0x164>)
 8007676:	f043 0310 	orr.w	r3, r3, #16
 800767a:	6313      	str	r3, [r2, #48]	; 0x30
 800767c:	4b46      	ldr	r3, [pc, #280]	; (8007798 <HAL_DCMI_MspInit+0x164>)
 800767e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007680:	f003 0310 	and.w	r3, r3, #16
 8007684:	61fb      	str	r3, [r7, #28]
 8007686:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007688:	4b43      	ldr	r3, [pc, #268]	; (8007798 <HAL_DCMI_MspInit+0x164>)
 800768a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768c:	4a42      	ldr	r2, [pc, #264]	; (8007798 <HAL_DCMI_MspInit+0x164>)
 800768e:	f043 0308 	orr.w	r3, r3, #8
 8007692:	6313      	str	r3, [r2, #48]	; 0x30
 8007694:	4b40      	ldr	r3, [pc, #256]	; (8007798 <HAL_DCMI_MspInit+0x164>)
 8007696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007698:	f003 0308 	and.w	r3, r3, #8
 800769c:	61bb      	str	r3, [r7, #24]
 800769e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80076a0:	4b3d      	ldr	r3, [pc, #244]	; (8007798 <HAL_DCMI_MspInit+0x164>)
 80076a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a4:	4a3c      	ldr	r2, [pc, #240]	; (8007798 <HAL_DCMI_MspInit+0x164>)
 80076a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076aa:	6313      	str	r3, [r2, #48]	; 0x30
 80076ac:	4b3a      	ldr	r3, [pc, #232]	; (8007798 <HAL_DCMI_MspInit+0x164>)
 80076ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b4:	617b      	str	r3, [r7, #20]
 80076b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80076b8:	4b37      	ldr	r3, [pc, #220]	; (8007798 <HAL_DCMI_MspInit+0x164>)
 80076ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076bc:	4a36      	ldr	r2, [pc, #216]	; (8007798 <HAL_DCMI_MspInit+0x164>)
 80076be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076c2:	6313      	str	r3, [r2, #48]	; 0x30
 80076c4:	4b34      	ldr	r3, [pc, #208]	; (8007798 <HAL_DCMI_MspInit+0x164>)
 80076c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076cc:	613b      	str	r3, [r7, #16]
 80076ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076d0:	4b31      	ldr	r3, [pc, #196]	; (8007798 <HAL_DCMI_MspInit+0x164>)
 80076d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d4:	4a30      	ldr	r2, [pc, #192]	; (8007798 <HAL_DCMI_MspInit+0x164>)
 80076d6:	f043 0301 	orr.w	r3, r3, #1
 80076da:	6313      	str	r3, [r2, #48]	; 0x30
 80076dc:	4b2e      	ldr	r3, [pc, #184]	; (8007798 <HAL_DCMI_MspInit+0x164>)
 80076de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e0:	f003 0301 	and.w	r3, r3, #1
 80076e4:	60fb      	str	r3, [r7, #12]
 80076e6:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80076e8:	2360      	movs	r3, #96	; 0x60
 80076ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076ec:	2302      	movs	r3, #2
 80076ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076f0:	2300      	movs	r3, #0
 80076f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076f4:	2300      	movs	r3, #0
 80076f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80076f8:	230d      	movs	r3, #13
 80076fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80076fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007700:	4619      	mov	r1, r3
 8007702:	4826      	ldr	r0, [pc, #152]	; (800779c <HAL_DCMI_MspInit+0x168>)
 8007704:	f7fa fd70 	bl	80021e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8007708:	2308      	movs	r3, #8
 800770a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800770c:	2302      	movs	r3, #2
 800770e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007710:	2300      	movs	r3, #0
 8007712:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007714:	2300      	movs	r3, #0
 8007716:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8007718:	230d      	movs	r3, #13
 800771a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800771c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007720:	4619      	mov	r1, r3
 8007722:	481f      	ldr	r0, [pc, #124]	; (80077a0 <HAL_DCMI_MspInit+0x16c>)
 8007724:	f7fa fd60 	bl	80021e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8007728:	f44f 7300 	mov.w	r3, #512	; 0x200
 800772c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800772e:	2302      	movs	r3, #2
 8007730:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007732:	2300      	movs	r3, #0
 8007734:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007736:	2300      	movs	r3, #0
 8007738:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800773a:	230d      	movs	r3, #13
 800773c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800773e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007742:	4619      	mov	r1, r3
 8007744:	4817      	ldr	r0, [pc, #92]	; (80077a4 <HAL_DCMI_MspInit+0x170>)
 8007746:	f7fa fd4f 	bl	80021e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 800774a:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800774e:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007750:	2302      	movs	r3, #2
 8007752:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007754:	2300      	movs	r3, #0
 8007756:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007758:	2300      	movs	r3, #0
 800775a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800775c:	230d      	movs	r3, #13
 800775e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007764:	4619      	mov	r1, r3
 8007766:	4810      	ldr	r0, [pc, #64]	; (80077a8 <HAL_DCMI_MspInit+0x174>)
 8007768:	f7fa fd3e 	bl	80021e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800776c:	2350      	movs	r3, #80	; 0x50
 800776e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007770:	2302      	movs	r3, #2
 8007772:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007774:	2300      	movs	r3, #0
 8007776:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007778:	2300      	movs	r3, #0
 800777a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800777c:	230d      	movs	r3, #13
 800777e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007784:	4619      	mov	r1, r3
 8007786:	4809      	ldr	r0, [pc, #36]	; (80077ac <HAL_DCMI_MspInit+0x178>)
 8007788:	f7fa fd2e 	bl	80021e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800778c:	bf00      	nop
 800778e:	3738      	adds	r7, #56	; 0x38
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	50050000 	.word	0x50050000
 8007798:	40023800 	.word	0x40023800
 800779c:	40021000 	.word	0x40021000
 80077a0:	40020c00 	.word	0x40020c00
 80077a4:	40021800 	.word	0x40021800
 80077a8:	40021c00 	.word	0x40021c00
 80077ac:	40020000 	.word	0x40020000

080077b0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a0d      	ldr	r2, [pc, #52]	; (80077f4 <HAL_DMA2D_MspInit+0x44>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d113      	bne.n	80077ea <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80077c2:	4b0d      	ldr	r3, [pc, #52]	; (80077f8 <HAL_DMA2D_MspInit+0x48>)
 80077c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c6:	4a0c      	ldr	r2, [pc, #48]	; (80077f8 <HAL_DMA2D_MspInit+0x48>)
 80077c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80077cc:	6313      	str	r3, [r2, #48]	; 0x30
 80077ce:	4b0a      	ldr	r3, [pc, #40]	; (80077f8 <HAL_DMA2D_MspInit+0x48>)
 80077d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077d6:	60fb      	str	r3, [r7, #12]
 80077d8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80077da:	2200      	movs	r2, #0
 80077dc:	2100      	movs	r1, #0
 80077de:	205a      	movs	r0, #90	; 0x5a
 80077e0:	f7f9 ff01 	bl	80015e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80077e4:	205a      	movs	r0, #90	; 0x5a
 80077e6:	f7f9 ff1a 	bl	800161e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80077ea:	bf00      	nop
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	4002b000 	.word	0x4002b000
 80077f8:	40023800 	.word	0x40023800

080077fc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b08e      	sub	sp, #56	; 0x38
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007808:	2200      	movs	r2, #0
 800780a:	601a      	str	r2, [r3, #0]
 800780c:	605a      	str	r2, [r3, #4]
 800780e:	609a      	str	r2, [r3, #8]
 8007810:	60da      	str	r2, [r3, #12]
 8007812:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a55      	ldr	r2, [pc, #340]	; (8007970 <HAL_LTDC_MspInit+0x174>)
 800781a:	4293      	cmp	r3, r2
 800781c:	f040 80a3 	bne.w	8007966 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8007820:	4b54      	ldr	r3, [pc, #336]	; (8007974 <HAL_LTDC_MspInit+0x178>)
 8007822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007824:	4a53      	ldr	r2, [pc, #332]	; (8007974 <HAL_LTDC_MspInit+0x178>)
 8007826:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800782a:	6453      	str	r3, [r2, #68]	; 0x44
 800782c:	4b51      	ldr	r3, [pc, #324]	; (8007974 <HAL_LTDC_MspInit+0x178>)
 800782e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007830:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007834:	623b      	str	r3, [r7, #32]
 8007836:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007838:	4b4e      	ldr	r3, [pc, #312]	; (8007974 <HAL_LTDC_MspInit+0x178>)
 800783a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783c:	4a4d      	ldr	r2, [pc, #308]	; (8007974 <HAL_LTDC_MspInit+0x178>)
 800783e:	f043 0310 	orr.w	r3, r3, #16
 8007842:	6313      	str	r3, [r2, #48]	; 0x30
 8007844:	4b4b      	ldr	r3, [pc, #300]	; (8007974 <HAL_LTDC_MspInit+0x178>)
 8007846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007848:	f003 0310 	and.w	r3, r3, #16
 800784c:	61fb      	str	r3, [r7, #28]
 800784e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8007850:	4b48      	ldr	r3, [pc, #288]	; (8007974 <HAL_LTDC_MspInit+0x178>)
 8007852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007854:	4a47      	ldr	r2, [pc, #284]	; (8007974 <HAL_LTDC_MspInit+0x178>)
 8007856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800785a:	6313      	str	r3, [r2, #48]	; 0x30
 800785c:	4b45      	ldr	r3, [pc, #276]	; (8007974 <HAL_LTDC_MspInit+0x178>)
 800785e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007860:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007864:	61bb      	str	r3, [r7, #24]
 8007866:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8007868:	4b42      	ldr	r3, [pc, #264]	; (8007974 <HAL_LTDC_MspInit+0x178>)
 800786a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786c:	4a41      	ldr	r2, [pc, #260]	; (8007974 <HAL_LTDC_MspInit+0x178>)
 800786e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007872:	6313      	str	r3, [r2, #48]	; 0x30
 8007874:	4b3f      	ldr	r3, [pc, #252]	; (8007974 <HAL_LTDC_MspInit+0x178>)
 8007876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800787c:	617b      	str	r3, [r7, #20]
 800787e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007880:	4b3c      	ldr	r3, [pc, #240]	; (8007974 <HAL_LTDC_MspInit+0x178>)
 8007882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007884:	4a3b      	ldr	r2, [pc, #236]	; (8007974 <HAL_LTDC_MspInit+0x178>)
 8007886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800788a:	6313      	str	r3, [r2, #48]	; 0x30
 800788c:	4b39      	ldr	r3, [pc, #228]	; (8007974 <HAL_LTDC_MspInit+0x178>)
 800788e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007894:	613b      	str	r3, [r7, #16]
 8007896:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8007898:	4b36      	ldr	r3, [pc, #216]	; (8007974 <HAL_LTDC_MspInit+0x178>)
 800789a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789c:	4a35      	ldr	r2, [pc, #212]	; (8007974 <HAL_LTDC_MspInit+0x178>)
 800789e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078a2:	6313      	str	r3, [r2, #48]	; 0x30
 80078a4:	4b33      	ldr	r3, [pc, #204]	; (8007974 <HAL_LTDC_MspInit+0x178>)
 80078a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ac:	60fb      	str	r3, [r7, #12]
 80078ae:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80078b0:	2310      	movs	r3, #16
 80078b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078b4:	2302      	movs	r3, #2
 80078b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078b8:	2300      	movs	r3, #0
 80078ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078bc:	2300      	movs	r3, #0
 80078be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80078c0:	230e      	movs	r3, #14
 80078c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80078c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078c8:	4619      	mov	r1, r3
 80078ca:	482b      	ldr	r0, [pc, #172]	; (8007978 <HAL_LTDC_MspInit+0x17c>)
 80078cc:	f7fa fc8c 	bl	80021e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 80078d0:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80078d4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078d6:	2302      	movs	r3, #2
 80078d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078da:	2300      	movs	r3, #0
 80078dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078de:	2300      	movs	r3, #0
 80078e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80078e2:	230e      	movs	r3, #14
 80078e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80078e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078ea:	4619      	mov	r1, r3
 80078ec:	4823      	ldr	r0, [pc, #140]	; (800797c <HAL_LTDC_MspInit+0x180>)
 80078ee:	f7fa fc7b 	bl	80021e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 80078f2:	23f7      	movs	r3, #247	; 0xf7
 80078f4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078f6:	2302      	movs	r3, #2
 80078f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078fa:	2300      	movs	r3, #0
 80078fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078fe:	2300      	movs	r3, #0
 8007900:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007902:	230e      	movs	r3, #14
 8007904:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8007906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800790a:	4619      	mov	r1, r3
 800790c:	481c      	ldr	r0, [pc, #112]	; (8007980 <HAL_LTDC_MspInit+0x184>)
 800790e:	f7fa fc6b 	bl	80021e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8007912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007916:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007918:	2302      	movs	r3, #2
 800791a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800791c:	2300      	movs	r3, #0
 800791e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007920:	2300      	movs	r3, #0
 8007922:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8007924:	2309      	movs	r3, #9
 8007926:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8007928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800792c:	4619      	mov	r1, r3
 800792e:	4815      	ldr	r0, [pc, #84]	; (8007984 <HAL_LTDC_MspInit+0x188>)
 8007930:	f7fa fc5a 	bl	80021e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8007934:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8007938:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800793a:	2302      	movs	r3, #2
 800793c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800793e:	2300      	movs	r3, #0
 8007940:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007942:	2300      	movs	r3, #0
 8007944:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007946:	230e      	movs	r3, #14
 8007948:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800794a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800794e:	4619      	mov	r1, r3
 8007950:	480d      	ldr	r0, [pc, #52]	; (8007988 <HAL_LTDC_MspInit+0x18c>)
 8007952:	f7fa fc49 	bl	80021e8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8007956:	2200      	movs	r2, #0
 8007958:	2100      	movs	r1, #0
 800795a:	2058      	movs	r0, #88	; 0x58
 800795c:	f7f9 fe43 	bl	80015e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8007960:	2058      	movs	r0, #88	; 0x58
 8007962:	f7f9 fe5c 	bl	800161e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8007966:	bf00      	nop
 8007968:	3738      	adds	r7, #56	; 0x38
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	40016800 	.word	0x40016800
 8007974:	40023800 	.word	0x40023800
 8007978:	40021000 	.word	0x40021000
 800797c:	40022400 	.word	0x40022400
 8007980:	40022800 	.word	0x40022800
 8007984:	40021800 	.word	0x40021800
 8007988:	40022000 	.word	0x40022000

0800798c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b08c      	sub	sp, #48	; 0x30
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007994:	f107 031c 	add.w	r3, r7, #28
 8007998:	2200      	movs	r2, #0
 800799a:	601a      	str	r2, [r3, #0]
 800799c:	605a      	str	r2, [r3, #4]
 800799e:	609a      	str	r2, [r3, #8]
 80079a0:	60da      	str	r2, [r3, #12]
 80079a2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a3b      	ldr	r2, [pc, #236]	; (8007a98 <HAL_QSPI_MspInit+0x10c>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d170      	bne.n	8007a90 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80079ae:	4b3b      	ldr	r3, [pc, #236]	; (8007a9c <HAL_QSPI_MspInit+0x110>)
 80079b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b2:	4a3a      	ldr	r2, [pc, #232]	; (8007a9c <HAL_QSPI_MspInit+0x110>)
 80079b4:	f043 0302 	orr.w	r3, r3, #2
 80079b8:	6393      	str	r3, [r2, #56]	; 0x38
 80079ba:	4b38      	ldr	r3, [pc, #224]	; (8007a9c <HAL_QSPI_MspInit+0x110>)
 80079bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	61bb      	str	r3, [r7, #24]
 80079c4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80079c6:	4b35      	ldr	r3, [pc, #212]	; (8007a9c <HAL_QSPI_MspInit+0x110>)
 80079c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ca:	4a34      	ldr	r2, [pc, #208]	; (8007a9c <HAL_QSPI_MspInit+0x110>)
 80079cc:	f043 0310 	orr.w	r3, r3, #16
 80079d0:	6313      	str	r3, [r2, #48]	; 0x30
 80079d2:	4b32      	ldr	r3, [pc, #200]	; (8007a9c <HAL_QSPI_MspInit+0x110>)
 80079d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d6:	f003 0310 	and.w	r3, r3, #16
 80079da:	617b      	str	r3, [r7, #20]
 80079dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80079de:	4b2f      	ldr	r3, [pc, #188]	; (8007a9c <HAL_QSPI_MspInit+0x110>)
 80079e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e2:	4a2e      	ldr	r2, [pc, #184]	; (8007a9c <HAL_QSPI_MspInit+0x110>)
 80079e4:	f043 0302 	orr.w	r3, r3, #2
 80079e8:	6313      	str	r3, [r2, #48]	; 0x30
 80079ea:	4b2c      	ldr	r3, [pc, #176]	; (8007a9c <HAL_QSPI_MspInit+0x110>)
 80079ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ee:	f003 0302 	and.w	r3, r3, #2
 80079f2:	613b      	str	r3, [r7, #16]
 80079f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80079f6:	4b29      	ldr	r3, [pc, #164]	; (8007a9c <HAL_QSPI_MspInit+0x110>)
 80079f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fa:	4a28      	ldr	r2, [pc, #160]	; (8007a9c <HAL_QSPI_MspInit+0x110>)
 80079fc:	f043 0308 	orr.w	r3, r3, #8
 8007a00:	6313      	str	r3, [r2, #48]	; 0x30
 8007a02:	4b26      	ldr	r3, [pc, #152]	; (8007a9c <HAL_QSPI_MspInit+0x110>)
 8007a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a06:	f003 0308 	and.w	r3, r3, #8
 8007a0a:	60fb      	str	r3, [r7, #12]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8007a0e:	2304      	movs	r3, #4
 8007a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a12:	2302      	movs	r3, #2
 8007a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a16:	2300      	movs	r3, #0
 8007a18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8007a1e:	2309      	movs	r3, #9
 8007a20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8007a22:	f107 031c 	add.w	r3, r7, #28
 8007a26:	4619      	mov	r1, r3
 8007a28:	481d      	ldr	r0, [pc, #116]	; (8007aa0 <HAL_QSPI_MspInit+0x114>)
 8007a2a:	f7fa fbdd 	bl	80021e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8007a2e:	2340      	movs	r3, #64	; 0x40
 8007a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a32:	2302      	movs	r3, #2
 8007a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a36:	2300      	movs	r3, #0
 8007a38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8007a3e:	230a      	movs	r3, #10
 8007a40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8007a42:	f107 031c 	add.w	r3, r7, #28
 8007a46:	4619      	mov	r1, r3
 8007a48:	4816      	ldr	r0, [pc, #88]	; (8007aa4 <HAL_QSPI_MspInit+0x118>)
 8007a4a:	f7fa fbcd 	bl	80021e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007a4e:	2304      	movs	r3, #4
 8007a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a52:	2302      	movs	r3, #2
 8007a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a56:	2300      	movs	r3, #0
 8007a58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8007a5e:	2309      	movs	r3, #9
 8007a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a62:	f107 031c 	add.w	r3, r7, #28
 8007a66:	4619      	mov	r1, r3
 8007a68:	480e      	ldr	r0, [pc, #56]	; (8007aa4 <HAL_QSPI_MspInit+0x118>)
 8007a6a:	f7fa fbbd 	bl	80021e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8007a6e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a74:	2302      	movs	r3, #2
 8007a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8007a80:	2309      	movs	r3, #9
 8007a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007a84:	f107 031c 	add.w	r3, r7, #28
 8007a88:	4619      	mov	r1, r3
 8007a8a:	4807      	ldr	r0, [pc, #28]	; (8007aa8 <HAL_QSPI_MspInit+0x11c>)
 8007a8c:	f7fa fbac 	bl	80021e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8007a90:	bf00      	nop
 8007a92:	3730      	adds	r7, #48	; 0x30
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	a0001000 	.word	0xa0001000
 8007a9c:	40023800 	.word	0x40023800
 8007aa0:	40021000 	.word	0x40021000
 8007aa4:	40020400 	.word	0x40020400
 8007aa8:	40020c00 	.word	0x40020c00

08007aac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a07      	ldr	r2, [pc, #28]	; (8007ad8 <HAL_RTC_MspInit+0x2c>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d105      	bne.n	8007aca <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007abe:	4b07      	ldr	r3, [pc, #28]	; (8007adc <HAL_RTC_MspInit+0x30>)
 8007ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac2:	4a06      	ldr	r2, [pc, #24]	; (8007adc <HAL_RTC_MspInit+0x30>)
 8007ac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ac8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8007aca:	bf00      	nop
 8007acc:	370c      	adds	r7, #12
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	40002800 	.word	0x40002800
 8007adc:	40023800 	.word	0x40023800

08007ae0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b08a      	sub	sp, #40	; 0x28
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ae8:	f107 0314 	add.w	r3, r7, #20
 8007aec:	2200      	movs	r2, #0
 8007aee:	601a      	str	r2, [r3, #0]
 8007af0:	605a      	str	r2, [r3, #4]
 8007af2:	609a      	str	r2, [r3, #8]
 8007af4:	60da      	str	r2, [r3, #12]
 8007af6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a25      	ldr	r2, [pc, #148]	; (8007b94 <HAL_SD_MspInit+0xb4>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d144      	bne.n	8007b8c <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8007b02:	4b25      	ldr	r3, [pc, #148]	; (8007b98 <HAL_SD_MspInit+0xb8>)
 8007b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b06:	4a24      	ldr	r2, [pc, #144]	; (8007b98 <HAL_SD_MspInit+0xb8>)
 8007b08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8007b0e:	4b22      	ldr	r3, [pc, #136]	; (8007b98 <HAL_SD_MspInit+0xb8>)
 8007b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b16:	613b      	str	r3, [r7, #16]
 8007b18:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b1a:	4b1f      	ldr	r3, [pc, #124]	; (8007b98 <HAL_SD_MspInit+0xb8>)
 8007b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b1e:	4a1e      	ldr	r2, [pc, #120]	; (8007b98 <HAL_SD_MspInit+0xb8>)
 8007b20:	f043 0304 	orr.w	r3, r3, #4
 8007b24:	6313      	str	r3, [r2, #48]	; 0x30
 8007b26:	4b1c      	ldr	r3, [pc, #112]	; (8007b98 <HAL_SD_MspInit+0xb8>)
 8007b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b2a:	f003 0304 	and.w	r3, r3, #4
 8007b2e:	60fb      	str	r3, [r7, #12]
 8007b30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007b32:	4b19      	ldr	r3, [pc, #100]	; (8007b98 <HAL_SD_MspInit+0xb8>)
 8007b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b36:	4a18      	ldr	r2, [pc, #96]	; (8007b98 <HAL_SD_MspInit+0xb8>)
 8007b38:	f043 0308 	orr.w	r3, r3, #8
 8007b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8007b3e:	4b16      	ldr	r3, [pc, #88]	; (8007b98 <HAL_SD_MspInit+0xb8>)
 8007b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b42:	f003 0308 	and.w	r3, r3, #8
 8007b46:	60bb      	str	r3, [r7, #8]
 8007b48:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8007b4a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8007b4e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b50:	2302      	movs	r3, #2
 8007b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b54:	2300      	movs	r3, #0
 8007b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8007b5c:	230c      	movs	r3, #12
 8007b5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b60:	f107 0314 	add.w	r3, r7, #20
 8007b64:	4619      	mov	r1, r3
 8007b66:	480d      	ldr	r0, [pc, #52]	; (8007b9c <HAL_SD_MspInit+0xbc>)
 8007b68:	f7fa fb3e 	bl	80021e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8007b6c:	2304      	movs	r3, #4
 8007b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b70:	2302      	movs	r3, #2
 8007b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b74:	2300      	movs	r3, #0
 8007b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8007b7c:	230c      	movs	r3, #12
 8007b7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8007b80:	f107 0314 	add.w	r3, r7, #20
 8007b84:	4619      	mov	r1, r3
 8007b86:	4806      	ldr	r0, [pc, #24]	; (8007ba0 <HAL_SD_MspInit+0xc0>)
 8007b88:	f7fa fb2e 	bl	80021e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8007b8c:	bf00      	nop
 8007b8e:	3728      	adds	r7, #40	; 0x28
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	40012c00 	.word	0x40012c00
 8007b98:	40023800 	.word	0x40023800
 8007b9c:	40020800 	.word	0x40020800
 8007ba0:	40020c00 	.word	0x40020c00

08007ba4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b08a      	sub	sp, #40	; 0x28
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bac:	f107 0314 	add.w	r3, r7, #20
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	601a      	str	r2, [r3, #0]
 8007bb4:	605a      	str	r2, [r3, #4]
 8007bb6:	609a      	str	r2, [r3, #8]
 8007bb8:	60da      	str	r2, [r3, #12]
 8007bba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a25      	ldr	r2, [pc, #148]	; (8007c58 <HAL_UART_MspInit+0xb4>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d144      	bne.n	8007c50 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007bc6:	4b25      	ldr	r3, [pc, #148]	; (8007c5c <HAL_UART_MspInit+0xb8>)
 8007bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bca:	4a24      	ldr	r2, [pc, #144]	; (8007c5c <HAL_UART_MspInit+0xb8>)
 8007bcc:	f043 0310 	orr.w	r3, r3, #16
 8007bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8007bd2:	4b22      	ldr	r3, [pc, #136]	; (8007c5c <HAL_UART_MspInit+0xb8>)
 8007bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bd6:	f003 0310 	and.w	r3, r3, #16
 8007bda:	613b      	str	r3, [r7, #16]
 8007bdc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007bde:	4b1f      	ldr	r3, [pc, #124]	; (8007c5c <HAL_UART_MspInit+0xb8>)
 8007be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be2:	4a1e      	ldr	r2, [pc, #120]	; (8007c5c <HAL_UART_MspInit+0xb8>)
 8007be4:	f043 0302 	orr.w	r3, r3, #2
 8007be8:	6313      	str	r3, [r2, #48]	; 0x30
 8007bea:	4b1c      	ldr	r3, [pc, #112]	; (8007c5c <HAL_UART_MspInit+0xb8>)
 8007bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bee:	f003 0302 	and.w	r3, r3, #2
 8007bf2:	60fb      	str	r3, [r7, #12]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007bf6:	4b19      	ldr	r3, [pc, #100]	; (8007c5c <HAL_UART_MspInit+0xb8>)
 8007bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfa:	4a18      	ldr	r2, [pc, #96]	; (8007c5c <HAL_UART_MspInit+0xb8>)
 8007bfc:	f043 0301 	orr.w	r3, r3, #1
 8007c00:	6313      	str	r3, [r2, #48]	; 0x30
 8007c02:	4b16      	ldr	r3, [pc, #88]	; (8007c5c <HAL_UART_MspInit+0xb8>)
 8007c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	60bb      	str	r3, [r7, #8]
 8007c0c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8007c0e:	2380      	movs	r3, #128	; 0x80
 8007c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c12:	2302      	movs	r3, #2
 8007c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c16:	2300      	movs	r3, #0
 8007c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007c1e:	2307      	movs	r3, #7
 8007c20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8007c22:	f107 0314 	add.w	r3, r7, #20
 8007c26:	4619      	mov	r1, r3
 8007c28:	480d      	ldr	r0, [pc, #52]	; (8007c60 <HAL_UART_MspInit+0xbc>)
 8007c2a:	f7fa fadd 	bl	80021e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8007c2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c34:	2302      	movs	r3, #2
 8007c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007c40:	2307      	movs	r3, #7
 8007c42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8007c44:	f107 0314 	add.w	r3, r7, #20
 8007c48:	4619      	mov	r1, r3
 8007c4a:	4806      	ldr	r0, [pc, #24]	; (8007c64 <HAL_UART_MspInit+0xc0>)
 8007c4c:	f7fa facc 	bl	80021e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007c50:	bf00      	nop
 8007c52:	3728      	adds	r7, #40	; 0x28
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	40011000 	.word	0x40011000
 8007c5c:	40023800 	.word	0x40023800
 8007c60:	40020400 	.word	0x40020400
 8007c64:	40020000 	.word	0x40020000

08007c68 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b086      	sub	sp, #24
 8007c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8007c6e:	1d3b      	adds	r3, r7, #4
 8007c70:	2200      	movs	r2, #0
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	605a      	str	r2, [r3, #4]
 8007c76:	609a      	str	r2, [r3, #8]
 8007c78:	60da      	str	r2, [r3, #12]
 8007c7a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8007c7c:	4b3a      	ldr	r3, [pc, #232]	; (8007d68 <HAL_FMC_MspInit+0x100>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d16d      	bne.n	8007d60 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8007c84:	4b38      	ldr	r3, [pc, #224]	; (8007d68 <HAL_FMC_MspInit+0x100>)
 8007c86:	2201      	movs	r2, #1
 8007c88:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8007c8a:	4b38      	ldr	r3, [pc, #224]	; (8007d6c <HAL_FMC_MspInit+0x104>)
 8007c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8e:	4a37      	ldr	r2, [pc, #220]	; (8007d6c <HAL_FMC_MspInit+0x104>)
 8007c90:	f043 0301 	orr.w	r3, r3, #1
 8007c94:	6393      	str	r3, [r2, #56]	; 0x38
 8007c96:	4b35      	ldr	r3, [pc, #212]	; (8007d6c <HAL_FMC_MspInit+0x104>)
 8007c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	603b      	str	r3, [r7, #0]
 8007ca0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8007ca2:	f64f 7383 	movw	r3, #65411	; 0xff83
 8007ca6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ca8:	2302      	movs	r3, #2
 8007caa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cac:	2300      	movs	r3, #0
 8007cae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007cb4:	230c      	movs	r3, #12
 8007cb6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007cb8:	1d3b      	adds	r3, r7, #4
 8007cba:	4619      	mov	r1, r3
 8007cbc:	482c      	ldr	r0, [pc, #176]	; (8007d70 <HAL_FMC_MspInit+0x108>)
 8007cbe:	f7fa fa93 	bl	80021e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8007cc2:	f248 1333 	movw	r3, #33075	; 0x8133
 8007cc6:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cc8:	2302      	movs	r3, #2
 8007cca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007cd4:	230c      	movs	r3, #12
 8007cd6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007cd8:	1d3b      	adds	r3, r7, #4
 8007cda:	4619      	mov	r1, r3
 8007cdc:	4825      	ldr	r0, [pc, #148]	; (8007d74 <HAL_FMC_MspInit+0x10c>)
 8007cde:	f7fa fa83 	bl	80021e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8007ce2:	f24c 7303 	movw	r3, #50947	; 0xc703
 8007ce6:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ce8:	2302      	movs	r3, #2
 8007cea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cec:	2300      	movs	r3, #0
 8007cee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007cf4:	230c      	movs	r3, #12
 8007cf6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007cf8:	1d3b      	adds	r3, r7, #4
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	481e      	ldr	r0, [pc, #120]	; (8007d78 <HAL_FMC_MspInit+0x110>)
 8007cfe:	f7fa fa73 	bl	80021e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8007d02:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8007d06:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d08:	2302      	movs	r3, #2
 8007d0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d10:	2303      	movs	r3, #3
 8007d12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007d14:	230c      	movs	r3, #12
 8007d16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007d18:	1d3b      	adds	r3, r7, #4
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	4817      	ldr	r0, [pc, #92]	; (8007d7c <HAL_FMC_MspInit+0x114>)
 8007d1e:	f7fa fa63 	bl	80021e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8007d22:	2328      	movs	r3, #40	; 0x28
 8007d24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d26:	2302      	movs	r3, #2
 8007d28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007d32:	230c      	movs	r3, #12
 8007d34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007d36:	1d3b      	adds	r3, r7, #4
 8007d38:	4619      	mov	r1, r3
 8007d3a:	4811      	ldr	r0, [pc, #68]	; (8007d80 <HAL_FMC_MspInit+0x118>)
 8007d3c:	f7fa fa54 	bl	80021e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8007d40:	2308      	movs	r3, #8
 8007d42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d44:	2302      	movs	r3, #2
 8007d46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007d50:	230c      	movs	r3, #12
 8007d52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8007d54:	1d3b      	adds	r3, r7, #4
 8007d56:	4619      	mov	r1, r3
 8007d58:	480a      	ldr	r0, [pc, #40]	; (8007d84 <HAL_FMC_MspInit+0x11c>)
 8007d5a:	f7fa fa45 	bl	80021e8 <HAL_GPIO_Init>
 8007d5e:	e000      	b.n	8007d62 <HAL_FMC_MspInit+0xfa>
    return;
 8007d60:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8007d62:	3718      	adds	r7, #24
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	200001a8 	.word	0x200001a8
 8007d6c:	40023800 	.word	0x40023800
 8007d70:	40021000 	.word	0x40021000
 8007d74:	40021800 	.word	0x40021800
 8007d78:	40020c00 	.word	0x40020c00
 8007d7c:	40021400 	.word	0x40021400
 8007d80:	40021c00 	.word	0x40021c00
 8007d84:	40020800 	.word	0x40020800

08007d88 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8007d90:	f7ff ff6a 	bl	8007c68 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8007d94:	bf00      	nop
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <SysTick_Handler>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SysTick_Handler(void) {
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8007da0:	f7f9 fb04 	bl	80013ac <HAL_IncTick>
}
 8007da4:	bf00      	nop
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007da8:	b480      	push	{r7}
 8007daa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007dac:	bf00      	nop
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007db6:	b480      	push	{r7}
 8007db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007dba:	e7fe      	b.n	8007dba <HardFault_Handler+0x4>

08007dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007dc0:	e7fe      	b.n	8007dc0 <MemManage_Handler+0x4>

08007dc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007dc6:	e7fe      	b.n	8007dc6 <BusFault_Handler+0x4>

08007dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007dcc:	e7fe      	b.n	8007dcc <UsageFault_Handler+0x4>

08007dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007dd2:	bf00      	nop
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007de0:	bf00      	nop
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007dea:	b480      	push	{r7}
 8007dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007dee:	bf00      	nop
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8007dfc:	4802      	ldr	r0, [pc, #8]	; (8007e08 <LTDC_IRQHandler+0x10>)
 8007dfe:	f7fa fc87 	bl	8002710 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8007e02:	bf00      	nop
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	20000310 	.word	0x20000310

08007e0c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8007e10:	4802      	ldr	r0, [pc, #8]	; (8007e1c <DMA2D_IRQHandler+0x10>)
 8007e12:	f7f9 ffab 	bl	8001d6c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8007e16:	bf00      	nop
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	200004a8 	.word	0x200004a8

08007e20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007e20:	b480      	push	{r7}
 8007e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007e24:	4b15      	ldr	r3, [pc, #84]	; (8007e7c <SystemInit+0x5c>)
 8007e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e2a:	4a14      	ldr	r2, [pc, #80]	; (8007e7c <SystemInit+0x5c>)
 8007e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007e30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007e34:	4b12      	ldr	r3, [pc, #72]	; (8007e80 <SystemInit+0x60>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a11      	ldr	r2, [pc, #68]	; (8007e80 <SystemInit+0x60>)
 8007e3a:	f043 0301 	orr.w	r3, r3, #1
 8007e3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007e40:	4b0f      	ldr	r3, [pc, #60]	; (8007e80 <SystemInit+0x60>)
 8007e42:	2200      	movs	r2, #0
 8007e44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007e46:	4b0e      	ldr	r3, [pc, #56]	; (8007e80 <SystemInit+0x60>)
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	490d      	ldr	r1, [pc, #52]	; (8007e80 <SystemInit+0x60>)
 8007e4c:	4b0d      	ldr	r3, [pc, #52]	; (8007e84 <SystemInit+0x64>)
 8007e4e:	4013      	ands	r3, r2
 8007e50:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007e52:	4b0b      	ldr	r3, [pc, #44]	; (8007e80 <SystemInit+0x60>)
 8007e54:	4a0c      	ldr	r2, [pc, #48]	; (8007e88 <SystemInit+0x68>)
 8007e56:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007e58:	4b09      	ldr	r3, [pc, #36]	; (8007e80 <SystemInit+0x60>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a08      	ldr	r2, [pc, #32]	; (8007e80 <SystemInit+0x60>)
 8007e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e62:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007e64:	4b06      	ldr	r3, [pc, #24]	; (8007e80 <SystemInit+0x60>)
 8007e66:	2200      	movs	r2, #0
 8007e68:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007e6a:	4b04      	ldr	r3, [pc, #16]	; (8007e7c <SystemInit+0x5c>)
 8007e6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007e70:	609a      	str	r2, [r3, #8]
#endif
}
 8007e72:	bf00      	nop
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr
 8007e7c:	e000ed00 	.word	0xe000ed00
 8007e80:	40023800 	.word	0x40023800
 8007e84:	fef6ffff 	.word	0xfef6ffff
 8007e88:	24003010 	.word	0x24003010

08007e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007e8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007ec4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007e90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007e92:	e003      	b.n	8007e9c <LoopCopyDataInit>

08007e94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007e94:	4b0c      	ldr	r3, [pc, #48]	; (8007ec8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007e96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007e98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007e9a:	3104      	adds	r1, #4

08007e9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007e9c:	480b      	ldr	r0, [pc, #44]	; (8007ecc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007e9e:	4b0c      	ldr	r3, [pc, #48]	; (8007ed0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007ea0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007ea2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007ea4:	d3f6      	bcc.n	8007e94 <CopyDataInit>
  ldr  r2, =_sbss
 8007ea6:	4a0b      	ldr	r2, [pc, #44]	; (8007ed4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007ea8:	e002      	b.n	8007eb0 <LoopFillZerobss>

08007eaa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007eaa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007eac:	f842 3b04 	str.w	r3, [r2], #4

08007eb0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007eb0:	4b09      	ldr	r3, [pc, #36]	; (8007ed8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007eb2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007eb4:	d3f9      	bcc.n	8007eaa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007eb6:	f7ff ffb3 	bl	8007e20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007eba:	f000 f811 	bl	8007ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007ebe:	f7fe fd55 	bl	800696c <main>
  bx  lr    
 8007ec2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007ec4:	2004ffff 	.word	0x2004ffff
  ldr  r3, =_sidata
 8007ec8:	0800a858 	.word	0x0800a858
  ldr  r0, =_sdata
 8007ecc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007ed0:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 8007ed4:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 8007ed8:	20000568 	.word	0x20000568

08007edc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007edc:	e7fe      	b.n	8007edc <ADC_IRQHandler>
	...

08007ee0 <__libc_init_array>:
 8007ee0:	b570      	push	{r4, r5, r6, lr}
 8007ee2:	4e0d      	ldr	r6, [pc, #52]	; (8007f18 <__libc_init_array+0x38>)
 8007ee4:	4c0d      	ldr	r4, [pc, #52]	; (8007f1c <__libc_init_array+0x3c>)
 8007ee6:	1ba4      	subs	r4, r4, r6
 8007ee8:	10a4      	asrs	r4, r4, #2
 8007eea:	2500      	movs	r5, #0
 8007eec:	42a5      	cmp	r5, r4
 8007eee:	d109      	bne.n	8007f04 <__libc_init_array+0x24>
 8007ef0:	4e0b      	ldr	r6, [pc, #44]	; (8007f20 <__libc_init_array+0x40>)
 8007ef2:	4c0c      	ldr	r4, [pc, #48]	; (8007f24 <__libc_init_array+0x44>)
 8007ef4:	f000 f820 	bl	8007f38 <_init>
 8007ef8:	1ba4      	subs	r4, r4, r6
 8007efa:	10a4      	asrs	r4, r4, #2
 8007efc:	2500      	movs	r5, #0
 8007efe:	42a5      	cmp	r5, r4
 8007f00:	d105      	bne.n	8007f0e <__libc_init_array+0x2e>
 8007f02:	bd70      	pop	{r4, r5, r6, pc}
 8007f04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f08:	4798      	blx	r3
 8007f0a:	3501      	adds	r5, #1
 8007f0c:	e7ee      	b.n	8007eec <__libc_init_array+0xc>
 8007f0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f12:	4798      	blx	r3
 8007f14:	3501      	adds	r5, #1
 8007f16:	e7f2      	b.n	8007efe <__libc_init_array+0x1e>
 8007f18:	0800a850 	.word	0x0800a850
 8007f1c:	0800a850 	.word	0x0800a850
 8007f20:	0800a850 	.word	0x0800a850
 8007f24:	0800a854 	.word	0x0800a854

08007f28 <memset>:
 8007f28:	4402      	add	r2, r0
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d100      	bne.n	8007f32 <memset+0xa>
 8007f30:	4770      	bx	lr
 8007f32:	f803 1b01 	strb.w	r1, [r3], #1
 8007f36:	e7f9      	b.n	8007f2c <memset+0x4>

08007f38 <_init>:
 8007f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3a:	bf00      	nop
 8007f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f3e:	bc08      	pop	{r3}
 8007f40:	469e      	mov	lr, r3
 8007f42:	4770      	bx	lr

08007f44 <_fini>:
 8007f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f46:	bf00      	nop
 8007f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f4a:	bc08      	pop	{r3}
 8007f4c:	469e      	mov	lr, r3
 8007f4e:	4770      	bx	lr
