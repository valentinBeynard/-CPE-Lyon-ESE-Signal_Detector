
Signal_Detector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008de4  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ed8  08008fac  08008fac  00018fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce84  0800ce84  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce84  0800ce84  0001ce84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce8c  0800ce8c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce8c  0800ce8c  0001ce8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce90  0800ce90  0001ce90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800ce94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010e0  20000018  0800ceac  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010f8  0800ceac  000210f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022a9d  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c70  00000000  00000000  00042ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015c0  00000000  00000000  00046758  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001408  00000000  00000000  00047d18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006cb6  00000000  00000000  00049120  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015f41  00000000  00000000  0004fdd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011ba34  00000000  00000000  00065d17  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018174b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a70  00000000  00000000  001817c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000018 	.word	0x20000018
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008f94 	.word	0x08008f94

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000001c 	.word	0x2000001c
 8000204:	08008f94 	.word	0x08008f94

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800050c:	4b31      	ldr	r3, [pc, #196]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800050e:	2228      	movs	r2, #40	; 0x28
 8000510:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8000512:	4b30      	ldr	r3, [pc, #192]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000514:	2209      	movs	r2, #9
 8000516:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8000518:	4b2e      	ldr	r3, [pc, #184]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800051a:	2235      	movs	r2, #53	; 0x35
 800051c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800051e:	4b2d      	ldr	r3, [pc, #180]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000520:	220b      	movs	r2, #11
 8000522:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8000524:	4b2b      	ldr	r3, [pc, #172]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000526:	f240 121b 	movw	r2, #283	; 0x11b
 800052a:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800052c:	4b29      	ldr	r3, [pc, #164]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800052e:	f240 2215 	movw	r2, #533	; 0x215
 8000532:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8000534:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000536:	f240 121d 	movw	r2, #285	; 0x11d
 800053a:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800053c:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800053e:	f240 2235 	movw	r2, #565	; 0x235
 8000542:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8000544:	2100      	movs	r1, #0
 8000546:	4823      	ldr	r0, [pc, #140]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000548:	f000 fc52 	bl	8000df0 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800054c:	4b21      	ldr	r3, [pc, #132]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800054e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000552:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000556:	f44f 7288 	mov.w	r2, #272	; 0x110
 800055a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800055c:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800055e:	2200      	movs	r2, #0
 8000560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8000564:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000566:	2200      	movs	r2, #0
 8000568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 800056c:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800056e:	2200      	movs	r2, #0
 8000570:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000574:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000576:	2200      	movs	r2, #0
 8000578:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800057a:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000586:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800058e:	4a12      	ldr	r2, [pc, #72]	; (80005d8 <BSP_LCD_Init+0xd0>)
 8000590:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8000592:	4810      	ldr	r0, [pc, #64]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000594:	f003 fd70 	bl	8004078 <HAL_LTDC_GetState>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d103      	bne.n	80005a6 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800059e:	2100      	movs	r1, #0
 80005a0:	480c      	ldr	r0, [pc, #48]	; (80005d4 <BSP_LCD_Init+0xcc>)
 80005a2:	f000 fb4b 	bl	8000c3c <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80005a6:	480b      	ldr	r0, [pc, #44]	; (80005d4 <BSP_LCD_Init+0xcc>)
 80005a8:	f003 fb96 	bl	8003cd8 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b2:	480a      	ldr	r0, [pc, #40]	; (80005dc <BSP_LCD_Init+0xd4>)
 80005b4:	f001 ffb6 	bl	8002524 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	2108      	movs	r1, #8
 80005bc:	4808      	ldr	r0, [pc, #32]	; (80005e0 <BSP_LCD_Init+0xd8>)
 80005be:	f001 ffb1 	bl	8002524 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80005c2:	f000 fd79 	bl	80010b8 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80005c6:	4807      	ldr	r0, [pc, #28]	; (80005e4 <BSP_LCD_Init+0xdc>)
 80005c8:	f000 f8d8 	bl	800077c <BSP_LCD_SetFont>
  
  return LCD_OK;
 80005cc:	2300      	movs	r3, #0
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200001a8 	.word	0x200001a8
 80005d8:	40016800 	.word	0x40016800
 80005dc:	40022000 	.word	0x40022000
 80005e0:	40022800 	.word	0x40022800
 80005e4:	20000000 	.word	0x20000000

080005e8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <BSP_LCD_GetXSize+0x20>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a06      	ldr	r2, [pc, #24]	; (800060c <BSP_LCD_GetXSize+0x24>)
 80005f2:	2134      	movs	r1, #52	; 0x34
 80005f4:	fb01 f303 	mul.w	r3, r1, r3
 80005f8:	4413      	add	r3, r2
 80005fa:	3360      	adds	r3, #96	; 0x60
 80005fc:	681b      	ldr	r3, [r3, #0]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	20000074 	.word	0x20000074
 800060c:	200001a8 	.word	0x200001a8

08000610 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <BSP_LCD_GetYSize+0x20>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a06      	ldr	r2, [pc, #24]	; (8000634 <BSP_LCD_GetYSize+0x24>)
 800061a:	2134      	movs	r1, #52	; 0x34
 800061c:	fb01 f303 	mul.w	r3, r1, r3
 8000620:	4413      	add	r3, r2
 8000622:	3364      	adds	r3, #100	; 0x64
 8000624:	681b      	ldr	r3, [r3, #0]
}
 8000626:	4618      	mov	r0, r3
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	20000074 	.word	0x20000074
 8000634:	200001a8 	.word	0x200001a8

08000638 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8000638:	b580      	push	{r7, lr}
 800063a:	b090      	sub	sp, #64	; 0x40
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	6039      	str	r1, [r7, #0]
 8000642:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8000648:	f7ff ffce 	bl	80005e8 <BSP_LCD_GetXSize>
 800064c:	4603      	mov	r3, r0
 800064e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000654:	f7ff ffdc 	bl	8000610 <BSP_LCD_GetYSize>
 8000658:	4603      	mov	r3, r0
 800065a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8000664:	23ff      	movs	r3, #255	; 0xff
 8000666:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800067e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000684:	2307      	movs	r3, #7
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8000688:	f7ff ffae 	bl	80005e8 <BSP_LCD_GetXSize>
 800068c:	4603      	mov	r3, r0
 800068e:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8000690:	f7ff ffbe 	bl	8000610 <BSP_LCD_GetYSize>
 8000694:	4603      	mov	r3, r0
 8000696:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8000698:	88fa      	ldrh	r2, [r7, #6]
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	4619      	mov	r1, r3
 80006a0:	4812      	ldr	r0, [pc, #72]	; (80006ec <BSP_LCD_LayerDefaultInit+0xb4>)
 80006a2:	f003 fcab 	bl	8003ffc <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80006a6:	88fa      	ldrh	r2, [r7, #6]
 80006a8:	4911      	ldr	r1, [pc, #68]	; (80006f0 <BSP_LCD_LayerDefaultInit+0xb8>)
 80006aa:	4613      	mov	r3, r2
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	4413      	add	r3, r2
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	440b      	add	r3, r1
 80006b4:	3304      	adds	r3, #4
 80006b6:	f04f 32ff 	mov.w	r2, #4294967295
 80006ba:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80006bc:	88fa      	ldrh	r2, [r7, #6]
 80006be:	490c      	ldr	r1, [pc, #48]	; (80006f0 <BSP_LCD_LayerDefaultInit+0xb8>)
 80006c0:	4613      	mov	r3, r2
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	4413      	add	r3, r2
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	440b      	add	r3, r1
 80006ca:	3308      	adds	r3, #8
 80006cc:	4a09      	ldr	r2, [pc, #36]	; (80006f4 <BSP_LCD_LayerDefaultInit+0xbc>)
 80006ce:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80006d0:	88fa      	ldrh	r2, [r7, #6]
 80006d2:	4907      	ldr	r1, [pc, #28]	; (80006f0 <BSP_LCD_LayerDefaultInit+0xb8>)
 80006d4:	4613      	mov	r3, r2
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	4413      	add	r3, r2
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	440b      	add	r3, r1
 80006de:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80006e2:	601a      	str	r2, [r3, #0]
}
 80006e4:	bf00      	nop
 80006e6:	3740      	adds	r7, #64	; 0x40
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200001a8 	.word	0x200001a8
 80006f0:	20000078 	.word	0x20000078
 80006f4:	20000000 	.word	0x20000000

080006f8 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8000700:	4a04      	ldr	r2, [pc, #16]	; (8000714 <BSP_LCD_SelectLayer+0x1c>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6013      	str	r3, [r2, #0]
} 
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	20000074 	.word	0x20000074

08000718 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <BSP_LCD_SetTextColor+0x28>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4907      	ldr	r1, [pc, #28]	; (8000744 <BSP_LCD_SetTextColor+0x2c>)
 8000726:	4613      	mov	r3, r2
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	4413      	add	r3, r2
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	440b      	add	r3, r1
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	601a      	str	r2, [r3, #0]
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	20000074 	.word	0x20000074
 8000744:	20000078 	.word	0x20000078

08000748 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <BSP_LCD_SetBackColor+0x2c>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4908      	ldr	r1, [pc, #32]	; (8000778 <BSP_LCD_SetBackColor+0x30>)
 8000756:	4613      	mov	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	440b      	add	r3, r1
 8000760:	3304      	adds	r3, #4
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	601a      	str	r2, [r3, #0]
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	20000074 	.word	0x20000074
 8000778:	20000078 	.word	0x20000078

0800077c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <BSP_LCD_SetFont+0x2c>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4908      	ldr	r1, [pc, #32]	; (80007ac <BSP_LCD_SetFont+0x30>)
 800078a:	4613      	mov	r3, r2
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	4413      	add	r3, r2
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	440b      	add	r3, r1
 8000794:	3308      	adds	r3, #8
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	601a      	str	r2, [r3, #0]
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	20000074 	.word	0x20000074
 80007ac:	20000078 	.word	0x20000078

080007b0 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80007b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af02      	add	r7, sp, #8
 80007b6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <BSP_LCD_Clear+0x48>)
 80007ba:	681c      	ldr	r4, [r3, #0]
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <BSP_LCD_Clear+0x48>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <BSP_LCD_Clear+0x4c>)
 80007c2:	2134      	movs	r1, #52	; 0x34
 80007c4:	fb01 f303 	mul.w	r3, r1, r3
 80007c8:	4413      	add	r3, r2
 80007ca:	335c      	adds	r3, #92	; 0x5c
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	461d      	mov	r5, r3
 80007d0:	f7ff ff0a 	bl	80005e8 <BSP_LCD_GetXSize>
 80007d4:	4606      	mov	r6, r0
 80007d6:	f7ff ff1b 	bl	8000610 <BSP_LCD_GetYSize>
 80007da:	4602      	mov	r2, r0
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	9301      	str	r3, [sp, #4]
 80007e0:	2300      	movs	r3, #0
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	4613      	mov	r3, r2
 80007e6:	4632      	mov	r2, r6
 80007e8:	4629      	mov	r1, r5
 80007ea:	4620      	mov	r0, r4
 80007ec:	f000 fbd4 	bl	8000f98 <LL_FillBuffer>
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007f8:	20000074 	.word	0x20000074
 80007fc:	200001a8 	.word	0x200001a8

08000800 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	80fb      	strh	r3, [r7, #6]
 800080a:	460b      	mov	r3, r1
 800080c:	80bb      	strh	r3, [r7, #4]
 800080e:	4613      	mov	r3, r2
 8000810:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000812:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <BSP_LCD_DisplayChar+0x80>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	491b      	ldr	r1, [pc, #108]	; (8000884 <BSP_LCD_DisplayChar+0x84>)
 8000818:	4613      	mov	r3, r2
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	4413      	add	r3, r2
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	440b      	add	r3, r1
 8000822:	3308      	adds	r3, #8
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	6819      	ldr	r1, [r3, #0]
 8000828:	78fb      	ldrb	r3, [r7, #3]
 800082a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <BSP_LCD_DisplayChar+0x80>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	4c14      	ldr	r4, [pc, #80]	; (8000884 <BSP_LCD_DisplayChar+0x84>)
 8000834:	4613      	mov	r3, r2
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	4413      	add	r3, r2
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4423      	add	r3, r4
 800083e:	3308      	adds	r3, #8
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000844:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000848:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <BSP_LCD_DisplayChar+0x80>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4c0d      	ldr	r4, [pc, #52]	; (8000884 <BSP_LCD_DisplayChar+0x84>)
 800084e:	4613      	mov	r3, r2
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	4413      	add	r3, r2
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	4423      	add	r3, r4
 8000858:	3308      	adds	r3, #8
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	889b      	ldrh	r3, [r3, #4]
 800085e:	3307      	adds	r3, #7
 8000860:	2b00      	cmp	r3, #0
 8000862:	da00      	bge.n	8000866 <BSP_LCD_DisplayChar+0x66>
 8000864:	3307      	adds	r3, #7
 8000866:	10db      	asrs	r3, r3, #3
 8000868:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800086c:	18ca      	adds	r2, r1, r3
 800086e:	88b9      	ldrh	r1, [r7, #4]
 8000870:	88fb      	ldrh	r3, [r7, #6]
 8000872:	4618      	mov	r0, r3
 8000874:	f000 fad8 	bl	8000e28 <DrawChar>
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	bd90      	pop	{r4, r7, pc}
 8000880:	20000074 	.word	0x20000074
 8000884:	20000078 	.word	0x20000078

08000888 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8000888:	b5b0      	push	{r4, r5, r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0
 800088e:	60ba      	str	r2, [r7, #8]
 8000890:	461a      	mov	r2, r3
 8000892:	4603      	mov	r3, r0
 8000894:	81fb      	strh	r3, [r7, #14]
 8000896:	460b      	mov	r3, r1
 8000898:	81bb      	strh	r3, [r7, #12]
 800089a:	4613      	mov	r3, r2
 800089c:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800089e:	2301      	movs	r3, #1
 80008a0:	83fb      	strh	r3, [r7, #30]
 80008a2:	2300      	movs	r3, #0
 80008a4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80008b2:	e002      	b.n	80008ba <BSP_LCD_DisplayStringAt+0x32>
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	3301      	adds	r3, #1
 80008b8:	61bb      	str	r3, [r7, #24]
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	1c5a      	adds	r2, r3, #1
 80008be:	617a      	str	r2, [r7, #20]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d1f6      	bne.n	80008b4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80008c6:	f7ff fe8f 	bl	80005e8 <BSP_LCD_GetXSize>
 80008ca:	4b4f      	ldr	r3, [pc, #316]	; (8000a08 <BSP_LCD_DisplayStringAt+0x180>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	494f      	ldr	r1, [pc, #316]	; (8000a0c <BSP_LCD_DisplayStringAt+0x184>)
 80008d0:	4613      	mov	r3, r2
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	4413      	add	r3, r2
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	440b      	add	r3, r1
 80008da:	3308      	adds	r3, #8
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	889b      	ldrh	r3, [r3, #4]
 80008e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80008e4:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	d01c      	beq.n	8000926 <BSP_LCD_DisplayStringAt+0x9e>
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	d017      	beq.n	8000920 <BSP_LCD_DisplayStringAt+0x98>
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d12e      	bne.n	8000952 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	69bb      	ldr	r3, [r7, #24]
 80008f8:	1ad1      	subs	r1, r2, r3
 80008fa:	4b43      	ldr	r3, [pc, #268]	; (8000a08 <BSP_LCD_DisplayStringAt+0x180>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	4843      	ldr	r0, [pc, #268]	; (8000a0c <BSP_LCD_DisplayStringAt+0x184>)
 8000900:	4613      	mov	r3, r2
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	4413      	add	r3, r2
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	4403      	add	r3, r0
 800090a:	3308      	adds	r3, #8
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	889b      	ldrh	r3, [r3, #4]
 8000910:	fb03 f301 	mul.w	r3, r3, r1
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	b29a      	uxth	r2, r3
 8000918:	89fb      	ldrh	r3, [r7, #14]
 800091a:	4413      	add	r3, r2
 800091c:	83fb      	strh	r3, [r7, #30]
      break;
 800091e:	e01b      	b.n	8000958 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8000920:	89fb      	ldrh	r3, [r7, #14]
 8000922:	83fb      	strh	r3, [r7, #30]
      break;
 8000924:	e018      	b.n	8000958 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	b299      	uxth	r1, r3
 800092e:	4b36      	ldr	r3, [pc, #216]	; (8000a08 <BSP_LCD_DisplayStringAt+0x180>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	4836      	ldr	r0, [pc, #216]	; (8000a0c <BSP_LCD_DisplayStringAt+0x184>)
 8000934:	4613      	mov	r3, r2
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	4413      	add	r3, r2
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	4403      	add	r3, r0
 800093e:	3308      	adds	r3, #8
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	889b      	ldrh	r3, [r3, #4]
 8000944:	fb11 f303 	smulbb	r3, r1, r3
 8000948:	b29a      	uxth	r2, r3
 800094a:	89fb      	ldrh	r3, [r7, #14]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	83fb      	strh	r3, [r7, #30]
      break;
 8000950:	e002      	b.n	8000958 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 8000952:	89fb      	ldrh	r3, [r7, #14]
 8000954:	83fb      	strh	r3, [r7, #30]
      break;
 8000956:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8000958:	8bfb      	ldrh	r3, [r7, #30]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d003      	beq.n	8000966 <BSP_LCD_DisplayStringAt+0xde>
 800095e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000962:	2b00      	cmp	r3, #0
 8000964:	da1d      	bge.n	80009a2 <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8000966:	2301      	movs	r3, #1
 8000968:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800096a:	e01a      	b.n	80009a2 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	781a      	ldrb	r2, [r3, #0]
 8000970:	89b9      	ldrh	r1, [r7, #12]
 8000972:	8bfb      	ldrh	r3, [r7, #30]
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff43 	bl	8000800 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800097a:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <BSP_LCD_DisplayStringAt+0x180>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	4923      	ldr	r1, [pc, #140]	; (8000a0c <BSP_LCD_DisplayStringAt+0x184>)
 8000980:	4613      	mov	r3, r2
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	4413      	add	r3, r2
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	440b      	add	r3, r1
 800098a:	3308      	adds	r3, #8
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	889a      	ldrh	r2, [r3, #4]
 8000990:	8bfb      	ldrh	r3, [r7, #30]
 8000992:	4413      	add	r3, r2
 8000994:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	3301      	adds	r3, #1
 800099a:	60bb      	str	r3, [r7, #8]
    i++;
 800099c:	8bbb      	ldrh	r3, [r7, #28]
 800099e:	3301      	adds	r3, #1
 80009a0:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	bf14      	ite	ne
 80009aa:	2301      	movne	r3, #1
 80009ac:	2300      	moveq	r3, #0
 80009ae:	b2dc      	uxtb	r4, r3
 80009b0:	f7ff fe1a 	bl	80005e8 <BSP_LCD_GetXSize>
 80009b4:	4605      	mov	r5, r0
 80009b6:	8bb9      	ldrh	r1, [r7, #28]
 80009b8:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <BSP_LCD_DisplayStringAt+0x180>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4813      	ldr	r0, [pc, #76]	; (8000a0c <BSP_LCD_DisplayStringAt+0x184>)
 80009be:	4613      	mov	r3, r2
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	4413      	add	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	4403      	add	r3, r0
 80009c8:	3308      	adds	r3, #8
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	889b      	ldrh	r3, [r3, #4]
 80009ce:	fb03 f301 	mul.w	r3, r3, r1
 80009d2:	1aeb      	subs	r3, r5, r3
 80009d4:	b299      	uxth	r1, r3
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <BSP_LCD_DisplayStringAt+0x180>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	480c      	ldr	r0, [pc, #48]	; (8000a0c <BSP_LCD_DisplayStringAt+0x184>)
 80009dc:	4613      	mov	r3, r2
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	4413      	add	r3, r2
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	4403      	add	r3, r0
 80009e6:	3308      	adds	r3, #8
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	889b      	ldrh	r3, [r3, #4]
 80009ec:	4299      	cmp	r1, r3
 80009ee:	bf2c      	ite	cs
 80009f0:	2301      	movcs	r3, #1
 80009f2:	2300      	movcc	r3, #0
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	4023      	ands	r3, r4
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d1b6      	bne.n	800096c <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 80009fe:	bf00      	nop
 8000a00:	3720      	adds	r7, #32
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bdb0      	pop	{r4, r5, r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000074 	.word	0x20000074
 8000a0c:	20000078 	.word	0x20000078

08000a10 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8000a10:	b5b0      	push	{r4, r5, r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	603a      	str	r2, [r7, #0]
 8000a1a:	80fb      	strh	r3, [r7, #6]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000a20:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <BSP_LCD_DrawPixel+0x88>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a1d      	ldr	r2, [pc, #116]	; (8000a9c <BSP_LCD_DrawPixel+0x8c>)
 8000a26:	2134      	movs	r1, #52	; 0x34
 8000a28:	fb01 f303 	mul.w	r3, r1, r3
 8000a2c:	4413      	add	r3, r2
 8000a2e:	3348      	adds	r3, #72	; 0x48
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b02      	cmp	r3, #2
 8000a34:	d116      	bne.n	8000a64 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <BSP_LCD_DrawPixel+0x88>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a18      	ldr	r2, [pc, #96]	; (8000a9c <BSP_LCD_DrawPixel+0x8c>)
 8000a3c:	2134      	movs	r1, #52	; 0x34
 8000a3e:	fb01 f303 	mul.w	r3, r1, r3
 8000a42:	4413      	add	r3, r2
 8000a44:	335c      	adds	r3, #92	; 0x5c
 8000a46:	681c      	ldr	r4, [r3, #0]
 8000a48:	88bd      	ldrh	r5, [r7, #4]
 8000a4a:	f7ff fdcd 	bl	80005e8 <BSP_LCD_GetXSize>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	fb03 f205 	mul.w	r2, r3, r5
 8000a54:	88fb      	ldrh	r3, [r7, #6]
 8000a56:	4413      	add	r3, r2
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	4423      	add	r3, r4
 8000a5c:	683a      	ldr	r2, [r7, #0]
 8000a5e:	b292      	uxth	r2, r2
 8000a60:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8000a62:	e015      	b.n	8000a90 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <BSP_LCD_DrawPixel+0x88>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0c      	ldr	r2, [pc, #48]	; (8000a9c <BSP_LCD_DrawPixel+0x8c>)
 8000a6a:	2134      	movs	r1, #52	; 0x34
 8000a6c:	fb01 f303 	mul.w	r3, r1, r3
 8000a70:	4413      	add	r3, r2
 8000a72:	335c      	adds	r3, #92	; 0x5c
 8000a74:	681c      	ldr	r4, [r3, #0]
 8000a76:	88bd      	ldrh	r5, [r7, #4]
 8000a78:	f7ff fdb6 	bl	80005e8 <BSP_LCD_GetXSize>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	fb03 f205 	mul.w	r2, r3, r5
 8000a82:	88fb      	ldrh	r3, [r7, #6]
 8000a84:	4413      	add	r3, r2
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	4423      	add	r3, r4
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	6013      	str	r3, [r2, #0]
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bdb0      	pop	{r4, r5, r7, pc}
 8000a98:	20000074 	.word	0x20000074
 8000a9c:	200001a8 	.word	0x200001a8

08000aa0 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b08b      	sub	sp, #44	; 0x2c
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61bb      	str	r3, [r7, #24]
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	2300      	movs	r3, #0
 8000aba:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	330a      	adds	r3, #10
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	330b      	adds	r3, #11
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	021b      	lsls	r3, r3, #8
 8000ad0:	441a      	add	r2, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	330c      	adds	r3, #12
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	041b      	lsls	r3, r3, #16
 8000ada:	441a      	add	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	330d      	adds	r3, #13
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	061b      	lsls	r3, r3, #24
 8000ae4:	4413      	add	r3, r2
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3312      	adds	r3, #18
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	461a      	mov	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3313      	adds	r3, #19
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	021b      	lsls	r3, r3, #8
 8000af8:	441a      	add	r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	3314      	adds	r3, #20
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	041b      	lsls	r3, r3, #16
 8000b02:	441a      	add	r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3315      	adds	r3, #21
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	061b      	lsls	r3, r3, #24
 8000b0c:	4413      	add	r3, r2
 8000b0e:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3316      	adds	r3, #22
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	461a      	mov	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3317      	adds	r3, #23
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	021b      	lsls	r3, r3, #8
 8000b20:	441a      	add	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	3318      	adds	r3, #24
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	041b      	lsls	r3, r3, #16
 8000b2a:	441a      	add	r2, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3319      	adds	r3, #25
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	061b      	lsls	r3, r3, #24
 8000b34:	4413      	add	r3, r2
 8000b36:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	331c      	adds	r3, #28
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	331d      	adds	r3, #29
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	021b      	lsls	r3, r3, #8
 8000b48:	4413      	add	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8000b4c:	4b2a      	ldr	r3, [pc, #168]	; (8000bf8 <BSP_LCD_DrawBitmap+0x158>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a2a      	ldr	r2, [pc, #168]	; (8000bfc <BSP_LCD_DrawBitmap+0x15c>)
 8000b52:	2134      	movs	r1, #52	; 0x34
 8000b54:	fb01 f303 	mul.w	r3, r1, r3
 8000b58:	4413      	add	r3, r2
 8000b5a:	335c      	adds	r3, #92	; 0x5c
 8000b5c:	681c      	ldr	r4, [r3, #0]
 8000b5e:	f7ff fd43 	bl	80005e8 <BSP_LCD_GetXSize>
 8000b62:	4602      	mov	r2, r0
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	fb03 f202 	mul.w	r2, r3, r2
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	4423      	add	r3, r4
 8000b72:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	3b20      	subs	r3, #32
 8000b78:	2b07      	cmp	r3, #7
 8000b7a:	d802      	bhi.n	8000b82 <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61fb      	str	r3, [r7, #28]
 8000b80:	e008      	b.n	8000b94 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	3b10      	subs	r3, #16
 8000b86:	2b07      	cmp	r3, #7
 8000b88:	d802      	bhi.n	8000b90 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	61fb      	str	r3, [r7, #28]
 8000b8e:	e001      	b.n	8000b94 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8000b90:	2301      	movs	r3, #1
 8000b92:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	fb02 f303 	mul.w	r3, r2, r3
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	08d2      	lsrs	r2, r2, #3
 8000ba2:	fb02 f203 	mul.w	r2, r2, r3
 8000ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba8:	4413      	add	r3, r2
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8000bb4:	e018      	b.n	8000be8 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8000bb6:	6a39      	ldr	r1, [r7, #32]
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	69ba      	ldr	r2, [r7, #24]
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f000 fa37 	bl	8001030 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8000bc2:	f7ff fd11 	bl	80005e8 <BSP_LCD_GetXSize>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	6a3a      	ldr	r2, [r7, #32]
 8000bcc:	4413      	add	r3, r2
 8000bce:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	08db      	lsrs	r3, r3, #3
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	fb02 f303 	mul.w	r3, r2, r3
 8000bda:	425b      	negs	r3, r3
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	4413      	add	r3, r2
 8000be0:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8000be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be4:	3301      	adds	r3, #1
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
 8000be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d3e2      	bcc.n	8000bb6 <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8000bf0:	bf00      	nop
 8000bf2:	372c      	adds	r7, #44	; 0x2c
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd90      	pop	{r4, r7, pc}
 8000bf8:	20000074 	.word	0x20000074
 8000bfc:	200001a8 	.word	0x200001a8

08000c00 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8000c04:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <BSP_LCD_DisplayOn+0x30>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	699a      	ldr	r2, [r3, #24]
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <BSP_LCD_DisplayOn+0x30>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f042 0201 	orr.w	r2, r2, #1
 8000c12:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8000c14:	2201      	movs	r2, #1
 8000c16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c1a:	4806      	ldr	r0, [pc, #24]	; (8000c34 <BSP_LCD_DisplayOn+0x34>)
 8000c1c:	f001 fc82 	bl	8002524 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8000c20:	2201      	movs	r2, #1
 8000c22:	2108      	movs	r1, #8
 8000c24:	4804      	ldr	r0, [pc, #16]	; (8000c38 <BSP_LCD_DisplayOn+0x38>)
 8000c26:	f001 fc7d 	bl	8002524 <HAL_GPIO_WritePin>
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200001a8 	.word	0x200001a8
 8000c34:	40022000 	.word	0x40022000
 8000c38:	40022800 	.word	0x40022800

08000c3c <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b090      	sub	sp, #64	; 0x40
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000c46:	4b64      	ldr	r3, [pc, #400]	; (8000dd8 <BSP_LCD_MspInit+0x19c>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	4a63      	ldr	r2, [pc, #396]	; (8000dd8 <BSP_LCD_MspInit+0x19c>)
 8000c4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c50:	6453      	str	r3, [r2, #68]	; 0x44
 8000c52:	4b61      	ldr	r3, [pc, #388]	; (8000dd8 <BSP_LCD_MspInit+0x19c>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8000c5e:	4b5e      	ldr	r3, [pc, #376]	; (8000dd8 <BSP_LCD_MspInit+0x19c>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a5d      	ldr	r2, [pc, #372]	; (8000dd8 <BSP_LCD_MspInit+0x19c>)
 8000c64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b5b      	ldr	r3, [pc, #364]	; (8000dd8 <BSP_LCD_MspInit+0x19c>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
 8000c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c76:	4b58      	ldr	r3, [pc, #352]	; (8000dd8 <BSP_LCD_MspInit+0x19c>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a57      	ldr	r2, [pc, #348]	; (8000dd8 <BSP_LCD_MspInit+0x19c>)
 8000c7c:	f043 0310 	orr.w	r3, r3, #16
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b55      	ldr	r3, [pc, #340]	; (8000dd8 <BSP_LCD_MspInit+0x19c>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0310 	and.w	r3, r3, #16
 8000c8a:	623b      	str	r3, [r7, #32]
 8000c8c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c8e:	4b52      	ldr	r3, [pc, #328]	; (8000dd8 <BSP_LCD_MspInit+0x19c>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a51      	ldr	r2, [pc, #324]	; (8000dd8 <BSP_LCD_MspInit+0x19c>)
 8000c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b4f      	ldr	r3, [pc, #316]	; (8000dd8 <BSP_LCD_MspInit+0x19c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca2:	61fb      	str	r3, [r7, #28]
 8000ca4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ca6:	4b4c      	ldr	r3, [pc, #304]	; (8000dd8 <BSP_LCD_MspInit+0x19c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a4b      	ldr	r2, [pc, #300]	; (8000dd8 <BSP_LCD_MspInit+0x19c>)
 8000cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b49      	ldr	r3, [pc, #292]	; (8000dd8 <BSP_LCD_MspInit+0x19c>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cba:	61bb      	str	r3, [r7, #24]
 8000cbc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000cbe:	4b46      	ldr	r3, [pc, #280]	; (8000dd8 <BSP_LCD_MspInit+0x19c>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a45      	ldr	r2, [pc, #276]	; (8000dd8 <BSP_LCD_MspInit+0x19c>)
 8000cc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b43      	ldr	r3, [pc, #268]	; (8000dd8 <BSP_LCD_MspInit+0x19c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000cd6:	4b40      	ldr	r3, [pc, #256]	; (8000dd8 <BSP_LCD_MspInit+0x19c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a3f      	ldr	r2, [pc, #252]	; (8000dd8 <BSP_LCD_MspInit+0x19c>)
 8000cdc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b3d      	ldr	r3, [pc, #244]	; (8000dd8 <BSP_LCD_MspInit+0x19c>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8000cee:	4b3a      	ldr	r3, [pc, #232]	; (8000dd8 <BSP_LCD_MspInit+0x19c>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a39      	ldr	r2, [pc, #228]	; (8000dd8 <BSP_LCD_MspInit+0x19c>)
 8000cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b37      	ldr	r3, [pc, #220]	; (8000dd8 <BSP_LCD_MspInit+0x19c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8000d06:	4b34      	ldr	r3, [pc, #208]	; (8000dd8 <BSP_LCD_MspInit+0x19c>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a33      	ldr	r2, [pc, #204]	; (8000dd8 <BSP_LCD_MspInit+0x19c>)
 8000d0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b31      	ldr	r3, [pc, #196]	; (8000dd8 <BSP_LCD_MspInit+0x19c>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8000d1e:	2310      	movs	r3, #16
 8000d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8000d2e:	230e      	movs	r3, #14
 8000d30:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000d32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d36:	4619      	mov	r1, r3
 8000d38:	4828      	ldr	r0, [pc, #160]	; (8000ddc <BSP_LCD_MspInit+0x1a0>)
 8000d3a:	f001 fa49 	bl	80021d0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8000d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8000d48:	2309      	movs	r3, #9
 8000d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8000d4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d50:	4619      	mov	r1, r3
 8000d52:	4823      	ldr	r0, [pc, #140]	; (8000de0 <BSP_LCD_MspInit+0x1a4>)
 8000d54:	f001 fa3c 	bl	80021d0 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8000d58:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8000d62:	230e      	movs	r3, #14
 8000d64:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8000d66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	481d      	ldr	r0, [pc, #116]	; (8000de4 <BSP_LCD_MspInit+0x1a8>)
 8000d6e:	f001 fa2f 	bl	80021d0 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8000d72:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000d76:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8000d7c:	230e      	movs	r3, #14
 8000d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8000d80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d84:	4619      	mov	r1, r3
 8000d86:	4818      	ldr	r0, [pc, #96]	; (8000de8 <BSP_LCD_MspInit+0x1ac>)
 8000d88:	f001 fa22 	bl	80021d0 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8000d8c:	23f7      	movs	r3, #247	; 0xf7
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8000d94:	230e      	movs	r3, #14
 8000d96:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8000d98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4813      	ldr	r0, [pc, #76]	; (8000dec <BSP_LCD_MspInit+0x1b0>)
 8000da0:	f001 fa16 	bl	80021d0 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8000da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8000daa:	2301      	movs	r3, #1
 8000dac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8000dae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db2:	4619      	mov	r1, r3
 8000db4:	480b      	ldr	r0, [pc, #44]	; (8000de4 <BSP_LCD_MspInit+0x1a8>)
 8000db6:	f001 fa0b 	bl	80021d0 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8000dba:	2308      	movs	r3, #8
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8000dc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4808      	ldr	r0, [pc, #32]	; (8000dec <BSP_LCD_MspInit+0x1b0>)
 8000dca:	f001 fa01 	bl	80021d0 <HAL_GPIO_Init>
}
 8000dce:	bf00      	nop
 8000dd0:	3740      	adds	r7, #64	; 0x40
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40021800 	.word	0x40021800
 8000de4:	40022000 	.word	0x40022000
 8000de8:	40022400 	.word	0x40022400
 8000dec:	40022800 	.word	0x40022800

08000df0 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <BSP_LCD_ClockConfig+0x34>)
 8000dfc:	2208      	movs	r2, #8
 8000dfe:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <BSP_LCD_ClockConfig+0x34>)
 8000e02:	22c0      	movs	r2, #192	; 0xc0
 8000e04:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8000e06:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <BSP_LCD_ClockConfig+0x34>)
 8000e08:	2205      	movs	r2, #5
 8000e0a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <BSP_LCD_ClockConfig+0x34>)
 8000e0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e12:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8000e14:	4803      	ldr	r0, [pc, #12]	; (8000e24 <BSP_LCD_ClockConfig+0x34>)
 8000e16:	f003 ff75 	bl	8004d04 <HAL_RCCEx_PeriphCLKConfig>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000090 	.word	0x20000090

08000e28 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	603a      	str	r2, [r7, #0]
 8000e32:	80fb      	strh	r3, [r7, #6]
 8000e34:	460b      	mov	r3, r1
 8000e36:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8000e40:	4b53      	ldr	r3, [pc, #332]	; (8000f90 <DrawChar+0x168>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4953      	ldr	r1, [pc, #332]	; (8000f94 <DrawChar+0x16c>)
 8000e46:	4613      	mov	r3, r2
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	4413      	add	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	440b      	add	r3, r1
 8000e50:	3308      	adds	r3, #8
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	88db      	ldrh	r3, [r3, #6]
 8000e56:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8000e58:	4b4d      	ldr	r3, [pc, #308]	; (8000f90 <DrawChar+0x168>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	494d      	ldr	r1, [pc, #308]	; (8000f94 <DrawChar+0x16c>)
 8000e5e:	4613      	mov	r3, r2
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	4413      	add	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	440b      	add	r3, r1
 8000e68:	3308      	adds	r3, #8
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	889b      	ldrh	r3, [r3, #4]
 8000e6e:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8000e70:	8a3b      	ldrh	r3, [r7, #16]
 8000e72:	3307      	adds	r3, #7
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	da00      	bge.n	8000e7a <DrawChar+0x52>
 8000e78:	3307      	adds	r3, #7
 8000e7a:	10db      	asrs	r3, r3, #3
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	8a3b      	ldrh	r3, [r7, #16]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
 8000e8e:	e076      	b.n	8000f7e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8000e90:	8a3b      	ldrh	r3, [r7, #16]
 8000e92:	3307      	adds	r3, #7
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	da00      	bge.n	8000e9a <DrawChar+0x72>
 8000e98:	3307      	adds	r3, #7
 8000e9a:	10db      	asrs	r3, r3, #3
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	fb03 f302 	mul.w	r3, r3, r2
 8000ea4:	683a      	ldr	r2, [r7, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8000eaa:	8a3b      	ldrh	r3, [r7, #16]
 8000eac:	3307      	adds	r3, #7
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	da00      	bge.n	8000eb4 <DrawChar+0x8c>
 8000eb2:	3307      	adds	r3, #7
 8000eb4:	10db      	asrs	r3, r3, #3
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d002      	beq.n	8000ec0 <DrawChar+0x98>
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d004      	beq.n	8000ec8 <DrawChar+0xa0>
 8000ebe:	e00c      	b.n	8000eda <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	617b      	str	r3, [r7, #20]
      break;
 8000ec6:	e016      	b.n	8000ef6 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	021b      	lsls	r3, r3, #8
 8000ece:	68ba      	ldr	r2, [r7, #8]
 8000ed0:	3201      	adds	r2, #1
 8000ed2:	7812      	ldrb	r2, [r2, #0]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	617b      	str	r3, [r7, #20]
      break;
 8000ed8:	e00d      	b.n	8000ef6 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	041a      	lsls	r2, r3, #16
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	021b      	lsls	r3, r3, #8
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	3202      	adds	r2, #2
 8000eee:	7812      	ldrb	r2, [r2, #0]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	617b      	str	r3, [r7, #20]
      break;
 8000ef4:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
 8000efa:	e036      	b.n	8000f6a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8000efc:	8a3a      	ldrh	r2, [r7, #16]
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	1ad2      	subs	r2, r2, r3
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	4413      	add	r3, r2
 8000f06:	3b01      	subs	r3, #1
 8000f08:	2201      	movs	r2, #1
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	461a      	mov	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	4013      	ands	r3, r2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d012      	beq.n	8000f3e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	88fb      	ldrh	r3, [r7, #6]
 8000f1e:	4413      	add	r3, r2
 8000f20:	b298      	uxth	r0, r3
 8000f22:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <DrawChar+0x168>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	491b      	ldr	r1, [pc, #108]	; (8000f94 <DrawChar+0x16c>)
 8000f28:	4613      	mov	r3, r2
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	4413      	add	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	440b      	add	r3, r1
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	88bb      	ldrh	r3, [r7, #4]
 8000f36:	4619      	mov	r1, r3
 8000f38:	f7ff fd6a 	bl	8000a10 <BSP_LCD_DrawPixel>
 8000f3c:	e012      	b.n	8000f64 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	4413      	add	r3, r2
 8000f46:	b298      	uxth	r0, r3
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <DrawChar+0x168>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4911      	ldr	r1, [pc, #68]	; (8000f94 <DrawChar+0x16c>)
 8000f4e:	4613      	mov	r3, r2
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	4413      	add	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	440b      	add	r3, r1
 8000f58:	3304      	adds	r3, #4
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	88bb      	ldrh	r3, [r7, #4]
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f7ff fd56 	bl	8000a10 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	3301      	adds	r3, #1
 8000f68:	61bb      	str	r3, [r7, #24]
 8000f6a:	8a3b      	ldrh	r3, [r7, #16]
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d3c4      	bcc.n	8000efc <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8000f72:	88bb      	ldrh	r3, [r7, #4]
 8000f74:	3301      	adds	r3, #1
 8000f76:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	61fb      	str	r3, [r7, #28]
 8000f7e:	8a7b      	ldrh	r3, [r7, #18]
 8000f80:	69fa      	ldr	r2, [r7, #28]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d384      	bcc.n	8000e90 <DrawChar+0x68>
  }
}
 8000f86:	bf00      	nop
 8000f88:	3720      	adds	r7, #32
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000074 	.word	0x20000074
 8000f94:	20000078 	.word	0x20000078

08000f98 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
 8000fa4:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8000fa6:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <LL_FillBuffer+0x88>)
 8000fa8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fac:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000fae:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <LL_FillBuffer+0x8c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a1d      	ldr	r2, [pc, #116]	; (8001028 <LL_FillBuffer+0x90>)
 8000fb4:	2134      	movs	r1, #52	; 0x34
 8000fb6:	fb01 f303 	mul.w	r3, r1, r3
 8000fba:	4413      	add	r3, r2
 8000fbc:	3348      	adds	r3, #72	; 0x48
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d103      	bne.n	8000fcc <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8000fc4:	4b16      	ldr	r3, [pc, #88]	; (8001020 <LL_FillBuffer+0x88>)
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	e002      	b.n	8000fd2 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8000fcc:	4b14      	ldr	r3, [pc, #80]	; (8001020 <LL_FillBuffer+0x88>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8000fd2:	4a13      	ldr	r2, [pc, #76]	; (8001020 <LL_FillBuffer+0x88>)
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <LL_FillBuffer+0x88>)
 8000fda:	4a14      	ldr	r2, [pc, #80]	; (800102c <LL_FillBuffer+0x94>)
 8000fdc:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8000fde:	4810      	ldr	r0, [pc, #64]	; (8001020 <LL_FillBuffer+0x88>)
 8000fe0:	f000 fd5a 	bl	8001a98 <HAL_DMA2D_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d115      	bne.n	8001016 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8000fea:	68f9      	ldr	r1, [r7, #12]
 8000fec:	480c      	ldr	r0, [pc, #48]	; (8001020 <LL_FillBuffer+0x88>)
 8000fee:	f000 ffc1 	bl	8001f74 <HAL_DMA2D_ConfigLayer>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d10e      	bne.n	8001016 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8000ff8:	68ba      	ldr	r2, [r7, #8]
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69f9      	ldr	r1, [r7, #28]
 8001002:	4807      	ldr	r0, [pc, #28]	; (8001020 <LL_FillBuffer+0x88>)
 8001004:	f000 fd92 	bl	8001b2c <HAL_DMA2D_Start>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d103      	bne.n	8001016 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800100e:	210a      	movs	r1, #10
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <LL_FillBuffer+0x88>)
 8001012:	f000 fdb6 	bl	8001b82 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000034 	.word	0x20000034
 8001024:	20000074 	.word	0x20000074
 8001028:	200001a8 	.word	0x200001a8
 800102c:	4002b000 	.word	0x4002b000

08001030 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af02      	add	r7, sp, #8
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
 800103c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 800103e:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <LL_ConvertLineToARGB8888+0x80>)
 8001040:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001044:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001046:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <LL_ConvertLineToARGB8888+0x80>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 800104c:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <LL_ConvertLineToARGB8888+0x80>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001052:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <LL_ConvertLineToARGB8888+0x80>)
 8001054:	2200      	movs	r2, #0
 8001056:	631a      	str	r2, [r3, #48]	; 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8001058:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <LL_ConvertLineToARGB8888+0x80>)
 800105a:	22ff      	movs	r2, #255	; 0xff
 800105c:	635a      	str	r2, [r3, #52]	; 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 800105e:	4a14      	ldr	r2, [pc, #80]	; (80010b0 <LL_ConvertLineToARGB8888+0x80>)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	62d3      	str	r3, [r2, #44]	; 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <LL_ConvertLineToARGB8888+0x80>)
 8001066:	2200      	movs	r2, #0
 8001068:	629a      	str	r2, [r3, #40]	; 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <LL_ConvertLineToARGB8888+0x80>)
 800106c:	4a11      	ldr	r2, [pc, #68]	; (80010b4 <LL_ConvertLineToARGB8888+0x84>)
 800106e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001070:	480f      	ldr	r0, [pc, #60]	; (80010b0 <LL_ConvertLineToARGB8888+0x80>)
 8001072:	f000 fd11 	bl	8001a98 <HAL_DMA2D_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d115      	bne.n	80010a8 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 800107c:	2101      	movs	r1, #1
 800107e:	480c      	ldr	r0, [pc, #48]	; (80010b0 <LL_ConvertLineToARGB8888+0x80>)
 8001080:	f000 ff78 	bl	8001f74 <HAL_DMA2D_ConfigLayer>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d10e      	bne.n	80010a8 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 800108a:	68f9      	ldr	r1, [r7, #12]
 800108c:	68ba      	ldr	r2, [r7, #8]
 800108e:	2301      	movs	r3, #1
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4806      	ldr	r0, [pc, #24]	; (80010b0 <LL_ConvertLineToARGB8888+0x80>)
 8001096:	f000 fd49 	bl	8001b2c <HAL_DMA2D_Start>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d103      	bne.n	80010a8 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80010a0:	210a      	movs	r1, #10
 80010a2:	4803      	ldr	r0, [pc, #12]	; (80010b0 <LL_ConvertLineToARGB8888+0x80>)
 80010a4:	f000 fd6d 	bl	8001b82 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000034 	.word	0x20000034
 80010b4:	4002b000 	.word	0x4002b000

080010b8 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80010bc:	4b29      	ldr	r3, [pc, #164]	; (8001164 <BSP_SDRAM_Init+0xac>)
 80010be:	4a2a      	ldr	r2, [pc, #168]	; (8001168 <BSP_SDRAM_Init+0xb0>)
 80010c0:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80010c2:	4b2a      	ldr	r3, [pc, #168]	; (800116c <BSP_SDRAM_Init+0xb4>)
 80010c4:	2202      	movs	r2, #2
 80010c6:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80010c8:	4b28      	ldr	r3, [pc, #160]	; (800116c <BSP_SDRAM_Init+0xb4>)
 80010ca:	2207      	movs	r2, #7
 80010cc:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80010ce:	4b27      	ldr	r3, [pc, #156]	; (800116c <BSP_SDRAM_Init+0xb4>)
 80010d0:	2204      	movs	r2, #4
 80010d2:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80010d4:	4b25      	ldr	r3, [pc, #148]	; (800116c <BSP_SDRAM_Init+0xb4>)
 80010d6:	2207      	movs	r2, #7
 80010d8:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80010da:	4b24      	ldr	r3, [pc, #144]	; (800116c <BSP_SDRAM_Init+0xb4>)
 80010dc:	2202      	movs	r2, #2
 80010de:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80010e0:	4b22      	ldr	r3, [pc, #136]	; (800116c <BSP_SDRAM_Init+0xb4>)
 80010e2:	2202      	movs	r2, #2
 80010e4:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80010e6:	4b21      	ldr	r3, [pc, #132]	; (800116c <BSP_SDRAM_Init+0xb4>)
 80010e8:	2202      	movs	r2, #2
 80010ea:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80010ec:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <BSP_SDRAM_Init+0xac>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80010f2:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <BSP_SDRAM_Init+0xac>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <BSP_SDRAM_Init+0xac>)
 80010fa:	2204      	movs	r2, #4
 80010fc:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <BSP_SDRAM_Init+0xac>)
 8001100:	2210      	movs	r2, #16
 8001102:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001104:	4b17      	ldr	r3, [pc, #92]	; (8001164 <BSP_SDRAM_Init+0xac>)
 8001106:	2240      	movs	r2, #64	; 0x40
 8001108:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <BSP_SDRAM_Init+0xac>)
 800110c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001110:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001112:	4b14      	ldr	r3, [pc, #80]	; (8001164 <BSP_SDRAM_Init+0xac>)
 8001114:	2200      	movs	r2, #0
 8001116:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <BSP_SDRAM_Init+0xac>)
 800111a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800111e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001120:	4b10      	ldr	r3, [pc, #64]	; (8001164 <BSP_SDRAM_Init+0xac>)
 8001122:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001126:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <BSP_SDRAM_Init+0xac>)
 800112a:	2200      	movs	r2, #0
 800112c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800112e:	2100      	movs	r1, #0
 8001130:	480c      	ldr	r0, [pc, #48]	; (8001164 <BSP_SDRAM_Init+0xac>)
 8001132:	f000 f87f 	bl	8001234 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001136:	490d      	ldr	r1, [pc, #52]	; (800116c <BSP_SDRAM_Init+0xb4>)
 8001138:	480a      	ldr	r0, [pc, #40]	; (8001164 <BSP_SDRAM_Init+0xac>)
 800113a:	f004 f9d1 	bl	80054e0 <HAL_SDRAM_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001144:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <BSP_SDRAM_Init+0xb8>)
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]
 800114a:	e002      	b.n	8001152 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <BSP_SDRAM_Init+0xb8>)
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001152:	f240 6003 	movw	r0, #1539	; 0x603
 8001156:	f000 f80d 	bl	8001174 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800115a:	4b05      	ldr	r3, [pc, #20]	; (8001170 <BSP_SDRAM_Init+0xb8>)
 800115c:	781b      	ldrb	r3, [r3, #0]
}
 800115e:	4618      	mov	r0, r3
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000250 	.word	0x20000250
 8001168:	a0000140 	.word	0xa0000140
 800116c:	20000114 	.word	0x20000114
 8001170:	20000008 	.word	0x20000008

08001174 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001180:	4b2a      	ldr	r3, [pc, #168]	; (800122c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001182:	2201      	movs	r2, #1
 8001184:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001186:	4b29      	ldr	r3, [pc, #164]	; (800122c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001188:	2210      	movs	r2, #16
 800118a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800118c:	4b27      	ldr	r3, [pc, #156]	; (800122c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800118e:	2201      	movs	r2, #1
 8001190:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001192:	4b26      	ldr	r3, [pc, #152]	; (800122c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001194:	2200      	movs	r2, #0
 8001196:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001198:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800119c:	4923      	ldr	r1, [pc, #140]	; (800122c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800119e:	4824      	ldr	r0, [pc, #144]	; (8001230 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80011a0:	f004 f9d2 	bl	8005548 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80011a4:	2001      	movs	r0, #1
 80011a6:	f000 f987 	bl	80014b8 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80011aa:	4b20      	ldr	r3, [pc, #128]	; (800122c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80011ac:	2202      	movs	r2, #2
 80011ae:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80011b0:	4b1e      	ldr	r3, [pc, #120]	; (800122c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80011b2:	2210      	movs	r2, #16
 80011b4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80011b6:	4b1d      	ldr	r3, [pc, #116]	; (800122c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80011c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011c6:	4919      	ldr	r1, [pc, #100]	; (800122c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80011c8:	4819      	ldr	r0, [pc, #100]	; (8001230 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80011ca:	f004 f9bd 	bl	8005548 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80011d0:	2203      	movs	r2, #3
 80011d2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80011d4:	4b15      	ldr	r3, [pc, #84]	; (800122c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80011d6:	2210      	movs	r2, #16
 80011d8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80011dc:	2208      	movs	r2, #8
 80011de:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80011e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ea:	4910      	ldr	r1, [pc, #64]	; (800122c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80011ec:	4810      	ldr	r0, [pc, #64]	; (8001230 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80011ee:	f004 f9ab 	bl	8005548 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80011f2:	f44f 7308 	mov.w	r3, #544	; 0x220
 80011f6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80011fa:	2204      	movs	r2, #4
 80011fc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001200:	2210      	movs	r2, #16
 8001202:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001206:	2201      	movs	r2, #1
 8001208:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4a07      	ldr	r2, [pc, #28]	; (800122c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800120e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001214:	4905      	ldr	r1, [pc, #20]	; (800122c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001216:	4806      	ldr	r0, [pc, #24]	; (8001230 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001218:	f004 f996 	bl	8005548 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	4804      	ldr	r0, [pc, #16]	; (8001230 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001220:	f004 f9bd 	bl	800559e <HAL_SDRAM_ProgramRefreshRate>
}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000130 	.word	0x20000130
 8001230:	20000250 	.word	0x20000250

08001234 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8001234:	b580      	push	{r7, lr}
 8001236:	b090      	sub	sp, #64	; 0x40
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800123e:	4b70      	ldr	r3, [pc, #448]	; (8001400 <BSP_SDRAM_MspInit+0x1cc>)
 8001240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001242:	4a6f      	ldr	r2, [pc, #444]	; (8001400 <BSP_SDRAM_MspInit+0x1cc>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6393      	str	r3, [r2, #56]	; 0x38
 800124a:	4b6d      	ldr	r3, [pc, #436]	; (8001400 <BSP_SDRAM_MspInit+0x1cc>)
 800124c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
 8001254:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8001256:	4b6a      	ldr	r3, [pc, #424]	; (8001400 <BSP_SDRAM_MspInit+0x1cc>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a69      	ldr	r2, [pc, #420]	; (8001400 <BSP_SDRAM_MspInit+0x1cc>)
 800125c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b67      	ldr	r3, [pc, #412]	; (8001400 <BSP_SDRAM_MspInit+0x1cc>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
 800126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126e:	4b64      	ldr	r3, [pc, #400]	; (8001400 <BSP_SDRAM_MspInit+0x1cc>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a63      	ldr	r2, [pc, #396]	; (8001400 <BSP_SDRAM_MspInit+0x1cc>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b61      	ldr	r3, [pc, #388]	; (8001400 <BSP_SDRAM_MspInit+0x1cc>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	623b      	str	r3, [r7, #32]
 8001284:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001286:	4b5e      	ldr	r3, [pc, #376]	; (8001400 <BSP_SDRAM_MspInit+0x1cc>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a5d      	ldr	r2, [pc, #372]	; (8001400 <BSP_SDRAM_MspInit+0x1cc>)
 800128c:	f043 0308 	orr.w	r3, r3, #8
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b5b      	ldr	r3, [pc, #364]	; (8001400 <BSP_SDRAM_MspInit+0x1cc>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	61fb      	str	r3, [r7, #28]
 800129c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800129e:	4b58      	ldr	r3, [pc, #352]	; (8001400 <BSP_SDRAM_MspInit+0x1cc>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a57      	ldr	r2, [pc, #348]	; (8001400 <BSP_SDRAM_MspInit+0x1cc>)
 80012a4:	f043 0310 	orr.w	r3, r3, #16
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b55      	ldr	r3, [pc, #340]	; (8001400 <BSP_SDRAM_MspInit+0x1cc>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0310 	and.w	r3, r3, #16
 80012b2:	61bb      	str	r3, [r7, #24]
 80012b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012b6:	4b52      	ldr	r3, [pc, #328]	; (8001400 <BSP_SDRAM_MspInit+0x1cc>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a51      	ldr	r2, [pc, #324]	; (8001400 <BSP_SDRAM_MspInit+0x1cc>)
 80012bc:	f043 0320 	orr.w	r3, r3, #32
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b4f      	ldr	r3, [pc, #316]	; (8001400 <BSP_SDRAM_MspInit+0x1cc>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0320 	and.w	r3, r3, #32
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012ce:	4b4c      	ldr	r3, [pc, #304]	; (8001400 <BSP_SDRAM_MspInit+0x1cc>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a4b      	ldr	r2, [pc, #300]	; (8001400 <BSP_SDRAM_MspInit+0x1cc>)
 80012d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b49      	ldr	r3, [pc, #292]	; (8001400 <BSP_SDRAM_MspInit+0x1cc>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012e6:	4b46      	ldr	r3, [pc, #280]	; (8001400 <BSP_SDRAM_MspInit+0x1cc>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a45      	ldr	r2, [pc, #276]	; (8001400 <BSP_SDRAM_MspInit+0x1cc>)
 80012ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b43      	ldr	r3, [pc, #268]	; (8001400 <BSP_SDRAM_MspInit+0x1cc>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001302:	2301      	movs	r3, #1
 8001304:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8001306:	2302      	movs	r3, #2
 8001308:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800130a:	230c      	movs	r3, #12
 800130c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800130e:	2308      	movs	r3, #8
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8001312:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001316:	4619      	mov	r1, r3
 8001318:	483a      	ldr	r0, [pc, #232]	; (8001404 <BSP_SDRAM_MspInit+0x1d0>)
 800131a:	f000 ff59 	bl	80021d0 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800131e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001324:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001328:	4619      	mov	r1, r3
 800132a:	4837      	ldr	r0, [pc, #220]	; (8001408 <BSP_SDRAM_MspInit+0x1d4>)
 800132c:	f000 ff50 	bl	80021d0 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001330:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001336:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800133a:	4619      	mov	r1, r3
 800133c:	4833      	ldr	r0, [pc, #204]	; (800140c <BSP_SDRAM_MspInit+0x1d8>)
 800133e:	f000 ff47 	bl	80021d0 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001342:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800134c:	4619      	mov	r1, r3
 800134e:	4830      	ldr	r0, [pc, #192]	; (8001410 <BSP_SDRAM_MspInit+0x1dc>)
 8001350:	f000 ff3e 	bl	80021d0 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8001354:	f248 1333 	movw	r3, #33075	; 0x8133
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800135a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800135e:	4619      	mov	r1, r3
 8001360:	482c      	ldr	r0, [pc, #176]	; (8001414 <BSP_SDRAM_MspInit+0x1e0>)
 8001362:	f000 ff35 	bl	80021d0 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8001366:	2328      	movs	r3, #40	; 0x28
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800136a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800136e:	4619      	mov	r1, r3
 8001370:	4829      	ldr	r0, [pc, #164]	; (8001418 <BSP_SDRAM_MspInit+0x1e4>)
 8001372:	f000 ff2d 	bl	80021d0 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001376:	4b29      	ldr	r3, [pc, #164]	; (800141c <BSP_SDRAM_MspInit+0x1e8>)
 8001378:	2200      	movs	r2, #0
 800137a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800137c:	4b27      	ldr	r3, [pc, #156]	; (800141c <BSP_SDRAM_MspInit+0x1e8>)
 800137e:	2280      	movs	r2, #128	; 0x80
 8001380:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001382:	4b26      	ldr	r3, [pc, #152]	; (800141c <BSP_SDRAM_MspInit+0x1e8>)
 8001384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001388:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800138a:	4b24      	ldr	r3, [pc, #144]	; (800141c <BSP_SDRAM_MspInit+0x1e8>)
 800138c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001390:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001392:	4b22      	ldr	r3, [pc, #136]	; (800141c <BSP_SDRAM_MspInit+0x1e8>)
 8001394:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001398:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800139a:	4b20      	ldr	r3, [pc, #128]	; (800141c <BSP_SDRAM_MspInit+0x1e8>)
 800139c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013a0:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80013a2:	4b1e      	ldr	r3, [pc, #120]	; (800141c <BSP_SDRAM_MspInit+0x1e8>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80013a8:	4b1c      	ldr	r3, [pc, #112]	; (800141c <BSP_SDRAM_MspInit+0x1e8>)
 80013aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013ae:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80013b0:	4b1a      	ldr	r3, [pc, #104]	; (800141c <BSP_SDRAM_MspInit+0x1e8>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80013b6:	4b19      	ldr	r3, [pc, #100]	; (800141c <BSP_SDRAM_MspInit+0x1e8>)
 80013b8:	2203      	movs	r2, #3
 80013ba:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80013bc:	4b17      	ldr	r3, [pc, #92]	; (800141c <BSP_SDRAM_MspInit+0x1e8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80013c2:	4b16      	ldr	r3, [pc, #88]	; (800141c <BSP_SDRAM_MspInit+0x1e8>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80013c8:	4b14      	ldr	r3, [pc, #80]	; (800141c <BSP_SDRAM_MspInit+0x1e8>)
 80013ca:	4a15      	ldr	r2, [pc, #84]	; (8001420 <BSP_SDRAM_MspInit+0x1ec>)
 80013cc:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a12      	ldr	r2, [pc, #72]	; (800141c <BSP_SDRAM_MspInit+0x1e8>)
 80013d2:	631a      	str	r2, [r3, #48]	; 0x30
 80013d4:	4a11      	ldr	r2, [pc, #68]	; (800141c <BSP_SDRAM_MspInit+0x1e8>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80013da:	4810      	ldr	r0, [pc, #64]	; (800141c <BSP_SDRAM_MspInit+0x1e8>)
 80013dc:	f000 fa4e 	bl	800187c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80013e0:	480e      	ldr	r0, [pc, #56]	; (800141c <BSP_SDRAM_MspInit+0x1e8>)
 80013e2:	f000 f99d 	bl	8001720 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	210f      	movs	r1, #15
 80013ea:	2038      	movs	r0, #56	; 0x38
 80013ec:	f000 f961 	bl	80016b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80013f0:	2038      	movs	r0, #56	; 0x38
 80013f2:	f000 f97a 	bl	80016ea <HAL_NVIC_EnableIRQ>
}
 80013f6:	bf00      	nop
 80013f8:	3740      	adds	r7, #64	; 0x40
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800
 8001404:	40020800 	.word	0x40020800
 8001408:	40020c00 	.word	0x40020c00
 800140c:	40021000 	.word	0x40021000
 8001410:	40021400 	.word	0x40021400
 8001414:	40021800 	.word	0x40021800
 8001418:	40021c00 	.word	0x40021c00
 800141c:	20000140 	.word	0x20000140
 8001420:	40026410 	.word	0x40026410

08001424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001428:	2003      	movs	r0, #3
 800142a:	f000 f937 	bl	800169c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800142e:	2000      	movs	r0, #0
 8001430:	f000 f806 	bl	8001440 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001434:	f007 f91e 	bl	8008674 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_InitTick+0x54>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_InitTick+0x58>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4619      	mov	r1, r3
 8001452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001456:	fbb3 f3f1 	udiv	r3, r3, r1
 800145a:	fbb2 f3f3 	udiv	r3, r2, r3
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f951 	bl	8001706 <HAL_SYSTICK_Config>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e00e      	b.n	800148c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b0f      	cmp	r3, #15
 8001472:	d80a      	bhi.n	800148a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001474:	2200      	movs	r2, #0
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	f000 f919 	bl	80016b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001480:	4a06      	ldr	r2, [pc, #24]	; (800149c <HAL_InitTick+0x5c>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	e000      	b.n	800148c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000014 	.word	0x20000014
 8001498:	20000010 	.word	0x20000010
 800149c:	2000000c 	.word	0x2000000c

080014a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return uwTick;
 80014a4:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <HAL_GetTick+0x14>)
 80014a6:	681b      	ldr	r3, [r3, #0]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20000284 	.word	0x20000284

080014b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c0:	f7ff ffee 	bl	80014a0 <HAL_GetTick>
 80014c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d0:	d005      	beq.n	80014de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <HAL_Delay+0x40>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	461a      	mov	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4413      	add	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014de:	bf00      	nop
 80014e0:	f7ff ffde 	bl	80014a0 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d8f7      	bhi.n	80014e0 <HAL_Delay+0x28>
  {
  }
}
 80014f0:	bf00      	nop
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000010 	.word	0x20000010

080014fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <__NVIC_SetPriorityGrouping+0x40>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001518:	4013      	ands	r3, r2
 800151a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 8001526:	4313      	orrs	r3, r2
 8001528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152a:	4a04      	ldr	r2, [pc, #16]	; (800153c <__NVIC_SetPriorityGrouping+0x40>)
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	60d3      	str	r3, [r2, #12]
}
 8001530:	bf00      	nop
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000ed00 	.word	0xe000ed00
 8001540:	05fa0000 	.word	0x05fa0000

08001544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001548:	4b04      	ldr	r3, [pc, #16]	; (800155c <__NVIC_GetPriorityGrouping+0x18>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	0a1b      	lsrs	r3, r3, #8
 800154e:	f003 0307 	and.w	r3, r3, #7
}
 8001552:	4618      	mov	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	2b00      	cmp	r3, #0
 8001570:	db0b      	blt.n	800158a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	f003 021f 	and.w	r2, r3, #31
 8001578:	4907      	ldr	r1, [pc, #28]	; (8001598 <__NVIC_EnableIRQ+0x38>)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	095b      	lsrs	r3, r3, #5
 8001580:	2001      	movs	r0, #1
 8001582:	fa00 f202 	lsl.w	r2, r0, r2
 8001586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000e100 	.word	0xe000e100

0800159c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	6039      	str	r1, [r7, #0]
 80015a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	db0a      	blt.n	80015c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	490c      	ldr	r1, [pc, #48]	; (80015e8 <__NVIC_SetPriority+0x4c>)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	0112      	lsls	r2, r2, #4
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	440b      	add	r3, r1
 80015c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c4:	e00a      	b.n	80015dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4908      	ldr	r1, [pc, #32]	; (80015ec <__NVIC_SetPriority+0x50>)
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	3b04      	subs	r3, #4
 80015d4:	0112      	lsls	r2, r2, #4
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	440b      	add	r3, r1
 80015da:	761a      	strb	r2, [r3, #24]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000e100 	.word	0xe000e100
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b089      	sub	sp, #36	; 0x24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f1c3 0307 	rsb	r3, r3, #7
 800160a:	2b04      	cmp	r3, #4
 800160c:	bf28      	it	cs
 800160e:	2304      	movcs	r3, #4
 8001610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3304      	adds	r3, #4
 8001616:	2b06      	cmp	r3, #6
 8001618:	d902      	bls.n	8001620 <NVIC_EncodePriority+0x30>
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3b03      	subs	r3, #3
 800161e:	e000      	b.n	8001622 <NVIC_EncodePriority+0x32>
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	f04f 32ff 	mov.w	r2, #4294967295
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43da      	mvns	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	401a      	ands	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001638:	f04f 31ff 	mov.w	r1, #4294967295
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	fa01 f303 	lsl.w	r3, r1, r3
 8001642:	43d9      	mvns	r1, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	4313      	orrs	r3, r2
         );
}
 800164a:	4618      	mov	r0, r3
 800164c:	3724      	adds	r7, #36	; 0x24
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001668:	d301      	bcc.n	800166e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800166a:	2301      	movs	r3, #1
 800166c:	e00f      	b.n	800168e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166e:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <SysTick_Config+0x40>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001676:	210f      	movs	r1, #15
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	f7ff ff8e 	bl	800159c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <SysTick_Config+0x40>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001686:	4b04      	ldr	r3, [pc, #16]	; (8001698 <SysTick_Config+0x40>)
 8001688:	2207      	movs	r2, #7
 800168a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	e000e010 	.word	0xe000e010

0800169c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ff29 	bl	80014fc <__NVIC_SetPriorityGrouping>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4603      	mov	r3, r0
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
 80016be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016c4:	f7ff ff3e 	bl	8001544 <__NVIC_GetPriorityGrouping>
 80016c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	6978      	ldr	r0, [r7, #20]
 80016d0:	f7ff ff8e 	bl	80015f0 <NVIC_EncodePriority>
 80016d4:	4602      	mov	r2, r0
 80016d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff5d 	bl	800159c <__NVIC_SetPriority>
}
 80016e2:	bf00      	nop
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff31 	bl	8001560 <__NVIC_EnableIRQ>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff ffa2 	bl	8001658 <SysTick_Config>
 8001714:	4603      	mov	r3, r0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800172c:	f7ff feb8 	bl	80014a0 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e099      	b.n	8001870 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2202      	movs	r2, #2
 8001748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 0201 	bic.w	r2, r2, #1
 800175a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800175c:	e00f      	b.n	800177e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800175e:	f7ff fe9f 	bl	80014a0 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b05      	cmp	r3, #5
 800176a:	d908      	bls.n	800177e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2220      	movs	r2, #32
 8001770:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2203      	movs	r2, #3
 8001776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e078      	b.n	8001870 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1e8      	bne.n	800175e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	4b38      	ldr	r3, [pc, #224]	; (8001878 <HAL_DMA_Init+0x158>)
 8001798:	4013      	ands	r3, r2
 800179a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	2b04      	cmp	r3, #4
 80017d6:	d107      	bne.n	80017e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e0:	4313      	orrs	r3, r2
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	f023 0307 	bic.w	r3, r3, #7
 80017fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	4313      	orrs	r3, r2
 8001808:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180e:	2b04      	cmp	r3, #4
 8001810:	d117      	bne.n	8001842 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	4313      	orrs	r3, r2
 800181a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00e      	beq.n	8001842 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 f8bd 	bl	80019a4 <DMA_CheckFifoParam>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d008      	beq.n	8001842 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2240      	movs	r2, #64	; 0x40
 8001834:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800183e:	2301      	movs	r3, #1
 8001840:	e016      	b.n	8001870 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f874 	bl	8001938 <DMA_CalcBaseAndBitshift>
 8001850:	4603      	mov	r3, r0
 8001852:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001858:	223f      	movs	r2, #63	; 0x3f
 800185a:	409a      	lsls	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2201      	movs	r2, #1
 800186a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	f010803f 	.word	0xf010803f

0800187c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e050      	b.n	8001930 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d101      	bne.n	800189e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800189a:	2302      	movs	r3, #2
 800189c:	e048      	b.n	8001930 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 0201 	bic.w	r2, r2, #1
 80018ac:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2200      	movs	r2, #0
 80018bc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2200      	movs	r2, #0
 80018d4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2221      	movs	r2, #33	; 0x21
 80018dc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 f82a 	bl	8001938 <DMA_CalcBaseAndBitshift>
 80018e4:	4603      	mov	r3, r0
 80018e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ec:	223f      	movs	r2, #63	; 0x3f
 80018ee:	409a      	lsls	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	3b10      	subs	r3, #16
 8001948:	4a13      	ldr	r2, [pc, #76]	; (8001998 <DMA_CalcBaseAndBitshift+0x60>)
 800194a:	fba2 2303 	umull	r2, r3, r2, r3
 800194e:	091b      	lsrs	r3, r3, #4
 8001950:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001952:	4a12      	ldr	r2, [pc, #72]	; (800199c <DMA_CalcBaseAndBitshift+0x64>)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4413      	add	r3, r2
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	461a      	mov	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2b03      	cmp	r3, #3
 8001964:	d908      	bls.n	8001978 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <DMA_CalcBaseAndBitshift+0x68>)
 800196e:	4013      	ands	r3, r2
 8001970:	1d1a      	adds	r2, r3, #4
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	659a      	str	r2, [r3, #88]	; 0x58
 8001976:	e006      	b.n	8001986 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <DMA_CalcBaseAndBitshift+0x68>)
 8001980:	4013      	ands	r3, r2
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	aaaaaaab 	.word	0xaaaaaaab
 800199c:	0800aa8c 	.word	0x0800aa8c
 80019a0:	fffffc00 	.word	0xfffffc00

080019a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019ac:	2300      	movs	r3, #0
 80019ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d11f      	bne.n	80019fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	d855      	bhi.n	8001a70 <DMA_CheckFifoParam+0xcc>
 80019c4:	a201      	add	r2, pc, #4	; (adr r2, 80019cc <DMA_CheckFifoParam+0x28>)
 80019c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ca:	bf00      	nop
 80019cc:	080019dd 	.word	0x080019dd
 80019d0:	080019ef 	.word	0x080019ef
 80019d4:	080019dd 	.word	0x080019dd
 80019d8:	08001a71 	.word	0x08001a71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d045      	beq.n	8001a74 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019ec:	e042      	b.n	8001a74 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019f6:	d13f      	bne.n	8001a78 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019fc:	e03c      	b.n	8001a78 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a06:	d121      	bne.n	8001a4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d836      	bhi.n	8001a7c <DMA_CheckFifoParam+0xd8>
 8001a0e:	a201      	add	r2, pc, #4	; (adr r2, 8001a14 <DMA_CheckFifoParam+0x70>)
 8001a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a14:	08001a25 	.word	0x08001a25
 8001a18:	08001a2b 	.word	0x08001a2b
 8001a1c:	08001a25 	.word	0x08001a25
 8001a20:	08001a3d 	.word	0x08001a3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
      break;
 8001a28:	e02f      	b.n	8001a8a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d024      	beq.n	8001a80 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a3a:	e021      	b.n	8001a80 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a44:	d11e      	bne.n	8001a84 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a4a:	e01b      	b.n	8001a84 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d902      	bls.n	8001a58 <DMA_CheckFifoParam+0xb4>
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	d003      	beq.n	8001a5e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a56:	e018      	b.n	8001a8a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a5c:	e015      	b.n	8001a8a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00e      	beq.n	8001a88 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	73fb      	strb	r3, [r7, #15]
      break;
 8001a6e:	e00b      	b.n	8001a88 <DMA_CheckFifoParam+0xe4>
      break;
 8001a70:	bf00      	nop
 8001a72:	e00a      	b.n	8001a8a <DMA_CheckFifoParam+0xe6>
      break;
 8001a74:	bf00      	nop
 8001a76:	e008      	b.n	8001a8a <DMA_CheckFifoParam+0xe6>
      break;
 8001a78:	bf00      	nop
 8001a7a:	e006      	b.n	8001a8a <DMA_CheckFifoParam+0xe6>
      break;
 8001a7c:	bf00      	nop
 8001a7e:	e004      	b.n	8001a8a <DMA_CheckFifoParam+0xe6>
      break;
 8001a80:	bf00      	nop
 8001a82:	e002      	b.n	8001a8a <DMA_CheckFifoParam+0xe6>
      break;   
 8001a84:	bf00      	nop
 8001a86:	e000      	b.n	8001a8a <DMA_CheckFifoParam+0xe6>
      break;
 8001a88:	bf00      	nop
    }
  } 
  
  return status; 
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e039      	b.n	8001b1e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d106      	bne.n	8001ac4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f006 fdfc 	bl	80086bc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae8:	f023 0107 	bic.w	r1, r3, #7
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001afe:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <HAL_DMA2D_Init+0x90>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	68d1      	ldr	r1, [r2, #12]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6812      	ldr	r2, [r2, #0]
 8001b0a:	430b      	orrs	r3, r1
 8001b0c:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	ffffc000 	.word	0xffffc000

08001b2c <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af02      	add	r7, sp, #8
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
 8001b38:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d101      	bne.n	8001b48 <HAL_DMA2D_Start+0x1c>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e018      	b.n	8001b7a <HAL_DMA2D_Start+0x4e>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2202      	movs	r2, #2
 8001b54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	68b9      	ldr	r1, [r7, #8]
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f000 fa98 	bl	8002098 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b086      	sub	sp, #24
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d056      	beq.n	8001c4c <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8001b9e:	f7ff fc7f 	bl	80014a0 <HAL_GetTick>
 8001ba2:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001ba4:	e04b      	b.n	8001c3e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d023      	beq.n	8001c00 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f003 0320 	and.w	r3, r3, #32
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d005      	beq.n	8001bce <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc6:	f043 0202 	orr.w	r2, r3, #2
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d005      	beq.n	8001be4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bdc:	f043 0201 	orr.w	r2, r3, #1
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2221      	movs	r2, #33	; 0x21
 8001bea:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2204      	movs	r2, #4
 8001bf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0a5      	b.n	8001d4c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c06:	d01a      	beq.n	8001c3e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001c08:	f7ff fc4a 	bl	80014a0 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d302      	bcc.n	8001c1e <HAL_DMA2D_PollForTransfer+0x9c>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10f      	bne.n	8001c3e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c22:	f043 0220 	orr.w	r2, r3, #32
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e086      	b.n	8001d4c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0ac      	beq.n	8001ba6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	f003 0320 	and.w	r3, r3, #32
 8001c56:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	f003 0320 	and.w	r3, r3, #32
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d061      	beq.n	8001d32 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c6e:	f7ff fc17 	bl	80014a0 <HAL_GetTick>
 8001c72:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001c74:	e056      	b.n	8001d24 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d02e      	beq.n	8001ce6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d005      	beq.n	8001c9e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c96:	f043 0204 	orr.w	r2, r3, #4
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f003 0320 	and.w	r3, r3, #32
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cac:	f043 0202 	orr.w	r2, r3, #2
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d005      	beq.n	8001cca <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc2:	f043 0201 	orr.w	r2, r3, #1
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2229      	movs	r2, #41	; 0x29
 8001cd0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2204      	movs	r2, #4
 8001cd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e032      	b.n	8001d4c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cec:	d01a      	beq.n	8001d24 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001cee:	f7ff fbd7 	bl	80014a0 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d302      	bcc.n	8001d04 <HAL_DMA2D_PollForTransfer+0x182>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10f      	bne.n	8001d24 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d08:	f043 0220 	orr.w	r2, r3, #32
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2203      	movs	r2, #3
 8001d14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e013      	b.n	8001d4c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 0310 	and.w	r3, r3, #16
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0a1      	beq.n	8001c76 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2212      	movs	r2, #18
 8001d38:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d026      	beq.n	8001dc4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d021      	beq.n	8001dc4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d8e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d94:	f043 0201 	orr.w	r2, r3, #1
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2201      	movs	r2, #1
 8001da2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2204      	movs	r2, #4
 8001da8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	695b      	ldr	r3, [r3, #20]
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 0320 	and.w	r3, r3, #32
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d026      	beq.n	8001e1c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d021      	beq.n	8001e1c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001de6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2220      	movs	r2, #32
 8001dee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df4:	f043 0202 	orr.w	r2, r3, #2
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2204      	movs	r2, #4
 8001e00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d026      	beq.n	8001e74 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d021      	beq.n	8001e74 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e3e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2208      	movs	r2, #8
 8001e46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e4c:	f043 0204 	orr.w	r2, r3, #4
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2204      	movs	r2, #4
 8001e58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d013      	beq.n	8001ea6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00e      	beq.n	8001ea6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e96:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2204      	movs	r2, #4
 8001e9e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f853 	bl	8001f4c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d024      	beq.n	8001efa <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d01f      	beq.n	8001efa <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ec8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f003 0310 	and.w	r3, r3, #16
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01f      	beq.n	8001f44 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d01a      	beq.n	8001f44 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f1c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2210      	movs	r2, #16
 8001f24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f80e 	bl	8001f60 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001f44:	bf00      	nop
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d101      	bne.n	8001f94 <HAL_DMA2D_ConfigLayer+0x20>
 8001f90:	2302      	movs	r3, #2
 8001f92:	e079      	b.n	8002088 <HAL_DMA2D_ConfigLayer+0x114>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	3318      	adds	r3, #24
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	041b      	lsls	r3, r3, #16
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001fbe:	4b35      	ldr	r3, [pc, #212]	; (8002094 <HAL_DMA2D_ConfigLayer+0x120>)
 8001fc0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b0a      	cmp	r3, #10
 8001fc8:	d003      	beq.n	8001fd2 <HAL_DMA2D_ConfigLayer+0x5e>
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b09      	cmp	r3, #9
 8001fd0:	d107      	bne.n	8001fe2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	e005      	b.n	8001fee <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	061b      	lsls	r3, r3, #24
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d120      	bne.n	8002036 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	ea02 0103 	and.w	r1, r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	430a      	orrs	r2, r1
 800200a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b0a      	cmp	r3, #10
 800201c:	d003      	beq.n	8002026 <HAL_DMA2D_ConfigLayer+0xb2>
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b09      	cmp	r3, #9
 8002024:	d127      	bne.n	8002076 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002032:	629a      	str	r2, [r3, #40]	; 0x28
 8002034:	e01f      	b.n	8002076 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	69da      	ldr	r2, [r3, #28]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	43db      	mvns	r3, r3
 8002040:	ea02 0103 	and.w	r1, r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	430a      	orrs	r2, r1
 800204c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	6812      	ldr	r2, [r2, #0]
 8002056:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b0a      	cmp	r3, #10
 800205e:	d003      	beq.n	8002068 <HAL_DMA2D_ConfigLayer+0xf4>
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b09      	cmp	r3, #9
 8002066:	d106      	bne.n	8002076 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	68da      	ldr	r2, [r3, #12]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002074:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	371c      	adds	r7, #28
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	ff03000f 	.word	0xff03000f

08002098 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8002098:	b480      	push	{r7}
 800209a:	b08b      	sub	sp, #44	; 0x2c
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
 80020a4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ac:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	041a      	lsls	r2, r3, #16
 80020b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b6:	431a      	orrs	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80020d0:	d174      	bne.n	80021bc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80020d8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80020e0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80020e8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d108      	bne.n	800210a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	431a      	orrs	r2, r3
 80020fe:	6a3b      	ldr	r3, [r7, #32]
 8002100:	4313      	orrs	r3, r2
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	4313      	orrs	r3, r2
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
 8002108:	e053      	b.n	80021b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d106      	bne.n	8002120 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	4313      	orrs	r3, r2
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	4313      	orrs	r3, r2
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
 800211e:	e048      	b.n	80021b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2b02      	cmp	r3, #2
 8002126:	d111      	bne.n	800214c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	0cdb      	lsrs	r3, r3, #19
 800212c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	0a9b      	lsrs	r3, r3, #10
 8002132:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	08db      	lsrs	r3, r3, #3
 8002138:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	015a      	lsls	r2, r3, #5
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	02db      	lsls	r3, r3, #11
 8002142:	4313      	orrs	r3, r2
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	4313      	orrs	r3, r2
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
 800214a:	e032      	b.n	80021b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b03      	cmp	r3, #3
 8002152:	d117      	bne.n	8002184 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002154:	6a3b      	ldr	r3, [r7, #32]
 8002156:	0fdb      	lsrs	r3, r3, #31
 8002158:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	0cdb      	lsrs	r3, r3, #19
 800215e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	0adb      	lsrs	r3, r3, #11
 8002164:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	08db      	lsrs	r3, r3, #3
 800216a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	015a      	lsls	r2, r3, #5
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	029b      	lsls	r3, r3, #10
 8002174:	431a      	orrs	r2, r3
 8002176:	6a3b      	ldr	r3, [r7, #32]
 8002178:	03db      	lsls	r3, r3, #15
 800217a:	4313      	orrs	r3, r2
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	4313      	orrs	r3, r2
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
 8002182:	e016      	b.n	80021b2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002184:	6a3b      	ldr	r3, [r7, #32]
 8002186:	0f1b      	lsrs	r3, r3, #28
 8002188:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	0d1b      	lsrs	r3, r3, #20
 800218e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	0b1b      	lsrs	r3, r3, #12
 8002194:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	091b      	lsrs	r3, r3, #4
 800219a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	011a      	lsls	r2, r3, #4
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	021b      	lsls	r3, r3, #8
 80021a4:	431a      	orrs	r2, r3
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	031b      	lsls	r3, r3, #12
 80021aa:	4313      	orrs	r3, r2
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80021ba:	e003      	b.n	80021c4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	60da      	str	r2, [r3, #12]
}
 80021c4:	bf00      	nop
 80021c6:	372c      	adds	r7, #44	; 0x2c
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b089      	sub	sp, #36	; 0x24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	e175      	b.n	80024dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80021f0:	2201      	movs	r2, #1
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	429a      	cmp	r2, r3
 800220a:	f040 8164 	bne.w	80024d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d003      	beq.n	800221e <HAL_GPIO_Init+0x4e>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b12      	cmp	r3, #18
 800221c:	d123      	bne.n	8002266 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	08da      	lsrs	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3208      	adds	r2, #8
 8002226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	220f      	movs	r2, #15
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	08da      	lsrs	r2, r3, #3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3208      	adds	r2, #8
 8002260:	69b9      	ldr	r1, [r7, #24]
 8002262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	2203      	movs	r2, #3
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 0203 	and.w	r2, r3, #3
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d00b      	beq.n	80022ba <HAL_GPIO_Init+0xea>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d007      	beq.n	80022ba <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022ae:	2b11      	cmp	r3, #17
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b12      	cmp	r3, #18
 80022b8:	d130      	bne.n	800231c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	2203      	movs	r2, #3
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022f0:	2201      	movs	r2, #1
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 0201 	and.w	r2, r3, #1
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	2203      	movs	r2, #3
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80be 	beq.w	80024d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235a:	4b65      	ldr	r3, [pc, #404]	; (80024f0 <HAL_GPIO_Init+0x320>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	4a64      	ldr	r2, [pc, #400]	; (80024f0 <HAL_GPIO_Init+0x320>)
 8002360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002364:	6453      	str	r3, [r2, #68]	; 0x44
 8002366:	4b62      	ldr	r3, [pc, #392]	; (80024f0 <HAL_GPIO_Init+0x320>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002372:	4a60      	ldr	r2, [pc, #384]	; (80024f4 <HAL_GPIO_Init+0x324>)
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	089b      	lsrs	r3, r3, #2
 8002378:	3302      	adds	r3, #2
 800237a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	220f      	movs	r2, #15
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a57      	ldr	r2, [pc, #348]	; (80024f8 <HAL_GPIO_Init+0x328>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d037      	beq.n	800240e <HAL_GPIO_Init+0x23e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a56      	ldr	r2, [pc, #344]	; (80024fc <HAL_GPIO_Init+0x32c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d031      	beq.n	800240a <HAL_GPIO_Init+0x23a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a55      	ldr	r2, [pc, #340]	; (8002500 <HAL_GPIO_Init+0x330>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d02b      	beq.n	8002406 <HAL_GPIO_Init+0x236>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a54      	ldr	r2, [pc, #336]	; (8002504 <HAL_GPIO_Init+0x334>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d025      	beq.n	8002402 <HAL_GPIO_Init+0x232>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a53      	ldr	r2, [pc, #332]	; (8002508 <HAL_GPIO_Init+0x338>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d01f      	beq.n	80023fe <HAL_GPIO_Init+0x22e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a52      	ldr	r2, [pc, #328]	; (800250c <HAL_GPIO_Init+0x33c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d019      	beq.n	80023fa <HAL_GPIO_Init+0x22a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a51      	ldr	r2, [pc, #324]	; (8002510 <HAL_GPIO_Init+0x340>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d013      	beq.n	80023f6 <HAL_GPIO_Init+0x226>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a50      	ldr	r2, [pc, #320]	; (8002514 <HAL_GPIO_Init+0x344>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00d      	beq.n	80023f2 <HAL_GPIO_Init+0x222>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4f      	ldr	r2, [pc, #316]	; (8002518 <HAL_GPIO_Init+0x348>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d007      	beq.n	80023ee <HAL_GPIO_Init+0x21e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4e      	ldr	r2, [pc, #312]	; (800251c <HAL_GPIO_Init+0x34c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d101      	bne.n	80023ea <HAL_GPIO_Init+0x21a>
 80023e6:	2309      	movs	r3, #9
 80023e8:	e012      	b.n	8002410 <HAL_GPIO_Init+0x240>
 80023ea:	230a      	movs	r3, #10
 80023ec:	e010      	b.n	8002410 <HAL_GPIO_Init+0x240>
 80023ee:	2308      	movs	r3, #8
 80023f0:	e00e      	b.n	8002410 <HAL_GPIO_Init+0x240>
 80023f2:	2307      	movs	r3, #7
 80023f4:	e00c      	b.n	8002410 <HAL_GPIO_Init+0x240>
 80023f6:	2306      	movs	r3, #6
 80023f8:	e00a      	b.n	8002410 <HAL_GPIO_Init+0x240>
 80023fa:	2305      	movs	r3, #5
 80023fc:	e008      	b.n	8002410 <HAL_GPIO_Init+0x240>
 80023fe:	2304      	movs	r3, #4
 8002400:	e006      	b.n	8002410 <HAL_GPIO_Init+0x240>
 8002402:	2303      	movs	r3, #3
 8002404:	e004      	b.n	8002410 <HAL_GPIO_Init+0x240>
 8002406:	2302      	movs	r3, #2
 8002408:	e002      	b.n	8002410 <HAL_GPIO_Init+0x240>
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <HAL_GPIO_Init+0x240>
 800240e:	2300      	movs	r3, #0
 8002410:	69fa      	ldr	r2, [r7, #28]
 8002412:	f002 0203 	and.w	r2, r2, #3
 8002416:	0092      	lsls	r2, r2, #2
 8002418:	4093      	lsls	r3, r2
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002420:	4934      	ldr	r1, [pc, #208]	; (80024f4 <HAL_GPIO_Init+0x324>)
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	089b      	lsrs	r3, r3, #2
 8002426:	3302      	adds	r3, #2
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800242e:	4b3c      	ldr	r3, [pc, #240]	; (8002520 <HAL_GPIO_Init+0x350>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	43db      	mvns	r3, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4013      	ands	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002452:	4a33      	ldr	r2, [pc, #204]	; (8002520 <HAL_GPIO_Init+0x350>)
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002458:	4b31      	ldr	r3, [pc, #196]	; (8002520 <HAL_GPIO_Init+0x350>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800247c:	4a28      	ldr	r2, [pc, #160]	; (8002520 <HAL_GPIO_Init+0x350>)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002482:	4b27      	ldr	r3, [pc, #156]	; (8002520 <HAL_GPIO_Init+0x350>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	43db      	mvns	r3, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4013      	ands	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024a6:	4a1e      	ldr	r2, [pc, #120]	; (8002520 <HAL_GPIO_Init+0x350>)
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024ac:	4b1c      	ldr	r3, [pc, #112]	; (8002520 <HAL_GPIO_Init+0x350>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024d0:	4a13      	ldr	r2, [pc, #76]	; (8002520 <HAL_GPIO_Init+0x350>)
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3301      	adds	r3, #1
 80024da:	61fb      	str	r3, [r7, #28]
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	2b0f      	cmp	r3, #15
 80024e0:	f67f ae86 	bls.w	80021f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80024e4:	bf00      	nop
 80024e6:	3724      	adds	r7, #36	; 0x24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40013800 	.word	0x40013800
 80024f8:	40020000 	.word	0x40020000
 80024fc:	40020400 	.word	0x40020400
 8002500:	40020800 	.word	0x40020800
 8002504:	40020c00 	.word	0x40020c00
 8002508:	40021000 	.word	0x40021000
 800250c:	40021400 	.word	0x40021400
 8002510:	40021800 	.word	0x40021800
 8002514:	40021c00 	.word	0x40021c00
 8002518:	40022000 	.word	0x40022000
 800251c:	40022400 	.word	0x40022400
 8002520:	40013c00 	.word	0x40013c00

08002524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	807b      	strh	r3, [r7, #2]
 8002530:	4613      	mov	r3, r2
 8002532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002534:	787b      	ldrb	r3, [r7, #1]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800253a:	887a      	ldrh	r2, [r7, #2]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002540:	e003      	b.n	800254a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002542:	887b      	ldrh	r3, [r7, #2]
 8002544:	041a      	lsls	r2, r3, #16
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	619a      	str	r2, [r3, #24]
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002556:	b590      	push	{r4, r7, lr}
 8002558:	b089      	sub	sp, #36	; 0x24
 800255a:	af04      	add	r7, sp, #16
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	4608      	mov	r0, r1
 8002560:	4611      	mov	r1, r2
 8002562:	461a      	mov	r2, r3
 8002564:	4603      	mov	r3, r0
 8002566:	70fb      	strb	r3, [r7, #3]
 8002568:	460b      	mov	r3, r1
 800256a:	70bb      	strb	r3, [r7, #2]
 800256c:	4613      	mov	r3, r2
 800256e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002576:	2b01      	cmp	r3, #1
 8002578:	d101      	bne.n	800257e <HAL_HCD_HC_Init+0x28>
 800257a:	2302      	movs	r3, #2
 800257c:	e07f      	b.n	800267e <HAL_HCD_HC_Init+0x128>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002586:	78fa      	ldrb	r2, [r7, #3]
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	440b      	add	r3, r1
 8002594:	333d      	adds	r3, #61	; 0x3d
 8002596:	2200      	movs	r2, #0
 8002598:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800259a:	78fa      	ldrb	r2, [r7, #3]
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	4613      	mov	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	440b      	add	r3, r1
 80025a8:	3338      	adds	r3, #56	; 0x38
 80025aa:	787a      	ldrb	r2, [r7, #1]
 80025ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80025ae:	78fa      	ldrb	r2, [r7, #3]
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	440b      	add	r3, r1
 80025bc:	3340      	adds	r3, #64	; 0x40
 80025be:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80025c0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80025c2:	78fa      	ldrb	r2, [r7, #3]
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	4613      	mov	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	440b      	add	r3, r1
 80025d0:	3339      	adds	r3, #57	; 0x39
 80025d2:	78fa      	ldrb	r2, [r7, #3]
 80025d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80025d6:	78fa      	ldrb	r2, [r7, #3]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	440b      	add	r3, r1
 80025e4:	333f      	adds	r3, #63	; 0x3f
 80025e6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80025ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80025ec:	78fa      	ldrb	r2, [r7, #3]
 80025ee:	78bb      	ldrb	r3, [r7, #2]
 80025f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025f4:	b2d8      	uxtb	r0, r3
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	440b      	add	r3, r1
 8002602:	333a      	adds	r3, #58	; 0x3a
 8002604:	4602      	mov	r2, r0
 8002606:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002608:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800260c:	2b00      	cmp	r3, #0
 800260e:	da0a      	bge.n	8002626 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002610:	78fa      	ldrb	r2, [r7, #3]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	440b      	add	r3, r1
 800261e:	333b      	adds	r3, #59	; 0x3b
 8002620:	2201      	movs	r2, #1
 8002622:	701a      	strb	r2, [r3, #0]
 8002624:	e009      	b.n	800263a <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002626:	78fa      	ldrb	r2, [r7, #3]
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	440b      	add	r3, r1
 8002634:	333b      	adds	r3, #59	; 0x3b
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800263a:	78fa      	ldrb	r2, [r7, #3]
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	440b      	add	r3, r1
 8002648:	333c      	adds	r3, #60	; 0x3c
 800264a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800264e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	787c      	ldrb	r4, [r7, #1]
 8002656:	78ba      	ldrb	r2, [r7, #2]
 8002658:	78f9      	ldrb	r1, [r7, #3]
 800265a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800265c:	9302      	str	r3, [sp, #8]
 800265e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002662:	9301      	str	r3, [sp, #4]
 8002664:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	4623      	mov	r3, r4
 800266c:	f003 fe88 	bl	8006380 <USB_HC_Init>
 8002670:	4603      	mov	r3, r0
 8002672:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800267c:	7bfb      	ldrb	r3, [r7, #15]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	bd90      	pop	{r4, r7, pc}
	...

08002688 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	4608      	mov	r0, r1
 8002692:	4611      	mov	r1, r2
 8002694:	461a      	mov	r2, r3
 8002696:	4603      	mov	r3, r0
 8002698:	70fb      	strb	r3, [r7, #3]
 800269a:	460b      	mov	r3, r1
 800269c:	70bb      	strb	r3, [r7, #2]
 800269e:	4613      	mov	r3, r2
 80026a0:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80026a2:	78fa      	ldrb	r2, [r7, #3]
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	440b      	add	r3, r1
 80026b0:	333b      	adds	r3, #59	; 0x3b
 80026b2:	78ba      	ldrb	r2, [r7, #2]
 80026b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80026b6:	78fa      	ldrb	r2, [r7, #3]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	440b      	add	r3, r1
 80026c4:	333f      	adds	r3, #63	; 0x3f
 80026c6:	787a      	ldrb	r2, [r7, #1]
 80026c8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80026ca:	7c3b      	ldrb	r3, [r7, #16]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10a      	bne.n	80026e6 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80026d0:	78fa      	ldrb	r2, [r7, #3]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	440b      	add	r3, r1
 80026de:	3342      	adds	r3, #66	; 0x42
 80026e0:	2203      	movs	r2, #3
 80026e2:	701a      	strb	r2, [r3, #0]
 80026e4:	e009      	b.n	80026fa <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026e6:	78fa      	ldrb	r2, [r7, #3]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	440b      	add	r3, r1
 80026f4:	3342      	adds	r3, #66	; 0x42
 80026f6:	2202      	movs	r2, #2
 80026f8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80026fa:	787b      	ldrb	r3, [r7, #1]
 80026fc:	2b03      	cmp	r3, #3
 80026fe:	f200 80d6 	bhi.w	80028ae <HAL_HCD_HC_SubmitRequest+0x226>
 8002702:	a201      	add	r2, pc, #4	; (adr r2, 8002708 <HAL_HCD_HC_SubmitRequest+0x80>)
 8002704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002708:	08002719 	.word	0x08002719
 800270c:	08002899 	.word	0x08002899
 8002710:	08002785 	.word	0x08002785
 8002714:	0800280f 	.word	0x0800280f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002718:	7c3b      	ldrb	r3, [r7, #16]
 800271a:	2b01      	cmp	r3, #1
 800271c:	f040 80c9 	bne.w	80028b2 <HAL_HCD_HC_SubmitRequest+0x22a>
 8002720:	78bb      	ldrb	r3, [r7, #2]
 8002722:	2b00      	cmp	r3, #0
 8002724:	f040 80c5 	bne.w	80028b2 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8002728:	8b3b      	ldrh	r3, [r7, #24]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d109      	bne.n	8002742 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800272e:	78fa      	ldrb	r2, [r7, #3]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	440b      	add	r3, r1
 800273c:	3351      	adds	r3, #81	; 0x51
 800273e:	2201      	movs	r2, #1
 8002740:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002742:	78fa      	ldrb	r2, [r7, #3]
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	440b      	add	r3, r1
 8002750:	3351      	adds	r3, #81	; 0x51
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10a      	bne.n	800276e <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	440b      	add	r3, r1
 8002766:	3342      	adds	r3, #66	; 0x42
 8002768:	2200      	movs	r2, #0
 800276a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800276c:	e0a1      	b.n	80028b2 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800276e:	78fa      	ldrb	r2, [r7, #3]
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	440b      	add	r3, r1
 800277c:	3342      	adds	r3, #66	; 0x42
 800277e:	2202      	movs	r2, #2
 8002780:	701a      	strb	r2, [r3, #0]
      break;
 8002782:	e096      	b.n	80028b2 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002784:	78bb      	ldrb	r3, [r7, #2]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d120      	bne.n	80027cc <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800278a:	78fa      	ldrb	r2, [r7, #3]
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	440b      	add	r3, r1
 8002798:	3351      	adds	r3, #81	; 0x51
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10a      	bne.n	80027b6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027a0:	78fa      	ldrb	r2, [r7, #3]
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	440b      	add	r3, r1
 80027ae:	3342      	adds	r3, #66	; 0x42
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80027b4:	e07e      	b.n	80028b4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027b6:	78fa      	ldrb	r2, [r7, #3]
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	440b      	add	r3, r1
 80027c4:	3342      	adds	r3, #66	; 0x42
 80027c6:	2202      	movs	r2, #2
 80027c8:	701a      	strb	r2, [r3, #0]
      break;
 80027ca:	e073      	b.n	80028b4 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80027cc:	78fa      	ldrb	r2, [r7, #3]
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	440b      	add	r3, r1
 80027da:	3350      	adds	r3, #80	; 0x50
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10a      	bne.n	80027f8 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027e2:	78fa      	ldrb	r2, [r7, #3]
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	440b      	add	r3, r1
 80027f0:	3342      	adds	r3, #66	; 0x42
 80027f2:	2200      	movs	r2, #0
 80027f4:	701a      	strb	r2, [r3, #0]
      break;
 80027f6:	e05d      	b.n	80028b4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027f8:	78fa      	ldrb	r2, [r7, #3]
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	440b      	add	r3, r1
 8002806:	3342      	adds	r3, #66	; 0x42
 8002808:	2202      	movs	r2, #2
 800280a:	701a      	strb	r2, [r3, #0]
      break;
 800280c:	e052      	b.n	80028b4 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800280e:	78bb      	ldrb	r3, [r7, #2]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d120      	bne.n	8002856 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002814:	78fa      	ldrb	r2, [r7, #3]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	440b      	add	r3, r1
 8002822:	3351      	adds	r3, #81	; 0x51
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10a      	bne.n	8002840 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800282a:	78fa      	ldrb	r2, [r7, #3]
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	440b      	add	r3, r1
 8002838:	3342      	adds	r3, #66	; 0x42
 800283a:	2200      	movs	r2, #0
 800283c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800283e:	e039      	b.n	80028b4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	440b      	add	r3, r1
 800284e:	3342      	adds	r3, #66	; 0x42
 8002850:	2202      	movs	r2, #2
 8002852:	701a      	strb	r2, [r3, #0]
      break;
 8002854:	e02e      	b.n	80028b4 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002856:	78fa      	ldrb	r2, [r7, #3]
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	440b      	add	r3, r1
 8002864:	3350      	adds	r3, #80	; 0x50
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10a      	bne.n	8002882 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800286c:	78fa      	ldrb	r2, [r7, #3]
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	440b      	add	r3, r1
 800287a:	3342      	adds	r3, #66	; 0x42
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]
      break;
 8002880:	e018      	b.n	80028b4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002882:	78fa      	ldrb	r2, [r7, #3]
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	440b      	add	r3, r1
 8002890:	3342      	adds	r3, #66	; 0x42
 8002892:	2202      	movs	r2, #2
 8002894:	701a      	strb	r2, [r3, #0]
      break;
 8002896:	e00d      	b.n	80028b4 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002898:	78fa      	ldrb	r2, [r7, #3]
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	440b      	add	r3, r1
 80028a6:	3342      	adds	r3, #66	; 0x42
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
      break;
 80028ac:	e002      	b.n	80028b4 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 80028ae:	bf00      	nop
 80028b0:	e000      	b.n	80028b4 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 80028b2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80028b4:	78fa      	ldrb	r2, [r7, #3]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	440b      	add	r3, r1
 80028c2:	3344      	adds	r3, #68	; 0x44
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80028c8:	78fa      	ldrb	r2, [r7, #3]
 80028ca:	8b39      	ldrh	r1, [r7, #24]
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4403      	add	r3, r0
 80028d8:	3348      	adds	r3, #72	; 0x48
 80028da:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80028dc:	78fa      	ldrb	r2, [r7, #3]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	440b      	add	r3, r1
 80028ea:	335c      	adds	r3, #92	; 0x5c
 80028ec:	2200      	movs	r2, #0
 80028ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80028f0:	78fa      	ldrb	r2, [r7, #3]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	440b      	add	r3, r1
 80028fe:	334c      	adds	r3, #76	; 0x4c
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002904:	78fa      	ldrb	r2, [r7, #3]
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	440b      	add	r3, r1
 8002912:	3339      	adds	r3, #57	; 0x39
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002918:	78fa      	ldrb	r2, [r7, #3]
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	440b      	add	r3, r1
 8002926:	335d      	adds	r3, #93	; 0x5d
 8002928:	2200      	movs	r2, #0
 800292a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	78fa      	ldrb	r2, [r7, #3]
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	3338      	adds	r3, #56	; 0x38
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	18d1      	adds	r1, r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	b2db      	uxtb	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	f003 fe24 	bl	8006594 <USB_HC_StartXfer>
 800294c:	4603      	mov	r3, r0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop

08002958 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f003 fc43 	bl	80061fa <USB_GetMode>
 8002974:	4603      	mov	r3, r0
 8002976:	2b01      	cmp	r3, #1
 8002978:	f040 80f1 	bne.w	8002b5e <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f003 fc27 	bl	80061d4 <USB_ReadInterrupts>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 80e7 	beq.w	8002b5c <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f003 fc1e 	bl	80061d4 <USB_ReadInterrupts>
 8002998:	4603      	mov	r3, r0
 800299a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800299e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029a2:	d104      	bne.n	80029ae <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80029ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f003 fc0e 	bl	80061d4 <USB_ReadInterrupts>
 80029b8:	4603      	mov	r3, r0
 80029ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029c2:	d104      	bne.n	80029ce <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80029cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f003 fbfe 	bl	80061d4 <USB_ReadInterrupts>
 80029d8:	4603      	mov	r3, r0
 80029da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029e2:	d104      	bne.n	80029ee <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80029ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f003 fbee 	bl	80061d4 <USB_ReadInterrupts>
 80029f8:	4603      	mov	r3, r0
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d103      	bne.n	8002a0a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2202      	movs	r2, #2
 8002a08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f003 fbe0 	bl	80061d4 <USB_ReadInterrupts>
 8002a14:	4603      	mov	r3, r0
 8002a16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a1e:	d117      	bne.n	8002a50 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002a2e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002a32:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f006 f8ff 	bl	8008c38 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2101      	movs	r1, #1
 8002a40:	4618      	mov	r0, r3
 8002a42:	f003 fbe8 	bl	8006216 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002a4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f003 fbbd 	bl	80061d4 <USB_ReadInterrupts>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a64:	d102      	bne.n	8002a6c <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f001 f8a6 	bl	8003bb8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f003 fbaf 	bl	80061d4 <USB_ReadInterrupts>
 8002a76:	4603      	mov	r3, r0
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d106      	bne.n	8002a8e <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f006 f8bd 	bl	8008c00 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2208      	movs	r2, #8
 8002a8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f003 fb9e 	bl	80061d4 <USB_ReadInterrupts>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002aa2:	d138      	bne.n	8002b16 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f003 feb7 	bl	800681c <USB_HC_ReadInterrupt>
 8002aae:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	e025      	b.n	8002b02 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f003 030f 	and.w	r3, r3, #15
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d018      	beq.n	8002afc <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	015a      	lsls	r2, r3, #5
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002adc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ae0:	d106      	bne.n	8002af0 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f8ac 	bl	8002c46 <HCD_HC_IN_IRQHandler>
 8002aee:	e005      	b.n	8002afc <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	4619      	mov	r1, r3
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 fc3c 	bl	8003374 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	3301      	adds	r3, #1
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d3d4      	bcc.n	8002ab6 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f003 fb5a 	bl	80061d4 <USB_ReadInterrupts>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f003 0310 	and.w	r3, r3, #16
 8002b26:	2b10      	cmp	r3, #16
 8002b28:	d101      	bne.n	8002b2e <HAL_HCD_IRQHandler+0x1d6>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <HAL_HCD_IRQHandler+0x1d8>
 8002b2e:	2300      	movs	r3, #0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d014      	beq.n	8002b5e <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699a      	ldr	r2, [r3, #24]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0210 	bic.w	r2, r2, #16
 8002b42:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 ff8b 	bl	8003a60 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	699a      	ldr	r2, [r3, #24]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f042 0210 	orr.w	r2, r2, #16
 8002b58:	619a      	str	r2, [r3, #24]
 8002b5a:	e000      	b.n	8002b5e <HAL_HCD_IRQHandler+0x206>
      return;
 8002b5c:	bf00      	nop
    }
  }
}
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <HAL_HCD_Start+0x16>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e013      	b.n	8002ba2 <HAL_HCD_Start+0x3e>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f003 fa5c 	bl	8006044 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2101      	movs	r1, #1
 8002b92:	4618      	mov	r0, r3
 8002b94:	f003 fba3 	bl	80062de <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_HCD_Stop+0x16>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e00d      	b.n	8002bdc <HAL_HCD_Stop+0x32>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f003 ff71 	bl	8006ab4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f003 fb4a 	bl	800628a <USB_ResetPort>
 8002bf6:	4603      	mov	r3, r0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002c0c:	78fa      	ldrb	r2, [r7, #3]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	440b      	add	r3, r1
 8002c1a:	335c      	adds	r3, #92	; 0x5c
 8002c1c:	781b      	ldrb	r3, [r3, #0]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f003 fb8a 	bl	8006350 <USB_GetHostSpeed>
 8002c3c:	4603      	mov	r3, r0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b086      	sub	sp, #24
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	460b      	mov	r3, r1
 8002c50:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002c5c:	78fb      	ldrb	r3, [r7, #3]
 8002c5e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	015a      	lsls	r2, r3, #5
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d119      	bne.n	8002caa <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	015a      	lsls	r2, r3, #5
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c82:	461a      	mov	r2, r3
 8002c84:	2304      	movs	r3, #4
 8002c86:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	0151      	lsls	r1, r2, #5
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	440a      	add	r2, r1
 8002c9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ca2:	f043 0302 	orr.w	r3, r3, #2
 8002ca6:	60d3      	str	r3, [r2, #12]
 8002ca8:	e095      	b.n	8002dd6 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	015a      	lsls	r2, r3, #5
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 0320 	and.w	r3, r3, #32
 8002cbc:	2b20      	cmp	r3, #32
 8002cbe:	d109      	bne.n	8002cd4 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	015a      	lsls	r2, r3, #5
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ccc:	461a      	mov	r2, r3
 8002cce:	2320      	movs	r3, #32
 8002cd0:	6093      	str	r3, [r2, #8]
 8002cd2:	e080      	b.n	8002dd6 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	015a      	lsls	r2, r3, #5
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	2b08      	cmp	r3, #8
 8002ce8:	d134      	bne.n	8002d54 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	015a      	lsls	r2, r3, #5
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	0151      	lsls	r1, r2, #5
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	440a      	add	r2, r1
 8002d00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d04:	f043 0302 	orr.w	r3, r3, #2
 8002d08:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	440b      	add	r3, r1
 8002d18:	335d      	adds	r3, #93	; 0x5d
 8002d1a:	2205      	movs	r2, #5
 8002d1c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	015a      	lsls	r2, r3, #5
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4413      	add	r3, r2
 8002d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	2310      	movs	r3, #16
 8002d2e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	015a      	lsls	r2, r3, #5
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	4413      	add	r3, r2
 8002d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	2308      	movs	r3, #8
 8002d40:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f003 fd76 	bl	800683e <USB_HC_Halt>
 8002d52:	e040      	b.n	8002dd6 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	015a      	lsls	r2, r3, #5
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d6a:	d134      	bne.n	8002dd6 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	0151      	lsls	r1, r2, #5
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	440a      	add	r2, r1
 8002d82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d86:	f043 0302 	orr.w	r3, r3, #2
 8002d8a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	4611      	mov	r1, r2
 8002d96:	4618      	mov	r0, r3
 8002d98:	f003 fd51 	bl	800683e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	015a      	lsls	r2, r3, #5
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	4413      	add	r3, r2
 8002da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da8:	461a      	mov	r2, r3
 8002daa:	2310      	movs	r3, #16
 8002dac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	4613      	mov	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	440b      	add	r3, r1
 8002dbc:	335d      	adds	r3, #93	; 0x5d
 8002dbe:	2208      	movs	r2, #8
 8002dc0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	015a      	lsls	r2, r3, #5
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	4413      	add	r3, r2
 8002dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dce:	461a      	mov	r2, r3
 8002dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dd4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dec:	d122      	bne.n	8002e34 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	0151      	lsls	r1, r2, #5
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	440a      	add	r2, r1
 8002e04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e08:	f043 0302 	orr.w	r3, r3, #2
 8002e0c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	4611      	mov	r1, r2
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f003 fd10 	bl	800683e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	015a      	lsls	r2, r3, #5
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4413      	add	r3, r2
 8002e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e30:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002e32:	e29b      	b.n	800336c <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	f040 80c1 	bne.w	8002fce <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d01b      	beq.n	8002e8c <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	440b      	add	r3, r1
 8002e62:	3348      	adds	r3, #72	; 0x48
 8002e64:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	0159      	lsls	r1, r3, #5
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	440b      	add	r3, r1
 8002e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002e78:	1ad1      	subs	r1, r2, r3
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	4403      	add	r3, r0
 8002e88:	334c      	adds	r3, #76	; 0x4c
 8002e8a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4613      	mov	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	440b      	add	r3, r1
 8002e9a:	335d      	adds	r3, #93	; 0x5d
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	440b      	add	r3, r1
 8002eae:	3358      	adds	r3, #88	; 0x58
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	440b      	add	r3, r1
 8002ed4:	333f      	adds	r3, #63	; 0x3f
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00a      	beq.n	8002ef2 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	440b      	add	r3, r1
 8002eea:	333f      	adds	r3, #63	; 0x3f
 8002eec:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d121      	bne.n	8002f36 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	015a      	lsls	r2, r3, #5
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	4413      	add	r3, r2
 8002efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	0151      	lsls	r1, r2, #5
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	440a      	add	r2, r1
 8002f08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f0c:	f043 0302 	orr.w	r3, r3, #2
 8002f10:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f003 fc8e 	bl	800683e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	015a      	lsls	r2, r3, #5
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	4413      	add	r3, r2
 8002f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2e:	461a      	mov	r2, r3
 8002f30:	2310      	movs	r3, #16
 8002f32:	6093      	str	r3, [r2, #8]
 8002f34:	e034      	b.n	8002fa0 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	440b      	add	r3, r1
 8002f44:	333f      	adds	r3, #63	; 0x3f
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b03      	cmp	r3, #3
 8002f4a:	d129      	bne.n	8002fa0 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	015a      	lsls	r2, r3, #5
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	0151      	lsls	r1, r2, #5
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	440a      	add	r2, r1
 8002f62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f6a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	440b      	add	r3, r1
 8002f7a:	335c      	adds	r3, #92	; 0x5c
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	b2d8      	uxtb	r0, r3
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	440b      	add	r3, r1
 8002f92:	335c      	adds	r3, #92	; 0x5c
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	4601      	mov	r1, r0
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f005 fe5a 	bl	8008c54 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	440b      	add	r3, r1
 8002fae:	3350      	adds	r3, #80	; 0x50
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	f083 0301 	eor.w	r3, r3, #1
 8002fb6:	b2d8      	uxtb	r0, r3
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	440b      	add	r3, r1
 8002fc6:	3350      	adds	r3, #80	; 0x50
 8002fc8:	4602      	mov	r2, r0
 8002fca:	701a      	strb	r2, [r3, #0]
}
 8002fcc:	e1ce      	b.n	800336c <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	015a      	lsls	r2, r3, #5
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	f040 80f1 	bne.w	80031c8 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	015a      	lsls	r2, r3, #5
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	4413      	add	r3, r2
 8002fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	0151      	lsls	r1, r2, #5
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	440a      	add	r2, r1
 8002ffc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003000:	f023 0302 	bic.w	r3, r3, #2
 8003004:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	440b      	add	r3, r1
 8003014:	335d      	adds	r3, #93	; 0x5d
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d10a      	bne.n	8003032 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	440b      	add	r3, r1
 800302a:	335c      	adds	r3, #92	; 0x5c
 800302c:	2201      	movs	r2, #1
 800302e:	701a      	strb	r2, [r3, #0]
 8003030:	e0b0      	b.n	8003194 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	440b      	add	r3, r1
 8003040:	335d      	adds	r3, #93	; 0x5d
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b05      	cmp	r3, #5
 8003046:	d10a      	bne.n	800305e <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	440b      	add	r3, r1
 8003056:	335c      	adds	r3, #92	; 0x5c
 8003058:	2205      	movs	r2, #5
 800305a:	701a      	strb	r2, [r3, #0]
 800305c:	e09a      	b.n	8003194 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	4613      	mov	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	440b      	add	r3, r1
 800306c:	335d      	adds	r3, #93	; 0x5d
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b06      	cmp	r3, #6
 8003072:	d00a      	beq.n	800308a <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	440b      	add	r3, r1
 8003082:	335d      	adds	r3, #93	; 0x5d
 8003084:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003086:	2b08      	cmp	r3, #8
 8003088:	d156      	bne.n	8003138 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	4613      	mov	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	440b      	add	r3, r1
 8003098:	3358      	adds	r3, #88	; 0x58
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	1c59      	adds	r1, r3, #1
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	4613      	mov	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	4403      	add	r3, r0
 80030ac:	3358      	adds	r3, #88	; 0x58
 80030ae:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	4613      	mov	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	440b      	add	r3, r1
 80030be:	3358      	adds	r3, #88	; 0x58
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d914      	bls.n	80030f0 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	440b      	add	r3, r1
 80030d4:	3358      	adds	r3, #88	; 0x58
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	440b      	add	r3, r1
 80030e8:	335c      	adds	r3, #92	; 0x5c
 80030ea:	2204      	movs	r2, #4
 80030ec:	701a      	strb	r2, [r3, #0]
 80030ee:	e009      	b.n	8003104 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	440b      	add	r3, r1
 80030fe:	335c      	adds	r3, #92	; 0x5c
 8003100:	2202      	movs	r2, #2
 8003102:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	015a      	lsls	r2, r3, #5
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4413      	add	r3, r2
 800310c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800311a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003122:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	015a      	lsls	r2, r3, #5
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4413      	add	r3, r2
 800312c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003130:	461a      	mov	r2, r3
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	e02d      	b.n	8003194 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	440b      	add	r3, r1
 8003146:	335d      	adds	r3, #93	; 0x5d
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b03      	cmp	r3, #3
 800314c:	d122      	bne.n	8003194 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	440b      	add	r3, r1
 800315c:	335c      	adds	r3, #92	; 0x5c
 800315e:	2202      	movs	r2, #2
 8003160:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	015a      	lsls	r2, r3, #5
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4413      	add	r3, r2
 800316a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003178:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003180:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	015a      	lsls	r2, r3, #5
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	4413      	add	r3, r2
 800318a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800318e:	461a      	mov	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	015a      	lsls	r2, r3, #5
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	4413      	add	r3, r2
 800319c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a0:	461a      	mov	r2, r3
 80031a2:	2302      	movs	r3, #2
 80031a4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	b2d8      	uxtb	r0, r3
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	4613      	mov	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	440b      	add	r3, r1
 80031b8:	335c      	adds	r3, #92	; 0x5c
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	461a      	mov	r2, r3
 80031be:	4601      	mov	r1, r0
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f005 fd47 	bl	8008c54 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80031c6:	e0d1      	b.n	800336c <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	015a      	lsls	r2, r3, #5
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4413      	add	r3, r2
 80031d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031da:	2b80      	cmp	r3, #128	; 0x80
 80031dc:	d13e      	bne.n	800325c <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	015a      	lsls	r2, r3, #5
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	0151      	lsls	r1, r2, #5
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	440a      	add	r2, r1
 80031f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031f8:	f043 0302 	orr.w	r3, r3, #2
 80031fc:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	440b      	add	r3, r1
 800320c:	3358      	adds	r3, #88	; 0x58
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	1c59      	adds	r1, r3, #1
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4613      	mov	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	4403      	add	r3, r0
 8003220:	3358      	adds	r3, #88	; 0x58
 8003222:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	440b      	add	r3, r1
 8003232:	335d      	adds	r3, #93	; 0x5d
 8003234:	2206      	movs	r2, #6
 8003236:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	4611      	mov	r1, r2
 8003242:	4618      	mov	r0, r3
 8003244:	f003 fafb 	bl	800683e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	4413      	add	r3, r2
 8003250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003254:	461a      	mov	r2, r3
 8003256:	2380      	movs	r3, #128	; 0x80
 8003258:	6093      	str	r3, [r2, #8]
}
 800325a:	e087      	b.n	800336c <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4413      	add	r3, r2
 8003264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 0310 	and.w	r3, r3, #16
 800326e:	2b10      	cmp	r3, #16
 8003270:	d17c      	bne.n	800336c <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	440b      	add	r3, r1
 8003280:	333f      	adds	r3, #63	; 0x3f
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b03      	cmp	r3, #3
 8003286:	d122      	bne.n	80032ce <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	440b      	add	r3, r1
 8003296:	3358      	adds	r3, #88	; 0x58
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	0151      	lsls	r1, r2, #5
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	440a      	add	r2, r1
 80032b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032b6:	f043 0302 	orr.w	r3, r3, #2
 80032ba:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	4611      	mov	r1, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f003 fab9 	bl	800683e <USB_HC_Halt>
 80032cc:	e045      	b.n	800335a <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	440b      	add	r3, r1
 80032dc:	333f      	adds	r3, #63	; 0x3f
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00a      	beq.n	80032fa <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	440b      	add	r3, r1
 80032f2:	333f      	adds	r3, #63	; 0x3f
 80032f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d12f      	bne.n	800335a <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	440b      	add	r3, r1
 8003308:	3358      	adds	r3, #88	; 0x58
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d121      	bne.n	800335a <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4613      	mov	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	440b      	add	r3, r1
 8003324:	335d      	adds	r3, #93	; 0x5d
 8003326:	2203      	movs	r2, #3
 8003328:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4413      	add	r3, r2
 8003332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	0151      	lsls	r1, r2, #5
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	440a      	add	r2, r1
 8003340:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003344:	f043 0302 	orr.w	r3, r3, #2
 8003348:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	4611      	mov	r1, r2
 8003354:	4618      	mov	r0, r3
 8003356:	f003 fa72 	bl	800683e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	015a      	lsls	r2, r3, #5
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	4413      	add	r3, r2
 8003362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003366:	461a      	mov	r2, r3
 8003368:	2310      	movs	r3, #16
 800336a:	6093      	str	r3, [r2, #8]
}
 800336c:	bf00      	nop
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800338a:	78fb      	ldrb	r3, [r7, #3]
 800338c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4413      	add	r3, r2
 8003396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d119      	bne.n	80033d8 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	015a      	lsls	r2, r3, #5
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	4413      	add	r3, r2
 80033ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b0:	461a      	mov	r2, r3
 80033b2:	2304      	movs	r3, #4
 80033b4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	015a      	lsls	r2, r3, #5
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	4413      	add	r3, r2
 80033be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	0151      	lsls	r1, r2, #5
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	440a      	add	r2, r1
 80033cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033d0:	f043 0302 	orr.w	r3, r3, #2
 80033d4:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80033d6:	e33e      	b.n	8003a56 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 0320 	and.w	r3, r3, #32
 80033ea:	2b20      	cmp	r3, #32
 80033ec:	d141      	bne.n	8003472 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033fa:	461a      	mov	r2, r3
 80033fc:	2320      	movs	r3, #32
 80033fe:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	440b      	add	r3, r1
 800340e:	333d      	adds	r3, #61	; 0x3d
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b01      	cmp	r3, #1
 8003414:	f040 831f 	bne.w	8003a56 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	440b      	add	r3, r1
 8003426:	333d      	adds	r3, #61	; 0x3d
 8003428:	2200      	movs	r2, #0
 800342a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	440b      	add	r3, r1
 800343a:	335c      	adds	r3, #92	; 0x5c
 800343c:	2202      	movs	r2, #2
 800343e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	4413      	add	r3, r2
 8003448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	0151      	lsls	r1, r2, #5
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	440a      	add	r2, r1
 8003456:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800345a:	f043 0302 	orr.w	r3, r3, #2
 800345e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	4611      	mov	r1, r2
 800346a:	4618      	mov	r0, r3
 800346c:	f003 f9e7 	bl	800683e <USB_HC_Halt>
}
 8003470:	e2f1      	b.n	8003a56 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	015a      	lsls	r2, r3, #5
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	4413      	add	r3, r2
 800347a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003484:	2b40      	cmp	r3, #64	; 0x40
 8003486:	d13f      	bne.n	8003508 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	440b      	add	r3, r1
 8003496:	335d      	adds	r3, #93	; 0x5d
 8003498:	2204      	movs	r2, #4
 800349a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	4613      	mov	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	440b      	add	r3, r1
 80034aa:	333d      	adds	r3, #61	; 0x3d
 80034ac:	2201      	movs	r2, #1
 80034ae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	440b      	add	r3, r1
 80034be:	3358      	adds	r3, #88	; 0x58
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	015a      	lsls	r2, r3, #5
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	4413      	add	r3, r2
 80034cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	0151      	lsls	r1, r2, #5
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	440a      	add	r2, r1
 80034da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034de:	f043 0302 	orr.w	r3, r3, #2
 80034e2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	4611      	mov	r1, r2
 80034ee:	4618      	mov	r0, r3
 80034f0:	f003 f9a5 	bl	800683e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003500:	461a      	mov	r2, r3
 8003502:	2340      	movs	r3, #64	; 0x40
 8003504:	6093      	str	r3, [r2, #8]
}
 8003506:	e2a6      	b.n	8003a56 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	015a      	lsls	r2, r3, #5
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	4413      	add	r3, r2
 8003510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800351a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800351e:	d122      	bne.n	8003566 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	4413      	add	r3, r2
 8003528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	0151      	lsls	r1, r2, #5
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	440a      	add	r2, r1
 8003536:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800353a:	f043 0302 	orr.w	r3, r3, #2
 800353e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	4611      	mov	r1, r2
 800354a:	4618      	mov	r0, r3
 800354c:	f003 f977 	bl	800683e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	4413      	add	r3, r2
 8003558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355c:	461a      	mov	r2, r3
 800355e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003562:	6093      	str	r3, [r2, #8]
}
 8003564:	e277      	b.n	8003a56 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	4413      	add	r3, r2
 800356e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b01      	cmp	r3, #1
 800357a:	d135      	bne.n	80035e8 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	440b      	add	r3, r1
 800358a:	3358      	adds	r3, #88	; 0x58
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	4413      	add	r3, r2
 8003598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	0151      	lsls	r1, r2, #5
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	440a      	add	r2, r1
 80035a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035aa:	f043 0302 	orr.w	r3, r3, #2
 80035ae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	4611      	mov	r1, r2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f003 f93f 	bl	800683e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035cc:	461a      	mov	r2, r3
 80035ce:	2301      	movs	r3, #1
 80035d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4613      	mov	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	440b      	add	r3, r1
 80035e0:	335d      	adds	r3, #93	; 0x5d
 80035e2:	2201      	movs	r2, #1
 80035e4:	701a      	strb	r2, [r3, #0]
}
 80035e6:	e236      	b.n	8003a56 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b08      	cmp	r3, #8
 80035fc:	d12b      	bne.n	8003656 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4413      	add	r3, r2
 8003606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360a:	461a      	mov	r2, r3
 800360c:	2308      	movs	r3, #8
 800360e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4413      	add	r3, r2
 8003618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	0151      	lsls	r1, r2, #5
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	440a      	add	r2, r1
 8003626:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800362a:	f043 0302 	orr.w	r3, r3, #2
 800362e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	4611      	mov	r1, r2
 800363a:	4618      	mov	r0, r3
 800363c:	f003 f8ff 	bl	800683e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	440b      	add	r3, r1
 800364e:	335d      	adds	r3, #93	; 0x5d
 8003650:	2205      	movs	r2, #5
 8003652:	701a      	strb	r2, [r3, #0]
}
 8003654:	e1ff      	b.n	8003a56 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	015a      	lsls	r2, r3, #5
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	4413      	add	r3, r2
 800365e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 0310 	and.w	r3, r3, #16
 8003668:	2b10      	cmp	r3, #16
 800366a:	d155      	bne.n	8003718 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	440b      	add	r3, r1
 800367a:	3358      	adds	r3, #88	; 0x58
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	4613      	mov	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	440b      	add	r3, r1
 800368e:	335d      	adds	r3, #93	; 0x5d
 8003690:	2203      	movs	r2, #3
 8003692:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	440b      	add	r3, r1
 80036a2:	333d      	adds	r3, #61	; 0x3d
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d114      	bne.n	80036d4 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4613      	mov	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	440b      	add	r3, r1
 80036b8:	333c      	adds	r3, #60	; 0x3c
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d109      	bne.n	80036d4 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	440b      	add	r3, r1
 80036ce:	333d      	adds	r3, #61	; 0x3d
 80036d0:	2201      	movs	r2, #1
 80036d2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	0151      	lsls	r1, r2, #5
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	440a      	add	r2, r1
 80036ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036ee:	f043 0302 	orr.w	r3, r3, #2
 80036f2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	4611      	mov	r1, r2
 80036fe:	4618      	mov	r0, r3
 8003700:	f003 f89d 	bl	800683e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	4413      	add	r3, r2
 800370c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003710:	461a      	mov	r2, r3
 8003712:	2310      	movs	r3, #16
 8003714:	6093      	str	r3, [r2, #8]
}
 8003716:	e19e      	b.n	8003a56 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4413      	add	r3, r2
 8003720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372a:	2b80      	cmp	r3, #128	; 0x80
 800372c:	d12b      	bne.n	8003786 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	015a      	lsls	r2, r3, #5
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	4413      	add	r3, r2
 8003736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	0151      	lsls	r1, r2, #5
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	440a      	add	r2, r1
 8003744:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003748:	f043 0302 	orr.w	r3, r3, #2
 800374c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	4611      	mov	r1, r2
 8003758:	4618      	mov	r0, r3
 800375a:	f003 f870 	bl	800683e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	4613      	mov	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	440b      	add	r3, r1
 800376c:	335d      	adds	r3, #93	; 0x5d
 800376e:	2206      	movs	r2, #6
 8003770:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	015a      	lsls	r2, r3, #5
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	4413      	add	r3, r2
 800377a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377e:	461a      	mov	r2, r3
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	6093      	str	r3, [r2, #8]
}
 8003784:	e167      	b.n	8003a56 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	4413      	add	r3, r2
 800378e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800379c:	d135      	bne.n	800380a <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	015a      	lsls	r2, r3, #5
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	4413      	add	r3, r2
 80037a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	0151      	lsls	r1, r2, #5
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	440a      	add	r2, r1
 80037b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037b8:	f043 0302 	orr.w	r3, r3, #2
 80037bc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	4611      	mov	r1, r2
 80037c8:	4618      	mov	r0, r3
 80037ca:	f003 f838 	bl	800683e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037da:	461a      	mov	r2, r3
 80037dc:	2310      	movs	r3, #16
 80037de:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ec:	461a      	mov	r2, r3
 80037ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	4613      	mov	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	440b      	add	r3, r1
 8003802:	335d      	adds	r3, #93	; 0x5d
 8003804:	2208      	movs	r2, #8
 8003806:	701a      	strb	r2, [r3, #0]
}
 8003808:	e125      	b.n	8003a56 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	015a      	lsls	r2, r3, #5
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	4413      	add	r3, r2
 8003812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b02      	cmp	r3, #2
 800381e:	f040 811a 	bne.w	8003a56 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	015a      	lsls	r2, r3, #5
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	4413      	add	r3, r2
 800382a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	0151      	lsls	r1, r2, #5
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	440a      	add	r2, r1
 8003838:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800383c:	f023 0302 	bic.w	r3, r3, #2
 8003840:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	4613      	mov	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	440b      	add	r3, r1
 8003850:	335d      	adds	r3, #93	; 0x5d
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d137      	bne.n	80038c8 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	4613      	mov	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	440b      	add	r3, r1
 8003866:	335c      	adds	r3, #92	; 0x5c
 8003868:	2201      	movs	r2, #1
 800386a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4613      	mov	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	440b      	add	r3, r1
 800387a:	333f      	adds	r3, #63	; 0x3f
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d00b      	beq.n	800389a <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	4613      	mov	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4413      	add	r3, r2
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	440b      	add	r3, r1
 8003890:	333f      	adds	r3, #63	; 0x3f
 8003892:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003894:	2b03      	cmp	r3, #3
 8003896:	f040 80c5 	bne.w	8003a24 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	440b      	add	r3, r1
 80038a8:	3351      	adds	r3, #81	; 0x51
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	f083 0301 	eor.w	r3, r3, #1
 80038b0:	b2d8      	uxtb	r0, r3
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	440b      	add	r3, r1
 80038c0:	3351      	adds	r3, #81	; 0x51
 80038c2:	4602      	mov	r2, r0
 80038c4:	701a      	strb	r2, [r3, #0]
 80038c6:	e0ad      	b.n	8003a24 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80038c8:	6879      	ldr	r1, [r7, #4]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	440b      	add	r3, r1
 80038d6:	335d      	adds	r3, #93	; 0x5d
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d10a      	bne.n	80038f4 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	440b      	add	r3, r1
 80038ec:	335c      	adds	r3, #92	; 0x5c
 80038ee:	2202      	movs	r2, #2
 80038f0:	701a      	strb	r2, [r3, #0]
 80038f2:	e097      	b.n	8003a24 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	440b      	add	r3, r1
 8003902:	335d      	adds	r3, #93	; 0x5d
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b04      	cmp	r3, #4
 8003908:	d10a      	bne.n	8003920 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4613      	mov	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	440b      	add	r3, r1
 8003918:	335c      	adds	r3, #92	; 0x5c
 800391a:	2202      	movs	r2, #2
 800391c:	701a      	strb	r2, [r3, #0]
 800391e:	e081      	b.n	8003a24 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	440b      	add	r3, r1
 800392e:	335d      	adds	r3, #93	; 0x5d
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b05      	cmp	r3, #5
 8003934:	d10a      	bne.n	800394c <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	4613      	mov	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4413      	add	r3, r2
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	440b      	add	r3, r1
 8003944:	335c      	adds	r3, #92	; 0x5c
 8003946:	2205      	movs	r2, #5
 8003948:	701a      	strb	r2, [r3, #0]
 800394a:	e06b      	b.n	8003a24 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	440b      	add	r3, r1
 800395a:	335d      	adds	r3, #93	; 0x5d
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	2b06      	cmp	r3, #6
 8003960:	d00a      	beq.n	8003978 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	4613      	mov	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	440b      	add	r3, r1
 8003970:	335d      	adds	r3, #93	; 0x5d
 8003972:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003974:	2b08      	cmp	r3, #8
 8003976:	d155      	bne.n	8003a24 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	440b      	add	r3, r1
 8003986:	3358      	adds	r3, #88	; 0x58
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	1c59      	adds	r1, r3, #1
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4613      	mov	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	4403      	add	r3, r0
 800399a:	3358      	adds	r3, #88	; 0x58
 800399c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	4613      	mov	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4413      	add	r3, r2
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	440b      	add	r3, r1
 80039ac:	3358      	adds	r3, #88	; 0x58
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b03      	cmp	r3, #3
 80039b2:	d914      	bls.n	80039de <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80039b4:	6879      	ldr	r1, [r7, #4]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	440b      	add	r3, r1
 80039c2:	3358      	adds	r3, #88	; 0x58
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4613      	mov	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	440b      	add	r3, r1
 80039d6:	335c      	adds	r3, #92	; 0x5c
 80039d8:	2204      	movs	r2, #4
 80039da:	701a      	strb	r2, [r3, #0]
 80039dc:	e009      	b.n	80039f2 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039de:	6879      	ldr	r1, [r7, #4]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	4613      	mov	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	440b      	add	r3, r1
 80039ec:	335c      	adds	r3, #92	; 0x5c
 80039ee:	2202      	movs	r2, #2
 80039f0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a08:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a10:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a1e:	461a      	mov	r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a30:	461a      	mov	r2, r3
 8003a32:	2302      	movs	r3, #2
 8003a34:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	b2d8      	uxtb	r0, r3
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	440b      	add	r3, r1
 8003a48:	335c      	adds	r3, #92	; 0x5c
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4601      	mov	r1, r0
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f005 f8ff 	bl	8008c54 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003a56:	bf00      	nop
 8003a58:	3718      	adds	r7, #24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08a      	sub	sp, #40	; 0x28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	f003 030f 	and.w	r3, r3, #15
 8003a80:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	0c5b      	lsrs	r3, r3, #17
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	091b      	lsrs	r3, r3, #4
 8003a90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a94:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d003      	beq.n	8003aa4 <HCD_RXQLVL_IRQHandler+0x44>
 8003a9c:	2b05      	cmp	r3, #5
 8003a9e:	f000 8082 	beq.w	8003ba6 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003aa2:	e083      	b.n	8003bac <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d07f      	beq.n	8003baa <HCD_RXQLVL_IRQHandler+0x14a>
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	440b      	add	r3, r1
 8003ab8:	3344      	adds	r3, #68	; 0x44
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d074      	beq.n	8003baa <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6818      	ldr	r0, [r3, #0]
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	440b      	add	r3, r1
 8003ad2:	3344      	adds	r3, #68	; 0x44
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	b292      	uxth	r2, r2
 8003ada:	4619      	mov	r1, r3
 8003adc:	f002 fb51 	bl	8006182 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	440b      	add	r3, r1
 8003aee:	3344      	adds	r3, #68	; 0x44
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	18d1      	adds	r1, r2, r3
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	4613      	mov	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	4403      	add	r3, r0
 8003b04:	3344      	adds	r3, #68	; 0x44
 8003b06:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	440b      	add	r3, r1
 8003b16:	334c      	adds	r3, #76	; 0x4c
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	18d1      	adds	r1, r2, r3
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	4403      	add	r3, r0
 8003b2c:	334c      	adds	r3, #76	; 0x4c
 8003b2e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b3c:	691a      	ldr	r2, [r3, #16]
 8003b3e:	4b1d      	ldr	r3, [pc, #116]	; (8003bb4 <HCD_RXQLVL_IRQHandler+0x154>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d031      	beq.n	8003baa <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b5c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b64:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	015a      	lsls	r2, r3, #5
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b72:	461a      	mov	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	440b      	add	r3, r1
 8003b86:	3350      	adds	r3, #80	; 0x50
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	f083 0301 	eor.w	r3, r3, #1
 8003b8e:	b2d8      	uxtb	r0, r3
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	440b      	add	r3, r1
 8003b9e:	3350      	adds	r3, #80	; 0x50
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	701a      	strb	r2, [r3, #0]
      break;
 8003ba4:	e001      	b.n	8003baa <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003ba6:	bf00      	nop
 8003ba8:	e000      	b.n	8003bac <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003baa:	bf00      	nop
  }
}
 8003bac:	bf00      	nop
 8003bae:	3728      	adds	r7, #40	; 0x28
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	1ff80000 	.word	0x1ff80000

08003bb8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003be4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d113      	bne.n	8003c18 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d10a      	bne.n	8003c10 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	699a      	ldr	r2, [r3, #24]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003c08:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f005 f806 	bl	8008c1c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f043 0302 	orr.w	r3, r3, #2
 8003c16:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d147      	bne.n	8003cb2 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f043 0308 	orr.w	r3, r3, #8
 8003c28:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d129      	bne.n	8003c88 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d113      	bne.n	8003c64 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003c42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c46:	d106      	bne.n	8003c56 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2102      	movs	r1, #2
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f002 fae1 	bl	8006216 <USB_InitFSLSPClkSel>
 8003c54:	e011      	b.n	8003c7a <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f002 fada 	bl	8006216 <USB_InitFSLSPClkSel>
 8003c62:	e00a      	b.n	8003c7a <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d106      	bne.n	8003c7a <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c72:	461a      	mov	r2, r3
 8003c74:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003c78:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f004 fff8 	bl	8008c70 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f004 ffcb 	bl	8008c1c <HAL_HCD_Connect_Callback>
 8003c86:	e014      	b.n	8003cb2 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f004 ffff 	bl	8008c8c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003c9c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003ca0:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699a      	ldr	r2, [r3, #24]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003cb0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f003 0320 	and.w	r3, r3, #32
 8003cb8:	2b20      	cmp	r3, #32
 8003cba:	d103      	bne.n	8003cc4 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f043 0320 	orr.w	r3, r3, #32
 8003cc2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003cca:	461a      	mov	r2, r3
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	6013      	str	r3, [r2, #0]
}
 8003cd0:	bf00      	nop
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e0bf      	b.n	8003e6a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d106      	bne.n	8003d04 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f004 fd02 	bl	8008708 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003d1a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6999      	ldr	r1, [r3, #24]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d30:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6899      	ldr	r1, [r3, #8]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	4b4a      	ldr	r3, [pc, #296]	; (8003e74 <HAL_LTDC_Init+0x19c>)
 8003d4c:	400b      	ands	r3, r1
 8003d4e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	041b      	lsls	r3, r3, #16
 8003d56:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6899      	ldr	r1, [r3, #8]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699a      	ldr	r2, [r3, #24]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	431a      	orrs	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68d9      	ldr	r1, [r3, #12]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	4b3e      	ldr	r3, [pc, #248]	; (8003e74 <HAL_LTDC_Init+0x19c>)
 8003d7a:	400b      	ands	r3, r1
 8003d7c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	041b      	lsls	r3, r3, #16
 8003d84:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68d9      	ldr	r1, [r3, #12]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1a      	ldr	r2, [r3, #32]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6919      	ldr	r1, [r3, #16]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	4b33      	ldr	r3, [pc, #204]	; (8003e74 <HAL_LTDC_Init+0x19c>)
 8003da8:	400b      	ands	r3, r1
 8003daa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	041b      	lsls	r3, r3, #16
 8003db2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6919      	ldr	r1, [r3, #16]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6959      	ldr	r1, [r3, #20]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	4b27      	ldr	r3, [pc, #156]	; (8003e74 <HAL_LTDC_Init+0x19c>)
 8003dd6:	400b      	ands	r3, r1
 8003dd8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dde:	041b      	lsls	r3, r3, #16
 8003de0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6959      	ldr	r1, [r3, #20]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dfe:	021b      	lsls	r3, r3, #8
 8003e00:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003e08:	041b      	lsls	r3, r3, #16
 8003e0a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003e1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0206 	orr.w	r2, r2, #6
 8003e46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699a      	ldr	r2, [r3, #24]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0201 	orr.w	r2, r2, #1
 8003e56:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	f000f800 	.word	0xf000f800

08003e78 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e86:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f003 0304 	and.w	r3, r3, #4
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d023      	beq.n	8003ee2 <HAL_LTDC_IRQHandler+0x6a>
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d01e      	beq.n	8003ee2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0204 	bic.w	r2, r2, #4
 8003eb2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2204      	movs	r2, #4
 8003eba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ec2:	f043 0201 	orr.w	r2, r3, #1
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2204      	movs	r2, #4
 8003ed0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f86f 	bl	8003fc0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d023      	beq.n	8003f34 <HAL_LTDC_IRQHandler+0xbc>
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d01e      	beq.n	8003f34 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0202 	bic.w	r2, r2, #2
 8003f04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f14:	f043 0202 	orr.w	r2, r3, #2
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2204      	movs	r2, #4
 8003f22:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f846 	bl	8003fc0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d01b      	beq.n	8003f76 <HAL_LTDC_IRQHandler+0xfe>
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d016      	beq.n	8003f76 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0201 	bic.w	r2, r2, #1
 8003f56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f82f 	bl	8003fd4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d01b      	beq.n	8003fb8 <HAL_LTDC_IRQHandler+0x140>
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d016      	beq.n	8003fb8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0208 	bic.w	r2, r2, #8
 8003f98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2208      	movs	r2, #8
 8003fa0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f818 	bl	8003fe8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003fb8:	bf00      	nop
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003ffc:	b5b0      	push	{r4, r5, r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_LTDC_ConfigLayer+0x1a>
 8004012:	2302      	movs	r3, #2
 8004014:	e02c      	b.n	8004070 <HAL_LTDC_ConfigLayer+0x74>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2202      	movs	r2, #2
 8004022:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2134      	movs	r1, #52	; 0x34
 800402c:	fb01 f303 	mul.w	r3, r1, r3
 8004030:	4413      	add	r3, r2
 8004032:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	4614      	mov	r4, r2
 800403a:	461d      	mov	r5, r3
 800403c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800403e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004048:	682b      	ldr	r3, [r5, #0]
 800404a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	68b9      	ldr	r1, [r7, #8]
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 f81f 	bl	8004094 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2201      	movs	r2, #1
 800405c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bdb0      	pop	{r4, r5, r7, pc}

08004078 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004086:	b2db      	uxtb	r3, r3
}
 8004088:	4618      	mov	r0, r3
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004094:	b480      	push	{r7}
 8004096:	b089      	sub	sp, #36	; 0x24
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	0c1b      	lsrs	r3, r3, #16
 80040ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b0:	4413      	add	r3, r2
 80040b2:	041b      	lsls	r3, r3, #16
 80040b4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	461a      	mov	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	01db      	lsls	r3, r3, #7
 80040c0:	4413      	add	r3, r2
 80040c2:	3384      	adds	r3, #132	; 0x84
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	6812      	ldr	r2, [r2, #0]
 80040ca:	4611      	mov	r1, r2
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	01d2      	lsls	r2, r2, #7
 80040d0:	440a      	add	r2, r1
 80040d2:	3284      	adds	r2, #132	; 0x84
 80040d4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80040d8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	0c1b      	lsrs	r3, r3, #16
 80040e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ea:	4413      	add	r3, r2
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4619      	mov	r1, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	01db      	lsls	r3, r3, #7
 80040f8:	440b      	add	r3, r1
 80040fa:	3384      	adds	r3, #132	; 0x84
 80040fc:	4619      	mov	r1, r3
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	4313      	orrs	r3, r2
 8004102:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004112:	4413      	add	r3, r2
 8004114:	041b      	lsls	r3, r3, #16
 8004116:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	461a      	mov	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	01db      	lsls	r3, r3, #7
 8004122:	4413      	add	r3, r2
 8004124:	3384      	adds	r3, #132	; 0x84
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	6812      	ldr	r2, [r2, #0]
 800412c:	4611      	mov	r1, r2
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	01d2      	lsls	r2, r2, #7
 8004132:	440a      	add	r2, r1
 8004134:	3284      	adds	r2, #132	; 0x84
 8004136:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800413a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800414a:	4413      	add	r3, r2
 800414c:	1c5a      	adds	r2, r3, #1
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4619      	mov	r1, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	01db      	lsls	r3, r3, #7
 8004158:	440b      	add	r3, r1
 800415a:	3384      	adds	r3, #132	; 0x84
 800415c:	4619      	mov	r1, r3
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	4313      	orrs	r3, r2
 8004162:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	461a      	mov	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	01db      	lsls	r3, r3, #7
 800416e:	4413      	add	r3, r2
 8004170:	3384      	adds	r3, #132	; 0x84
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	6812      	ldr	r2, [r2, #0]
 8004178:	4611      	mov	r1, r2
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	01d2      	lsls	r2, r2, #7
 800417e:	440a      	add	r2, r1
 8004180:	3284      	adds	r2, #132	; 0x84
 8004182:	f023 0307 	bic.w	r3, r3, #7
 8004186:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	01db      	lsls	r3, r3, #7
 8004192:	4413      	add	r3, r2
 8004194:	3384      	adds	r3, #132	; 0x84
 8004196:	461a      	mov	r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80041a4:	021b      	lsls	r3, r3, #8
 80041a6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80041ae:	041b      	lsls	r3, r3, #16
 80041b0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	061b      	lsls	r3, r3, #24
 80041b8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	461a      	mov	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	01db      	lsls	r3, r3, #7
 80041c4:	4413      	add	r3, r2
 80041c6:	3384      	adds	r3, #132	; 0x84
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	01db      	lsls	r3, r3, #7
 80041d4:	4413      	add	r3, r2
 80041d6:	3384      	adds	r3, #132	; 0x84
 80041d8:	461a      	mov	r2, r3
 80041da:	2300      	movs	r3, #0
 80041dc:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80041e4:	461a      	mov	r2, r3
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	431a      	orrs	r2, r3
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	431a      	orrs	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4619      	mov	r1, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	01db      	lsls	r3, r3, #7
 80041f8:	440b      	add	r3, r1
 80041fa:	3384      	adds	r3, #132	; 0x84
 80041fc:	4619      	mov	r1, r3
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	4313      	orrs	r3, r2
 8004202:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	461a      	mov	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	01db      	lsls	r3, r3, #7
 800420e:	4413      	add	r3, r2
 8004210:	3384      	adds	r3, #132	; 0x84
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	6812      	ldr	r2, [r2, #0]
 8004218:	4611      	mov	r1, r2
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	01d2      	lsls	r2, r2, #7
 800421e:	440a      	add	r2, r1
 8004220:	3284      	adds	r2, #132	; 0x84
 8004222:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004226:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	461a      	mov	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	01db      	lsls	r3, r3, #7
 8004232:	4413      	add	r3, r2
 8004234:	3384      	adds	r3, #132	; 0x84
 8004236:	461a      	mov	r2, r3
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	461a      	mov	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	01db      	lsls	r3, r3, #7
 8004248:	4413      	add	r3, r2
 800424a:	3384      	adds	r3, #132	; 0x84
 800424c:	69da      	ldr	r2, [r3, #28]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4619      	mov	r1, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	01db      	lsls	r3, r3, #7
 8004258:	440b      	add	r3, r1
 800425a:	3384      	adds	r3, #132	; 0x84
 800425c:	4619      	mov	r1, r3
 800425e:	4b58      	ldr	r3, [pc, #352]	; (80043c0 <LTDC_SetConfig+0x32c>)
 8004260:	4013      	ands	r3, r2
 8004262:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	69da      	ldr	r2, [r3, #28]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	68f9      	ldr	r1, [r7, #12]
 800426e:	6809      	ldr	r1, [r1, #0]
 8004270:	4608      	mov	r0, r1
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	01c9      	lsls	r1, r1, #7
 8004276:	4401      	add	r1, r0
 8004278:	3184      	adds	r1, #132	; 0x84
 800427a:	4313      	orrs	r3, r2
 800427c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	461a      	mov	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	01db      	lsls	r3, r3, #7
 8004288:	4413      	add	r3, r2
 800428a:	3384      	adds	r3, #132	; 0x84
 800428c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	01db      	lsls	r3, r3, #7
 8004298:	4413      	add	r3, r2
 800429a:	3384      	adds	r3, #132	; 0x84
 800429c:	461a      	mov	r2, r3
 800429e:	2300      	movs	r3, #0
 80042a0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	461a      	mov	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	01db      	lsls	r3, r3, #7
 80042ac:	4413      	add	r3, r2
 80042ae:	3384      	adds	r3, #132	; 0x84
 80042b0:	461a      	mov	r2, r3
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d102      	bne.n	80042c6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80042c0:	2304      	movs	r3, #4
 80042c2:	61fb      	str	r3, [r7, #28]
 80042c4:	e01b      	b.n	80042fe <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d102      	bne.n	80042d4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80042ce:	2303      	movs	r3, #3
 80042d0:	61fb      	str	r3, [r7, #28]
 80042d2:	e014      	b.n	80042fe <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d00b      	beq.n	80042f4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d007      	beq.n	80042f4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80042e8:	2b03      	cmp	r3, #3
 80042ea:	d003      	beq.n	80042f4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80042f0:	2b07      	cmp	r3, #7
 80042f2:	d102      	bne.n	80042fa <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80042f4:	2302      	movs	r3, #2
 80042f6:	61fb      	str	r3, [r7, #28]
 80042f8:	e001      	b.n	80042fe <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80042fa:	2301      	movs	r3, #1
 80042fc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	461a      	mov	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	01db      	lsls	r3, r3, #7
 8004308:	4413      	add	r3, r2
 800430a:	3384      	adds	r3, #132	; 0x84
 800430c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	6812      	ldr	r2, [r2, #0]
 8004312:	4611      	mov	r1, r2
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	01d2      	lsls	r2, r2, #7
 8004318:	440a      	add	r2, r1
 800431a:	3284      	adds	r2, #132	; 0x84
 800431c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004320:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004326:	69fa      	ldr	r2, [r7, #28]
 8004328:	fb02 f303 	mul.w	r3, r2, r3
 800432c:	041a      	lsls	r2, r3, #16
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	6859      	ldr	r1, [r3, #4]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	1acb      	subs	r3, r1, r3
 8004338:	69f9      	ldr	r1, [r7, #28]
 800433a:	fb01 f303 	mul.w	r3, r1, r3
 800433e:	3303      	adds	r3, #3
 8004340:	68f9      	ldr	r1, [r7, #12]
 8004342:	6809      	ldr	r1, [r1, #0]
 8004344:	4608      	mov	r0, r1
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	01c9      	lsls	r1, r1, #7
 800434a:	4401      	add	r1, r0
 800434c:	3184      	adds	r1, #132	; 0x84
 800434e:	4313      	orrs	r3, r2
 8004350:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	461a      	mov	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	01db      	lsls	r3, r3, #7
 800435c:	4413      	add	r3, r2
 800435e:	3384      	adds	r3, #132	; 0x84
 8004360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4619      	mov	r1, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	01db      	lsls	r3, r3, #7
 800436c:	440b      	add	r3, r1
 800436e:	3384      	adds	r3, #132	; 0x84
 8004370:	4619      	mov	r1, r3
 8004372:	4b14      	ldr	r3, [pc, #80]	; (80043c4 <LTDC_SetConfig+0x330>)
 8004374:	4013      	ands	r3, r2
 8004376:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	461a      	mov	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	01db      	lsls	r3, r3, #7
 8004382:	4413      	add	r3, r2
 8004384:	3384      	adds	r3, #132	; 0x84
 8004386:	461a      	mov	r2, r3
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	461a      	mov	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	01db      	lsls	r3, r3, #7
 8004398:	4413      	add	r3, r2
 800439a:	3384      	adds	r3, #132	; 0x84
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	6812      	ldr	r2, [r2, #0]
 80043a2:	4611      	mov	r1, r2
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	01d2      	lsls	r2, r2, #7
 80043a8:	440a      	add	r2, r1
 80043aa:	3284      	adds	r2, #132	; 0x84
 80043ac:	f043 0301 	orr.w	r3, r3, #1
 80043b0:	6013      	str	r3, [r2, #0]
}
 80043b2:	bf00      	nop
 80043b4:	3724      	adds	r7, #36	; 0x24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	fffff8f8 	.word	0xfffff8f8
 80043c4:	fffff800 	.word	0xfffff800

080043c8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043cc:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a04      	ldr	r2, [pc, #16]	; (80043e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d6:	6013      	str	r3, [r2, #0]
}
 80043d8:	bf00      	nop
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40007000 	.word	0x40007000

080043e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80043ee:	2300      	movs	r3, #0
 80043f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80043f2:	4b23      	ldr	r3, [pc, #140]	; (8004480 <HAL_PWREx_EnableOverDrive+0x98>)
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	4a22      	ldr	r2, [pc, #136]	; (8004480 <HAL_PWREx_EnableOverDrive+0x98>)
 80043f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043fc:	6413      	str	r3, [r2, #64]	; 0x40
 80043fe:	4b20      	ldr	r3, [pc, #128]	; (8004480 <HAL_PWREx_EnableOverDrive+0x98>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004406:	603b      	str	r3, [r7, #0]
 8004408:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800440a:	4b1e      	ldr	r3, [pc, #120]	; (8004484 <HAL_PWREx_EnableOverDrive+0x9c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a1d      	ldr	r2, [pc, #116]	; (8004484 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004414:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004416:	f7fd f843 	bl	80014a0 <HAL_GetTick>
 800441a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800441c:	e009      	b.n	8004432 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800441e:	f7fd f83f 	bl	80014a0 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800442c:	d901      	bls.n	8004432 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e022      	b.n	8004478 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004432:	4b14      	ldr	r3, [pc, #80]	; (8004484 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800443a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800443e:	d1ee      	bne.n	800441e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004440:	4b10      	ldr	r3, [pc, #64]	; (8004484 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a0f      	ldr	r2, [pc, #60]	; (8004484 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800444a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800444c:	f7fd f828 	bl	80014a0 <HAL_GetTick>
 8004450:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004452:	e009      	b.n	8004468 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004454:	f7fd f824 	bl	80014a0 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004462:	d901      	bls.n	8004468 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e007      	b.n	8004478 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004468:	4b06      	ldr	r3, [pc, #24]	; (8004484 <HAL_PWREx_EnableOverDrive+0x9c>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004470:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004474:	d1ee      	bne.n	8004454 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40023800 	.word	0x40023800
 8004484:	40007000 	.word	0x40007000

08004488 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8004490:	2300      	movs	r3, #0
 8004492:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e25c      	b.n	8004958 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 8087 	beq.w	80045ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044ac:	4b96      	ldr	r3, [pc, #600]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 030c 	and.w	r3, r3, #12
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d00c      	beq.n	80044d2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044b8:	4b93      	ldr	r3, [pc, #588]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f003 030c 	and.w	r3, r3, #12
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d112      	bne.n	80044ea <HAL_RCC_OscConfig+0x62>
 80044c4:	4b90      	ldr	r3, [pc, #576]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044d0:	d10b      	bne.n	80044ea <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d2:	4b8d      	ldr	r3, [pc, #564]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d06c      	beq.n	80045b8 <HAL_RCC_OscConfig+0x130>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d168      	bne.n	80045b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e236      	b.n	8004958 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f2:	d106      	bne.n	8004502 <HAL_RCC_OscConfig+0x7a>
 80044f4:	4b84      	ldr	r3, [pc, #528]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a83      	ldr	r2, [pc, #524]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 80044fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044fe:	6013      	str	r3, [r2, #0]
 8004500:	e02e      	b.n	8004560 <HAL_RCC_OscConfig+0xd8>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10c      	bne.n	8004524 <HAL_RCC_OscConfig+0x9c>
 800450a:	4b7f      	ldr	r3, [pc, #508]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a7e      	ldr	r2, [pc, #504]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 8004510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	4b7c      	ldr	r3, [pc, #496]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a7b      	ldr	r2, [pc, #492]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 800451c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	e01d      	b.n	8004560 <HAL_RCC_OscConfig+0xd8>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800452c:	d10c      	bne.n	8004548 <HAL_RCC_OscConfig+0xc0>
 800452e:	4b76      	ldr	r3, [pc, #472]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a75      	ldr	r2, [pc, #468]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 8004534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	4b73      	ldr	r3, [pc, #460]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a72      	ldr	r2, [pc, #456]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 8004540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	e00b      	b.n	8004560 <HAL_RCC_OscConfig+0xd8>
 8004548:	4b6f      	ldr	r3, [pc, #444]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a6e      	ldr	r2, [pc, #440]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 800454e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004552:	6013      	str	r3, [r2, #0]
 8004554:	4b6c      	ldr	r3, [pc, #432]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a6b      	ldr	r2, [pc, #428]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 800455a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800455e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d013      	beq.n	8004590 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004568:	f7fc ff9a 	bl	80014a0 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004570:	f7fc ff96 	bl	80014a0 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b64      	cmp	r3, #100	; 0x64
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e1ea      	b.n	8004958 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004582:	4b61      	ldr	r3, [pc, #388]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f0      	beq.n	8004570 <HAL_RCC_OscConfig+0xe8>
 800458e:	e014      	b.n	80045ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004590:	f7fc ff86 	bl	80014a0 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004598:	f7fc ff82 	bl	80014a0 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b64      	cmp	r3, #100	; 0x64
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e1d6      	b.n	8004958 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045aa:	4b57      	ldr	r3, [pc, #348]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1f0      	bne.n	8004598 <HAL_RCC_OscConfig+0x110>
 80045b6:	e000      	b.n	80045ba <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d069      	beq.n	800469a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045c6:	4b50      	ldr	r3, [pc, #320]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 030c 	and.w	r3, r3, #12
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00b      	beq.n	80045ea <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045d2:	4b4d      	ldr	r3, [pc, #308]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 030c 	and.w	r3, r3, #12
 80045da:	2b08      	cmp	r3, #8
 80045dc:	d11c      	bne.n	8004618 <HAL_RCC_OscConfig+0x190>
 80045de:	4b4a      	ldr	r3, [pc, #296]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d116      	bne.n	8004618 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ea:	4b47      	ldr	r3, [pc, #284]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d005      	beq.n	8004602 <HAL_RCC_OscConfig+0x17a>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d001      	beq.n	8004602 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e1aa      	b.n	8004958 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004602:	4b41      	ldr	r3, [pc, #260]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	493d      	ldr	r1, [pc, #244]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 8004612:	4313      	orrs	r3, r2
 8004614:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004616:	e040      	b.n	800469a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d023      	beq.n	8004668 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004620:	4b39      	ldr	r3, [pc, #228]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a38      	ldr	r2, [pc, #224]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 8004626:	f043 0301 	orr.w	r3, r3, #1
 800462a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462c:	f7fc ff38 	bl	80014a0 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004634:	f7fc ff34 	bl	80014a0 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e188      	b.n	8004958 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004646:	4b30      	ldr	r3, [pc, #192]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0f0      	beq.n	8004634 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004652:	4b2d      	ldr	r3, [pc, #180]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	4929      	ldr	r1, [pc, #164]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 8004662:	4313      	orrs	r3, r2
 8004664:	600b      	str	r3, [r1, #0]
 8004666:	e018      	b.n	800469a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004668:	4b27      	ldr	r3, [pc, #156]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a26      	ldr	r2, [pc, #152]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 800466e:	f023 0301 	bic.w	r3, r3, #1
 8004672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004674:	f7fc ff14 	bl	80014a0 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800467c:	f7fc ff10 	bl	80014a0 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e164      	b.n	8004958 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800468e:	4b1e      	ldr	r3, [pc, #120]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f0      	bne.n	800467c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d038      	beq.n	8004718 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d019      	beq.n	80046e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046ae:	4b16      	ldr	r3, [pc, #88]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 80046b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046b2:	4a15      	ldr	r2, [pc, #84]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 80046b4:	f043 0301 	orr.w	r3, r3, #1
 80046b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ba:	f7fc fef1 	bl	80014a0 <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046c2:	f7fc feed 	bl	80014a0 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e141      	b.n	8004958 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046d4:	4b0c      	ldr	r3, [pc, #48]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 80046d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0f0      	beq.n	80046c2 <HAL_RCC_OscConfig+0x23a>
 80046e0:	e01a      	b.n	8004718 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046e2:	4b09      	ldr	r3, [pc, #36]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 80046e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046e6:	4a08      	ldr	r2, [pc, #32]	; (8004708 <HAL_RCC_OscConfig+0x280>)
 80046e8:	f023 0301 	bic.w	r3, r3, #1
 80046ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ee:	f7fc fed7 	bl	80014a0 <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046f4:	e00a      	b.n	800470c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046f6:	f7fc fed3 	bl	80014a0 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d903      	bls.n	800470c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e127      	b.n	8004958 <HAL_RCC_OscConfig+0x4d0>
 8004708:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800470c:	4b94      	ldr	r3, [pc, #592]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 800470e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1ee      	bne.n	80046f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 80a4 	beq.w	800486e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004726:	4b8e      	ldr	r3, [pc, #568]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10d      	bne.n	800474e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004732:	4b8b      	ldr	r3, [pc, #556]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	4a8a      	ldr	r2, [pc, #552]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 8004738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800473c:	6413      	str	r3, [r2, #64]	; 0x40
 800473e:	4b88      	ldr	r3, [pc, #544]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800474a:	2301      	movs	r3, #1
 800474c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800474e:	4b85      	ldr	r3, [pc, #532]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004756:	2b00      	cmp	r3, #0
 8004758:	d118      	bne.n	800478c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800475a:	4b82      	ldr	r3, [pc, #520]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a81      	ldr	r2, [pc, #516]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 8004760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004766:	f7fc fe9b 	bl	80014a0 <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800476e:	f7fc fe97 	bl	80014a0 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b64      	cmp	r3, #100	; 0x64
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e0eb      	b.n	8004958 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004780:	4b78      	ldr	r3, [pc, #480]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0f0      	beq.n	800476e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d106      	bne.n	80047a2 <HAL_RCC_OscConfig+0x31a>
 8004794:	4b72      	ldr	r3, [pc, #456]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 8004796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004798:	4a71      	ldr	r2, [pc, #452]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 800479a:	f043 0301 	orr.w	r3, r3, #1
 800479e:	6713      	str	r3, [r2, #112]	; 0x70
 80047a0:	e02d      	b.n	80047fe <HAL_RCC_OscConfig+0x376>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10c      	bne.n	80047c4 <HAL_RCC_OscConfig+0x33c>
 80047aa:	4b6d      	ldr	r3, [pc, #436]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 80047ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ae:	4a6c      	ldr	r2, [pc, #432]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 80047b0:	f023 0301 	bic.w	r3, r3, #1
 80047b4:	6713      	str	r3, [r2, #112]	; 0x70
 80047b6:	4b6a      	ldr	r3, [pc, #424]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 80047b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ba:	4a69      	ldr	r2, [pc, #420]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 80047bc:	f023 0304 	bic.w	r3, r3, #4
 80047c0:	6713      	str	r3, [r2, #112]	; 0x70
 80047c2:	e01c      	b.n	80047fe <HAL_RCC_OscConfig+0x376>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	2b05      	cmp	r3, #5
 80047ca:	d10c      	bne.n	80047e6 <HAL_RCC_OscConfig+0x35e>
 80047cc:	4b64      	ldr	r3, [pc, #400]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 80047ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d0:	4a63      	ldr	r2, [pc, #396]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 80047d2:	f043 0304 	orr.w	r3, r3, #4
 80047d6:	6713      	str	r3, [r2, #112]	; 0x70
 80047d8:	4b61      	ldr	r3, [pc, #388]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 80047da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047dc:	4a60      	ldr	r2, [pc, #384]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 80047de:	f043 0301 	orr.w	r3, r3, #1
 80047e2:	6713      	str	r3, [r2, #112]	; 0x70
 80047e4:	e00b      	b.n	80047fe <HAL_RCC_OscConfig+0x376>
 80047e6:	4b5e      	ldr	r3, [pc, #376]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 80047e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ea:	4a5d      	ldr	r2, [pc, #372]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 80047ec:	f023 0301 	bic.w	r3, r3, #1
 80047f0:	6713      	str	r3, [r2, #112]	; 0x70
 80047f2:	4b5b      	ldr	r3, [pc, #364]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 80047f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f6:	4a5a      	ldr	r2, [pc, #360]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 80047f8:	f023 0304 	bic.w	r3, r3, #4
 80047fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d015      	beq.n	8004832 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004806:	f7fc fe4b 	bl	80014a0 <HAL_GetTick>
 800480a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800480c:	e00a      	b.n	8004824 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800480e:	f7fc fe47 	bl	80014a0 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	f241 3288 	movw	r2, #5000	; 0x1388
 800481c:	4293      	cmp	r3, r2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e099      	b.n	8004958 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004824:	4b4e      	ldr	r3, [pc, #312]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 8004826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0ee      	beq.n	800480e <HAL_RCC_OscConfig+0x386>
 8004830:	e014      	b.n	800485c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004832:	f7fc fe35 	bl	80014a0 <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004838:	e00a      	b.n	8004850 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800483a:	f7fc fe31 	bl	80014a0 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	f241 3288 	movw	r2, #5000	; 0x1388
 8004848:	4293      	cmp	r3, r2
 800484a:	d901      	bls.n	8004850 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e083      	b.n	8004958 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004850:	4b43      	ldr	r3, [pc, #268]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 8004852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1ee      	bne.n	800483a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800485c:	7dfb      	ldrb	r3, [r7, #23]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d105      	bne.n	800486e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004862:	4b3f      	ldr	r3, [pc, #252]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	4a3e      	ldr	r2, [pc, #248]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 8004868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800486c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d06f      	beq.n	8004956 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004876:	4b3a      	ldr	r3, [pc, #232]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 030c 	and.w	r3, r3, #12
 800487e:	2b08      	cmp	r3, #8
 8004880:	d067      	beq.n	8004952 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	2b02      	cmp	r3, #2
 8004888:	d149      	bne.n	800491e <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800488a:	4b35      	ldr	r3, [pc, #212]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a34      	ldr	r2, [pc, #208]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 8004890:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004894:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004896:	f7fc fe03 	bl	80014a0 <HAL_GetTick>
 800489a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800489c:	e008      	b.n	80048b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800489e:	f7fc fdff 	bl	80014a0 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e053      	b.n	8004958 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048b0:	4b2b      	ldr	r3, [pc, #172]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1f0      	bne.n	800489e <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	69da      	ldr	r2, [r3, #28]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	431a      	orrs	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	019b      	lsls	r3, r3, #6
 80048cc:	431a      	orrs	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d2:	085b      	lsrs	r3, r3, #1
 80048d4:	3b01      	subs	r3, #1
 80048d6:	041b      	lsls	r3, r3, #16
 80048d8:	431a      	orrs	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048de:	061b      	lsls	r3, r3, #24
 80048e0:	4313      	orrs	r3, r2
 80048e2:	4a1f      	ldr	r2, [pc, #124]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 80048e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048e8:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048ea:	4b1d      	ldr	r3, [pc, #116]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a1c      	ldr	r2, [pc, #112]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 80048f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f6:	f7fc fdd3 	bl	80014a0 <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048fc:	e008      	b.n	8004910 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048fe:	f7fc fdcf 	bl	80014a0 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e023      	b.n	8004958 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004910:	4b13      	ldr	r3, [pc, #76]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0f0      	beq.n	80048fe <HAL_RCC_OscConfig+0x476>
 800491c:	e01b      	b.n	8004956 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800491e:	4b10      	ldr	r3, [pc, #64]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a0f      	ldr	r2, [pc, #60]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 8004924:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492a:	f7fc fdb9 	bl	80014a0 <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004930:	e008      	b.n	8004944 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004932:	f7fc fdb5 	bl	80014a0 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e009      	b.n	8004958 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004944:	4b06      	ldr	r3, [pc, #24]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1f0      	bne.n	8004932 <HAL_RCC_OscConfig+0x4aa>
 8004950:	e001      	b.n	8004956 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e000      	b.n	8004958 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3718      	adds	r7, #24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40023800 	.word	0x40023800
 8004964:	40007000 	.word	0x40007000

08004968 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e0ce      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004980:	4b69      	ldr	r3, [pc, #420]	; (8004b28 <HAL_RCC_ClockConfig+0x1c0>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 030f 	and.w	r3, r3, #15
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d910      	bls.n	80049b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498e:	4b66      	ldr	r3, [pc, #408]	; (8004b28 <HAL_RCC_ClockConfig+0x1c0>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f023 020f 	bic.w	r2, r3, #15
 8004996:	4964      	ldr	r1, [pc, #400]	; (8004b28 <HAL_RCC_ClockConfig+0x1c0>)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	4313      	orrs	r3, r2
 800499c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800499e:	4b62      	ldr	r3, [pc, #392]	; (8004b28 <HAL_RCC_ClockConfig+0x1c0>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d001      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e0b6      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d020      	beq.n	80049fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049c8:	4b58      	ldr	r3, [pc, #352]	; (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	4a57      	ldr	r2, [pc, #348]	; (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 80049ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0308 	and.w	r3, r3, #8
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d005      	beq.n	80049ec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049e0:	4b52      	ldr	r3, [pc, #328]	; (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	4a51      	ldr	r2, [pc, #324]	; (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 80049e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ec:	4b4f      	ldr	r3, [pc, #316]	; (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	494c      	ldr	r1, [pc, #304]	; (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d040      	beq.n	8004a8c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d107      	bne.n	8004a22 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a12:	4b46      	ldr	r3, [pc, #280]	; (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d115      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e07d      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d107      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a2a:	4b40      	ldr	r3, [pc, #256]	; (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d109      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e071      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3a:	4b3c      	ldr	r3, [pc, #240]	; (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e069      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a4a:	4b38      	ldr	r3, [pc, #224]	; (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f023 0203 	bic.w	r2, r3, #3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	4935      	ldr	r1, [pc, #212]	; (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a5c:	f7fc fd20 	bl	80014a0 <HAL_GetTick>
 8004a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a62:	e00a      	b.n	8004a7a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a64:	f7fc fd1c 	bl	80014a0 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e051      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7a:	4b2c      	ldr	r3, [pc, #176]	; (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 020c 	and.w	r2, r3, #12
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d1eb      	bne.n	8004a64 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a8c:	4b26      	ldr	r3, [pc, #152]	; (8004b28 <HAL_RCC_ClockConfig+0x1c0>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 030f 	and.w	r3, r3, #15
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d210      	bcs.n	8004abc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a9a:	4b23      	ldr	r3, [pc, #140]	; (8004b28 <HAL_RCC_ClockConfig+0x1c0>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f023 020f 	bic.w	r2, r3, #15
 8004aa2:	4921      	ldr	r1, [pc, #132]	; (8004b28 <HAL_RCC_ClockConfig+0x1c0>)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aaa:	4b1f      	ldr	r3, [pc, #124]	; (8004b28 <HAL_RCC_ClockConfig+0x1c0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d001      	beq.n	8004abc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e030      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d008      	beq.n	8004ada <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ac8:	4b18      	ldr	r3, [pc, #96]	; (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	4915      	ldr	r1, [pc, #84]	; (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0308 	and.w	r3, r3, #8
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d009      	beq.n	8004afa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ae6:	4b11      	ldr	r3, [pc, #68]	; (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	490d      	ldr	r1, [pc, #52]	; (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004afa:	f000 f81d 	bl	8004b38 <HAL_RCC_GetSysClockFreq>
 8004afe:	4601      	mov	r1, r0
 8004b00:	4b0a      	ldr	r3, [pc, #40]	; (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	091b      	lsrs	r3, r3, #4
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	4a09      	ldr	r2, [pc, #36]	; (8004b30 <HAL_RCC_ClockConfig+0x1c8>)
 8004b0c:	5cd3      	ldrb	r3, [r2, r3]
 8004b0e:	fa21 f303 	lsr.w	r3, r1, r3
 8004b12:	4a08      	ldr	r2, [pc, #32]	; (8004b34 <HAL_RCC_ClockConfig+0x1cc>)
 8004b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004b16:	2000      	movs	r0, #0
 8004b18:	f7fc fc92 	bl	8001440 <HAL_InitTick>

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	40023c00 	.word	0x40023c00
 8004b2c:	40023800 	.word	0x40023800
 8004b30:	0800ce6c 	.word	0x0800ce6c
 8004b34:	20000014 	.word	0x20000014

08004b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	607b      	str	r3, [r7, #4]
 8004b42:	2300      	movs	r3, #0
 8004b44:	60fb      	str	r3, [r7, #12]
 8004b46:	2300      	movs	r3, #0
 8004b48:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b4e:	4b50      	ldr	r3, [pc, #320]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x158>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 030c 	and.w	r3, r3, #12
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d007      	beq.n	8004b6a <HAL_RCC_GetSysClockFreq+0x32>
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	d008      	beq.n	8004b70 <HAL_RCC_GetSysClockFreq+0x38>
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f040 808d 	bne.w	8004c7e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b64:	4b4b      	ldr	r3, [pc, #300]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004b66:	60bb      	str	r3, [r7, #8]
       break;
 8004b68:	e08c      	b.n	8004c84 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b6a:	4b4b      	ldr	r3, [pc, #300]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b6c:	60bb      	str	r3, [r7, #8]
      break;
 8004b6e:	e089      	b.n	8004c84 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b70:	4b47      	ldr	r3, [pc, #284]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x158>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b78:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004b7a:	4b45      	ldr	r3, [pc, #276]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x158>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d023      	beq.n	8004bce <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b86:	4b42      	ldr	r3, [pc, #264]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x158>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	099b      	lsrs	r3, r3, #6
 8004b8c:	f04f 0400 	mov.w	r4, #0
 8004b90:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	ea03 0501 	and.w	r5, r3, r1
 8004b9c:	ea04 0602 	and.w	r6, r4, r2
 8004ba0:	4a3d      	ldr	r2, [pc, #244]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x160>)
 8004ba2:	fb02 f106 	mul.w	r1, r2, r6
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	fb02 f205 	mul.w	r2, r2, r5
 8004bac:	440a      	add	r2, r1
 8004bae:	493a      	ldr	r1, [pc, #232]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x160>)
 8004bb0:	fba5 0101 	umull	r0, r1, r5, r1
 8004bb4:	1853      	adds	r3, r2, r1
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f04f 0400 	mov.w	r4, #0
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	4623      	mov	r3, r4
 8004bc2:	f7fb fb21 	bl	8000208 <__aeabi_uldivmod>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	460c      	mov	r4, r1
 8004bca:	60fb      	str	r3, [r7, #12]
 8004bcc:	e049      	b.n	8004c62 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bce:	4b30      	ldr	r3, [pc, #192]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x158>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	099b      	lsrs	r3, r3, #6
 8004bd4:	f04f 0400 	mov.w	r4, #0
 8004bd8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	ea03 0501 	and.w	r5, r3, r1
 8004be4:	ea04 0602 	and.w	r6, r4, r2
 8004be8:	4629      	mov	r1, r5
 8004bea:	4632      	mov	r2, r6
 8004bec:	f04f 0300 	mov.w	r3, #0
 8004bf0:	f04f 0400 	mov.w	r4, #0
 8004bf4:	0154      	lsls	r4, r2, #5
 8004bf6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004bfa:	014b      	lsls	r3, r1, #5
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4622      	mov	r2, r4
 8004c00:	1b49      	subs	r1, r1, r5
 8004c02:	eb62 0206 	sbc.w	r2, r2, r6
 8004c06:	f04f 0300 	mov.w	r3, #0
 8004c0a:	f04f 0400 	mov.w	r4, #0
 8004c0e:	0194      	lsls	r4, r2, #6
 8004c10:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c14:	018b      	lsls	r3, r1, #6
 8004c16:	1a5b      	subs	r3, r3, r1
 8004c18:	eb64 0402 	sbc.w	r4, r4, r2
 8004c1c:	f04f 0100 	mov.w	r1, #0
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	00e2      	lsls	r2, r4, #3
 8004c26:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c2a:	00d9      	lsls	r1, r3, #3
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	4614      	mov	r4, r2
 8004c30:	195b      	adds	r3, r3, r5
 8004c32:	eb44 0406 	adc.w	r4, r4, r6
 8004c36:	f04f 0100 	mov.w	r1, #0
 8004c3a:	f04f 0200 	mov.w	r2, #0
 8004c3e:	02a2      	lsls	r2, r4, #10
 8004c40:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004c44:	0299      	lsls	r1, r3, #10
 8004c46:	460b      	mov	r3, r1
 8004c48:	4614      	mov	r4, r2
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	4621      	mov	r1, r4
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f04f 0400 	mov.w	r4, #0
 8004c54:	461a      	mov	r2, r3
 8004c56:	4623      	mov	r3, r4
 8004c58:	f7fb fad6 	bl	8000208 <__aeabi_uldivmod>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	460c      	mov	r4, r1
 8004c60:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8004c62:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x158>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	0c1b      	lsrs	r3, r3, #16
 8004c68:	f003 0303 	and.w	r3, r3, #3
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7a:	60bb      	str	r3, [r7, #8]
      break;
 8004c7c:	e002      	b.n	8004c84 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c7e:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004c80:	60bb      	str	r3, [r7, #8]
      break;
 8004c82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c84:	68bb      	ldr	r3, [r7, #8]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	40023800 	.word	0x40023800
 8004c94:	00f42400 	.word	0x00f42400
 8004c98:	017d7840 	.word	0x017d7840

08004c9c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ca0:	4b03      	ldr	r3, [pc, #12]	; (8004cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	20000014 	.word	0x20000014

08004cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004cb8:	f7ff fff0 	bl	8004c9c <HAL_RCC_GetHCLKFreq>
 8004cbc:	4601      	mov	r1, r0
 8004cbe:	4b05      	ldr	r3, [pc, #20]	; (8004cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	0a9b      	lsrs	r3, r3, #10
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	4a03      	ldr	r2, [pc, #12]	; (8004cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cca:	5cd3      	ldrb	r3, [r2, r3]
 8004ccc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	0800ce7c 	.word	0x0800ce7c

08004cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ce0:	f7ff ffdc 	bl	8004c9c <HAL_RCC_GetHCLKFreq>
 8004ce4:	4601      	mov	r1, r0
 8004ce6:	4b05      	ldr	r3, [pc, #20]	; (8004cfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	0b5b      	lsrs	r3, r3, #13
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	4a03      	ldr	r2, [pc, #12]	; (8004d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cf2:	5cd3      	ldrb	r3, [r2, r3]
 8004cf4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	40023800 	.word	0x40023800
 8004d00:	0800ce7c 	.word	0x0800ce7c

08004d04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b088      	sub	sp, #32
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004d10:	2300      	movs	r3, #0
 8004d12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004d14:	2300      	movs	r3, #0
 8004d16:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d012      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d2c:	4b69      	ldr	r3, [pc, #420]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	4a68      	ldr	r2, [pc, #416]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d32:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004d36:	6093      	str	r3, [r2, #8]
 8004d38:	4b66      	ldr	r3, [pc, #408]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d40:	4964      	ldr	r1, [pc, #400]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d017      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d5e:	4b5d      	ldr	r3, [pc, #372]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6c:	4959      	ldr	r1, [pc, #356]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d7c:	d101      	bne.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d017      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d9a:	4b4e      	ldr	r3, [pc, #312]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004da0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da8:	494a      	ldr	r1, [pc, #296]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004db8:	d101      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0320 	and.w	r3, r3, #32
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 808b 	beq.w	8004efe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004de8:	4b3a      	ldr	r3, [pc, #232]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	4a39      	ldr	r2, [pc, #228]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004df2:	6413      	str	r3, [r2, #64]	; 0x40
 8004df4:	4b37      	ldr	r3, [pc, #220]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfc:	60bb      	str	r3, [r7, #8]
 8004dfe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e00:	4b35      	ldr	r3, [pc, #212]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a34      	ldr	r2, [pc, #208]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e0c:	f7fc fb48 	bl	80014a0 <HAL_GetTick>
 8004e10:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e12:	e008      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e14:	f7fc fb44 	bl	80014a0 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b64      	cmp	r3, #100	; 0x64
 8004e20:	d901      	bls.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e355      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e26:	4b2c      	ldr	r3, [pc, #176]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0f0      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e32:	4b28      	ldr	r3, [pc, #160]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e3a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d035      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d02e      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e50:	4b20      	ldr	r3, [pc, #128]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e58:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e5a:	4b1e      	ldr	r3, [pc, #120]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5e:	4a1d      	ldr	r2, [pc, #116]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e64:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e66:	4b1b      	ldr	r3, [pc, #108]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6a:	4a1a      	ldr	r2, [pc, #104]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e70:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004e72:	4a18      	ldr	r2, [pc, #96]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e78:	4b16      	ldr	r3, [pc, #88]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d114      	bne.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e84:	f7fc fb0c 	bl	80014a0 <HAL_GetTick>
 8004e88:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e8a:	e00a      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e8c:	f7fc fb08 	bl	80014a0 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e317      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea2:	4b0c      	ldr	r3, [pc, #48]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d0ee      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eba:	d111      	bne.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004ebc:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ec8:	4b04      	ldr	r3, [pc, #16]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004eca:	400b      	ands	r3, r1
 8004ecc:	4901      	ldr	r1, [pc, #4]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	608b      	str	r3, [r1, #8]
 8004ed2:	e00b      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	40007000 	.word	0x40007000
 8004edc:	0ffffcff 	.word	0x0ffffcff
 8004ee0:	4bb0      	ldr	r3, [pc, #704]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	4aaf      	ldr	r2, [pc, #700]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004ee6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004eea:	6093      	str	r3, [r2, #8]
 8004eec:	4bad      	ldr	r3, [pc, #692]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004eee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ef8:	49aa      	ldr	r1, [pc, #680]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0310 	and.w	r3, r3, #16
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d010      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f0a:	4ba6      	ldr	r3, [pc, #664]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f10:	4aa4      	ldr	r2, [pc, #656]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004f1a:	4ba2      	ldr	r3, [pc, #648]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f24:	499f      	ldr	r1, [pc, #636]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00a      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f38:	4b9a      	ldr	r3, [pc, #616]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f46:	4997      	ldr	r1, [pc, #604]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f5a:	4b92      	ldr	r3, [pc, #584]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f68:	498e      	ldr	r1, [pc, #568]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00a      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f7c:	4b89      	ldr	r3, [pc, #548]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f8a:	4986      	ldr	r1, [pc, #536]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f9e:	4b81      	ldr	r3, [pc, #516]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fac:	497d      	ldr	r1, [pc, #500]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00a      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fc0:	4b78      	ldr	r3, [pc, #480]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc6:	f023 0203 	bic.w	r2, r3, #3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fce:	4975      	ldr	r1, [pc, #468]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fe2:	4b70      	ldr	r3, [pc, #448]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe8:	f023 020c 	bic.w	r2, r3, #12
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ff0:	496c      	ldr	r1, [pc, #432]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00a      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005004:	4b67      	ldr	r3, [pc, #412]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005012:	4964      	ldr	r1, [pc, #400]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005014:	4313      	orrs	r3, r2
 8005016:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00a      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005026:	4b5f      	ldr	r3, [pc, #380]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005034:	495b      	ldr	r1, [pc, #364]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005036:	4313      	orrs	r3, r2
 8005038:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00a      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005048:	4b56      	ldr	r3, [pc, #344]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800504a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005056:	4953      	ldr	r1, [pc, #332]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005058:	4313      	orrs	r3, r2
 800505a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00a      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800506a:	4b4e      	ldr	r3, [pc, #312]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800506c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005070:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005078:	494a      	ldr	r1, [pc, #296]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800507a:	4313      	orrs	r3, r2
 800507c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00a      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800508c:	4b45      	ldr	r3, [pc, #276]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800508e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005092:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800509a:	4942      	ldr	r1, [pc, #264]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800509c:	4313      	orrs	r3, r2
 800509e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80050ae:	4b3d      	ldr	r3, [pc, #244]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80050b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050bc:	4939      	ldr	r1, [pc, #228]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00a      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80050d0:	4b34      	ldr	r3, [pc, #208]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80050d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050de:	4931      	ldr	r1, [pc, #196]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d011      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80050f2:	4b2c      	ldr	r3, [pc, #176]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80050f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005100:	4928      	ldr	r1, [pc, #160]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005102:	4313      	orrs	r3, r2
 8005104:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800510c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005110:	d101      	bne.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005112:	2301      	movs	r3, #1
 8005114:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0308 	and.w	r3, r3, #8
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005122:	2301      	movs	r3, #1
 8005124:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005132:	4b1c      	ldr	r3, [pc, #112]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005138:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005140:	4918      	ldr	r1, [pc, #96]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005142:	4313      	orrs	r3, r2
 8005144:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00b      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005154:	4b13      	ldr	r3, [pc, #76]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800515a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005164:	490f      	ldr	r1, [pc, #60]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005166:	4313      	orrs	r3, r2
 8005168:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d005      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800517a:	f040 80d8 	bne.w	800532e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800517e:	4b09      	ldr	r3, [pc, #36]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a08      	ldr	r2, [pc, #32]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005184:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005188:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800518a:	f7fc f989 	bl	80014a0 <HAL_GetTick>
 800518e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005190:	e00a      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005192:	f7fc f985 	bl	80014a0 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b64      	cmp	r3, #100	; 0x64
 800519e:	d903      	bls.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e196      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80051a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051a8:	4b6c      	ldr	r3, [pc, #432]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1ee      	bne.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d021      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d11d      	bne.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80051c8:	4b64      	ldr	r3, [pc, #400]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80051ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051ce:	0c1b      	lsrs	r3, r3, #16
 80051d0:	f003 0303 	and.w	r3, r3, #3
 80051d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80051d6:	4b61      	ldr	r3, [pc, #388]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80051d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051dc:	0e1b      	lsrs	r3, r3, #24
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	019a      	lsls	r2, r3, #6
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	041b      	lsls	r3, r3, #16
 80051ee:	431a      	orrs	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	061b      	lsls	r3, r3, #24
 80051f4:	431a      	orrs	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	071b      	lsls	r3, r3, #28
 80051fc:	4957      	ldr	r1, [pc, #348]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d004      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005214:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005218:	d00a      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005222:	2b00      	cmp	r3, #0
 8005224:	d02e      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800522e:	d129      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005230:	4b4a      	ldr	r3, [pc, #296]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005236:	0c1b      	lsrs	r3, r3, #16
 8005238:	f003 0303 	and.w	r3, r3, #3
 800523c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800523e:	4b47      	ldr	r3, [pc, #284]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005240:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005244:	0f1b      	lsrs	r3, r3, #28
 8005246:	f003 0307 	and.w	r3, r3, #7
 800524a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	019a      	lsls	r2, r3, #6
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	041b      	lsls	r3, r3, #16
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	061b      	lsls	r3, r3, #24
 800525e:	431a      	orrs	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	071b      	lsls	r3, r3, #28
 8005264:	493d      	ldr	r1, [pc, #244]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005266:	4313      	orrs	r3, r2
 8005268:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800526c:	4b3b      	ldr	r3, [pc, #236]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800526e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005272:	f023 021f 	bic.w	r2, r3, #31
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	3b01      	subs	r3, #1
 800527c:	4937      	ldr	r1, [pc, #220]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800527e:	4313      	orrs	r3, r2
 8005280:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d01d      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005290:	4b32      	ldr	r3, [pc, #200]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005296:	0e1b      	lsrs	r3, r3, #24
 8005298:	f003 030f 	and.w	r3, r3, #15
 800529c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800529e:	4b2f      	ldr	r3, [pc, #188]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80052a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052a4:	0f1b      	lsrs	r3, r3, #28
 80052a6:	f003 0307 	and.w	r3, r3, #7
 80052aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	019a      	lsls	r2, r3, #6
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	041b      	lsls	r3, r3, #16
 80052b8:	431a      	orrs	r2, r3
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	061b      	lsls	r3, r3, #24
 80052be:	431a      	orrs	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	071b      	lsls	r3, r3, #28
 80052c4:	4925      	ldr	r1, [pc, #148]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d011      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	019a      	lsls	r2, r3, #6
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	041b      	lsls	r3, r3, #16
 80052e4:	431a      	orrs	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	061b      	lsls	r3, r3, #24
 80052ec:	431a      	orrs	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	071b      	lsls	r3, r3, #28
 80052f4:	4919      	ldr	r1, [pc, #100]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052fc:	4b17      	ldr	r3, [pc, #92]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a16      	ldr	r2, [pc, #88]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005302:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005306:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005308:	f7fc f8ca 	bl	80014a0 <HAL_GetTick>
 800530c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800530e:	e008      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005310:	f7fc f8c6 	bl	80014a0 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b64      	cmp	r3, #100	; 0x64
 800531c:	d901      	bls.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e0d7      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005322:	4b0e      	ldr	r3, [pc, #56]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0f0      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	2b01      	cmp	r3, #1
 8005332:	f040 80cd 	bne.w	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005336:	4b09      	ldr	r3, [pc, #36]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a08      	ldr	r2, [pc, #32]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800533c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005340:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005342:	f7fc f8ad 	bl	80014a0 <HAL_GetTick>
 8005346:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005348:	e00a      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800534a:	f7fc f8a9 	bl	80014a0 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b64      	cmp	r3, #100	; 0x64
 8005356:	d903      	bls.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e0ba      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800535c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005360:	4b5e      	ldr	r3, [pc, #376]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800536c:	d0ed      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800537e:	2b00      	cmp	r3, #0
 8005380:	d009      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800538a:	2b00      	cmp	r3, #0
 800538c:	d02e      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	d12a      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005396:	4b51      	ldr	r3, [pc, #324]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539c:	0c1b      	lsrs	r3, r3, #16
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053a4:	4b4d      	ldr	r3, [pc, #308]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80053a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053aa:	0f1b      	lsrs	r3, r3, #28
 80053ac:	f003 0307 	and.w	r3, r3, #7
 80053b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	019a      	lsls	r2, r3, #6
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	041b      	lsls	r3, r3, #16
 80053bc:	431a      	orrs	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	061b      	lsls	r3, r3, #24
 80053c4:	431a      	orrs	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	071b      	lsls	r3, r3, #28
 80053ca:	4944      	ldr	r1, [pc, #272]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80053d2:	4b42      	ldr	r3, [pc, #264]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80053d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e0:	3b01      	subs	r3, #1
 80053e2:	021b      	lsls	r3, r3, #8
 80053e4:	493d      	ldr	r1, [pc, #244]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d022      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005400:	d11d      	bne.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005402:	4b36      	ldr	r3, [pc, #216]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005408:	0e1b      	lsrs	r3, r3, #24
 800540a:	f003 030f 	and.w	r3, r3, #15
 800540e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005410:	4b32      	ldr	r3, [pc, #200]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005416:	0f1b      	lsrs	r3, r3, #28
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	019a      	lsls	r2, r3, #6
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	041b      	lsls	r3, r3, #16
 800542a:	431a      	orrs	r2, r3
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	061b      	lsls	r3, r3, #24
 8005430:	431a      	orrs	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	071b      	lsls	r3, r3, #28
 8005436:	4929      	ldr	r1, [pc, #164]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005438:	4313      	orrs	r3, r2
 800543a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0308 	and.w	r3, r3, #8
 8005446:	2b00      	cmp	r3, #0
 8005448:	d028      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800544a:	4b24      	ldr	r3, [pc, #144]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800544c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005450:	0e1b      	lsrs	r3, r3, #24
 8005452:	f003 030f 	and.w	r3, r3, #15
 8005456:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005458:	4b20      	ldr	r3, [pc, #128]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800545a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545e:	0c1b      	lsrs	r3, r3, #16
 8005460:	f003 0303 	and.w	r3, r3, #3
 8005464:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	019a      	lsls	r2, r3, #6
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	041b      	lsls	r3, r3, #16
 8005470:	431a      	orrs	r2, r3
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	061b      	lsls	r3, r3, #24
 8005476:	431a      	orrs	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	071b      	lsls	r3, r3, #28
 800547e:	4917      	ldr	r1, [pc, #92]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005480:	4313      	orrs	r3, r2
 8005482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005486:	4b15      	ldr	r3, [pc, #84]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800548c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005494:	4911      	ldr	r1, [pc, #68]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005496:	4313      	orrs	r3, r2
 8005498:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800549c:	4b0f      	ldr	r3, [pc, #60]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a0e      	ldr	r2, [pc, #56]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80054a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054a8:	f7fb fffa 	bl	80014a0 <HAL_GetTick>
 80054ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054ae:	e008      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80054b0:	f7fb fff6 	bl	80014a0 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b64      	cmp	r3, #100	; 0x64
 80054bc:	d901      	bls.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e007      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054c2:	4b06      	ldr	r3, [pc, #24]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054ce:	d1ef      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3720      	adds	r7, #32
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	40023800 	.word	0x40023800

080054e0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e025      	b.n	8005540 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d106      	bne.n	800550e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f003 fae9 	bl	8008ae0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2202      	movs	r2, #2
 8005512:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	3304      	adds	r3, #4
 800551e:	4619      	mov	r1, r3
 8005520:	4610      	mov	r0, r2
 8005522:	f000 fc69 	bl	8005df8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6818      	ldr	r0, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	461a      	mov	r2, r3
 8005530:	6839      	ldr	r1, [r7, #0]
 8005532:	f000 fcd3 	bl	8005edc <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d101      	bne.n	8005564 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8005560:	2302      	movs	r3, #2
 8005562:	e018      	b.n	8005596 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2202      	movs	r2, #2
 8005568:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	68b9      	ldr	r1, [r7, #8]
 8005574:	4618      	mov	r0, r3
 8005576:	f000 fd31 	bl	8005fdc <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b02      	cmp	r3, #2
 8005580:	d104      	bne.n	800558c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2205      	movs	r2, #5
 8005586:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800558a:	e003      	b.n	8005594 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b082      	sub	sp, #8
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
 80055a6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d101      	bne.n	80055b8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80055b4:	2302      	movs	r3, #2
 80055b6:	e00e      	b.n	80055d6 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6839      	ldr	r1, [r7, #0]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fd29 	bl	800601e <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b082      	sub	sp, #8
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e040      	b.n	8005672 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d106      	bne.n	8005606 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f003 f949 	bl	8008898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2224      	movs	r2, #36	; 0x24
 800560a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0201 	bic.w	r2, r2, #1
 800561a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f82d 	bl	800567c <UART_SetConfig>
 8005622:	4603      	mov	r3, r0
 8005624:	2b01      	cmp	r3, #1
 8005626:	d101      	bne.n	800562c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e022      	b.n	8005672 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 fac5 	bl	8005bc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005648:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005658:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f042 0201 	orr.w	r2, r2, #1
 8005668:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 fb4c 	bl	8005d08 <UART_CheckIdleState>
 8005670:	4603      	mov	r3, r0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
	...

0800567c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b088      	sub	sp, #32
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005684:	2300      	movs	r3, #0
 8005686:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005688:	2300      	movs	r3, #0
 800568a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689a      	ldr	r2, [r3, #8]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	431a      	orrs	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	431a      	orrs	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	4bb1      	ldr	r3, [pc, #708]	; (8005970 <UART_SetConfig+0x2f4>)
 80056ac:	4013      	ands	r3, r2
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	6812      	ldr	r2, [r2, #0]
 80056b2:	6939      	ldr	r1, [r7, #16]
 80056b4:	430b      	orrs	r3, r1
 80056b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	4313      	orrs	r3, r2
 80056dc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a9f      	ldr	r2, [pc, #636]	; (8005974 <UART_SetConfig+0x2f8>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d121      	bne.n	8005740 <UART_SetConfig+0xc4>
 80056fc:	4b9e      	ldr	r3, [pc, #632]	; (8005978 <UART_SetConfig+0x2fc>)
 80056fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005702:	f003 0303 	and.w	r3, r3, #3
 8005706:	2b03      	cmp	r3, #3
 8005708:	d816      	bhi.n	8005738 <UART_SetConfig+0xbc>
 800570a:	a201      	add	r2, pc, #4	; (adr r2, 8005710 <UART_SetConfig+0x94>)
 800570c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005710:	08005721 	.word	0x08005721
 8005714:	0800572d 	.word	0x0800572d
 8005718:	08005727 	.word	0x08005727
 800571c:	08005733 	.word	0x08005733
 8005720:	2301      	movs	r3, #1
 8005722:	77fb      	strb	r3, [r7, #31]
 8005724:	e151      	b.n	80059ca <UART_SetConfig+0x34e>
 8005726:	2302      	movs	r3, #2
 8005728:	77fb      	strb	r3, [r7, #31]
 800572a:	e14e      	b.n	80059ca <UART_SetConfig+0x34e>
 800572c:	2304      	movs	r3, #4
 800572e:	77fb      	strb	r3, [r7, #31]
 8005730:	e14b      	b.n	80059ca <UART_SetConfig+0x34e>
 8005732:	2308      	movs	r3, #8
 8005734:	77fb      	strb	r3, [r7, #31]
 8005736:	e148      	b.n	80059ca <UART_SetConfig+0x34e>
 8005738:	2310      	movs	r3, #16
 800573a:	77fb      	strb	r3, [r7, #31]
 800573c:	bf00      	nop
 800573e:	e144      	b.n	80059ca <UART_SetConfig+0x34e>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a8d      	ldr	r2, [pc, #564]	; (800597c <UART_SetConfig+0x300>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d134      	bne.n	80057b4 <UART_SetConfig+0x138>
 800574a:	4b8b      	ldr	r3, [pc, #556]	; (8005978 <UART_SetConfig+0x2fc>)
 800574c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005750:	f003 030c 	and.w	r3, r3, #12
 8005754:	2b0c      	cmp	r3, #12
 8005756:	d829      	bhi.n	80057ac <UART_SetConfig+0x130>
 8005758:	a201      	add	r2, pc, #4	; (adr r2, 8005760 <UART_SetConfig+0xe4>)
 800575a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575e:	bf00      	nop
 8005760:	08005795 	.word	0x08005795
 8005764:	080057ad 	.word	0x080057ad
 8005768:	080057ad 	.word	0x080057ad
 800576c:	080057ad 	.word	0x080057ad
 8005770:	080057a1 	.word	0x080057a1
 8005774:	080057ad 	.word	0x080057ad
 8005778:	080057ad 	.word	0x080057ad
 800577c:	080057ad 	.word	0x080057ad
 8005780:	0800579b 	.word	0x0800579b
 8005784:	080057ad 	.word	0x080057ad
 8005788:	080057ad 	.word	0x080057ad
 800578c:	080057ad 	.word	0x080057ad
 8005790:	080057a7 	.word	0x080057a7
 8005794:	2300      	movs	r3, #0
 8005796:	77fb      	strb	r3, [r7, #31]
 8005798:	e117      	b.n	80059ca <UART_SetConfig+0x34e>
 800579a:	2302      	movs	r3, #2
 800579c:	77fb      	strb	r3, [r7, #31]
 800579e:	e114      	b.n	80059ca <UART_SetConfig+0x34e>
 80057a0:	2304      	movs	r3, #4
 80057a2:	77fb      	strb	r3, [r7, #31]
 80057a4:	e111      	b.n	80059ca <UART_SetConfig+0x34e>
 80057a6:	2308      	movs	r3, #8
 80057a8:	77fb      	strb	r3, [r7, #31]
 80057aa:	e10e      	b.n	80059ca <UART_SetConfig+0x34e>
 80057ac:	2310      	movs	r3, #16
 80057ae:	77fb      	strb	r3, [r7, #31]
 80057b0:	bf00      	nop
 80057b2:	e10a      	b.n	80059ca <UART_SetConfig+0x34e>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a71      	ldr	r2, [pc, #452]	; (8005980 <UART_SetConfig+0x304>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d120      	bne.n	8005800 <UART_SetConfig+0x184>
 80057be:	4b6e      	ldr	r3, [pc, #440]	; (8005978 <UART_SetConfig+0x2fc>)
 80057c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80057c8:	2b10      	cmp	r3, #16
 80057ca:	d00f      	beq.n	80057ec <UART_SetConfig+0x170>
 80057cc:	2b10      	cmp	r3, #16
 80057ce:	d802      	bhi.n	80057d6 <UART_SetConfig+0x15a>
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d005      	beq.n	80057e0 <UART_SetConfig+0x164>
 80057d4:	e010      	b.n	80057f8 <UART_SetConfig+0x17c>
 80057d6:	2b20      	cmp	r3, #32
 80057d8:	d005      	beq.n	80057e6 <UART_SetConfig+0x16a>
 80057da:	2b30      	cmp	r3, #48	; 0x30
 80057dc:	d009      	beq.n	80057f2 <UART_SetConfig+0x176>
 80057de:	e00b      	b.n	80057f8 <UART_SetConfig+0x17c>
 80057e0:	2300      	movs	r3, #0
 80057e2:	77fb      	strb	r3, [r7, #31]
 80057e4:	e0f1      	b.n	80059ca <UART_SetConfig+0x34e>
 80057e6:	2302      	movs	r3, #2
 80057e8:	77fb      	strb	r3, [r7, #31]
 80057ea:	e0ee      	b.n	80059ca <UART_SetConfig+0x34e>
 80057ec:	2304      	movs	r3, #4
 80057ee:	77fb      	strb	r3, [r7, #31]
 80057f0:	e0eb      	b.n	80059ca <UART_SetConfig+0x34e>
 80057f2:	2308      	movs	r3, #8
 80057f4:	77fb      	strb	r3, [r7, #31]
 80057f6:	e0e8      	b.n	80059ca <UART_SetConfig+0x34e>
 80057f8:	2310      	movs	r3, #16
 80057fa:	77fb      	strb	r3, [r7, #31]
 80057fc:	bf00      	nop
 80057fe:	e0e4      	b.n	80059ca <UART_SetConfig+0x34e>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a5f      	ldr	r2, [pc, #380]	; (8005984 <UART_SetConfig+0x308>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d120      	bne.n	800584c <UART_SetConfig+0x1d0>
 800580a:	4b5b      	ldr	r3, [pc, #364]	; (8005978 <UART_SetConfig+0x2fc>)
 800580c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005810:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005814:	2b40      	cmp	r3, #64	; 0x40
 8005816:	d00f      	beq.n	8005838 <UART_SetConfig+0x1bc>
 8005818:	2b40      	cmp	r3, #64	; 0x40
 800581a:	d802      	bhi.n	8005822 <UART_SetConfig+0x1a6>
 800581c:	2b00      	cmp	r3, #0
 800581e:	d005      	beq.n	800582c <UART_SetConfig+0x1b0>
 8005820:	e010      	b.n	8005844 <UART_SetConfig+0x1c8>
 8005822:	2b80      	cmp	r3, #128	; 0x80
 8005824:	d005      	beq.n	8005832 <UART_SetConfig+0x1b6>
 8005826:	2bc0      	cmp	r3, #192	; 0xc0
 8005828:	d009      	beq.n	800583e <UART_SetConfig+0x1c2>
 800582a:	e00b      	b.n	8005844 <UART_SetConfig+0x1c8>
 800582c:	2300      	movs	r3, #0
 800582e:	77fb      	strb	r3, [r7, #31]
 8005830:	e0cb      	b.n	80059ca <UART_SetConfig+0x34e>
 8005832:	2302      	movs	r3, #2
 8005834:	77fb      	strb	r3, [r7, #31]
 8005836:	e0c8      	b.n	80059ca <UART_SetConfig+0x34e>
 8005838:	2304      	movs	r3, #4
 800583a:	77fb      	strb	r3, [r7, #31]
 800583c:	e0c5      	b.n	80059ca <UART_SetConfig+0x34e>
 800583e:	2308      	movs	r3, #8
 8005840:	77fb      	strb	r3, [r7, #31]
 8005842:	e0c2      	b.n	80059ca <UART_SetConfig+0x34e>
 8005844:	2310      	movs	r3, #16
 8005846:	77fb      	strb	r3, [r7, #31]
 8005848:	bf00      	nop
 800584a:	e0be      	b.n	80059ca <UART_SetConfig+0x34e>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a4d      	ldr	r2, [pc, #308]	; (8005988 <UART_SetConfig+0x30c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d124      	bne.n	80058a0 <UART_SetConfig+0x224>
 8005856:	4b48      	ldr	r3, [pc, #288]	; (8005978 <UART_SetConfig+0x2fc>)
 8005858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005864:	d012      	beq.n	800588c <UART_SetConfig+0x210>
 8005866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800586a:	d802      	bhi.n	8005872 <UART_SetConfig+0x1f6>
 800586c:	2b00      	cmp	r3, #0
 800586e:	d007      	beq.n	8005880 <UART_SetConfig+0x204>
 8005870:	e012      	b.n	8005898 <UART_SetConfig+0x21c>
 8005872:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005876:	d006      	beq.n	8005886 <UART_SetConfig+0x20a>
 8005878:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800587c:	d009      	beq.n	8005892 <UART_SetConfig+0x216>
 800587e:	e00b      	b.n	8005898 <UART_SetConfig+0x21c>
 8005880:	2300      	movs	r3, #0
 8005882:	77fb      	strb	r3, [r7, #31]
 8005884:	e0a1      	b.n	80059ca <UART_SetConfig+0x34e>
 8005886:	2302      	movs	r3, #2
 8005888:	77fb      	strb	r3, [r7, #31]
 800588a:	e09e      	b.n	80059ca <UART_SetConfig+0x34e>
 800588c:	2304      	movs	r3, #4
 800588e:	77fb      	strb	r3, [r7, #31]
 8005890:	e09b      	b.n	80059ca <UART_SetConfig+0x34e>
 8005892:	2308      	movs	r3, #8
 8005894:	77fb      	strb	r3, [r7, #31]
 8005896:	e098      	b.n	80059ca <UART_SetConfig+0x34e>
 8005898:	2310      	movs	r3, #16
 800589a:	77fb      	strb	r3, [r7, #31]
 800589c:	bf00      	nop
 800589e:	e094      	b.n	80059ca <UART_SetConfig+0x34e>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a39      	ldr	r2, [pc, #228]	; (800598c <UART_SetConfig+0x310>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d124      	bne.n	80058f4 <UART_SetConfig+0x278>
 80058aa:	4b33      	ldr	r3, [pc, #204]	; (8005978 <UART_SetConfig+0x2fc>)
 80058ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80058b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058b8:	d012      	beq.n	80058e0 <UART_SetConfig+0x264>
 80058ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058be:	d802      	bhi.n	80058c6 <UART_SetConfig+0x24a>
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d007      	beq.n	80058d4 <UART_SetConfig+0x258>
 80058c4:	e012      	b.n	80058ec <UART_SetConfig+0x270>
 80058c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058ca:	d006      	beq.n	80058da <UART_SetConfig+0x25e>
 80058cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058d0:	d009      	beq.n	80058e6 <UART_SetConfig+0x26a>
 80058d2:	e00b      	b.n	80058ec <UART_SetConfig+0x270>
 80058d4:	2301      	movs	r3, #1
 80058d6:	77fb      	strb	r3, [r7, #31]
 80058d8:	e077      	b.n	80059ca <UART_SetConfig+0x34e>
 80058da:	2302      	movs	r3, #2
 80058dc:	77fb      	strb	r3, [r7, #31]
 80058de:	e074      	b.n	80059ca <UART_SetConfig+0x34e>
 80058e0:	2304      	movs	r3, #4
 80058e2:	77fb      	strb	r3, [r7, #31]
 80058e4:	e071      	b.n	80059ca <UART_SetConfig+0x34e>
 80058e6:	2308      	movs	r3, #8
 80058e8:	77fb      	strb	r3, [r7, #31]
 80058ea:	e06e      	b.n	80059ca <UART_SetConfig+0x34e>
 80058ec:	2310      	movs	r3, #16
 80058ee:	77fb      	strb	r3, [r7, #31]
 80058f0:	bf00      	nop
 80058f2:	e06a      	b.n	80059ca <UART_SetConfig+0x34e>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a25      	ldr	r2, [pc, #148]	; (8005990 <UART_SetConfig+0x314>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d124      	bne.n	8005948 <UART_SetConfig+0x2cc>
 80058fe:	4b1e      	ldr	r3, [pc, #120]	; (8005978 <UART_SetConfig+0x2fc>)
 8005900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005904:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800590c:	d012      	beq.n	8005934 <UART_SetConfig+0x2b8>
 800590e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005912:	d802      	bhi.n	800591a <UART_SetConfig+0x29e>
 8005914:	2b00      	cmp	r3, #0
 8005916:	d007      	beq.n	8005928 <UART_SetConfig+0x2ac>
 8005918:	e012      	b.n	8005940 <UART_SetConfig+0x2c4>
 800591a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800591e:	d006      	beq.n	800592e <UART_SetConfig+0x2b2>
 8005920:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005924:	d009      	beq.n	800593a <UART_SetConfig+0x2be>
 8005926:	e00b      	b.n	8005940 <UART_SetConfig+0x2c4>
 8005928:	2300      	movs	r3, #0
 800592a:	77fb      	strb	r3, [r7, #31]
 800592c:	e04d      	b.n	80059ca <UART_SetConfig+0x34e>
 800592e:	2302      	movs	r3, #2
 8005930:	77fb      	strb	r3, [r7, #31]
 8005932:	e04a      	b.n	80059ca <UART_SetConfig+0x34e>
 8005934:	2304      	movs	r3, #4
 8005936:	77fb      	strb	r3, [r7, #31]
 8005938:	e047      	b.n	80059ca <UART_SetConfig+0x34e>
 800593a:	2308      	movs	r3, #8
 800593c:	77fb      	strb	r3, [r7, #31]
 800593e:	e044      	b.n	80059ca <UART_SetConfig+0x34e>
 8005940:	2310      	movs	r3, #16
 8005942:	77fb      	strb	r3, [r7, #31]
 8005944:	bf00      	nop
 8005946:	e040      	b.n	80059ca <UART_SetConfig+0x34e>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a11      	ldr	r2, [pc, #68]	; (8005994 <UART_SetConfig+0x318>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d139      	bne.n	80059c6 <UART_SetConfig+0x34a>
 8005952:	4b09      	ldr	r3, [pc, #36]	; (8005978 <UART_SetConfig+0x2fc>)
 8005954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005958:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800595c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005960:	d027      	beq.n	80059b2 <UART_SetConfig+0x336>
 8005962:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005966:	d817      	bhi.n	8005998 <UART_SetConfig+0x31c>
 8005968:	2b00      	cmp	r3, #0
 800596a:	d01c      	beq.n	80059a6 <UART_SetConfig+0x32a>
 800596c:	e027      	b.n	80059be <UART_SetConfig+0x342>
 800596e:	bf00      	nop
 8005970:	efff69f3 	.word	0xefff69f3
 8005974:	40011000 	.word	0x40011000
 8005978:	40023800 	.word	0x40023800
 800597c:	40004400 	.word	0x40004400
 8005980:	40004800 	.word	0x40004800
 8005984:	40004c00 	.word	0x40004c00
 8005988:	40005000 	.word	0x40005000
 800598c:	40011400 	.word	0x40011400
 8005990:	40007800 	.word	0x40007800
 8005994:	40007c00 	.word	0x40007c00
 8005998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800599c:	d006      	beq.n	80059ac <UART_SetConfig+0x330>
 800599e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80059a2:	d009      	beq.n	80059b8 <UART_SetConfig+0x33c>
 80059a4:	e00b      	b.n	80059be <UART_SetConfig+0x342>
 80059a6:	2300      	movs	r3, #0
 80059a8:	77fb      	strb	r3, [r7, #31]
 80059aa:	e00e      	b.n	80059ca <UART_SetConfig+0x34e>
 80059ac:	2302      	movs	r3, #2
 80059ae:	77fb      	strb	r3, [r7, #31]
 80059b0:	e00b      	b.n	80059ca <UART_SetConfig+0x34e>
 80059b2:	2304      	movs	r3, #4
 80059b4:	77fb      	strb	r3, [r7, #31]
 80059b6:	e008      	b.n	80059ca <UART_SetConfig+0x34e>
 80059b8:	2308      	movs	r3, #8
 80059ba:	77fb      	strb	r3, [r7, #31]
 80059bc:	e005      	b.n	80059ca <UART_SetConfig+0x34e>
 80059be:	2310      	movs	r3, #16
 80059c0:	77fb      	strb	r3, [r7, #31]
 80059c2:	bf00      	nop
 80059c4:	e001      	b.n	80059ca <UART_SetConfig+0x34e>
 80059c6:	2310      	movs	r3, #16
 80059c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059d2:	d17c      	bne.n	8005ace <UART_SetConfig+0x452>
  {
    switch (clocksource)
 80059d4:	7ffb      	ldrb	r3, [r7, #31]
 80059d6:	2b08      	cmp	r3, #8
 80059d8:	d859      	bhi.n	8005a8e <UART_SetConfig+0x412>
 80059da:	a201      	add	r2, pc, #4	; (adr r2, 80059e0 <UART_SetConfig+0x364>)
 80059dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e0:	08005a05 	.word	0x08005a05
 80059e4:	08005a23 	.word	0x08005a23
 80059e8:	08005a41 	.word	0x08005a41
 80059ec:	08005a8f 	.word	0x08005a8f
 80059f0:	08005a59 	.word	0x08005a59
 80059f4:	08005a8f 	.word	0x08005a8f
 80059f8:	08005a8f 	.word	0x08005a8f
 80059fc:	08005a8f 	.word	0x08005a8f
 8005a00:	08005a77 	.word	0x08005a77
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005a04:	f7ff f956 	bl	8004cb4 <HAL_RCC_GetPCLK1Freq>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	005a      	lsls	r2, r3, #1
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	085b      	lsrs	r3, r3, #1
 8005a12:	441a      	add	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	61bb      	str	r3, [r7, #24]
        break;
 8005a20:	e038      	b.n	8005a94 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005a22:	f7ff f95b 	bl	8004cdc <HAL_RCC_GetPCLK2Freq>
 8005a26:	4603      	mov	r3, r0
 8005a28:	005a      	lsls	r2, r3, #1
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	085b      	lsrs	r3, r3, #1
 8005a30:	441a      	add	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	61bb      	str	r3, [r7, #24]
        break;
 8005a3e:	e029      	b.n	8005a94 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	085a      	lsrs	r2, r3, #1
 8005a46:	4b5d      	ldr	r3, [pc, #372]	; (8005bbc <UART_SetConfig+0x540>)
 8005a48:	4413      	add	r3, r2
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6852      	ldr	r2, [r2, #4]
 8005a4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	61bb      	str	r3, [r7, #24]
        break;
 8005a56:	e01d      	b.n	8005a94 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005a58:	f7ff f86e 	bl	8004b38 <HAL_RCC_GetSysClockFreq>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	005a      	lsls	r2, r3, #1
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	085b      	lsrs	r3, r3, #1
 8005a66:	441a      	add	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	61bb      	str	r3, [r7, #24]
        break;
 8005a74:	e00e      	b.n	8005a94 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	085b      	lsrs	r3, r3, #1
 8005a7c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	61bb      	str	r3, [r7, #24]
        break;
 8005a8c:	e002      	b.n	8005a94 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	75fb      	strb	r3, [r7, #23]
        break;
 8005a92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	2b0f      	cmp	r3, #15
 8005a98:	d916      	bls.n	8005ac8 <UART_SetConfig+0x44c>
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aa0:	d212      	bcs.n	8005ac8 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	f023 030f 	bic.w	r3, r3, #15
 8005aaa:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	085b      	lsrs	r3, r3, #1
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	f003 0307 	and.w	r3, r3, #7
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	89fb      	ldrh	r3, [r7, #14]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	89fa      	ldrh	r2, [r7, #14]
 8005ac4:	60da      	str	r2, [r3, #12]
 8005ac6:	e06e      	b.n	8005ba6 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	75fb      	strb	r3, [r7, #23]
 8005acc:	e06b      	b.n	8005ba6 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8005ace:	7ffb      	ldrb	r3, [r7, #31]
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	d857      	bhi.n	8005b84 <UART_SetConfig+0x508>
 8005ad4:	a201      	add	r2, pc, #4	; (adr r2, 8005adc <UART_SetConfig+0x460>)
 8005ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ada:	bf00      	nop
 8005adc:	08005b01 	.word	0x08005b01
 8005ae0:	08005b1d 	.word	0x08005b1d
 8005ae4:	08005b39 	.word	0x08005b39
 8005ae8:	08005b85 	.word	0x08005b85
 8005aec:	08005b51 	.word	0x08005b51
 8005af0:	08005b85 	.word	0x08005b85
 8005af4:	08005b85 	.word	0x08005b85
 8005af8:	08005b85 	.word	0x08005b85
 8005afc:	08005b6d 	.word	0x08005b6d
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005b00:	f7ff f8d8 	bl	8004cb4 <HAL_RCC_GetPCLK1Freq>
 8005b04:	4602      	mov	r2, r0
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	085b      	lsrs	r3, r3, #1
 8005b0c:	441a      	add	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	61bb      	str	r3, [r7, #24]
        break;
 8005b1a:	e036      	b.n	8005b8a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005b1c:	f7ff f8de 	bl	8004cdc <HAL_RCC_GetPCLK2Freq>
 8005b20:	4602      	mov	r2, r0
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	085b      	lsrs	r3, r3, #1
 8005b28:	441a      	add	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	61bb      	str	r3, [r7, #24]
        break;
 8005b36:	e028      	b.n	8005b8a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	085a      	lsrs	r2, r3, #1
 8005b3e:	4b20      	ldr	r3, [pc, #128]	; (8005bc0 <UART_SetConfig+0x544>)
 8005b40:	4413      	add	r3, r2
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	6852      	ldr	r2, [r2, #4]
 8005b46:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	61bb      	str	r3, [r7, #24]
        break;
 8005b4e:	e01c      	b.n	8005b8a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005b50:	f7fe fff2 	bl	8004b38 <HAL_RCC_GetSysClockFreq>
 8005b54:	4602      	mov	r2, r0
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	085b      	lsrs	r3, r3, #1
 8005b5c:	441a      	add	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	61bb      	str	r3, [r7, #24]
        break;
 8005b6a:	e00e      	b.n	8005b8a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	085b      	lsrs	r3, r3, #1
 8005b72:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	61bb      	str	r3, [r7, #24]
        break;
 8005b82:	e002      	b.n	8005b8a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	75fb      	strb	r3, [r7, #23]
        break;
 8005b88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	2b0f      	cmp	r3, #15
 8005b8e:	d908      	bls.n	8005ba2 <UART_SetConfig+0x526>
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b96:	d204      	bcs.n	8005ba2 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	69ba      	ldr	r2, [r7, #24]
 8005b9e:	60da      	str	r2, [r3, #12]
 8005ba0:	e001      	b.n	8005ba6 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3720      	adds	r7, #32
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	01e84800 	.word	0x01e84800
 8005bc0:	00f42400 	.word	0x00f42400

08005bc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00a      	beq.n	8005bee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00a      	beq.n	8005c10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c14:	f003 0304 	and.w	r3, r3, #4
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00a      	beq.n	8005c32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c36:	f003 0308 	and.w	r3, r3, #8
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00a      	beq.n	8005c54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	430a      	orrs	r2, r1
 8005c52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c58:	f003 0310 	and.w	r3, r3, #16
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00a      	beq.n	8005c76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	f003 0320 	and.w	r3, r3, #32
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00a      	beq.n	8005c98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	430a      	orrs	r2, r1
 8005c96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d01a      	beq.n	8005cda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cc2:	d10a      	bne.n	8005cda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00a      	beq.n	8005cfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	605a      	str	r2, [r3, #4]
  }
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af02      	add	r7, sp, #8
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005d16:	f7fb fbc3 	bl	80014a0 <HAL_GetTick>
 8005d1a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0308 	and.w	r3, r3, #8
 8005d26:	2b08      	cmp	r3, #8
 8005d28:	d10e      	bne.n	8005d48 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f814 	bl	8005d66 <UART_WaitOnFlagUntilTimeout>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e00a      	b.n	8005d5e <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2220      	movs	r2, #32
 8005d52:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b084      	sub	sp, #16
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	60f8      	str	r0, [r7, #12]
 8005d6e:	60b9      	str	r1, [r7, #8]
 8005d70:	603b      	str	r3, [r7, #0]
 8005d72:	4613      	mov	r3, r2
 8005d74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d76:	e02a      	b.n	8005dce <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7e:	d026      	beq.n	8005dce <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d80:	f7fb fb8e 	bl	80014a0 <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d302      	bcc.n	8005d96 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d11b      	bne.n	8005dce <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005da4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689a      	ldr	r2, [r3, #8]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 0201 	bic.w	r2, r2, #1
 8005db4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2220      	movs	r2, #32
 8005dba:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e00f      	b.n	8005dee <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	69da      	ldr	r2, [r3, #28]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	bf0c      	ite	eq
 8005dde:	2301      	moveq	r3, #1
 8005de0:	2300      	movne	r3, #0
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	461a      	mov	r2, r3
 8005de6:	79fb      	ldrb	r3, [r7, #7]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d0c5      	beq.n	8005d78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
	...

08005df8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8005e02:	2300      	movs	r3, #0
 8005e04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8005e06:	2300      	movs	r3, #0
 8005e08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d027      	beq.n	8005e62 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	4b2f      	ldr	r3, [pc, #188]	; (8005ed8 <FMC_SDRAM_Init+0xe0>)
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005e28:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8005e2e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8005e34:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8005e3a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8005e40:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8005e46:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8005e4c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005e52:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	e032      	b.n	8005ec8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e6e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005e78:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005e7e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	4b12      	ldr	r3, [pc, #72]	; (8005ed8 <FMC_SDRAM_Init+0xe0>)
 8005e90:	4013      	ands	r3, r2
 8005e92:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005e9c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8005ea2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8005ea8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8005eae:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8005eb4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	ffff8000 	.word	0xffff8000

08005edc <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b087      	sub	sp, #28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8005eec:	2300      	movs	r3, #0
 8005eee:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d02e      	beq.n	8005f54 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005f02:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005f12:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005f1c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005f26:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005f30:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	3b01      	subs	r3, #1
 8005f38:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005f3a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	3b01      	subs	r3, #1
 8005f42:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005f44:	4313      	orrs	r3, r2
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	609a      	str	r2, [r3, #8]
 8005f52:	e039      	b.n	8005fc8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	4b1e      	ldr	r3, [pc, #120]	; (8005fd8 <FMC_SDRAM_Timing_Init+0xfc>)
 8005f5e:	4013      	ands	r3, r2
 8005f60:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	3b01      	subs	r3, #1
 8005f68:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005f72:	4313      	orrs	r3, r2
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005f86:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	3b01      	subs	r3, #1
 8005f94:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005f96:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005fa0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8005faa:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	371c      	adds	r7, #28
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	ff0f0fff 	.word	0xff0f0fff

08005fdc <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b087      	sub	sp, #28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005ff4:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8005ffe:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006006:	4313      	orrs	r3, r2
 8006008:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	371c      	adds	r7, #28
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800601e:	b480      	push	{r7}
 8006020:	b083      	sub	sp, #12
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	695a      	ldr	r2, [r3, #20]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	005b      	lsls	r3, r3, #1
 8006030:	431a      	orrs	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f043 0201 	orr.w	r2, r3, #1
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006066:	b480      	push	{r7}
 8006068:	b083      	sub	sp, #12
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f023 0201 	bic.w	r2, r3, #1
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006092:	2300      	movs	r3, #0
 8006094:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	019b      	lsls	r3, r3, #6
 800609a:	f043 0220 	orr.w	r2, r3, #32
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	3301      	adds	r3, #1
 80060a6:	60fb      	str	r3, [r7, #12]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	4a09      	ldr	r2, [pc, #36]	; (80060d0 <USB_FlushTxFifo+0x48>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d901      	bls.n	80060b4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e006      	b.n	80060c2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	f003 0320 	and.w	r3, r3, #32
 80060bc:	2b20      	cmp	r3, #32
 80060be:	d0f0      	beq.n	80060a2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	00030d40 	.word	0x00030d40

080060d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80060dc:	2300      	movs	r3, #0
 80060de:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2210      	movs	r2, #16
 80060e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	3301      	adds	r3, #1
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	4a09      	ldr	r2, [pc, #36]	; (8006114 <USB_FlushRxFifo+0x40>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d901      	bls.n	80060f8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e006      	b.n	8006106 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	f003 0310 	and.w	r3, r3, #16
 8006100:	2b10      	cmp	r3, #16
 8006102:	d0f0      	beq.n	80060e6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	00030d40 	.word	0x00030d40

08006118 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006118:	b480      	push	{r7}
 800611a:	b089      	sub	sp, #36	; 0x24
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	4611      	mov	r1, r2
 8006124:	461a      	mov	r2, r3
 8006126:	460b      	mov	r3, r1
 8006128:	71fb      	strb	r3, [r7, #7]
 800612a:	4613      	mov	r3, r2
 800612c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006136:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800613a:	2b00      	cmp	r3, #0
 800613c:	d11a      	bne.n	8006174 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800613e:	88bb      	ldrh	r3, [r7, #4]
 8006140:	3303      	adds	r3, #3
 8006142:	089b      	lsrs	r3, r3, #2
 8006144:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006146:	2300      	movs	r3, #0
 8006148:	61bb      	str	r3, [r7, #24]
 800614a:	e00f      	b.n	800616c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800614c:	79fb      	ldrb	r3, [r7, #7]
 800614e:	031a      	lsls	r2, r3, #12
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	4413      	add	r3, r2
 8006154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006158:	461a      	mov	r2, r3
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	3304      	adds	r3, #4
 8006164:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	3301      	adds	r3, #1
 800616a:	61bb      	str	r3, [r7, #24]
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	429a      	cmp	r2, r3
 8006172:	d3eb      	bcc.n	800614c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3724      	adds	r7, #36	; 0x24
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006182:	b480      	push	{r7}
 8006184:	b089      	sub	sp, #36	; 0x24
 8006186:	af00      	add	r7, sp, #0
 8006188:	60f8      	str	r0, [r7, #12]
 800618a:	60b9      	str	r1, [r7, #8]
 800618c:	4613      	mov	r3, r2
 800618e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006198:	88fb      	ldrh	r3, [r7, #6]
 800619a:	3303      	adds	r3, #3
 800619c:	089b      	lsrs	r3, r3, #2
 800619e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80061a0:	2300      	movs	r3, #0
 80061a2:	61bb      	str	r3, [r7, #24]
 80061a4:	e00b      	b.n	80061be <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	601a      	str	r2, [r3, #0]
    pDest++;
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	3304      	adds	r3, #4
 80061b6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	3301      	adds	r3, #1
 80061bc:	61bb      	str	r3, [r7, #24]
 80061be:	69ba      	ldr	r2, [r7, #24]
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d3ef      	bcc.n	80061a6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80061c6:	69fb      	ldr	r3, [r7, #28]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3724      	adds	r7, #36	; 0x24
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	4013      	ands	r3, r2
 80061ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80061ec:	68fb      	ldr	r3, [r7, #12]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	f003 0301 	and.w	r3, r3, #1
}
 800620a:	4618      	mov	r0, r3
 800620c:	370c      	adds	r7, #12
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006216:	b480      	push	{r7}
 8006218:	b085      	sub	sp, #20
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	460b      	mov	r3, r1
 8006220:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006234:	f023 0303 	bic.w	r3, r3, #3
 8006238:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	78fb      	ldrb	r3, [r7, #3]
 8006244:	f003 0303 	and.w	r3, r3, #3
 8006248:	68f9      	ldr	r1, [r7, #12]
 800624a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800624e:	4313      	orrs	r3, r2
 8006250:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006252:	78fb      	ldrb	r3, [r7, #3]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d107      	bne.n	8006268 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800625e:	461a      	mov	r2, r3
 8006260:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006264:	6053      	str	r3, [r2, #4]
 8006266:	e009      	b.n	800627c <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006268:	78fb      	ldrb	r3, [r7, #3]
 800626a:	2b02      	cmp	r3, #2
 800626c:	d106      	bne.n	800627c <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006274:	461a      	mov	r2, r3
 8006276:	f241 7370 	movw	r3, #6000	; 0x1770
 800627a:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b084      	sub	sp, #16
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006296:	2300      	movs	r3, #0
 8006298:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80062aa:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80062b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062b8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80062ba:	2064      	movs	r0, #100	; 0x64
 80062bc:	f7fb f8fc 	bl	80014b8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80062c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062cc:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80062ce:	200a      	movs	r0, #10
 80062d0:	f7fb f8f2 	bl	80014b8 <HAL_Delay>

  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80062de:	b480      	push	{r7}
 80062e0:	b085      	sub	sp, #20
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
 80062e6:	460b      	mov	r3, r1
 80062e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80062ee:	2300      	movs	r3, #0
 80062f0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006302:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d109      	bne.n	8006322 <USB_DriveVbus+0x44>
 800630e:	78fb      	ldrb	r3, [r7, #3]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d106      	bne.n	8006322 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800631c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006320:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800632c:	d109      	bne.n	8006342 <USB_DriveVbus+0x64>
 800632e:	78fb      	ldrb	r3, [r7, #3]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d106      	bne.n	8006342 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800633c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006340:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3714      	adds	r7, #20
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800635c:	2300      	movs	r3, #0
 800635e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	0c5b      	lsrs	r3, r3, #17
 800636e:	f003 0303 	and.w	r3, r3, #3
}
 8006372:	4618      	mov	r0, r3
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
	...

08006380 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8006380:	b480      	push	{r7}
 8006382:	b087      	sub	sp, #28
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	4608      	mov	r0, r1
 800638a:	4611      	mov	r1, r2
 800638c:	461a      	mov	r2, r3
 800638e:	4603      	mov	r3, r0
 8006390:	70fb      	strb	r3, [r7, #3]
 8006392:	460b      	mov	r3, r1
 8006394:	70bb      	strb	r3, [r7, #2]
 8006396:	4613      	mov	r3, r2
 8006398:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800639a:	2300      	movs	r3, #0
 800639c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80063a2:	78fb      	ldrb	r3, [r7, #3]
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ae:	461a      	mov	r2, r3
 80063b0:	f04f 33ff 	mov.w	r3, #4294967295
 80063b4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80063b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80063ba:	2b03      	cmp	r3, #3
 80063bc:	d87e      	bhi.n	80064bc <USB_HC_Init+0x13c>
 80063be:	a201      	add	r2, pc, #4	; (adr r2, 80063c4 <USB_HC_Init+0x44>)
 80063c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c4:	080063d5 	.word	0x080063d5
 80063c8:	0800647f 	.word	0x0800647f
 80063cc:	080063d5 	.word	0x080063d5
 80063d0:	08006441 	.word	0x08006441
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80063d4:	78fb      	ldrb	r3, [r7, #3]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063e0:	461a      	mov	r2, r3
 80063e2:	f240 439d 	movw	r3, #1181	; 0x49d
 80063e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80063e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	da10      	bge.n	8006412 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80063f0:	78fb      	ldrb	r3, [r7, #3]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	78fa      	ldrb	r2, [r7, #3]
 8006400:	0151      	lsls	r1, r2, #5
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	440a      	add	r2, r1
 8006406:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800640a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800640e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8006410:	e057      	b.n	80064c2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800641a:	2b00      	cmp	r3, #0
 800641c:	d051      	beq.n	80064c2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800641e:	78fb      	ldrb	r3, [r7, #3]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	4413      	add	r3, r2
 8006426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	78fa      	ldrb	r2, [r7, #3]
 800642e:	0151      	lsls	r1, r2, #5
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	440a      	add	r2, r1
 8006434:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006438:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800643c:	60d3      	str	r3, [r2, #12]
      break;
 800643e:	e040      	b.n	80064c2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006440:	78fb      	ldrb	r3, [r7, #3]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	4413      	add	r3, r2
 8006448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800644c:	461a      	mov	r2, r3
 800644e:	f240 639d 	movw	r3, #1693	; 0x69d
 8006452:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006454:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006458:	2b00      	cmp	r3, #0
 800645a:	da34      	bge.n	80064c6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800645c:	78fb      	ldrb	r3, [r7, #3]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	4413      	add	r3, r2
 8006464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	78fa      	ldrb	r2, [r7, #3]
 800646c:	0151      	lsls	r1, r2, #5
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	440a      	add	r2, r1
 8006472:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800647a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800647c:	e023      	b.n	80064c6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800647e:	78fb      	ldrb	r3, [r7, #3]
 8006480:	015a      	lsls	r2, r3, #5
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	4413      	add	r3, r2
 8006486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800648a:	461a      	mov	r2, r3
 800648c:	f240 2325 	movw	r3, #549	; 0x225
 8006490:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006492:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006496:	2b00      	cmp	r3, #0
 8006498:	da17      	bge.n	80064ca <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800649a:	78fb      	ldrb	r3, [r7, #3]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	78fa      	ldrb	r2, [r7, #3]
 80064aa:	0151      	lsls	r1, r2, #5
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	440a      	add	r2, r1
 80064b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064b4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80064b8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80064ba:	e006      	b.n	80064ca <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	75fb      	strb	r3, [r7, #23]
      break;
 80064c0:	e004      	b.n	80064cc <USB_HC_Init+0x14c>
      break;
 80064c2:	bf00      	nop
 80064c4:	e002      	b.n	80064cc <USB_HC_Init+0x14c>
      break;
 80064c6:	bf00      	nop
 80064c8:	e000      	b.n	80064cc <USB_HC_Init+0x14c>
      break;
 80064ca:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064d2:	699a      	ldr	r2, [r3, #24]
 80064d4:	78fb      	ldrb	r3, [r7, #3]
 80064d6:	f003 030f 	and.w	r3, r3, #15
 80064da:	2101      	movs	r1, #1
 80064dc:	fa01 f303 	lsl.w	r3, r1, r3
 80064e0:	68b9      	ldr	r1, [r7, #8]
 80064e2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80064e6:	4313      	orrs	r3, r2
 80064e8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80064f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	da03      	bge.n	8006506 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80064fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006502:	613b      	str	r3, [r7, #16]
 8006504:	e001      	b.n	800650a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006506:	2300      	movs	r3, #0
 8006508:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800650a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800650e:	2b02      	cmp	r3, #2
 8006510:	d103      	bne.n	800651a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006512:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006516:	60fb      	str	r3, [r7, #12]
 8006518:	e001      	b.n	800651e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800651e:	787b      	ldrb	r3, [r7, #1]
 8006520:	059b      	lsls	r3, r3, #22
 8006522:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006526:	78bb      	ldrb	r3, [r7, #2]
 8006528:	02db      	lsls	r3, r3, #11
 800652a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800652e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006530:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006534:	049b      	lsls	r3, r3, #18
 8006536:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800653a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800653c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800653e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006542:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006548:	78fb      	ldrb	r3, [r7, #3]
 800654a:	0159      	lsls	r1, r3, #5
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	440b      	add	r3, r1
 8006550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006554:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800655a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800655c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006560:	2b03      	cmp	r3, #3
 8006562:	d10f      	bne.n	8006584 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006564:	78fb      	ldrb	r3, [r7, #3]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	4413      	add	r3, r2
 800656c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	78fa      	ldrb	r2, [r7, #3]
 8006574:	0151      	lsls	r1, r2, #5
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	440a      	add	r2, r1
 800657a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800657e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006582:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006584:	7dfb      	ldrb	r3, [r7, #23]
}
 8006586:	4618      	mov	r0, r3
 8006588:	371c      	adds	r7, #28
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop

08006594 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b08c      	sub	sp, #48	; 0x30
 8006598:	af02      	add	r7, sp, #8
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	4613      	mov	r3, r2
 80065a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	785b      	ldrb	r3, [r3, #1]
 80065aa:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80065ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065b0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d028      	beq.n	8006610 <USB_HC_StartXfer+0x7c>
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	791b      	ldrb	r3, [r3, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d124      	bne.n	8006610 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80065c6:	79fb      	ldrb	r3, [r7, #7]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10b      	bne.n	80065e4 <USB_HC_StartXfer+0x50>
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	795b      	ldrb	r3, [r3, #5]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d107      	bne.n	80065e4 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	785b      	ldrb	r3, [r3, #1]
 80065d8:	4619      	mov	r1, r3
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f000 fa2e 	bl	8006a3c <USB_DoPing>
      return HAL_OK;
 80065e0:	2300      	movs	r3, #0
 80065e2:	e112      	b.n	800680a <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 80065e4:	79fb      	ldrb	r3, [r7, #7]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d112      	bne.n	8006610 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	015a      	lsls	r2, r3, #5
 80065ee:	6a3b      	ldr	r3, [r7, #32]
 80065f0:	4413      	add	r3, r2
 80065f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	69fa      	ldr	r2, [r7, #28]
 80065fa:	0151      	lsls	r1, r2, #5
 80065fc:	6a3a      	ldr	r2, [r7, #32]
 80065fe:	440a      	add	r2, r1
 8006600:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006604:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006608:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	2200      	movs	r2, #0
 800660e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d018      	beq.n	800664a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	8912      	ldrh	r2, [r2, #8]
 8006620:	4413      	add	r3, r2
 8006622:	3b01      	subs	r3, #1
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	8912      	ldrh	r2, [r2, #8]
 8006628:	fbb3 f3f2 	udiv	r3, r3, r2
 800662c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800662e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006630:	8b7b      	ldrh	r3, [r7, #26]
 8006632:	429a      	cmp	r2, r3
 8006634:	d90b      	bls.n	800664e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006636:	8b7b      	ldrh	r3, [r7, #26]
 8006638:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800663a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	8912      	ldrh	r2, [r2, #8]
 8006640:	fb02 f203 	mul.w	r2, r2, r3
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	611a      	str	r2, [r3, #16]
 8006648:	e001      	b.n	800664e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800664a:	2301      	movs	r3, #1
 800664c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	78db      	ldrb	r3, [r3, #3]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d006      	beq.n	8006664 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006656:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	8912      	ldrh	r2, [r2, #8]
 800665c:	fb02 f203 	mul.w	r2, r2, r3
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800666c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800666e:	04d9      	lsls	r1, r3, #19
 8006670:	4b68      	ldr	r3, [pc, #416]	; (8006814 <USB_HC_StartXfer+0x280>)
 8006672:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006674:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	7a9b      	ldrb	r3, [r3, #10]
 800667a:	075b      	lsls	r3, r3, #29
 800667c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006680:	69f9      	ldr	r1, [r7, #28]
 8006682:	0148      	lsls	r0, r1, #5
 8006684:	6a39      	ldr	r1, [r7, #32]
 8006686:	4401      	add	r1, r0
 8006688:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800668c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800668e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006690:	79fb      	ldrb	r3, [r7, #7]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d009      	beq.n	80066aa <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	68d9      	ldr	r1, [r3, #12]
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a6:	460a      	mov	r2, r1
 80066a8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80066aa:	6a3b      	ldr	r3, [r7, #32]
 80066ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	bf0c      	ite	eq
 80066ba:	2301      	moveq	r3, #1
 80066bc:	2300      	movne	r3, #0
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	69fa      	ldr	r2, [r7, #28]
 80066d2:	0151      	lsls	r1, r2, #5
 80066d4:	6a3a      	ldr	r2, [r7, #32]
 80066d6:	440a      	add	r2, r1
 80066d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80066e0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	015a      	lsls	r2, r3, #5
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	4413      	add	r3, r2
 80066ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	7e7b      	ldrb	r3, [r7, #25]
 80066f2:	075b      	lsls	r3, r3, #29
 80066f4:	69f9      	ldr	r1, [r7, #28]
 80066f6:	0148      	lsls	r0, r1, #5
 80066f8:	6a39      	ldr	r1, [r7, #32]
 80066fa:	4401      	add	r1, r0
 80066fc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006700:	4313      	orrs	r3, r2
 8006702:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	015a      	lsls	r2, r3, #5
 8006708:	6a3b      	ldr	r3, [r7, #32]
 800670a:	4413      	add	r3, r2
 800670c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a41      	ldr	r2, [pc, #260]	; (8006818 <USB_HC_StartXfer+0x284>)
 8006714:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006716:	4b40      	ldr	r3, [pc, #256]	; (8006818 <USB_HC_StartXfer+0x284>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800671e:	4a3e      	ldr	r2, [pc, #248]	; (8006818 <USB_HC_StartXfer+0x284>)
 8006720:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	78db      	ldrb	r3, [r3, #3]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d006      	beq.n	8006738 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800672a:	4b3b      	ldr	r3, [pc, #236]	; (8006818 <USB_HC_StartXfer+0x284>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006732:	4a39      	ldr	r2, [pc, #228]	; (8006818 <USB_HC_StartXfer+0x284>)
 8006734:	6013      	str	r3, [r2, #0]
 8006736:	e005      	b.n	8006744 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006738:	4b37      	ldr	r3, [pc, #220]	; (8006818 <USB_HC_StartXfer+0x284>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006740:	4a35      	ldr	r2, [pc, #212]	; (8006818 <USB_HC_StartXfer+0x284>)
 8006742:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006744:	4b34      	ldr	r3, [pc, #208]	; (8006818 <USB_HC_StartXfer+0x284>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800674c:	4a32      	ldr	r2, [pc, #200]	; (8006818 <USB_HC_StartXfer+0x284>)
 800674e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	4413      	add	r3, r2
 8006758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800675c:	461a      	mov	r2, r3
 800675e:	4b2e      	ldr	r3, [pc, #184]	; (8006818 <USB_HC_StartXfer+0x284>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8006764:	79fb      	ldrb	r3, [r7, #7]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d14e      	bne.n	8006808 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	78db      	ldrb	r3, [r3, #3]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d14a      	bne.n	8006808 <USB_HC_StartXfer+0x274>
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d046      	beq.n	8006808 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	79db      	ldrb	r3, [r3, #7]
 800677e:	2b03      	cmp	r3, #3
 8006780:	d830      	bhi.n	80067e4 <USB_HC_StartXfer+0x250>
 8006782:	a201      	add	r2, pc, #4	; (adr r2, 8006788 <USB_HC_StartXfer+0x1f4>)
 8006784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006788:	08006799 	.word	0x08006799
 800678c:	080067bd 	.word	0x080067bd
 8006790:	08006799 	.word	0x08006799
 8006794:	080067bd 	.word	0x080067bd
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	3303      	adds	r3, #3
 800679e:	089b      	lsrs	r3, r3, #2
 80067a0:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80067a2:	8afa      	ldrh	r2, [r7, #22]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d91c      	bls.n	80067e8 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	f043 0220 	orr.w	r2, r3, #32
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	619a      	str	r2, [r3, #24]
          }
          break;
 80067ba:	e015      	b.n	80067e8 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	3303      	adds	r3, #3
 80067c2:	089b      	lsrs	r3, r3, #2
 80067c4:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80067c6:	8afa      	ldrh	r2, [r7, #22]
 80067c8:	6a3b      	ldr	r3, [r7, #32]
 80067ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d90a      	bls.n	80067ec <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	619a      	str	r2, [r3, #24]
          }
          break;
 80067e2:	e003      	b.n	80067ec <USB_HC_StartXfer+0x258>

        default:
          break;
 80067e4:	bf00      	nop
 80067e6:	e002      	b.n	80067ee <USB_HC_StartXfer+0x25a>
          break;
 80067e8:	bf00      	nop
 80067ea:	e000      	b.n	80067ee <USB_HC_StartXfer+0x25a>
          break;
 80067ec:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	68d9      	ldr	r1, [r3, #12]
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	785a      	ldrb	r2, [r3, #1]
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	b298      	uxth	r0, r3
 80067fc:	2300      	movs	r3, #0
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	4603      	mov	r3, r0
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f7ff fc88 	bl	8006118 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3728      	adds	r7, #40	; 0x28
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	1ff80000 	.word	0x1ff80000
 8006818:	200001a0 	.word	0x200001a0

0800681c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	b29b      	uxth	r3, r3
}
 8006832:	4618      	mov	r0, r3
 8006834:	3714      	adds	r7, #20
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800683e:	b480      	push	{r7}
 8006840:	b087      	sub	sp, #28
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	460b      	mov	r3, r1
 8006848:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800684e:	78fb      	ldrb	r3, [r7, #3]
 8006850:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006852:	2300      	movs	r3, #0
 8006854:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	015a      	lsls	r2, r3, #5
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	4413      	add	r3, r2
 800685e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	0c9b      	lsrs	r3, r3, #18
 8006866:	f003 0303 	and.w	r3, r3, #3
 800686a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d002      	beq.n	8006878 <USB_HC_Halt+0x3a>
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2b02      	cmp	r3, #2
 8006876:	d16c      	bne.n	8006952 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	4413      	add	r3, r2
 8006880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	0151      	lsls	r1, r2, #5
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	440a      	add	r2, r1
 800688e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006892:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006896:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d143      	bne.n	800692c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	0151      	lsls	r1, r2, #5
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	440a      	add	r2, r1
 80068ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068c2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	015a      	lsls	r2, r3, #5
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	0151      	lsls	r1, r2, #5
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	440a      	add	r2, r1
 80068da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068e2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	0151      	lsls	r1, r2, #5
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	440a      	add	r2, r1
 80068fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006902:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	3301      	adds	r3, #1
 8006908:	617b      	str	r3, [r7, #20]
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006910:	d81d      	bhi.n	800694e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	4413      	add	r3, r2
 800691a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006924:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006928:	d0ec      	beq.n	8006904 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800692a:	e080      	b.n	8006a2e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	4413      	add	r3, r2
 8006934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	0151      	lsls	r1, r2, #5
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	440a      	add	r2, r1
 8006942:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006946:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800694a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800694c:	e06f      	b.n	8006a2e <USB_HC_Halt+0x1f0>
          break;
 800694e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006950:	e06d      	b.n	8006a2e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	4413      	add	r3, r2
 800695a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	0151      	lsls	r1, r2, #5
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	440a      	add	r2, r1
 8006968:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800696c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006970:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d143      	bne.n	8006a0a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	015a      	lsls	r2, r3, #5
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	4413      	add	r3, r2
 800698a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	0151      	lsls	r1, r2, #5
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	440a      	add	r2, r1
 8006998:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800699c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069a0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	015a      	lsls	r2, r3, #5
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	0151      	lsls	r1, r2, #5
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	440a      	add	r2, r1
 80069b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069c0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	0151      	lsls	r1, r2, #5
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	440a      	add	r2, r1
 80069d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069e0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	3301      	adds	r3, #1
 80069e6:	617b      	str	r3, [r7, #20]
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069ee:	d81d      	bhi.n	8006a2c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a06:	d0ec      	beq.n	80069e2 <USB_HC_Halt+0x1a4>
 8006a08:	e011      	b.n	8006a2e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	015a      	lsls	r2, r3, #5
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	4413      	add	r3, r2
 8006a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	0151      	lsls	r1, r2, #5
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	440a      	add	r2, r1
 8006a20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a28:	6013      	str	r3, [r2, #0]
 8006a2a:	e000      	b.n	8006a2e <USB_HC_Halt+0x1f0>
          break;
 8006a2c:	bf00      	nop
    }
  }

  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	371c      	adds	r7, #28
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b087      	sub	sp, #28
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	460b      	mov	r3, r1
 8006a46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006a4c:	78fb      	ldrb	r3, [r7, #3]
 8006a4e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006a50:	2301      	movs	r3, #1
 8006a52:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	04da      	lsls	r2, r3, #19
 8006a58:	4b15      	ldr	r3, [pc, #84]	; (8006ab0 <USB_DoPing+0x74>)
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	0151      	lsls	r1, r2, #5
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	440a      	add	r2, r1
 8006a64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a6c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	015a      	lsls	r2, r3, #5
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	4413      	add	r3, r2
 8006a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a84:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a8c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	371c      	adds	r7, #28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	1ff80000 	.word	0x1ff80000

08006ab4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f7ff face 	bl	8006066 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006aca:	2110      	movs	r1, #16
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f7ff fadb 	bl	8006088 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7ff fafe 	bl	80060d4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006ad8:	2300      	movs	r3, #0
 8006ada:	613b      	str	r3, [r7, #16]
 8006adc:	e01f      	b.n	8006b1e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006af4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006afc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b04:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	015a      	lsls	r2, r3, #5
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b12:	461a      	mov	r2, r3
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	613b      	str	r3, [r7, #16]
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	2b0f      	cmp	r3, #15
 8006b22:	d9dc      	bls.n	8006ade <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006b24:	2300      	movs	r3, #0
 8006b26:	613b      	str	r3, [r7, #16]
 8006b28:	e034      	b.n	8006b94 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b40:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b48:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b50:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	015a      	lsls	r2, r3, #5
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	4413      	add	r3, r2
 8006b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b5e:	461a      	mov	r2, r3
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	3301      	adds	r3, #1
 8006b68:	617b      	str	r3, [r7, #20]
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b70:	d80c      	bhi.n	8006b8c <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b88:	d0ec      	beq.n	8006b64 <USB_StopHost+0xb0>
 8006b8a:	e000      	b.n	8006b8e <USB_StopHost+0xda>
        break;
 8006b8c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	3301      	adds	r3, #1
 8006b92:	613b      	str	r3, [r7, #16]
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	2b0f      	cmp	r3, #15
 8006b98:	d9c7      	bls.n	8006b2a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ba6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f04f 32ff 	mov.w	r2, #4294967295
 8006bae:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7ff fa47 	bl	8006044 <USB_EnableGlobalInt>

  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3718      	adds	r7, #24
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006bcc:	e008      	b.n	8006be0 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	32e0      	adds	r2, #224	; 0xe0
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	60fb      	str	r3, [r7, #12]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2b0e      	cmp	r3, #14
 8006be4:	d9f3      	bls.n	8006bce <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006be6:	2300      	movs	r3, #0
 8006be8:	60fb      	str	r3, [r7, #12]
 8006bea:	e009      	b.n	8006c00 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	60fb      	str	r3, [r7, #12]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c06:	d3f1      	bcc.n	8006bec <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2240      	movs	r2, #64	; 0x40
 8006c2c:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3714      	adds	r7, #20
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
	...

08006c54 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b088      	sub	sp, #32
 8006c58:	af04      	add	r7, sp, #16
 8006c5a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fadd 	bl	8007224 <USBH_IsPortEnabled>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10c      	bne.n	8006c8a <USBH_Process+0x36>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d007      	beq.n	8006c8a <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b03      	cmp	r3, #3
 8006c82:	d002      	beq.n	8006c8a <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2203      	movs	r2, #3
 8006c88:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b0b      	cmp	r3, #11
 8006c92:	f200 814c 	bhi.w	8006f2e <USBH_Process+0x2da>
 8006c96:	a201      	add	r2, pc, #4	; (adr r2, 8006c9c <USBH_Process+0x48>)
 8006c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9c:	08006ccd 	.word	0x08006ccd
 8006ca0:	08006cef 	.word	0x08006cef
 8006ca4:	08006d03 	.word	0x08006d03
 8006ca8:	08006f09 	.word	0x08006f09
 8006cac:	08006f2f 	.word	0x08006f2f
 8006cb0:	08006d91 	.word	0x08006d91
 8006cb4:	08006ebf 	.word	0x08006ebf
 8006cb8:	08006dc1 	.word	0x08006dc1
 8006cbc:	08006de1 	.word	0x08006de1
 8006cc0:	08006e01 	.word	0x08006e01
 8006cc4:	08006e2f 	.word	0x08006e2f
 8006cc8:	08006ef1 	.word	0x08006ef1
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f000 812c 	beq.w	8006f32 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8006ce0:	20c8      	movs	r0, #200	; 0xc8
 8006ce2:	f002 f8ca 	bl	8008e7a <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f002 f839 	bl	8008d5e <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006cec:	e121      	b.n	8006f32 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	f040 811e 	bne.w	8006f36 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006d00:	e119      	b.n	8006f36 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8006d02:	2064      	movs	r0, #100	; 0x64
 8006d04:	f002 f8b9 	bl	8008e7a <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f002 f803 	bl	8008d14 <USBH_LL_GetSpeed>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	461a      	mov	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2205      	movs	r2, #5
 8006d1c:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8006d1e:	2100      	movs	r1, #0
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 ffe3 	bl	8007cec <USBH_AllocPipe>
 8006d26:	4603      	mov	r3, r0
 8006d28:	461a      	mov	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8006d2e:	2180      	movs	r1, #128	; 0x80
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 ffdb 	bl	8007cec <USBH_AllocPipe>
 8006d36:	4603      	mov	r3, r0
 8006d38:	461a      	mov	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	7919      	ldrb	r1, [r3, #4]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006d52:	b292      	uxth	r2, r2
 8006d54:	9202      	str	r2, [sp, #8]
 8006d56:	2200      	movs	r2, #0
 8006d58:	9201      	str	r2, [sp, #4]
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2280      	movs	r2, #128	; 0x80
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 ffa4 	bl	8007cae <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	7959      	ldrb	r1, [r3, #5]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006d7a:	b292      	uxth	r2, r2
 8006d7c:	9202      	str	r2, [sp, #8]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	9201      	str	r2, [sp, #4]
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	4603      	mov	r3, r0
 8006d86:	2200      	movs	r2, #0
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 ff90 	bl	8007cae <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006d8e:	e0e3      	b.n	8006f58 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f8e7 	bl	8006f64 <USBH_HandleEnum>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f040 80ce 	bne.w	8006f3a <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d103      	bne.n	8006db8 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2208      	movs	r2, #8
 8006db4:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8006db6:	e0c0      	b.n	8006f3a <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2207      	movs	r2, #7
 8006dbc:	701a      	strb	r2, [r3, #0]
    break;
 8006dbe:	e0bc      	b.n	8006f3a <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f000 80b9 	beq.w	8006f3e <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006dd2:	2101      	movs	r1, #1
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2208      	movs	r2, #8
 8006ddc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006dde:	e0ae      	b.n	8006f3e <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	4619      	mov	r1, r3
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fb4a 	bl	8007484 <USBH_SetCfg>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f040 80a5 	bne.w	8006f42 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2209      	movs	r2, #9
 8006dfc:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006dfe:	e0a0      	b.n	8006f42 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8006e06:	f003 0320 	and.w	r3, r3, #32
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00b      	beq.n	8006e26 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006e0e:	2101      	movs	r1, #1
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 fb5a 	bl	80074ca <USBH_SetFeature>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f040 8094 	bne.w	8006f46 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	220a      	movs	r2, #10
 8006e22:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006e24:	e08f      	b.n	8006f46 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	220a      	movs	r2, #10
 8006e2a:	701a      	strb	r2, [r3, #0]
    break;
 8006e2c:	e08b      	b.n	8006f46 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f000 8088 	beq.w	8006f4a <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e42:	2300      	movs	r3, #0
 8006e44:	73fb      	strb	r3, [r7, #15]
 8006e46:	e017      	b.n	8006e78 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006e48:	7bfb      	ldrb	r3, [r7, #15]
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	33dc      	adds	r3, #220	; 0xdc
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	791a      	ldrb	r2, [r3, #4]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d108      	bne.n	8006e72 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	33dc      	adds	r3, #220	; 0xdc
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4413      	add	r3, r2
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e72:	7bfb      	ldrb	r3, [r7, #15]
 8006e74:	3301      	adds	r3, #1
 8006e76:	73fb      	strb	r3, [r7, #15]
 8006e78:	7bfb      	ldrb	r3, [r7, #15]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d0e4      	beq.n	8006e48 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d016      	beq.n	8006eb6 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	4798      	blx	r3
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d109      	bne.n	8006eae <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2206      	movs	r2, #6
 8006e9e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ea6:	2103      	movs	r1, #3
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006eac:	e04d      	b.n	8006f4a <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	220d      	movs	r2, #13
 8006eb2:	701a      	strb	r2, [r3, #0]
    break;
 8006eb4:	e049      	b.n	8006f4a <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	220d      	movs	r2, #13
 8006eba:	701a      	strb	r2, [r3, #0]
    break;
 8006ebc:	e045      	b.n	8006f4a <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00f      	beq.n	8006ee8 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	4798      	blx	r3
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8006ed8:	7bbb      	ldrb	r3, [r7, #14]
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d136      	bne.n	8006f4e <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	220b      	movs	r2, #11
 8006ee4:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8006ee6:	e032      	b.n	8006f4e <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	220d      	movs	r2, #13
 8006eec:	701a      	strb	r2, [r3, #0]
    break;
 8006eee:	e02e      	b.n	8006f4e <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d02b      	beq.n	8006f52 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	4798      	blx	r3
    }
    break;
 8006f06:	e024      	b.n	8006f52 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f7ff fe59 	bl	8006bc0 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d01e      	beq.n	8006f56 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8006f2c:	e013      	b.n	8006f56 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8006f2e:	bf00      	nop
 8006f30:	e012      	b.n	8006f58 <USBH_Process+0x304>
    break;
 8006f32:	bf00      	nop
 8006f34:	e010      	b.n	8006f58 <USBH_Process+0x304>
    break;
 8006f36:	bf00      	nop
 8006f38:	e00e      	b.n	8006f58 <USBH_Process+0x304>
    break;
 8006f3a:	bf00      	nop
 8006f3c:	e00c      	b.n	8006f58 <USBH_Process+0x304>
    break;
 8006f3e:	bf00      	nop
 8006f40:	e00a      	b.n	8006f58 <USBH_Process+0x304>
    break;
 8006f42:	bf00      	nop
 8006f44:	e008      	b.n	8006f58 <USBH_Process+0x304>
    break;
 8006f46:	bf00      	nop
 8006f48:	e006      	b.n	8006f58 <USBH_Process+0x304>
    break;
 8006f4a:	bf00      	nop
 8006f4c:	e004      	b.n	8006f58 <USBH_Process+0x304>
    break;
 8006f4e:	bf00      	nop
 8006f50:	e002      	b.n	8006f58 <USBH_Process+0x304>
    break;
 8006f52:	bf00      	nop
 8006f54:	e000      	b.n	8006f58 <USBH_Process+0x304>
    break;
 8006f56:	bf00      	nop
  }
 return USBH_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop

08006f64 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b088      	sub	sp, #32
 8006f68:	af04      	add	r7, sp, #16
 8006f6a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	785b      	ldrb	r3, [r3, #1]
 8006f74:	2b07      	cmp	r3, #7
 8006f76:	f200 80f8 	bhi.w	800716a <USBH_HandleEnum+0x206>
 8006f7a:	a201      	add	r2, pc, #4	; (adr r2, 8006f80 <USBH_HandleEnum+0x1c>)
 8006f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f80:	08006fa1 	.word	0x08006fa1
 8006f84:	08007013 	.word	0x08007013
 8006f88:	0800702b 	.word	0x0800702b
 8006f8c:	080070a1 	.word	0x080070a1
 8006f90:	080070b7 	.word	0x080070b7
 8006f94:	080070d3 	.word	0x080070d3
 8006f98:	08007107 	.word	0x08007107
 8006f9c:	0800713b 	.word	0x0800713b
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8006fa0:	2108      	movs	r1, #8
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f99e 	bl	80072e4 <USBH_Get_DevDesc>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f040 80df 	bne.w	800716e <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	7919      	ldrb	r1, [r3, #4]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006fd4:	b292      	uxth	r2, r2
 8006fd6:	9202      	str	r2, [sp, #8]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	9201      	str	r2, [sp, #4]
 8006fdc:	9300      	str	r3, [sp, #0]
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2280      	movs	r2, #128	; 0x80
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fe63 	bl	8007cae <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	7959      	ldrb	r1, [r3, #5]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006ffc:	b292      	uxth	r2, r2
 8006ffe:	9202      	str	r2, [sp, #8]
 8007000:	2200      	movs	r2, #0
 8007002:	9201      	str	r2, [sp, #4]
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	4603      	mov	r3, r0
 8007008:	2200      	movs	r2, #0
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fe4f 	bl	8007cae <USBH_OpenPipe>

    }
    break;
 8007010:	e0ad      	b.n	800716e <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8007012:	2112      	movs	r1, #18
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f965 	bl	80072e4 <USBH_Get_DevDesc>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	f040 80a8 	bne.w	8007172 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2202      	movs	r2, #2
 8007026:	705a      	strb	r2, [r3, #1]

    }
    break;
 8007028:	e0a3      	b.n	8007172 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800702a:	2101      	movs	r1, #1
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 fa05 	bl	800743c <USBH_SetAddress>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	f040 809e 	bne.w	8007176 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 800703a:	2002      	movs	r0, #2
 800703c:	f001 ff1d 	bl	8008e7a <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2203      	movs	r2, #3
 800704c:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	7919      	ldrb	r1, [r3, #4]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007062:	b292      	uxth	r2, r2
 8007064:	9202      	str	r2, [sp, #8]
 8007066:	2200      	movs	r2, #0
 8007068:	9201      	str	r2, [sp, #4]
 800706a:	9300      	str	r3, [sp, #0]
 800706c:	4603      	mov	r3, r0
 800706e:	2280      	movs	r2, #128	; 0x80
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fe1c 	bl	8007cae <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	7959      	ldrb	r1, [r3, #5]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800708a:	b292      	uxth	r2, r2
 800708c:	9202      	str	r2, [sp, #8]
 800708e:	2200      	movs	r2, #0
 8007090:	9201      	str	r2, [sp, #4]
 8007092:	9300      	str	r3, [sp, #0]
 8007094:	4603      	mov	r3, r0
 8007096:	2200      	movs	r2, #0
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fe08 	bl	8007cae <USBH_OpenPipe>
    }
    break;
 800709e:	e06a      	b.n	8007176 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 80070a0:	2109      	movs	r1, #9
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f946 	bl	8007334 <USBH_Get_CfgDesc>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d165      	bne.n	800717a <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2204      	movs	r2, #4
 80070b2:	705a      	strb	r2, [r3, #1]
    }
    break;
 80070b4:	e061      	b.n	800717a <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 80070bc:	4619      	mov	r1, r3
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f938 	bl	8007334 <USBH_Get_CfgDesc>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d159      	bne.n	800717e <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2205      	movs	r2, #5
 80070ce:	705a      	strb	r2, [r3, #1]
    }
    break;
 80070d0:	e055      	b.n	800717e <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d010      	beq.n	80070fe <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80070e8:	23ff      	movs	r3, #255	; 0xff
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f946 	bl	800737c <USBH_Get_StringDesc>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d145      	bne.n	8007182 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2206      	movs	r2, #6
 80070fa:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80070fc:	e041      	b.n	8007182 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2206      	movs	r2, #6
 8007102:	705a      	strb	r2, [r3, #1]
    break;
 8007104:	e03d      	b.n	8007182 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800710c:	2b00      	cmp	r3, #0
 800710e:	d010      	beq.n	8007132 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800711c:	23ff      	movs	r3, #255	; 0xff
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f92c 	bl	800737c <USBH_Get_StringDesc>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d12d      	bne.n	8007186 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2207      	movs	r2, #7
 800712e:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007130:	e029      	b.n	8007186 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2207      	movs	r2, #7
 8007136:	705a      	strb	r2, [r3, #1]
    break;
 8007138:	e025      	b.n	8007186 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00f      	beq.n	8007164 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007150:	23ff      	movs	r3, #255	; 0xff
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f912 	bl	800737c <USBH_Get_StringDesc>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d115      	bne.n	800718a <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 800715e:	2300      	movs	r3, #0
 8007160:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007162:	e012      	b.n	800718a <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8007164:	2300      	movs	r3, #0
 8007166:	73fb      	strb	r3, [r7, #15]
    break;
 8007168:	e00f      	b.n	800718a <USBH_HandleEnum+0x226>

  default:
    break;
 800716a:	bf00      	nop
 800716c:	e00e      	b.n	800718c <USBH_HandleEnum+0x228>
    break;
 800716e:	bf00      	nop
 8007170:	e00c      	b.n	800718c <USBH_HandleEnum+0x228>
    break;
 8007172:	bf00      	nop
 8007174:	e00a      	b.n	800718c <USBH_HandleEnum+0x228>
    break;
 8007176:	bf00      	nop
 8007178:	e008      	b.n	800718c <USBH_HandleEnum+0x228>
    break;
 800717a:	bf00      	nop
 800717c:	e006      	b.n	800718c <USBH_HandleEnum+0x228>
    break;
 800717e:	bf00      	nop
 8007180:	e004      	b.n	800718c <USBH_HandleEnum+0x228>
    break;
 8007182:	bf00      	nop
 8007184:	e002      	b.n	800718c <USBH_HandleEnum+0x228>
    break;
 8007186:	bf00      	nop
 8007188:	e000      	b.n	800718c <USBH_HandleEnum+0x228>
    break;
 800718a:	bf00      	nop
  }
  return Status;
 800718c:	7bfb      	ldrb	r3, [r7, #15]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop

08007198 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80071a6:	1c5a      	adds	r2, r3, #1
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f804 	bl	80071bc <USBH_HandleSof>
}
 80071b4:	bf00      	nop
 80071b6:	3708      	adds	r7, #8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	2b0b      	cmp	r3, #11
 80071cc:	d10a      	bne.n	80071e4 <USBH_HandleSof+0x28>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d005      	beq.n	80071e4 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	4798      	blx	r3
  }
}
 80071e4:	bf00      	nop
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80071fc:	bf00      	nop
}
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007218:	bf00      	nop
}
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8007232:	4618      	mov	r0, r3
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr

0800723e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b082      	sub	sp, #8
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	b2db      	uxtb	r3, r3
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10f      	bne.n	8007270 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00e      	beq.n	8007280 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007268:	2104      	movs	r1, #4
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	4798      	blx	r3
 800726e:	e007      	b.n	8007280 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007276:	2b01      	cmp	r3, #1
 8007278:	d102      	bne.n	8007280 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2202      	movs	r2, #2
 800727e:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b082      	sub	sp, #8
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f001 fd23 	bl	8008cde <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	791b      	ldrb	r3, [r3, #4]
 800729c:	4619      	mov	r1, r3
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 fd42 	bl	8007d28 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	795b      	ldrb	r3, [r3, #5]
 80072a8:	4619      	mov	r1, r3
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fd3c 	bl	8007d28 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d005      	beq.n	80072ce <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80072c8:	2105      	movs	r1, #5
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f001 fcea 	bl	8008ca8 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2203      	movs	r2, #3
 80072d8:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3708      	adds	r7, #8
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af02      	add	r7, sp, #8
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	460b      	mov	r3, r1
 80072ee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80072f6:	78fb      	ldrb	r3, [r7, #3]
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	4613      	mov	r3, r2
 80072fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007302:	2100      	movs	r1, #0
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f864 	bl	80073d2 <USBH_GetDescriptor>
 800730a:	4603      	mov	r3, r0
 800730c:	73fb      	strb	r3, [r7, #15]
 800730e:	7bfb      	ldrb	r3, [r7, #15]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10a      	bne.n	800732a <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f203 3022 	addw	r0, r3, #802	; 0x322
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007320:	78fa      	ldrb	r2, [r7, #3]
 8007322:	b292      	uxth	r2, r2
 8007324:	4619      	mov	r1, r3
 8007326:	f000 f8f4 	bl	8007512 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 800732a:	7bfb      	ldrb	r3, [r7, #15]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af02      	add	r7, sp, #8
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	460b      	mov	r3, r1
 800733e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	331c      	adds	r3, #28
 8007344:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8007346:	887b      	ldrh	r3, [r7, #2]
 8007348:	9300      	str	r3, [sp, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007350:	2100      	movs	r1, #0
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f83d 	bl	80073d2 <USBH_GetDescriptor>
 8007358:	4603      	mov	r3, r0
 800735a:	72fb      	strb	r3, [r7, #11]
 800735c:	7afb      	ldrb	r3, [r7, #11]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d107      	bne.n	8007372 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8007368:	887a      	ldrh	r2, [r7, #2]
 800736a:	68f9      	ldr	r1, [r7, #12]
 800736c:	4618      	mov	r0, r3
 800736e:	f000 f940 	bl	80075f2 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8007372:	7afb      	ldrb	r3, [r7, #11]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b088      	sub	sp, #32
 8007380:	af02      	add	r7, sp, #8
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	607a      	str	r2, [r7, #4]
 8007386:	461a      	mov	r2, r3
 8007388:	460b      	mov	r3, r1
 800738a:	72fb      	strb	r3, [r7, #11]
 800738c:	4613      	mov	r3, r2
 800738e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8007390:	7afb      	ldrb	r3, [r7, #11]
 8007392:	b29b      	uxth	r3, r3
 8007394:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007398:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80073a0:	893b      	ldrh	r3, [r7, #8]
 80073a2:	9300      	str	r3, [sp, #0]
 80073a4:	460b      	mov	r3, r1
 80073a6:	2100      	movs	r1, #0
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f000 f812 	bl	80073d2 <USBH_GetDescriptor>
 80073ae:	4603      	mov	r3, r0
 80073b0:	75fb      	strb	r3, [r7, #23]
 80073b2:	7dfb      	ldrb	r3, [r7, #23]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d107      	bne.n	80073c8 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80073be:	893a      	ldrh	r2, [r7, #8]
 80073c0:	6879      	ldr	r1, [r7, #4]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 fa13 	bl	80077ee <USBH_ParseStringDesc>
  }
  return status;
 80073c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3718      	adds	r7, #24
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b084      	sub	sp, #16
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	60f8      	str	r0, [r7, #12]
 80073da:	607b      	str	r3, [r7, #4]
 80073dc:	460b      	mov	r3, r1
 80073de:	72fb      	strb	r3, [r7, #11]
 80073e0:	4613      	mov	r3, r2
 80073e2:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	789b      	ldrb	r3, [r3, #2]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d11c      	bne.n	8007426 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80073ec:	7afb      	ldrb	r3, [r7, #11]
 80073ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80073f2:	b2da      	uxtb	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2206      	movs	r2, #6
 80073fc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	893a      	ldrh	r2, [r7, #8]
 8007402:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007404:	893b      	ldrh	r3, [r7, #8]
 8007406:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800740a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800740e:	d104      	bne.n	800741a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f240 4209 	movw	r2, #1033	; 0x409
 8007416:	829a      	strh	r2, [r3, #20]
 8007418:	e002      	b.n	8007420 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	8b3a      	ldrh	r2, [r7, #24]
 8007424:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8007426:	8b3b      	ldrh	r3, [r7, #24]
 8007428:	461a      	mov	r2, r3
 800742a:	6879      	ldr	r1, [r7, #4]
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f000 fa2c 	bl	800788a <USBH_CtlReq>
 8007432:	4603      	mov	r3, r0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3710      	adds	r7, #16
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	460b      	mov	r3, r1
 8007446:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	789b      	ldrb	r3, [r3, #2]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d10f      	bne.n	8007470 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2205      	movs	r2, #5
 800745a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800745c:	78fb      	ldrb	r3, [r7, #3]
 800745e:	b29a      	uxth	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007470:	2200      	movs	r2, #0
 8007472:	2100      	movs	r1, #0
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fa08 	bl	800788a <USBH_CtlReq>
 800747a:	4603      	mov	r3, r0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	460b      	mov	r3, r1
 800748e:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	789b      	ldrb	r3, [r3, #2]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d10e      	bne.n	80074b6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2209      	movs	r2, #9
 80074a2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	887a      	ldrh	r2, [r7, #2]
 80074a8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 80074b6:	2200      	movs	r2, #0
 80074b8:	2100      	movs	r1, #0
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f9e5 	bl	800788a <USBH_CtlReq>
 80074c0:	4603      	mov	r3, r0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b082      	sub	sp, #8
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
 80074d2:	460b      	mov	r3, r1
 80074d4:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	789b      	ldrb	r3, [r3, #2]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d10f      	bne.n	80074fe <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2203      	movs	r2, #3
 80074e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80074ea:	78fb      	ldrb	r3, [r7, #3]
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80074fe:	2200      	movs	r2, #0
 8007500:	2100      	movs	r1, #0
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f9c1 	bl	800788a <USBH_CtlReq>
 8007508:	4603      	mov	r3, r0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3708      	adds	r7, #8
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8007512:	b480      	push	{r7}
 8007514:	b085      	sub	sp, #20
 8007516:	af00      	add	r7, sp, #0
 8007518:	60f8      	str	r0, [r7, #12]
 800751a:	60b9      	str	r1, [r7, #8]
 800751c:	4613      	mov	r3, r2
 800751e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	781a      	ldrb	r2, [r3, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	785a      	ldrb	r2, [r3, #1]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	3302      	adds	r3, #2
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	b29a      	uxth	r2, r3
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	3303      	adds	r3, #3
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	b29b      	uxth	r3, r3
 8007540:	021b      	lsls	r3, r3, #8
 8007542:	b29b      	uxth	r3, r3
 8007544:	4313      	orrs	r3, r2
 8007546:	b29a      	uxth	r2, r3
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	791a      	ldrb	r2, [r3, #4]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	795a      	ldrb	r2, [r3, #5]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	799a      	ldrb	r2, [r3, #6]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	79da      	ldrb	r2, [r3, #7]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800756c:	88fb      	ldrh	r3, [r7, #6]
 800756e:	2b08      	cmp	r3, #8
 8007570:	d939      	bls.n	80075e6 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	3308      	adds	r3, #8
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	b29a      	uxth	r2, r3
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	3309      	adds	r3, #9
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	b29b      	uxth	r3, r3
 8007582:	021b      	lsls	r3, r3, #8
 8007584:	b29b      	uxth	r3, r3
 8007586:	4313      	orrs	r3, r2
 8007588:	b29a      	uxth	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	330a      	adds	r3, #10
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	b29a      	uxth	r2, r3
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	330b      	adds	r3, #11
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	b29b      	uxth	r3, r3
 800759e:	021b      	lsls	r3, r3, #8
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	4313      	orrs	r3, r2
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	330c      	adds	r3, #12
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	330d      	adds	r3, #13
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	021b      	lsls	r3, r3, #8
 80075bc:	b29b      	uxth	r3, r3
 80075be:	4313      	orrs	r3, r2
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	7b9a      	ldrb	r2, [r3, #14]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	7bda      	ldrb	r2, [r3, #15]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	7c1a      	ldrb	r2, [r3, #16]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	7c5a      	ldrb	r2, [r3, #17]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	745a      	strb	r2, [r3, #17]
  }
}
 80075e6:	bf00      	nop
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b08a      	sub	sp, #40	; 0x28
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	60f8      	str	r0, [r7, #12]
 80075fa:	60b9      	str	r1, [r7, #8]
 80075fc:	4613      	mov	r3, r2
 80075fe:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007604:	2300      	movs	r3, #0
 8007606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800760a:	2300      	movs	r3, #0
 800760c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	781a      	ldrb	r2, [r3, #0]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	785a      	ldrb	r2, [r3, #1]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	3302      	adds	r3, #2
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	b29a      	uxth	r2, r3
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	3303      	adds	r3, #3
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	b29b      	uxth	r3, r3
 8007634:	021b      	lsls	r3, r3, #8
 8007636:	b29b      	uxth	r3, r3
 8007638:	4313      	orrs	r3, r2
 800763a:	b29a      	uxth	r2, r3
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	791a      	ldrb	r2, [r3, #4]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	795a      	ldrb	r2, [r3, #5]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	799a      	ldrb	r2, [r3, #6]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	79da      	ldrb	r2, [r3, #7]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	7a1a      	ldrb	r2, [r3, #8]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007668:	88fb      	ldrh	r3, [r7, #6]
 800766a:	2b09      	cmp	r3, #9
 800766c:	d95f      	bls.n	800772e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800766e:	2309      	movs	r3, #9
 8007670:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007672:	2300      	movs	r3, #0
 8007674:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007676:	e051      	b.n	800771c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007678:	f107 0316 	add.w	r3, r7, #22
 800767c:	4619      	mov	r1, r3
 800767e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007680:	f000 f8e8 	bl	8007854 <USBH_GetNextDesc>
 8007684:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007688:	785b      	ldrb	r3, [r3, #1]
 800768a:	2b04      	cmp	r3, #4
 800768c:	d146      	bne.n	800771c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800768e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007692:	221a      	movs	r2, #26
 8007694:	fb02 f303 	mul.w	r3, r2, r3
 8007698:	3308      	adds	r3, #8
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	4413      	add	r3, r2
 800769e:	3302      	adds	r3, #2
 80076a0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 80076a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076a4:	69f8      	ldr	r0, [r7, #28]
 80076a6:	f000 f846 	bl	8007736 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80076aa:	2300      	movs	r3, #0
 80076ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80076b0:	2300      	movs	r3, #0
 80076b2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80076b4:	e022      	b.n	80076fc <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 80076b6:	f107 0316 	add.w	r3, r7, #22
 80076ba:	4619      	mov	r1, r3
 80076bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076be:	f000 f8c9 	bl	8007854 <USBH_GetNextDesc>
 80076c2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	785b      	ldrb	r3, [r3, #1]
 80076c8:	2b05      	cmp	r3, #5
 80076ca:	d117      	bne.n	80076fc <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80076cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076d0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80076d4:	3201      	adds	r2, #1
 80076d6:	00d2      	lsls	r2, r2, #3
 80076d8:	211a      	movs	r1, #26
 80076da:	fb01 f303 	mul.w	r3, r1, r3
 80076de:	4413      	add	r3, r2
 80076e0:	3308      	adds	r3, #8
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	4413      	add	r3, r2
 80076e6:	3304      	adds	r3, #4
 80076e8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 80076ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076ec:	69b8      	ldr	r0, [r7, #24]
 80076ee:	f000 f851 	bl	8007794 <USBH_ParseEPDesc>
            ep_ix++;
 80076f2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80076f6:	3301      	adds	r3, #1
 80076f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	791b      	ldrb	r3, [r3, #4]
 8007700:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007704:	429a      	cmp	r2, r3
 8007706:	d204      	bcs.n	8007712 <USBH_ParseCfgDesc+0x120>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	885a      	ldrh	r2, [r3, #2]
 800770c:	8afb      	ldrh	r3, [r7, #22]
 800770e:	429a      	cmp	r2, r3
 8007710:	d8d1      	bhi.n	80076b6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007712:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007716:	3301      	adds	r3, #1
 8007718:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800771c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007720:	2b01      	cmp	r3, #1
 8007722:	d804      	bhi.n	800772e <USBH_ParseCfgDesc+0x13c>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	885a      	ldrh	r2, [r3, #2]
 8007728:	8afb      	ldrh	r3, [r7, #22]
 800772a:	429a      	cmp	r2, r3
 800772c:	d8a4      	bhi.n	8007678 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800772e:	bf00      	nop
 8007730:	3728      	adds	r7, #40	; 0x28
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8007736:	b480      	push	{r7}
 8007738:	b083      	sub	sp, #12
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	781a      	ldrb	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	785a      	ldrb	r2, [r3, #1]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	789a      	ldrb	r2, [r3, #2]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	78da      	ldrb	r2, [r3, #3]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	791a      	ldrb	r2, [r3, #4]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	795a      	ldrb	r2, [r3, #5]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	799a      	ldrb	r2, [r3, #6]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	79da      	ldrb	r2, [r3, #7]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	7a1a      	ldrb	r2, [r3, #8]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	721a      	strb	r2, [r3, #8]
}
 8007788:	bf00      	nop
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	781a      	ldrb	r2, [r3, #0]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	785a      	ldrb	r2, [r3, #1]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	789a      	ldrb	r2, [r3, #2]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	78da      	ldrb	r2, [r3, #3]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	3304      	adds	r3, #4
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	3305      	adds	r3, #5
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	021b      	lsls	r3, r3, #8
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	4313      	orrs	r3, r2
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	799a      	ldrb	r2, [r3, #6]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	719a      	strb	r2, [r3, #6]
}
 80077e2:	bf00      	nop
 80077e4:	370c      	adds	r7, #12
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr

080077ee <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 80077ee:	b480      	push	{r7}
 80077f0:	b087      	sub	sp, #28
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	60f8      	str	r0, [r7, #12]
 80077f6:	60b9      	str	r1, [r7, #8]
 80077f8:	4613      	mov	r3, r2
 80077fa:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	3301      	adds	r3, #1
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	2b03      	cmp	r3, #3
 8007804:	d120      	bne.n	8007848 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	1e9a      	subs	r2, r3, #2
 800780c:	88fb      	ldrh	r3, [r7, #6]
 800780e:	4293      	cmp	r3, r2
 8007810:	bf28      	it	cs
 8007812:	4613      	movcs	r3, r2
 8007814:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	3302      	adds	r3, #2
 800781a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800781c:	2300      	movs	r3, #0
 800781e:	82fb      	strh	r3, [r7, #22]
 8007820:	e00b      	b.n	800783a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007822:	8afb      	ldrh	r3, [r7, #22]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	4413      	add	r3, r2
 8007828:	781a      	ldrb	r2, [r3, #0]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	3301      	adds	r3, #1
 8007832:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007834:	8afb      	ldrh	r3, [r7, #22]
 8007836:	3302      	adds	r3, #2
 8007838:	82fb      	strh	r3, [r7, #22]
 800783a:	8afa      	ldrh	r2, [r7, #22]
 800783c:	8abb      	ldrh	r3, [r7, #20]
 800783e:	429a      	cmp	r2, r3
 8007840:	d3ef      	bcc.n	8007822 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	2200      	movs	r2, #0
 8007846:	701a      	strb	r2, [r3, #0]
  }
}
 8007848:	bf00      	nop
 800784a:	371c      	adds	r7, #28
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	881a      	ldrh	r2, [r3, #0]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	b29b      	uxth	r3, r3
 8007868:	4413      	add	r3, r2
 800786a:	b29a      	uxth	r2, r3
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4413      	add	r3, r2
 800787a:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800787c:	68fb      	ldr	r3, [r7, #12]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3714      	adds	r7, #20
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b086      	sub	sp, #24
 800788e:	af00      	add	r7, sp, #0
 8007890:	60f8      	str	r0, [r7, #12]
 8007892:	60b9      	str	r1, [r7, #8]
 8007894:	4613      	mov	r3, r2
 8007896:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007898:	2301      	movs	r3, #1
 800789a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	789b      	ldrb	r3, [r3, #2]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d002      	beq.n	80078aa <USBH_CtlReq+0x20>
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d00f      	beq.n	80078c8 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 80078a8:	e034      	b.n	8007914 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	88fa      	ldrh	r2, [r7, #6]
 80078b4:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2201      	movs	r2, #1
 80078ba:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2202      	movs	r2, #2
 80078c0:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 80078c2:	2301      	movs	r3, #1
 80078c4:	75fb      	strb	r3, [r7, #23]
    break;
 80078c6:	e025      	b.n	8007914 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f000 f829 	bl	8007920 <USBH_HandleControl>
 80078ce:	4603      	mov	r3, r0
 80078d0:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 80078d2:	7dfb      	ldrb	r3, [r7, #23]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d108      	bne.n	80078ea <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2201      	movs	r2, #1
 80078dc:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2200      	movs	r2, #0
 80078e2:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80078e4:	2300      	movs	r3, #0
 80078e6:	75fb      	strb	r3, [r7, #23]
    break;
 80078e8:	e013      	b.n	8007912 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 80078ea:	7dfb      	ldrb	r3, [r7, #23]
 80078ec:	2b03      	cmp	r3, #3
 80078ee:	d108      	bne.n	8007902 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2201      	movs	r2, #1
 80078f4:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80078fc:	2303      	movs	r3, #3
 80078fe:	75fb      	strb	r3, [r7, #23]
    break;
 8007900:	e007      	b.n	8007912 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8007902:	7dfb      	ldrb	r3, [r7, #23]
 8007904:	2b02      	cmp	r3, #2
 8007906:	d104      	bne.n	8007912 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2201      	movs	r2, #1
 800790c:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800790e:	2302      	movs	r3, #2
 8007910:	75fb      	strb	r3, [r7, #23]
    break;
 8007912:	bf00      	nop
  }
  return status;
 8007914:	7dfb      	ldrb	r3, [r7, #23]
}
 8007916:	4618      	mov	r0, r3
 8007918:	3718      	adds	r7, #24
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
	...

08007920 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af02      	add	r7, sp, #8
 8007926:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007928:	2301      	movs	r3, #1
 800792a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800792c:	2300      	movs	r3, #0
 800792e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	7e1b      	ldrb	r3, [r3, #24]
 8007934:	3b01      	subs	r3, #1
 8007936:	2b0a      	cmp	r3, #10
 8007938:	f200 814c 	bhi.w	8007bd4 <USBH_HandleControl+0x2b4>
 800793c:	a201      	add	r2, pc, #4	; (adr r2, 8007944 <USBH_HandleControl+0x24>)
 800793e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007942:	bf00      	nop
 8007944:	08007971 	.word	0x08007971
 8007948:	0800798b 	.word	0x0800798b
 800794c:	080079f5 	.word	0x080079f5
 8007950:	08007a1b 	.word	0x08007a1b
 8007954:	08007a53 	.word	0x08007a53
 8007958:	08007a7f 	.word	0x08007a7f
 800795c:	08007ad1 	.word	0x08007ad1
 8007960:	08007af3 	.word	0x08007af3
 8007964:	08007b2f 	.word	0x08007b2f
 8007968:	08007b57 	.word	0x08007b57
 800796c:	08007b95 	.word	0x08007b95
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f103 0110 	add.w	r1, r3, #16
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	795b      	ldrb	r3, [r3, #5]
 800797a:	461a      	mov	r2, r3
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 f939 	bl	8007bf4 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2202      	movs	r2, #2
 8007986:	761a      	strb	r2, [r3, #24]
    break;
 8007988:	e12f      	b.n	8007bea <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	795b      	ldrb	r3, [r3, #5]
 800798e:	4619      	mov	r1, r3
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f001 fa5f 	bl	8008e54 <USBH_LL_GetURBState>
 8007996:	4603      	mov	r3, r0
 8007998:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800799a:	7bbb      	ldrb	r3, [r7, #14]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d11e      	bne.n	80079de <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	7c1b      	ldrb	r3, [r3, #16]
 80079a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80079a8:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	8adb      	ldrh	r3, [r3, #22]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00a      	beq.n	80079c8 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 80079b2:	7b7b      	ldrb	r3, [r7, #13]
 80079b4:	2b80      	cmp	r3, #128	; 0x80
 80079b6:	d103      	bne.n	80079c0 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2203      	movs	r2, #3
 80079bc:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80079be:	e10b      	b.n	8007bd8 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2205      	movs	r2, #5
 80079c4:	761a      	strb	r2, [r3, #24]
    break;
 80079c6:	e107      	b.n	8007bd8 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 80079c8:	7b7b      	ldrb	r3, [r7, #13]
 80079ca:	2b80      	cmp	r3, #128	; 0x80
 80079cc:	d103      	bne.n	80079d6 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2209      	movs	r2, #9
 80079d2:	761a      	strb	r2, [r3, #24]
    break;
 80079d4:	e100      	b.n	8007bd8 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2207      	movs	r2, #7
 80079da:	761a      	strb	r2, [r3, #24]
    break;
 80079dc:	e0fc      	b.n	8007bd8 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80079de:	7bbb      	ldrb	r3, [r7, #14]
 80079e0:	2b04      	cmp	r3, #4
 80079e2:	d003      	beq.n	80079ec <USBH_HandleControl+0xcc>
 80079e4:	7bbb      	ldrb	r3, [r7, #14]
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	f040 80f6 	bne.w	8007bd8 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	220b      	movs	r2, #11
 80079f0:	761a      	strb	r2, [r3, #24]
    break;
 80079f2:	e0f1      	b.n	8007bd8 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6899      	ldr	r1, [r3, #8]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	899a      	ldrh	r2, [r3, #12]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	791b      	ldrb	r3, [r3, #4]
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f930 	bl	8007c72 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2204      	movs	r2, #4
 8007a16:	761a      	strb	r2, [r3, #24]
    break;
 8007a18:	e0e7      	b.n	8007bea <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	791b      	ldrb	r3, [r3, #4]
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f001 fa17 	bl	8008e54 <USBH_LL_GetURBState>
 8007a26:	4603      	mov	r3, r0
 8007a28:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8007a2a:	7bbb      	ldrb	r3, [r7, #14]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d102      	bne.n	8007a36 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2209      	movs	r2, #9
 8007a34:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8007a36:	7bbb      	ldrb	r3, [r7, #14]
 8007a38:	2b05      	cmp	r3, #5
 8007a3a:	d102      	bne.n	8007a42 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007a40:	e0cc      	b.n	8007bdc <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8007a42:	7bbb      	ldrb	r3, [r7, #14]
 8007a44:	2b04      	cmp	r3, #4
 8007a46:	f040 80c9 	bne.w	8007bdc <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	220b      	movs	r2, #11
 8007a4e:	761a      	strb	r2, [r3, #24]
    break;
 8007a50:	e0c4      	b.n	8007bdc <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6899      	ldr	r1, [r3, #8]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	899a      	ldrh	r2, [r3, #12]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	7958      	ldrb	r0, [r3, #5]
 8007a5e:	2301      	movs	r3, #1
 8007a60:	9300      	str	r3, [sp, #0]
 8007a62:	4603      	mov	r3, r0
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 f8df 	bl	8007c28 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2206      	movs	r2, #6
 8007a7a:	761a      	strb	r2, [r3, #24]
    break;
 8007a7c:	e0b5      	b.n	8007bea <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	795b      	ldrb	r3, [r3, #5]
 8007a82:	4619      	mov	r1, r3
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f001 f9e5 	bl	8008e54 <USBH_LL_GetURBState>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8007a8e:	7bbb      	ldrb	r3, [r7, #14]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d103      	bne.n	8007a9c <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2207      	movs	r2, #7
 8007a98:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007a9a:	e0a1      	b.n	8007be0 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8007a9c:	7bbb      	ldrb	r3, [r7, #14]
 8007a9e:	2b05      	cmp	r3, #5
 8007aa0:	d105      	bne.n	8007aae <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	220c      	movs	r2, #12
 8007aa6:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	73fb      	strb	r3, [r7, #15]
    break;
 8007aac:	e098      	b.n	8007be0 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007aae:	7bbb      	ldrb	r3, [r7, #14]
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d103      	bne.n	8007abc <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2205      	movs	r2, #5
 8007ab8:	761a      	strb	r2, [r3, #24]
    break;
 8007aba:	e091      	b.n	8007be0 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8007abc:	7bbb      	ldrb	r3, [r7, #14]
 8007abe:	2b04      	cmp	r3, #4
 8007ac0:	f040 808e 	bne.w	8007be0 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	220b      	movs	r2, #11
 8007ac8:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8007aca:	2302      	movs	r3, #2
 8007acc:	73fb      	strb	r3, [r7, #15]
    break;
 8007ace:	e087      	b.n	8007be0 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	791b      	ldrb	r3, [r3, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f8ca 	bl	8007c72 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2208      	movs	r2, #8
 8007aee:	761a      	strb	r2, [r3, #24]

    break;
 8007af0:	e07b      	b.n	8007bea <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	791b      	ldrb	r3, [r3, #4]
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f001 f9ab 	bl	8008e54 <USBH_LL_GetURBState>
 8007afe:	4603      	mov	r3, r0
 8007b00:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8007b02:	7bbb      	ldrb	r3, [r7, #14]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d105      	bne.n	8007b14 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	220d      	movs	r2, #13
 8007b0c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007b12:	e067      	b.n	8007be4 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8007b14:	7bbb      	ldrb	r3, [r7, #14]
 8007b16:	2b04      	cmp	r3, #4
 8007b18:	d103      	bne.n	8007b22 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	220b      	movs	r2, #11
 8007b1e:	761a      	strb	r2, [r3, #24]
    break;
 8007b20:	e060      	b.n	8007be4 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8007b22:	7bbb      	ldrb	r3, [r7, #14]
 8007b24:	2b05      	cmp	r3, #5
 8007b26:	d15d      	bne.n	8007be4 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b2c:	e05a      	b.n	8007be4 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	795a      	ldrb	r2, [r3, #5]
 8007b32:	2301      	movs	r3, #1
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	4613      	mov	r3, r2
 8007b38:	2200      	movs	r2, #0
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 f873 	bl	8007c28 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	220a      	movs	r2, #10
 8007b52:	761a      	strb	r2, [r3, #24]
    break;
 8007b54:	e049      	b.n	8007bea <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	795b      	ldrb	r3, [r3, #5]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f001 f979 	bl	8008e54 <USBH_LL_GetURBState>
 8007b62:	4603      	mov	r3, r0
 8007b64:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8007b66:	7bbb      	ldrb	r3, [r7, #14]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d105      	bne.n	8007b78 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	220d      	movs	r2, #13
 8007b74:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8007b76:	e037      	b.n	8007be8 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007b78:	7bbb      	ldrb	r3, [r7, #14]
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d103      	bne.n	8007b86 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2209      	movs	r2, #9
 8007b82:	761a      	strb	r2, [r3, #24]
    break;
 8007b84:	e030      	b.n	8007be8 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8007b86:	7bbb      	ldrb	r3, [r7, #14]
 8007b88:	2b04      	cmp	r3, #4
 8007b8a:	d12d      	bne.n	8007be8 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	220b      	movs	r2, #11
 8007b90:	761a      	strb	r2, [r3, #24]
    break;
 8007b92:	e029      	b.n	8007be8 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	7e5b      	ldrb	r3, [r3, #25]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	b2da      	uxtb	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	765a      	strb	r2, [r3, #25]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	7e5b      	ldrb	r3, [r3, #25]
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d809      	bhi.n	8007bbc <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f001 f898 	bl	8008cde <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8007bba:	e016      	b.n	8007bea <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007bc2:	2106      	movs	r1, #6
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8007bce:	2302      	movs	r3, #2
 8007bd0:	73fb      	strb	r3, [r7, #15]
    break;
 8007bd2:	e00a      	b.n	8007bea <USBH_HandleControl+0x2ca>

  default:
    break;
 8007bd4:	bf00      	nop
 8007bd6:	e008      	b.n	8007bea <USBH_HandleControl+0x2ca>
    break;
 8007bd8:	bf00      	nop
 8007bda:	e006      	b.n	8007bea <USBH_HandleControl+0x2ca>
    break;
 8007bdc:	bf00      	nop
 8007bde:	e004      	b.n	8007bea <USBH_HandleControl+0x2ca>
    break;
 8007be0:	bf00      	nop
 8007be2:	e002      	b.n	8007bea <USBH_HandleControl+0x2ca>
    break;
 8007be4:	bf00      	nop
 8007be6:	e000      	b.n	8007bea <USBH_HandleControl+0x2ca>
    break;
 8007be8:	bf00      	nop
  }
  return status;
 8007bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b088      	sub	sp, #32
 8007bf8:	af04      	add	r7, sp, #16
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	4613      	mov	r3, r2
 8007c00:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007c02:	79f9      	ldrb	r1, [r7, #7]
 8007c04:	2300      	movs	r3, #0
 8007c06:	9303      	str	r3, [sp, #12]
 8007c08:	2308      	movs	r3, #8
 8007c0a:	9302      	str	r3, [sp, #8]
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	9301      	str	r3, [sp, #4]
 8007c10:	2300      	movs	r3, #0
 8007c12:	9300      	str	r3, [sp, #0]
 8007c14:	2300      	movs	r3, #0
 8007c16:	2200      	movs	r2, #0
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f001 f8ea 	bl	8008df2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b088      	sub	sp, #32
 8007c2c:	af04      	add	r7, sp, #16
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	4611      	mov	r1, r2
 8007c34:	461a      	mov	r2, r3
 8007c36:	460b      	mov	r3, r1
 8007c38:	80fb      	strh	r3, [r7, #6]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d001      	beq.n	8007c4c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007c4c:	7979      	ldrb	r1, [r7, #5]
 8007c4e:	7e3b      	ldrb	r3, [r7, #24]
 8007c50:	9303      	str	r3, [sp, #12]
 8007c52:	88fb      	ldrh	r3, [r7, #6]
 8007c54:	9302      	str	r3, [sp, #8]
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	9301      	str	r3, [sp, #4]
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	9300      	str	r3, [sp, #0]
 8007c5e:	2300      	movs	r3, #0
 8007c60:	2200      	movs	r2, #0
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f001 f8c5 	bl	8008df2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b088      	sub	sp, #32
 8007c76:	af04      	add	r7, sp, #16
 8007c78:	60f8      	str	r0, [r7, #12]
 8007c7a:	60b9      	str	r1, [r7, #8]
 8007c7c:	4611      	mov	r1, r2
 8007c7e:	461a      	mov	r2, r3
 8007c80:	460b      	mov	r3, r1
 8007c82:	80fb      	strh	r3, [r7, #6]
 8007c84:	4613      	mov	r3, r2
 8007c86:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007c88:	7979      	ldrb	r1, [r7, #5]
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	9303      	str	r3, [sp, #12]
 8007c8e:	88fb      	ldrh	r3, [r7, #6]
 8007c90:	9302      	str	r3, [sp, #8]
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	9301      	str	r3, [sp, #4]
 8007c96:	2301      	movs	r3, #1
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f001 f8a7 	bl	8008df2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007ca4:	2300      	movs	r3, #0

}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b086      	sub	sp, #24
 8007cb2:	af04      	add	r7, sp, #16
 8007cb4:	6078      	str	r0, [r7, #4]
 8007cb6:	4608      	mov	r0, r1
 8007cb8:	4611      	mov	r1, r2
 8007cba:	461a      	mov	r2, r3
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	70fb      	strb	r3, [r7, #3]
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	70bb      	strb	r3, [r7, #2]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8007cc8:	7878      	ldrb	r0, [r7, #1]
 8007cca:	78ba      	ldrb	r2, [r7, #2]
 8007ccc:	78f9      	ldrb	r1, [r7, #3]
 8007cce:	8b3b      	ldrh	r3, [r7, #24]
 8007cd0:	9302      	str	r3, [sp, #8]
 8007cd2:	7d3b      	ldrb	r3, [r7, #20]
 8007cd4:	9301      	str	r3, [sp, #4]
 8007cd6:	7c3b      	ldrb	r3, [r7, #16]
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	4603      	mov	r3, r0
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f001 f859 	bl	8008d94 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8007ce2:	2300      	movs	r3, #0

}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f831 	bl	8007d60 <USBH_GetFreePipe>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007d02:	89fb      	ldrh	r3, [r7, #14]
 8007d04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d007      	beq.n	8007d1c <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8007d0c:	78fb      	ldrb	r3, [r7, #3]
 8007d0e:	89fa      	ldrh	r2, [r7, #14]
 8007d10:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	32e0      	adds	r2, #224	; 0xe0
 8007d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8007d1c:	89fb      	ldrh	r3, [r7, #14]
 8007d1e:	b2db      	uxtb	r3, r3
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	460b      	mov	r3, r1
 8007d32:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8007d34:	78fb      	ldrb	r3, [r7, #3]
 8007d36:	2b0a      	cmp	r3, #10
 8007d38:	d80b      	bhi.n	8007d52 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8007d3a:	78fa      	ldrb	r2, [r7, #3]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	32e0      	adds	r2, #224	; 0xe0
 8007d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d44:	78fa      	ldrb	r2, [r7, #3]
 8007d46:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	32e0      	adds	r2, #224	; 0xe0
 8007d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	73fb      	strb	r3, [r7, #15]
 8007d70:	e00e      	b.n	8007d90 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007d72:	7bfa      	ldrb	r2, [r7, #15]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	32e0      	adds	r2, #224	; 0xe0
 8007d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d102      	bne.n	8007d8a <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8007d84:	7bfb      	ldrb	r3, [r7, #15]
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	e007      	b.n	8007d9a <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8007d8a:	7bfb      	ldrb	r3, [r7, #15]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	73fb      	strb	r3, [r7, #15]
 8007d90:	7bfb      	ldrb	r3, [r7, #15]
 8007d92:	2b0a      	cmp	r3, #10
 8007d94:	d9ed      	bls.n	8007d72 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8007d96:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3714      	adds	r7, #20
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
	...

08007da8 <SCB_EnableICache>:
{
 8007da8:	b480      	push	{r7}
 8007daa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007dac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007db0:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8007db4:	4b0b      	ldr	r3, [pc, #44]	; (8007de4 <SCB_EnableICache+0x3c>)
 8007db6:	2200      	movs	r2, #0
 8007db8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8007dbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007dc0:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8007dc4:	4b07      	ldr	r3, [pc, #28]	; (8007de4 <SCB_EnableICache+0x3c>)
 8007dc6:	695b      	ldr	r3, [r3, #20]
 8007dc8:	4a06      	ldr	r2, [pc, #24]	; (8007de4 <SCB_EnableICache+0x3c>)
 8007dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8007dd0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007dd4:	f3bf 8f6f 	isb	sy
}
 8007dd8:	bf00      	nop
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	e000ed00 	.word	0xe000ed00

08007de8 <SCB_EnableDCache>:
{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8007dee:	4b1d      	ldr	r3, [pc, #116]	; (8007e64 <SCB_EnableDCache+0x7c>)
 8007df0:	2200      	movs	r2, #0
 8007df2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8007df6:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8007dfa:	4b1a      	ldr	r3, [pc, #104]	; (8007e64 <SCB_EnableDCache+0x7c>)
 8007dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e00:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	0b5b      	lsrs	r3, r3, #13
 8007e06:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007e0a:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	08db      	lsrs	r3, r3, #3
 8007e10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e14:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	015a      	lsls	r2, r3, #5
 8007e1a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8007e1e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007e24:	490f      	ldr	r1, [pc, #60]	; (8007e64 <SCB_EnableDCache+0x7c>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	1e5a      	subs	r2, r3, #1
 8007e30:	60ba      	str	r2, [r7, #8]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1ef      	bne.n	8007e16 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	1e5a      	subs	r2, r3, #1
 8007e3a:	60fa      	str	r2, [r7, #12]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1e5      	bne.n	8007e0c <SCB_EnableDCache+0x24>
 8007e40:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8007e44:	4b07      	ldr	r3, [pc, #28]	; (8007e64 <SCB_EnableDCache+0x7c>)
 8007e46:	695b      	ldr	r3, [r3, #20]
 8007e48:	4a06      	ldr	r2, [pc, #24]	; (8007e64 <SCB_EnableDCache+0x7c>)
 8007e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e4e:	6153      	str	r3, [r2, #20]
 8007e50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007e54:	f3bf 8f6f 	isb	sy
}
 8007e58:	bf00      	nop
 8007e5a:	3714      	adds	r7, #20
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr
 8007e64:	e000ed00 	.word	0xe000ed00

08007e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8007e6c:	f7ff ff9c 	bl	8007da8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8007e70:	f7ff ffba 	bl	8007de8 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007e74:	f7f9 fad6 	bl	8001424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007e78:	f000 f842 	bl	8007f00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007e7c:	f000 fa34 	bl	80082e8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8007e80:	f000 f9b2 	bl	80081e8 <MX_USART1_UART_Init>
  MX_DMA2D_Init();
 8007e84:	f000 f8fc 	bl	8008080 <MX_DMA2D_Init>
  MX_FMC_Init();
 8007e88:	f000 f9de 	bl	8008248 <MX_FMC_Init>
  MX_LTDC_Init();
 8007e8c:	f000 f92a 	bl	80080e4 <MX_LTDC_Init>
  MX_USART6_UART_Init();
  MX_FATFS_Init();
  MX_USB_HOST_Init();*/

  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8007e90:	f7f8 fb3a 	bl	8000508 <BSP_LCD_Init>

  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FB_START_ADDRESS);
 8007e94:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8007e98:	2001      	movs	r0, #1
 8007e9a:	f7f8 fbcd 	bl	8000638 <BSP_LCD_LayerDefaultInit>

  /* Set LCD Foreground Layer  */
    BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8007e9e:	2001      	movs	r0, #1
 8007ea0:	f7f8 fc2a 	bl	80006f8 <BSP_LCD_SelectLayer>

  /* Enable LCD Display */
  BSP_LCD_DisplayOn();
 8007ea4:	f7f8 feac 	bl	8000c00 <BSP_LCD_DisplayOn>

  /* Clear the LCD */
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8007eac:	f7f8 fc4c 	bl	8000748 <BSP_LCD_SetBackColor>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8007eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb4:	f7f8 fc7c 	bl	80007b0 <BSP_LCD_Clear>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8007eb8:	480d      	ldr	r0, [pc, #52]	; (8007ef0 <main+0x88>)
 8007eba:	f7f8 fc2d 	bl	8000718 <BSP_LCD_SetTextColor>

  /* Display LCD messages */
  BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"KiCAD Team Bitch !", CENTER_MODE);
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	4a0c      	ldr	r2, [pc, #48]	; (8007ef4 <main+0x8c>)
 8007ec2:	210a      	movs	r1, #10
 8007ec4:	2000      	movs	r0, #0
 8007ec6:	f7f8 fcdf 	bl	8000888 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 35, (uint8_t *)"Drivers examples", CENTER_MODE);
 8007eca:	2301      	movs	r3, #1
 8007ecc:	4a0a      	ldr	r2, [pc, #40]	; (8007ef8 <main+0x90>)
 8007ece:	2123      	movs	r1, #35	; 0x23
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	f7f8 fcd9 	bl	8000888 <BSP_LCD_DisplayStringAt>

  /* Draw Bitmap */
  BSP_LCD_DrawBitmap((BSP_LCD_GetXSize() - 80) / 2, 65, (uint8_t *)stlogo);
 8007ed6:	f7f8 fb87 	bl	80005e8 <BSP_LCD_GetXSize>
 8007eda:	4603      	mov	r3, r0
 8007edc:	3b50      	subs	r3, #80	; 0x50
 8007ede:	085b      	lsrs	r3, r3, #1
 8007ee0:	4a06      	ldr	r2, [pc, #24]	; (8007efc <main+0x94>)
 8007ee2:	2141      	movs	r1, #65	; 0x41
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7f8 fddb 	bl	8000aa0 <BSP_LCD_DrawBitmap>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8007eea:	f000 fe7f 	bl	8008bec <MX_USB_HOST_Process>
 8007eee:	e7fc      	b.n	8007eea <main+0x82>
 8007ef0:	ff000080 	.word	0xff000080
 8007ef4:	08008fac 	.word	0x08008fac
 8007ef8:	08008fc0 	.word	0x08008fc0
 8007efc:	0800aa94 	.word	0x0800aa94

08007f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b0b4      	sub	sp, #208	; 0xd0
 8007f04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007f06:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007f0a:	2230      	movs	r2, #48	; 0x30
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f001 f838 	bl	8008f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007f14:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007f18:	2200      	movs	r2, #0
 8007f1a:	601a      	str	r2, [r3, #0]
 8007f1c:	605a      	str	r2, [r3, #4]
 8007f1e:	609a      	str	r2, [r3, #8]
 8007f20:	60da      	str	r2, [r3, #12]
 8007f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007f24:	f107 0308 	add.w	r3, r7, #8
 8007f28:	2284      	movs	r2, #132	; 0x84
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f001 f829 	bl	8008f84 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8007f32:	f7fc fa49 	bl	80043c8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007f36:	4b4f      	ldr	r3, [pc, #316]	; (8008074 <SystemClock_Config+0x174>)
 8007f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3a:	4a4e      	ldr	r2, [pc, #312]	; (8008074 <SystemClock_Config+0x174>)
 8007f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f40:	6413      	str	r3, [r2, #64]	; 0x40
 8007f42:	4b4c      	ldr	r3, [pc, #304]	; (8008074 <SystemClock_Config+0x174>)
 8007f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f4a:	607b      	str	r3, [r7, #4]
 8007f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007f4e:	4b4a      	ldr	r3, [pc, #296]	; (8008078 <SystemClock_Config+0x178>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a49      	ldr	r2, [pc, #292]	; (8008078 <SystemClock_Config+0x178>)
 8007f54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f58:	6013      	str	r3, [r2, #0]
 8007f5a:	4b47      	ldr	r3, [pc, #284]	; (8008078 <SystemClock_Config+0x178>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007f62:	603b      	str	r3, [r7, #0]
 8007f64:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8007f66:	2309      	movs	r3, #9
 8007f68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007f6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8007f74:	2301      	movs	r3, #1
 8007f76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007f7a:	2302      	movs	r3, #2
 8007f7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007f80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007f84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8007f88:	2319      	movs	r3, #25
 8007f8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8007f8e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007f92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007f96:	2302      	movs	r3, #2
 8007f98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8007f9c:	2309      	movs	r3, #9
 8007f9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007fa2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fc fa6e 	bl	8004488 <HAL_RCC_OscConfig>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8007fb2:	f000 fb57 	bl	8008664 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8007fb6:	f7fc fa17 	bl	80043e8 <HAL_PWREx_EnableOverDrive>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d001      	beq.n	8007fc4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8007fc0:	f000 fb50 	bl	8008664 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007fc4:	230f      	movs	r3, #15
 8007fc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007fca:	2302      	movs	r3, #2
 8007fcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007fd6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007fda:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fe2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8007fe6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007fea:	2106      	movs	r1, #6
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7fc fcbb 	bl	8004968 <HAL_RCC_ClockConfig>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d001      	beq.n	8007ffc <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8007ff8:	f000 fb34 	bl	8008664 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8007ffc:	4b1f      	ldr	r3, [pc, #124]	; (800807c <SystemClock_Config+0x17c>)
 8007ffe:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8008000:	2364      	movs	r3, #100	; 0x64
 8008002:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8008004:	2302      	movs	r3, #2
 8008006:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8008008:	2302      	movs	r3, #2
 800800a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800800c:	2302      	movs	r3, #2
 800800e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8008010:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8008014:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8008016:	2305      	movs	r3, #5
 8008018:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800801a:	2302      	movs	r3, #2
 800801c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800801e:	2303      	movs	r3, #3
 8008020:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8008022:	2301      	movs	r3, #1
 8008024:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8008026:	2301      	movs	r3, #1
 8008028:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800802a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800802e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8008030:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008034:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8008036:	2300      	movs	r3, #0
 8008038:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800803a:	2300      	movs	r3, #0
 800803c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800803e:	2300      	movs	r3, #0
 8008040:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008042:	2300      	movs	r3, #0
 8008044:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8008046:	2300      	movs	r3, #0
 8008048:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800804a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800804e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8008052:	2300      	movs	r3, #0
 8008054:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008058:	f107 0308 	add.w	r3, r7, #8
 800805c:	4618      	mov	r0, r3
 800805e:	f7fc fe51 	bl	8004d04 <HAL_RCCEx_PeriphCLKConfig>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d001      	beq.n	800806c <SystemClock_Config+0x16c>
  {
    Error_Handler();
 8008068:	f000 fafc 	bl	8008664 <Error_Handler>
  }
}
 800806c:	bf00      	nop
 800806e:	37d0      	adds	r7, #208	; 0xd0
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	40023800 	.word	0x40023800
 8008078:	40007000 	.word	0x40007000
 800807c:	01b14868 	.word	0x01b14868

08008080 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8008084:	4b15      	ldr	r3, [pc, #84]	; (80080dc <MX_DMA2D_Init+0x5c>)
 8008086:	4a16      	ldr	r2, [pc, #88]	; (80080e0 <MX_DMA2D_Init+0x60>)
 8008088:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800808a:	4b14      	ldr	r3, [pc, #80]	; (80080dc <MX_DMA2D_Init+0x5c>)
 800808c:	2200      	movs	r2, #0
 800808e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8008090:	4b12      	ldr	r3, [pc, #72]	; (80080dc <MX_DMA2D_Init+0x5c>)
 8008092:	2200      	movs	r2, #0
 8008094:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8008096:	4b11      	ldr	r3, [pc, #68]	; (80080dc <MX_DMA2D_Init+0x5c>)
 8008098:	2200      	movs	r2, #0
 800809a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800809c:	4b0f      	ldr	r3, [pc, #60]	; (80080dc <MX_DMA2D_Init+0x5c>)
 800809e:	2200      	movs	r2, #0
 80080a0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80080a2:	4b0e      	ldr	r3, [pc, #56]	; (80080dc <MX_DMA2D_Init+0x5c>)
 80080a4:	2200      	movs	r2, #0
 80080a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80080a8:	4b0c      	ldr	r3, [pc, #48]	; (80080dc <MX_DMA2D_Init+0x5c>)
 80080aa:	2200      	movs	r2, #0
 80080ac:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80080ae:	4b0b      	ldr	r3, [pc, #44]	; (80080dc <MX_DMA2D_Init+0x5c>)
 80080b0:	2200      	movs	r2, #0
 80080b2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80080b4:	4809      	ldr	r0, [pc, #36]	; (80080dc <MX_DMA2D_Init+0x5c>)
 80080b6:	f7f9 fcef 	bl	8001a98 <HAL_DMA2D_Init>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d001      	beq.n	80080c4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80080c0:	f000 fad0 	bl	8008664 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80080c4:	2101      	movs	r1, #1
 80080c6:	4805      	ldr	r0, [pc, #20]	; (80080dc <MX_DMA2D_Init+0x5c>)
 80080c8:	f7f9 ff54 	bl	8001f74 <HAL_DMA2D_ConfigLayer>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d001      	beq.n	80080d6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80080d2:	f000 fac7 	bl	8008664 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80080d6:	bf00      	nop
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	200008e0 	.word	0x200008e0
 80080e0:	4002b000 	.word	0x4002b000

080080e4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b08e      	sub	sp, #56	; 0x38
 80080e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80080ea:	1d3b      	adds	r3, r7, #4
 80080ec:	2234      	movs	r2, #52	; 0x34
 80080ee:	2100      	movs	r1, #0
 80080f0:	4618      	mov	r0, r3
 80080f2:	f000 ff47 	bl	8008f84 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80080f6:	4b3a      	ldr	r3, [pc, #232]	; (80081e0 <MX_LTDC_Init+0xfc>)
 80080f8:	4a3a      	ldr	r2, [pc, #232]	; (80081e4 <MX_LTDC_Init+0x100>)
 80080fa:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80080fc:	4b38      	ldr	r3, [pc, #224]	; (80081e0 <MX_LTDC_Init+0xfc>)
 80080fe:	2200      	movs	r2, #0
 8008100:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8008102:	4b37      	ldr	r3, [pc, #220]	; (80081e0 <MX_LTDC_Init+0xfc>)
 8008104:	2200      	movs	r2, #0
 8008106:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8008108:	4b35      	ldr	r3, [pc, #212]	; (80081e0 <MX_LTDC_Init+0xfc>)
 800810a:	2200      	movs	r2, #0
 800810c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800810e:	4b34      	ldr	r3, [pc, #208]	; (80081e0 <MX_LTDC_Init+0xfc>)
 8008110:	2200      	movs	r2, #0
 8008112:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8008114:	4b32      	ldr	r3, [pc, #200]	; (80081e0 <MX_LTDC_Init+0xfc>)
 8008116:	2228      	movs	r2, #40	; 0x28
 8008118:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800811a:	4b31      	ldr	r3, [pc, #196]	; (80081e0 <MX_LTDC_Init+0xfc>)
 800811c:	2209      	movs	r2, #9
 800811e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8008120:	4b2f      	ldr	r3, [pc, #188]	; (80081e0 <MX_LTDC_Init+0xfc>)
 8008122:	2235      	movs	r2, #53	; 0x35
 8008124:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8008126:	4b2e      	ldr	r3, [pc, #184]	; (80081e0 <MX_LTDC_Init+0xfc>)
 8008128:	220b      	movs	r2, #11
 800812a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800812c:	4b2c      	ldr	r3, [pc, #176]	; (80081e0 <MX_LTDC_Init+0xfc>)
 800812e:	f240 2215 	movw	r2, #533	; 0x215
 8008132:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8008134:	4b2a      	ldr	r3, [pc, #168]	; (80081e0 <MX_LTDC_Init+0xfc>)
 8008136:	f240 121b 	movw	r2, #283	; 0x11b
 800813a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800813c:	4b28      	ldr	r3, [pc, #160]	; (80081e0 <MX_LTDC_Init+0xfc>)
 800813e:	f240 2235 	movw	r2, #565	; 0x235
 8008142:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8008144:	4b26      	ldr	r3, [pc, #152]	; (80081e0 <MX_LTDC_Init+0xfc>)
 8008146:	f240 121d 	movw	r2, #285	; 0x11d
 800814a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800814c:	4b24      	ldr	r3, [pc, #144]	; (80081e0 <MX_LTDC_Init+0xfc>)
 800814e:	2200      	movs	r2, #0
 8008150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8008154:	4b22      	ldr	r3, [pc, #136]	; (80081e0 <MX_LTDC_Init+0xfc>)
 8008156:	2200      	movs	r2, #0
 8008158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800815c:	4b20      	ldr	r3, [pc, #128]	; (80081e0 <MX_LTDC_Init+0xfc>)
 800815e:	2200      	movs	r2, #0
 8008160:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8008164:	481e      	ldr	r0, [pc, #120]	; (80081e0 <MX_LTDC_Init+0xfc>)
 8008166:	f7fb fdb7 	bl	8003cd8 <HAL_LTDC_Init>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d001      	beq.n	8008174 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8008170:	f000 fa78 	bl	8008664 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8008174:	2300      	movs	r3, #0
 8008176:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8008178:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800817c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800817e:	2300      	movs	r3, #0
 8008180:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8008182:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008186:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8008188:	2302      	movs	r3, #2
 800818a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800818c:	23ff      	movs	r3, #255	; 0xff
 800818e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8008190:	2300      	movs	r3, #0
 8008192:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8008194:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008198:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800819a:	2307      	movs	r3, #7
 800819c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800819e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80081a2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80081a4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80081a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80081aa:	f44f 7388 	mov.w	r3, #272	; 0x110
 80081ae:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80081b0:	2300      	movs	r3, #0
 80081b2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80081b6:	2300      	movs	r3, #0
 80081b8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80081bc:	2300      	movs	r3, #0
 80081be:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80081c2:	1d3b      	adds	r3, r7, #4
 80081c4:	2200      	movs	r2, #0
 80081c6:	4619      	mov	r1, r3
 80081c8:	4805      	ldr	r0, [pc, #20]	; (80081e0 <MX_LTDC_Init+0xfc>)
 80081ca:	f7fb ff17 	bl	8003ffc <HAL_LTDC_ConfigLayer>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d001      	beq.n	80081d8 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80081d4:	f000 fa46 	bl	8008664 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80081d8:	bf00      	nop
 80081da:	3738      	adds	r7, #56	; 0x38
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	20000640 	.word	0x20000640
 80081e4:	40016800 	.word	0x40016800

080081e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80081ec:	4b14      	ldr	r3, [pc, #80]	; (8008240 <MX_USART1_UART_Init+0x58>)
 80081ee:	4a15      	ldr	r2, [pc, #84]	; (8008244 <MX_USART1_UART_Init+0x5c>)
 80081f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80081f2:	4b13      	ldr	r3, [pc, #76]	; (8008240 <MX_USART1_UART_Init+0x58>)
 80081f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80081f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80081fa:	4b11      	ldr	r3, [pc, #68]	; (8008240 <MX_USART1_UART_Init+0x58>)
 80081fc:	2200      	movs	r2, #0
 80081fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008200:	4b0f      	ldr	r3, [pc, #60]	; (8008240 <MX_USART1_UART_Init+0x58>)
 8008202:	2200      	movs	r2, #0
 8008204:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008206:	4b0e      	ldr	r3, [pc, #56]	; (8008240 <MX_USART1_UART_Init+0x58>)
 8008208:	2200      	movs	r2, #0
 800820a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800820c:	4b0c      	ldr	r3, [pc, #48]	; (8008240 <MX_USART1_UART_Init+0x58>)
 800820e:	220c      	movs	r2, #12
 8008210:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008212:	4b0b      	ldr	r3, [pc, #44]	; (8008240 <MX_USART1_UART_Init+0x58>)
 8008214:	2200      	movs	r2, #0
 8008216:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008218:	4b09      	ldr	r3, [pc, #36]	; (8008240 <MX_USART1_UART_Init+0x58>)
 800821a:	2200      	movs	r2, #0
 800821c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800821e:	4b08      	ldr	r3, [pc, #32]	; (8008240 <MX_USART1_UART_Init+0x58>)
 8008220:	2200      	movs	r2, #0
 8008222:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008224:	4b06      	ldr	r3, [pc, #24]	; (8008240 <MX_USART1_UART_Init+0x58>)
 8008226:	2200      	movs	r2, #0
 8008228:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800822a:	4805      	ldr	r0, [pc, #20]	; (8008240 <MX_USART1_UART_Init+0x58>)
 800822c:	f7fd f9d7 	bl	80055de <HAL_UART_Init>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d001      	beq.n	800823a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8008236:	f000 fa15 	bl	8008664 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800823a:	bf00      	nop
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	20000780 	.word	0x20000780
 8008244:	40011000 	.word	0x40011000

08008248 <MX_FMC_Init>:

}

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b088      	sub	sp, #32
 800824c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800824e:	1d3b      	adds	r3, r7, #4
 8008250:	2200      	movs	r2, #0
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	605a      	str	r2, [r3, #4]
 8008256:	609a      	str	r2, [r3, #8]
 8008258:	60da      	str	r2, [r3, #12]
 800825a:	611a      	str	r2, [r3, #16]
 800825c:	615a      	str	r2, [r3, #20]
 800825e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8008260:	4b1f      	ldr	r3, [pc, #124]	; (80082e0 <MX_FMC_Init+0x98>)
 8008262:	4a20      	ldr	r2, [pc, #128]	; (80082e4 <MX_FMC_Init+0x9c>)
 8008264:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8008266:	4b1e      	ldr	r3, [pc, #120]	; (80082e0 <MX_FMC_Init+0x98>)
 8008268:	2200      	movs	r2, #0
 800826a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800826c:	4b1c      	ldr	r3, [pc, #112]	; (80082e0 <MX_FMC_Init+0x98>)
 800826e:	2200      	movs	r2, #0
 8008270:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8008272:	4b1b      	ldr	r3, [pc, #108]	; (80082e0 <MX_FMC_Init+0x98>)
 8008274:	2204      	movs	r2, #4
 8008276:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8008278:	4b19      	ldr	r3, [pc, #100]	; (80082e0 <MX_FMC_Init+0x98>)
 800827a:	2210      	movs	r2, #16
 800827c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800827e:	4b18      	ldr	r3, [pc, #96]	; (80082e0 <MX_FMC_Init+0x98>)
 8008280:	2240      	movs	r2, #64	; 0x40
 8008282:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8008284:	4b16      	ldr	r3, [pc, #88]	; (80082e0 <MX_FMC_Init+0x98>)
 8008286:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800828a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800828c:	4b14      	ldr	r3, [pc, #80]	; (80082e0 <MX_FMC_Init+0x98>)
 800828e:	2200      	movs	r2, #0
 8008290:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8008292:	4b13      	ldr	r3, [pc, #76]	; (80082e0 <MX_FMC_Init+0x98>)
 8008294:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008298:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800829a:	4b11      	ldr	r3, [pc, #68]	; (80082e0 <MX_FMC_Init+0x98>)
 800829c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80082a0:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80082a2:	4b0f      	ldr	r3, [pc, #60]	; (80082e0 <MX_FMC_Init+0x98>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80082a8:	2302      	movs	r3, #2
 80082aa:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80082ac:	2307      	movs	r3, #7
 80082ae:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80082b0:	2304      	movs	r3, #4
 80082b2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80082b4:	2307      	movs	r3, #7
 80082b6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80082b8:	2303      	movs	r3, #3
 80082ba:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80082bc:	2302      	movs	r3, #2
 80082be:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80082c0:	2302      	movs	r3, #2
 80082c2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80082c4:	1d3b      	adds	r3, r7, #4
 80082c6:	4619      	mov	r1, r3
 80082c8:	4805      	ldr	r0, [pc, #20]	; (80082e0 <MX_FMC_Init+0x98>)
 80082ca:	f7fd f909 	bl	80054e0 <HAL_SDRAM_Init>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d001      	beq.n	80082d8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80082d4:	f000 f9c6 	bl	8008664 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80082d8:	bf00      	nop
 80082da:	3720      	adds	r7, #32
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	200009a0 	.word	0x200009a0
 80082e4:	a0000140 	.word	0xa0000140

080082e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b090      	sub	sp, #64	; 0x40
 80082ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80082f2:	2200      	movs	r2, #0
 80082f4:	601a      	str	r2, [r3, #0]
 80082f6:	605a      	str	r2, [r3, #4]
 80082f8:	609a      	str	r2, [r3, #8]
 80082fa:	60da      	str	r2, [r3, #12]
 80082fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80082fe:	4baf      	ldr	r3, [pc, #700]	; (80085bc <MX_GPIO_Init+0x2d4>)
 8008300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008302:	4aae      	ldr	r2, [pc, #696]	; (80085bc <MX_GPIO_Init+0x2d4>)
 8008304:	f043 0310 	orr.w	r3, r3, #16
 8008308:	6313      	str	r3, [r2, #48]	; 0x30
 800830a:	4bac      	ldr	r3, [pc, #688]	; (80085bc <MX_GPIO_Init+0x2d4>)
 800830c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800830e:	f003 0310 	and.w	r3, r3, #16
 8008312:	62bb      	str	r3, [r7, #40]	; 0x28
 8008314:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008316:	4ba9      	ldr	r3, [pc, #676]	; (80085bc <MX_GPIO_Init+0x2d4>)
 8008318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831a:	4aa8      	ldr	r2, [pc, #672]	; (80085bc <MX_GPIO_Init+0x2d4>)
 800831c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008320:	6313      	str	r3, [r2, #48]	; 0x30
 8008322:	4ba6      	ldr	r3, [pc, #664]	; (80085bc <MX_GPIO_Init+0x2d4>)
 8008324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800832a:	627b      	str	r3, [r7, #36]	; 0x24
 800832c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800832e:	4ba3      	ldr	r3, [pc, #652]	; (80085bc <MX_GPIO_Init+0x2d4>)
 8008330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008332:	4aa2      	ldr	r2, [pc, #648]	; (80085bc <MX_GPIO_Init+0x2d4>)
 8008334:	f043 0302 	orr.w	r3, r3, #2
 8008338:	6313      	str	r3, [r2, #48]	; 0x30
 800833a:	4ba0      	ldr	r3, [pc, #640]	; (80085bc <MX_GPIO_Init+0x2d4>)
 800833c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800833e:	f003 0302 	and.w	r3, r3, #2
 8008342:	623b      	str	r3, [r7, #32]
 8008344:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008346:	4b9d      	ldr	r3, [pc, #628]	; (80085bc <MX_GPIO_Init+0x2d4>)
 8008348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800834a:	4a9c      	ldr	r2, [pc, #624]	; (80085bc <MX_GPIO_Init+0x2d4>)
 800834c:	f043 0308 	orr.w	r3, r3, #8
 8008350:	6313      	str	r3, [r2, #48]	; 0x30
 8008352:	4b9a      	ldr	r3, [pc, #616]	; (80085bc <MX_GPIO_Init+0x2d4>)
 8008354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008356:	f003 0308 	and.w	r3, r3, #8
 800835a:	61fb      	str	r3, [r7, #28]
 800835c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800835e:	4b97      	ldr	r3, [pc, #604]	; (80085bc <MX_GPIO_Init+0x2d4>)
 8008360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008362:	4a96      	ldr	r2, [pc, #600]	; (80085bc <MX_GPIO_Init+0x2d4>)
 8008364:	f043 0304 	orr.w	r3, r3, #4
 8008368:	6313      	str	r3, [r2, #48]	; 0x30
 800836a:	4b94      	ldr	r3, [pc, #592]	; (80085bc <MX_GPIO_Init+0x2d4>)
 800836c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800836e:	f003 0304 	and.w	r3, r3, #4
 8008372:	61bb      	str	r3, [r7, #24]
 8008374:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008376:	4b91      	ldr	r3, [pc, #580]	; (80085bc <MX_GPIO_Init+0x2d4>)
 8008378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800837a:	4a90      	ldr	r2, [pc, #576]	; (80085bc <MX_GPIO_Init+0x2d4>)
 800837c:	f043 0301 	orr.w	r3, r3, #1
 8008380:	6313      	str	r3, [r2, #48]	; 0x30
 8008382:	4b8e      	ldr	r3, [pc, #568]	; (80085bc <MX_GPIO_Init+0x2d4>)
 8008384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008386:	f003 0301 	and.w	r3, r3, #1
 800838a:	617b      	str	r3, [r7, #20]
 800838c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800838e:	4b8b      	ldr	r3, [pc, #556]	; (80085bc <MX_GPIO_Init+0x2d4>)
 8008390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008392:	4a8a      	ldr	r2, [pc, #552]	; (80085bc <MX_GPIO_Init+0x2d4>)
 8008394:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008398:	6313      	str	r3, [r2, #48]	; 0x30
 800839a:	4b88      	ldr	r3, [pc, #544]	; (80085bc <MX_GPIO_Init+0x2d4>)
 800839c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800839e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083a2:	613b      	str	r3, [r7, #16]
 80083a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80083a6:	4b85      	ldr	r3, [pc, #532]	; (80085bc <MX_GPIO_Init+0x2d4>)
 80083a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083aa:	4a84      	ldr	r2, [pc, #528]	; (80085bc <MX_GPIO_Init+0x2d4>)
 80083ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083b0:	6313      	str	r3, [r2, #48]	; 0x30
 80083b2:	4b82      	ldr	r3, [pc, #520]	; (80085bc <MX_GPIO_Init+0x2d4>)
 80083b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083ba:	60fb      	str	r3, [r7, #12]
 80083bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80083be:	4b7f      	ldr	r3, [pc, #508]	; (80085bc <MX_GPIO_Init+0x2d4>)
 80083c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c2:	4a7e      	ldr	r2, [pc, #504]	; (80085bc <MX_GPIO_Init+0x2d4>)
 80083c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80083c8:	6313      	str	r3, [r2, #48]	; 0x30
 80083ca:	4b7c      	ldr	r3, [pc, #496]	; (80085bc <MX_GPIO_Init+0x2d4>)
 80083cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083d2:	60bb      	str	r3, [r7, #8]
 80083d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80083d6:	4b79      	ldr	r3, [pc, #484]	; (80085bc <MX_GPIO_Init+0x2d4>)
 80083d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083da:	4a78      	ldr	r2, [pc, #480]	; (80085bc <MX_GPIO_Init+0x2d4>)
 80083dc:	f043 0320 	orr.w	r3, r3, #32
 80083e0:	6313      	str	r3, [r2, #48]	; 0x30
 80083e2:	4b76      	ldr	r3, [pc, #472]	; (80085bc <MX_GPIO_Init+0x2d4>)
 80083e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e6:	f003 0320 	and.w	r3, r3, #32
 80083ea:	607b      	str	r3, [r7, #4]
 80083ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80083ee:	4b73      	ldr	r3, [pc, #460]	; (80085bc <MX_GPIO_Init+0x2d4>)
 80083f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f2:	4a72      	ldr	r2, [pc, #456]	; (80085bc <MX_GPIO_Init+0x2d4>)
 80083f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083f8:	6313      	str	r3, [r2, #48]	; 0x30
 80083fa:	4b70      	ldr	r3, [pc, #448]	; (80085bc <MX_GPIO_Init+0x2d4>)
 80083fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008402:	603b      	str	r3, [r7, #0]
 8008404:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8008406:	2201      	movs	r2, #1
 8008408:	2120      	movs	r1, #32
 800840a:	486d      	ldr	r0, [pc, #436]	; (80085c0 <MX_GPIO_Init+0x2d8>)
 800840c:	f7fa f88a 	bl	8002524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8008410:	2200      	movs	r2, #0
 8008412:	210c      	movs	r1, #12
 8008414:	486b      	ldr	r0, [pc, #428]	; (80085c4 <MX_GPIO_Init+0x2dc>)
 8008416:	f7fa f885 	bl	8002524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800841a:	2201      	movs	r2, #1
 800841c:	2108      	movs	r1, #8
 800841e:	486a      	ldr	r0, [pc, #424]	; (80085c8 <MX_GPIO_Init+0x2e0>)
 8008420:	f7fa f880 	bl	8002524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8008424:	2201      	movs	r2, #1
 8008426:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800842a:	4866      	ldr	r0, [pc, #408]	; (80085c4 <MX_GPIO_Init+0x2dc>)
 800842c:	f7fa f87a 	bl	8002524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8008430:	2200      	movs	r2, #0
 8008432:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008436:	4865      	ldr	r0, [pc, #404]	; (80085cc <MX_GPIO_Init+0x2e4>)
 8008438:	f7fa f874 	bl	8002524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800843c:	2200      	movs	r2, #0
 800843e:	21c8      	movs	r1, #200	; 0xc8
 8008440:	4863      	ldr	r0, [pc, #396]	; (80085d0 <MX_GPIO_Init+0x2e8>)
 8008442:	f7fa f86f 	bl	8002524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8008446:	2308      	movs	r3, #8
 8008448:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800844a:	2300      	movs	r3, #0
 800844c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800844e:	2300      	movs	r3, #0
 8008450:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8008452:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008456:	4619      	mov	r1, r3
 8008458:	485e      	ldr	r0, [pc, #376]	; (80085d4 <MX_GPIO_Init+0x2ec>)
 800845a:	f7f9 feb9 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 800845e:	f643 4323 	movw	r3, #15395	; 0x3c23
 8008462:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008464:	2302      	movs	r3, #2
 8008466:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008468:	2300      	movs	r3, #0
 800846a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800846c:	2303      	movs	r3, #3
 800846e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8008470:	230a      	movs	r3, #10
 8008472:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008474:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008478:	4619      	mov	r1, r3
 800847a:	4857      	ldr	r0, [pc, #348]	; (80085d8 <MX_GPIO_Init+0x2f0>)
 800847c:	f7f9 fea8 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8008480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008484:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008486:	2300      	movs	r3, #0
 8008488:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800848a:	2300      	movs	r3, #0
 800848c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800848e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008492:	4619      	mov	r1, r3
 8008494:	4851      	ldr	r0, [pc, #324]	; (80085dc <MX_GPIO_Init+0x2f4>)
 8008496:	f7f9 fe9b 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800849a:	2340      	movs	r3, #64	; 0x40
 800849c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800849e:	4b50      	ldr	r3, [pc, #320]	; (80085e0 <MX_GPIO_Init+0x2f8>)
 80084a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084a2:	2300      	movs	r3, #0
 80084a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80084a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80084aa:	4619      	mov	r1, r3
 80084ac:	4844      	ldr	r0, [pc, #272]	; (80085c0 <MX_GPIO_Init+0x2d8>)
 80084ae:	f7f9 fe8f 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80084b2:	2320      	movs	r3, #32
 80084b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80084b6:	2301      	movs	r3, #1
 80084b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084ba:	2300      	movs	r3, #0
 80084bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084be:	2300      	movs	r3, #0
 80084c0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80084c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80084c6:	4619      	mov	r1, r3
 80084c8:	483d      	ldr	r0, [pc, #244]	; (80085c0 <MX_GPIO_Init+0x2d8>)
 80084ca:	f7f9 fe81 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80084ce:	f241 030c 	movw	r3, #4108	; 0x100c
 80084d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80084d4:	2301      	movs	r3, #1
 80084d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084d8:	2300      	movs	r3, #0
 80084da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084dc:	2300      	movs	r3, #0
 80084de:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80084e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80084e4:	4619      	mov	r1, r3
 80084e6:	4837      	ldr	r0, [pc, #220]	; (80085c4 <MX_GPIO_Init+0x2dc>)
 80084e8:	f7f9 fe72 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80084ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80084f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80084f2:	2300      	movs	r3, #0
 80084f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084f6:	2300      	movs	r3, #0
 80084f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80084fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80084fe:	4619      	mov	r1, r3
 8008500:	4838      	ldr	r0, [pc, #224]	; (80085e4 <MX_GPIO_Init+0x2fc>)
 8008502:	f7f9 fe65 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8008506:	2308      	movs	r3, #8
 8008508:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800850a:	2301      	movs	r3, #1
 800850c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800850e:	2300      	movs	r3, #0
 8008510:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008512:	2300      	movs	r3, #0
 8008514:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8008516:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800851a:	4619      	mov	r1, r3
 800851c:	482a      	ldr	r0, [pc, #168]	; (80085c8 <MX_GPIO_Init+0x2e0>)
 800851e:	f7f9 fe57 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8008522:	2310      	movs	r3, #16
 8008524:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008526:	2300      	movs	r3, #0
 8008528:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800852a:	2300      	movs	r3, #0
 800852c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800852e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008532:	4619      	mov	r1, r3
 8008534:	4822      	ldr	r0, [pc, #136]	; (80085c0 <MX_GPIO_Init+0x2d8>)
 8008536:	f7f9 fe4b 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800853a:	f248 0304 	movw	r3, #32772	; 0x8004
 800853e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008540:	2300      	movs	r3, #0
 8008542:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008544:	2300      	movs	r3, #0
 8008546:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008548:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800854c:	4619      	mov	r1, r3
 800854e:	481f      	ldr	r0, [pc, #124]	; (80085cc <MX_GPIO_Init+0x2e4>)
 8008550:	f7f9 fe3e 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8008554:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008558:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800855a:	2301      	movs	r3, #1
 800855c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800855e:	2300      	movs	r3, #0
 8008560:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008562:	2300      	movs	r3, #0
 8008564:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8008566:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800856a:	4619      	mov	r1, r3
 800856c:	4817      	ldr	r0, [pc, #92]	; (80085cc <MX_GPIO_Init+0x2e4>)
 800856e:	f7f9 fe2f 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8008572:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008576:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008578:	4b19      	ldr	r3, [pc, #100]	; (80085e0 <MX_GPIO_Init+0x2f8>)
 800857a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800857c:	2300      	movs	r3, #0
 800857e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8008580:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008584:	4619      	mov	r1, r3
 8008586:	480f      	ldr	r0, [pc, #60]	; (80085c4 <MX_GPIO_Init+0x2dc>)
 8008588:	f7f9 fe22 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800858c:	2310      	movs	r3, #16
 800858e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008590:	2302      	movs	r3, #2
 8008592:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008594:	2300      	movs	r3, #0
 8008596:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008598:	2303      	movs	r3, #3
 800859a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800859c:	230a      	movs	r3, #10
 800859e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80085a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80085a4:	4619      	mov	r1, r3
 80085a6:	4809      	ldr	r0, [pc, #36]	; (80085cc <MX_GPIO_Init+0x2e4>)
 80085a8:	f7f9 fe12 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80085ac:	23c8      	movs	r3, #200	; 0xc8
 80085ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80085b0:	2301      	movs	r3, #1
 80085b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085b4:	2300      	movs	r3, #0
 80085b6:	637b      	str	r3, [r7, #52]	; 0x34
 80085b8:	e016      	b.n	80085e8 <MX_GPIO_Init+0x300>
 80085ba:	bf00      	nop
 80085bc:	40023800 	.word	0x40023800
 80085c0:	40020c00 	.word	0x40020c00
 80085c4:	40022000 	.word	0x40022000
 80085c8:	40022800 	.word	0x40022800
 80085cc:	40021c00 	.word	0x40021c00
 80085d0:	40021800 	.word	0x40021800
 80085d4:	40021000 	.word	0x40021000
 80085d8:	40020400 	.word	0x40020400
 80085dc:	40022400 	.word	0x40022400
 80085e0:	10120000 	.word	0x10120000
 80085e4:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085e8:	2300      	movs	r3, #0
 80085ea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80085ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80085f0:	4619      	mov	r1, r3
 80085f2:	4819      	ldr	r0, [pc, #100]	; (8008658 <MX_GPIO_Init+0x370>)
 80085f4:	f7f9 fdec 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80085f8:	2305      	movs	r3, #5
 80085fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085fc:	2302      	movs	r3, #2
 80085fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008600:	2300      	movs	r3, #0
 8008602:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008604:	2303      	movs	r3, #3
 8008606:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8008608:	230a      	movs	r3, #10
 800860a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800860c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008610:	4619      	mov	r1, r3
 8008612:	4812      	ldr	r0, [pc, #72]	; (800865c <MX_GPIO_Init+0x374>)
 8008614:	f7f9 fddc 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8008618:	2304      	movs	r3, #4
 800861a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800861c:	2300      	movs	r3, #0
 800861e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008620:	2300      	movs	r3, #0
 8008622:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8008624:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008628:	4619      	mov	r1, r3
 800862a:	480b      	ldr	r0, [pc, #44]	; (8008658 <MX_GPIO_Init+0x370>)
 800862c:	f7f9 fdd0 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8008630:	2328      	movs	r3, #40	; 0x28
 8008632:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008634:	2302      	movs	r3, #2
 8008636:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008638:	2300      	movs	r3, #0
 800863a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800863c:	2303      	movs	r3, #3
 800863e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8008640:	230a      	movs	r3, #10
 8008642:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008644:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008648:	4619      	mov	r1, r3
 800864a:	4805      	ldr	r0, [pc, #20]	; (8008660 <MX_GPIO_Init+0x378>)
 800864c:	f7f9 fdc0 	bl	80021d0 <HAL_GPIO_Init>

}
 8008650:	bf00      	nop
 8008652:	3740      	adds	r7, #64	; 0x40
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	40021800 	.word	0x40021800
 800865c:	40020800 	.word	0x40020800
 8008660:	40020000 	.word	0x40020000

08008664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008664:	b480      	push	{r7}
 8008666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008668:	bf00      	nop
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr
	...

08008674 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800867a:	4b0f      	ldr	r3, [pc, #60]	; (80086b8 <HAL_MspInit+0x44>)
 800867c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867e:	4a0e      	ldr	r2, [pc, #56]	; (80086b8 <HAL_MspInit+0x44>)
 8008680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008684:	6413      	str	r3, [r2, #64]	; 0x40
 8008686:	4b0c      	ldr	r3, [pc, #48]	; (80086b8 <HAL_MspInit+0x44>)
 8008688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800868e:	607b      	str	r3, [r7, #4]
 8008690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008692:	4b09      	ldr	r3, [pc, #36]	; (80086b8 <HAL_MspInit+0x44>)
 8008694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008696:	4a08      	ldr	r2, [pc, #32]	; (80086b8 <HAL_MspInit+0x44>)
 8008698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800869c:	6453      	str	r3, [r2, #68]	; 0x44
 800869e:	4b06      	ldr	r3, [pc, #24]	; (80086b8 <HAL_MspInit+0x44>)
 80086a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086a6:	603b      	str	r3, [r7, #0]
 80086a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80086aa:	bf00      	nop
 80086ac:	370c      	adds	r7, #12
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	40023800 	.word	0x40023800

080086bc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a0d      	ldr	r2, [pc, #52]	; (8008700 <HAL_DMA2D_MspInit+0x44>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d113      	bne.n	80086f6 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80086ce:	4b0d      	ldr	r3, [pc, #52]	; (8008704 <HAL_DMA2D_MspInit+0x48>)
 80086d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d2:	4a0c      	ldr	r2, [pc, #48]	; (8008704 <HAL_DMA2D_MspInit+0x48>)
 80086d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80086d8:	6313      	str	r3, [r2, #48]	; 0x30
 80086da:	4b0a      	ldr	r3, [pc, #40]	; (8008704 <HAL_DMA2D_MspInit+0x48>)
 80086dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086e2:	60fb      	str	r3, [r7, #12]
 80086e4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80086e6:	2200      	movs	r2, #0
 80086e8:	2100      	movs	r1, #0
 80086ea:	205a      	movs	r0, #90	; 0x5a
 80086ec:	f7f8 ffe1 	bl	80016b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80086f0:	205a      	movs	r0, #90	; 0x5a
 80086f2:	f7f8 fffa 	bl	80016ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80086f6:	bf00      	nop
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	4002b000 	.word	0x4002b000
 8008704:	40023800 	.word	0x40023800

08008708 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b08e      	sub	sp, #56	; 0x38
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008714:	2200      	movs	r2, #0
 8008716:	601a      	str	r2, [r3, #0]
 8008718:	605a      	str	r2, [r3, #4]
 800871a:	609a      	str	r2, [r3, #8]
 800871c:	60da      	str	r2, [r3, #12]
 800871e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a55      	ldr	r2, [pc, #340]	; (800887c <HAL_LTDC_MspInit+0x174>)
 8008726:	4293      	cmp	r3, r2
 8008728:	f040 80a3 	bne.w	8008872 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800872c:	4b54      	ldr	r3, [pc, #336]	; (8008880 <HAL_LTDC_MspInit+0x178>)
 800872e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008730:	4a53      	ldr	r2, [pc, #332]	; (8008880 <HAL_LTDC_MspInit+0x178>)
 8008732:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008736:	6453      	str	r3, [r2, #68]	; 0x44
 8008738:	4b51      	ldr	r3, [pc, #324]	; (8008880 <HAL_LTDC_MspInit+0x178>)
 800873a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800873c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008740:	623b      	str	r3, [r7, #32]
 8008742:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008744:	4b4e      	ldr	r3, [pc, #312]	; (8008880 <HAL_LTDC_MspInit+0x178>)
 8008746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008748:	4a4d      	ldr	r2, [pc, #308]	; (8008880 <HAL_LTDC_MspInit+0x178>)
 800874a:	f043 0310 	orr.w	r3, r3, #16
 800874e:	6313      	str	r3, [r2, #48]	; 0x30
 8008750:	4b4b      	ldr	r3, [pc, #300]	; (8008880 <HAL_LTDC_MspInit+0x178>)
 8008752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008754:	f003 0310 	and.w	r3, r3, #16
 8008758:	61fb      	str	r3, [r7, #28]
 800875a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800875c:	4b48      	ldr	r3, [pc, #288]	; (8008880 <HAL_LTDC_MspInit+0x178>)
 800875e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008760:	4a47      	ldr	r2, [pc, #284]	; (8008880 <HAL_LTDC_MspInit+0x178>)
 8008762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008766:	6313      	str	r3, [r2, #48]	; 0x30
 8008768:	4b45      	ldr	r3, [pc, #276]	; (8008880 <HAL_LTDC_MspInit+0x178>)
 800876a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800876c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008770:	61bb      	str	r3, [r7, #24]
 8008772:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8008774:	4b42      	ldr	r3, [pc, #264]	; (8008880 <HAL_LTDC_MspInit+0x178>)
 8008776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008778:	4a41      	ldr	r2, [pc, #260]	; (8008880 <HAL_LTDC_MspInit+0x178>)
 800877a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800877e:	6313      	str	r3, [r2, #48]	; 0x30
 8008780:	4b3f      	ldr	r3, [pc, #252]	; (8008880 <HAL_LTDC_MspInit+0x178>)
 8008782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008788:	617b      	str	r3, [r7, #20]
 800878a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800878c:	4b3c      	ldr	r3, [pc, #240]	; (8008880 <HAL_LTDC_MspInit+0x178>)
 800878e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008790:	4a3b      	ldr	r2, [pc, #236]	; (8008880 <HAL_LTDC_MspInit+0x178>)
 8008792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008796:	6313      	str	r3, [r2, #48]	; 0x30
 8008798:	4b39      	ldr	r3, [pc, #228]	; (8008880 <HAL_LTDC_MspInit+0x178>)
 800879a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a0:	613b      	str	r3, [r7, #16]
 80087a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80087a4:	4b36      	ldr	r3, [pc, #216]	; (8008880 <HAL_LTDC_MspInit+0x178>)
 80087a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a8:	4a35      	ldr	r2, [pc, #212]	; (8008880 <HAL_LTDC_MspInit+0x178>)
 80087aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087ae:	6313      	str	r3, [r2, #48]	; 0x30
 80087b0:	4b33      	ldr	r3, [pc, #204]	; (8008880 <HAL_LTDC_MspInit+0x178>)
 80087b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087b8:	60fb      	str	r3, [r7, #12]
 80087ba:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80087bc:	2310      	movs	r3, #16
 80087be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087c0:	2302      	movs	r3, #2
 80087c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087c4:	2300      	movs	r3, #0
 80087c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087c8:	2300      	movs	r3, #0
 80087ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80087cc:	230e      	movs	r3, #14
 80087ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80087d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087d4:	4619      	mov	r1, r3
 80087d6:	482b      	ldr	r0, [pc, #172]	; (8008884 <HAL_LTDC_MspInit+0x17c>)
 80087d8:	f7f9 fcfa 	bl	80021d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 80087dc:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80087e0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087e2:	2302      	movs	r3, #2
 80087e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087e6:	2300      	movs	r3, #0
 80087e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087ea:	2300      	movs	r3, #0
 80087ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80087ee:	230e      	movs	r3, #14
 80087f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80087f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087f6:	4619      	mov	r1, r3
 80087f8:	4823      	ldr	r0, [pc, #140]	; (8008888 <HAL_LTDC_MspInit+0x180>)
 80087fa:	f7f9 fce9 	bl	80021d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 80087fe:	23f7      	movs	r3, #247	; 0xf7
 8008800:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008802:	2302      	movs	r3, #2
 8008804:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008806:	2300      	movs	r3, #0
 8008808:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800880a:	2300      	movs	r3, #0
 800880c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800880e:	230e      	movs	r3, #14
 8008810:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8008812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008816:	4619      	mov	r1, r3
 8008818:	481c      	ldr	r0, [pc, #112]	; (800888c <HAL_LTDC_MspInit+0x184>)
 800881a:	f7f9 fcd9 	bl	80021d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800881e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008822:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008824:	2302      	movs	r3, #2
 8008826:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008828:	2300      	movs	r3, #0
 800882a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800882c:	2300      	movs	r3, #0
 800882e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8008830:	2309      	movs	r3, #9
 8008832:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8008834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008838:	4619      	mov	r1, r3
 800883a:	4815      	ldr	r0, [pc, #84]	; (8008890 <HAL_LTDC_MspInit+0x188>)
 800883c:	f7f9 fcc8 	bl	80021d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8008840:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8008844:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008846:	2302      	movs	r3, #2
 8008848:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800884a:	2300      	movs	r3, #0
 800884c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800884e:	2300      	movs	r3, #0
 8008850:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8008852:	230e      	movs	r3, #14
 8008854:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8008856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800885a:	4619      	mov	r1, r3
 800885c:	480d      	ldr	r0, [pc, #52]	; (8008894 <HAL_LTDC_MspInit+0x18c>)
 800885e:	f7f9 fcb7 	bl	80021d0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8008862:	2200      	movs	r2, #0
 8008864:	2100      	movs	r1, #0
 8008866:	2058      	movs	r0, #88	; 0x58
 8008868:	f7f8 ff23 	bl	80016b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800886c:	2058      	movs	r0, #88	; 0x58
 800886e:	f7f8 ff3c 	bl	80016ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8008872:	bf00      	nop
 8008874:	3738      	adds	r7, #56	; 0x38
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	40016800 	.word	0x40016800
 8008880:	40023800 	.word	0x40023800
 8008884:	40021000 	.word	0x40021000
 8008888:	40022400 	.word	0x40022400
 800888c:	40022800 	.word	0x40022800
 8008890:	40021800 	.word	0x40021800
 8008894:	40022000 	.word	0x40022000

08008898 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b08c      	sub	sp, #48	; 0x30
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088a0:	f107 031c 	add.w	r3, r7, #28
 80088a4:	2200      	movs	r2, #0
 80088a6:	601a      	str	r2, [r3, #0]
 80088a8:	605a      	str	r2, [r3, #4]
 80088aa:	609a      	str	r2, [r3, #8]
 80088ac:	60da      	str	r2, [r3, #12]
 80088ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a3c      	ldr	r2, [pc, #240]	; (80089a8 <HAL_UART_MspInit+0x110>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d145      	bne.n	8008946 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80088ba:	4b3c      	ldr	r3, [pc, #240]	; (80089ac <HAL_UART_MspInit+0x114>)
 80088bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088be:	4a3b      	ldr	r2, [pc, #236]	; (80089ac <HAL_UART_MspInit+0x114>)
 80088c0:	f043 0310 	orr.w	r3, r3, #16
 80088c4:	6453      	str	r3, [r2, #68]	; 0x44
 80088c6:	4b39      	ldr	r3, [pc, #228]	; (80089ac <HAL_UART_MspInit+0x114>)
 80088c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ca:	f003 0310 	and.w	r3, r3, #16
 80088ce:	61bb      	str	r3, [r7, #24]
 80088d0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80088d2:	4b36      	ldr	r3, [pc, #216]	; (80089ac <HAL_UART_MspInit+0x114>)
 80088d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d6:	4a35      	ldr	r2, [pc, #212]	; (80089ac <HAL_UART_MspInit+0x114>)
 80088d8:	f043 0302 	orr.w	r3, r3, #2
 80088dc:	6313      	str	r3, [r2, #48]	; 0x30
 80088de:	4b33      	ldr	r3, [pc, #204]	; (80089ac <HAL_UART_MspInit+0x114>)
 80088e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e2:	f003 0302 	and.w	r3, r3, #2
 80088e6:	617b      	str	r3, [r7, #20]
 80088e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088ea:	4b30      	ldr	r3, [pc, #192]	; (80089ac <HAL_UART_MspInit+0x114>)
 80088ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ee:	4a2f      	ldr	r2, [pc, #188]	; (80089ac <HAL_UART_MspInit+0x114>)
 80088f0:	f043 0301 	orr.w	r3, r3, #1
 80088f4:	6313      	str	r3, [r2, #48]	; 0x30
 80088f6:	4b2d      	ldr	r3, [pc, #180]	; (80089ac <HAL_UART_MspInit+0x114>)
 80088f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fa:	f003 0301 	and.w	r3, r3, #1
 80088fe:	613b      	str	r3, [r7, #16]
 8008900:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8008902:	2380      	movs	r3, #128	; 0x80
 8008904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008906:	2302      	movs	r3, #2
 8008908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800890a:	2300      	movs	r3, #0
 800890c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800890e:	2300      	movs	r3, #0
 8008910:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008912:	2307      	movs	r3, #7
 8008914:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8008916:	f107 031c 	add.w	r3, r7, #28
 800891a:	4619      	mov	r1, r3
 800891c:	4824      	ldr	r0, [pc, #144]	; (80089b0 <HAL_UART_MspInit+0x118>)
 800891e:	f7f9 fc57 	bl	80021d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8008922:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008928:	2302      	movs	r3, #2
 800892a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800892c:	2300      	movs	r3, #0
 800892e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008930:	2300      	movs	r3, #0
 8008932:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008934:	2307      	movs	r3, #7
 8008936:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8008938:	f107 031c 	add.w	r3, r7, #28
 800893c:	4619      	mov	r1, r3
 800893e:	481d      	ldr	r0, [pc, #116]	; (80089b4 <HAL_UART_MspInit+0x11c>)
 8008940:	f7f9 fc46 	bl	80021d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8008944:	e02c      	b.n	80089a0 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a1b      	ldr	r2, [pc, #108]	; (80089b8 <HAL_UART_MspInit+0x120>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d127      	bne.n	80089a0 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8008950:	4b16      	ldr	r3, [pc, #88]	; (80089ac <HAL_UART_MspInit+0x114>)
 8008952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008954:	4a15      	ldr	r2, [pc, #84]	; (80089ac <HAL_UART_MspInit+0x114>)
 8008956:	f043 0320 	orr.w	r3, r3, #32
 800895a:	6453      	str	r3, [r2, #68]	; 0x44
 800895c:	4b13      	ldr	r3, [pc, #76]	; (80089ac <HAL_UART_MspInit+0x114>)
 800895e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008960:	f003 0320 	and.w	r3, r3, #32
 8008964:	60fb      	str	r3, [r7, #12]
 8008966:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008968:	4b10      	ldr	r3, [pc, #64]	; (80089ac <HAL_UART_MspInit+0x114>)
 800896a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896c:	4a0f      	ldr	r2, [pc, #60]	; (80089ac <HAL_UART_MspInit+0x114>)
 800896e:	f043 0304 	orr.w	r3, r3, #4
 8008972:	6313      	str	r3, [r2, #48]	; 0x30
 8008974:	4b0d      	ldr	r3, [pc, #52]	; (80089ac <HAL_UART_MspInit+0x114>)
 8008976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008978:	f003 0304 	and.w	r3, r3, #4
 800897c:	60bb      	str	r3, [r7, #8]
 800897e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8008980:	23c0      	movs	r3, #192	; 0xc0
 8008982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008984:	2302      	movs	r3, #2
 8008986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008988:	2300      	movs	r3, #0
 800898a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800898c:	2303      	movs	r3, #3
 800898e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8008990:	2308      	movs	r3, #8
 8008992:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008994:	f107 031c 	add.w	r3, r7, #28
 8008998:	4619      	mov	r1, r3
 800899a:	4808      	ldr	r0, [pc, #32]	; (80089bc <HAL_UART_MspInit+0x124>)
 800899c:	f7f9 fc18 	bl	80021d0 <HAL_GPIO_Init>
}
 80089a0:	bf00      	nop
 80089a2:	3730      	adds	r7, #48	; 0x30
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	40011000 	.word	0x40011000
 80089ac:	40023800 	.word	0x40023800
 80089b0:	40020400 	.word	0x40020400
 80089b4:	40020000 	.word	0x40020000
 80089b8:	40011400 	.word	0x40011400
 80089bc:	40020800 	.word	0x40020800

080089c0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b086      	sub	sp, #24
 80089c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80089c6:	1d3b      	adds	r3, r7, #4
 80089c8:	2200      	movs	r2, #0
 80089ca:	601a      	str	r2, [r3, #0]
 80089cc:	605a      	str	r2, [r3, #4]
 80089ce:	609a      	str	r2, [r3, #8]
 80089d0:	60da      	str	r2, [r3, #12]
 80089d2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80089d4:	4b3a      	ldr	r3, [pc, #232]	; (8008ac0 <HAL_FMC_MspInit+0x100>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d16d      	bne.n	8008ab8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80089dc:	4b38      	ldr	r3, [pc, #224]	; (8008ac0 <HAL_FMC_MspInit+0x100>)
 80089de:	2201      	movs	r2, #1
 80089e0:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80089e2:	4b38      	ldr	r3, [pc, #224]	; (8008ac4 <HAL_FMC_MspInit+0x104>)
 80089e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e6:	4a37      	ldr	r2, [pc, #220]	; (8008ac4 <HAL_FMC_MspInit+0x104>)
 80089e8:	f043 0301 	orr.w	r3, r3, #1
 80089ec:	6393      	str	r3, [r2, #56]	; 0x38
 80089ee:	4b35      	ldr	r3, [pc, #212]	; (8008ac4 <HAL_FMC_MspInit+0x104>)
 80089f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f2:	f003 0301 	and.w	r3, r3, #1
 80089f6:	603b      	str	r3, [r7, #0]
 80089f8:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 80089fa:	f64f 7383 	movw	r3, #65411	; 0xff83
 80089fe:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a00:	2302      	movs	r3, #2
 8008a02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a04:	2300      	movs	r3, #0
 8008a06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a08:	2303      	movs	r3, #3
 8008a0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008a0c:	230c      	movs	r3, #12
 8008a0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008a10:	1d3b      	adds	r3, r7, #4
 8008a12:	4619      	mov	r1, r3
 8008a14:	482c      	ldr	r0, [pc, #176]	; (8008ac8 <HAL_FMC_MspInit+0x108>)
 8008a16:	f7f9 fbdb 	bl	80021d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8008a1a:	f248 1333 	movw	r3, #33075	; 0x8133
 8008a1e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a20:	2302      	movs	r3, #2
 8008a22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a24:	2300      	movs	r3, #0
 8008a26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a28:	2303      	movs	r3, #3
 8008a2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008a2c:	230c      	movs	r3, #12
 8008a2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008a30:	1d3b      	adds	r3, r7, #4
 8008a32:	4619      	mov	r1, r3
 8008a34:	4825      	ldr	r0, [pc, #148]	; (8008acc <HAL_FMC_MspInit+0x10c>)
 8008a36:	f7f9 fbcb 	bl	80021d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8008a3a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8008a3e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a40:	2302      	movs	r3, #2
 8008a42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a44:	2300      	movs	r3, #0
 8008a46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008a4c:	230c      	movs	r3, #12
 8008a4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008a50:	1d3b      	adds	r3, r7, #4
 8008a52:	4619      	mov	r1, r3
 8008a54:	481e      	ldr	r0, [pc, #120]	; (8008ad0 <HAL_FMC_MspInit+0x110>)
 8008a56:	f7f9 fbbb 	bl	80021d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8008a5a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8008a5e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a60:	2302      	movs	r3, #2
 8008a62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a64:	2300      	movs	r3, #0
 8008a66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008a6c:	230c      	movs	r3, #12
 8008a6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008a70:	1d3b      	adds	r3, r7, #4
 8008a72:	4619      	mov	r1, r3
 8008a74:	4817      	ldr	r0, [pc, #92]	; (8008ad4 <HAL_FMC_MspInit+0x114>)
 8008a76:	f7f9 fbab 	bl	80021d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8008a7a:	2328      	movs	r3, #40	; 0x28
 8008a7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a7e:	2302      	movs	r3, #2
 8008a80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a82:	2300      	movs	r3, #0
 8008a84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a86:	2303      	movs	r3, #3
 8008a88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008a8a:	230c      	movs	r3, #12
 8008a8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008a8e:	1d3b      	adds	r3, r7, #4
 8008a90:	4619      	mov	r1, r3
 8008a92:	4811      	ldr	r0, [pc, #68]	; (8008ad8 <HAL_FMC_MspInit+0x118>)
 8008a94:	f7f9 fb9c 	bl	80021d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8008a98:	2308      	movs	r3, #8
 8008a9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a9c:	2302      	movs	r3, #2
 8008a9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008aa8:	230c      	movs	r3, #12
 8008aaa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8008aac:	1d3b      	adds	r3, r7, #4
 8008aae:	4619      	mov	r1, r3
 8008ab0:	480a      	ldr	r0, [pc, #40]	; (8008adc <HAL_FMC_MspInit+0x11c>)
 8008ab2:	f7f9 fb8d 	bl	80021d0 <HAL_GPIO_Init>
 8008ab6:	e000      	b.n	8008aba <HAL_FMC_MspInit+0xfa>
    return;
 8008ab8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8008aba:	3718      	adds	r7, #24
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	200001a4 	.word	0x200001a4
 8008ac4:	40023800 	.word	0x40023800
 8008ac8:	40021000 	.word	0x40021000
 8008acc:	40021800 	.word	0x40021800
 8008ad0:	40020c00 	.word	0x40020c00
 8008ad4:	40021400 	.word	0x40021400
 8008ad8:	40021c00 	.word	0x40021c00
 8008adc:	40020800 	.word	0x40020800

08008ae0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8008ae8:	f7ff ff6a 	bl	80089c0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8008aec:	bf00      	nop
 8008aee:	3708      	adds	r7, #8
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008af4:	b480      	push	{r7}
 8008af6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008af8:	bf00      	nop
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr

08008b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008b02:	b480      	push	{r7}
 8008b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008b06:	e7fe      	b.n	8008b06 <HardFault_Handler+0x4>

08008b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008b0c:	e7fe      	b.n	8008b0c <MemManage_Handler+0x4>

08008b0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008b0e:	b480      	push	{r7}
 8008b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008b12:	e7fe      	b.n	8008b12 <BusFault_Handler+0x4>

08008b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008b14:	b480      	push	{r7}
 8008b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008b18:	e7fe      	b.n	8008b18 <UsageFault_Handler+0x4>

08008b1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008b1e:	bf00      	nop
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008b2c:	bf00      	nop
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr

08008b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008b36:	b480      	push	{r7}
 8008b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008b3a:	bf00      	nop
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8008b48:	4802      	ldr	r0, [pc, #8]	; (8008b54 <OTG_FS_IRQHandler+0x10>)
 8008b4a:	f7f9 ff05 	bl	8002958 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008b4e:	bf00      	nop
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	20000e34 	.word	0x20000e34

08008b58 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8008b5c:	4802      	ldr	r0, [pc, #8]	; (8008b68 <LTDC_IRQHandler+0x10>)
 8008b5e:	f7fb f98b 	bl	8003e78 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8008b62:	bf00      	nop
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	20000640 	.word	0x20000640

08008b6c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8008b70:	4802      	ldr	r0, [pc, #8]	; (8008b7c <DMA2D_IRQHandler+0x10>)
 8008b72:	f7f9 f8ef 	bl	8001d54 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8008b76:	bf00      	nop
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	200008e0 	.word	0x200008e0

08008b80 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008b80:	b480      	push	{r7}
 8008b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008b84:	4b15      	ldr	r3, [pc, #84]	; (8008bdc <SystemInit+0x5c>)
 8008b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b8a:	4a14      	ldr	r2, [pc, #80]	; (8008bdc <SystemInit+0x5c>)
 8008b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008b94:	4b12      	ldr	r3, [pc, #72]	; (8008be0 <SystemInit+0x60>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a11      	ldr	r2, [pc, #68]	; (8008be0 <SystemInit+0x60>)
 8008b9a:	f043 0301 	orr.w	r3, r3, #1
 8008b9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008ba0:	4b0f      	ldr	r3, [pc, #60]	; (8008be0 <SystemInit+0x60>)
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008ba6:	4b0e      	ldr	r3, [pc, #56]	; (8008be0 <SystemInit+0x60>)
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	490d      	ldr	r1, [pc, #52]	; (8008be0 <SystemInit+0x60>)
 8008bac:	4b0d      	ldr	r3, [pc, #52]	; (8008be4 <SystemInit+0x64>)
 8008bae:	4013      	ands	r3, r2
 8008bb0:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008bb2:	4b0b      	ldr	r3, [pc, #44]	; (8008be0 <SystemInit+0x60>)
 8008bb4:	4a0c      	ldr	r2, [pc, #48]	; (8008be8 <SystemInit+0x68>)
 8008bb6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008bb8:	4b09      	ldr	r3, [pc, #36]	; (8008be0 <SystemInit+0x60>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a08      	ldr	r2, [pc, #32]	; (8008be0 <SystemInit+0x60>)
 8008bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008bc2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008bc4:	4b06      	ldr	r3, [pc, #24]	; (8008be0 <SystemInit+0x60>)
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008bca:	4b04      	ldr	r3, [pc, #16]	; (8008bdc <SystemInit+0x5c>)
 8008bcc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008bd0:	609a      	str	r2, [r3, #8]
#endif
}
 8008bd2:	bf00      	nop
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr
 8008bdc:	e000ed00 	.word	0xe000ed00
 8008be0:	40023800 	.word	0x40023800
 8008be4:	fef6ffff 	.word	0xfef6ffff
 8008be8:	24003010 	.word	0x24003010

08008bec <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008bf0:	4802      	ldr	r0, [pc, #8]	; (8008bfc <MX_USB_HOST_Process+0x10>)
 8008bf2:	f7fe f82f 	bl	8006c54 <USBH_Process>
}
 8008bf6:	bf00      	nop
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	20000a68 	.word	0x20000a68

08008c00 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7fe fac2 	bl	8007198 <USBH_LL_IncTimer>
}
 8008c14:	bf00      	nop
 8008c16:	3708      	adds	r7, #8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fe fb07 	bl	800723e <USBH_LL_Connect>
}
 8008c30:	bf00      	nop
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7fe fb1f 	bl	800728a <USBH_LL_Disconnect>
}
 8008c4c:	bf00      	nop
 8008c4e:	3708      	adds	r7, #8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	70fb      	strb	r3, [r7, #3]
 8008c60:	4613      	mov	r3, r2
 8008c62:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fe fab4 	bl	80071ec <USBH_LL_PortEnabled>
} 
 8008c84:	bf00      	nop
 8008c86:	3708      	adds	r7, #8
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7fe fab4 	bl	8007208 <USBH_LL_PortDisabled>
} 
 8008ca0:	bf00      	nop
 8008ca2:	3708      	adds	r7, #8
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7f9 ff50 	bl	8002b64 <HAL_HCD_Start>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008cc8:	7bfb      	ldrb	r3, [r7, #15]
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f000 f8e0 	bl	8008e90 <USBH_Get_USB_Status>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008cd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b084      	sub	sp, #16
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cea:	2300      	movs	r3, #0
 8008cec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7f9 ff58 	bl	8002baa <HAL_HCD_Stop>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008cfe:	7bfb      	ldrb	r3, [r7, #15]
 8008d00:	4618      	mov	r0, r3
 8008d02:	f000 f8c5 	bl	8008e90 <USBH_Get_USB_Status>
 8008d06:	4603      	mov	r3, r0
 8008d08:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8008d0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3710      	adds	r7, #16
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7f9 ff7f 	bl	8002c2a <HAL_HCD_GetCurrentSpeed>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d007      	beq.n	8008d42 <USBH_LL_GetSpeed+0x2e>
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d302      	bcc.n	8008d3c <USBH_LL_GetSpeed+0x28>
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d006      	beq.n	8008d48 <USBH_LL_GetSpeed+0x34>
 8008d3a:	e008      	b.n	8008d4e <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d40:	e008      	b.n	8008d54 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008d42:	2301      	movs	r3, #1
 8008d44:	73fb      	strb	r3, [r7, #15]
    break;
 8008d46:	e005      	b.n	8008d54 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008d48:	2302      	movs	r3, #2
 8008d4a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d4c:	e002      	b.n	8008d54 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	73fb      	strb	r3, [r7, #15]
    break;
 8008d52:	bf00      	nop
  }
  return  speed;
 8008d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b084      	sub	sp, #16
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d66:	2300      	movs	r3, #0
 8008d68:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7f9 ff35 	bl	8002be4 <HAL_HCD_ResetPort>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8008d7e:	7bfb      	ldrb	r3, [r7, #15]
 8008d80:	4618      	mov	r0, r3
 8008d82:	f000 f885 	bl	8008e90 <USBH_Get_USB_Status>
 8008d86:	4603      	mov	r3, r0
 8008d88:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008d8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3710      	adds	r7, #16
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008d94:	b590      	push	{r4, r7, lr}
 8008d96:	b089      	sub	sp, #36	; 0x24
 8008d98:	af04      	add	r7, sp, #16
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	4608      	mov	r0, r1
 8008d9e:	4611      	mov	r1, r2
 8008da0:	461a      	mov	r2, r3
 8008da2:	4603      	mov	r3, r0
 8008da4:	70fb      	strb	r3, [r7, #3]
 8008da6:	460b      	mov	r3, r1
 8008da8:	70bb      	strb	r3, [r7, #2]
 8008daa:	4613      	mov	r3, r2
 8008dac:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dae:	2300      	movs	r3, #0
 8008db0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008db2:	2300      	movs	r3, #0
 8008db4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8008dbc:	787c      	ldrb	r4, [r7, #1]
 8008dbe:	78ba      	ldrb	r2, [r7, #2]
 8008dc0:	78f9      	ldrb	r1, [r7, #3]
 8008dc2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008dc4:	9302      	str	r3, [sp, #8]
 8008dc6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008dca:	9301      	str	r3, [sp, #4]
 8008dcc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008dd0:	9300      	str	r3, [sp, #0]
 8008dd2:	4623      	mov	r3, r4
 8008dd4:	f7f9 fbbf 	bl	8002556 <HAL_HCD_HC_Init>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
 8008dde:	4618      	mov	r0, r3
 8008de0:	f000 f856 	bl	8008e90 <USBH_Get_USB_Status>
 8008de4:	4603      	mov	r3, r0
 8008de6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008de8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3714      	adds	r7, #20
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd90      	pop	{r4, r7, pc}

08008df2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008df2:	b590      	push	{r4, r7, lr}
 8008df4:	b089      	sub	sp, #36	; 0x24
 8008df6:	af04      	add	r7, sp, #16
 8008df8:	6078      	str	r0, [r7, #4]
 8008dfa:	4608      	mov	r0, r1
 8008dfc:	4611      	mov	r1, r2
 8008dfe:	461a      	mov	r2, r3
 8008e00:	4603      	mov	r3, r0
 8008e02:	70fb      	strb	r3, [r7, #3]
 8008e04:	460b      	mov	r3, r1
 8008e06:	70bb      	strb	r3, [r7, #2]
 8008e08:	4613      	mov	r3, r2
 8008e0a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e10:	2300      	movs	r3, #0
 8008e12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8008e1a:	787c      	ldrb	r4, [r7, #1]
 8008e1c:	78ba      	ldrb	r2, [r7, #2]
 8008e1e:	78f9      	ldrb	r1, [r7, #3]
 8008e20:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008e24:	9303      	str	r3, [sp, #12]
 8008e26:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008e28:	9302      	str	r3, [sp, #8]
 8008e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2c:	9301      	str	r3, [sp, #4]
 8008e2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	4623      	mov	r3, r4
 8008e36:	f7f9 fc27 	bl	8002688 <HAL_HCD_HC_SubmitRequest>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008e3e:	7bfb      	ldrb	r3, [r7, #15]
 8008e40:	4618      	mov	r0, r3
 8008e42:	f000 f825 	bl	8008e90 <USBH_Get_USB_Status>
 8008e46:	4603      	mov	r3, r0
 8008e48:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008e4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3714      	adds	r7, #20
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd90      	pop	{r4, r7, pc}

08008e54 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e66:	78fa      	ldrb	r2, [r7, #3]
 8008e68:	4611      	mov	r1, r2
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7f9 fec8 	bl	8002c00 <HAL_HCD_HC_GetURBState>
 8008e70:	4603      	mov	r3, r0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3708      	adds	r7, #8
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b082      	sub	sp, #8
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7f8 fb18 	bl	80014b8 <HAL_Delay>
}
 8008e88:	bf00      	nop
 8008e8a:	3708      	adds	r7, #8
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b085      	sub	sp, #20
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	4603      	mov	r3, r0
 8008e98:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008e9e:	79fb      	ldrb	r3, [r7, #7]
 8008ea0:	2b03      	cmp	r3, #3
 8008ea2:	d817      	bhi.n	8008ed4 <USBH_Get_USB_Status+0x44>
 8008ea4:	a201      	add	r2, pc, #4	; (adr r2, 8008eac <USBH_Get_USB_Status+0x1c>)
 8008ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eaa:	bf00      	nop
 8008eac:	08008ebd 	.word	0x08008ebd
 8008eb0:	08008ec3 	.word	0x08008ec3
 8008eb4:	08008ec9 	.word	0x08008ec9
 8008eb8:	08008ecf 	.word	0x08008ecf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	73fb      	strb	r3, [r7, #15]
    break;
 8008ec0:	e00b      	b.n	8008eda <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008ec2:	2302      	movs	r3, #2
 8008ec4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ec6:	e008      	b.n	8008eda <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	73fb      	strb	r3, [r7, #15]
    break;
 8008ecc:	e005      	b.n	8008eda <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008ece:	2302      	movs	r3, #2
 8008ed0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ed2:	e002      	b.n	8008eda <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008ed4:	2302      	movs	r3, #2
 8008ed6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ed8:	bf00      	nop
  }
  return usb_status;
 8008eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3714      	adds	r7, #20
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008ee8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008f20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008eec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008eee:	e003      	b.n	8008ef8 <LoopCopyDataInit>

08008ef0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008ef0:	4b0c      	ldr	r3, [pc, #48]	; (8008f24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008ef2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008ef4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008ef6:	3104      	adds	r1, #4

08008ef8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008ef8:	480b      	ldr	r0, [pc, #44]	; (8008f28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008efa:	4b0c      	ldr	r3, [pc, #48]	; (8008f2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008efc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008efe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008f00:	d3f6      	bcc.n	8008ef0 <CopyDataInit>
  ldr  r2, =_sbss
 8008f02:	4a0b      	ldr	r2, [pc, #44]	; (8008f30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008f04:	e002      	b.n	8008f0c <LoopFillZerobss>

08008f06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008f06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008f08:	f842 3b04 	str.w	r3, [r2], #4

08008f0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008f0c:	4b09      	ldr	r3, [pc, #36]	; (8008f34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008f0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008f10:	d3f9      	bcc.n	8008f06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008f12:	f7ff fe35 	bl	8008b80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008f16:	f000 f811 	bl	8008f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008f1a:	f7fe ffa5 	bl	8007e68 <main>
  bx  lr    
 8008f1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008f20:	2004ffff 	.word	0x2004ffff
  ldr  r3, =_sidata
 8008f24:	0800ce94 	.word	0x0800ce94
  ldr  r0, =_sdata
 8008f28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008f2c:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8008f30:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8008f34:	200010f8 	.word	0x200010f8

08008f38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008f38:	e7fe      	b.n	8008f38 <ADC_IRQHandler>
	...

08008f3c <__libc_init_array>:
 8008f3c:	b570      	push	{r4, r5, r6, lr}
 8008f3e:	4e0d      	ldr	r6, [pc, #52]	; (8008f74 <__libc_init_array+0x38>)
 8008f40:	4c0d      	ldr	r4, [pc, #52]	; (8008f78 <__libc_init_array+0x3c>)
 8008f42:	1ba4      	subs	r4, r4, r6
 8008f44:	10a4      	asrs	r4, r4, #2
 8008f46:	2500      	movs	r5, #0
 8008f48:	42a5      	cmp	r5, r4
 8008f4a:	d109      	bne.n	8008f60 <__libc_init_array+0x24>
 8008f4c:	4e0b      	ldr	r6, [pc, #44]	; (8008f7c <__libc_init_array+0x40>)
 8008f4e:	4c0c      	ldr	r4, [pc, #48]	; (8008f80 <__libc_init_array+0x44>)
 8008f50:	f000 f820 	bl	8008f94 <_init>
 8008f54:	1ba4      	subs	r4, r4, r6
 8008f56:	10a4      	asrs	r4, r4, #2
 8008f58:	2500      	movs	r5, #0
 8008f5a:	42a5      	cmp	r5, r4
 8008f5c:	d105      	bne.n	8008f6a <__libc_init_array+0x2e>
 8008f5e:	bd70      	pop	{r4, r5, r6, pc}
 8008f60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008f64:	4798      	blx	r3
 8008f66:	3501      	adds	r5, #1
 8008f68:	e7ee      	b.n	8008f48 <__libc_init_array+0xc>
 8008f6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008f6e:	4798      	blx	r3
 8008f70:	3501      	adds	r5, #1
 8008f72:	e7f2      	b.n	8008f5a <__libc_init_array+0x1e>
 8008f74:	0800ce8c 	.word	0x0800ce8c
 8008f78:	0800ce8c 	.word	0x0800ce8c
 8008f7c:	0800ce8c 	.word	0x0800ce8c
 8008f80:	0800ce90 	.word	0x0800ce90

08008f84 <memset>:
 8008f84:	4402      	add	r2, r0
 8008f86:	4603      	mov	r3, r0
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d100      	bne.n	8008f8e <memset+0xa>
 8008f8c:	4770      	bx	lr
 8008f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8008f92:	e7f9      	b.n	8008f88 <memset+0x4>

08008f94 <_init>:
 8008f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f96:	bf00      	nop
 8008f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f9a:	bc08      	pop	{r3}
 8008f9c:	469e      	mov	lr, r3
 8008f9e:	4770      	bx	lr

08008fa0 <_fini>:
 8008fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa2:	bf00      	nop
 8008fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fa6:	bc08      	pop	{r3}
 8008fa8:	469e      	mov	lr, r3
 8008faa:	4770      	bx	lr
