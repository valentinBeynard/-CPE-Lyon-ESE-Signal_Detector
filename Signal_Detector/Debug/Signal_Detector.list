
Signal_Detector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d050  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000029f8  0800d218  0800d218  0001d218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc10  0800fc10  00020114  2**0
                  CONTENTS
  4 .ARM          00000008  0800fc10  0800fc10  0001fc10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fc18  0800fc18  00020114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc18  0800fc18  0001fc18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fc1c  0800fc1c  0001fc1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  0800fc20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004730  20000114  0800fd34  00020114  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004844  0800fd34  00024844  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026be7  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000048f7  00000000  00000000  00046d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002278  00000000  00000000  0004b628  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002040  00000000  00000000  0004d8a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b929  00000000  00000000  0004f8e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c20c  00000000  00000000  0007b209  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010e328  00000000  00000000  00097415  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a573d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009638  00000000  00000000  001a57b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000114 	.word	0x20000114
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800d200 	.word	0x0800d200

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000118 	.word	0x20000118
 8000204:	0800d200 	.word	0x0800d200

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2uiz>:
 8000ae0:	004a      	lsls	r2, r1, #1
 8000ae2:	d211      	bcs.n	8000b08 <__aeabi_d2uiz+0x28>
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d211      	bcs.n	8000b0e <__aeabi_d2uiz+0x2e>
 8000aea:	d50d      	bpl.n	8000b08 <__aeabi_d2uiz+0x28>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d40e      	bmi.n	8000b14 <__aeabi_d2uiz+0x34>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	fa23 f002 	lsr.w	r0, r3, r2
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_d2uiz+0x3a>
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0000 	mov.w	r0, #0
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_d2f>:
 8000b20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b24:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b28:	bf24      	itt	cs
 8000b2a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b32:	d90d      	bls.n	8000b50 <__aeabi_d2f+0x30>
 8000b34:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b38:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b3c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b40:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b44:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b48:	bf08      	it	eq
 8000b4a:	f020 0001 	biceq.w	r0, r0, #1
 8000b4e:	4770      	bx	lr
 8000b50:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b54:	d121      	bne.n	8000b9a <__aeabi_d2f+0x7a>
 8000b56:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b5a:	bfbc      	itt	lt
 8000b5c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	4770      	bxlt	lr
 8000b62:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b66:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6a:	f1c2 0218 	rsb	r2, r2, #24
 8000b6e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b72:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b76:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	f040 0001 	orrne.w	r0, r0, #1
 8000b80:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b84:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b88:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b8c:	ea40 000c 	orr.w	r0, r0, ip
 8000b90:	fa23 f302 	lsr.w	r3, r3, r2
 8000b94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b98:	e7cc      	b.n	8000b34 <__aeabi_d2f+0x14>
 8000b9a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9e:	d107      	bne.n	8000bb0 <__aeabi_d2f+0x90>
 8000ba0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba4:	bf1e      	ittt	ne
 8000ba6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000baa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bae:	4770      	bxne	lr
 8000bb0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_uldivmod>:
 8000bc0:	b953      	cbnz	r3, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc2:	b94a      	cbnz	r2, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	bf08      	it	eq
 8000bc8:	2800      	cmpeq	r0, #0
 8000bca:	bf1c      	itt	ne
 8000bcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd4:	f000 b972 	b.w	8000ebc <__aeabi_idiv0>
 8000bd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bdc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be0:	f000 f806 	bl	8000bf0 <__udivmoddi4>
 8000be4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bec:	b004      	add	sp, #16
 8000bee:	4770      	bx	lr

08000bf0 <__udivmoddi4>:
 8000bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf4:	9e08      	ldr	r6, [sp, #32]
 8000bf6:	4604      	mov	r4, r0
 8000bf8:	4688      	mov	r8, r1
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d14b      	bne.n	8000c96 <__udivmoddi4+0xa6>
 8000bfe:	428a      	cmp	r2, r1
 8000c00:	4615      	mov	r5, r2
 8000c02:	d967      	bls.n	8000cd4 <__udivmoddi4+0xe4>
 8000c04:	fab2 f282 	clz	r2, r2
 8000c08:	b14a      	cbz	r2, 8000c1e <__udivmoddi4+0x2e>
 8000c0a:	f1c2 0720 	rsb	r7, r2, #32
 8000c0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c12:	fa20 f707 	lsr.w	r7, r0, r7
 8000c16:	4095      	lsls	r5, r2
 8000c18:	ea47 0803 	orr.w	r8, r7, r3
 8000c1c:	4094      	lsls	r4, r2
 8000c1e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c22:	0c23      	lsrs	r3, r4, #16
 8000c24:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c28:	fa1f fc85 	uxth.w	ip, r5
 8000c2c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c30:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c34:	fb07 f10c 	mul.w	r1, r7, ip
 8000c38:	4299      	cmp	r1, r3
 8000c3a:	d909      	bls.n	8000c50 <__udivmoddi4+0x60>
 8000c3c:	18eb      	adds	r3, r5, r3
 8000c3e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c42:	f080 811b 	bcs.w	8000e7c <__udivmoddi4+0x28c>
 8000c46:	4299      	cmp	r1, r3
 8000c48:	f240 8118 	bls.w	8000e7c <__udivmoddi4+0x28c>
 8000c4c:	3f02      	subs	r7, #2
 8000c4e:	442b      	add	r3, r5
 8000c50:	1a5b      	subs	r3, r3, r1
 8000c52:	b2a4      	uxth	r4, r4
 8000c54:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c58:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c60:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c64:	45a4      	cmp	ip, r4
 8000c66:	d909      	bls.n	8000c7c <__udivmoddi4+0x8c>
 8000c68:	192c      	adds	r4, r5, r4
 8000c6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6e:	f080 8107 	bcs.w	8000e80 <__udivmoddi4+0x290>
 8000c72:	45a4      	cmp	ip, r4
 8000c74:	f240 8104 	bls.w	8000e80 <__udivmoddi4+0x290>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	442c      	add	r4, r5
 8000c7c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c80:	eba4 040c 	sub.w	r4, r4, ip
 8000c84:	2700      	movs	r7, #0
 8000c86:	b11e      	cbz	r6, 8000c90 <__udivmoddi4+0xa0>
 8000c88:	40d4      	lsrs	r4, r2
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d909      	bls.n	8000cae <__udivmoddi4+0xbe>
 8000c9a:	2e00      	cmp	r6, #0
 8000c9c:	f000 80eb 	beq.w	8000e76 <__udivmoddi4+0x286>
 8000ca0:	2700      	movs	r7, #0
 8000ca2:	e9c6 0100 	strd	r0, r1, [r6]
 8000ca6:	4638      	mov	r0, r7
 8000ca8:	4639      	mov	r1, r7
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	fab3 f783 	clz	r7, r3
 8000cb2:	2f00      	cmp	r7, #0
 8000cb4:	d147      	bne.n	8000d46 <__udivmoddi4+0x156>
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0xd0>
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	f200 80fa 	bhi.w	8000eb4 <__udivmoddi4+0x2c4>
 8000cc0:	1a84      	subs	r4, r0, r2
 8000cc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	4698      	mov	r8, r3
 8000cca:	2e00      	cmp	r6, #0
 8000ccc:	d0e0      	beq.n	8000c90 <__udivmoddi4+0xa0>
 8000cce:	e9c6 4800 	strd	r4, r8, [r6]
 8000cd2:	e7dd      	b.n	8000c90 <__udivmoddi4+0xa0>
 8000cd4:	b902      	cbnz	r2, 8000cd8 <__udivmoddi4+0xe8>
 8000cd6:	deff      	udf	#255	; 0xff
 8000cd8:	fab2 f282 	clz	r2, r2
 8000cdc:	2a00      	cmp	r2, #0
 8000cde:	f040 808f 	bne.w	8000e00 <__udivmoddi4+0x210>
 8000ce2:	1b49      	subs	r1, r1, r5
 8000ce4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce8:	fa1f f885 	uxth.w	r8, r5
 8000cec:	2701      	movs	r7, #1
 8000cee:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cf2:	0c23      	lsrs	r3, r4, #16
 8000cf4:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb08 f10c 	mul.w	r1, r8, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x124>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x122>
 8000d0c:	4299      	cmp	r1, r3
 8000d0e:	f200 80cd 	bhi.w	8000eac <__udivmoddi4+0x2bc>
 8000d12:	4684      	mov	ip, r0
 8000d14:	1a59      	subs	r1, r3, r1
 8000d16:	b2a3      	uxth	r3, r4
 8000d18:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d1c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d20:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d24:	fb08 f800 	mul.w	r8, r8, r0
 8000d28:	45a0      	cmp	r8, r4
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x14c>
 8000d2c:	192c      	adds	r4, r5, r4
 8000d2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x14a>
 8000d34:	45a0      	cmp	r8, r4
 8000d36:	f200 80b6 	bhi.w	8000ea6 <__udivmoddi4+0x2b6>
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	eba4 0408 	sub.w	r4, r4, r8
 8000d40:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d44:	e79f      	b.n	8000c86 <__udivmoddi4+0x96>
 8000d46:	f1c7 0c20 	rsb	ip, r7, #32
 8000d4a:	40bb      	lsls	r3, r7
 8000d4c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d50:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d54:	fa01 f407 	lsl.w	r4, r1, r7
 8000d58:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d5c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d60:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d64:	4325      	orrs	r5, r4
 8000d66:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d6a:	0c2c      	lsrs	r4, r5, #16
 8000d6c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d70:	fa1f fa8e 	uxth.w	sl, lr
 8000d74:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d78:	fb09 f40a 	mul.w	r4, r9, sl
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	fa02 f207 	lsl.w	r2, r2, r7
 8000d82:	fa00 f107 	lsl.w	r1, r0, r7
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b0>
 8000d88:	eb1e 0303 	adds.w	r3, lr, r3
 8000d8c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d90:	f080 8087 	bcs.w	8000ea2 <__udivmoddi4+0x2b2>
 8000d94:	429c      	cmp	r4, r3
 8000d96:	f240 8084 	bls.w	8000ea2 <__udivmoddi4+0x2b2>
 8000d9a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d9e:	4473      	add	r3, lr
 8000da0:	1b1b      	subs	r3, r3, r4
 8000da2:	b2ad      	uxth	r5, r5
 8000da4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da8:	fb08 3310 	mls	r3, r8, r0, r3
 8000dac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000db0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000db4:	45a2      	cmp	sl, r4
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1da>
 8000db8:	eb1e 0404 	adds.w	r4, lr, r4
 8000dbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc0:	d26b      	bcs.n	8000e9a <__udivmoddi4+0x2aa>
 8000dc2:	45a2      	cmp	sl, r4
 8000dc4:	d969      	bls.n	8000e9a <__udivmoddi4+0x2aa>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4474      	add	r4, lr
 8000dca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dce:	fba0 8902 	umull	r8, r9, r0, r2
 8000dd2:	eba4 040a 	sub.w	r4, r4, sl
 8000dd6:	454c      	cmp	r4, r9
 8000dd8:	46c2      	mov	sl, r8
 8000dda:	464b      	mov	r3, r9
 8000ddc:	d354      	bcc.n	8000e88 <__udivmoddi4+0x298>
 8000dde:	d051      	beq.n	8000e84 <__udivmoddi4+0x294>
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d069      	beq.n	8000eb8 <__udivmoddi4+0x2c8>
 8000de4:	ebb1 050a 	subs.w	r5, r1, sl
 8000de8:	eb64 0403 	sbc.w	r4, r4, r3
 8000dec:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df0:	40fd      	lsrs	r5, r7
 8000df2:	40fc      	lsrs	r4, r7
 8000df4:	ea4c 0505 	orr.w	r5, ip, r5
 8000df8:	e9c6 5400 	strd	r5, r4, [r6]
 8000dfc:	2700      	movs	r7, #0
 8000dfe:	e747      	b.n	8000c90 <__udivmoddi4+0xa0>
 8000e00:	f1c2 0320 	rsb	r3, r2, #32
 8000e04:	fa20 f703 	lsr.w	r7, r0, r3
 8000e08:	4095      	lsls	r5, r2
 8000e0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e0e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e12:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e16:	4338      	orrs	r0, r7
 8000e18:	0c01      	lsrs	r1, r0, #16
 8000e1a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e1e:	fa1f f885 	uxth.w	r8, r5
 8000e22:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e26:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e2a:	fb07 f308 	mul.w	r3, r7, r8
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x256>
 8000e36:	1869      	adds	r1, r5, r1
 8000e38:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e3c:	d22f      	bcs.n	8000e9e <__udivmoddi4+0x2ae>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d92d      	bls.n	8000e9e <__udivmoddi4+0x2ae>
 8000e42:	3f02      	subs	r7, #2
 8000e44:	4429      	add	r1, r5
 8000e46:	1acb      	subs	r3, r1, r3
 8000e48:	b281      	uxth	r1, r0
 8000e4a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e4e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e52:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e56:	fb00 f308 	mul.w	r3, r0, r8
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x27e>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e64:	d217      	bcs.n	8000e96 <__udivmoddi4+0x2a6>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d915      	bls.n	8000e96 <__udivmoddi4+0x2a6>
 8000e6a:	3802      	subs	r0, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1ac9      	subs	r1, r1, r3
 8000e70:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e74:	e73b      	b.n	8000cee <__udivmoddi4+0xfe>
 8000e76:	4637      	mov	r7, r6
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e709      	b.n	8000c90 <__udivmoddi4+0xa0>
 8000e7c:	4607      	mov	r7, r0
 8000e7e:	e6e7      	b.n	8000c50 <__udivmoddi4+0x60>
 8000e80:	4618      	mov	r0, r3
 8000e82:	e6fb      	b.n	8000c7c <__udivmoddi4+0x8c>
 8000e84:	4541      	cmp	r1, r8
 8000e86:	d2ab      	bcs.n	8000de0 <__udivmoddi4+0x1f0>
 8000e88:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e8c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e90:	3801      	subs	r0, #1
 8000e92:	4613      	mov	r3, r2
 8000e94:	e7a4      	b.n	8000de0 <__udivmoddi4+0x1f0>
 8000e96:	4660      	mov	r0, ip
 8000e98:	e7e9      	b.n	8000e6e <__udivmoddi4+0x27e>
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	e795      	b.n	8000dca <__udivmoddi4+0x1da>
 8000e9e:	4667      	mov	r7, ip
 8000ea0:	e7d1      	b.n	8000e46 <__udivmoddi4+0x256>
 8000ea2:	4681      	mov	r9, r0
 8000ea4:	e77c      	b.n	8000da0 <__udivmoddi4+0x1b0>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	442c      	add	r4, r5
 8000eaa:	e747      	b.n	8000d3c <__udivmoddi4+0x14c>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	442b      	add	r3, r5
 8000eb2:	e72f      	b.n	8000d14 <__udivmoddi4+0x124>
 8000eb4:	4638      	mov	r0, r7
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xda>
 8000eb8:	4637      	mov	r7, r6
 8000eba:	e6e9      	b.n	8000c90 <__udivmoddi4+0xa0>

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000eca:	20c8      	movs	r0, #200	; 0xc8
 8000ecc:	f000 fc32 	bl	8001734 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000ed0:	f000 fa7a 	bl	80013c8 <ft5336_I2C_InitializeIfRequired>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b084      	sub	sp, #16
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000f04:	2300      	movs	r3, #0
 8000f06:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000f08:	f000 fa5e 	bl	80013c8 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	73fb      	strb	r3, [r7, #15]
 8000f10:	e010      	b.n	8000f34 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	21a8      	movs	r1, #168	; 0xa8
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 fbed 	bl	80016f8 <TS_IO_Read>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000f22:	7b7b      	ldrb	r3, [r7, #13]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b51      	cmp	r3, #81	; 0x51
 8000f28:	d101      	bne.n	8000f2e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	3301      	adds	r3, #1
 8000f32:	73fb      	strb	r3, [r7, #15]
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d802      	bhi.n	8000f40 <ft5336_ReadID+0x4e>
 8000f3a:	7bbb      	ldrb	r3, [r7, #14]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d0e8      	beq.n	8000f12 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000f40:	7b7b      	ldrb	r3, [r7, #13]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	b29b      	uxth	r3, r3
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4603      	mov	r3, r0
 8000f56:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 fa44 	bl	80013e8 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000f60:	88fb      	ldrh	r3, [r7, #6]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f932 	bl	80011cc <ft5336_TS_DisableIT>
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8000f7e:	88fb      	ldrh	r3, [r7, #6]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2102      	movs	r1, #2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 fbb7 	bl	80016f8 <TS_IO_Read>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b05      	cmp	r3, #5
 8000fa0:	d901      	bls.n	8000fa6 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <ft5336_TS_DetectTouch+0x50>)
 8000fac:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <ft5336_TS_DetectTouch+0x50>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	b2db      	uxtb	r3, r3
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000130 	.word	0x20000130

08000fc4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
 8000fd0:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000fe6:	4b6d      	ldr	r3, [pc, #436]	; (800119c <ft5336_TS_GetXY+0x1d8>)
 8000fe8:	789a      	ldrb	r2, [r3, #2]
 8000fea:	4b6c      	ldr	r3, [pc, #432]	; (800119c <ft5336_TS_GetXY+0x1d8>)
 8000fec:	785b      	ldrb	r3, [r3, #1]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	f080 80cf 	bcs.w	8001192 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000ff4:	4b69      	ldr	r3, [pc, #420]	; (800119c <ft5336_TS_GetXY+0x1d8>)
 8000ff6:	789b      	ldrb	r3, [r3, #2]
 8000ff8:	2b09      	cmp	r3, #9
 8000ffa:	d871      	bhi.n	80010e0 <ft5336_TS_GetXY+0x11c>
 8000ffc:	a201      	add	r2, pc, #4	; (adr r2, 8001004 <ft5336_TS_GetXY+0x40>)
 8000ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001002:	bf00      	nop
 8001004:	0800102d 	.word	0x0800102d
 8001008:	0800103f 	.word	0x0800103f
 800100c:	08001051 	.word	0x08001051
 8001010:	08001063 	.word	0x08001063
 8001014:	08001075 	.word	0x08001075
 8001018:	08001087 	.word	0x08001087
 800101c:	08001099 	.word	0x08001099
 8001020:	080010ab 	.word	0x080010ab
 8001024:	080010bd 	.word	0x080010bd
 8001028:	080010cf 	.word	0x080010cf
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800102c:	2304      	movs	r3, #4
 800102e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8001030:	2303      	movs	r3, #3
 8001032:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8001034:	2306      	movs	r3, #6
 8001036:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8001038:	2305      	movs	r3, #5
 800103a:	753b      	strb	r3, [r7, #20]
      break;
 800103c:	e051      	b.n	80010e2 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800103e:	230a      	movs	r3, #10
 8001040:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8001042:	2309      	movs	r3, #9
 8001044:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8001046:	230c      	movs	r3, #12
 8001048:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800104a:	230b      	movs	r3, #11
 800104c:	753b      	strb	r3, [r7, #20]
      break;
 800104e:	e048      	b.n	80010e2 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8001050:	2310      	movs	r3, #16
 8001052:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8001054:	230f      	movs	r3, #15
 8001056:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8001058:	2312      	movs	r3, #18
 800105a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800105c:	2311      	movs	r3, #17
 800105e:	753b      	strb	r3, [r7, #20]
      break;
 8001060:	e03f      	b.n	80010e2 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8001062:	2316      	movs	r3, #22
 8001064:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8001066:	2315      	movs	r3, #21
 8001068:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800106a:	2318      	movs	r3, #24
 800106c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800106e:	2317      	movs	r3, #23
 8001070:	753b      	strb	r3, [r7, #20]
      break;
 8001072:	e036      	b.n	80010e2 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8001074:	231c      	movs	r3, #28
 8001076:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8001078:	231b      	movs	r3, #27
 800107a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800107c:	231e      	movs	r3, #30
 800107e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8001080:	231d      	movs	r3, #29
 8001082:	753b      	strb	r3, [r7, #20]
      break;
 8001084:	e02d      	b.n	80010e2 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8001086:	2322      	movs	r3, #34	; 0x22
 8001088:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800108a:	2321      	movs	r3, #33	; 0x21
 800108c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800108e:	2324      	movs	r3, #36	; 0x24
 8001090:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8001092:	2323      	movs	r3, #35	; 0x23
 8001094:	753b      	strb	r3, [r7, #20]
      break;
 8001096:	e024      	b.n	80010e2 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8001098:	2328      	movs	r3, #40	; 0x28
 800109a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800109c:	2327      	movs	r3, #39	; 0x27
 800109e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80010a0:	232a      	movs	r3, #42	; 0x2a
 80010a2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80010a4:	2329      	movs	r3, #41	; 0x29
 80010a6:	753b      	strb	r3, [r7, #20]
      break;
 80010a8:	e01b      	b.n	80010e2 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80010aa:	232e      	movs	r3, #46	; 0x2e
 80010ac:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80010ae:	232d      	movs	r3, #45	; 0x2d
 80010b0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80010b2:	2330      	movs	r3, #48	; 0x30
 80010b4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80010b6:	232f      	movs	r3, #47	; 0x2f
 80010b8:	753b      	strb	r3, [r7, #20]
      break;
 80010ba:	e012      	b.n	80010e2 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80010bc:	2334      	movs	r3, #52	; 0x34
 80010be:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80010c0:	2333      	movs	r3, #51	; 0x33
 80010c2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80010c4:	2336      	movs	r3, #54	; 0x36
 80010c6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80010c8:	2335      	movs	r3, #53	; 0x35
 80010ca:	753b      	strb	r3, [r7, #20]
      break;
 80010cc:	e009      	b.n	80010e2 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80010ce:	233a      	movs	r3, #58	; 0x3a
 80010d0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80010d2:	2339      	movs	r3, #57	; 0x39
 80010d4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80010d6:	233c      	movs	r3, #60	; 0x3c
 80010d8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80010da:	233b      	movs	r3, #59	; 0x3b
 80010dc:	753b      	strb	r3, [r7, #20]
      break;
 80010de:	e000      	b.n	80010e2 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80010e0:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80010e2:	89fb      	ldrh	r3, [r7, #14]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	7dfa      	ldrb	r2, [r7, #23]
 80010e8:	4611      	mov	r1, r2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 fb04 	bl	80016f8 <TS_IO_Read>
 80010f0:	4603      	mov	r3, r0
 80010f2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80010f4:	7cfb      	ldrb	r3, [r7, #19]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	4b29      	ldr	r3, [pc, #164]	; (80011a0 <ft5336_TS_GetXY+0x1dc>)
 80010fc:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80010fe:	89fb      	ldrh	r3, [r7, #14]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	7dba      	ldrb	r2, [r7, #22]
 8001104:	4611      	mov	r1, r2
 8001106:	4618      	mov	r0, r3
 8001108:	f000 faf6 	bl	80016f8 <TS_IO_Read>
 800110c:	4603      	mov	r3, r0
 800110e:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001110:	7cfb      	ldrb	r3, [r7, #19]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800111a:	b21a      	sxth	r2, r3
 800111c:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <ft5336_TS_GetXY+0x1dc>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	b21b      	sxth	r3, r3
 8001122:	4313      	orrs	r3, r2
 8001124:	b21b      	sxth	r3, r3
 8001126:	b29a      	uxth	r2, r3
 8001128:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <ft5336_TS_GetXY+0x1dc>)
 800112a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800112c:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <ft5336_TS_GetXY+0x1dc>)
 800112e:	881a      	ldrh	r2, [r3, #0]
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8001134:	89fb      	ldrh	r3, [r7, #14]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	7d7a      	ldrb	r2, [r7, #21]
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f000 fadb 	bl	80016f8 <TS_IO_Read>
 8001142:	4603      	mov	r3, r0
 8001144:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001146:	7cfb      	ldrb	r3, [r7, #19]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	b29a      	uxth	r2, r3
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <ft5336_TS_GetXY+0x1dc>)
 800114e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8001150:	89fb      	ldrh	r3, [r7, #14]
 8001152:	b2db      	uxtb	r3, r3
 8001154:	7d3a      	ldrb	r2, [r7, #20]
 8001156:	4611      	mov	r1, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f000 facd 	bl	80016f8 <TS_IO_Read>
 800115e:	4603      	mov	r3, r0
 8001160:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001162:	7cfb      	ldrb	r3, [r7, #19]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	021b      	lsls	r3, r3, #8
 8001168:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800116c:	b21a      	sxth	r2, r3
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <ft5336_TS_GetXY+0x1dc>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	b21b      	sxth	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b21b      	sxth	r3, r3
 8001178:	b29a      	uxth	r2, r3
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <ft5336_TS_GetXY+0x1dc>)
 800117c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <ft5336_TS_GetXY+0x1dc>)
 8001180:	881a      	ldrh	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8001186:	4b05      	ldr	r3, [pc, #20]	; (800119c <ft5336_TS_GetXY+0x1d8>)
 8001188:	789b      	ldrb	r3, [r3, #2]
 800118a:	3301      	adds	r3, #1
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4b03      	ldr	r3, [pc, #12]	; (800119c <ft5336_TS_GetXY+0x1d8>)
 8001190:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000130 	.word	0x20000130
 80011a0:	20000134 	.word	0x20000134

080011a4 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80011b2:	2301      	movs	r3, #1
 80011b4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	7bfa      	ldrb	r2, [r7, #15]
 80011bc:	21a4      	movs	r1, #164	; 0xa4
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 fa80 	bl	80016c4 <TS_IO_Write>
}
 80011c4:	bf00      	nop
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80011da:	2300      	movs	r3, #0
 80011dc:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	7bfa      	ldrb	r2, [r7, #15]
 80011e4:	21a4      	movs	r1, #164	; 0xa4
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 fa6c 	bl	80016c4 <TS_IO_Write>
}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b084      	sub	sp, #16
 8001226:	af00      	add	r7, sp, #0
 8001228:	4603      	mov	r3, r0
 800122a:	6039      	str	r1, [r7, #0]
 800122c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8001232:	88fb      	ldrh	r3, [r7, #6]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2101      	movs	r1, #1
 8001238:	4618      	mov	r0, r3
 800123a:	f000 fa5d 	bl	80016f8 <TS_IO_Read>
 800123e:	4603      	mov	r3, r0
 8001240:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	461a      	mov	r2, r3
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	601a      	str	r2, [r3, #0]
}
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	4603      	mov	r3, r0
 8001262:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8001274:	4b4d      	ldr	r3, [pc, #308]	; (80013ac <ft5336_TS_GetTouchInfo+0x158>)
 8001276:	785b      	ldrb	r3, [r3, #1]
 8001278:	461a      	mov	r2, r3
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	4293      	cmp	r3, r2
 800127e:	f080 8090 	bcs.w	80013a2 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	2b09      	cmp	r3, #9
 8001286:	d85d      	bhi.n	8001344 <ft5336_TS_GetTouchInfo+0xf0>
 8001288:	a201      	add	r2, pc, #4	; (adr r2, 8001290 <ft5336_TS_GetTouchInfo+0x3c>)
 800128a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128e:	bf00      	nop
 8001290:	080012b9 	.word	0x080012b9
 8001294:	080012c7 	.word	0x080012c7
 8001298:	080012d5 	.word	0x080012d5
 800129c:	080012e3 	.word	0x080012e3
 80012a0:	080012f1 	.word	0x080012f1
 80012a4:	080012ff 	.word	0x080012ff
 80012a8:	0800130d 	.word	0x0800130d
 80012ac:	0800131b 	.word	0x0800131b
 80012b0:	08001329 	.word	0x08001329
 80012b4:	08001337 	.word	0x08001337
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 80012b8:	2303      	movs	r3, #3
 80012ba:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80012bc:	2307      	movs	r3, #7
 80012be:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80012c0:	2308      	movs	r3, #8
 80012c2:	757b      	strb	r3, [r7, #21]
      break;
 80012c4:	e03f      	b.n	8001346 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80012c6:	2309      	movs	r3, #9
 80012c8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80012ca:	230d      	movs	r3, #13
 80012cc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80012ce:	230e      	movs	r3, #14
 80012d0:	757b      	strb	r3, [r7, #21]
      break;
 80012d2:	e038      	b.n	8001346 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 80012d4:	230f      	movs	r3, #15
 80012d6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 80012d8:	2313      	movs	r3, #19
 80012da:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 80012dc:	2314      	movs	r3, #20
 80012de:	757b      	strb	r3, [r7, #21]
      break;
 80012e0:	e031      	b.n	8001346 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 80012e2:	2315      	movs	r3, #21
 80012e4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 80012e6:	2319      	movs	r3, #25
 80012e8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 80012ea:	231a      	movs	r3, #26
 80012ec:	757b      	strb	r3, [r7, #21]
      break;
 80012ee:	e02a      	b.n	8001346 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 80012f0:	231b      	movs	r3, #27
 80012f2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 80012f4:	231f      	movs	r3, #31
 80012f6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 80012f8:	2320      	movs	r3, #32
 80012fa:	757b      	strb	r3, [r7, #21]
      break;
 80012fc:	e023      	b.n	8001346 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 80012fe:	2321      	movs	r3, #33	; 0x21
 8001300:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8001302:	2325      	movs	r3, #37	; 0x25
 8001304:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8001306:	2326      	movs	r3, #38	; 0x26
 8001308:	757b      	strb	r3, [r7, #21]
      break;
 800130a:	e01c      	b.n	8001346 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 800130c:	2327      	movs	r3, #39	; 0x27
 800130e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8001310:	232b      	movs	r3, #43	; 0x2b
 8001312:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8001314:	232c      	movs	r3, #44	; 0x2c
 8001316:	757b      	strb	r3, [r7, #21]
      break;
 8001318:	e015      	b.n	8001346 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 800131a:	232d      	movs	r3, #45	; 0x2d
 800131c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 800131e:	2331      	movs	r3, #49	; 0x31
 8001320:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8001322:	2332      	movs	r3, #50	; 0x32
 8001324:	757b      	strb	r3, [r7, #21]
      break;
 8001326:	e00e      	b.n	8001346 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8001328:	2333      	movs	r3, #51	; 0x33
 800132a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 800132c:	2337      	movs	r3, #55	; 0x37
 800132e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8001330:	2338      	movs	r3, #56	; 0x38
 8001332:	757b      	strb	r3, [r7, #21]
      break;
 8001334:	e007      	b.n	8001346 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8001336:	2339      	movs	r3, #57	; 0x39
 8001338:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 800133a:	233d      	movs	r3, #61	; 0x3d
 800133c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 800133e:	233e      	movs	r3, #62	; 0x3e
 8001340:	757b      	strb	r3, [r7, #21]
      break;
 8001342:	e000      	b.n	8001346 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8001344:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001346:	89fb      	ldrh	r3, [r7, #14]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	7dfa      	ldrb	r2, [r7, #23]
 800134c:	4611      	mov	r1, r2
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f9d2 	bl	80016f8 <TS_IO_Read>
 8001354:	4603      	mov	r3, r0
 8001356:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8001358:	7d3b      	ldrb	r3, [r7, #20]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	119b      	asrs	r3, r3, #6
 800135e:	f003 0203 	and.w	r2, r3, #3
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8001366:	89fb      	ldrh	r3, [r7, #14]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	7dba      	ldrb	r2, [r7, #22]
 800136c:	4611      	mov	r1, r2
 800136e:	4618      	mov	r0, r3
 8001370:	f000 f9c2 	bl	80016f8 <TS_IO_Read>
 8001374:	4603      	mov	r3, r0
 8001376:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8001378:	7d3b      	ldrb	r3, [r7, #20]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	461a      	mov	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8001382:	89fb      	ldrh	r3, [r7, #14]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	7d7a      	ldrb	r2, [r7, #21]
 8001388:	4611      	mov	r1, r2
 800138a:	4618      	mov	r0, r3
 800138c:	f000 f9b4 	bl	80016f8 <TS_IO_Read>
 8001390:	4603      	mov	r3, r0
 8001392:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8001394:	7d3b      	ldrb	r3, [r7, #20]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	111b      	asrs	r3, r3, #4
 800139a:	f003 0204 	and.w	r2, r3, #4
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 80013a2:	bf00      	nop
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000130 	.word	0x20000130

080013b0 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80013b4:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <ft5336_Get_I2C_InitializedStatus+0x14>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000130 	.word	0x20000130

080013c8 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80013cc:	f7ff fff0 	bl	80013b0 <ft5336_Get_I2C_InitializedStatus>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d104      	bne.n	80013e0 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80013d6:	f000 f96b 	bl	80016b0 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80013da:	4b02      	ldr	r3, [pc, #8]	; (80013e4 <ft5336_I2C_InitializeIfRequired+0x1c>)
 80013dc:	2201      	movs	r2, #1
 80013de:	701a      	strb	r2, [r3, #0]
  }
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000130 	.word	0x20000130

080013e8 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80013f6:	68fb      	ldr	r3, [r7, #12]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08c      	sub	sp, #48	; 0x30
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a51      	ldr	r2, [pc, #324]	; (8001554 <I2Cx_MspInit+0x150>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d14d      	bne.n	80014b0 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001414:	4b50      	ldr	r3, [pc, #320]	; (8001558 <I2Cx_MspInit+0x154>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	4a4f      	ldr	r2, [pc, #316]	; (8001558 <I2Cx_MspInit+0x154>)
 800141a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800141e:	6313      	str	r3, [r2, #48]	; 0x30
 8001420:	4b4d      	ldr	r3, [pc, #308]	; (8001558 <I2Cx_MspInit+0x154>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001428:	61bb      	str	r3, [r7, #24]
 800142a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001430:	2312      	movs	r3, #18
 8001432:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001438:	2302      	movs	r3, #2
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800143c:	2304      	movs	r3, #4
 800143e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	4619      	mov	r1, r3
 8001446:	4845      	ldr	r0, [pc, #276]	; (800155c <I2Cx_MspInit+0x158>)
 8001448:	f003 fdc2 	bl	8004fd0 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800144c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001450:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	4619      	mov	r1, r3
 8001458:	4840      	ldr	r0, [pc, #256]	; (800155c <I2Cx_MspInit+0x158>)
 800145a:	f003 fdb9 	bl	8004fd0 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800145e:	4b3e      	ldr	r3, [pc, #248]	; (8001558 <I2Cx_MspInit+0x154>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	4a3d      	ldr	r2, [pc, #244]	; (8001558 <I2Cx_MspInit+0x154>)
 8001464:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001468:	6413      	str	r3, [r2, #64]	; 0x40
 800146a:	4b3b      	ldr	r3, [pc, #236]	; (8001558 <I2Cx_MspInit+0x154>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8001476:	4b38      	ldr	r3, [pc, #224]	; (8001558 <I2Cx_MspInit+0x154>)
 8001478:	6a1b      	ldr	r3, [r3, #32]
 800147a:	4a37      	ldr	r2, [pc, #220]	; (8001558 <I2Cx_MspInit+0x154>)
 800147c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001480:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8001482:	4b35      	ldr	r3, [pc, #212]	; (8001558 <I2Cx_MspInit+0x154>)
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	4a34      	ldr	r2, [pc, #208]	; (8001558 <I2Cx_MspInit+0x154>)
 8001488:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800148c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	210f      	movs	r1, #15
 8001492:	2048      	movs	r0, #72	; 0x48
 8001494:	f002 fd83 	bl	8003f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8001498:	2048      	movs	r0, #72	; 0x48
 800149a:	f002 fd9c 	bl	8003fd6 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	210f      	movs	r1, #15
 80014a2:	2049      	movs	r0, #73	; 0x49
 80014a4:	f002 fd7b 	bl	8003f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80014a8:	2049      	movs	r0, #73	; 0x49
 80014aa:	f002 fd94 	bl	8003fd6 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80014ae:	e04d      	b.n	800154c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80014b0:	4b29      	ldr	r3, [pc, #164]	; (8001558 <I2Cx_MspInit+0x154>)
 80014b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b4:	4a28      	ldr	r2, [pc, #160]	; (8001558 <I2Cx_MspInit+0x154>)
 80014b6:	f043 0302 	orr.w	r3, r3, #2
 80014ba:	6313      	str	r3, [r2, #48]	; 0x30
 80014bc:	4b26      	ldr	r3, [pc, #152]	; (8001558 <I2Cx_MspInit+0x154>)
 80014be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80014c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014cc:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80014ce:	2312      	movs	r3, #18
 80014d0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80014d6:	2302      	movs	r3, #2
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80014da:	2304      	movs	r3, #4
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	4619      	mov	r1, r3
 80014e4:	481e      	ldr	r0, [pc, #120]	; (8001560 <I2Cx_MspInit+0x15c>)
 80014e6:	f003 fd73 	bl	8004fd0 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80014ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	4619      	mov	r1, r3
 80014f6:	481a      	ldr	r0, [pc, #104]	; (8001560 <I2Cx_MspInit+0x15c>)
 80014f8:	f003 fd6a 	bl	8004fd0 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80014fc:	4b16      	ldr	r3, [pc, #88]	; (8001558 <I2Cx_MspInit+0x154>)
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	4a15      	ldr	r2, [pc, #84]	; (8001558 <I2Cx_MspInit+0x154>)
 8001502:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001506:	6413      	str	r3, [r2, #64]	; 0x40
 8001508:	4b13      	ldr	r3, [pc, #76]	; (8001558 <I2Cx_MspInit+0x154>)
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8001514:	4b10      	ldr	r3, [pc, #64]	; (8001558 <I2Cx_MspInit+0x154>)
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	4a0f      	ldr	r2, [pc, #60]	; (8001558 <I2Cx_MspInit+0x154>)
 800151a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800151e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8001520:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <I2Cx_MspInit+0x154>)
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	4a0c      	ldr	r2, [pc, #48]	; (8001558 <I2Cx_MspInit+0x154>)
 8001526:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800152a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800152c:	2200      	movs	r2, #0
 800152e:	210f      	movs	r1, #15
 8001530:	201f      	movs	r0, #31
 8001532:	f002 fd34 	bl	8003f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8001536:	201f      	movs	r0, #31
 8001538:	f002 fd4d 	bl	8003fd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800153c:	2200      	movs	r2, #0
 800153e:	210f      	movs	r1, #15
 8001540:	2020      	movs	r0, #32
 8001542:	f002 fd2c 	bl	8003f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8001546:	2020      	movs	r0, #32
 8001548:	f002 fd45 	bl	8003fd6 <HAL_NVIC_EnableIRQ>
}
 800154c:	bf00      	nop
 800154e:	3730      	adds	r7, #48	; 0x30
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000138 	.word	0x20000138
 8001558:	40023800 	.word	0x40023800
 800155c:	40021c00 	.word	0x40021c00
 8001560:	40020400 	.word	0x40020400

08001564 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f004 f9f5 	bl	800595c <HAL_I2C_GetState>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d125      	bne.n	80015c4 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a14      	ldr	r2, [pc, #80]	; (80015cc <I2Cx_Init+0x68>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d103      	bne.n	8001588 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a13      	ldr	r2, [pc, #76]	; (80015d0 <I2Cx_Init+0x6c>)
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	e002      	b.n	800158e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <I2Cx_Init+0x70>)
 800158c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a11      	ldr	r2, [pc, #68]	; (80015d8 <I2Cx_Init+0x74>)
 8001592:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2201      	movs	r2, #1
 800159e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff ff23 	bl	8001404 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f003 feca 	bl	8005358 <HAL_I2C_Init>
  }
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000138 	.word	0x20000138
 80015d0:	40005c00 	.word	0x40005c00
 80015d4:	40005400 	.word	0x40005400
 80015d8:	40912732 	.word	0x40912732

080015dc <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af04      	add	r7, sp, #16
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	4608      	mov	r0, r1
 80015e6:	4611      	mov	r1, r2
 80015e8:	461a      	mov	r2, r3
 80015ea:	4603      	mov	r3, r0
 80015ec:	72fb      	strb	r3, [r7, #11]
 80015ee:	460b      	mov	r3, r1
 80015f0:	813b      	strh	r3, [r7, #8]
 80015f2:	4613      	mov	r3, r2
 80015f4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80015fa:	7afb      	ldrb	r3, [r7, #11]
 80015fc:	b299      	uxth	r1, r3
 80015fe:	88f8      	ldrh	r0, [r7, #6]
 8001600:	893a      	ldrh	r2, [r7, #8]
 8001602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001606:	9302      	str	r3, [sp, #8]
 8001608:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800160a:	9301      	str	r3, [sp, #4]
 800160c:	6a3b      	ldr	r3, [r7, #32]
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	4603      	mov	r3, r0
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f004 f888 	bl	8005728 <HAL_I2C_Mem_Read>
 8001618:	4603      	mov	r3, r0
 800161a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800161c:	7dfb      	ldrb	r3, [r7, #23]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d004      	beq.n	800162c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001622:	7afb      	ldrb	r3, [r7, #11]
 8001624:	4619      	mov	r1, r3
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f000 f832 	bl	8001690 <I2Cx_Error>
  }
  return status;    
 800162c:	7dfb      	ldrb	r3, [r7, #23]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b08a      	sub	sp, #40	; 0x28
 800163a:	af04      	add	r7, sp, #16
 800163c:	60f8      	str	r0, [r7, #12]
 800163e:	4608      	mov	r0, r1
 8001640:	4611      	mov	r1, r2
 8001642:	461a      	mov	r2, r3
 8001644:	4603      	mov	r3, r0
 8001646:	72fb      	strb	r3, [r7, #11]
 8001648:	460b      	mov	r3, r1
 800164a:	813b      	strh	r3, [r7, #8]
 800164c:	4613      	mov	r3, r2
 800164e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001650:	2300      	movs	r3, #0
 8001652:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001654:	7afb      	ldrb	r3, [r7, #11]
 8001656:	b299      	uxth	r1, r3
 8001658:	88f8      	ldrh	r0, [r7, #6]
 800165a:	893a      	ldrh	r2, [r7, #8]
 800165c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001660:	9302      	str	r3, [sp, #8]
 8001662:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001664:	9301      	str	r3, [sp, #4]
 8001666:	6a3b      	ldr	r3, [r7, #32]
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	4603      	mov	r3, r0
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f003 ff47 	bl	8005500 <HAL_I2C_Mem_Write>
 8001672:	4603      	mov	r3, r0
 8001674:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001676:	7dfb      	ldrb	r3, [r7, #23]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d004      	beq.n	8001686 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800167c:	7afb      	ldrb	r3, [r7, #11]
 800167e:	4619      	mov	r1, r3
 8001680:	68f8      	ldr	r0, [r7, #12]
 8001682:	f000 f805 	bl	8001690 <I2Cx_Error>
  }
  return status;
 8001686:	7dfb      	ldrb	r3, [r7, #23]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f003 feeb 	bl	8005478 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff ff5e 	bl	8001564 <I2Cx_Init>
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80016b4:	4802      	ldr	r0, [pc, #8]	; (80016c0 <TS_IO_Init+0x10>)
 80016b6:	f7ff ff55 	bl	8001564 <I2Cx_Init>
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000138 	.word	0x20000138

080016c4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af02      	add	r7, sp, #8
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
 80016ce:	460b      	mov	r3, r1
 80016d0:	71bb      	strb	r3, [r7, #6]
 80016d2:	4613      	mov	r3, r2
 80016d4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80016d6:	79bb      	ldrb	r3, [r7, #6]
 80016d8:	b29a      	uxth	r2, r3
 80016da:	79f9      	ldrb	r1, [r7, #7]
 80016dc:	2301      	movs	r3, #1
 80016de:	9301      	str	r3, [sp, #4]
 80016e0:	1d7b      	adds	r3, r7, #5
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	2301      	movs	r3, #1
 80016e6:	4803      	ldr	r0, [pc, #12]	; (80016f4 <TS_IO_Write+0x30>)
 80016e8:	f7ff ffa5 	bl	8001636 <I2Cx_WriteMultiple>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000138 	.word	0x20000138

080016f8 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af02      	add	r7, sp, #8
 80016fe:	4603      	mov	r3, r0
 8001700:	460a      	mov	r2, r1
 8001702:	71fb      	strb	r3, [r7, #7]
 8001704:	4613      	mov	r3, r2
 8001706:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800170c:	79bb      	ldrb	r3, [r7, #6]
 800170e:	b29a      	uxth	r2, r3
 8001710:	79f9      	ldrb	r1, [r7, #7]
 8001712:	2301      	movs	r3, #1
 8001714:	9301      	str	r3, [sp, #4]
 8001716:	f107 030f 	add.w	r3, r7, #15
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	2301      	movs	r3, #1
 800171e:	4804      	ldr	r0, [pc, #16]	; (8001730 <TS_IO_Read+0x38>)
 8001720:	f7ff ff5c 	bl	80015dc <I2Cx_ReadMultiple>

  return read_value;
 8001724:	7bfb      	ldrb	r3, [r7, #15]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000138 	.word	0x20000138

08001734 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f001 fd25 	bl	800318c <HAL_Delay>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8001750:	4b31      	ldr	r3, [pc, #196]	; (8001818 <BSP_LCD_Init+0xcc>)
 8001752:	2228      	movs	r2, #40	; 0x28
 8001754:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8001756:	4b30      	ldr	r3, [pc, #192]	; (8001818 <BSP_LCD_Init+0xcc>)
 8001758:	2209      	movs	r2, #9
 800175a:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800175c:	4b2e      	ldr	r3, [pc, #184]	; (8001818 <BSP_LCD_Init+0xcc>)
 800175e:	2235      	movs	r2, #53	; 0x35
 8001760:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001762:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <BSP_LCD_Init+0xcc>)
 8001764:	220b      	movs	r2, #11
 8001766:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001768:	4b2b      	ldr	r3, [pc, #172]	; (8001818 <BSP_LCD_Init+0xcc>)
 800176a:	f240 121b 	movw	r2, #283	; 0x11b
 800176e:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001770:	4b29      	ldr	r3, [pc, #164]	; (8001818 <BSP_LCD_Init+0xcc>)
 8001772:	f240 2215 	movw	r2, #533	; 0x215
 8001776:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8001778:	4b27      	ldr	r3, [pc, #156]	; (8001818 <BSP_LCD_Init+0xcc>)
 800177a:	f240 121d 	movw	r2, #285	; 0x11d
 800177e:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8001780:	4b25      	ldr	r3, [pc, #148]	; (8001818 <BSP_LCD_Init+0xcc>)
 8001782:	f240 2235 	movw	r2, #565	; 0x235
 8001786:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8001788:	2100      	movs	r1, #0
 800178a:	4823      	ldr	r0, [pc, #140]	; (8001818 <BSP_LCD_Init+0xcc>)
 800178c:	f000 ff6a 	bl	8002664 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8001790:	4b21      	ldr	r3, [pc, #132]	; (8001818 <BSP_LCD_Init+0xcc>)
 8001792:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001796:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8001798:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <BSP_LCD_Init+0xcc>)
 800179a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800179e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80017a0:	4b1d      	ldr	r3, [pc, #116]	; (8001818 <BSP_LCD_Init+0xcc>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <BSP_LCD_Init+0xcc>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80017b0:	4b19      	ldr	r3, [pc, #100]	; (8001818 <BSP_LCD_Init+0xcc>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80017b8:	4b17      	ldr	r3, [pc, #92]	; (8001818 <BSP_LCD_Init+0xcc>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80017be:	4b16      	ldr	r3, [pc, #88]	; (8001818 <BSP_LCD_Init+0xcc>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80017c4:	4b14      	ldr	r3, [pc, #80]	; (8001818 <BSP_LCD_Init+0xcc>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80017ca:	4b13      	ldr	r3, [pc, #76]	; (8001818 <BSP_LCD_Init+0xcc>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <BSP_LCD_Init+0xcc>)
 80017d2:	4a12      	ldr	r2, [pc, #72]	; (800181c <BSP_LCD_Init+0xd0>)
 80017d4:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80017d6:	4810      	ldr	r0, [pc, #64]	; (8001818 <BSP_LCD_Init+0xcc>)
 80017d8:	f004 fcba 	bl	8006150 <HAL_LTDC_GetState>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d103      	bne.n	80017ea <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80017e2:	2100      	movs	r1, #0
 80017e4:	480c      	ldr	r0, [pc, #48]	; (8001818 <BSP_LCD_Init+0xcc>)
 80017e6:	f000 fe63 	bl	80024b0 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80017ea:	480b      	ldr	r0, [pc, #44]	; (8001818 <BSP_LCD_Init+0xcc>)
 80017ec:	f004 fae0 	bl	8005db0 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80017f0:	2201      	movs	r2, #1
 80017f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017f6:	480a      	ldr	r0, [pc, #40]	; (8001820 <BSP_LCD_Init+0xd4>)
 80017f8:	f003 fd94 	bl	8005324 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80017fc:	2201      	movs	r2, #1
 80017fe:	2108      	movs	r1, #8
 8001800:	4808      	ldr	r0, [pc, #32]	; (8001824 <BSP_LCD_Init+0xd8>)
 8001802:	f003 fd8f 	bl	8005324 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001806:	f001 f84d 	bl	80028a4 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800180a:	4807      	ldr	r0, [pc, #28]	; (8001828 <BSP_LCD_Init+0xdc>)
 800180c:	f000 f8d8 	bl	80019c0 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000358 	.word	0x20000358
 800181c:	40016800 	.word	0x40016800
 8001820:	40022000 	.word	0x40022000
 8001824:	40022800 	.word	0x40022800
 8001828:	20000028 	.word	0x20000028

0800182c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <BSP_LCD_GetXSize+0x20>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a06      	ldr	r2, [pc, #24]	; (8001850 <BSP_LCD_GetXSize+0x24>)
 8001836:	2134      	movs	r1, #52	; 0x34
 8001838:	fb01 f303 	mul.w	r3, r1, r3
 800183c:	4413      	add	r3, r2
 800183e:	3360      	adds	r3, #96	; 0x60
 8001840:	681b      	ldr	r3, [r3, #0]
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	200001c4 	.word	0x200001c4
 8001850:	20000358 	.word	0x20000358

08001854 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <BSP_LCD_GetYSize+0x20>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a06      	ldr	r2, [pc, #24]	; (8001878 <BSP_LCD_GetYSize+0x24>)
 800185e:	2134      	movs	r1, #52	; 0x34
 8001860:	fb01 f303 	mul.w	r3, r1, r3
 8001864:	4413      	add	r3, r2
 8001866:	3364      	adds	r3, #100	; 0x64
 8001868:	681b      	ldr	r3, [r3, #0]
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	200001c4 	.word	0x200001c4
 8001878:	20000358 	.word	0x20000358

0800187c <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800187c:	b580      	push	{r7, lr}
 800187e:	b090      	sub	sp, #64	; 0x40
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 800188c:	f7ff ffce 	bl	800182c <BSP_LCD_GetXSize>
 8001890:	4603      	mov	r3, r0
 8001892:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001898:	f7ff ffdc 	bl	8001854 <BSP_LCD_GetYSize>
 800189c:	4603      	mov	r3, r0
 800189e:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 80018a8:	23ff      	movs	r3, #255	; 0xff
 80018aa:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80018c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018c6:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80018c8:	2307      	movs	r3, #7
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80018cc:	f7ff ffae 	bl	800182c <BSP_LCD_GetXSize>
 80018d0:	4603      	mov	r3, r0
 80018d2:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80018d4:	f7ff ffbe 	bl	8001854 <BSP_LCD_GetYSize>
 80018d8:	4603      	mov	r3, r0
 80018da:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80018dc:	88fa      	ldrh	r2, [r7, #6]
 80018de:	f107 030c 	add.w	r3, r7, #12
 80018e2:	4619      	mov	r1, r3
 80018e4:	4812      	ldr	r0, [pc, #72]	; (8001930 <BSP_LCD_LayerDefaultInit+0xb4>)
 80018e6:	f004 fbf5 	bl	80060d4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80018ea:	88fa      	ldrh	r2, [r7, #6]
 80018ec:	4911      	ldr	r1, [pc, #68]	; (8001934 <BSP_LCD_LayerDefaultInit+0xb8>)
 80018ee:	4613      	mov	r3, r2
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	4413      	add	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	440b      	add	r3, r1
 80018f8:	3304      	adds	r3, #4
 80018fa:	f04f 32ff 	mov.w	r2, #4294967295
 80018fe:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001900:	88fa      	ldrh	r2, [r7, #6]
 8001902:	490c      	ldr	r1, [pc, #48]	; (8001934 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001904:	4613      	mov	r3, r2
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	4413      	add	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	3308      	adds	r3, #8
 8001910:	4a09      	ldr	r2, [pc, #36]	; (8001938 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001912:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001914:	88fa      	ldrh	r2, [r7, #6]
 8001916:	4907      	ldr	r1, [pc, #28]	; (8001934 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001918:	4613      	mov	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4413      	add	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001926:	601a      	str	r2, [r3, #0]
}
 8001928:	bf00      	nop
 800192a:	3740      	adds	r7, #64	; 0x40
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000358 	.word	0x20000358
 8001934:	200001c8 	.word	0x200001c8
 8001938:	20000028 	.word	0x20000028

0800193c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001944:	4a04      	ldr	r2, [pc, #16]	; (8001958 <BSP_LCD_SelectLayer+0x1c>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6013      	str	r3, [r2, #0]
} 
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	200001c4 	.word	0x200001c4

0800195c <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001964:	4b07      	ldr	r3, [pc, #28]	; (8001984 <BSP_LCD_SetTextColor+0x28>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4907      	ldr	r1, [pc, #28]	; (8001988 <BSP_LCD_SetTextColor+0x2c>)
 800196a:	4613      	mov	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4413      	add	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	440b      	add	r3, r1
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	601a      	str	r2, [r3, #0]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	200001c4 	.word	0x200001c4
 8001988:	200001c8 	.word	0x200001c8

0800198c <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <BSP_LCD_SetBackColor+0x2c>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4908      	ldr	r1, [pc, #32]	; (80019bc <BSP_LCD_SetBackColor+0x30>)
 800199a:	4613      	mov	r3, r2
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	4413      	add	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	440b      	add	r3, r1
 80019a4:	3304      	adds	r3, #4
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	601a      	str	r2, [r3, #0]
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	200001c4 	.word	0x200001c4
 80019bc:	200001c8 	.word	0x200001c8

080019c0 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <BSP_LCD_SetFont+0x2c>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4908      	ldr	r1, [pc, #32]	; (80019f0 <BSP_LCD_SetFont+0x30>)
 80019ce:	4613      	mov	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4413      	add	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	440b      	add	r3, r1
 80019d8:	3308      	adds	r3, #8
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	601a      	str	r2, [r3, #0]
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	200001c4 	.word	0x200001c4
 80019f0:	200001c8 	.word	0x200001c8

080019f4 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80019f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af02      	add	r7, sp, #8
 80019fa:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <BSP_LCD_Clear+0x48>)
 80019fe:	681c      	ldr	r4, [r3, #0]
 8001a00:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <BSP_LCD_Clear+0x48>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a0e      	ldr	r2, [pc, #56]	; (8001a40 <BSP_LCD_Clear+0x4c>)
 8001a06:	2134      	movs	r1, #52	; 0x34
 8001a08:	fb01 f303 	mul.w	r3, r1, r3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	335c      	adds	r3, #92	; 0x5c
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	461d      	mov	r5, r3
 8001a14:	f7ff ff0a 	bl	800182c <BSP_LCD_GetXSize>
 8001a18:	4606      	mov	r6, r0
 8001a1a:	f7ff ff1b 	bl	8001854 <BSP_LCD_GetYSize>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	9301      	str	r3, [sp, #4]
 8001a24:	2300      	movs	r3, #0
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	4632      	mov	r2, r6
 8001a2c:	4629      	mov	r1, r5
 8001a2e:	4620      	mov	r0, r4
 8001a30:	f000 feec 	bl	800280c <LL_FillBuffer>
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a3c:	200001c4 	.word	0x200001c4
 8001a40:	20000358 	.word	0x20000358

08001a44 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	80fb      	strh	r3, [r7, #6]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	80bb      	strh	r3, [r7, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001a56:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <BSP_LCD_DisplayChar+0x80>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	491b      	ldr	r1, [pc, #108]	; (8001ac8 <BSP_LCD_DisplayChar+0x84>)
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4413      	add	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	3308      	adds	r3, #8
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6819      	ldr	r1, [r3, #0]
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001a72:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <BSP_LCD_DisplayChar+0x80>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	4c14      	ldr	r4, [pc, #80]	; (8001ac8 <BSP_LCD_DisplayChar+0x84>)
 8001a78:	4613      	mov	r3, r2
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	4413      	add	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4423      	add	r3, r4
 8001a82:	3308      	adds	r3, #8
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001a88:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001a8c:	4b0d      	ldr	r3, [pc, #52]	; (8001ac4 <BSP_LCD_DisplayChar+0x80>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4c0d      	ldr	r4, [pc, #52]	; (8001ac8 <BSP_LCD_DisplayChar+0x84>)
 8001a92:	4613      	mov	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4423      	add	r3, r4
 8001a9c:	3308      	adds	r3, #8
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	889b      	ldrh	r3, [r3, #4]
 8001aa2:	3307      	adds	r3, #7
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	da00      	bge.n	8001aaa <BSP_LCD_DisplayChar+0x66>
 8001aa8:	3307      	adds	r3, #7
 8001aaa:	10db      	asrs	r3, r3, #3
 8001aac:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001ab0:	18ca      	adds	r2, r1, r3
 8001ab2:	88b9      	ldrh	r1, [r7, #4]
 8001ab4:	88fb      	ldrh	r3, [r7, #6]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 fdf0 	bl	800269c <DrawChar>
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd90      	pop	{r4, r7, pc}
 8001ac4:	200001c4 	.word	0x200001c4
 8001ac8:	200001c8 	.word	0x200001c8

08001acc <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001acc:	b5b0      	push	{r4, r5, r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60ba      	str	r2, [r7, #8]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	81fb      	strh	r3, [r7, #14]
 8001ada:	460b      	mov	r3, r1
 8001adc:	81bb      	strh	r3, [r7, #12]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	83fb      	strh	r3, [r7, #30]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001aea:	2300      	movs	r3, #0
 8001aec:	61bb      	str	r3, [r7, #24]
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8001af6:	e002      	b.n	8001afe <BSP_LCD_DisplayStringAt+0x32>
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	3301      	adds	r3, #1
 8001afc:	61bb      	str	r3, [r7, #24]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	1c5a      	adds	r2, r3, #1
 8001b02:	617a      	str	r2, [r7, #20]
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f6      	bne.n	8001af8 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001b0a:	f7ff fe8f 	bl	800182c <BSP_LCD_GetXSize>
 8001b0e:	4b4f      	ldr	r3, [pc, #316]	; (8001c4c <BSP_LCD_DisplayStringAt+0x180>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	494f      	ldr	r1, [pc, #316]	; (8001c50 <BSP_LCD_DisplayStringAt+0x184>)
 8001b14:	4613      	mov	r3, r2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	4413      	add	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	3308      	adds	r3, #8
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	889b      	ldrh	r3, [r3, #4]
 8001b24:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b28:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d01c      	beq.n	8001b6a <BSP_LCD_DisplayStringAt+0x9e>
 8001b30:	2b03      	cmp	r3, #3
 8001b32:	d017      	beq.n	8001b64 <BSP_LCD_DisplayStringAt+0x98>
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d12e      	bne.n	8001b96 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	1ad1      	subs	r1, r2, r3
 8001b3e:	4b43      	ldr	r3, [pc, #268]	; (8001c4c <BSP_LCD_DisplayStringAt+0x180>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	4843      	ldr	r0, [pc, #268]	; (8001c50 <BSP_LCD_DisplayStringAt+0x184>)
 8001b44:	4613      	mov	r3, r2
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	4413      	add	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4403      	add	r3, r0
 8001b4e:	3308      	adds	r3, #8
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	889b      	ldrh	r3, [r3, #4]
 8001b54:	fb03 f301 	mul.w	r3, r3, r1
 8001b58:	085b      	lsrs	r3, r3, #1
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	89fb      	ldrh	r3, [r7, #14]
 8001b5e:	4413      	add	r3, r2
 8001b60:	83fb      	strh	r3, [r7, #30]
      break;
 8001b62:	e01b      	b.n	8001b9c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8001b64:	89fb      	ldrh	r3, [r7, #14]
 8001b66:	83fb      	strh	r3, [r7, #30]
      break;
 8001b68:	e018      	b.n	8001b9c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	b299      	uxth	r1, r3
 8001b72:	4b36      	ldr	r3, [pc, #216]	; (8001c4c <BSP_LCD_DisplayStringAt+0x180>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	4836      	ldr	r0, [pc, #216]	; (8001c50 <BSP_LCD_DisplayStringAt+0x184>)
 8001b78:	4613      	mov	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4403      	add	r3, r0
 8001b82:	3308      	adds	r3, #8
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	889b      	ldrh	r3, [r3, #4]
 8001b88:	fb11 f303 	smulbb	r3, r1, r3
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	89fb      	ldrh	r3, [r7, #14]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	83fb      	strh	r3, [r7, #30]
      break;
 8001b94:	e002      	b.n	8001b9c <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 8001b96:	89fb      	ldrh	r3, [r7, #14]
 8001b98:	83fb      	strh	r3, [r7, #30]
      break;
 8001b9a:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8001b9c:	8bfb      	ldrh	r3, [r7, #30]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <BSP_LCD_DisplayStringAt+0xde>
 8001ba2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	da1d      	bge.n	8001be6 <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8001baa:	2301      	movs	r3, #1
 8001bac:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001bae:	e01a      	b.n	8001be6 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	781a      	ldrb	r2, [r3, #0]
 8001bb4:	89b9      	ldrh	r1, [r7, #12]
 8001bb6:	8bfb      	ldrh	r3, [r7, #30]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff43 	bl	8001a44 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8001bbe:	4b23      	ldr	r3, [pc, #140]	; (8001c4c <BSP_LCD_DisplayStringAt+0x180>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	4923      	ldr	r1, [pc, #140]	; (8001c50 <BSP_LCD_DisplayStringAt+0x184>)
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4413      	add	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	3308      	adds	r3, #8
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	889a      	ldrh	r2, [r3, #4]
 8001bd4:	8bfb      	ldrh	r3, [r7, #30]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	60bb      	str	r3, [r7, #8]
    i++;
 8001be0:	8bbb      	ldrh	r3, [r7, #28]
 8001be2:	3301      	adds	r3, #1
 8001be4:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	bf14      	ite	ne
 8001bee:	2301      	movne	r3, #1
 8001bf0:	2300      	moveq	r3, #0
 8001bf2:	b2dc      	uxtb	r4, r3
 8001bf4:	f7ff fe1a 	bl	800182c <BSP_LCD_GetXSize>
 8001bf8:	4605      	mov	r5, r0
 8001bfa:	8bb9      	ldrh	r1, [r7, #28]
 8001bfc:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <BSP_LCD_DisplayStringAt+0x180>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4813      	ldr	r0, [pc, #76]	; (8001c50 <BSP_LCD_DisplayStringAt+0x184>)
 8001c02:	4613      	mov	r3, r2
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	4413      	add	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4403      	add	r3, r0
 8001c0c:	3308      	adds	r3, #8
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	889b      	ldrh	r3, [r3, #4]
 8001c12:	fb03 f301 	mul.w	r3, r3, r1
 8001c16:	1aeb      	subs	r3, r5, r3
 8001c18:	b299      	uxth	r1, r3
 8001c1a:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <BSP_LCD_DisplayStringAt+0x180>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	480c      	ldr	r0, [pc, #48]	; (8001c50 <BSP_LCD_DisplayStringAt+0x184>)
 8001c20:	4613      	mov	r3, r2
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	4413      	add	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4403      	add	r3, r0
 8001c2a:	3308      	adds	r3, #8
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	889b      	ldrh	r3, [r3, #4]
 8001c30:	4299      	cmp	r1, r3
 8001c32:	bf2c      	ite	cs
 8001c34:	2301      	movcs	r3, #1
 8001c36:	2300      	movcc	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	4023      	ands	r3, r4
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1b6      	bne.n	8001bb0 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 8001c42:	bf00      	nop
 8001c44:	3720      	adds	r7, #32
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bdb0      	pop	{r4, r5, r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200001c4 	.word	0x200001c4
 8001c50:	200001c8 	.word	0x200001c8

08001c54 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001c54:	b5b0      	push	{r4, r5, r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af02      	add	r7, sp, #8
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	80fb      	strh	r3, [r7, #6]
 8001c5e:	460b      	mov	r3, r1
 8001c60:	80bb      	strh	r3, [r7, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001c6a:	4b26      	ldr	r3, [pc, #152]	; (8001d04 <BSP_LCD_DrawHLine+0xb0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a26      	ldr	r2, [pc, #152]	; (8001d08 <BSP_LCD_DrawHLine+0xb4>)
 8001c70:	2134      	movs	r1, #52	; 0x34
 8001c72:	fb01 f303 	mul.w	r3, r1, r3
 8001c76:	4413      	add	r3, r2
 8001c78:	3348      	adds	r3, #72	; 0x48
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d114      	bne.n	8001caa <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001c80:	4b20      	ldr	r3, [pc, #128]	; (8001d04 <BSP_LCD_DrawHLine+0xb0>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a20      	ldr	r2, [pc, #128]	; (8001d08 <BSP_LCD_DrawHLine+0xb4>)
 8001c86:	2134      	movs	r1, #52	; 0x34
 8001c88:	fb01 f303 	mul.w	r3, r1, r3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	335c      	adds	r3, #92	; 0x5c
 8001c90:	681c      	ldr	r4, [r3, #0]
 8001c92:	f7ff fdcb 	bl	800182c <BSP_LCD_GetXSize>
 8001c96:	4602      	mov	r2, r0
 8001c98:	88bb      	ldrh	r3, [r7, #4]
 8001c9a:	fb03 f202 	mul.w	r2, r3, r2
 8001c9e:	88fb      	ldrh	r3, [r7, #6]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4423      	add	r3, r4
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	e013      	b.n	8001cd2 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001caa:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <BSP_LCD_DrawHLine+0xb0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a16      	ldr	r2, [pc, #88]	; (8001d08 <BSP_LCD_DrawHLine+0xb4>)
 8001cb0:	2134      	movs	r1, #52	; 0x34
 8001cb2:	fb01 f303 	mul.w	r3, r1, r3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	335c      	adds	r3, #92	; 0x5c
 8001cba:	681c      	ldr	r4, [r3, #0]
 8001cbc:	f7ff fdb6 	bl	800182c <BSP_LCD_GetXSize>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	88bb      	ldrh	r3, [r7, #4]
 8001cc4:	fb03 f202 	mul.w	r2, r3, r2
 8001cc8:	88fb      	ldrh	r3, [r7, #6]
 8001cca:	4413      	add	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4423      	add	r3, r4
 8001cd0:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <BSP_LCD_DrawHLine+0xb0>)
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	68fc      	ldr	r4, [r7, #12]
 8001cd8:	887d      	ldrh	r5, [r7, #2]
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <BSP_LCD_DrawHLine+0xb0>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	490b      	ldr	r1, [pc, #44]	; (8001d0c <BSP_LCD_DrawHLine+0xb8>)
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	9301      	str	r3, [sp, #4]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	462a      	mov	r2, r5
 8001cf6:	4621      	mov	r1, r4
 8001cf8:	f000 fd88 	bl	800280c <LL_FillBuffer>
}
 8001cfc:	bf00      	nop
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bdb0      	pop	{r4, r5, r7, pc}
 8001d04:	200001c4 	.word	0x200001c4
 8001d08:	20000358 	.word	0x20000358
 8001d0c:	200001c8 	.word	0x200001c8

08001d10 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af02      	add	r7, sp, #8
 8001d16:	4603      	mov	r3, r0
 8001d18:	80fb      	strh	r3, [r7, #6]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	80bb      	strh	r3, [r7, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001d26:	4b28      	ldr	r3, [pc, #160]	; (8001dc8 <BSP_LCD_DrawVLine+0xb8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a28      	ldr	r2, [pc, #160]	; (8001dcc <BSP_LCD_DrawVLine+0xbc>)
 8001d2c:	2134      	movs	r1, #52	; 0x34
 8001d2e:	fb01 f303 	mul.w	r3, r1, r3
 8001d32:	4413      	add	r3, r2
 8001d34:	3348      	adds	r3, #72	; 0x48
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d114      	bne.n	8001d66 <BSP_LCD_DrawVLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001d3c:	4b22      	ldr	r3, [pc, #136]	; (8001dc8 <BSP_LCD_DrawVLine+0xb8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a22      	ldr	r2, [pc, #136]	; (8001dcc <BSP_LCD_DrawVLine+0xbc>)
 8001d42:	2134      	movs	r1, #52	; 0x34
 8001d44:	fb01 f303 	mul.w	r3, r1, r3
 8001d48:	4413      	add	r3, r2
 8001d4a:	335c      	adds	r3, #92	; 0x5c
 8001d4c:	681c      	ldr	r4, [r3, #0]
 8001d4e:	f7ff fd6d 	bl	800182c <BSP_LCD_GetXSize>
 8001d52:	4602      	mov	r2, r0
 8001d54:	88bb      	ldrh	r3, [r7, #4]
 8001d56:	fb03 f202 	mul.w	r2, r3, r2
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4423      	add	r3, r4
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	e013      	b.n	8001d8e <BSP_LCD_DrawVLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001d66:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <BSP_LCD_DrawVLine+0xb8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a18      	ldr	r2, [pc, #96]	; (8001dcc <BSP_LCD_DrawVLine+0xbc>)
 8001d6c:	2134      	movs	r1, #52	; 0x34
 8001d6e:	fb01 f303 	mul.w	r3, r1, r3
 8001d72:	4413      	add	r3, r2
 8001d74:	335c      	adds	r3, #92	; 0x5c
 8001d76:	681c      	ldr	r4, [r3, #0]
 8001d78:	f7ff fd58 	bl	800182c <BSP_LCD_GetXSize>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	88bb      	ldrh	r3, [r7, #4]
 8001d80:	fb03 f202 	mul.w	r2, r3, r2
 8001d84:	88fb      	ldrh	r3, [r7, #6]
 8001d86:	4413      	add	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4423      	add	r3, r4
 8001d8c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <BSP_LCD_DrawVLine+0xb8>)
 8001d90:	681c      	ldr	r4, [r3, #0]
 8001d92:	68fd      	ldr	r5, [r7, #12]
 8001d94:	887e      	ldrh	r6, [r7, #2]
 8001d96:	f7ff fd49 	bl	800182c <BSP_LCD_GetXSize>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	1e59      	subs	r1, r3, #1
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <BSP_LCD_DrawVLine+0xb8>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	480b      	ldr	r0, [pc, #44]	; (8001dd0 <BSP_LCD_DrawVLine+0xc0>)
 8001da4:	4613      	mov	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	4413      	add	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4403      	add	r3, r0
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	9301      	str	r3, [sp, #4]
 8001db2:	9100      	str	r1, [sp, #0]
 8001db4:	4633      	mov	r3, r6
 8001db6:	2201      	movs	r2, #1
 8001db8:	4629      	mov	r1, r5
 8001dba:	4620      	mov	r0, r4
 8001dbc:	f000 fd26 	bl	800280c <LL_FillBuffer>
}
 8001dc0:	bf00      	nop
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dc8:	200001c4 	.word	0x200001c4
 8001dcc:	20000358 	.word	0x20000358
 8001dd0:	200001c8 	.word	0x200001c8

08001dd4 <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8001dd4:	b590      	push	{r4, r7, lr}
 8001dd6:	b08b      	sub	sp, #44	; 0x2c
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4604      	mov	r4, r0
 8001ddc:	4608      	mov	r0, r1
 8001dde:	4611      	mov	r1, r2
 8001de0:	461a      	mov	r2, r3
 8001de2:	4623      	mov	r3, r4
 8001de4:	80fb      	strh	r3, [r7, #6]
 8001de6:	4603      	mov	r3, r0
 8001de8:	80bb      	strh	r3, [r7, #4]
 8001dea:	460b      	mov	r3, r1
 8001dec:	807b      	strh	r3, [r7, #2]
 8001dee:	4613      	mov	r3, r2
 8001df0:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8001df2:	2300      	movs	r3, #0
 8001df4:	823b      	strh	r3, [r7, #16]
 8001df6:	2300      	movs	r3, #0
 8001df8:	81fb      	strh	r3, [r7, #14]
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001dfe:	2300      	movs	r3, #0
 8001e00:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001e02:	2300      	movs	r3, #0
 8001e04:	847b      	strh	r3, [r7, #34]	; 0x22
 8001e06:	2300      	movs	r3, #0
 8001e08:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	83fb      	strh	r3, [r7, #30]
 8001e0e:	2300      	movs	r3, #0
 8001e10:	83bb      	strh	r3, [r7, #28]
 8001e12:	2300      	movs	r3, #0
 8001e14:	837b      	strh	r3, [r7, #26]
 8001e16:	2300      	movs	r3, #0
 8001e18:	833b      	strh	r3, [r7, #24]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	82fb      	strh	r3, [r7, #22]
 8001e1e:	2300      	movs	r3, #0
 8001e20:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8001e26:	887a      	ldrh	r2, [r7, #2]
 8001e28:	88fb      	ldrh	r3, [r7, #6]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	bfb8      	it	lt
 8001e30:	425b      	neglt	r3, r3
 8001e32:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8001e34:	883a      	ldrh	r2, [r7, #0]
 8001e36:	88bb      	ldrh	r3, [r7, #4]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	bfb8      	it	lt
 8001e3e:	425b      	neglt	r3, r3
 8001e40:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8001e42:	88fb      	ldrh	r3, [r7, #6]
 8001e44:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8001e46:	88bb      	ldrh	r3, [r7, #4]
 8001e48:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8001e4a:	887a      	ldrh	r2, [r7, #2]
 8001e4c:	88fb      	ldrh	r3, [r7, #6]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d304      	bcc.n	8001e5c <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8001e52:	2301      	movs	r3, #1
 8001e54:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8001e56:	2301      	movs	r3, #1
 8001e58:	843b      	strh	r3, [r7, #32]
 8001e5a:	e005      	b.n	8001e68 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8001e5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e60:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8001e62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e66:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8001e68:	883a      	ldrh	r2, [r7, #0]
 8001e6a:	88bb      	ldrh	r3, [r7, #4]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d304      	bcc.n	8001e7a <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8001e70:	2301      	movs	r3, #1
 8001e72:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8001e74:	2301      	movs	r3, #1
 8001e76:	83bb      	strh	r3, [r7, #28]
 8001e78:	e005      	b.n	8001e86 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8001e7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e7e:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8001e80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e84:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8001e86:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001e8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	db11      	blt.n	8001eb6 <BSP_LCD_DrawLine+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8001e92:	2300      	movs	r3, #0
 8001e94:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8001e96:	2300      	movs	r3, #0
 8001e98:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8001e9a:	8a3b      	ldrh	r3, [r7, #16]
 8001e9c:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8001e9e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	da00      	bge.n	8001ea8 <BSP_LCD_DrawLine+0xd4>
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	105b      	asrs	r3, r3, #1
 8001eaa:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 8001eac:	89fb      	ldrh	r3, [r7, #14]
 8001eae:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 8001eb0:	8a3b      	ldrh	r3, [r7, #16]
 8001eb2:	82bb      	strh	r3, [r7, #20]
 8001eb4:	e010      	b.n	8001ed8 <BSP_LCD_DrawLine+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8001eba:	2300      	movs	r3, #0
 8001ebc:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8001ebe:	89fb      	ldrh	r3, [r7, #14]
 8001ec0:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8001ec2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	da00      	bge.n	8001ecc <BSP_LCD_DrawLine+0xf8>
 8001eca:	3301      	adds	r3, #1
 8001ecc:	105b      	asrs	r3, r3, #1
 8001ece:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 8001ed0:	8a3b      	ldrh	r3, [r7, #16]
 8001ed2:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 8001ed4:	89fb      	ldrh	r3, [r7, #14]
 8001ed6:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8001ed8:	2300      	movs	r3, #0
 8001eda:	827b      	strh	r3, [r7, #18]
 8001edc:	e038      	b.n	8001f50 <BSP_LCD_DrawLine+0x17c>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8001ede:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001ee0:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 8001ee2:	4b20      	ldr	r3, [pc, #128]	; (8001f64 <BSP_LCD_DrawLine+0x190>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	4920      	ldr	r1, [pc, #128]	; (8001f68 <BSP_LCD_DrawLine+0x194>)
 8001ee8:	4613      	mov	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4621      	mov	r1, r4
 8001ef8:	f000 f95a 	bl	80021b0 <BSP_LCD_DrawPixel>
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8001efc:	8b3a      	ldrh	r2, [r7, #24]
 8001efe:	8afb      	ldrh	r3, [r7, #22]
 8001f00:	4413      	add	r3, r2
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8001f06:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001f0a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	db0e      	blt.n	8001f30 <BSP_LCD_DrawLine+0x15c>
    {
      num -= den;                             /* Calculate the new numerator value */
 8001f12:	8b3a      	ldrh	r2, [r7, #24]
 8001f14:	8b7b      	ldrh	r3, [r7, #26]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8001f1c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001f1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f20:	4413      	add	r3, r2
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8001f26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f28:	8bfb      	ldrh	r3, [r7, #30]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8001f30:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001f32:	8c3b      	ldrh	r3, [r7, #32]
 8001f34:	4413      	add	r3, r2
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8001f3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f3c:	8bbb      	ldrh	r3, [r7, #28]
 8001f3e:	4413      	add	r3, r2
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8001f44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	827b      	strh	r3, [r7, #18]
 8001f50:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001f54:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	ddc0      	ble.n	8001ede <BSP_LCD_DrawLine+0x10a>
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	372c      	adds	r7, #44	; 0x2c
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd90      	pop	{r4, r7, pc}
 8001f64:	200001c4 	.word	0x200001c4
 8001f68:	200001c8 	.word	0x200001c8

08001f6c <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001f6c:	b590      	push	{r4, r7, lr}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4604      	mov	r4, r0
 8001f74:	4608      	mov	r0, r1
 8001f76:	4611      	mov	r1, r2
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4623      	mov	r3, r4
 8001f7c:	80fb      	strh	r3, [r7, #6]
 8001f7e:	4603      	mov	r3, r0
 8001f80:	80bb      	strh	r3, [r7, #4]
 8001f82:	460b      	mov	r3, r1
 8001f84:	807b      	strh	r3, [r7, #2]
 8001f86:	4613      	mov	r3, r2
 8001f88:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8001f8a:	887a      	ldrh	r2, [r7, #2]
 8001f8c:	88b9      	ldrh	r1, [r7, #4]
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff fe5f 	bl	8001c54 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8001f96:	88ba      	ldrh	r2, [r7, #4]
 8001f98:	883b      	ldrh	r3, [r7, #0]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	b299      	uxth	r1, r3
 8001f9e:	887a      	ldrh	r2, [r7, #2]
 8001fa0:	88fb      	ldrh	r3, [r7, #6]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fe56 	bl	8001c54 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8001fa8:	883a      	ldrh	r2, [r7, #0]
 8001faa:	88b9      	ldrh	r1, [r7, #4]
 8001fac:	88fb      	ldrh	r3, [r7, #6]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff feae 	bl	8001d10 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8001fb4:	88fa      	ldrh	r2, [r7, #6]
 8001fb6:	887b      	ldrh	r3, [r7, #2]
 8001fb8:	4413      	add	r3, r2
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	883a      	ldrh	r2, [r7, #0]
 8001fbe:	88b9      	ldrh	r1, [r7, #4]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff fea5 	bl	8001d10 <BSP_LCD_DrawVLine>
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd90      	pop	{r4, r7, pc}
	...

08001fd0 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001fd0:	b590      	push	{r4, r7, lr}
 8001fd2:	b087      	sub	sp, #28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	80fb      	strh	r3, [r7, #6]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	80bb      	strh	r3, [r7, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8001fe2:	887b      	ldrh	r3, [r7, #2]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	f1c3 0303 	rsb	r3, r3, #3
 8001fea:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8001ff0:	887b      	ldrh	r3, [r7, #2]
 8001ff2:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8001ff4:	e0cf      	b.n	8002196 <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	88fb      	ldrh	r3, [r7, #6]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	b298      	uxth	r0, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	b29b      	uxth	r3, r3
 8002004:	88ba      	ldrh	r2, [r7, #4]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	b29c      	uxth	r4, r3
 800200a:	4b67      	ldr	r3, [pc, #412]	; (80021a8 <BSP_LCD_DrawCircle+0x1d8>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	4967      	ldr	r1, [pc, #412]	; (80021ac <BSP_LCD_DrawCircle+0x1dc>)
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	461a      	mov	r2, r3
 800201e:	4621      	mov	r1, r4
 8002020:	f000 f8c6 	bl	80021b0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	b29b      	uxth	r3, r3
 8002028:	88fa      	ldrh	r2, [r7, #6]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	b298      	uxth	r0, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	b29b      	uxth	r3, r3
 8002032:	88ba      	ldrh	r2, [r7, #4]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	b29c      	uxth	r4, r3
 8002038:	4b5b      	ldr	r3, [pc, #364]	; (80021a8 <BSP_LCD_DrawCircle+0x1d8>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	495b      	ldr	r1, [pc, #364]	; (80021ac <BSP_LCD_DrawCircle+0x1dc>)
 800203e:	4613      	mov	r3, r2
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	4621      	mov	r1, r4
 800204e:	f000 f8af 	bl	80021b0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	b29a      	uxth	r2, r3
 8002056:	88fb      	ldrh	r3, [r7, #6]
 8002058:	4413      	add	r3, r2
 800205a:	b298      	uxth	r0, r3
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	b29b      	uxth	r3, r3
 8002060:	88ba      	ldrh	r2, [r7, #4]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	b29c      	uxth	r4, r3
 8002066:	4b50      	ldr	r3, [pc, #320]	; (80021a8 <BSP_LCD_DrawCircle+0x1d8>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	4950      	ldr	r1, [pc, #320]	; (80021ac <BSP_LCD_DrawCircle+0x1dc>)
 800206c:	4613      	mov	r3, r2
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	4413      	add	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	461a      	mov	r2, r3
 800207a:	4621      	mov	r1, r4
 800207c:	f000 f898 	bl	80021b0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	b29b      	uxth	r3, r3
 8002084:	88fa      	ldrh	r2, [r7, #6]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	b298      	uxth	r0, r3
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	b29b      	uxth	r3, r3
 800208e:	88ba      	ldrh	r2, [r7, #4]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	b29c      	uxth	r4, r3
 8002094:	4b44      	ldr	r3, [pc, #272]	; (80021a8 <BSP_LCD_DrawCircle+0x1d8>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4944      	ldr	r1, [pc, #272]	; (80021ac <BSP_LCD_DrawCircle+0x1dc>)
 800209a:	4613      	mov	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	4621      	mov	r1, r4
 80020aa:	f000 f881 	bl	80021b0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	88fb      	ldrh	r3, [r7, #6]
 80020b4:	4413      	add	r3, r2
 80020b6:	b298      	uxth	r0, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	88bb      	ldrh	r3, [r7, #4]
 80020be:	4413      	add	r3, r2
 80020c0:	b29c      	uxth	r4, r3
 80020c2:	4b39      	ldr	r3, [pc, #228]	; (80021a8 <BSP_LCD_DrawCircle+0x1d8>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	4939      	ldr	r1, [pc, #228]	; (80021ac <BSP_LCD_DrawCircle+0x1dc>)
 80020c8:	4613      	mov	r3, r2
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	4413      	add	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	4621      	mov	r1, r4
 80020d8:	f000 f86a 	bl	80021b0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	88fa      	ldrh	r2, [r7, #6]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	b298      	uxth	r0, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	88bb      	ldrh	r3, [r7, #4]
 80020ec:	4413      	add	r3, r2
 80020ee:	b29c      	uxth	r4, r3
 80020f0:	4b2d      	ldr	r3, [pc, #180]	; (80021a8 <BSP_LCD_DrawCircle+0x1d8>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	492d      	ldr	r1, [pc, #180]	; (80021ac <BSP_LCD_DrawCircle+0x1dc>)
 80020f6:	4613      	mov	r3, r2
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	4621      	mov	r1, r4
 8002106:	f000 f853 	bl	80021b0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	b29a      	uxth	r2, r3
 800210e:	88fb      	ldrh	r3, [r7, #6]
 8002110:	4413      	add	r3, r2
 8002112:	b298      	uxth	r0, r3
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	b29a      	uxth	r2, r3
 8002118:	88bb      	ldrh	r3, [r7, #4]
 800211a:	4413      	add	r3, r2
 800211c:	b29c      	uxth	r4, r3
 800211e:	4b22      	ldr	r3, [pc, #136]	; (80021a8 <BSP_LCD_DrawCircle+0x1d8>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	4922      	ldr	r1, [pc, #136]	; (80021ac <BSP_LCD_DrawCircle+0x1dc>)
 8002124:	4613      	mov	r3, r2
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	4413      	add	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	461a      	mov	r2, r3
 8002132:	4621      	mov	r1, r4
 8002134:	f000 f83c 	bl	80021b0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	b29b      	uxth	r3, r3
 800213c:	88fa      	ldrh	r2, [r7, #6]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	b298      	uxth	r0, r3
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	b29a      	uxth	r2, r3
 8002146:	88bb      	ldrh	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	b29c      	uxth	r4, r3
 800214c:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <BSP_LCD_DrawCircle+0x1d8>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4916      	ldr	r1, [pc, #88]	; (80021ac <BSP_LCD_DrawCircle+0x1dc>)
 8002152:	4613      	mov	r3, r2
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	4413      	add	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	440b      	add	r3, r1
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	4621      	mov	r1, r4
 8002162:	f000 f825 	bl	80021b0 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2b00      	cmp	r3, #0
 800216a:	da06      	bge.n	800217a <BSP_LCD_DrawCircle+0x1aa>
    { 
      decision += (current_x << 2) + 6;
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	009a      	lsls	r2, r3, #2
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	4413      	add	r3, r2
 8002174:	3306      	adds	r3, #6
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	e00a      	b.n	8002190 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	009a      	lsls	r2, r3, #2
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	4413      	add	r3, r2
 8002186:	330a      	adds	r3, #10
 8002188:	617b      	str	r3, [r7, #20]
      current_y--;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	3b01      	subs	r3, #1
 800218e:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	3301      	adds	r3, #1
 8002194:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	429a      	cmp	r2, r3
 800219c:	f67f af2b 	bls.w	8001ff6 <BSP_LCD_DrawCircle+0x26>
  } 
}
 80021a0:	bf00      	nop
 80021a2:	371c      	adds	r7, #28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd90      	pop	{r4, r7, pc}
 80021a8:	200001c4 	.word	0x200001c4
 80021ac:	200001c8 	.word	0x200001c8

080021b0 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80021b0:	b5b0      	push	{r4, r5, r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	603a      	str	r2, [r7, #0]
 80021ba:	80fb      	strh	r3, [r7, #6]
 80021bc:	460b      	mov	r3, r1
 80021be:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80021c0:	4b1d      	ldr	r3, [pc, #116]	; (8002238 <BSP_LCD_DrawPixel+0x88>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a1d      	ldr	r2, [pc, #116]	; (800223c <BSP_LCD_DrawPixel+0x8c>)
 80021c6:	2134      	movs	r1, #52	; 0x34
 80021c8:	fb01 f303 	mul.w	r3, r1, r3
 80021cc:	4413      	add	r3, r2
 80021ce:	3348      	adds	r3, #72	; 0x48
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d116      	bne.n	8002204 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80021d6:	4b18      	ldr	r3, [pc, #96]	; (8002238 <BSP_LCD_DrawPixel+0x88>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a18      	ldr	r2, [pc, #96]	; (800223c <BSP_LCD_DrawPixel+0x8c>)
 80021dc:	2134      	movs	r1, #52	; 0x34
 80021de:	fb01 f303 	mul.w	r3, r1, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	335c      	adds	r3, #92	; 0x5c
 80021e6:	681c      	ldr	r4, [r3, #0]
 80021e8:	88bd      	ldrh	r5, [r7, #4]
 80021ea:	f7ff fb1f 	bl	800182c <BSP_LCD_GetXSize>
 80021ee:	4603      	mov	r3, r0
 80021f0:	fb03 f205 	mul.w	r2, r3, r5
 80021f4:	88fb      	ldrh	r3, [r7, #6]
 80021f6:	4413      	add	r3, r2
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	4423      	add	r3, r4
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	b292      	uxth	r2, r2
 8002200:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002202:	e015      	b.n	8002230 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002204:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <BSP_LCD_DrawPixel+0x88>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a0c      	ldr	r2, [pc, #48]	; (800223c <BSP_LCD_DrawPixel+0x8c>)
 800220a:	2134      	movs	r1, #52	; 0x34
 800220c:	fb01 f303 	mul.w	r3, r1, r3
 8002210:	4413      	add	r3, r2
 8002212:	335c      	adds	r3, #92	; 0x5c
 8002214:	681c      	ldr	r4, [r3, #0]
 8002216:	88bd      	ldrh	r5, [r7, #4]
 8002218:	f7ff fb08 	bl	800182c <BSP_LCD_GetXSize>
 800221c:	4603      	mov	r3, r0
 800221e:	fb03 f205 	mul.w	r2, r3, r5
 8002222:	88fb      	ldrh	r3, [r7, #6]
 8002224:	4413      	add	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4423      	add	r3, r4
 800222a:	461a      	mov	r2, r3
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	6013      	str	r3, [r2, #0]
}
 8002230:	bf00      	nop
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bdb0      	pop	{r4, r5, r7, pc}
 8002238:	200001c4 	.word	0x200001c4
 800223c:	20000358 	.word	0x20000358

08002240 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002244:	b086      	sub	sp, #24
 8002246:	af02      	add	r7, sp, #8
 8002248:	4604      	mov	r4, r0
 800224a:	4608      	mov	r0, r1
 800224c:	4611      	mov	r1, r2
 800224e:	461a      	mov	r2, r3
 8002250:	4623      	mov	r3, r4
 8002252:	80fb      	strh	r3, [r7, #6]
 8002254:	4603      	mov	r3, r0
 8002256:	80bb      	strh	r3, [r7, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	807b      	strh	r3, [r7, #2]
 800225c:	4613      	mov	r3, r2
 800225e:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002264:	4b30      	ldr	r3, [pc, #192]	; (8002328 <BSP_LCD_FillRect+0xe8>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	4930      	ldr	r1, [pc, #192]	; (800232c <BSP_LCD_FillRect+0xec>)
 800226a:	4613      	mov	r3, r2
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	4413      	add	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff fb70 	bl	800195c <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800227c:	4b2a      	ldr	r3, [pc, #168]	; (8002328 <BSP_LCD_FillRect+0xe8>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a2b      	ldr	r2, [pc, #172]	; (8002330 <BSP_LCD_FillRect+0xf0>)
 8002282:	2134      	movs	r1, #52	; 0x34
 8002284:	fb01 f303 	mul.w	r3, r1, r3
 8002288:	4413      	add	r3, r2
 800228a:	3348      	adds	r3, #72	; 0x48
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d114      	bne.n	80022bc <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002292:	4b25      	ldr	r3, [pc, #148]	; (8002328 <BSP_LCD_FillRect+0xe8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a26      	ldr	r2, [pc, #152]	; (8002330 <BSP_LCD_FillRect+0xf0>)
 8002298:	2134      	movs	r1, #52	; 0x34
 800229a:	fb01 f303 	mul.w	r3, r1, r3
 800229e:	4413      	add	r3, r2
 80022a0:	335c      	adds	r3, #92	; 0x5c
 80022a2:	681c      	ldr	r4, [r3, #0]
 80022a4:	f7ff fac2 	bl	800182c <BSP_LCD_GetXSize>
 80022a8:	4602      	mov	r2, r0
 80022aa:	88bb      	ldrh	r3, [r7, #4]
 80022ac:	fb03 f202 	mul.w	r2, r3, r2
 80022b0:	88fb      	ldrh	r3, [r7, #6]
 80022b2:	4413      	add	r3, r2
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	4423      	add	r3, r4
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	e013      	b.n	80022e4 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80022bc:	4b1a      	ldr	r3, [pc, #104]	; (8002328 <BSP_LCD_FillRect+0xe8>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a1b      	ldr	r2, [pc, #108]	; (8002330 <BSP_LCD_FillRect+0xf0>)
 80022c2:	2134      	movs	r1, #52	; 0x34
 80022c4:	fb01 f303 	mul.w	r3, r1, r3
 80022c8:	4413      	add	r3, r2
 80022ca:	335c      	adds	r3, #92	; 0x5c
 80022cc:	681c      	ldr	r4, [r3, #0]
 80022ce:	f7ff faad 	bl	800182c <BSP_LCD_GetXSize>
 80022d2:	4602      	mov	r2, r0
 80022d4:	88bb      	ldrh	r3, [r7, #4]
 80022d6:	fb03 f202 	mul.w	r2, r3, r2
 80022da:	88fb      	ldrh	r3, [r7, #6]
 80022dc:	4413      	add	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4423      	add	r3, r4
 80022e2:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80022e4:	4b10      	ldr	r3, [pc, #64]	; (8002328 <BSP_LCD_FillRect+0xe8>)
 80022e6:	681c      	ldr	r4, [r3, #0]
 80022e8:	68fd      	ldr	r5, [r7, #12]
 80022ea:	887e      	ldrh	r6, [r7, #2]
 80022ec:	f8b7 8000 	ldrh.w	r8, [r7]
 80022f0:	f7ff fa9c 	bl	800182c <BSP_LCD_GetXSize>
 80022f4:	4602      	mov	r2, r0
 80022f6:	887b      	ldrh	r3, [r7, #2]
 80022f8:	1ad1      	subs	r1, r2, r3
 80022fa:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <BSP_LCD_FillRect+0xe8>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	480b      	ldr	r0, [pc, #44]	; (800232c <BSP_LCD_FillRect+0xec>)
 8002300:	4613      	mov	r3, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	4413      	add	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4403      	add	r3, r0
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	9301      	str	r3, [sp, #4]
 800230e:	9100      	str	r1, [sp, #0]
 8002310:	4643      	mov	r3, r8
 8002312:	4632      	mov	r2, r6
 8002314:	4629      	mov	r1, r5
 8002316:	4620      	mov	r0, r4
 8002318:	f000 fa78 	bl	800280c <LL_FillBuffer>
}
 800231c:	bf00      	nop
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002326:	bf00      	nop
 8002328:	200001c4 	.word	0x200001c4
 800232c:	200001c8 	.word	0x200001c8
 8002330:	20000358 	.word	0x20000358

08002334 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	80fb      	strh	r3, [r7, #6]
 800233e:	460b      	mov	r3, r1
 8002340:	80bb      	strh	r3, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8002346:	887b      	ldrh	r3, [r7, #2]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	f1c3 0303 	rsb	r3, r3, #3
 800234e:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8002354:	887b      	ldrh	r3, [r7, #2]
 8002356:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002358:	4b44      	ldr	r3, [pc, #272]	; (800246c <BSP_LCD_FillCircle+0x138>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4944      	ldr	r1, [pc, #272]	; (8002470 <BSP_LCD_FillCircle+0x13c>)
 800235e:	4613      	mov	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	4413      	add	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff faf6 	bl	800195c <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8002370:	e061      	b.n	8002436 <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d021      	beq.n	80023bc <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	b29b      	uxth	r3, r3
 800237c:	88fa      	ldrh	r2, [r7, #6]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	b298      	uxth	r0, r3
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	b29a      	uxth	r2, r3
 8002386:	88bb      	ldrh	r3, [r7, #4]
 8002388:	4413      	add	r3, r2
 800238a:	b299      	uxth	r1, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	b29b      	uxth	r3, r3
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	b29b      	uxth	r3, r3
 8002394:	461a      	mov	r2, r3
 8002396:	f7ff fc5d 	bl	8001c54 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	b29b      	uxth	r3, r3
 800239e:	88fa      	ldrh	r2, [r7, #6]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	b298      	uxth	r0, r3
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	88ba      	ldrh	r2, [r7, #4]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	b299      	uxth	r1, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	461a      	mov	r2, r3
 80023b8:	f7ff fc4c 	bl	8001c54 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d021      	beq.n	8002406 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	88fa      	ldrh	r2, [r7, #6]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	b298      	uxth	r0, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	88ba      	ldrh	r2, [r7, #4]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	b299      	uxth	r1, r3
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	b29b      	uxth	r3, r3
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	b29b      	uxth	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	f7ff fc38 	bl	8001c54 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	88fa      	ldrh	r2, [r7, #6]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	b298      	uxth	r0, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	88bb      	ldrh	r3, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	b299      	uxth	r1, r3
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	b29b      	uxth	r3, r3
 8002400:	461a      	mov	r2, r3
 8002402:	f7ff fc27 	bl	8001c54 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2b00      	cmp	r3, #0
 800240a:	da06      	bge.n	800241a <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	009a      	lsls	r2, r3, #2
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	4413      	add	r3, r2
 8002414:	3306      	adds	r3, #6
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	e00a      	b.n	8002430 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	009a      	lsls	r2, r3, #2
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	4413      	add	r3, r2
 8002426:	330a      	adds	r3, #10
 8002428:	617b      	str	r3, [r7, #20]
      current_y--;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	3b01      	subs	r3, #1
 800242e:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	3301      	adds	r3, #1
 8002434:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	429a      	cmp	r2, r3
 800243c:	d999      	bls.n	8002372 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800243e:	4b0b      	ldr	r3, [pc, #44]	; (800246c <BSP_LCD_FillCircle+0x138>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	490b      	ldr	r1, [pc, #44]	; (8002470 <BSP_LCD_FillCircle+0x13c>)
 8002444:	4613      	mov	r3, r2
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	4413      	add	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff fa83 	bl	800195c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002456:	887a      	ldrh	r2, [r7, #2]
 8002458:	88b9      	ldrh	r1, [r7, #4]
 800245a:	88fb      	ldrh	r3, [r7, #6]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff fdb7 	bl	8001fd0 <BSP_LCD_DrawCircle>
}
 8002462:	bf00      	nop
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	200001c4 	.word	0x200001c4
 8002470:	200001c8 	.word	0x200001c8

08002474 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8002478:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <BSP_LCD_DisplayOn+0x30>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	699a      	ldr	r2, [r3, #24]
 800247e:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <BSP_LCD_DisplayOn+0x30>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0201 	orr.w	r2, r2, #1
 8002486:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002488:	2201      	movs	r2, #1
 800248a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800248e:	4806      	ldr	r0, [pc, #24]	; (80024a8 <BSP_LCD_DisplayOn+0x34>)
 8002490:	f002 ff48 	bl	8005324 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002494:	2201      	movs	r2, #1
 8002496:	2108      	movs	r1, #8
 8002498:	4804      	ldr	r0, [pc, #16]	; (80024ac <BSP_LCD_DisplayOn+0x38>)
 800249a:	f002 ff43 	bl	8005324 <HAL_GPIO_WritePin>
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000358 	.word	0x20000358
 80024a8:	40022000 	.word	0x40022000
 80024ac:	40022800 	.word	0x40022800

080024b0 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b090      	sub	sp, #64	; 0x40
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80024ba:	4b64      	ldr	r3, [pc, #400]	; (800264c <BSP_LCD_MspInit+0x19c>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	4a63      	ldr	r2, [pc, #396]	; (800264c <BSP_LCD_MspInit+0x19c>)
 80024c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024c4:	6453      	str	r3, [r2, #68]	; 0x44
 80024c6:	4b61      	ldr	r3, [pc, #388]	; (800264c <BSP_LCD_MspInit+0x19c>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80024d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80024d2:	4b5e      	ldr	r3, [pc, #376]	; (800264c <BSP_LCD_MspInit+0x19c>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	4a5d      	ldr	r2, [pc, #372]	; (800264c <BSP_LCD_MspInit+0x19c>)
 80024d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024dc:	6313      	str	r3, [r2, #48]	; 0x30
 80024de:	4b5b      	ldr	r3, [pc, #364]	; (800264c <BSP_LCD_MspInit+0x19c>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024ea:	4b58      	ldr	r3, [pc, #352]	; (800264c <BSP_LCD_MspInit+0x19c>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	4a57      	ldr	r2, [pc, #348]	; (800264c <BSP_LCD_MspInit+0x19c>)
 80024f0:	f043 0310 	orr.w	r3, r3, #16
 80024f4:	6313      	str	r3, [r2, #48]	; 0x30
 80024f6:	4b55      	ldr	r3, [pc, #340]	; (800264c <BSP_LCD_MspInit+0x19c>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	f003 0310 	and.w	r3, r3, #16
 80024fe:	623b      	str	r3, [r7, #32]
 8002500:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002502:	4b52      	ldr	r3, [pc, #328]	; (800264c <BSP_LCD_MspInit+0x19c>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	4a51      	ldr	r2, [pc, #324]	; (800264c <BSP_LCD_MspInit+0x19c>)
 8002508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800250c:	6313      	str	r3, [r2, #48]	; 0x30
 800250e:	4b4f      	ldr	r3, [pc, #316]	; (800264c <BSP_LCD_MspInit+0x19c>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002516:	61fb      	str	r3, [r7, #28]
 8002518:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800251a:	4b4c      	ldr	r3, [pc, #304]	; (800264c <BSP_LCD_MspInit+0x19c>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	4a4b      	ldr	r2, [pc, #300]	; (800264c <BSP_LCD_MspInit+0x19c>)
 8002520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002524:	6313      	str	r3, [r2, #48]	; 0x30
 8002526:	4b49      	ldr	r3, [pc, #292]	; (800264c <BSP_LCD_MspInit+0x19c>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252e:	61bb      	str	r3, [r7, #24]
 8002530:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002532:	4b46      	ldr	r3, [pc, #280]	; (800264c <BSP_LCD_MspInit+0x19c>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	4a45      	ldr	r2, [pc, #276]	; (800264c <BSP_LCD_MspInit+0x19c>)
 8002538:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800253c:	6313      	str	r3, [r2, #48]	; 0x30
 800253e:	4b43      	ldr	r3, [pc, #268]	; (800264c <BSP_LCD_MspInit+0x19c>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800254a:	4b40      	ldr	r3, [pc, #256]	; (800264c <BSP_LCD_MspInit+0x19c>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	4a3f      	ldr	r2, [pc, #252]	; (800264c <BSP_LCD_MspInit+0x19c>)
 8002550:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002554:	6313      	str	r3, [r2, #48]	; 0x30
 8002556:	4b3d      	ldr	r3, [pc, #244]	; (800264c <BSP_LCD_MspInit+0x19c>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8002562:	4b3a      	ldr	r3, [pc, #232]	; (800264c <BSP_LCD_MspInit+0x19c>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	4a39      	ldr	r2, [pc, #228]	; (800264c <BSP_LCD_MspInit+0x19c>)
 8002568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256c:	6313      	str	r3, [r2, #48]	; 0x30
 800256e:	4b37      	ldr	r3, [pc, #220]	; (800264c <BSP_LCD_MspInit+0x19c>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800257a:	4b34      	ldr	r3, [pc, #208]	; (800264c <BSP_LCD_MspInit+0x19c>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	4a33      	ldr	r2, [pc, #204]	; (800264c <BSP_LCD_MspInit+0x19c>)
 8002580:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002584:	6313      	str	r3, [r2, #48]	; 0x30
 8002586:	4b31      	ldr	r3, [pc, #196]	; (800264c <BSP_LCD_MspInit+0x19c>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8002592:	2310      	movs	r3, #16
 8002594:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002596:	2302      	movs	r3, #2
 8002598:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800259e:	2302      	movs	r3, #2
 80025a0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80025a2:	230e      	movs	r3, #14
 80025a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80025a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025aa:	4619      	mov	r1, r3
 80025ac:	4828      	ldr	r0, [pc, #160]	; (8002650 <BSP_LCD_MspInit+0x1a0>)
 80025ae:	f002 fd0f 	bl	8004fd0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80025b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80025b8:	2302      	movs	r3, #2
 80025ba:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80025bc:	2309      	movs	r3, #9
 80025be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80025c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025c4:	4619      	mov	r1, r3
 80025c6:	4823      	ldr	r0, [pc, #140]	; (8002654 <BSP_LCD_MspInit+0x1a4>)
 80025c8:	f002 fd02 	bl	8004fd0 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80025cc:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80025d0:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80025d2:	2302      	movs	r3, #2
 80025d4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80025d6:	230e      	movs	r3, #14
 80025d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80025da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025de:	4619      	mov	r1, r3
 80025e0:	481d      	ldr	r0, [pc, #116]	; (8002658 <BSP_LCD_MspInit+0x1a8>)
 80025e2:	f002 fcf5 	bl	8004fd0 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80025e6:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80025ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80025ec:	2302      	movs	r3, #2
 80025ee:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80025f0:	230e      	movs	r3, #14
 80025f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80025f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025f8:	4619      	mov	r1, r3
 80025fa:	4818      	ldr	r0, [pc, #96]	; (800265c <BSP_LCD_MspInit+0x1ac>)
 80025fc:	f002 fce8 	bl	8004fd0 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002600:	23f7      	movs	r3, #247	; 0xf7
 8002602:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002604:	2302      	movs	r3, #2
 8002606:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002608:	230e      	movs	r3, #14
 800260a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800260c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002610:	4619      	mov	r1, r3
 8002612:	4813      	ldr	r0, [pc, #76]	; (8002660 <BSP_LCD_MspInit+0x1b0>)
 8002614:	f002 fcdc 	bl	8004fd0 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800261c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800261e:	2301      	movs	r3, #1
 8002620:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002622:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002626:	4619      	mov	r1, r3
 8002628:	480b      	ldr	r0, [pc, #44]	; (8002658 <BSP_LCD_MspInit+0x1a8>)
 800262a:	f002 fcd1 	bl	8004fd0 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800262e:	2308      	movs	r3, #8
 8002630:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002632:	2301      	movs	r3, #1
 8002634:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002636:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800263a:	4619      	mov	r1, r3
 800263c:	4808      	ldr	r0, [pc, #32]	; (8002660 <BSP_LCD_MspInit+0x1b0>)
 800263e:	f002 fcc7 	bl	8004fd0 <HAL_GPIO_Init>
}
 8002642:	bf00      	nop
 8002644:	3740      	adds	r7, #64	; 0x40
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40023800 	.word	0x40023800
 8002650:	40021000 	.word	0x40021000
 8002654:	40021800 	.word	0x40021800
 8002658:	40022000 	.word	0x40022000
 800265c:	40022400 	.word	0x40022400
 8002660:	40022800 	.word	0x40022800

08002664 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800266e:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <BSP_LCD_ClockConfig+0x34>)
 8002670:	2208      	movs	r2, #8
 8002672:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002674:	4b08      	ldr	r3, [pc, #32]	; (8002698 <BSP_LCD_ClockConfig+0x34>)
 8002676:	22c0      	movs	r2, #192	; 0xc0
 8002678:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800267a:	4b07      	ldr	r3, [pc, #28]	; (8002698 <BSP_LCD_ClockConfig+0x34>)
 800267c:	2205      	movs	r2, #5
 800267e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <BSP_LCD_ClockConfig+0x34>)
 8002682:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002686:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002688:	4803      	ldr	r0, [pc, #12]	; (8002698 <BSP_LCD_ClockConfig+0x34>)
 800268a:	f004 fc77 	bl	8006f7c <HAL_RCCEx_PeriphCLKConfig>
}
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	200001e0 	.word	0x200001e0

0800269c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b088      	sub	sp, #32
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	603a      	str	r2, [r7, #0]
 80026a6:	80fb      	strh	r3, [r7, #6]
 80026a8:	460b      	mov	r3, r1
 80026aa:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61fb      	str	r3, [r7, #28]
 80026b0:	2300      	movs	r3, #0
 80026b2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80026b4:	4b53      	ldr	r3, [pc, #332]	; (8002804 <DrawChar+0x168>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4953      	ldr	r1, [pc, #332]	; (8002808 <DrawChar+0x16c>)
 80026ba:	4613      	mov	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	3308      	adds	r3, #8
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	88db      	ldrh	r3, [r3, #6]
 80026ca:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80026cc:	4b4d      	ldr	r3, [pc, #308]	; (8002804 <DrawChar+0x168>)
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	494d      	ldr	r1, [pc, #308]	; (8002808 <DrawChar+0x16c>)
 80026d2:	4613      	mov	r3, r2
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	4413      	add	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	3308      	adds	r3, #8
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	889b      	ldrh	r3, [r3, #4]
 80026e2:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80026e4:	8a3b      	ldrh	r3, [r7, #16]
 80026e6:	3307      	adds	r3, #7
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	da00      	bge.n	80026ee <DrawChar+0x52>
 80026ec:	3307      	adds	r3, #7
 80026ee:	10db      	asrs	r3, r3, #3
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	8a3b      	ldrh	r3, [r7, #16]
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80026fe:	2300      	movs	r3, #0
 8002700:	61fb      	str	r3, [r7, #28]
 8002702:	e076      	b.n	80027f2 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002704:	8a3b      	ldrh	r3, [r7, #16]
 8002706:	3307      	adds	r3, #7
 8002708:	2b00      	cmp	r3, #0
 800270a:	da00      	bge.n	800270e <DrawChar+0x72>
 800270c:	3307      	adds	r3, #7
 800270e:	10db      	asrs	r3, r3, #3
 8002710:	461a      	mov	r2, r3
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	fb03 f302 	mul.w	r3, r3, r2
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	4413      	add	r3, r2
 800271c:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800271e:	8a3b      	ldrh	r3, [r7, #16]
 8002720:	3307      	adds	r3, #7
 8002722:	2b00      	cmp	r3, #0
 8002724:	da00      	bge.n	8002728 <DrawChar+0x8c>
 8002726:	3307      	adds	r3, #7
 8002728:	10db      	asrs	r3, r3, #3
 800272a:	2b01      	cmp	r3, #1
 800272c:	d002      	beq.n	8002734 <DrawChar+0x98>
 800272e:	2b02      	cmp	r3, #2
 8002730:	d004      	beq.n	800273c <DrawChar+0xa0>
 8002732:	e00c      	b.n	800274e <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	617b      	str	r3, [r7, #20]
      break;
 800273a:	e016      	b.n	800276a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	021b      	lsls	r3, r3, #8
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	3201      	adds	r2, #1
 8002746:	7812      	ldrb	r2, [r2, #0]
 8002748:	4313      	orrs	r3, r2
 800274a:	617b      	str	r3, [r7, #20]
      break;
 800274c:	e00d      	b.n	800276a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	041a      	lsls	r2, r3, #16
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	3301      	adds	r3, #1
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	021b      	lsls	r3, r3, #8
 800275c:	4313      	orrs	r3, r2
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	3202      	adds	r2, #2
 8002762:	7812      	ldrb	r2, [r2, #0]
 8002764:	4313      	orrs	r3, r2
 8002766:	617b      	str	r3, [r7, #20]
      break;
 8002768:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800276a:	2300      	movs	r3, #0
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	e036      	b.n	80027de <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002770:	8a3a      	ldrh	r2, [r7, #16]
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	1ad2      	subs	r2, r2, r3
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	4413      	add	r3, r2
 800277a:	3b01      	subs	r3, #1
 800277c:	2201      	movs	r2, #1
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	461a      	mov	r2, r3
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d012      	beq.n	80027b2 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	b29a      	uxth	r2, r3
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	4413      	add	r3, r2
 8002794:	b298      	uxth	r0, r3
 8002796:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <DrawChar+0x168>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	491b      	ldr	r1, [pc, #108]	; (8002808 <DrawChar+0x16c>)
 800279c:	4613      	mov	r3, r2
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	4413      	add	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	88bb      	ldrh	r3, [r7, #4]
 80027aa:	4619      	mov	r1, r3
 80027ac:	f7ff fd00 	bl	80021b0 <BSP_LCD_DrawPixel>
 80027b0:	e012      	b.n	80027d8 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	4413      	add	r3, r2
 80027ba:	b298      	uxth	r0, r3
 80027bc:	4b11      	ldr	r3, [pc, #68]	; (8002804 <DrawChar+0x168>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4911      	ldr	r1, [pc, #68]	; (8002808 <DrawChar+0x16c>)
 80027c2:	4613      	mov	r3, r2
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	4413      	add	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	440b      	add	r3, r1
 80027cc:	3304      	adds	r3, #4
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	88bb      	ldrh	r3, [r7, #4]
 80027d2:	4619      	mov	r1, r3
 80027d4:	f7ff fcec 	bl	80021b0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	3301      	adds	r3, #1
 80027dc:	61bb      	str	r3, [r7, #24]
 80027de:	8a3b      	ldrh	r3, [r7, #16]
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d3c4      	bcc.n	8002770 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80027e6:	88bb      	ldrh	r3, [r7, #4]
 80027e8:	3301      	adds	r3, #1
 80027ea:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	3301      	adds	r3, #1
 80027f0:	61fb      	str	r3, [r7, #28]
 80027f2:	8a7b      	ldrh	r3, [r7, #18]
 80027f4:	69fa      	ldr	r2, [r7, #28]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d384      	bcc.n	8002704 <DrawChar+0x68>
  }
}
 80027fa:	bf00      	nop
 80027fc:	3720      	adds	r7, #32
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	200001c4 	.word	0x200001c4
 8002808:	200001c8 	.word	0x200001c8

0800280c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af02      	add	r7, sp, #8
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800281a:	4b1e      	ldr	r3, [pc, #120]	; (8002894 <LL_FillBuffer+0x88>)
 800281c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002820:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002822:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <LL_FillBuffer+0x8c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a1d      	ldr	r2, [pc, #116]	; (800289c <LL_FillBuffer+0x90>)
 8002828:	2134      	movs	r1, #52	; 0x34
 800282a:	fb01 f303 	mul.w	r3, r1, r3
 800282e:	4413      	add	r3, r2
 8002830:	3348      	adds	r3, #72	; 0x48
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d103      	bne.n	8002840 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8002838:	4b16      	ldr	r3, [pc, #88]	; (8002894 <LL_FillBuffer+0x88>)
 800283a:	2202      	movs	r2, #2
 800283c:	609a      	str	r2, [r3, #8]
 800283e:	e002      	b.n	8002846 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002840:	4b14      	ldr	r3, [pc, #80]	; (8002894 <LL_FillBuffer+0x88>)
 8002842:	2200      	movs	r2, #0
 8002844:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8002846:	4a13      	ldr	r2, [pc, #76]	; (8002894 <LL_FillBuffer+0x88>)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 800284c:	4b11      	ldr	r3, [pc, #68]	; (8002894 <LL_FillBuffer+0x88>)
 800284e:	4a14      	ldr	r2, [pc, #80]	; (80028a0 <LL_FillBuffer+0x94>)
 8002850:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8002852:	4810      	ldr	r0, [pc, #64]	; (8002894 <LL_FillBuffer+0x88>)
 8002854:	f002 f820 	bl	8004898 <HAL_DMA2D_Init>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d115      	bne.n	800288a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800285e:	68f9      	ldr	r1, [r7, #12]
 8002860:	480c      	ldr	r0, [pc, #48]	; (8002894 <LL_FillBuffer+0x88>)
 8002862:	f002 fa87 	bl	8004d74 <HAL_DMA2D_ConfigLayer>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10e      	bne.n	800288a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69f9      	ldr	r1, [r7, #28]
 8002876:	4807      	ldr	r0, [pc, #28]	; (8002894 <LL_FillBuffer+0x88>)
 8002878:	f002 f858 	bl	800492c <HAL_DMA2D_Start>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d103      	bne.n	800288a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8002882:	210a      	movs	r1, #10
 8002884:	4803      	ldr	r0, [pc, #12]	; (8002894 <LL_FillBuffer+0x88>)
 8002886:	f002 f87c 	bl	8004982 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800288a:	bf00      	nop
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000184 	.word	0x20000184
 8002898:	200001c4 	.word	0x200001c4
 800289c:	20000358 	.word	0x20000358
 80028a0:	4002b000 	.word	0x4002b000

080028a4 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80028a8:	4b29      	ldr	r3, [pc, #164]	; (8002950 <BSP_SDRAM_Init+0xac>)
 80028aa:	4a2a      	ldr	r2, [pc, #168]	; (8002954 <BSP_SDRAM_Init+0xb0>)
 80028ac:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80028ae:	4b2a      	ldr	r3, [pc, #168]	; (8002958 <BSP_SDRAM_Init+0xb4>)
 80028b0:	2202      	movs	r2, #2
 80028b2:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80028b4:	4b28      	ldr	r3, [pc, #160]	; (8002958 <BSP_SDRAM_Init+0xb4>)
 80028b6:	2207      	movs	r2, #7
 80028b8:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80028ba:	4b27      	ldr	r3, [pc, #156]	; (8002958 <BSP_SDRAM_Init+0xb4>)
 80028bc:	2204      	movs	r2, #4
 80028be:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80028c0:	4b25      	ldr	r3, [pc, #148]	; (8002958 <BSP_SDRAM_Init+0xb4>)
 80028c2:	2207      	movs	r2, #7
 80028c4:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80028c6:	4b24      	ldr	r3, [pc, #144]	; (8002958 <BSP_SDRAM_Init+0xb4>)
 80028c8:	2202      	movs	r2, #2
 80028ca:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80028cc:	4b22      	ldr	r3, [pc, #136]	; (8002958 <BSP_SDRAM_Init+0xb4>)
 80028ce:	2202      	movs	r2, #2
 80028d0:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80028d2:	4b21      	ldr	r3, [pc, #132]	; (8002958 <BSP_SDRAM_Init+0xb4>)
 80028d4:	2202      	movs	r2, #2
 80028d6:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80028d8:	4b1d      	ldr	r3, [pc, #116]	; (8002950 <BSP_SDRAM_Init+0xac>)
 80028da:	2200      	movs	r2, #0
 80028dc:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80028de:	4b1c      	ldr	r3, [pc, #112]	; (8002950 <BSP_SDRAM_Init+0xac>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80028e4:	4b1a      	ldr	r3, [pc, #104]	; (8002950 <BSP_SDRAM_Init+0xac>)
 80028e6:	2204      	movs	r2, #4
 80028e8:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80028ea:	4b19      	ldr	r3, [pc, #100]	; (8002950 <BSP_SDRAM_Init+0xac>)
 80028ec:	2210      	movs	r2, #16
 80028ee:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80028f0:	4b17      	ldr	r3, [pc, #92]	; (8002950 <BSP_SDRAM_Init+0xac>)
 80028f2:	2240      	movs	r2, #64	; 0x40
 80028f4:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80028f6:	4b16      	ldr	r3, [pc, #88]	; (8002950 <BSP_SDRAM_Init+0xac>)
 80028f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028fc:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80028fe:	4b14      	ldr	r3, [pc, #80]	; (8002950 <BSP_SDRAM_Init+0xac>)
 8002900:	2200      	movs	r2, #0
 8002902:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002904:	4b12      	ldr	r3, [pc, #72]	; (8002950 <BSP_SDRAM_Init+0xac>)
 8002906:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800290a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800290c:	4b10      	ldr	r3, [pc, #64]	; (8002950 <BSP_SDRAM_Init+0xac>)
 800290e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002912:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002914:	4b0e      	ldr	r3, [pc, #56]	; (8002950 <BSP_SDRAM_Init+0xac>)
 8002916:	2200      	movs	r2, #0
 8002918:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800291a:	2100      	movs	r1, #0
 800291c:	480c      	ldr	r0, [pc, #48]	; (8002950 <BSP_SDRAM_Init+0xac>)
 800291e:	f000 f87f 	bl	8002a20 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002922:	490d      	ldr	r1, [pc, #52]	; (8002958 <BSP_SDRAM_Init+0xb4>)
 8002924:	480a      	ldr	r0, [pc, #40]	; (8002950 <BSP_SDRAM_Init+0xac>)
 8002926:	f006 f8e0 	bl	8008aea <HAL_SDRAM_Init>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002930:	4b0a      	ldr	r3, [pc, #40]	; (800295c <BSP_SDRAM_Init+0xb8>)
 8002932:	2201      	movs	r2, #1
 8002934:	701a      	strb	r2, [r3, #0]
 8002936:	e002      	b.n	800293e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002938:	4b08      	ldr	r3, [pc, #32]	; (800295c <BSP_SDRAM_Init+0xb8>)
 800293a:	2200      	movs	r2, #0
 800293c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800293e:	f240 6003 	movw	r0, #1539	; 0x603
 8002942:	f000 f80d 	bl	8002960 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002946:	4b05      	ldr	r3, [pc, #20]	; (800295c <BSP_SDRAM_Init+0xb8>)
 8002948:	781b      	ldrb	r3, [r3, #0]
}
 800294a:	4618      	mov	r0, r3
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20000400 	.word	0x20000400
 8002954:	a0000140 	.word	0xa0000140
 8002958:	20000264 	.word	0x20000264
 800295c:	20000040 	.word	0x20000040

08002960 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800296c:	4b2a      	ldr	r3, [pc, #168]	; (8002a18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800296e:	2201      	movs	r2, #1
 8002970:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002972:	4b29      	ldr	r3, [pc, #164]	; (8002a18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002974:	2210      	movs	r2, #16
 8002976:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002978:	4b27      	ldr	r3, [pc, #156]	; (8002a18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800297a:	2201      	movs	r2, #1
 800297c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800297e:	4b26      	ldr	r3, [pc, #152]	; (8002a18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002980:	2200      	movs	r2, #0
 8002982:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002984:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002988:	4923      	ldr	r1, [pc, #140]	; (8002a18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800298a:	4824      	ldr	r0, [pc, #144]	; (8002a1c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800298c:	f006 f8e1 	bl	8008b52 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002990:	2001      	movs	r0, #1
 8002992:	f000 fbfb 	bl	800318c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002996:	4b20      	ldr	r3, [pc, #128]	; (8002a18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002998:	2202      	movs	r2, #2
 800299a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800299c:	4b1e      	ldr	r3, [pc, #120]	; (8002a18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800299e:	2210      	movs	r2, #16
 80029a0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80029a2:	4b1d      	ldr	r3, [pc, #116]	; (8002a18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80029a8:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80029ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029b2:	4919      	ldr	r1, [pc, #100]	; (8002a18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029b4:	4819      	ldr	r0, [pc, #100]	; (8002a1c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80029b6:	f006 f8cc 	bl	8008b52 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80029ba:	4b17      	ldr	r3, [pc, #92]	; (8002a18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029bc:	2203      	movs	r2, #3
 80029be:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80029c0:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029c2:	2210      	movs	r2, #16
 80029c4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80029c6:	4b14      	ldr	r3, [pc, #80]	; (8002a18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029c8:	2208      	movs	r2, #8
 80029ca:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80029cc:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80029d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029d6:	4910      	ldr	r1, [pc, #64]	; (8002a18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029d8:	4810      	ldr	r0, [pc, #64]	; (8002a1c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80029da:	f006 f8ba 	bl	8008b52 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80029de:	f44f 7308 	mov.w	r3, #544	; 0x220
 80029e2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80029e4:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029e6:	2204      	movs	r2, #4
 80029e8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80029ea:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029ec:	2210      	movs	r2, #16
 80029ee:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80029f0:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	4a07      	ldr	r2, [pc, #28]	; (8002a18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029fa:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80029fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a00:	4905      	ldr	r1, [pc, #20]	; (8002a18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a02:	4806      	ldr	r0, [pc, #24]	; (8002a1c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002a04:	f006 f8a5 	bl	8008b52 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4804      	ldr	r0, [pc, #16]	; (8002a1c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002a0c:	f006 f8cc 	bl	8008ba8 <HAL_SDRAM_ProgramRefreshRate>
}
 8002a10:	bf00      	nop
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20000280 	.word	0x20000280
 8002a1c:	20000400 	.word	0x20000400

08002a20 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b090      	sub	sp, #64	; 0x40
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002a2a:	4b70      	ldr	r3, [pc, #448]	; (8002bec <BSP_SDRAM_MspInit+0x1cc>)
 8002a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2e:	4a6f      	ldr	r2, [pc, #444]	; (8002bec <BSP_SDRAM_MspInit+0x1cc>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	6393      	str	r3, [r2, #56]	; 0x38
 8002a36:	4b6d      	ldr	r3, [pc, #436]	; (8002bec <BSP_SDRAM_MspInit+0x1cc>)
 8002a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002a42:	4b6a      	ldr	r3, [pc, #424]	; (8002bec <BSP_SDRAM_MspInit+0x1cc>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	4a69      	ldr	r2, [pc, #420]	; (8002bec <BSP_SDRAM_MspInit+0x1cc>)
 8002a48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4e:	4b67      	ldr	r3, [pc, #412]	; (8002bec <BSP_SDRAM_MspInit+0x1cc>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a56:	627b      	str	r3, [r7, #36]	; 0x24
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a5a:	4b64      	ldr	r3, [pc, #400]	; (8002bec <BSP_SDRAM_MspInit+0x1cc>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	4a63      	ldr	r2, [pc, #396]	; (8002bec <BSP_SDRAM_MspInit+0x1cc>)
 8002a60:	f043 0304 	orr.w	r3, r3, #4
 8002a64:	6313      	str	r3, [r2, #48]	; 0x30
 8002a66:	4b61      	ldr	r3, [pc, #388]	; (8002bec <BSP_SDRAM_MspInit+0x1cc>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	623b      	str	r3, [r7, #32]
 8002a70:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a72:	4b5e      	ldr	r3, [pc, #376]	; (8002bec <BSP_SDRAM_MspInit+0x1cc>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	4a5d      	ldr	r2, [pc, #372]	; (8002bec <BSP_SDRAM_MspInit+0x1cc>)
 8002a78:	f043 0308 	orr.w	r3, r3, #8
 8002a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7e:	4b5b      	ldr	r3, [pc, #364]	; (8002bec <BSP_SDRAM_MspInit+0x1cc>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	61fb      	str	r3, [r7, #28]
 8002a88:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a8a:	4b58      	ldr	r3, [pc, #352]	; (8002bec <BSP_SDRAM_MspInit+0x1cc>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	4a57      	ldr	r2, [pc, #348]	; (8002bec <BSP_SDRAM_MspInit+0x1cc>)
 8002a90:	f043 0310 	orr.w	r3, r3, #16
 8002a94:	6313      	str	r3, [r2, #48]	; 0x30
 8002a96:	4b55      	ldr	r3, [pc, #340]	; (8002bec <BSP_SDRAM_MspInit+0x1cc>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	f003 0310 	and.w	r3, r3, #16
 8002a9e:	61bb      	str	r3, [r7, #24]
 8002aa0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002aa2:	4b52      	ldr	r3, [pc, #328]	; (8002bec <BSP_SDRAM_MspInit+0x1cc>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	4a51      	ldr	r2, [pc, #324]	; (8002bec <BSP_SDRAM_MspInit+0x1cc>)
 8002aa8:	f043 0320 	orr.w	r3, r3, #32
 8002aac:	6313      	str	r3, [r2, #48]	; 0x30
 8002aae:	4b4f      	ldr	r3, [pc, #316]	; (8002bec <BSP_SDRAM_MspInit+0x1cc>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	f003 0320 	and.w	r3, r3, #32
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002aba:	4b4c      	ldr	r3, [pc, #304]	; (8002bec <BSP_SDRAM_MspInit+0x1cc>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	4a4b      	ldr	r2, [pc, #300]	; (8002bec <BSP_SDRAM_MspInit+0x1cc>)
 8002ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac6:	4b49      	ldr	r3, [pc, #292]	; (8002bec <BSP_SDRAM_MspInit+0x1cc>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ace:	613b      	str	r3, [r7, #16]
 8002ad0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ad2:	4b46      	ldr	r3, [pc, #280]	; (8002bec <BSP_SDRAM_MspInit+0x1cc>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	4a45      	ldr	r2, [pc, #276]	; (8002bec <BSP_SDRAM_MspInit+0x1cc>)
 8002ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002adc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ade:	4b43      	ldr	r3, [pc, #268]	; (8002bec <BSP_SDRAM_MspInit+0x1cc>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002aea:	2302      	movs	r3, #2
 8002aec:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002aee:	2301      	movs	r3, #1
 8002af0:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002af2:	2302      	movs	r3, #2
 8002af4:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002af6:	230c      	movs	r3, #12
 8002af8:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8002afa:	2308      	movs	r3, #8
 8002afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002afe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b02:	4619      	mov	r1, r3
 8002b04:	483a      	ldr	r0, [pc, #232]	; (8002bf0 <BSP_SDRAM_MspInit+0x1d0>)
 8002b06:	f002 fa63 	bl	8004fd0 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8002b0a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002b10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b14:	4619      	mov	r1, r3
 8002b16:	4837      	ldr	r0, [pc, #220]	; (8002bf4 <BSP_SDRAM_MspInit+0x1d4>)
 8002b18:	f002 fa5a 	bl	8004fd0 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002b1c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002b20:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002b22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b26:	4619      	mov	r1, r3
 8002b28:	4833      	ldr	r0, [pc, #204]	; (8002bf8 <BSP_SDRAM_MspInit+0x1d8>)
 8002b2a:	f002 fa51 	bl	8004fd0 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002b2e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002b32:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002b34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4830      	ldr	r0, [pc, #192]	; (8002bfc <BSP_SDRAM_MspInit+0x1dc>)
 8002b3c:	f002 fa48 	bl	8004fd0 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002b40:	f248 1333 	movw	r3, #33075	; 0x8133
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002b46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	482c      	ldr	r0, [pc, #176]	; (8002c00 <BSP_SDRAM_MspInit+0x1e0>)
 8002b4e:	f002 fa3f 	bl	8004fd0 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8002b52:	2328      	movs	r3, #40	; 0x28
 8002b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002b56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4829      	ldr	r0, [pc, #164]	; (8002c04 <BSP_SDRAM_MspInit+0x1e4>)
 8002b5e:	f002 fa37 	bl	8004fd0 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002b62:	4b29      	ldr	r3, [pc, #164]	; (8002c08 <BSP_SDRAM_MspInit+0x1e8>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002b68:	4b27      	ldr	r3, [pc, #156]	; (8002c08 <BSP_SDRAM_MspInit+0x1e8>)
 8002b6a:	2280      	movs	r2, #128	; 0x80
 8002b6c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002b6e:	4b26      	ldr	r3, [pc, #152]	; (8002c08 <BSP_SDRAM_MspInit+0x1e8>)
 8002b70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b74:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002b76:	4b24      	ldr	r3, [pc, #144]	; (8002c08 <BSP_SDRAM_MspInit+0x1e8>)
 8002b78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b7c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b7e:	4b22      	ldr	r3, [pc, #136]	; (8002c08 <BSP_SDRAM_MspInit+0x1e8>)
 8002b80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b84:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002b86:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <BSP_SDRAM_MspInit+0x1e8>)
 8002b88:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b8c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002b8e:	4b1e      	ldr	r3, [pc, #120]	; (8002c08 <BSP_SDRAM_MspInit+0x1e8>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002b94:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <BSP_SDRAM_MspInit+0x1e8>)
 8002b96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b9a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002b9c:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <BSP_SDRAM_MspInit+0x1e8>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002ba2:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <BSP_SDRAM_MspInit+0x1e8>)
 8002ba4:	2203      	movs	r2, #3
 8002ba6:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002ba8:	4b17      	ldr	r3, [pc, #92]	; (8002c08 <BSP_SDRAM_MspInit+0x1e8>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002bae:	4b16      	ldr	r3, [pc, #88]	; (8002c08 <BSP_SDRAM_MspInit+0x1e8>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002bb4:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <BSP_SDRAM_MspInit+0x1e8>)
 8002bb6:	4a15      	ldr	r2, [pc, #84]	; (8002c0c <BSP_SDRAM_MspInit+0x1ec>)
 8002bb8:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a12      	ldr	r2, [pc, #72]	; (8002c08 <BSP_SDRAM_MspInit+0x1e8>)
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30
 8002bc0:	4a11      	ldr	r2, [pc, #68]	; (8002c08 <BSP_SDRAM_MspInit+0x1e8>)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002bc6:	4810      	ldr	r0, [pc, #64]	; (8002c08 <BSP_SDRAM_MspInit+0x1e8>)
 8002bc8:	f001 fb40 	bl	800424c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002bcc:	480e      	ldr	r0, [pc, #56]	; (8002c08 <BSP_SDRAM_MspInit+0x1e8>)
 8002bce:	f001 fa8f 	bl	80040f0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	210f      	movs	r1, #15
 8002bd6:	2038      	movs	r0, #56	; 0x38
 8002bd8:	f001 f9e1 	bl	8003f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002bdc:	2038      	movs	r0, #56	; 0x38
 8002bde:	f001 f9fa 	bl	8003fd6 <HAL_NVIC_EnableIRQ>
}
 8002be2:	bf00      	nop
 8002be4:	3740      	adds	r7, #64	; 0x40
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40020800 	.word	0x40020800
 8002bf4:	40020c00 	.word	0x40020c00
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40021400 	.word	0x40021400
 8002c00:	40021800 	.word	0x40021800
 8002c04:	40021c00 	.word	0x40021c00
 8002c08:	20000290 	.word	0x20000290
 8002c0c:	40026410 	.word	0x40026410

08002c10 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	460a      	mov	r2, r1
 8002c1a:	80fb      	strh	r3, [r7, #6]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8002c20:	2300      	movs	r3, #0
 8002c22:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8002c24:	4a14      	ldr	r2, [pc, #80]	; (8002c78 <BSP_TS_Init+0x68>)
 8002c26:	88fb      	ldrh	r3, [r7, #6]
 8002c28:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8002c2a:	4a14      	ldr	r2, [pc, #80]	; (8002c7c <BSP_TS_Init+0x6c>)
 8002c2c:	88bb      	ldrh	r3, [r7, #4]
 8002c2e:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8002c30:	4b13      	ldr	r3, [pc, #76]	; (8002c80 <BSP_TS_Init+0x70>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2070      	movs	r0, #112	; 0x70
 8002c36:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8002c38:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <BSP_TS_Init+0x70>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2070      	movs	r0, #112	; 0x70
 8002c3e:	4798      	blx	r3
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b51      	cmp	r3, #81	; 0x51
 8002c44:	d111      	bne.n	8002c6a <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8002c46:	4b0f      	ldr	r3, [pc, #60]	; (8002c84 <BSP_TS_Init+0x74>)
 8002c48:	4a0d      	ldr	r2, [pc, #52]	; (8002c80 <BSP_TS_Init+0x70>)
 8002c4a:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8002c4c:	4b0e      	ldr	r3, [pc, #56]	; (8002c88 <BSP_TS_Init+0x78>)
 8002c4e:	2270      	movs	r2, #112	; 0x70
 8002c50:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8002c52:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <BSP_TS_Init+0x7c>)
 8002c54:	2208      	movs	r2, #8
 8002c56:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8002c58:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <BSP_TS_Init+0x74>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	4a0a      	ldr	r2, [pc, #40]	; (8002c88 <BSP_TS_Init+0x78>)
 8002c60:	7812      	ldrb	r2, [r2, #0]
 8002c62:	b292      	uxth	r2, r2
 8002c64:	4610      	mov	r0, r2
 8002c66:	4798      	blx	r3
 8002c68:	e001      	b.n	8002c6e <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	200002f4 	.word	0x200002f4
 8002c7c:	200002f6 	.word	0x200002f6
 8002c80:	20000000 	.word	0x20000000
 8002c84:	200002f0 	.word	0x200002f0
 8002c88:	200002f9 	.word	0x200002f9
 8002c8c:	200002f8 	.word	0x200002f8

08002c90 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8002c90:	b590      	push	{r4, r7, lr}
 8002c92:	b097      	sub	sp, #92	; 0x5c
 8002c94:	af02      	add	r7, sp, #8
 8002c96:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8002caa:	4b97      	ldr	r3, [pc, #604]	; (8002f08 <BSP_TS_GetState+0x278>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	4a96      	ldr	r2, [pc, #600]	; (8002f0c <BSP_TS_GetState+0x27c>)
 8002cb2:	7812      	ldrb	r2, [r2, #0]
 8002cb4:	b292      	uxth	r2, r2
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	4798      	blx	r3
 8002cba:	4603      	mov	r3, r0
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 81a8 	beq.w	800301c <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8002ccc:	2300      	movs	r3, #0
 8002cce:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cd0:	e197      	b.n	8003002 <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8002cd2:	4b8d      	ldr	r3, [pc, #564]	; (8002f08 <BSP_TS_GetState+0x278>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	4a8c      	ldr	r2, [pc, #560]	; (8002f0c <BSP_TS_GetState+0x27c>)
 8002cda:	7812      	ldrb	r2, [r2, #0]
 8002cdc:	b290      	uxth	r0, r2
 8002cde:	f107 0120 	add.w	r1, r7, #32
 8002ce2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ce4:	0052      	lsls	r2, r2, #1
 8002ce6:	188c      	adds	r4, r1, r2
 8002ce8:	f107 0114 	add.w	r1, r7, #20
 8002cec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cee:	0052      	lsls	r2, r2, #1
 8002cf0:	440a      	add	r2, r1
 8002cf2:	4621      	mov	r1, r4
 8002cf4:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8002cf6:	4b86      	ldr	r3, [pc, #536]	; (8002f10 <BSP_TS_GetState+0x280>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d11b      	bne.n	8002d36 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 8002cfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002d06:	4413      	add	r3, r2
 8002d08:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8002d0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002d14:	440b      	add	r3, r1
 8002d16:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8002d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002d22:	4413      	add	r3, r2
 8002d24:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8002d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002d30:	440b      	add	r3, r1
 8002d32:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8002d36:	4b76      	ldr	r3, [pc, #472]	; (8002f10 <BSP_TS_GetState+0x280>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d010      	beq.n	8002d64 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 8002d42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8002d50:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002d5e:	440b      	add	r3, r1
 8002d60:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8002d64:	4b6a      	ldr	r3, [pc, #424]	; (8002f10 <BSP_TS_GetState+0x280>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d010      	beq.n	8002d92 <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 8002d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002d78:	4413      	add	r3, r2
 8002d7a:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8002d7e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002d8c:	440b      	add	r3, r1
 8002d8e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8002d92:	4b5f      	ldr	r3, [pc, #380]	; (8002f10 <BSP_TS_GetState+0x280>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d01b      	beq.n	8002dd6 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 8002d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002da6:	4413      	add	r3, r2
 8002da8:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8002dac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002db4:	440b      	add	r3, r1
 8002db6:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8002dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8002dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002dd0:	440b      	add	r3, r1
 8002dd2:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8002dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002dde:	4413      	add	r3, r2
 8002de0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002de4:	4619      	mov	r1, r3
 8002de6:	4a4b      	ldr	r2, [pc, #300]	; (8002f14 <BSP_TS_GetState+0x284>)
 8002de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dee:	4299      	cmp	r1, r3
 8002df0:	d90e      	bls.n	8002e10 <BSP_TS_GetState+0x180>
 8002df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8002e00:	4944      	ldr	r1, [pc, #272]	; (8002f14 <BSP_TS_GetState+0x284>)
 8002e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	e00d      	b.n	8002e2c <BSP_TS_GetState+0x19c>
 8002e10:	4a40      	ldr	r2, [pc, #256]	; (8002f14 <BSP_TS_GetState+0x284>)
 8002e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002e22:	440b      	add	r3, r1
 8002e24:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8002e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002e38:	4413      	add	r3, r2
 8002e3a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4a35      	ldr	r2, [pc, #212]	; (8002f18 <BSP_TS_GetState+0x288>)
 8002e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e48:	4299      	cmp	r1, r3
 8002e4a:	d90e      	bls.n	8002e6a <BSP_TS_GetState+0x1da>
 8002e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002e54:	4413      	add	r3, r2
 8002e56:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8002e5a:	492f      	ldr	r1, [pc, #188]	; (8002f18 <BSP_TS_GetState+0x288>)
 8002e5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	e00d      	b.n	8002e86 <BSP_TS_GetState+0x1f6>
 8002e6a:	4a2b      	ldr	r2, [pc, #172]	; (8002f18 <BSP_TS_GetState+0x288>)
 8002e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002e7c:	440b      	add	r3, r1
 8002e7e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8002e8a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8002e8e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002e92:	4413      	add	r3, r2
 8002e94:	2b05      	cmp	r3, #5
 8002e96:	dd17      	ble.n	8002ec8 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8002e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4a1a      	ldr	r2, [pc, #104]	; (8002f14 <BSP_TS_GetState+0x284>)
 8002eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8002eb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002eb8:	4413      	add	r3, r2
 8002eba:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4a15      	ldr	r2, [pc, #84]	; (8002f18 <BSP_TS_GetState+0x288>)
 8002ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ec4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8002ec8:	4b10      	ldr	r3, [pc, #64]	; (8002f0c <BSP_TS_GetState+0x27c>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b70      	cmp	r3, #112	; 0x70
 8002ece:	d125      	bne.n	8002f1c <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 8002ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002ed8:	4413      	add	r3, r2
 8002eda:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	4413      	add	r3, r2
 8002ee6:	460a      	mov	r2, r1
 8002ee8:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8002eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002efc:	3304      	adds	r3, #4
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	4413      	add	r3, r2
 8002f02:	460a      	mov	r2, r1
 8002f04:	809a      	strh	r2, [r3, #4]
 8002f06:	e02c      	b.n	8002f62 <BSP_TS_GetState+0x2d2>
 8002f08:	200002f0 	.word	0x200002f0
 8002f0c:	200002f9 	.word	0x200002f9
 8002f10:	200002f8 	.word	0x200002f8
 8002f14:	200002fc 	.word	0x200002fc
 8002f18:	20000310 	.word	0x20000310
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8002f1c:	4b42      	ldr	r3, [pc, #264]	; (8003028 <BSP_TS_GetState+0x398>)
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	4619      	mov	r1, r3
 8002f22:	4a42      	ldr	r2, [pc, #264]	; (800302c <BSP_TS_GetState+0x39c>)
 8002f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f2a:	fb03 f301 	mul.w	r3, r3, r1
 8002f2e:	0b1b      	lsrs	r3, r3, #12
 8002f30:	b299      	uxth	r1, r3
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	4413      	add	r3, r2
 8002f3a:	460a      	mov	r2, r1
 8002f3c:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8002f3e:	4b3c      	ldr	r3, [pc, #240]	; (8003030 <BSP_TS_GetState+0x3a0>)
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	4619      	mov	r1, r3
 8002f44:	4a3b      	ldr	r2, [pc, #236]	; (8003034 <BSP_TS_GetState+0x3a4>)
 8002f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f4c:	fb03 f301 	mul.w	r3, r3, r1
 8002f50:	0b1b      	lsrs	r3, r3, #12
 8002f52:	b299      	uxth	r1, r3
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f58:	3304      	adds	r3, #4
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	460a      	mov	r2, r1
 8002f60:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8002f62:	4b35      	ldr	r3, [pc, #212]	; (8003038 <BSP_TS_GetState+0x3a8>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	b298      	uxth	r0, r3
 8002f68:	f107 010c 	add.w	r1, r7, #12
 8002f6c:	f107 0210 	add.w	r2, r7, #16
 8002f70:	f107 0308 	add.w	r3, r7, #8
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	460b      	mov	r3, r1
 8002f78:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002f7a:	f7fe f96b 	bl	8001254 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	b2d9      	uxtb	r1, r3
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f86:	4413      	add	r3, r2
 8002f88:	3316      	adds	r3, #22
 8002f8a:	460a      	mov	r2, r1
 8002f8c:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	b2d9      	uxtb	r1, r3
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f96:	4413      	add	r3, r2
 8002f98:	3320      	adds	r3, #32
 8002f9a:	460a      	mov	r2, r1
 8002f9c:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d827      	bhi.n	8002ff4 <BSP_TS_GetState+0x364>
 8002fa4:	a201      	add	r2, pc, #4	; (adr r2, 8002fac <BSP_TS_GetState+0x31c>)
 8002fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002faa:	bf00      	nop
 8002fac:	08002fbd 	.word	0x08002fbd
 8002fb0:	08002fcb 	.word	0x08002fcb
 8002fb4:	08002fd9 	.word	0x08002fd9
 8002fb8:	08002fe7 	.word	0x08002fe7
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fc0:	4413      	add	r3, r2
 8002fc2:	331b      	adds	r3, #27
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	701a      	strb	r2, [r3, #0]
          break;
 8002fc8:	e018      	b.n	8002ffc <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fce:	4413      	add	r3, r2
 8002fd0:	331b      	adds	r3, #27
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	701a      	strb	r2, [r3, #0]
          break;
 8002fd6:	e011      	b.n	8002ffc <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fdc:	4413      	add	r3, r2
 8002fde:	331b      	adds	r3, #27
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	701a      	strb	r2, [r3, #0]
          break;
 8002fe4:	e00a      	b.n	8002ffc <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fea:	4413      	add	r3, r2
 8002fec:	331b      	adds	r3, #27
 8002fee:	2200      	movs	r2, #0
 8002ff0:	701a      	strb	r2, [r3, #0]
          break;
 8002ff2:	e003      	b.n	8002ffc <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8002ffa:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8002ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ffe:	3301      	adds	r3, #1
 8003000:	64bb      	str	r3, [r7, #72]	; 0x48
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800300a:	4293      	cmp	r3, r2
 800300c:	f4ff ae61 	bcc.w	8002cd2 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f813 	bl	800303c <BSP_TS_Get_GestureId>
 8003016:	4603      	mov	r3, r0
 8003018:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800301c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8003020:	4618      	mov	r0, r3
 8003022:	3754      	adds	r7, #84	; 0x54
 8003024:	46bd      	mov	sp, r7
 8003026:	bd90      	pop	{r4, r7, pc}
 8003028:	200002f4 	.word	0x200002f4
 800302c:	200002fc 	.word	0x200002fc
 8003030:	200002f6 	.word	0x200002f6
 8003034:	20000310 	.word	0x20000310
 8003038:	200002f9 	.word	0x200002f9

0800303c <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8003044:	2300      	movs	r3, #0
 8003046:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 800304c:	4b1f      	ldr	r3, [pc, #124]	; (80030cc <BSP_TS_Get_GestureId+0x90>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	b29b      	uxth	r3, r3
 8003052:	f107 0208 	add.w	r2, r7, #8
 8003056:	4611      	mov	r1, r2
 8003058:	4618      	mov	r0, r3
 800305a:	f7fe f8e2 	bl	8001222 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2b18      	cmp	r3, #24
 8003062:	d01b      	beq.n	800309c <BSP_TS_Get_GestureId+0x60>
 8003064:	2b18      	cmp	r3, #24
 8003066:	d806      	bhi.n	8003076 <BSP_TS_Get_GestureId+0x3a>
 8003068:	2b10      	cmp	r3, #16
 800306a:	d00f      	beq.n	800308c <BSP_TS_Get_GestureId+0x50>
 800306c:	2b14      	cmp	r3, #20
 800306e:	d011      	beq.n	8003094 <BSP_TS_Get_GestureId+0x58>
 8003070:	2b00      	cmp	r3, #0
 8003072:	d007      	beq.n	8003084 <BSP_TS_Get_GestureId+0x48>
 8003074:	e022      	b.n	80030bc <BSP_TS_Get_GestureId+0x80>
 8003076:	2b40      	cmp	r3, #64	; 0x40
 8003078:	d018      	beq.n	80030ac <BSP_TS_Get_GestureId+0x70>
 800307a:	2b49      	cmp	r3, #73	; 0x49
 800307c:	d01a      	beq.n	80030b4 <BSP_TS_Get_GestureId+0x78>
 800307e:	2b1c      	cmp	r3, #28
 8003080:	d010      	beq.n	80030a4 <BSP_TS_Get_GestureId+0x68>
 8003082:	e01b      	b.n	80030bc <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800308a:	e01a      	b.n	80030c2 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003092:	e016      	b.n	80030c2 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800309a:	e012      	b.n	80030c2 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2203      	movs	r2, #3
 80030a0:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80030a2:	e00e      	b.n	80030c2 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2204      	movs	r2, #4
 80030a8:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80030aa:	e00a      	b.n	80030c2 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2205      	movs	r2, #5
 80030b0:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80030b2:	e006      	b.n	80030c2 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2206      	movs	r2, #6
 80030b8:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80030ba:	e002      	b.n	80030c2 <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
      break;
 80030c0:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 80030c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	200002f9 	.word	0x200002f9

080030d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030d4:	2003      	movs	r0, #3
 80030d6:	f000 ff57 	bl	8003f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030da:	2000      	movs	r0, #0
 80030dc:	f000 f806 	bl	80030ec <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80030e0:	f009 f9ca 	bl	800c478 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030f4:	4b12      	ldr	r3, [pc, #72]	; (8003140 <HAL_InitTick+0x54>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	4b12      	ldr	r3, [pc, #72]	; (8003144 <HAL_InitTick+0x58>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	4619      	mov	r1, r3
 80030fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003102:	fbb3 f3f1 	udiv	r3, r3, r1
 8003106:	fbb2 f3f3 	udiv	r3, r2, r3
 800310a:	4618      	mov	r0, r3
 800310c:	f000 ff71 	bl	8003ff2 <HAL_SYSTICK_Config>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e00e      	b.n	8003138 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b0f      	cmp	r3, #15
 800311e:	d80a      	bhi.n	8003136 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003120:	2200      	movs	r2, #0
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	f04f 30ff 	mov.w	r0, #4294967295
 8003128:	f000 ff39 	bl	8003f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800312c:	4a06      	ldr	r2, [pc, #24]	; (8003148 <HAL_InitTick+0x5c>)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	e000      	b.n	8003138 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
}
 8003138:	4618      	mov	r0, r3
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	200000a8 	.word	0x200000a8
 8003144:	20000048 	.word	0x20000048
 8003148:	20000044 	.word	0x20000044

0800314c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003150:	4b06      	ldr	r3, [pc, #24]	; (800316c <HAL_IncTick+0x20>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	461a      	mov	r2, r3
 8003156:	4b06      	ldr	r3, [pc, #24]	; (8003170 <HAL_IncTick+0x24>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4413      	add	r3, r2
 800315c:	4a04      	ldr	r2, [pc, #16]	; (8003170 <HAL_IncTick+0x24>)
 800315e:	6013      	str	r3, [r2, #0]
}
 8003160:	bf00      	nop
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	20000048 	.word	0x20000048
 8003170:	20000434 	.word	0x20000434

08003174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  return uwTick;
 8003178:	4b03      	ldr	r3, [pc, #12]	; (8003188 <HAL_GetTick+0x14>)
 800317a:	681b      	ldr	r3, [r3, #0]
}
 800317c:	4618      	mov	r0, r3
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	20000434 	.word	0x20000434

0800318c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003194:	f7ff ffee 	bl	8003174 <HAL_GetTick>
 8003198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a4:	d005      	beq.n	80031b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031a6:	4b09      	ldr	r3, [pc, #36]	; (80031cc <HAL_Delay+0x40>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	461a      	mov	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4413      	add	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031b2:	bf00      	nop
 80031b4:	f7ff ffde 	bl	8003174 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d8f7      	bhi.n	80031b4 <HAL_Delay+0x28>
  {
  }
}
 80031c4:	bf00      	nop
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	20000048 	.word	0x20000048

080031d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e031      	b.n	800324a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f009 f966 	bl	800c4c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f003 0310 	and.w	r3, r3, #16
 800320a:	2b00      	cmp	r3, #0
 800320c:	d116      	bne.n	800323c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003212:	4b10      	ldr	r3, [pc, #64]	; (8003254 <HAL_ADC_Init+0x84>)
 8003214:	4013      	ands	r3, r2
 8003216:	f043 0202 	orr.w	r2, r3, #2
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 fc5c 	bl	8003adc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	f023 0303 	bic.w	r3, r3, #3
 8003232:	f043 0201 	orr.w	r2, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	641a      	str	r2, [r3, #64]	; 0x40
 800323a:	e001      	b.n	8003240 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003248:	7bfb      	ldrb	r3, [r7, #15]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	ffffeefd 	.word	0xffffeefd

08003258 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_ADC_Start+0x1a>
 800326e:	2302      	movs	r3, #2
 8003270:	e0a0      	b.n	80033b4 <HAL_ADC_Start+0x15c>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b01      	cmp	r3, #1
 8003286:	d018      	beq.n	80032ba <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0201 	orr.w	r2, r2, #1
 8003296:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003298:	4b49      	ldr	r3, [pc, #292]	; (80033c0 <HAL_ADC_Start+0x168>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a49      	ldr	r2, [pc, #292]	; (80033c4 <HAL_ADC_Start+0x16c>)
 800329e:	fba2 2303 	umull	r2, r3, r2, r3
 80032a2:	0c9a      	lsrs	r2, r3, #18
 80032a4:	4613      	mov	r3, r2
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	4413      	add	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80032ac:	e002      	b.n	80032b4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	3b01      	subs	r3, #1
 80032b2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f9      	bne.n	80032ae <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d174      	bne.n	80033b2 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032cc:	4b3e      	ldr	r3, [pc, #248]	; (80033c8 <HAL_ADC_Start+0x170>)
 80032ce:	4013      	ands	r3, r2
 80032d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d007      	beq.n	80032f6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003302:	d106      	bne.n	8003312 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003308:	f023 0206 	bic.w	r2, r3, #6
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	645a      	str	r2, [r3, #68]	; 0x44
 8003310:	e002      	b.n	8003318 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003328:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800332a:	4b28      	ldr	r3, [pc, #160]	; (80033cc <HAL_ADC_Start+0x174>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f003 031f 	and.w	r3, r3, #31
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10f      	bne.n	8003356 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d136      	bne.n	80033b2 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003352:	609a      	str	r2, [r3, #8]
 8003354:	e02d      	b.n	80033b2 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1d      	ldr	r2, [pc, #116]	; (80033d0 <HAL_ADC_Start+0x178>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d10e      	bne.n	800337e <HAL_ADC_Start+0x126>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d107      	bne.n	800337e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800337c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800337e:	4b13      	ldr	r3, [pc, #76]	; (80033cc <HAL_ADC_Start+0x174>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f003 0310 	and.w	r3, r3, #16
 8003386:	2b00      	cmp	r3, #0
 8003388:	d113      	bne.n	80033b2 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a11      	ldr	r2, [pc, #68]	; (80033d4 <HAL_ADC_Start+0x17c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d10e      	bne.n	80033b2 <HAL_ADC_Start+0x15a>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d107      	bne.n	80033b2 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033b0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	200000a8 	.word	0x200000a8
 80033c4:	431bde83 	.word	0x431bde83
 80033c8:	fffff8fe 	.word	0xfffff8fe
 80033cc:	40012300 	.word	0x40012300
 80033d0:	40012000 	.word	0x40012000
 80033d4:	40012200 	.word	0x40012200

080033d8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80033e0:	2300      	movs	r3, #0
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	2300      	movs	r3, #0
 80033e6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	bf0c      	ite	eq
 80033f6:	2301      	moveq	r3, #1
 80033f8:	2300      	movne	r3, #0
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 0320 	and.w	r3, r3, #32
 8003408:	2b20      	cmp	r3, #32
 800340a:	bf0c      	ite	eq
 800340c:	2301      	moveq	r3, #1
 800340e:	2300      	movne	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d049      	beq.n	80034ae <HAL_ADC_IRQHandler+0xd6>
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d046      	beq.n	80034ae <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	f003 0310 	and.w	r3, r3, #16
 8003428:	2b00      	cmp	r3, #0
 800342a:	d105      	bne.n	8003438 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d12b      	bne.n	800349e <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800344a:	2b00      	cmp	r3, #0
 800344c:	d127      	bne.n	800349e <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003458:	2b00      	cmp	r3, #0
 800345a:	d006      	beq.n	800346a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003466:	2b00      	cmp	r3, #0
 8003468:	d119      	bne.n	800349e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0220 	bic.w	r2, r2, #32
 8003478:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d105      	bne.n	800349e <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	f043 0201 	orr.w	r2, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f008 fbfa 	bl	800bc98 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f06f 0212 	mvn.w	r2, #18
 80034ac:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	bf0c      	ite	eq
 80034bc:	2301      	moveq	r3, #1
 80034be:	2300      	movne	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ce:	2b80      	cmp	r3, #128	; 0x80
 80034d0:	bf0c      	ite	eq
 80034d2:	2301      	moveq	r3, #1
 80034d4:	2300      	movne	r3, #0
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d057      	beq.n	8003590 <HAL_ADC_IRQHandler+0x1b8>
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d054      	beq.n	8003590 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f003 0310 	and.w	r3, r3, #16
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d105      	bne.n	80034fe <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d139      	bne.n	8003580 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003512:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003516:	2b00      	cmp	r3, #0
 8003518:	d006      	beq.n	8003528 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003524:	2b00      	cmp	r3, #0
 8003526:	d12b      	bne.n	8003580 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003532:	2b00      	cmp	r3, #0
 8003534:	d124      	bne.n	8003580 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003540:	2b00      	cmp	r3, #0
 8003542:	d11d      	bne.n	8003580 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003548:	2b00      	cmp	r3, #0
 800354a:	d119      	bne.n	8003580 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800355a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d105      	bne.n	8003580 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	f043 0201 	orr.w	r2, r3, #1
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 fc27 	bl	8003dd4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f06f 020c 	mvn.w	r2, #12
 800358e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b01      	cmp	r3, #1
 800359c:	bf0c      	ite	eq
 800359e:	2301      	moveq	r3, #1
 80035a0:	2300      	movne	r3, #0
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b0:	2b40      	cmp	r3, #64	; 0x40
 80035b2:	bf0c      	ite	eq
 80035b4:	2301      	moveq	r3, #1
 80035b6:	2300      	movne	r3, #0
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d017      	beq.n	80035f2 <HAL_ADC_IRQHandler+0x21a>
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d014      	beq.n	80035f2 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d10d      	bne.n	80035f2 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f932 	bl	800384c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f06f 0201 	mvn.w	r2, #1
 80035f0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b20      	cmp	r3, #32
 80035fe:	bf0c      	ite	eq
 8003600:	2301      	moveq	r3, #1
 8003602:	2300      	movne	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003612:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003616:	bf0c      	ite	eq
 8003618:	2301      	moveq	r3, #1
 800361a:	2300      	movne	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d015      	beq.n	8003652 <HAL_ADC_IRQHandler+0x27a>
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d012      	beq.n	8003652 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003630:	f043 0202 	orr.w	r2, r3, #2
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f06f 0220 	mvn.w	r2, #32
 8003640:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f90c 	bl	8003860 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f06f 0220 	mvn.w	r2, #32
 8003650:	601a      	str	r2, [r3, #0]
  }
}
 8003652:	bf00      	nop
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8003668:	2300      	movs	r3, #0
 800366a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003672:	2b01      	cmp	r3, #1
 8003674:	d101      	bne.n	800367a <HAL_ADC_Start_DMA+0x1e>
 8003676:	2302      	movs	r3, #2
 8003678:	e0c7      	b.n	800380a <HAL_ADC_Start_DMA+0x1ae>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b01      	cmp	r3, #1
 800368e:	d018      	beq.n	80036c2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0201 	orr.w	r2, r2, #1
 800369e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80036a0:	4b5c      	ldr	r3, [pc, #368]	; (8003814 <HAL_ADC_Start_DMA+0x1b8>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a5c      	ldr	r2, [pc, #368]	; (8003818 <HAL_ADC_Start_DMA+0x1bc>)
 80036a6:	fba2 2303 	umull	r2, r3, r2, r3
 80036aa:	0c9a      	lsrs	r2, r3, #18
 80036ac:	4613      	mov	r3, r2
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	4413      	add	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80036b4:	e002      	b.n	80036bc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	3b01      	subs	r3, #1
 80036ba:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f9      	bne.n	80036b6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	f040 809b 	bne.w	8003808 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036d6:	4b51      	ldr	r3, [pc, #324]	; (800381c <HAL_ADC_Start_DMA+0x1c0>)
 80036d8:	4013      	ands	r3, r2
 80036da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d007      	beq.n	8003700 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800370c:	d106      	bne.n	800371c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	f023 0206 	bic.w	r2, r3, #6
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	645a      	str	r2, [r3, #68]	; 0x44
 800371a:	e002      	b.n	8003722 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372e:	4a3c      	ldr	r2, [pc, #240]	; (8003820 <HAL_ADC_Start_DMA+0x1c4>)
 8003730:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003736:	4a3b      	ldr	r2, [pc, #236]	; (8003824 <HAL_ADC_Start_DMA+0x1c8>)
 8003738:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373e:	4a3a      	ldr	r2, [pc, #232]	; (8003828 <HAL_ADC_Start_DMA+0x1cc>)
 8003740:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800374a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800375a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800376a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	334c      	adds	r3, #76	; 0x4c
 8003776:	4619      	mov	r1, r3
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f000 fdc4 	bl	8004308 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003780:	4b2a      	ldr	r3, [pc, #168]	; (800382c <HAL_ADC_Start_DMA+0x1d0>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f003 031f 	and.w	r3, r3, #31
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10f      	bne.n	80037ac <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d136      	bne.n	8003808 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80037a8:	609a      	str	r2, [r3, #8]
 80037aa:	e02d      	b.n	8003808 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a1f      	ldr	r2, [pc, #124]	; (8003830 <HAL_ADC_Start_DMA+0x1d4>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d10e      	bne.n	80037d4 <HAL_ADC_Start_DMA+0x178>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d107      	bne.n	80037d4 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80037d2:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80037d4:	4b15      	ldr	r3, [pc, #84]	; (800382c <HAL_ADC_Start_DMA+0x1d0>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f003 0310 	and.w	r3, r3, #16
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d113      	bne.n	8003808 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a13      	ldr	r2, [pc, #76]	; (8003834 <HAL_ADC_Start_DMA+0x1d8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d10e      	bne.n	8003808 <HAL_ADC_Start_DMA+0x1ac>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d107      	bne.n	8003808 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003806:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	200000a8 	.word	0x200000a8
 8003818:	431bde83 	.word	0x431bde83
 800381c:	fffff8fe 	.word	0xfffff8fe
 8003820:	08003cd1 	.word	0x08003cd1
 8003824:	08003d8b 	.word	0x08003d8b
 8003828:	08003da7 	.word	0x08003da7
 800382c:	40012300 	.word	0x40012300
 8003830:	40012000 	.word	0x40012000
 8003834:	40012200 	.word	0x40012200

08003838 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003888:	2b01      	cmp	r3, #1
 800388a:	d101      	bne.n	8003890 <HAL_ADC_ConfigChannel+0x1c>
 800388c:	2302      	movs	r3, #2
 800388e:	e115      	b.n	8003abc <HAL_ADC_ConfigChannel+0x248>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b09      	cmp	r3, #9
 800389e:	d935      	bls.n	800390c <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68d9      	ldr	r1, [r3, #12]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	461a      	mov	r2, r3
 80038ae:	4613      	mov	r3, r2
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	4413      	add	r3, r2
 80038b4:	3b1e      	subs	r3, #30
 80038b6:	2207      	movs	r2, #7
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	43da      	mvns	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	400a      	ands	r2, r1
 80038c4:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a7f      	ldr	r2, [pc, #508]	; (8003ac8 <HAL_ADC_ConfigChannel+0x254>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d10a      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68d9      	ldr	r1, [r3, #12]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	061a      	lsls	r2, r3, #24
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	60da      	str	r2, [r3, #12]
 80038e4:	e035      	b.n	8003952 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68d9      	ldr	r1, [r3, #12]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	4618      	mov	r0, r3
 80038f8:	4603      	mov	r3, r0
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	4403      	add	r3, r0
 80038fe:	3b1e      	subs	r3, #30
 8003900:	409a      	lsls	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	60da      	str	r2, [r3, #12]
 800390a:	e022      	b.n	8003952 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6919      	ldr	r1, [r3, #16]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	b29b      	uxth	r3, r3
 8003918:	461a      	mov	r2, r3
 800391a:	4613      	mov	r3, r2
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	4413      	add	r3, r2
 8003920:	2207      	movs	r2, #7
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	43da      	mvns	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	400a      	ands	r2, r1
 800392e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6919      	ldr	r1, [r3, #16]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	b29b      	uxth	r3, r3
 8003940:	4618      	mov	r0, r3
 8003942:	4603      	mov	r3, r0
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	4403      	add	r3, r0
 8003948:	409a      	lsls	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b06      	cmp	r3, #6
 8003958:	d824      	bhi.n	80039a4 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	4613      	mov	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	3b05      	subs	r3, #5
 800396c:	221f      	movs	r2, #31
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	43da      	mvns	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	400a      	ands	r2, r1
 800397a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	b29b      	uxth	r3, r3
 8003988:	4618      	mov	r0, r3
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	4613      	mov	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	3b05      	subs	r3, #5
 8003996:	fa00 f203 	lsl.w	r2, r0, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	635a      	str	r2, [r3, #52]	; 0x34
 80039a2:	e04c      	b.n	8003a3e <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b0c      	cmp	r3, #12
 80039aa:	d824      	bhi.n	80039f6 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	3b23      	subs	r3, #35	; 0x23
 80039be:	221f      	movs	r2, #31
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	43da      	mvns	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	400a      	ands	r2, r1
 80039cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	4618      	mov	r0, r3
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	4613      	mov	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	3b23      	subs	r3, #35	; 0x23
 80039e8:	fa00 f203 	lsl.w	r2, r0, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
 80039f4:	e023      	b.n	8003a3e <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	3b41      	subs	r3, #65	; 0x41
 8003a08:	221f      	movs	r2, #31
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	43da      	mvns	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	400a      	ands	r2, r1
 8003a16:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	4618      	mov	r0, r3
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	3b41      	subs	r3, #65	; 0x41
 8003a32:	fa00 f203 	lsl.w	r2, r0, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a22      	ldr	r2, [pc, #136]	; (8003acc <HAL_ADC_ConfigChannel+0x258>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d109      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x1e8>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b12      	cmp	r3, #18
 8003a4e:	d105      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003a50:	4b1f      	ldr	r3, [pc, #124]	; (8003ad0 <HAL_ADC_ConfigChannel+0x25c>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	4a1e      	ldr	r2, [pc, #120]	; (8003ad0 <HAL_ADC_ConfigChannel+0x25c>)
 8003a56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a5a:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a1a      	ldr	r2, [pc, #104]	; (8003acc <HAL_ADC_ConfigChannel+0x258>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d125      	bne.n	8003ab2 <HAL_ADC_ConfigChannel+0x23e>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a17      	ldr	r2, [pc, #92]	; (8003ac8 <HAL_ADC_ConfigChannel+0x254>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d003      	beq.n	8003a78 <HAL_ADC_ConfigChannel+0x204>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b11      	cmp	r3, #17
 8003a76:	d11c      	bne.n	8003ab2 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003a78:	4b15      	ldr	r3, [pc, #84]	; (8003ad0 <HAL_ADC_ConfigChannel+0x25c>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	4a14      	ldr	r2, [pc, #80]	; (8003ad0 <HAL_ADC_ConfigChannel+0x25c>)
 8003a7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a82:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a0f      	ldr	r2, [pc, #60]	; (8003ac8 <HAL_ADC_ConfigChannel+0x254>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d111      	bne.n	8003ab2 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003a8e:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <HAL_ADC_ConfigChannel+0x260>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a11      	ldr	r2, [pc, #68]	; (8003ad8 <HAL_ADC_ConfigChannel+0x264>)
 8003a94:	fba2 2303 	umull	r2, r3, r2, r3
 8003a98:	0c9a      	lsrs	r2, r3, #18
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003aa4:	e002      	b.n	8003aac <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1f9      	bne.n	8003aa6 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	10000012 	.word	0x10000012
 8003acc:	40012000 	.word	0x40012000
 8003ad0:	40012300 	.word	0x40012300
 8003ad4:	200000a8 	.word	0x200000a8
 8003ad8:	431bde83 	.word	0x431bde83

08003adc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003ae4:	4b78      	ldr	r3, [pc, #480]	; (8003cc8 <ADC_Init+0x1ec>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	4a77      	ldr	r2, [pc, #476]	; (8003cc8 <ADC_Init+0x1ec>)
 8003aea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003aee:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003af0:	4b75      	ldr	r3, [pc, #468]	; (8003cc8 <ADC_Init+0x1ec>)
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	4973      	ldr	r1, [pc, #460]	; (8003cc8 <ADC_Init+0x1ec>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6859      	ldr	r1, [r3, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	021a      	lsls	r2, r3, #8
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003b30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6859      	ldr	r1, [r3, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6899      	ldr	r1, [r3, #8]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6a:	4a58      	ldr	r2, [pc, #352]	; (8003ccc <ADC_Init+0x1f0>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d022      	beq.n	8003bb6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689a      	ldr	r2, [r3, #8]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6899      	ldr	r1, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ba0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6899      	ldr	r1, [r3, #8]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	609a      	str	r2, [r3, #8]
 8003bb4:	e00f      	b.n	8003bd6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003bd4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0202 	bic.w	r2, r2, #2
 8003be4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6899      	ldr	r1, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	005a      	lsls	r2, r3, #1
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d01b      	beq.n	8003c3c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c12:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003c22:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6859      	ldr	r1, [r3, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	035a      	lsls	r2, r3, #13
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	605a      	str	r2, [r3, #4]
 8003c3a:	e007      	b.n	8003c4c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003c5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	051a      	lsls	r2, r3, #20
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6899      	ldr	r1, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c8e:	025a      	lsls	r2, r3, #9
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6899      	ldr	r1, [r3, #8]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	029a      	lsls	r2, r3, #10
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	609a      	str	r2, [r3, #8]
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	40012300 	.word	0x40012300
 8003ccc:	0f000001 	.word	0x0f000001

08003cd0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cdc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d13c      	bne.n	8003d64 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d12b      	bne.n	8003d5c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d127      	bne.n	8003d5c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d12:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d006      	beq.n	8003d28 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d119      	bne.n	8003d5c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0220 	bic.w	r2, r2, #32
 8003d36:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d105      	bne.n	8003d5c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	f043 0201 	orr.w	r2, r3, #1
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f007 ff9b 	bl	800bc98 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003d62:	e00e      	b.n	8003d82 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d68:	f003 0310 	and.w	r3, r3, #16
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f7ff fd75 	bl	8003860 <HAL_ADC_ErrorCallback>
}
 8003d76:	e004      	b.n	8003d82 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	4798      	blx	r3
}
 8003d82:	bf00      	nop
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d96:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f7ff fd4d 	bl	8003838 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d9e:	bf00      	nop
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b084      	sub	sp, #16
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2240      	movs	r2, #64	; 0x40
 8003db8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbe:	f043 0204 	orr.w	r2, r3, #4
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f7ff fd4a 	bl	8003860 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003dcc:	bf00      	nop
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003df8:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <__NVIC_SetPriorityGrouping+0x40>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e04:	4013      	ands	r3, r2
 8003e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003e10:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <__NVIC_SetPriorityGrouping+0x44>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e16:	4a04      	ldr	r2, [pc, #16]	; (8003e28 <__NVIC_SetPriorityGrouping+0x40>)
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	60d3      	str	r3, [r2, #12]
}
 8003e1c:	bf00      	nop
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	e000ed00 	.word	0xe000ed00
 8003e2c:	05fa0000 	.word	0x05fa0000

08003e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e34:	4b04      	ldr	r3, [pc, #16]	; (8003e48 <__NVIC_GetPriorityGrouping+0x18>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	0a1b      	lsrs	r3, r3, #8
 8003e3a:	f003 0307 	and.w	r3, r3, #7
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	e000ed00 	.word	0xe000ed00

08003e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	4603      	mov	r3, r0
 8003e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	db0b      	blt.n	8003e76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e5e:	79fb      	ldrb	r3, [r7, #7]
 8003e60:	f003 021f 	and.w	r2, r3, #31
 8003e64:	4907      	ldr	r1, [pc, #28]	; (8003e84 <__NVIC_EnableIRQ+0x38>)
 8003e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	2001      	movs	r0, #1
 8003e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	e000e100 	.word	0xe000e100

08003e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	4603      	mov	r3, r0
 8003e90:	6039      	str	r1, [r7, #0]
 8003e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	db0a      	blt.n	8003eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	490c      	ldr	r1, [pc, #48]	; (8003ed4 <__NVIC_SetPriority+0x4c>)
 8003ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea6:	0112      	lsls	r2, r2, #4
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	440b      	add	r3, r1
 8003eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003eb0:	e00a      	b.n	8003ec8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	4908      	ldr	r1, [pc, #32]	; (8003ed8 <__NVIC_SetPriority+0x50>)
 8003eb8:	79fb      	ldrb	r3, [r7, #7]
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	3b04      	subs	r3, #4
 8003ec0:	0112      	lsls	r2, r2, #4
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	761a      	strb	r2, [r3, #24]
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	e000e100 	.word	0xe000e100
 8003ed8:	e000ed00 	.word	0xe000ed00

08003edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b089      	sub	sp, #36	; 0x24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f1c3 0307 	rsb	r3, r3, #7
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	bf28      	it	cs
 8003efa:	2304      	movcs	r3, #4
 8003efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	3304      	adds	r3, #4
 8003f02:	2b06      	cmp	r3, #6
 8003f04:	d902      	bls.n	8003f0c <NVIC_EncodePriority+0x30>
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	3b03      	subs	r3, #3
 8003f0a:	e000      	b.n	8003f0e <NVIC_EncodePriority+0x32>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f10:	f04f 32ff 	mov.w	r2, #4294967295
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	43da      	mvns	r2, r3
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	401a      	ands	r2, r3
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f24:	f04f 31ff 	mov.w	r1, #4294967295
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2e:	43d9      	mvns	r1, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f34:	4313      	orrs	r3, r2
         );
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3724      	adds	r7, #36	; 0x24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
	...

08003f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f54:	d301      	bcc.n	8003f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f56:	2301      	movs	r3, #1
 8003f58:	e00f      	b.n	8003f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f5a:	4a0a      	ldr	r2, [pc, #40]	; (8003f84 <SysTick_Config+0x40>)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f62:	210f      	movs	r1, #15
 8003f64:	f04f 30ff 	mov.w	r0, #4294967295
 8003f68:	f7ff ff8e 	bl	8003e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f6c:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <SysTick_Config+0x40>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f72:	4b04      	ldr	r3, [pc, #16]	; (8003f84 <SysTick_Config+0x40>)
 8003f74:	2207      	movs	r2, #7
 8003f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	e000e010 	.word	0xe000e010

08003f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7ff ff29 	bl	8003de8 <__NVIC_SetPriorityGrouping>
}
 8003f96:	bf00      	nop
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b086      	sub	sp, #24
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	60b9      	str	r1, [r7, #8]
 8003fa8:	607a      	str	r2, [r7, #4]
 8003faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003fac:	2300      	movs	r3, #0
 8003fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fb0:	f7ff ff3e 	bl	8003e30 <__NVIC_GetPriorityGrouping>
 8003fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	68b9      	ldr	r1, [r7, #8]
 8003fba:	6978      	ldr	r0, [r7, #20]
 8003fbc:	f7ff ff8e 	bl	8003edc <NVIC_EncodePriority>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff ff5d 	bl	8003e88 <__NVIC_SetPriority>
}
 8003fce:	bf00      	nop
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b082      	sub	sp, #8
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	4603      	mov	r3, r0
 8003fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff ff31 	bl	8003e4c <__NVIC_EnableIRQ>
}
 8003fea:	bf00      	nop
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b082      	sub	sp, #8
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff ffa2 	bl	8003f44 <SysTick_Config>
 8004000:	4603      	mov	r3, r0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e062      	b.n	80040e4 <HAL_DCMI_Init+0xd8>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d102      	bne.n	8004030 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else  
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f008 fac4 	bl	800c5b8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2202      	movs	r2, #2
 8004034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6819      	ldr	r1, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	4b2a      	ldr	r3, [pc, #168]	; (80040ec <HAL_DCMI_Init+0xe0>)
 8004044:	400b      	ands	r3, r1
 8004046:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6819      	ldr	r1, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800405c:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004068:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004074:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8004080:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004086:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800408c:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	601a      	str	r2, [r3, #0]
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b10      	cmp	r3, #16
 800409c:	d112      	bne.n	80040c4 <HAL_DCMI_Init+0xb8>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	7f1b      	ldrb	r3, [r3, #28]
 80040a2:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	7f5b      	ldrb	r3, [r3, #29]
 80040a8:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 80040aa:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	7f9b      	ldrb	r3, [r3, #30]
 80040b0:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 80040b2:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	7fdb      	ldrb	r3, [r3, #31]
 80040ba:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 80040c0:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 80040c2:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 021e 	orr.w	r2, r2, #30
 80040d2:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	ffe0f007 	.word	0xffe0f007

080040f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80040fc:	f7ff f83a 	bl	8003174 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e099      	b.n	8004240 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0201 	bic.w	r2, r2, #1
 800412a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800412c:	e00f      	b.n	800414e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800412e:	f7ff f821 	bl	8003174 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b05      	cmp	r3, #5
 800413a:	d908      	bls.n	800414e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2220      	movs	r2, #32
 8004140:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2203      	movs	r2, #3
 8004146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e078      	b.n	8004240 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e8      	bne.n	800412e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	4b38      	ldr	r3, [pc, #224]	; (8004248 <HAL_DMA_Init+0x158>)
 8004168:	4013      	ands	r3, r2
 800416a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800417a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004186:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004192:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	d107      	bne.n	80041b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b0:	4313      	orrs	r3, r2
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f023 0307 	bic.w	r3, r3, #7
 80041ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d117      	bne.n	8004212 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00e      	beq.n	8004212 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 fad5 	bl	80047a4 <DMA_CheckFifoParam>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d008      	beq.n	8004212 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2240      	movs	r2, #64	; 0x40
 8004204:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800420e:	2301      	movs	r3, #1
 8004210:	e016      	b.n	8004240 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 fa8c 	bl	8004738 <DMA_CalcBaseAndBitshift>
 8004220:	4603      	mov	r3, r0
 8004222:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004228:	223f      	movs	r2, #63	; 0x3f
 800422a:	409a      	lsls	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	f010803f 	.word	0xf010803f

0800424c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e050      	b.n	8004300 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d101      	bne.n	800426e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800426a:	2302      	movs	r3, #2
 800426c:	e048      	b.n	8004300 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0201 	bic.w	r2, r2, #1
 800427c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2200      	movs	r2, #0
 800428c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2200      	movs	r2, #0
 8004294:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2200      	movs	r2, #0
 800429c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2200      	movs	r2, #0
 80042a4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2221      	movs	r2, #33	; 0x21
 80042ac:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fa42 	bl	8004738 <DMA_CalcBaseAndBitshift>
 80042b4:	4603      	mov	r3, r0
 80042b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042bc:	223f      	movs	r2, #63	; 0x3f
 80042be:	409a      	lsls	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
 8004314:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004326:	2b01      	cmp	r3, #1
 8004328:	d101      	bne.n	800432e <HAL_DMA_Start_IT+0x26>
 800432a:	2302      	movs	r3, #2
 800432c:	e048      	b.n	80043c0 <HAL_DMA_Start_IT+0xb8>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b01      	cmp	r3, #1
 8004340:	d137      	bne.n	80043b2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2202      	movs	r2, #2
 8004346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	68b9      	ldr	r1, [r7, #8]
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 f9c0 	bl	80046dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004360:	223f      	movs	r2, #63	; 0x3f
 8004362:	409a      	lsls	r2, r3
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 0216 	orr.w	r2, r2, #22
 8004376:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695a      	ldr	r2, [r3, #20]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004386:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	2b00      	cmp	r3, #0
 800438e:	d007      	beq.n	80043a0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0208 	orr.w	r2, r2, #8
 800439e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0201 	orr.w	r2, r2, #1
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	e005      	b.n	80043be <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80043ba:	2302      	movs	r3, #2
 80043bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80043be:	7dfb      	ldrb	r3, [r7, #23]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3718      	adds	r7, #24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80043d0:	2300      	movs	r3, #0
 80043d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80043d4:	4b92      	ldr	r3, [pc, #584]	; (8004620 <HAL_DMA_IRQHandler+0x258>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a92      	ldr	r2, [pc, #584]	; (8004624 <HAL_DMA_IRQHandler+0x25c>)
 80043da:	fba2 2303 	umull	r2, r3, r2, r3
 80043de:	0a9b      	lsrs	r3, r3, #10
 80043e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f2:	2208      	movs	r2, #8
 80043f4:	409a      	lsls	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4013      	ands	r3, r2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d01a      	beq.n	8004434 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	d013      	beq.n	8004434 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0204 	bic.w	r2, r2, #4
 800441a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004420:	2208      	movs	r2, #8
 8004422:	409a      	lsls	r2, r3
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442c:	f043 0201 	orr.w	r2, r3, #1
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004438:	2201      	movs	r2, #1
 800443a:	409a      	lsls	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4013      	ands	r3, r2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d012      	beq.n	800446a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00b      	beq.n	800446a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004456:	2201      	movs	r2, #1
 8004458:	409a      	lsls	r2, r3
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004462:	f043 0202 	orr.w	r2, r3, #2
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446e:	2204      	movs	r2, #4
 8004470:	409a      	lsls	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4013      	ands	r3, r2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d012      	beq.n	80044a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00b      	beq.n	80044a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448c:	2204      	movs	r2, #4
 800448e:	409a      	lsls	r2, r3
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004498:	f043 0204 	orr.w	r2, r3, #4
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a4:	2210      	movs	r2, #16
 80044a6:	409a      	lsls	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4013      	ands	r3, r2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d043      	beq.n	8004538 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0308 	and.w	r3, r3, #8
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d03c      	beq.n	8004538 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c2:	2210      	movs	r2, #16
 80044c4:	409a      	lsls	r2, r3
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d018      	beq.n	800450a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d108      	bne.n	80044f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d024      	beq.n	8004538 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	4798      	blx	r3
 80044f6:	e01f      	b.n	8004538 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d01b      	beq.n	8004538 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	4798      	blx	r3
 8004508:	e016      	b.n	8004538 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004514:	2b00      	cmp	r3, #0
 8004516:	d107      	bne.n	8004528 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0208 	bic.w	r2, r2, #8
 8004526:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800453c:	2220      	movs	r2, #32
 800453e:	409a      	lsls	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4013      	ands	r3, r2
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 808e 	beq.w	8004666 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0310 	and.w	r3, r3, #16
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 8086 	beq.w	8004666 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800455e:	2220      	movs	r2, #32
 8004560:	409a      	lsls	r2, r3
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b05      	cmp	r3, #5
 8004570:	d136      	bne.n	80045e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0216 	bic.w	r2, r2, #22
 8004580:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695a      	ldr	r2, [r3, #20]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004590:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	2b00      	cmp	r3, #0
 8004598:	d103      	bne.n	80045a2 <HAL_DMA_IRQHandler+0x1da>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d007      	beq.n	80045b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0208 	bic.w	r2, r2, #8
 80045b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b6:	223f      	movs	r2, #63	; 0x3f
 80045b8:	409a      	lsls	r2, r3
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d07d      	beq.n	80046d2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	4798      	blx	r3
        }
        return;
 80045de:	e078      	b.n	80046d2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d01c      	beq.n	8004628 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d108      	bne.n	800460e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004600:	2b00      	cmp	r3, #0
 8004602:	d030      	beq.n	8004666 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	4798      	blx	r3
 800460c:	e02b      	b.n	8004666 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004612:	2b00      	cmp	r3, #0
 8004614:	d027      	beq.n	8004666 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	4798      	blx	r3
 800461e:	e022      	b.n	8004666 <HAL_DMA_IRQHandler+0x29e>
 8004620:	200000a8 	.word	0x200000a8
 8004624:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10f      	bne.n	8004656 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0210 	bic.w	r2, r2, #16
 8004644:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466a:	2b00      	cmp	r3, #0
 800466c:	d032      	beq.n	80046d4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d022      	beq.n	80046c0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2205      	movs	r2, #5
 800467e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 0201 	bic.w	r2, r2, #1
 8004690:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	3301      	adds	r3, #1
 8004696:	60bb      	str	r3, [r7, #8]
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	429a      	cmp	r2, r3
 800469c:	d307      	bcc.n	80046ae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1f2      	bne.n	8004692 <HAL_DMA_IRQHandler+0x2ca>
 80046ac:	e000      	b.n	80046b0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80046ae:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d005      	beq.n	80046d4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	4798      	blx	r3
 80046d0:	e000      	b.n	80046d4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80046d2:	bf00      	nop
    }
  }
}
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop

080046dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	2b40      	cmp	r3, #64	; 0x40
 8004708:	d108      	bne.n	800471c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800471a:	e007      	b.n	800472c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	60da      	str	r2, [r3, #12]
}
 800472c:	bf00      	nop
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	3b10      	subs	r3, #16
 8004748:	4a13      	ldr	r2, [pc, #76]	; (8004798 <DMA_CalcBaseAndBitshift+0x60>)
 800474a:	fba2 2303 	umull	r2, r3, r2, r3
 800474e:	091b      	lsrs	r3, r3, #4
 8004750:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004752:	4a12      	ldr	r2, [pc, #72]	; (800479c <DMA_CalcBaseAndBitshift+0x64>)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4413      	add	r3, r2
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b03      	cmp	r3, #3
 8004764:	d908      	bls.n	8004778 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	461a      	mov	r2, r3
 800476c:	4b0c      	ldr	r3, [pc, #48]	; (80047a0 <DMA_CalcBaseAndBitshift+0x68>)
 800476e:	4013      	ands	r3, r2
 8004770:	1d1a      	adds	r2, r3, #4
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	659a      	str	r2, [r3, #88]	; 0x58
 8004776:	e006      	b.n	8004786 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	461a      	mov	r2, r3
 800477e:	4b08      	ldr	r3, [pc, #32]	; (80047a0 <DMA_CalcBaseAndBitshift+0x68>)
 8004780:	4013      	ands	r3, r2
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800478a:	4618      	mov	r0, r3
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	aaaaaaab 	.word	0xaaaaaaab
 800479c:	0800fbe8 	.word	0x0800fbe8
 80047a0:	fffffc00 	.word	0xfffffc00

080047a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047ac:	2300      	movs	r3, #0
 80047ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d11f      	bne.n	80047fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d855      	bhi.n	8004870 <DMA_CheckFifoParam+0xcc>
 80047c4:	a201      	add	r2, pc, #4	; (adr r2, 80047cc <DMA_CheckFifoParam+0x28>)
 80047c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ca:	bf00      	nop
 80047cc:	080047dd 	.word	0x080047dd
 80047d0:	080047ef 	.word	0x080047ef
 80047d4:	080047dd 	.word	0x080047dd
 80047d8:	08004871 	.word	0x08004871
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d045      	beq.n	8004874 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047ec:	e042      	b.n	8004874 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047f6:	d13f      	bne.n	8004878 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047fc:	e03c      	b.n	8004878 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004806:	d121      	bne.n	800484c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2b03      	cmp	r3, #3
 800480c:	d836      	bhi.n	800487c <DMA_CheckFifoParam+0xd8>
 800480e:	a201      	add	r2, pc, #4	; (adr r2, 8004814 <DMA_CheckFifoParam+0x70>)
 8004810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004814:	08004825 	.word	0x08004825
 8004818:	0800482b 	.word	0x0800482b
 800481c:	08004825 	.word	0x08004825
 8004820:	0800483d 	.word	0x0800483d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	73fb      	strb	r3, [r7, #15]
      break;
 8004828:	e02f      	b.n	800488a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d024      	beq.n	8004880 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800483a:	e021      	b.n	8004880 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004844:	d11e      	bne.n	8004884 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800484a:	e01b      	b.n	8004884 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2b02      	cmp	r3, #2
 8004850:	d902      	bls.n	8004858 <DMA_CheckFifoParam+0xb4>
 8004852:	2b03      	cmp	r3, #3
 8004854:	d003      	beq.n	800485e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004856:	e018      	b.n	800488a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	73fb      	strb	r3, [r7, #15]
      break;
 800485c:	e015      	b.n	800488a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004862:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00e      	beq.n	8004888 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	73fb      	strb	r3, [r7, #15]
      break;
 800486e:	e00b      	b.n	8004888 <DMA_CheckFifoParam+0xe4>
      break;
 8004870:	bf00      	nop
 8004872:	e00a      	b.n	800488a <DMA_CheckFifoParam+0xe6>
      break;
 8004874:	bf00      	nop
 8004876:	e008      	b.n	800488a <DMA_CheckFifoParam+0xe6>
      break;
 8004878:	bf00      	nop
 800487a:	e006      	b.n	800488a <DMA_CheckFifoParam+0xe6>
      break;
 800487c:	bf00      	nop
 800487e:	e004      	b.n	800488a <DMA_CheckFifoParam+0xe6>
      break;
 8004880:	bf00      	nop
 8004882:	e002      	b.n	800488a <DMA_CheckFifoParam+0xe6>
      break;   
 8004884:	bf00      	nop
 8004886:	e000      	b.n	800488a <DMA_CheckFifoParam+0xe6>
      break;
 8004888:	bf00      	nop
    }
  } 
  
  return status; 
 800488a:	7bfb      	ldrb	r3, [r7, #15]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e039      	b.n	800491e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d106      	bne.n	80048c4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f007 ff38 	bl	800c734 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e8:	f023 0107 	bic.w	r1, r3, #7
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048fe:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <HAL_DMA2D_Init+0x90>)
 8004900:	4013      	ands	r3, r2
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	68d1      	ldr	r1, [r2, #12]
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6812      	ldr	r2, [r2, #0]
 800490a:	430b      	orrs	r3, r1
 800490c:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	ffffc000 	.word	0xffffc000

0800492c <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af02      	add	r7, sp, #8
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004940:	2b01      	cmp	r3, #1
 8004942:	d101      	bne.n	8004948 <HAL_DMA2D_Start+0x1c>
 8004944:	2302      	movs	r3, #2
 8004946:	e018      	b.n	800497a <HAL_DMA2D_Start+0x4e>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	68b9      	ldr	r1, [r7, #8]
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 fa98 	bl	8004e98 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0201 	orr.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b086      	sub	sp, #24
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d056      	beq.n	8004a4c <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 800499e:	f7fe fbe9 	bl	8003174 <HAL_GetTick>
 80049a2:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80049a4:	e04b      	b.n	8004a3e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d023      	beq.n	8004a00 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f003 0320 	and.w	r3, r3, #32
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d005      	beq.n	80049ce <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c6:	f043 0202 	orr.w	r2, r3, #2
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d005      	beq.n	80049e4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049dc:	f043 0201 	orr.w	r2, r3, #1
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2221      	movs	r2, #33	; 0x21
 80049ea:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2204      	movs	r2, #4
 80049f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e0a5      	b.n	8004b4c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a06:	d01a      	beq.n	8004a3e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004a08:	f7fe fbb4 	bl	8003174 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d302      	bcc.n	8004a1e <HAL_DMA2D_PollForTransfer+0x9c>
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10f      	bne.n	8004a3e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a22:	f043 0220 	orr.w	r2, r3, #32
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2203      	movs	r2, #3
 8004a2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e086      	b.n	8004b4c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0ac      	beq.n	80049a6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	f003 0320 	and.w	r3, r3, #32
 8004a56:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	f003 0320 	and.w	r3, r3, #32
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d061      	beq.n	8004b32 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a6e:	f7fe fb81 	bl	8003174 <HAL_GetTick>
 8004a72:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004a74:	e056      	b.n	8004b24 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d02e      	beq.n	8004ae6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f003 0308 	and.w	r3, r3, #8
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d005      	beq.n	8004a9e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a96:	f043 0204 	orr.w	r2, r3, #4
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d005      	beq.n	8004ab4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aac:	f043 0202 	orr.w	r2, r3, #2
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d005      	beq.n	8004aca <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac2:	f043 0201 	orr.w	r2, r3, #1
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2229      	movs	r2, #41	; 0x29
 8004ad0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2204      	movs	r2, #4
 8004ad6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e032      	b.n	8004b4c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aec:	d01a      	beq.n	8004b24 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004aee:	f7fe fb41 	bl	8003174 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d302      	bcc.n	8004b04 <HAL_DMA2D_PollForTransfer+0x182>
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10f      	bne.n	8004b24 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b08:	f043 0220 	orr.w	r2, r3, #32
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2203      	movs	r2, #3
 8004b14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e013      	b.n	8004b4c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f003 0310 	and.w	r3, r3, #16
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d0a1      	beq.n	8004a76 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2212      	movs	r2, #18
 8004b38:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d026      	beq.n	8004bc4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d021      	beq.n	8004bc4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b8e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b94:	f043 0201 	orr.w	r2, r3, #1
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2204      	movs	r2, #4
 8004ba8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d003      	beq.n	8004bc4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f003 0320 	and.w	r3, r3, #32
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d026      	beq.n	8004c1c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d021      	beq.n	8004c1c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004be6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2220      	movs	r2, #32
 8004bee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf4:	f043 0202 	orr.w	r2, r3, #2
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2204      	movs	r2, #4
 8004c00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f003 0308 	and.w	r3, r3, #8
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d026      	beq.n	8004c74 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d021      	beq.n	8004c74 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c3e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2208      	movs	r2, #8
 8004c46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4c:	f043 0204 	orr.w	r2, r3, #4
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2204      	movs	r2, #4
 8004c58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f003 0304 	and.w	r3, r3, #4
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d013      	beq.n	8004ca6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00e      	beq.n	8004ca6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c96:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2204      	movs	r2, #4
 8004c9e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f853 	bl	8004d4c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d024      	beq.n	8004cfa <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d01f      	beq.n	8004cfa <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004cc8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f003 0310 	and.w	r3, r3, #16
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d01f      	beq.n	8004d44 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d01a      	beq.n	8004d44 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d1c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2210      	movs	r2, #16
 8004d24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f80e 	bl	8004d60 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004d44:	bf00      	nop
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d101      	bne.n	8004d94 <HAL_DMA2D_ConfigLayer+0x20>
 8004d90:	2302      	movs	r3, #2
 8004d92:	e079      	b.n	8004e88 <HAL_DMA2D_ConfigLayer+0x114>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	3318      	adds	r3, #24
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	4413      	add	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	041b      	lsls	r3, r3, #16
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004dbe:	4b35      	ldr	r3, [pc, #212]	; (8004e94 <HAL_DMA2D_ConfigLayer+0x120>)
 8004dc0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b0a      	cmp	r3, #10
 8004dc8:	d003      	beq.n	8004dd2 <HAL_DMA2D_ConfigLayer+0x5e>
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b09      	cmp	r3, #9
 8004dd0:	d107      	bne.n	8004de2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	e005      	b.n	8004dee <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	061b      	lsls	r3, r3, #24
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d120      	bne.n	8004e36 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	43db      	mvns	r3, r3
 8004dfe:	ea02 0103 	and.w	r1, r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	6812      	ldr	r2, [r2, #0]
 8004e14:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	2b0a      	cmp	r3, #10
 8004e1c:	d003      	beq.n	8004e26 <HAL_DMA2D_ConfigLayer+0xb2>
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	2b09      	cmp	r3, #9
 8004e24:	d127      	bne.n	8004e76 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004e32:	629a      	str	r2, [r3, #40]	; 0x28
 8004e34:	e01f      	b.n	8004e76 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69da      	ldr	r2, [r3, #28]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	43db      	mvns	r3, r3
 8004e40:	ea02 0103 	and.w	r1, r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	6812      	ldr	r2, [r2, #0]
 8004e56:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2b0a      	cmp	r3, #10
 8004e5e:	d003      	beq.n	8004e68 <HAL_DMA2D_ConfigLayer+0xf4>
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	2b09      	cmp	r3, #9
 8004e66:	d106      	bne.n	8004e76 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	68da      	ldr	r2, [r3, #12]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004e74:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	371c      	adds	r7, #28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	ff03000f 	.word	0xff03000f

08004e98 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b08b      	sub	sp, #44	; 0x2c
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
 8004ea4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eac:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	041a      	lsls	r2, r3, #16
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ed0:	d174      	bne.n	8004fbc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004ed8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ee0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004ee8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d108      	bne.n	8004f0a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	431a      	orrs	r2, r3
 8004efe:	6a3b      	ldr	r3, [r7, #32]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	627b      	str	r3, [r7, #36]	; 0x24
 8004f08:	e053      	b.n	8004fb2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d106      	bne.n	8004f20 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f1e:	e048      	b.n	8004fb2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d111      	bne.n	8004f4c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	0cdb      	lsrs	r3, r3, #19
 8004f2c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	0a9b      	lsrs	r3, r3, #10
 8004f32:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	08db      	lsrs	r3, r3, #3
 8004f38:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	02db      	lsls	r3, r3, #11
 8004f42:	4313      	orrs	r3, r2
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	627b      	str	r3, [r7, #36]	; 0x24
 8004f4a:	e032      	b.n	8004fb2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	2b03      	cmp	r3, #3
 8004f52:	d117      	bne.n	8004f84 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	0fdb      	lsrs	r3, r3, #31
 8004f58:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	0cdb      	lsrs	r3, r3, #19
 8004f5e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	0adb      	lsrs	r3, r3, #11
 8004f64:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	08db      	lsrs	r3, r3, #3
 8004f6a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	029b      	lsls	r3, r3, #10
 8004f74:	431a      	orrs	r2, r3
 8004f76:	6a3b      	ldr	r3, [r7, #32]
 8004f78:	03db      	lsls	r3, r3, #15
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
 8004f82:	e016      	b.n	8004fb2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	0f1b      	lsrs	r3, r3, #28
 8004f88:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	0d1b      	lsrs	r3, r3, #20
 8004f8e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	0b1b      	lsrs	r3, r3, #12
 8004f94:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	091b      	lsrs	r3, r3, #4
 8004f9a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	011a      	lsls	r2, r3, #4
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	021b      	lsls	r3, r3, #8
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	031b      	lsls	r3, r3, #12
 8004faa:	4313      	orrs	r3, r2
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004fba:	e003      	b.n	8004fc4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	60da      	str	r2, [r3, #12]
}
 8004fc4:	bf00      	nop
 8004fc6:	372c      	adds	r7, #44	; 0x2c
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b089      	sub	sp, #36	; 0x24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004fea:	2300      	movs	r3, #0
 8004fec:	61fb      	str	r3, [r7, #28]
 8004fee:	e175      	b.n	80052dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4013      	ands	r3, r2
 8005002:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	429a      	cmp	r2, r3
 800500a:	f040 8164 	bne.w	80052d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	2b02      	cmp	r3, #2
 8005014:	d003      	beq.n	800501e <HAL_GPIO_Init+0x4e>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2b12      	cmp	r3, #18
 800501c:	d123      	bne.n	8005066 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	08da      	lsrs	r2, r3, #3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	3208      	adds	r2, #8
 8005026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800502a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f003 0307 	and.w	r3, r3, #7
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	220f      	movs	r2, #15
 8005036:	fa02 f303 	lsl.w	r3, r2, r3
 800503a:	43db      	mvns	r3, r3
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	4013      	ands	r3, r2
 8005040:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	691a      	ldr	r2, [r3, #16]
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	f003 0307 	and.w	r3, r3, #7
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	fa02 f303 	lsl.w	r3, r2, r3
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	4313      	orrs	r3, r2
 8005056:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	08da      	lsrs	r2, r3, #3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3208      	adds	r2, #8
 8005060:	69b9      	ldr	r1, [r7, #24]
 8005062:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	2203      	movs	r2, #3
 8005072:	fa02 f303 	lsl.w	r3, r2, r3
 8005076:	43db      	mvns	r3, r3
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	4013      	ands	r3, r2
 800507c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f003 0203 	and.w	r2, r3, #3
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	fa02 f303 	lsl.w	r3, r2, r3
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	4313      	orrs	r3, r2
 8005092:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d00b      	beq.n	80050ba <HAL_GPIO_Init+0xea>
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d007      	beq.n	80050ba <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80050ae:	2b11      	cmp	r3, #17
 80050b0:	d003      	beq.n	80050ba <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	2b12      	cmp	r3, #18
 80050b8:	d130      	bne.n	800511c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	2203      	movs	r2, #3
 80050c6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ca:	43db      	mvns	r3, r3
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	4013      	ands	r3, r2
 80050d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	fa02 f303 	lsl.w	r3, r2, r3
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050f0:	2201      	movs	r2, #1
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	fa02 f303 	lsl.w	r3, r2, r3
 80050f8:	43db      	mvns	r3, r3
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	4013      	ands	r3, r2
 80050fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	091b      	lsrs	r3, r3, #4
 8005106:	f003 0201 	and.w	r2, r3, #1
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	fa02 f303 	lsl.w	r3, r2, r3
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	4313      	orrs	r3, r2
 8005114:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	2203      	movs	r2, #3
 8005128:	fa02 f303 	lsl.w	r3, r2, r3
 800512c:	43db      	mvns	r3, r3
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	4013      	ands	r3, r2
 8005132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	fa02 f303 	lsl.w	r3, r2, r3
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	4313      	orrs	r3, r2
 8005144:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 80be 	beq.w	80052d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800515a:	4b65      	ldr	r3, [pc, #404]	; (80052f0 <HAL_GPIO_Init+0x320>)
 800515c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515e:	4a64      	ldr	r2, [pc, #400]	; (80052f0 <HAL_GPIO_Init+0x320>)
 8005160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005164:	6453      	str	r3, [r2, #68]	; 0x44
 8005166:	4b62      	ldr	r3, [pc, #392]	; (80052f0 <HAL_GPIO_Init+0x320>)
 8005168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800516e:	60fb      	str	r3, [r7, #12]
 8005170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005172:	4a60      	ldr	r2, [pc, #384]	; (80052f4 <HAL_GPIO_Init+0x324>)
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	089b      	lsrs	r3, r3, #2
 8005178:	3302      	adds	r3, #2
 800517a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800517e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	220f      	movs	r2, #15
 800518a:	fa02 f303 	lsl.w	r3, r2, r3
 800518e:	43db      	mvns	r3, r3
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	4013      	ands	r3, r2
 8005194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a57      	ldr	r2, [pc, #348]	; (80052f8 <HAL_GPIO_Init+0x328>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d037      	beq.n	800520e <HAL_GPIO_Init+0x23e>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a56      	ldr	r2, [pc, #344]	; (80052fc <HAL_GPIO_Init+0x32c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d031      	beq.n	800520a <HAL_GPIO_Init+0x23a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a55      	ldr	r2, [pc, #340]	; (8005300 <HAL_GPIO_Init+0x330>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d02b      	beq.n	8005206 <HAL_GPIO_Init+0x236>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a54      	ldr	r2, [pc, #336]	; (8005304 <HAL_GPIO_Init+0x334>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d025      	beq.n	8005202 <HAL_GPIO_Init+0x232>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a53      	ldr	r2, [pc, #332]	; (8005308 <HAL_GPIO_Init+0x338>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d01f      	beq.n	80051fe <HAL_GPIO_Init+0x22e>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a52      	ldr	r2, [pc, #328]	; (800530c <HAL_GPIO_Init+0x33c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d019      	beq.n	80051fa <HAL_GPIO_Init+0x22a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a51      	ldr	r2, [pc, #324]	; (8005310 <HAL_GPIO_Init+0x340>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d013      	beq.n	80051f6 <HAL_GPIO_Init+0x226>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a50      	ldr	r2, [pc, #320]	; (8005314 <HAL_GPIO_Init+0x344>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d00d      	beq.n	80051f2 <HAL_GPIO_Init+0x222>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a4f      	ldr	r2, [pc, #316]	; (8005318 <HAL_GPIO_Init+0x348>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d007      	beq.n	80051ee <HAL_GPIO_Init+0x21e>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a4e      	ldr	r2, [pc, #312]	; (800531c <HAL_GPIO_Init+0x34c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d101      	bne.n	80051ea <HAL_GPIO_Init+0x21a>
 80051e6:	2309      	movs	r3, #9
 80051e8:	e012      	b.n	8005210 <HAL_GPIO_Init+0x240>
 80051ea:	230a      	movs	r3, #10
 80051ec:	e010      	b.n	8005210 <HAL_GPIO_Init+0x240>
 80051ee:	2308      	movs	r3, #8
 80051f0:	e00e      	b.n	8005210 <HAL_GPIO_Init+0x240>
 80051f2:	2307      	movs	r3, #7
 80051f4:	e00c      	b.n	8005210 <HAL_GPIO_Init+0x240>
 80051f6:	2306      	movs	r3, #6
 80051f8:	e00a      	b.n	8005210 <HAL_GPIO_Init+0x240>
 80051fa:	2305      	movs	r3, #5
 80051fc:	e008      	b.n	8005210 <HAL_GPIO_Init+0x240>
 80051fe:	2304      	movs	r3, #4
 8005200:	e006      	b.n	8005210 <HAL_GPIO_Init+0x240>
 8005202:	2303      	movs	r3, #3
 8005204:	e004      	b.n	8005210 <HAL_GPIO_Init+0x240>
 8005206:	2302      	movs	r3, #2
 8005208:	e002      	b.n	8005210 <HAL_GPIO_Init+0x240>
 800520a:	2301      	movs	r3, #1
 800520c:	e000      	b.n	8005210 <HAL_GPIO_Init+0x240>
 800520e:	2300      	movs	r3, #0
 8005210:	69fa      	ldr	r2, [r7, #28]
 8005212:	f002 0203 	and.w	r2, r2, #3
 8005216:	0092      	lsls	r2, r2, #2
 8005218:	4093      	lsls	r3, r2
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	4313      	orrs	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005220:	4934      	ldr	r1, [pc, #208]	; (80052f4 <HAL_GPIO_Init+0x324>)
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	089b      	lsrs	r3, r3, #2
 8005226:	3302      	adds	r3, #2
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800522e:	4b3c      	ldr	r3, [pc, #240]	; (8005320 <HAL_GPIO_Init+0x350>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	43db      	mvns	r3, r3
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	4013      	ands	r3, r2
 800523c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	4313      	orrs	r3, r2
 8005250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005252:	4a33      	ldr	r2, [pc, #204]	; (8005320 <HAL_GPIO_Init+0x350>)
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005258:	4b31      	ldr	r3, [pc, #196]	; (8005320 <HAL_GPIO_Init+0x350>)
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	43db      	mvns	r3, r3
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	4013      	ands	r3, r2
 8005266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	4313      	orrs	r3, r2
 800527a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800527c:	4a28      	ldr	r2, [pc, #160]	; (8005320 <HAL_GPIO_Init+0x350>)
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005282:	4b27      	ldr	r3, [pc, #156]	; (8005320 <HAL_GPIO_Init+0x350>)
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	43db      	mvns	r3, r3
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	4013      	ands	r3, r2
 8005290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052a6:	4a1e      	ldr	r2, [pc, #120]	; (8005320 <HAL_GPIO_Init+0x350>)
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052ac:	4b1c      	ldr	r3, [pc, #112]	; (8005320 <HAL_GPIO_Init+0x350>)
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	43db      	mvns	r3, r3
 80052b6:	69ba      	ldr	r2, [r7, #24]
 80052b8:	4013      	ands	r3, r2
 80052ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d003      	beq.n	80052d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052d0:	4a13      	ldr	r2, [pc, #76]	; (8005320 <HAL_GPIO_Init+0x350>)
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	3301      	adds	r3, #1
 80052da:	61fb      	str	r3, [r7, #28]
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	2b0f      	cmp	r3, #15
 80052e0:	f67f ae86 	bls.w	8004ff0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80052e4:	bf00      	nop
 80052e6:	3724      	adds	r7, #36	; 0x24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	40023800 	.word	0x40023800
 80052f4:	40013800 	.word	0x40013800
 80052f8:	40020000 	.word	0x40020000
 80052fc:	40020400 	.word	0x40020400
 8005300:	40020800 	.word	0x40020800
 8005304:	40020c00 	.word	0x40020c00
 8005308:	40021000 	.word	0x40021000
 800530c:	40021400 	.word	0x40021400
 8005310:	40021800 	.word	0x40021800
 8005314:	40021c00 	.word	0x40021c00
 8005318:	40022000 	.word	0x40022000
 800531c:	40022400 	.word	0x40022400
 8005320:	40013c00 	.word	0x40013c00

08005324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	460b      	mov	r3, r1
 800532e:	807b      	strh	r3, [r7, #2]
 8005330:	4613      	mov	r3, r2
 8005332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005334:	787b      	ldrb	r3, [r7, #1]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800533a:	887a      	ldrh	r2, [r7, #2]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005340:	e003      	b.n	800534a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005342:	887b      	ldrh	r3, [r7, #2]
 8005344:	041a      	lsls	r2, r3, #16
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	619a      	str	r2, [r3, #24]
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
	...

08005358 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e07f      	b.n	800546a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d106      	bne.n	8005384 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f8a9 	bl	80054d6 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2224      	movs	r2, #36	; 0x24
 8005388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0201 	bic.w	r2, r2, #1
 800539a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80053a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d107      	bne.n	80053d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	689a      	ldr	r2, [r3, #8]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053ce:	609a      	str	r2, [r3, #8]
 80053d0:	e006      	b.n	80053e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80053de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d104      	bne.n	80053f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6859      	ldr	r1, [r3, #4]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	4b1d      	ldr	r3, [pc, #116]	; (8005474 <HAL_I2C_Init+0x11c>)
 80053fe:	430b      	orrs	r3, r1
 8005400:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68da      	ldr	r2, [r3, #12]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005410:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691a      	ldr	r2, [r3, #16]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	ea42 0103 	orr.w	r1, r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	021a      	lsls	r2, r3, #8
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	69d9      	ldr	r1, [r3, #28]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a1a      	ldr	r2, [r3, #32]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0201 	orr.w	r2, r2, #1
 800544a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2220      	movs	r2, #32
 8005456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3708      	adds	r7, #8
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	02008000 	.word	0x02008000

08005478 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e021      	b.n	80054ce <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2224      	movs	r2, #36	; 0x24
 800548e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 0201 	bic.w	r2, r2, #1
 80054a0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f821 	bl	80054ea <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
	...

08005500 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b088      	sub	sp, #32
 8005504:	af02      	add	r7, sp, #8
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	4608      	mov	r0, r1
 800550a:	4611      	mov	r1, r2
 800550c:	461a      	mov	r2, r3
 800550e:	4603      	mov	r3, r0
 8005510:	817b      	strh	r3, [r7, #10]
 8005512:	460b      	mov	r3, r1
 8005514:	813b      	strh	r3, [r7, #8]
 8005516:	4613      	mov	r3, r2
 8005518:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b20      	cmp	r3, #32
 8005524:	f040 80f9 	bne.w	800571a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d002      	beq.n	8005534 <HAL_I2C_Mem_Write+0x34>
 800552e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005530:	2b00      	cmp	r3, #0
 8005532:	d105      	bne.n	8005540 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800553a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e0ed      	b.n	800571c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005546:	2b01      	cmp	r3, #1
 8005548:	d101      	bne.n	800554e <HAL_I2C_Mem_Write+0x4e>
 800554a:	2302      	movs	r3, #2
 800554c:	e0e6      	b.n	800571c <HAL_I2C_Mem_Write+0x21c>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005556:	f7fd fe0d 	bl	8003174 <HAL_GetTick>
 800555a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	9300      	str	r3, [sp, #0]
 8005560:	2319      	movs	r3, #25
 8005562:	2201      	movs	r2, #1
 8005564:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 fad1 	bl	8005b10 <I2C_WaitOnFlagUntilTimeout>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e0d1      	b.n	800571c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2221      	movs	r2, #33	; 0x21
 800557c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2240      	movs	r2, #64	; 0x40
 8005584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6a3a      	ldr	r2, [r7, #32]
 8005592:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005598:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055a0:	88f8      	ldrh	r0, [r7, #6]
 80055a2:	893a      	ldrh	r2, [r7, #8]
 80055a4:	8979      	ldrh	r1, [r7, #10]
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	9301      	str	r3, [sp, #4]
 80055aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	4603      	mov	r3, r0
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 f9e1 	bl	8005978 <I2C_RequestMemoryWrite>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d005      	beq.n	80055c8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e0a9      	b.n	800571c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	2bff      	cmp	r3, #255	; 0xff
 80055d0:	d90e      	bls.n	80055f0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	22ff      	movs	r2, #255	; 0xff
 80055d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055dc:	b2da      	uxtb	r2, r3
 80055de:	8979      	ldrh	r1, [r7, #10]
 80055e0:	2300      	movs	r3, #0
 80055e2:	9300      	str	r3, [sp, #0]
 80055e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 fbb3 	bl	8005d54 <I2C_TransferConfig>
 80055ee:	e00f      	b.n	8005610 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055fe:	b2da      	uxtb	r2, r3
 8005600:	8979      	ldrh	r1, [r7, #10]
 8005602:	2300      	movs	r3, #0
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f000 fba2 	bl	8005d54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 fabb 	bl	8005b90 <I2C_WaitOnTXISFlagUntilTimeout>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d001      	beq.n	8005624 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e07b      	b.n	800571c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	781a      	ldrb	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	1c5a      	adds	r2, r3, #1
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800563e:	b29b      	uxth	r3, r3
 8005640:	3b01      	subs	r3, #1
 8005642:	b29a      	uxth	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800564c:	3b01      	subs	r3, #1
 800564e:	b29a      	uxth	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005658:	b29b      	uxth	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d034      	beq.n	80056c8 <HAL_I2C_Mem_Write+0x1c8>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005662:	2b00      	cmp	r3, #0
 8005664:	d130      	bne.n	80056c8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566c:	2200      	movs	r2, #0
 800566e:	2180      	movs	r1, #128	; 0x80
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 fa4d 	bl	8005b10 <I2C_WaitOnFlagUntilTimeout>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e04d      	b.n	800571c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005684:	b29b      	uxth	r3, r3
 8005686:	2bff      	cmp	r3, #255	; 0xff
 8005688:	d90e      	bls.n	80056a8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	22ff      	movs	r2, #255	; 0xff
 800568e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005694:	b2da      	uxtb	r2, r3
 8005696:	8979      	ldrh	r1, [r7, #10]
 8005698:	2300      	movs	r3, #0
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 fb57 	bl	8005d54 <I2C_TransferConfig>
 80056a6:	e00f      	b.n	80056c8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	8979      	ldrh	r1, [r7, #10]
 80056ba:	2300      	movs	r3, #0
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f000 fb46 	bl	8005d54 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d19e      	bne.n	8005610 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f000 fa9a 	bl	8005c10 <I2C_WaitOnSTOPFlagUntilTimeout>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e01a      	b.n	800571c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2220      	movs	r2, #32
 80056ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	6859      	ldr	r1, [r3, #4]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	4b0a      	ldr	r3, [pc, #40]	; (8005724 <HAL_I2C_Mem_Write+0x224>)
 80056fa:	400b      	ands	r3, r1
 80056fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2220      	movs	r2, #32
 8005702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	e000      	b.n	800571c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800571a:	2302      	movs	r3, #2
  }
}
 800571c:	4618      	mov	r0, r3
 800571e:	3718      	adds	r7, #24
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	fe00e800 	.word	0xfe00e800

08005728 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b088      	sub	sp, #32
 800572c:	af02      	add	r7, sp, #8
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	4608      	mov	r0, r1
 8005732:	4611      	mov	r1, r2
 8005734:	461a      	mov	r2, r3
 8005736:	4603      	mov	r3, r0
 8005738:	817b      	strh	r3, [r7, #10]
 800573a:	460b      	mov	r3, r1
 800573c:	813b      	strh	r3, [r7, #8]
 800573e:	4613      	mov	r3, r2
 8005740:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b20      	cmp	r3, #32
 800574c:	f040 80fd 	bne.w	800594a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d002      	beq.n	800575c <HAL_I2C_Mem_Read+0x34>
 8005756:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005758:	2b00      	cmp	r3, #0
 800575a:	d105      	bne.n	8005768 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005762:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e0f1      	b.n	800594c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800576e:	2b01      	cmp	r3, #1
 8005770:	d101      	bne.n	8005776 <HAL_I2C_Mem_Read+0x4e>
 8005772:	2302      	movs	r3, #2
 8005774:	e0ea      	b.n	800594c <HAL_I2C_Mem_Read+0x224>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800577e:	f7fd fcf9 	bl	8003174 <HAL_GetTick>
 8005782:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	9300      	str	r3, [sp, #0]
 8005788:	2319      	movs	r3, #25
 800578a:	2201      	movs	r2, #1
 800578c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f000 f9bd 	bl	8005b10 <I2C_WaitOnFlagUntilTimeout>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d001      	beq.n	80057a0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e0d5      	b.n	800594c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2222      	movs	r2, #34	; 0x22
 80057a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2240      	movs	r2, #64	; 0x40
 80057ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6a3a      	ldr	r2, [r7, #32]
 80057ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80057c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057c8:	88f8      	ldrh	r0, [r7, #6]
 80057ca:	893a      	ldrh	r2, [r7, #8]
 80057cc:	8979      	ldrh	r1, [r7, #10]
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	9301      	str	r3, [sp, #4]
 80057d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	4603      	mov	r3, r0
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f000 f921 	bl	8005a20 <I2C_RequestMemoryRead>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d005      	beq.n	80057f0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e0ad      	b.n	800594c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	2bff      	cmp	r3, #255	; 0xff
 80057f8:	d90e      	bls.n	8005818 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	22ff      	movs	r2, #255	; 0xff
 80057fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005804:	b2da      	uxtb	r2, r3
 8005806:	8979      	ldrh	r1, [r7, #10]
 8005808:	4b52      	ldr	r3, [pc, #328]	; (8005954 <HAL_I2C_Mem_Read+0x22c>)
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 fa9f 	bl	8005d54 <I2C_TransferConfig>
 8005816:	e00f      	b.n	8005838 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800581c:	b29a      	uxth	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005826:	b2da      	uxtb	r2, r3
 8005828:	8979      	ldrh	r1, [r7, #10]
 800582a:	4b4a      	ldr	r3, [pc, #296]	; (8005954 <HAL_I2C_Mem_Read+0x22c>)
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 fa8e 	bl	8005d54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583e:	2200      	movs	r2, #0
 8005840:	2104      	movs	r1, #4
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 f964 	bl	8005b10 <I2C_WaitOnFlagUntilTimeout>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e07c      	b.n	800594c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	b2d2      	uxtb	r2, r2
 800585e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	1c5a      	adds	r2, r3, #1
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800586e:	3b01      	subs	r3, #1
 8005870:	b29a      	uxth	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587a:	b29b      	uxth	r3, r3
 800587c:	3b01      	subs	r3, #1
 800587e:	b29a      	uxth	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005888:	b29b      	uxth	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d034      	beq.n	80058f8 <HAL_I2C_Mem_Read+0x1d0>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005892:	2b00      	cmp	r3, #0
 8005894:	d130      	bne.n	80058f8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589c:	2200      	movs	r2, #0
 800589e:	2180      	movs	r1, #128	; 0x80
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f000 f935 	bl	8005b10 <I2C_WaitOnFlagUntilTimeout>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d001      	beq.n	80058b0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e04d      	b.n	800594c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	2bff      	cmp	r3, #255	; 0xff
 80058b8:	d90e      	bls.n	80058d8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	22ff      	movs	r2, #255	; 0xff
 80058be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	8979      	ldrh	r1, [r7, #10]
 80058c8:	2300      	movs	r3, #0
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 fa3f 	bl	8005d54 <I2C_TransferConfig>
 80058d6:	e00f      	b.n	80058f8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058dc:	b29a      	uxth	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e6:	b2da      	uxtb	r2, r3
 80058e8:	8979      	ldrh	r1, [r7, #10]
 80058ea:	2300      	movs	r3, #0
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f000 fa2e 	bl	8005d54 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d19a      	bne.n	8005838 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f000 f982 	bl	8005c10 <I2C_WaitOnSTOPFlagUntilTimeout>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e01a      	b.n	800594c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2220      	movs	r2, #32
 800591c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6859      	ldr	r1, [r3, #4]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	4b0b      	ldr	r3, [pc, #44]	; (8005958 <HAL_I2C_Mem_Read+0x230>)
 800592a:	400b      	ands	r3, r1
 800592c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2220      	movs	r2, #32
 8005932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	e000      	b.n	800594c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800594a:	2302      	movs	r3, #2
  }
}
 800594c:	4618      	mov	r0, r3
 800594e:	3718      	adds	r7, #24
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	80002400 	.word	0x80002400
 8005958:	fe00e800 	.word	0xfe00e800

0800595c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800596a:	b2db      	uxtb	r3, r3
}
 800596c:	4618      	mov	r0, r3
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af02      	add	r7, sp, #8
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	4608      	mov	r0, r1
 8005982:	4611      	mov	r1, r2
 8005984:	461a      	mov	r2, r3
 8005986:	4603      	mov	r3, r0
 8005988:	817b      	strh	r3, [r7, #10]
 800598a:	460b      	mov	r3, r1
 800598c:	813b      	strh	r3, [r7, #8]
 800598e:	4613      	mov	r3, r2
 8005990:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005992:	88fb      	ldrh	r3, [r7, #6]
 8005994:	b2da      	uxtb	r2, r3
 8005996:	8979      	ldrh	r1, [r7, #10]
 8005998:	4b20      	ldr	r3, [pc, #128]	; (8005a1c <I2C_RequestMemoryWrite+0xa4>)
 800599a:	9300      	str	r3, [sp, #0]
 800599c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f000 f9d7 	bl	8005d54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059a6:	69fa      	ldr	r2, [r7, #28]
 80059a8:	69b9      	ldr	r1, [r7, #24]
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 f8f0 	bl	8005b90 <I2C_WaitOnTXISFlagUntilTimeout>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e02c      	b.n	8005a14 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059ba:	88fb      	ldrh	r3, [r7, #6]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d105      	bne.n	80059cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80059c0:	893b      	ldrh	r3, [r7, #8]
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	629a      	str	r2, [r3, #40]	; 0x28
 80059ca:	e015      	b.n	80059f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80059cc:	893b      	ldrh	r3, [r7, #8]
 80059ce:	0a1b      	lsrs	r3, r3, #8
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059da:	69fa      	ldr	r2, [r7, #28]
 80059dc:	69b9      	ldr	r1, [r7, #24]
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f000 f8d6 	bl	8005b90 <I2C_WaitOnTXISFlagUntilTimeout>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e012      	b.n	8005a14 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80059ee:	893b      	ldrh	r3, [r7, #8]
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	2200      	movs	r2, #0
 8005a00:	2180      	movs	r1, #128	; 0x80
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f000 f884 	bl	8005b10 <I2C_WaitOnFlagUntilTimeout>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e000      	b.n	8005a14 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	80002000 	.word	0x80002000

08005a20 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af02      	add	r7, sp, #8
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	4608      	mov	r0, r1
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	4603      	mov	r3, r0
 8005a30:	817b      	strh	r3, [r7, #10]
 8005a32:	460b      	mov	r3, r1
 8005a34:	813b      	strh	r3, [r7, #8]
 8005a36:	4613      	mov	r3, r2
 8005a38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005a3a:	88fb      	ldrh	r3, [r7, #6]
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	8979      	ldrh	r1, [r7, #10]
 8005a40:	4b20      	ldr	r3, [pc, #128]	; (8005ac4 <I2C_RequestMemoryRead+0xa4>)
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	2300      	movs	r3, #0
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f000 f984 	bl	8005d54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a4c:	69fa      	ldr	r2, [r7, #28]
 8005a4e:	69b9      	ldr	r1, [r7, #24]
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 f89d 	bl	8005b90 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e02c      	b.n	8005aba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a60:	88fb      	ldrh	r3, [r7, #6]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d105      	bne.n	8005a72 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a66:	893b      	ldrh	r3, [r7, #8]
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	629a      	str	r2, [r3, #40]	; 0x28
 8005a70:	e015      	b.n	8005a9e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005a72:	893b      	ldrh	r3, [r7, #8]
 8005a74:	0a1b      	lsrs	r3, r3, #8
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a80:	69fa      	ldr	r2, [r7, #28]
 8005a82:	69b9      	ldr	r1, [r7, #24]
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 f883 	bl	8005b90 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e012      	b.n	8005aba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a94:	893b      	ldrh	r3, [r7, #8]
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	9300      	str	r3, [sp, #0]
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	2140      	movs	r1, #64	; 0x40
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 f831 	bl	8005b10 <I2C_WaitOnFlagUntilTimeout>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d001      	beq.n	8005ab8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e000      	b.n	8005aba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	80002000 	.word	0x80002000

08005ac8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d103      	bne.n	8005ae6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d007      	beq.n	8005b04 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	699a      	ldr	r2, [r3, #24]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f042 0201 	orr.w	r2, r2, #1
 8005b02:	619a      	str	r2, [r3, #24]
  }
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	603b      	str	r3, [r7, #0]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b20:	e022      	b.n	8005b68 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b28:	d01e      	beq.n	8005b68 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b2a:	f7fd fb23 	bl	8003174 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	683a      	ldr	r2, [r7, #0]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d302      	bcc.n	8005b40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d113      	bne.n	8005b68 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b44:	f043 0220 	orr.w	r2, r3, #32
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e00f      	b.n	8005b88 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	699a      	ldr	r2, [r3, #24]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	4013      	ands	r3, r2
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	bf0c      	ite	eq
 8005b78:	2301      	moveq	r3, #1
 8005b7a:	2300      	movne	r3, #0
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	461a      	mov	r2, r3
 8005b80:	79fb      	ldrb	r3, [r7, #7]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d0cd      	beq.n	8005b22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b9c:	e02c      	b.n	8005bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	68b9      	ldr	r1, [r7, #8]
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 f870 	bl	8005c88 <I2C_IsAcknowledgeFailed>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e02a      	b.n	8005c08 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb8:	d01e      	beq.n	8005bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bba:	f7fd fadb 	bl	8003174 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d302      	bcc.n	8005bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d113      	bne.n	8005bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd4:	f043 0220 	orr.w	r2, r3, #32
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2220      	movs	r2, #32
 8005be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e007      	b.n	8005c08 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d1cb      	bne.n	8005b9e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c1c:	e028      	b.n	8005c70 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	68b9      	ldr	r1, [r7, #8]
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f000 f830 	bl	8005c88 <I2C_IsAcknowledgeFailed>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e026      	b.n	8005c80 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c32:	f7fd fa9f 	bl	8003174 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d302      	bcc.n	8005c48 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d113      	bne.n	8005c70 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4c:	f043 0220 	orr.w	r2, r3, #32
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2220      	movs	r2, #32
 8005c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e007      	b.n	8005c80 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	f003 0320 	and.w	r3, r3, #32
 8005c7a:	2b20      	cmp	r3, #32
 8005c7c:	d1cf      	bne.n	8005c1e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	f003 0310 	and.w	r3, r3, #16
 8005c9e:	2b10      	cmp	r3, #16
 8005ca0:	d151      	bne.n	8005d46 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ca2:	e022      	b.n	8005cea <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005caa:	d01e      	beq.n	8005cea <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cac:	f7fd fa62 	bl	8003174 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d302      	bcc.n	8005cc2 <I2C_IsAcknowledgeFailed+0x3a>
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d113      	bne.n	8005cea <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc6:	f043 0220 	orr.w	r2, r3, #32
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e02e      	b.n	8005d48 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	f003 0320 	and.w	r3, r3, #32
 8005cf4:	2b20      	cmp	r3, #32
 8005cf6:	d1d5      	bne.n	8005ca4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2210      	movs	r2, #16
 8005cfe:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2220      	movs	r2, #32
 8005d06:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f7ff fedd 	bl	8005ac8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6859      	ldr	r1, [r3, #4]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	4b0d      	ldr	r3, [pc, #52]	; (8005d50 <I2C_IsAcknowledgeFailed+0xc8>)
 8005d1a:	400b      	ands	r3, r1
 8005d1c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d22:	f043 0204 	orr.w	r2, r3, #4
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2220      	movs	r2, #32
 8005d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e000      	b.n	8005d48 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	fe00e800 	.word	0xfe00e800

08005d54 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	607b      	str	r3, [r7, #4]
 8005d5e:	460b      	mov	r3, r1
 8005d60:	817b      	strh	r3, [r7, #10]
 8005d62:	4613      	mov	r3, r2
 8005d64:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	0d5b      	lsrs	r3, r3, #21
 8005d70:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005d74:	4b0d      	ldr	r3, [pc, #52]	; (8005dac <I2C_TransferConfig+0x58>)
 8005d76:	430b      	orrs	r3, r1
 8005d78:	43db      	mvns	r3, r3
 8005d7a:	ea02 0103 	and.w	r1, r2, r3
 8005d7e:	897b      	ldrh	r3, [r7, #10]
 8005d80:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005d84:	7a7b      	ldrb	r3, [r7, #9]
 8005d86:	041b      	lsls	r3, r3, #16
 8005d88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	431a      	orrs	r2, r3
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	431a      	orrs	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005d9e:	bf00      	nop
 8005da0:	3714      	adds	r7, #20
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	03ff63ff 	.word	0x03ff63ff

08005db0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e0bf      	b.n	8005f42 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d106      	bne.n	8005ddc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f006 fcd2 	bl	800c780 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2202      	movs	r2, #2
 8005de0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	699a      	ldr	r2, [r3, #24]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005df2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6999      	ldr	r1, [r3, #24]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005e08:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	430a      	orrs	r2, r1
 8005e16:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6899      	ldr	r1, [r3, #8]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	4b4a      	ldr	r3, [pc, #296]	; (8005f4c <HAL_LTDC_Init+0x19c>)
 8005e24:	400b      	ands	r3, r1
 8005e26:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	041b      	lsls	r3, r3, #16
 8005e2e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6899      	ldr	r1, [r3, #8]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	699a      	ldr	r2, [r3, #24]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68d9      	ldr	r1, [r3, #12]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	4b3e      	ldr	r3, [pc, #248]	; (8005f4c <HAL_LTDC_Init+0x19c>)
 8005e52:	400b      	ands	r3, r1
 8005e54:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	69db      	ldr	r3, [r3, #28]
 8005e5a:	041b      	lsls	r3, r3, #16
 8005e5c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68d9      	ldr	r1, [r3, #12]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a1a      	ldr	r2, [r3, #32]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	6919      	ldr	r1, [r3, #16]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	4b33      	ldr	r3, [pc, #204]	; (8005f4c <HAL_LTDC_Init+0x19c>)
 8005e80:	400b      	ands	r3, r1
 8005e82:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	041b      	lsls	r3, r3, #16
 8005e8a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6919      	ldr	r1, [r3, #16]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	431a      	orrs	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6959      	ldr	r1, [r3, #20]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	4b27      	ldr	r3, [pc, #156]	; (8005f4c <HAL_LTDC_Init+0x19c>)
 8005eae:	400b      	ands	r3, r1
 8005eb0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb6:	041b      	lsls	r3, r3, #16
 8005eb8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	6959      	ldr	r1, [r3, #20]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ed6:	021b      	lsls	r3, r3, #8
 8005ed8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005ee0:	041b      	lsls	r3, r3, #16
 8005ee2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005f06:	431a      	orrs	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f042 0206 	orr.w	r2, r2, #6
 8005f1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	699a      	ldr	r2, [r3, #24]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f042 0201 	orr.w	r2, r2, #1
 8005f2e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	f000f800 	.word	0xf000f800

08005f50 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f66:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f003 0304 	and.w	r3, r3, #4
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d023      	beq.n	8005fba <HAL_LTDC_IRQHandler+0x6a>
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d01e      	beq.n	8005fba <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0204 	bic.w	r2, r2, #4
 8005f8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2204      	movs	r2, #4
 8005f92:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005f9a:	f043 0201 	orr.w	r2, r3, #1
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2204      	movs	r2, #4
 8005fa8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f86f 	bl	8006098 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d023      	beq.n	800600c <HAL_LTDC_IRQHandler+0xbc>
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d01e      	beq.n	800600c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f022 0202 	bic.w	r2, r2, #2
 8005fdc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005fec:	f043 0202 	orr.w	r2, r3, #2
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2204      	movs	r2, #4
 8005ffa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f846 	bl	8006098 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d01b      	beq.n	800604e <HAL_LTDC_IRQHandler+0xfe>
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b00      	cmp	r3, #0
 800601e:	d016      	beq.n	800604e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0201 	bic.w	r2, r2, #1
 800602e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2201      	movs	r2, #1
 8006036:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f82f 	bl	80060ac <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f003 0308 	and.w	r3, r3, #8
 8006054:	2b00      	cmp	r3, #0
 8006056:	d01b      	beq.n	8006090 <HAL_LTDC_IRQHandler+0x140>
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	f003 0308 	and.w	r3, r3, #8
 800605e:	2b00      	cmp	r3, #0
 8006060:	d016      	beq.n	8006090 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 0208 	bic.w	r2, r2, #8
 8006070:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2208      	movs	r2, #8
 8006078:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f818 	bl	80060c0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006090:	bf00      	nop
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80060d4:	b5b0      	push	{r4, r5, r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d101      	bne.n	80060ee <HAL_LTDC_ConfigLayer+0x1a>
 80060ea:	2302      	movs	r3, #2
 80060ec:	e02c      	b.n	8006148 <HAL_LTDC_ConfigLayer+0x74>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2202      	movs	r2, #2
 80060fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2134      	movs	r1, #52	; 0x34
 8006104:	fb01 f303 	mul.w	r3, r1, r3
 8006108:	4413      	add	r3, r2
 800610a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	4614      	mov	r4, r2
 8006112:	461d      	mov	r5, r3
 8006114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800611a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800611c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800611e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006120:	682b      	ldr	r3, [r5, #0]
 8006122:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	68b9      	ldr	r1, [r7, #8]
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f000 f81f 	bl	800616c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2201      	movs	r2, #1
 8006134:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bdb0      	pop	{r4, r5, r7, pc}

08006150 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800615e:	b2db      	uxtb	r3, r3
}
 8006160:	4618      	mov	r0, r3
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800616c:	b480      	push	{r7}
 800616e:	b089      	sub	sp, #36	; 0x24
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	0c1b      	lsrs	r3, r3, #16
 8006184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006188:	4413      	add	r3, r2
 800618a:	041b      	lsls	r3, r3, #16
 800618c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	461a      	mov	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	01db      	lsls	r3, r3, #7
 8006198:	4413      	add	r3, r2
 800619a:	3384      	adds	r3, #132	; 0x84
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	6812      	ldr	r2, [r2, #0]
 80061a2:	4611      	mov	r1, r2
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	01d2      	lsls	r2, r2, #7
 80061a8:	440a      	add	r2, r1
 80061aa:	3284      	adds	r2, #132	; 0x84
 80061ac:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80061b0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	0c1b      	lsrs	r3, r3, #16
 80061be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061c2:	4413      	add	r3, r2
 80061c4:	1c5a      	adds	r2, r3, #1
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4619      	mov	r1, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	01db      	lsls	r3, r3, #7
 80061d0:	440b      	add	r3, r1
 80061d2:	3384      	adds	r3, #132	; 0x84
 80061d4:	4619      	mov	r1, r3
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	4313      	orrs	r3, r2
 80061da:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	68da      	ldr	r2, [r3, #12]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061ea:	4413      	add	r3, r2
 80061ec:	041b      	lsls	r3, r3, #16
 80061ee:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	461a      	mov	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	01db      	lsls	r3, r3, #7
 80061fa:	4413      	add	r3, r2
 80061fc:	3384      	adds	r3, #132	; 0x84
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	6812      	ldr	r2, [r2, #0]
 8006204:	4611      	mov	r1, r2
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	01d2      	lsls	r2, r2, #7
 800620a:	440a      	add	r2, r1
 800620c:	3284      	adds	r2, #132	; 0x84
 800620e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006212:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	689a      	ldr	r2, [r3, #8]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006222:	4413      	add	r3, r2
 8006224:	1c5a      	adds	r2, r3, #1
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4619      	mov	r1, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	01db      	lsls	r3, r3, #7
 8006230:	440b      	add	r3, r1
 8006232:	3384      	adds	r3, #132	; 0x84
 8006234:	4619      	mov	r1, r3
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	4313      	orrs	r3, r2
 800623a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	461a      	mov	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	01db      	lsls	r3, r3, #7
 8006246:	4413      	add	r3, r2
 8006248:	3384      	adds	r3, #132	; 0x84
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	6812      	ldr	r2, [r2, #0]
 8006250:	4611      	mov	r1, r2
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	01d2      	lsls	r2, r2, #7
 8006256:	440a      	add	r2, r1
 8006258:	3284      	adds	r2, #132	; 0x84
 800625a:	f023 0307 	bic.w	r3, r3, #7
 800625e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	461a      	mov	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	01db      	lsls	r3, r3, #7
 800626a:	4413      	add	r3, r2
 800626c:	3384      	adds	r3, #132	; 0x84
 800626e:	461a      	mov	r2, r3
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800627c:	021b      	lsls	r3, r3, #8
 800627e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006286:	041b      	lsls	r3, r3, #16
 8006288:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	061b      	lsls	r3, r3, #24
 8006290:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	461a      	mov	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	01db      	lsls	r3, r3, #7
 800629c:	4413      	add	r3, r2
 800629e:	3384      	adds	r3, #132	; 0x84
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	461a      	mov	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	01db      	lsls	r3, r3, #7
 80062ac:	4413      	add	r3, r2
 80062ae:	3384      	adds	r3, #132	; 0x84
 80062b0:	461a      	mov	r2, r3
 80062b2:	2300      	movs	r3, #0
 80062b4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80062bc:	461a      	mov	r2, r3
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	431a      	orrs	r2, r3
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	431a      	orrs	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4619      	mov	r1, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	01db      	lsls	r3, r3, #7
 80062d0:	440b      	add	r3, r1
 80062d2:	3384      	adds	r3, #132	; 0x84
 80062d4:	4619      	mov	r1, r3
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	4313      	orrs	r3, r2
 80062da:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	461a      	mov	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	01db      	lsls	r3, r3, #7
 80062e6:	4413      	add	r3, r2
 80062e8:	3384      	adds	r3, #132	; 0x84
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	6812      	ldr	r2, [r2, #0]
 80062f0:	4611      	mov	r1, r2
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	01d2      	lsls	r2, r2, #7
 80062f6:	440a      	add	r2, r1
 80062f8:	3284      	adds	r2, #132	; 0x84
 80062fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80062fe:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	461a      	mov	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	01db      	lsls	r3, r3, #7
 800630a:	4413      	add	r3, r2
 800630c:	3384      	adds	r3, #132	; 0x84
 800630e:	461a      	mov	r2, r3
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	01db      	lsls	r3, r3, #7
 8006320:	4413      	add	r3, r2
 8006322:	3384      	adds	r3, #132	; 0x84
 8006324:	69da      	ldr	r2, [r3, #28]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4619      	mov	r1, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	01db      	lsls	r3, r3, #7
 8006330:	440b      	add	r3, r1
 8006332:	3384      	adds	r3, #132	; 0x84
 8006334:	4619      	mov	r1, r3
 8006336:	4b58      	ldr	r3, [pc, #352]	; (8006498 <LTDC_SetConfig+0x32c>)
 8006338:	4013      	ands	r3, r2
 800633a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	69da      	ldr	r2, [r3, #28]
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	6a1b      	ldr	r3, [r3, #32]
 8006344:	68f9      	ldr	r1, [r7, #12]
 8006346:	6809      	ldr	r1, [r1, #0]
 8006348:	4608      	mov	r0, r1
 800634a:	6879      	ldr	r1, [r7, #4]
 800634c:	01c9      	lsls	r1, r1, #7
 800634e:	4401      	add	r1, r0
 8006350:	3184      	adds	r1, #132	; 0x84
 8006352:	4313      	orrs	r3, r2
 8006354:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	461a      	mov	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	01db      	lsls	r3, r3, #7
 8006360:	4413      	add	r3, r2
 8006362:	3384      	adds	r3, #132	; 0x84
 8006364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	461a      	mov	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	01db      	lsls	r3, r3, #7
 8006370:	4413      	add	r3, r2
 8006372:	3384      	adds	r3, #132	; 0x84
 8006374:	461a      	mov	r2, r3
 8006376:	2300      	movs	r3, #0
 8006378:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	461a      	mov	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	01db      	lsls	r3, r3, #7
 8006384:	4413      	add	r3, r2
 8006386:	3384      	adds	r3, #132	; 0x84
 8006388:	461a      	mov	r2, r3
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d102      	bne.n	800639e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006398:	2304      	movs	r3, #4
 800639a:	61fb      	str	r3, [r7, #28]
 800639c:	e01b      	b.n	80063d6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d102      	bne.n	80063ac <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80063a6:	2303      	movs	r3, #3
 80063a8:	61fb      	str	r3, [r7, #28]
 80063aa:	e014      	b.n	80063d6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	2b04      	cmp	r3, #4
 80063b2:	d00b      	beq.n	80063cc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d007      	beq.n	80063cc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80063c0:	2b03      	cmp	r3, #3
 80063c2:	d003      	beq.n	80063cc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80063c8:	2b07      	cmp	r3, #7
 80063ca:	d102      	bne.n	80063d2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80063cc:	2302      	movs	r3, #2
 80063ce:	61fb      	str	r3, [r7, #28]
 80063d0:	e001      	b.n	80063d6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80063d2:	2301      	movs	r3, #1
 80063d4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	461a      	mov	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	01db      	lsls	r3, r3, #7
 80063e0:	4413      	add	r3, r2
 80063e2:	3384      	adds	r3, #132	; 0x84
 80063e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	6812      	ldr	r2, [r2, #0]
 80063ea:	4611      	mov	r1, r2
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	01d2      	lsls	r2, r2, #7
 80063f0:	440a      	add	r2, r1
 80063f2:	3284      	adds	r2, #132	; 0x84
 80063f4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80063f8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fe:	69fa      	ldr	r2, [r7, #28]
 8006400:	fb02 f303 	mul.w	r3, r2, r3
 8006404:	041a      	lsls	r2, r3, #16
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	6859      	ldr	r1, [r3, #4]
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	1acb      	subs	r3, r1, r3
 8006410:	69f9      	ldr	r1, [r7, #28]
 8006412:	fb01 f303 	mul.w	r3, r1, r3
 8006416:	3303      	adds	r3, #3
 8006418:	68f9      	ldr	r1, [r7, #12]
 800641a:	6809      	ldr	r1, [r1, #0]
 800641c:	4608      	mov	r0, r1
 800641e:	6879      	ldr	r1, [r7, #4]
 8006420:	01c9      	lsls	r1, r1, #7
 8006422:	4401      	add	r1, r0
 8006424:	3184      	adds	r1, #132	; 0x84
 8006426:	4313      	orrs	r3, r2
 8006428:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	461a      	mov	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	01db      	lsls	r3, r3, #7
 8006434:	4413      	add	r3, r2
 8006436:	3384      	adds	r3, #132	; 0x84
 8006438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4619      	mov	r1, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	01db      	lsls	r3, r3, #7
 8006444:	440b      	add	r3, r1
 8006446:	3384      	adds	r3, #132	; 0x84
 8006448:	4619      	mov	r1, r3
 800644a:	4b14      	ldr	r3, [pc, #80]	; (800649c <LTDC_SetConfig+0x330>)
 800644c:	4013      	ands	r3, r2
 800644e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	461a      	mov	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	01db      	lsls	r3, r3, #7
 800645a:	4413      	add	r3, r2
 800645c:	3384      	adds	r3, #132	; 0x84
 800645e:	461a      	mov	r2, r3
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006464:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	461a      	mov	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	01db      	lsls	r3, r3, #7
 8006470:	4413      	add	r3, r2
 8006472:	3384      	adds	r3, #132	; 0x84
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	6812      	ldr	r2, [r2, #0]
 800647a:	4611      	mov	r1, r2
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	01d2      	lsls	r2, r2, #7
 8006480:	440a      	add	r2, r1
 8006482:	3284      	adds	r2, #132	; 0x84
 8006484:	f043 0301 	orr.w	r3, r3, #1
 8006488:	6013      	str	r3, [r2, #0]
}
 800648a:	bf00      	nop
 800648c:	3724      	adds	r7, #36	; 0x24
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	fffff8f8 	.word	0xfffff8f8
 800649c:	fffff800 	.word	0xfffff800

080064a0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80064a0:	b480      	push	{r7}
 80064a2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064a4:	4b05      	ldr	r3, [pc, #20]	; (80064bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a04      	ldr	r2, [pc, #16]	; (80064bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80064aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064ae:	6013      	str	r3, [r2, #0]
}
 80064b0:	bf00      	nop
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	40007000 	.word	0x40007000

080064c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80064c6:	2300      	movs	r3, #0
 80064c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80064ca:	4b23      	ldr	r3, [pc, #140]	; (8006558 <HAL_PWREx_EnableOverDrive+0x98>)
 80064cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ce:	4a22      	ldr	r2, [pc, #136]	; (8006558 <HAL_PWREx_EnableOverDrive+0x98>)
 80064d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064d4:	6413      	str	r3, [r2, #64]	; 0x40
 80064d6:	4b20      	ldr	r3, [pc, #128]	; (8006558 <HAL_PWREx_EnableOverDrive+0x98>)
 80064d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064de:	603b      	str	r3, [r7, #0]
 80064e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80064e2:	4b1e      	ldr	r3, [pc, #120]	; (800655c <HAL_PWREx_EnableOverDrive+0x9c>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a1d      	ldr	r2, [pc, #116]	; (800655c <HAL_PWREx_EnableOverDrive+0x9c>)
 80064e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064ec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064ee:	f7fc fe41 	bl	8003174 <HAL_GetTick>
 80064f2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80064f4:	e009      	b.n	800650a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80064f6:	f7fc fe3d 	bl	8003174 <HAL_GetTick>
 80064fa:	4602      	mov	r2, r0
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006504:	d901      	bls.n	800650a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e022      	b.n	8006550 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800650a:	4b14      	ldr	r3, [pc, #80]	; (800655c <HAL_PWREx_EnableOverDrive+0x9c>)
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006516:	d1ee      	bne.n	80064f6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006518:	4b10      	ldr	r3, [pc, #64]	; (800655c <HAL_PWREx_EnableOverDrive+0x9c>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a0f      	ldr	r2, [pc, #60]	; (800655c <HAL_PWREx_EnableOverDrive+0x9c>)
 800651e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006522:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006524:	f7fc fe26 	bl	8003174 <HAL_GetTick>
 8006528:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800652a:	e009      	b.n	8006540 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800652c:	f7fc fe22 	bl	8003174 <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800653a:	d901      	bls.n	8006540 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e007      	b.n	8006550 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006540:	4b06      	ldr	r3, [pc, #24]	; (800655c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006548:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800654c:	d1ee      	bne.n	800652c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3708      	adds	r7, #8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	40023800 	.word	0x40023800
 800655c:	40007000 	.word	0x40007000

08006560 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af02      	add	r7, sp, #8
 8006566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800656c:	f7fc fe02 	bl	8003174 <HAL_GetTick>
 8006570:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d101      	bne.n	800657c <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e073      	b.n	8006664 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b01      	cmp	r3, #1
 8006586:	d101      	bne.n	800658c <HAL_QSPI_Init+0x2c>
 8006588:	2302      	movs	r3, #2
 800658a:	e06b      	b.n	8006664 <HAL_QSPI_Init+0x104>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10b      	bne.n	80065b8 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f006 f9b1 	bl	800c910 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80065ae:	f241 3188 	movw	r1, #5000	; 0x1388
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f85e 	bl	8006674 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	3b01      	subs	r3, #1
 80065c8:	021a      	lsls	r2, r3, #8
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	430a      	orrs	r2, r1
 80065d0:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	2200      	movs	r2, #0
 80065dc:	2120      	movs	r1, #32
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 f856 	bl	8006690 <QSPI_WaitFlagStateUntilTimeout>
 80065e4:	4603      	mov	r3, r0
 80065e6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d135      	bne.n	800665a <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	4b1d      	ldr	r3, [pc, #116]	; (800666c <HAL_QSPI_Init+0x10c>)
 80065f6:	4013      	ands	r3, r2
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	6852      	ldr	r2, [r2, #4]
 80065fc:	0611      	lsls	r1, r2, #24
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	68d2      	ldr	r2, [r2, #12]
 8006602:	4311      	orrs	r1, r2
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	69d2      	ldr	r2, [r2, #28]
 8006608:	4311      	orrs	r1, r2
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	6a12      	ldr	r2, [r2, #32]
 800660e:	4311      	orrs	r1, r2
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	6812      	ldr	r2, [r2, #0]
 8006614:	430b      	orrs	r3, r1
 8006616:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	685a      	ldr	r2, [r3, #4]
 800661e:	4b14      	ldr	r3, [pc, #80]	; (8006670 <HAL_QSPI_Init+0x110>)
 8006620:	4013      	ands	r3, r2
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	6912      	ldr	r2, [r2, #16]
 8006626:	0411      	lsls	r1, r2, #16
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	6952      	ldr	r2, [r2, #20]
 800662c:	4311      	orrs	r1, r2
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	6992      	ldr	r2, [r2, #24]
 8006632:	4311      	orrs	r1, r2
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	6812      	ldr	r2, [r2, #0]
 8006638:	430b      	orrs	r3, r1
 800663a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f042 0201 	orr.w	r2, r2, #1
 800664a:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006662:	7bfb      	ldrb	r3, [r7, #15]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	00ffff2f 	.word	0x00ffff2f
 8006670:	ffe0f8fe 	.word	0xffe0f8fe

08006674 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	683a      	ldr	r2, [r7, #0]
 8006682:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	603b      	str	r3, [r7, #0]
 800669c:	4613      	mov	r3, r2
 800669e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80066a0:	e01a      	b.n	80066d8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a8:	d016      	beq.n	80066d8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d007      	beq.n	80066c0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80066b0:	f7fc fd60 	bl	8003174 <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	69ba      	ldr	r2, [r7, #24]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d20b      	bcs.n	80066d8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2204      	movs	r2, #4
 80066c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066cc:	f043 0201 	orr.w	r2, r3, #1
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e00e      	b.n	80066f6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689a      	ldr	r2, [r3, #8]
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	4013      	ands	r3, r2
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	bf14      	ite	ne
 80066e6:	2301      	movne	r3, #1
 80066e8:	2300      	moveq	r3, #0
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	461a      	mov	r2, r3
 80066ee:	79fb      	ldrb	r3, [r7, #7]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d1d6      	bne.n	80066a2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
	...

08006700 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8006708:	2300      	movs	r3, #0
 800670a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e25c      	b.n	8006bd0 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	2b00      	cmp	r3, #0
 8006720:	f000 8087 	beq.w	8006832 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006724:	4b96      	ldr	r3, [pc, #600]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f003 030c 	and.w	r3, r3, #12
 800672c:	2b04      	cmp	r3, #4
 800672e:	d00c      	beq.n	800674a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006730:	4b93      	ldr	r3, [pc, #588]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f003 030c 	and.w	r3, r3, #12
 8006738:	2b08      	cmp	r3, #8
 800673a:	d112      	bne.n	8006762 <HAL_RCC_OscConfig+0x62>
 800673c:	4b90      	ldr	r3, [pc, #576]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006744:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006748:	d10b      	bne.n	8006762 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800674a:	4b8d      	ldr	r3, [pc, #564]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d06c      	beq.n	8006830 <HAL_RCC_OscConfig+0x130>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d168      	bne.n	8006830 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e236      	b.n	8006bd0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800676a:	d106      	bne.n	800677a <HAL_RCC_OscConfig+0x7a>
 800676c:	4b84      	ldr	r3, [pc, #528]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a83      	ldr	r2, [pc, #524]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 8006772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006776:	6013      	str	r3, [r2, #0]
 8006778:	e02e      	b.n	80067d8 <HAL_RCC_OscConfig+0xd8>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10c      	bne.n	800679c <HAL_RCC_OscConfig+0x9c>
 8006782:	4b7f      	ldr	r3, [pc, #508]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a7e      	ldr	r2, [pc, #504]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 8006788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800678c:	6013      	str	r3, [r2, #0]
 800678e:	4b7c      	ldr	r3, [pc, #496]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a7b      	ldr	r2, [pc, #492]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 8006794:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006798:	6013      	str	r3, [r2, #0]
 800679a:	e01d      	b.n	80067d8 <HAL_RCC_OscConfig+0xd8>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067a4:	d10c      	bne.n	80067c0 <HAL_RCC_OscConfig+0xc0>
 80067a6:	4b76      	ldr	r3, [pc, #472]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a75      	ldr	r2, [pc, #468]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 80067ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067b0:	6013      	str	r3, [r2, #0]
 80067b2:	4b73      	ldr	r3, [pc, #460]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a72      	ldr	r2, [pc, #456]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 80067b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067bc:	6013      	str	r3, [r2, #0]
 80067be:	e00b      	b.n	80067d8 <HAL_RCC_OscConfig+0xd8>
 80067c0:	4b6f      	ldr	r3, [pc, #444]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a6e      	ldr	r2, [pc, #440]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 80067c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067ca:	6013      	str	r3, [r2, #0]
 80067cc:	4b6c      	ldr	r3, [pc, #432]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a6b      	ldr	r2, [pc, #428]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 80067d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d013      	beq.n	8006808 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e0:	f7fc fcc8 	bl	8003174 <HAL_GetTick>
 80067e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067e6:	e008      	b.n	80067fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067e8:	f7fc fcc4 	bl	8003174 <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	2b64      	cmp	r3, #100	; 0x64
 80067f4:	d901      	bls.n	80067fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e1ea      	b.n	8006bd0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067fa:	4b61      	ldr	r3, [pc, #388]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d0f0      	beq.n	80067e8 <HAL_RCC_OscConfig+0xe8>
 8006806:	e014      	b.n	8006832 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006808:	f7fc fcb4 	bl	8003174 <HAL_GetTick>
 800680c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800680e:	e008      	b.n	8006822 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006810:	f7fc fcb0 	bl	8003174 <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	2b64      	cmp	r3, #100	; 0x64
 800681c:	d901      	bls.n	8006822 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e1d6      	b.n	8006bd0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006822:	4b57      	ldr	r3, [pc, #348]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1f0      	bne.n	8006810 <HAL_RCC_OscConfig+0x110>
 800682e:	e000      	b.n	8006832 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0302 	and.w	r3, r3, #2
 800683a:	2b00      	cmp	r3, #0
 800683c:	d069      	beq.n	8006912 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800683e:	4b50      	ldr	r3, [pc, #320]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f003 030c 	and.w	r3, r3, #12
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00b      	beq.n	8006862 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800684a:	4b4d      	ldr	r3, [pc, #308]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f003 030c 	and.w	r3, r3, #12
 8006852:	2b08      	cmp	r3, #8
 8006854:	d11c      	bne.n	8006890 <HAL_RCC_OscConfig+0x190>
 8006856:	4b4a      	ldr	r3, [pc, #296]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d116      	bne.n	8006890 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006862:	4b47      	ldr	r3, [pc, #284]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0302 	and.w	r3, r3, #2
 800686a:	2b00      	cmp	r3, #0
 800686c:	d005      	beq.n	800687a <HAL_RCC_OscConfig+0x17a>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d001      	beq.n	800687a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e1aa      	b.n	8006bd0 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800687a:	4b41      	ldr	r3, [pc, #260]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	00db      	lsls	r3, r3, #3
 8006888:	493d      	ldr	r1, [pc, #244]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 800688a:	4313      	orrs	r3, r2
 800688c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800688e:	e040      	b.n	8006912 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d023      	beq.n	80068e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006898:	4b39      	ldr	r3, [pc, #228]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a38      	ldr	r2, [pc, #224]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 800689e:	f043 0301 	orr.w	r3, r3, #1
 80068a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a4:	f7fc fc66 	bl	8003174 <HAL_GetTick>
 80068a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068aa:	e008      	b.n	80068be <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068ac:	f7fc fc62 	bl	8003174 <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d901      	bls.n	80068be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e188      	b.n	8006bd0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068be:	4b30      	ldr	r3, [pc, #192]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d0f0      	beq.n	80068ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068ca:	4b2d      	ldr	r3, [pc, #180]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	00db      	lsls	r3, r3, #3
 80068d8:	4929      	ldr	r1, [pc, #164]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	600b      	str	r3, [r1, #0]
 80068de:	e018      	b.n	8006912 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068e0:	4b27      	ldr	r3, [pc, #156]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a26      	ldr	r2, [pc, #152]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 80068e6:	f023 0301 	bic.w	r3, r3, #1
 80068ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ec:	f7fc fc42 	bl	8003174 <HAL_GetTick>
 80068f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068f2:	e008      	b.n	8006906 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068f4:	f7fc fc3e 	bl	8003174 <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d901      	bls.n	8006906 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e164      	b.n	8006bd0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006906:	4b1e      	ldr	r3, [pc, #120]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0302 	and.w	r3, r3, #2
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1f0      	bne.n	80068f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0308 	and.w	r3, r3, #8
 800691a:	2b00      	cmp	r3, #0
 800691c:	d038      	beq.n	8006990 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d019      	beq.n	800695a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006926:	4b16      	ldr	r3, [pc, #88]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 8006928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800692a:	4a15      	ldr	r2, [pc, #84]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 800692c:	f043 0301 	orr.w	r3, r3, #1
 8006930:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006932:	f7fc fc1f 	bl	8003174 <HAL_GetTick>
 8006936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006938:	e008      	b.n	800694c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800693a:	f7fc fc1b 	bl	8003174 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	2b02      	cmp	r3, #2
 8006946:	d901      	bls.n	800694c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e141      	b.n	8006bd0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800694c:	4b0c      	ldr	r3, [pc, #48]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 800694e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006950:	f003 0302 	and.w	r3, r3, #2
 8006954:	2b00      	cmp	r3, #0
 8006956:	d0f0      	beq.n	800693a <HAL_RCC_OscConfig+0x23a>
 8006958:	e01a      	b.n	8006990 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800695a:	4b09      	ldr	r3, [pc, #36]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 800695c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800695e:	4a08      	ldr	r2, [pc, #32]	; (8006980 <HAL_RCC_OscConfig+0x280>)
 8006960:	f023 0301 	bic.w	r3, r3, #1
 8006964:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006966:	f7fc fc05 	bl	8003174 <HAL_GetTick>
 800696a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800696c:	e00a      	b.n	8006984 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800696e:	f7fc fc01 	bl	8003174 <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	2b02      	cmp	r3, #2
 800697a:	d903      	bls.n	8006984 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e127      	b.n	8006bd0 <HAL_RCC_OscConfig+0x4d0>
 8006980:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006984:	4b94      	ldr	r3, [pc, #592]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 8006986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006988:	f003 0302 	and.w	r3, r3, #2
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1ee      	bne.n	800696e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0304 	and.w	r3, r3, #4
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 80a4 	beq.w	8006ae6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800699e:	4b8e      	ldr	r3, [pc, #568]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 80069a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10d      	bne.n	80069c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80069aa:	4b8b      	ldr	r3, [pc, #556]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 80069ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ae:	4a8a      	ldr	r2, [pc, #552]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 80069b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069b4:	6413      	str	r3, [r2, #64]	; 0x40
 80069b6:	4b88      	ldr	r3, [pc, #544]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 80069b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069be:	60fb      	str	r3, [r7, #12]
 80069c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80069c2:	2301      	movs	r3, #1
 80069c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069c6:	4b85      	ldr	r3, [pc, #532]	; (8006bdc <HAL_RCC_OscConfig+0x4dc>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d118      	bne.n	8006a04 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80069d2:	4b82      	ldr	r3, [pc, #520]	; (8006bdc <HAL_RCC_OscConfig+0x4dc>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a81      	ldr	r2, [pc, #516]	; (8006bdc <HAL_RCC_OscConfig+0x4dc>)
 80069d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069de:	f7fc fbc9 	bl	8003174 <HAL_GetTick>
 80069e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069e4:	e008      	b.n	80069f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80069e6:	f7fc fbc5 	bl	8003174 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	2b64      	cmp	r3, #100	; 0x64
 80069f2:	d901      	bls.n	80069f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e0eb      	b.n	8006bd0 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069f8:	4b78      	ldr	r3, [pc, #480]	; (8006bdc <HAL_RCC_OscConfig+0x4dc>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d0f0      	beq.n	80069e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d106      	bne.n	8006a1a <HAL_RCC_OscConfig+0x31a>
 8006a0c:	4b72      	ldr	r3, [pc, #456]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 8006a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a10:	4a71      	ldr	r2, [pc, #452]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 8006a12:	f043 0301 	orr.w	r3, r3, #1
 8006a16:	6713      	str	r3, [r2, #112]	; 0x70
 8006a18:	e02d      	b.n	8006a76 <HAL_RCC_OscConfig+0x376>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10c      	bne.n	8006a3c <HAL_RCC_OscConfig+0x33c>
 8006a22:	4b6d      	ldr	r3, [pc, #436]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 8006a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a26:	4a6c      	ldr	r2, [pc, #432]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 8006a28:	f023 0301 	bic.w	r3, r3, #1
 8006a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8006a2e:	4b6a      	ldr	r3, [pc, #424]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 8006a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a32:	4a69      	ldr	r2, [pc, #420]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 8006a34:	f023 0304 	bic.w	r3, r3, #4
 8006a38:	6713      	str	r3, [r2, #112]	; 0x70
 8006a3a:	e01c      	b.n	8006a76 <HAL_RCC_OscConfig+0x376>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	2b05      	cmp	r3, #5
 8006a42:	d10c      	bne.n	8006a5e <HAL_RCC_OscConfig+0x35e>
 8006a44:	4b64      	ldr	r3, [pc, #400]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 8006a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a48:	4a63      	ldr	r2, [pc, #396]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 8006a4a:	f043 0304 	orr.w	r3, r3, #4
 8006a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8006a50:	4b61      	ldr	r3, [pc, #388]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 8006a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a54:	4a60      	ldr	r2, [pc, #384]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 8006a56:	f043 0301 	orr.w	r3, r3, #1
 8006a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8006a5c:	e00b      	b.n	8006a76 <HAL_RCC_OscConfig+0x376>
 8006a5e:	4b5e      	ldr	r3, [pc, #376]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 8006a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a62:	4a5d      	ldr	r2, [pc, #372]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 8006a64:	f023 0301 	bic.w	r3, r3, #1
 8006a68:	6713      	str	r3, [r2, #112]	; 0x70
 8006a6a:	4b5b      	ldr	r3, [pc, #364]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 8006a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a6e:	4a5a      	ldr	r2, [pc, #360]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 8006a70:	f023 0304 	bic.w	r3, r3, #4
 8006a74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d015      	beq.n	8006aaa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a7e:	f7fc fb79 	bl	8003174 <HAL_GetTick>
 8006a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a84:	e00a      	b.n	8006a9c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a86:	f7fc fb75 	bl	8003174 <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d901      	bls.n	8006a9c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e099      	b.n	8006bd0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a9c:	4b4e      	ldr	r3, [pc, #312]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 8006a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa0:	f003 0302 	and.w	r3, r3, #2
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d0ee      	beq.n	8006a86 <HAL_RCC_OscConfig+0x386>
 8006aa8:	e014      	b.n	8006ad4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aaa:	f7fc fb63 	bl	8003174 <HAL_GetTick>
 8006aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ab0:	e00a      	b.n	8006ac8 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ab2:	f7fc fb5f 	bl	8003174 <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d901      	bls.n	8006ac8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e083      	b.n	8006bd0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ac8:	4b43      	ldr	r3, [pc, #268]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 8006aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006acc:	f003 0302 	and.w	r3, r3, #2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1ee      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ad4:	7dfb      	ldrb	r3, [r7, #23]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d105      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ada:	4b3f      	ldr	r3, [pc, #252]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 8006adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ade:	4a3e      	ldr	r2, [pc, #248]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 8006ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ae4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d06f      	beq.n	8006bce <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006aee:	4b3a      	ldr	r3, [pc, #232]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f003 030c 	and.w	r3, r3, #12
 8006af6:	2b08      	cmp	r3, #8
 8006af8:	d067      	beq.n	8006bca <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d149      	bne.n	8006b96 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b02:	4b35      	ldr	r3, [pc, #212]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a34      	ldr	r2, [pc, #208]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 8006b08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b0e:	f7fc fb31 	bl	8003174 <HAL_GetTick>
 8006b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b14:	e008      	b.n	8006b28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b16:	f7fc fb2d 	bl	8003174 <HAL_GetTick>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d901      	bls.n	8006b28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e053      	b.n	8006bd0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b28:	4b2b      	ldr	r3, [pc, #172]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1f0      	bne.n	8006b16 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	69da      	ldr	r2, [r3, #28]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
 8006b3c:	431a      	orrs	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b42:	019b      	lsls	r3, r3, #6
 8006b44:	431a      	orrs	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4a:	085b      	lsrs	r3, r3, #1
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	041b      	lsls	r3, r3, #16
 8006b50:	431a      	orrs	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b56:	061b      	lsls	r3, r3, #24
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	4a1f      	ldr	r2, [pc, #124]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 8006b5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b60:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b62:	4b1d      	ldr	r3, [pc, #116]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a1c      	ldr	r2, [pc, #112]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 8006b68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b6e:	f7fc fb01 	bl	8003174 <HAL_GetTick>
 8006b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b74:	e008      	b.n	8006b88 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b76:	f7fc fafd 	bl	8003174 <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d901      	bls.n	8006b88 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e023      	b.n	8006bd0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b88:	4b13      	ldr	r3, [pc, #76]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d0f0      	beq.n	8006b76 <HAL_RCC_OscConfig+0x476>
 8006b94:	e01b      	b.n	8006bce <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b96:	4b10      	ldr	r3, [pc, #64]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a0f      	ldr	r2, [pc, #60]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 8006b9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ba0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba2:	f7fc fae7 	bl	8003174 <HAL_GetTick>
 8006ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ba8:	e008      	b.n	8006bbc <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006baa:	f7fc fae3 	bl	8003174 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d901      	bls.n	8006bbc <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e009      	b.n	8006bd0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bbc:	4b06      	ldr	r3, [pc, #24]	; (8006bd8 <HAL_RCC_OscConfig+0x4d8>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1f0      	bne.n	8006baa <HAL_RCC_OscConfig+0x4aa>
 8006bc8:	e001      	b.n	8006bce <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e000      	b.n	8006bd0 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3718      	adds	r7, #24
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	40023800 	.word	0x40023800
 8006bdc:	40007000 	.word	0x40007000

08006be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006bea:	2300      	movs	r3, #0
 8006bec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e0ce      	b.n	8006d96 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006bf8:	4b69      	ldr	r3, [pc, #420]	; (8006da0 <HAL_RCC_ClockConfig+0x1c0>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 030f 	and.w	r3, r3, #15
 8006c00:	683a      	ldr	r2, [r7, #0]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d910      	bls.n	8006c28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c06:	4b66      	ldr	r3, [pc, #408]	; (8006da0 <HAL_RCC_ClockConfig+0x1c0>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f023 020f 	bic.w	r2, r3, #15
 8006c0e:	4964      	ldr	r1, [pc, #400]	; (8006da0 <HAL_RCC_ClockConfig+0x1c0>)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c16:	4b62      	ldr	r3, [pc, #392]	; (8006da0 <HAL_RCC_ClockConfig+0x1c0>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 030f 	and.w	r3, r3, #15
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d001      	beq.n	8006c28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e0b6      	b.n	8006d96 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0302 	and.w	r3, r3, #2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d020      	beq.n	8006c76 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0304 	and.w	r3, r3, #4
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d005      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c40:	4b58      	ldr	r3, [pc, #352]	; (8006da4 <HAL_RCC_ClockConfig+0x1c4>)
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	4a57      	ldr	r2, [pc, #348]	; (8006da4 <HAL_RCC_ClockConfig+0x1c4>)
 8006c46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0308 	and.w	r3, r3, #8
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d005      	beq.n	8006c64 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c58:	4b52      	ldr	r3, [pc, #328]	; (8006da4 <HAL_RCC_ClockConfig+0x1c4>)
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	4a51      	ldr	r2, [pc, #324]	; (8006da4 <HAL_RCC_ClockConfig+0x1c4>)
 8006c5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c64:	4b4f      	ldr	r3, [pc, #316]	; (8006da4 <HAL_RCC_ClockConfig+0x1c4>)
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	494c      	ldr	r1, [pc, #304]	; (8006da4 <HAL_RCC_ClockConfig+0x1c4>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d040      	beq.n	8006d04 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d107      	bne.n	8006c9a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c8a:	4b46      	ldr	r3, [pc, #280]	; (8006da4 <HAL_RCC_ClockConfig+0x1c4>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d115      	bne.n	8006cc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e07d      	b.n	8006d96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d107      	bne.n	8006cb2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ca2:	4b40      	ldr	r3, [pc, #256]	; (8006da4 <HAL_RCC_ClockConfig+0x1c4>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d109      	bne.n	8006cc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e071      	b.n	8006d96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cb2:	4b3c      	ldr	r3, [pc, #240]	; (8006da4 <HAL_RCC_ClockConfig+0x1c4>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0302 	and.w	r3, r3, #2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e069      	b.n	8006d96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cc2:	4b38      	ldr	r3, [pc, #224]	; (8006da4 <HAL_RCC_ClockConfig+0x1c4>)
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f023 0203 	bic.w	r2, r3, #3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	4935      	ldr	r1, [pc, #212]	; (8006da4 <HAL_RCC_ClockConfig+0x1c4>)
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cd4:	f7fc fa4e 	bl	8003174 <HAL_GetTick>
 8006cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cda:	e00a      	b.n	8006cf2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cdc:	f7fc fa4a 	bl	8003174 <HAL_GetTick>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d901      	bls.n	8006cf2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e051      	b.n	8006d96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cf2:	4b2c      	ldr	r3, [pc, #176]	; (8006da4 <HAL_RCC_ClockConfig+0x1c4>)
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f003 020c 	and.w	r2, r3, #12
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d1eb      	bne.n	8006cdc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d04:	4b26      	ldr	r3, [pc, #152]	; (8006da0 <HAL_RCC_ClockConfig+0x1c0>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 030f 	and.w	r3, r3, #15
 8006d0c:	683a      	ldr	r2, [r7, #0]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d210      	bcs.n	8006d34 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d12:	4b23      	ldr	r3, [pc, #140]	; (8006da0 <HAL_RCC_ClockConfig+0x1c0>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f023 020f 	bic.w	r2, r3, #15
 8006d1a:	4921      	ldr	r1, [pc, #132]	; (8006da0 <HAL_RCC_ClockConfig+0x1c0>)
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d22:	4b1f      	ldr	r3, [pc, #124]	; (8006da0 <HAL_RCC_ClockConfig+0x1c0>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 030f 	and.w	r3, r3, #15
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d001      	beq.n	8006d34 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e030      	b.n	8006d96 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0304 	and.w	r3, r3, #4
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d008      	beq.n	8006d52 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d40:	4b18      	ldr	r3, [pc, #96]	; (8006da4 <HAL_RCC_ClockConfig+0x1c4>)
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	4915      	ldr	r1, [pc, #84]	; (8006da4 <HAL_RCC_ClockConfig+0x1c4>)
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0308 	and.w	r3, r3, #8
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d009      	beq.n	8006d72 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006d5e:	4b11      	ldr	r3, [pc, #68]	; (8006da4 <HAL_RCC_ClockConfig+0x1c4>)
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	00db      	lsls	r3, r3, #3
 8006d6c:	490d      	ldr	r1, [pc, #52]	; (8006da4 <HAL_RCC_ClockConfig+0x1c4>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d72:	f000 f81d 	bl	8006db0 <HAL_RCC_GetSysClockFreq>
 8006d76:	4601      	mov	r1, r0
 8006d78:	4b0a      	ldr	r3, [pc, #40]	; (8006da4 <HAL_RCC_ClockConfig+0x1c4>)
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	091b      	lsrs	r3, r3, #4
 8006d7e:	f003 030f 	and.w	r3, r3, #15
 8006d82:	4a09      	ldr	r2, [pc, #36]	; (8006da8 <HAL_RCC_ClockConfig+0x1c8>)
 8006d84:	5cd3      	ldrb	r3, [r2, r3]
 8006d86:	fa21 f303 	lsr.w	r3, r1, r3
 8006d8a:	4a08      	ldr	r2, [pc, #32]	; (8006dac <HAL_RCC_ClockConfig+0x1cc>)
 8006d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006d8e:	2000      	movs	r0, #0
 8006d90:	f7fc f9ac 	bl	80030ec <HAL_InitTick>

  return HAL_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	40023c00 	.word	0x40023c00
 8006da4:	40023800 	.word	0x40023800
 8006da8:	0800fbf0 	.word	0x0800fbf0
 8006dac:	200000a8 	.word	0x200000a8

08006db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006db6:	2300      	movs	r3, #0
 8006db8:	607b      	str	r3, [r7, #4]
 8006dba:	2300      	movs	r3, #0
 8006dbc:	60fb      	str	r3, [r7, #12]
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006dc6:	4b50      	ldr	r3, [pc, #320]	; (8006f08 <HAL_RCC_GetSysClockFreq+0x158>)
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f003 030c 	and.w	r3, r3, #12
 8006dce:	2b04      	cmp	r3, #4
 8006dd0:	d007      	beq.n	8006de2 <HAL_RCC_GetSysClockFreq+0x32>
 8006dd2:	2b08      	cmp	r3, #8
 8006dd4:	d008      	beq.n	8006de8 <HAL_RCC_GetSysClockFreq+0x38>
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f040 808d 	bne.w	8006ef6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ddc:	4b4b      	ldr	r3, [pc, #300]	; (8006f0c <HAL_RCC_GetSysClockFreq+0x15c>)
 8006dde:	60bb      	str	r3, [r7, #8]
       break;
 8006de0:	e08c      	b.n	8006efc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006de2:	4b4b      	ldr	r3, [pc, #300]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x160>)
 8006de4:	60bb      	str	r3, [r7, #8]
      break;
 8006de6:	e089      	b.n	8006efc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006de8:	4b47      	ldr	r3, [pc, #284]	; (8006f08 <HAL_RCC_GetSysClockFreq+0x158>)
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006df0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006df2:	4b45      	ldr	r3, [pc, #276]	; (8006f08 <HAL_RCC_GetSysClockFreq+0x158>)
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d023      	beq.n	8006e46 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dfe:	4b42      	ldr	r3, [pc, #264]	; (8006f08 <HAL_RCC_GetSysClockFreq+0x158>)
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	099b      	lsrs	r3, r3, #6
 8006e04:	f04f 0400 	mov.w	r4, #0
 8006e08:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006e0c:	f04f 0200 	mov.w	r2, #0
 8006e10:	ea03 0501 	and.w	r5, r3, r1
 8006e14:	ea04 0602 	and.w	r6, r4, r2
 8006e18:	4a3d      	ldr	r2, [pc, #244]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x160>)
 8006e1a:	fb02 f106 	mul.w	r1, r2, r6
 8006e1e:	2200      	movs	r2, #0
 8006e20:	fb02 f205 	mul.w	r2, r2, r5
 8006e24:	440a      	add	r2, r1
 8006e26:	493a      	ldr	r1, [pc, #232]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x160>)
 8006e28:	fba5 0101 	umull	r0, r1, r5, r1
 8006e2c:	1853      	adds	r3, r2, r1
 8006e2e:	4619      	mov	r1, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f04f 0400 	mov.w	r4, #0
 8006e36:	461a      	mov	r2, r3
 8006e38:	4623      	mov	r3, r4
 8006e3a:	f7f9 fec1 	bl	8000bc0 <__aeabi_uldivmod>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	460c      	mov	r4, r1
 8006e42:	60fb      	str	r3, [r7, #12]
 8006e44:	e049      	b.n	8006eda <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e46:	4b30      	ldr	r3, [pc, #192]	; (8006f08 <HAL_RCC_GetSysClockFreq+0x158>)
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	099b      	lsrs	r3, r3, #6
 8006e4c:	f04f 0400 	mov.w	r4, #0
 8006e50:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006e54:	f04f 0200 	mov.w	r2, #0
 8006e58:	ea03 0501 	and.w	r5, r3, r1
 8006e5c:	ea04 0602 	and.w	r6, r4, r2
 8006e60:	4629      	mov	r1, r5
 8006e62:	4632      	mov	r2, r6
 8006e64:	f04f 0300 	mov.w	r3, #0
 8006e68:	f04f 0400 	mov.w	r4, #0
 8006e6c:	0154      	lsls	r4, r2, #5
 8006e6e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006e72:	014b      	lsls	r3, r1, #5
 8006e74:	4619      	mov	r1, r3
 8006e76:	4622      	mov	r2, r4
 8006e78:	1b49      	subs	r1, r1, r5
 8006e7a:	eb62 0206 	sbc.w	r2, r2, r6
 8006e7e:	f04f 0300 	mov.w	r3, #0
 8006e82:	f04f 0400 	mov.w	r4, #0
 8006e86:	0194      	lsls	r4, r2, #6
 8006e88:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006e8c:	018b      	lsls	r3, r1, #6
 8006e8e:	1a5b      	subs	r3, r3, r1
 8006e90:	eb64 0402 	sbc.w	r4, r4, r2
 8006e94:	f04f 0100 	mov.w	r1, #0
 8006e98:	f04f 0200 	mov.w	r2, #0
 8006e9c:	00e2      	lsls	r2, r4, #3
 8006e9e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006ea2:	00d9      	lsls	r1, r3, #3
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	4614      	mov	r4, r2
 8006ea8:	195b      	adds	r3, r3, r5
 8006eaa:	eb44 0406 	adc.w	r4, r4, r6
 8006eae:	f04f 0100 	mov.w	r1, #0
 8006eb2:	f04f 0200 	mov.w	r2, #0
 8006eb6:	02a2      	lsls	r2, r4, #10
 8006eb8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006ebc:	0299      	lsls	r1, r3, #10
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	4614      	mov	r4, r2
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	4621      	mov	r1, r4
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f04f 0400 	mov.w	r4, #0
 8006ecc:	461a      	mov	r2, r3
 8006ece:	4623      	mov	r3, r4
 8006ed0:	f7f9 fe76 	bl	8000bc0 <__aeabi_uldivmod>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8006eda:	4b0b      	ldr	r3, [pc, #44]	; (8006f08 <HAL_RCC_GetSysClockFreq+0x158>)
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	0c1b      	lsrs	r3, r3, #16
 8006ee0:	f003 0303 	and.w	r3, r3, #3
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	005b      	lsls	r3, r3, #1
 8006ee8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef2:	60bb      	str	r3, [r7, #8]
      break;
 8006ef4:	e002      	b.n	8006efc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ef6:	4b05      	ldr	r3, [pc, #20]	; (8006f0c <HAL_RCC_GetSysClockFreq+0x15c>)
 8006ef8:	60bb      	str	r3, [r7, #8]
      break;
 8006efa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006efc:	68bb      	ldr	r3, [r7, #8]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3714      	adds	r7, #20
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f06:	bf00      	nop
 8006f08:	40023800 	.word	0x40023800
 8006f0c:	00f42400 	.word	0x00f42400
 8006f10:	017d7840 	.word	0x017d7840

08006f14 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f14:	b480      	push	{r7}
 8006f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f18:	4b03      	ldr	r3, [pc, #12]	; (8006f28 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	200000a8 	.word	0x200000a8

08006f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f30:	f7ff fff0 	bl	8006f14 <HAL_RCC_GetHCLKFreq>
 8006f34:	4601      	mov	r1, r0
 8006f36:	4b05      	ldr	r3, [pc, #20]	; (8006f4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	0a9b      	lsrs	r3, r3, #10
 8006f3c:	f003 0307 	and.w	r3, r3, #7
 8006f40:	4a03      	ldr	r2, [pc, #12]	; (8006f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f42:	5cd3      	ldrb	r3, [r2, r3]
 8006f44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	40023800 	.word	0x40023800
 8006f50:	0800fc00 	.word	0x0800fc00

08006f54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006f58:	f7ff ffdc 	bl	8006f14 <HAL_RCC_GetHCLKFreq>
 8006f5c:	4601      	mov	r1, r0
 8006f5e:	4b05      	ldr	r3, [pc, #20]	; (8006f74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	0b5b      	lsrs	r3, r3, #13
 8006f64:	f003 0307 	and.w	r3, r3, #7
 8006f68:	4a03      	ldr	r2, [pc, #12]	; (8006f78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f6a:	5cd3      	ldrb	r3, [r2, r3]
 8006f6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	40023800 	.word	0x40023800
 8006f78:	0800fc00 	.word	0x0800fc00

08006f7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b088      	sub	sp, #32
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006f84:	2300      	movs	r3, #0
 8006f86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006f90:	2300      	movs	r3, #0
 8006f92:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006f94:	2300      	movs	r3, #0
 8006f96:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0301 	and.w	r3, r3, #1
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d012      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006fa4:	4b69      	ldr	r3, [pc, #420]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	4a68      	ldr	r2, [pc, #416]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006faa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006fae:	6093      	str	r3, [r2, #8]
 8006fb0:	4b66      	ldr	r3, [pc, #408]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fb2:	689a      	ldr	r2, [r3, #8]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb8:	4964      	ldr	r1, [pc, #400]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d017      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fd6:	4b5d      	ldr	r3, [pc, #372]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe4:	4959      	ldr	r1, [pc, #356]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ff4:	d101      	bne.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d101      	bne.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007002:	2301      	movs	r3, #1
 8007004:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d017      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007012:	4b4e      	ldr	r3, [pc, #312]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007018:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007020:	494a      	ldr	r1, [pc, #296]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007022:	4313      	orrs	r3, r2
 8007024:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007030:	d101      	bne.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007032:	2301      	movs	r3, #1
 8007034:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703a:	2b00      	cmp	r3, #0
 800703c:	d101      	bne.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800703e:	2301      	movs	r3, #1
 8007040:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800704e:	2301      	movs	r3, #1
 8007050:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0320 	and.w	r3, r3, #32
 800705a:	2b00      	cmp	r3, #0
 800705c:	f000 808b 	beq.w	8007176 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007060:	4b3a      	ldr	r3, [pc, #232]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007064:	4a39      	ldr	r2, [pc, #228]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800706a:	6413      	str	r3, [r2, #64]	; 0x40
 800706c:	4b37      	ldr	r3, [pc, #220]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800706e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007074:	60bb      	str	r3, [r7, #8]
 8007076:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007078:	4b35      	ldr	r3, [pc, #212]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a34      	ldr	r2, [pc, #208]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800707e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007082:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007084:	f7fc f876 	bl	8003174 <HAL_GetTick>
 8007088:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800708a:	e008      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800708c:	f7fc f872 	bl	8003174 <HAL_GetTick>
 8007090:	4602      	mov	r2, r0
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	2b64      	cmp	r3, #100	; 0x64
 8007098:	d901      	bls.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e355      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800709e:	4b2c      	ldr	r3, [pc, #176]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d0f0      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80070aa:	4b28      	ldr	r3, [pc, #160]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d035      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d02e      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070c8:	4b20      	ldr	r3, [pc, #128]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80070d2:	4b1e      	ldr	r3, [pc, #120]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d6:	4a1d      	ldr	r2, [pc, #116]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070dc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80070de:	4b1b      	ldr	r3, [pc, #108]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e2:	4a1a      	ldr	r2, [pc, #104]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80070ea:	4a18      	ldr	r2, [pc, #96]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80070f0:	4b16      	ldr	r3, [pc, #88]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d114      	bne.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070fc:	f7fc f83a 	bl	8003174 <HAL_GetTick>
 8007100:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007102:	e00a      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007104:	f7fc f836 	bl	8003174 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007112:	4293      	cmp	r3, r2
 8007114:	d901      	bls.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e317      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800711a:	4b0c      	ldr	r3, [pc, #48]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800711c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800711e:	f003 0302 	and.w	r3, r3, #2
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0ee      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800712e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007132:	d111      	bne.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007134:	4b05      	ldr	r3, [pc, #20]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007140:	4b04      	ldr	r3, [pc, #16]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007142:	400b      	ands	r3, r1
 8007144:	4901      	ldr	r1, [pc, #4]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007146:	4313      	orrs	r3, r2
 8007148:	608b      	str	r3, [r1, #8]
 800714a:	e00b      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800714c:	40023800 	.word	0x40023800
 8007150:	40007000 	.word	0x40007000
 8007154:	0ffffcff 	.word	0x0ffffcff
 8007158:	4bb0      	ldr	r3, [pc, #704]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	4aaf      	ldr	r2, [pc, #700]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800715e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007162:	6093      	str	r3, [r2, #8]
 8007164:	4bad      	ldr	r3, [pc, #692]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007166:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007170:	49aa      	ldr	r1, [pc, #680]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007172:	4313      	orrs	r3, r2
 8007174:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 0310 	and.w	r3, r3, #16
 800717e:	2b00      	cmp	r3, #0
 8007180:	d010      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007182:	4ba6      	ldr	r3, [pc, #664]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007184:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007188:	4aa4      	ldr	r2, [pc, #656]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800718a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800718e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007192:	4ba2      	ldr	r3, [pc, #648]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007194:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719c:	499f      	ldr	r1, [pc, #636]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800719e:	4313      	orrs	r3, r2
 80071a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00a      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80071b0:	4b9a      	ldr	r3, [pc, #616]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071be:	4997      	ldr	r1, [pc, #604]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00a      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80071d2:	4b92      	ldr	r3, [pc, #584]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071e0:	498e      	ldr	r1, [pc, #568]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00a      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80071f4:	4b89      	ldr	r3, [pc, #548]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007202:	4986      	ldr	r1, [pc, #536]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007204:	4313      	orrs	r3, r2
 8007206:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00a      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007216:	4b81      	ldr	r3, [pc, #516]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800721c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007224:	497d      	ldr	r1, [pc, #500]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007226:	4313      	orrs	r3, r2
 8007228:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00a      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007238:	4b78      	ldr	r3, [pc, #480]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800723a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800723e:	f023 0203 	bic.w	r2, r3, #3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007246:	4975      	ldr	r1, [pc, #468]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007248:	4313      	orrs	r3, r2
 800724a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00a      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800725a:	4b70      	ldr	r3, [pc, #448]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800725c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007260:	f023 020c 	bic.w	r2, r3, #12
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007268:	496c      	ldr	r1, [pc, #432]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800726a:	4313      	orrs	r3, r2
 800726c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00a      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800727c:	4b67      	ldr	r3, [pc, #412]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800727e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007282:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800728a:	4964      	ldr	r1, [pc, #400]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800728c:	4313      	orrs	r3, r2
 800728e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00a      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800729e:	4b5f      	ldr	r3, [pc, #380]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072a4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ac:	495b      	ldr	r1, [pc, #364]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00a      	beq.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80072c0:	4b56      	ldr	r3, [pc, #344]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ce:	4953      	ldr	r1, [pc, #332]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072d0:	4313      	orrs	r3, r2
 80072d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00a      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80072e2:	4b4e      	ldr	r3, [pc, #312]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072f0:	494a      	ldr	r1, [pc, #296]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072f2:	4313      	orrs	r3, r2
 80072f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00a      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007304:	4b45      	ldr	r3, [pc, #276]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800730a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007312:	4942      	ldr	r1, [pc, #264]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007314:	4313      	orrs	r3, r2
 8007316:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00a      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007326:	4b3d      	ldr	r3, [pc, #244]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800732c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007334:	4939      	ldr	r1, [pc, #228]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007336:	4313      	orrs	r3, r2
 8007338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00a      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007348:	4b34      	ldr	r3, [pc, #208]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800734a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800734e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007356:	4931      	ldr	r1, [pc, #196]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007358:	4313      	orrs	r3, r2
 800735a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d011      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800736a:	4b2c      	ldr	r3, [pc, #176]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800736c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007370:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007378:	4928      	ldr	r1, [pc, #160]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800737a:	4313      	orrs	r3, r2
 800737c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007384:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007388:	d101      	bne.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800738a:	2301      	movs	r3, #1
 800738c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0308 	and.w	r3, r3, #8
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800739a:	2301      	movs	r3, #1
 800739c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00a      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80073aa:	4b1c      	ldr	r3, [pc, #112]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073b8:	4918      	ldr	r1, [pc, #96]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073ba:	4313      	orrs	r3, r2
 80073bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00b      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80073cc:	4b13      	ldr	r3, [pc, #76]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073dc:	490f      	ldr	r1, [pc, #60]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073de:	4313      	orrs	r3, r2
 80073e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d005      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073f2:	f040 80d8 	bne.w	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80073f6:	4b09      	ldr	r3, [pc, #36]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a08      	ldr	r2, [pc, #32]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007400:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007402:	f7fb feb7 	bl	8003174 <HAL_GetTick>
 8007406:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007408:	e00a      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800740a:	f7fb feb3 	bl	8003174 <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	2b64      	cmp	r3, #100	; 0x64
 8007416:	d903      	bls.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e196      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800741c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007420:	4b6c      	ldr	r3, [pc, #432]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1ee      	bne.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	2b00      	cmp	r3, #0
 8007436:	d021      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800743c:	2b00      	cmp	r3, #0
 800743e:	d11d      	bne.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007440:	4b64      	ldr	r3, [pc, #400]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007442:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007446:	0c1b      	lsrs	r3, r3, #16
 8007448:	f003 0303 	and.w	r3, r3, #3
 800744c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800744e:	4b61      	ldr	r3, [pc, #388]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007450:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007454:	0e1b      	lsrs	r3, r3, #24
 8007456:	f003 030f 	and.w	r3, r3, #15
 800745a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	019a      	lsls	r2, r3, #6
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	041b      	lsls	r3, r3, #16
 8007466:	431a      	orrs	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	061b      	lsls	r3, r3, #24
 800746c:	431a      	orrs	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	071b      	lsls	r3, r3, #28
 8007474:	4957      	ldr	r1, [pc, #348]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007476:	4313      	orrs	r3, r2
 8007478:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007484:	2b00      	cmp	r3, #0
 8007486:	d004      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800748c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007490:	d00a      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800749a:	2b00      	cmp	r3, #0
 800749c:	d02e      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074a6:	d129      	bne.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80074a8:	4b4a      	ldr	r3, [pc, #296]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80074aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074ae:	0c1b      	lsrs	r3, r3, #16
 80074b0:	f003 0303 	and.w	r3, r3, #3
 80074b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80074b6:	4b47      	ldr	r3, [pc, #284]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80074b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074bc:	0f1b      	lsrs	r3, r3, #28
 80074be:	f003 0307 	and.w	r3, r3, #7
 80074c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	019a      	lsls	r2, r3, #6
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	041b      	lsls	r3, r3, #16
 80074ce:	431a      	orrs	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	061b      	lsls	r3, r3, #24
 80074d6:	431a      	orrs	r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	071b      	lsls	r3, r3, #28
 80074dc:	493d      	ldr	r1, [pc, #244]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80074de:	4313      	orrs	r3, r2
 80074e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80074e4:	4b3b      	ldr	r3, [pc, #236]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80074e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074ea:	f023 021f 	bic.w	r2, r3, #31
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f2:	3b01      	subs	r3, #1
 80074f4:	4937      	ldr	r1, [pc, #220]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80074f6:	4313      	orrs	r3, r2
 80074f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d01d      	beq.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007508:	4b32      	ldr	r3, [pc, #200]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800750a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800750e:	0e1b      	lsrs	r3, r3, #24
 8007510:	f003 030f 	and.w	r3, r3, #15
 8007514:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007516:	4b2f      	ldr	r3, [pc, #188]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800751c:	0f1b      	lsrs	r3, r3, #28
 800751e:	f003 0307 	and.w	r3, r3, #7
 8007522:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	019a      	lsls	r2, r3, #6
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	041b      	lsls	r3, r3, #16
 8007530:	431a      	orrs	r2, r3
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	061b      	lsls	r3, r3, #24
 8007536:	431a      	orrs	r2, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	071b      	lsls	r3, r3, #28
 800753c:	4925      	ldr	r1, [pc, #148]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800753e:	4313      	orrs	r3, r2
 8007540:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d011      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	019a      	lsls	r2, r3, #6
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	041b      	lsls	r3, r3, #16
 800755c:	431a      	orrs	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	061b      	lsls	r3, r3, #24
 8007564:	431a      	orrs	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	071b      	lsls	r3, r3, #28
 800756c:	4919      	ldr	r1, [pc, #100]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800756e:	4313      	orrs	r3, r2
 8007570:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007574:	4b17      	ldr	r3, [pc, #92]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a16      	ldr	r2, [pc, #88]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800757a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800757e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007580:	f7fb fdf8 	bl	8003174 <HAL_GetTick>
 8007584:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007586:	e008      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007588:	f7fb fdf4 	bl	8003174 <HAL_GetTick>
 800758c:	4602      	mov	r2, r0
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	2b64      	cmp	r3, #100	; 0x64
 8007594:	d901      	bls.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	e0d7      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800759a:	4b0e      	ldr	r3, [pc, #56]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d0f0      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	f040 80cd 	bne.w	8007748 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80075ae:	4b09      	ldr	r3, [pc, #36]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a08      	ldr	r2, [pc, #32]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075ba:	f7fb fddb 	bl	8003174 <HAL_GetTick>
 80075be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80075c0:	e00a      	b.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80075c2:	f7fb fdd7 	bl	8003174 <HAL_GetTick>
 80075c6:	4602      	mov	r2, r0
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	1ad3      	subs	r3, r2, r3
 80075cc:	2b64      	cmp	r3, #100	; 0x64
 80075ce:	d903      	bls.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e0ba      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80075d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80075d8:	4b5e      	ldr	r3, [pc, #376]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075e4:	d0ed      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d003      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d009      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007602:	2b00      	cmp	r3, #0
 8007604:	d02e      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760a:	2b00      	cmp	r3, #0
 800760c:	d12a      	bne.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800760e:	4b51      	ldr	r3, [pc, #324]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007614:	0c1b      	lsrs	r3, r3, #16
 8007616:	f003 0303 	and.w	r3, r3, #3
 800761a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800761c:	4b4d      	ldr	r3, [pc, #308]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800761e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007622:	0f1b      	lsrs	r3, r3, #28
 8007624:	f003 0307 	and.w	r3, r3, #7
 8007628:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	019a      	lsls	r2, r3, #6
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	041b      	lsls	r3, r3, #16
 8007634:	431a      	orrs	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	061b      	lsls	r3, r3, #24
 800763c:	431a      	orrs	r2, r3
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	071b      	lsls	r3, r3, #28
 8007642:	4944      	ldr	r1, [pc, #272]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007644:	4313      	orrs	r3, r2
 8007646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800764a:	4b42      	ldr	r3, [pc, #264]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800764c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007650:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007658:	3b01      	subs	r3, #1
 800765a:	021b      	lsls	r3, r3, #8
 800765c:	493d      	ldr	r1, [pc, #244]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800765e:	4313      	orrs	r3, r2
 8007660:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d022      	beq.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007674:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007678:	d11d      	bne.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800767a:	4b36      	ldr	r3, [pc, #216]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800767c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007680:	0e1b      	lsrs	r3, r3, #24
 8007682:	f003 030f 	and.w	r3, r3, #15
 8007686:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007688:	4b32      	ldr	r3, [pc, #200]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800768a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800768e:	0f1b      	lsrs	r3, r3, #28
 8007690:	f003 0307 	and.w	r3, r3, #7
 8007694:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	695b      	ldr	r3, [r3, #20]
 800769a:	019a      	lsls	r2, r3, #6
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a1b      	ldr	r3, [r3, #32]
 80076a0:	041b      	lsls	r3, r3, #16
 80076a2:	431a      	orrs	r2, r3
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	061b      	lsls	r3, r3, #24
 80076a8:	431a      	orrs	r2, r3
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	071b      	lsls	r3, r3, #28
 80076ae:	4929      	ldr	r1, [pc, #164]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80076b0:	4313      	orrs	r3, r2
 80076b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 0308 	and.w	r3, r3, #8
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d028      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80076c2:	4b24      	ldr	r3, [pc, #144]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80076c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076c8:	0e1b      	lsrs	r3, r3, #24
 80076ca:	f003 030f 	and.w	r3, r3, #15
 80076ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80076d0:	4b20      	ldr	r3, [pc, #128]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80076d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076d6:	0c1b      	lsrs	r3, r3, #16
 80076d8:	f003 0303 	and.w	r3, r3, #3
 80076dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	019a      	lsls	r2, r3, #6
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	041b      	lsls	r3, r3, #16
 80076e8:	431a      	orrs	r2, r3
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	061b      	lsls	r3, r3, #24
 80076ee:	431a      	orrs	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	69db      	ldr	r3, [r3, #28]
 80076f4:	071b      	lsls	r3, r3, #28
 80076f6:	4917      	ldr	r1, [pc, #92]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80076f8:	4313      	orrs	r3, r2
 80076fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80076fe:	4b15      	ldr	r3, [pc, #84]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007700:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007704:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770c:	4911      	ldr	r1, [pc, #68]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800770e:	4313      	orrs	r3, r2
 8007710:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007714:	4b0f      	ldr	r3, [pc, #60]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a0e      	ldr	r2, [pc, #56]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800771a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800771e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007720:	f7fb fd28 	bl	8003174 <HAL_GetTick>
 8007724:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007726:	e008      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007728:	f7fb fd24 	bl	8003174 <HAL_GetTick>
 800772c:	4602      	mov	r2, r0
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	2b64      	cmp	r3, #100	; 0x64
 8007734:	d901      	bls.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	e007      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800773a:	4b06      	ldr	r3, [pc, #24]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007742:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007746:	d1ef      	bne.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3720      	adds	r7, #32
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	40023800 	.word	0x40023800

08007758 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d101      	bne.n	800776a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e06b      	b.n	8007842 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	7f5b      	ldrb	r3, [r3, #29]
 800776e:	b2db      	uxtb	r3, r3
 8007770:	2b00      	cmp	r3, #0
 8007772:	d105      	bne.n	8007780 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f005 f958 	bl	800ca30 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2202      	movs	r2, #2
 8007784:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	22ca      	movs	r2, #202	; 0xca
 800778c:	625a      	str	r2, [r3, #36]	; 0x24
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2253      	movs	r2, #83	; 0x53
 8007794:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fb00 	bl	8007d9c <RTC_EnterInitMode>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d008      	beq.n	80077b4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	22ff      	movs	r2, #255	; 0xff
 80077a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2204      	movs	r2, #4
 80077ae:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	e046      	b.n	8007842 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	6899      	ldr	r1, [r3, #8]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	4b23      	ldr	r3, [pc, #140]	; (800784c <HAL_RTC_Init+0xf4>)
 80077c0:	400b      	ands	r3, r1
 80077c2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	6899      	ldr	r1, [r3, #8]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685a      	ldr	r2, [r3, #4]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	431a      	orrs	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	695b      	ldr	r3, [r3, #20]
 80077d8:	431a      	orrs	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	430a      	orrs	r2, r1
 80077e0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	68d2      	ldr	r2, [r2, #12]
 80077ea:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6919      	ldr	r1, [r3, #16]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	041a      	lsls	r2, r3, #16
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	430a      	orrs	r2, r1
 80077fe:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68da      	ldr	r2, [r3, #12]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800780e:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f022 0208 	bic.w	r2, r2, #8
 800781e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	699a      	ldr	r2, [r3, #24]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	22ff      	movs	r2, #255	; 0xff
 8007838:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2201      	movs	r2, #1
 800783e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007840:	2300      	movs	r3, #0
  }
}
 8007842:	4618      	mov	r0, r3
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	ff8fffbf 	.word	0xff8fffbf

08007850 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007850:	b590      	push	{r4, r7, lr}
 8007852:	b087      	sub	sp, #28
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800785c:	2300      	movs	r3, #0
 800785e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	7f1b      	ldrb	r3, [r3, #28]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d101      	bne.n	800786c <HAL_RTC_SetTime+0x1c>
 8007868:	2302      	movs	r3, #2
 800786a:	e0a8      	b.n	80079be <HAL_RTC_SetTime+0x16e>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2201      	movs	r2, #1
 8007870:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2202      	movs	r2, #2
 8007876:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d126      	bne.n	80078cc <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007888:	2b00      	cmp	r3, #0
 800788a:	d102      	bne.n	8007892 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	2200      	movs	r2, #0
 8007890:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	4618      	mov	r0, r3
 8007898:	f000 faac 	bl	8007df4 <RTC_ByteToBcd2>
 800789c:	4603      	mov	r3, r0
 800789e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	785b      	ldrb	r3, [r3, #1]
 80078a4:	4618      	mov	r0, r3
 80078a6:	f000 faa5 	bl	8007df4 <RTC_ByteToBcd2>
 80078aa:	4603      	mov	r3, r0
 80078ac:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80078ae:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	789b      	ldrb	r3, [r3, #2]
 80078b4:	4618      	mov	r0, r3
 80078b6:	f000 fa9d 	bl	8007df4 <RTC_ByteToBcd2>
 80078ba:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80078bc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	7b1b      	ldrb	r3, [r3, #12]
 80078c4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80078c6:	4313      	orrs	r3, r2
 80078c8:	617b      	str	r3, [r7, #20]
 80078ca:	e018      	b.n	80078fe <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d102      	bne.n	80078e0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	2200      	movs	r2, #0
 80078de:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	785b      	ldrb	r3, [r3, #1]
 80078ea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80078ec:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80078f2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	7b1b      	ldrb	r3, [r3, #12]
 80078f8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80078fa:	4313      	orrs	r3, r2
 80078fc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	22ca      	movs	r2, #202	; 0xca
 8007904:	625a      	str	r2, [r3, #36]	; 0x24
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2253      	movs	r2, #83	; 0x53
 800790c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f000 fa44 	bl	8007d9c <RTC_EnterInitMode>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00b      	beq.n	8007932 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	22ff      	movs	r2, #255	; 0xff
 8007920:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2204      	movs	r2, #4
 8007926:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e045      	b.n	80079be <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	6979      	ldr	r1, [r7, #20]
 8007938:	4b23      	ldr	r3, [pc, #140]	; (80079c8 <HAL_RTC_SetTime+0x178>)
 800793a:	400b      	ands	r3, r1
 800793c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	689a      	ldr	r2, [r3, #8]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800794c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	6899      	ldr	r1, [r3, #8]
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	691a      	ldr	r2, [r3, #16]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	431a      	orrs	r2, r3
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	430a      	orrs	r2, r1
 8007964:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68da      	ldr	r2, [r3, #12]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007974:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	f003 0320 	and.w	r3, r3, #32
 8007980:	2b00      	cmp	r3, #0
 8007982:	d111      	bne.n	80079a8 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f000 f9e1 	bl	8007d4c <HAL_RTC_WaitForSynchro>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00b      	beq.n	80079a8 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	22ff      	movs	r2, #255	; 0xff
 8007996:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2204      	movs	r2, #4
 800799c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e00a      	b.n	80079be <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	22ff      	movs	r2, #255	; 0xff
 80079ae:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2201      	movs	r2, #1
 80079b4:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80079bc:	2300      	movs	r3, #0
  }
}
 80079be:	4618      	mov	r0, r3
 80079c0:	371c      	adds	r7, #28
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd90      	pop	{r4, r7, pc}
 80079c6:	bf00      	nop
 80079c8:	007f7f7f 	.word	0x007f7f7f

080079cc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80079cc:	b590      	push	{r4, r7, lr}
 80079ce:	b087      	sub	sp, #28
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80079d8:	2300      	movs	r3, #0
 80079da:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	7f1b      	ldrb	r3, [r3, #28]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d101      	bne.n	80079e8 <HAL_RTC_SetDate+0x1c>
 80079e4:	2302      	movs	r3, #2
 80079e6:	e092      	b.n	8007b0e <HAL_RTC_SetDate+0x142>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2201      	movs	r2, #1
 80079ec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2202      	movs	r2, #2
 80079f2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10e      	bne.n	8007a18 <HAL_RTC_SetDate+0x4c>
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	785b      	ldrb	r3, [r3, #1]
 80079fe:	f003 0310 	and.w	r3, r3, #16
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d008      	beq.n	8007a18 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	785b      	ldrb	r3, [r3, #1]
 8007a0a:	f023 0310 	bic.w	r3, r3, #16
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	330a      	adds	r3, #10
 8007a12:	b2da      	uxtb	r2, r3
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d11c      	bne.n	8007a58 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	78db      	ldrb	r3, [r3, #3]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f000 f9e6 	bl	8007df4 <RTC_ByteToBcd2>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	785b      	ldrb	r3, [r3, #1]
 8007a30:	4618      	mov	r0, r3
 8007a32:	f000 f9df 	bl	8007df4 <RTC_ByteToBcd2>
 8007a36:	4603      	mov	r3, r0
 8007a38:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007a3a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	789b      	ldrb	r3, [r3, #2]
 8007a40:	4618      	mov	r0, r3
 8007a42:	f000 f9d7 	bl	8007df4 <RTC_ByteToBcd2>
 8007a46:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007a48:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007a52:	4313      	orrs	r3, r2
 8007a54:	617b      	str	r3, [r7, #20]
 8007a56:	e00e      	b.n	8007a76 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	78db      	ldrb	r3, [r3, #3]
 8007a5c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	785b      	ldrb	r3, [r3, #1]
 8007a62:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007a64:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8007a6a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007a72:	4313      	orrs	r3, r2
 8007a74:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	22ca      	movs	r2, #202	; 0xca
 8007a7c:	625a      	str	r2, [r3, #36]	; 0x24
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2253      	movs	r2, #83	; 0x53
 8007a84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f000 f988 	bl	8007d9c <RTC_EnterInitMode>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00b      	beq.n	8007aaa <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	22ff      	movs	r2, #255	; 0xff
 8007a98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2204      	movs	r2, #4
 8007a9e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e031      	b.n	8007b0e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	6979      	ldr	r1, [r7, #20]
 8007ab0:	4b19      	ldr	r3, [pc, #100]	; (8007b18 <HAL_RTC_SetDate+0x14c>)
 8007ab2:	400b      	ands	r3, r1
 8007ab4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68da      	ldr	r2, [r3, #12]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ac4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	f003 0320 	and.w	r3, r3, #32
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d111      	bne.n	8007af8 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f000 f939 	bl	8007d4c <HAL_RTC_WaitForSynchro>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00b      	beq.n	8007af8 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	22ff      	movs	r2, #255	; 0xff
 8007ae6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2204      	movs	r2, #4
 8007aec:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e00a      	b.n	8007b0e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	22ff      	movs	r2, #255	; 0xff
 8007afe:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2201      	movs	r2, #1
 8007b04:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
  }
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	371c      	adds	r7, #28
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd90      	pop	{r4, r7, pc}
 8007b16:	bf00      	nop
 8007b18:	00ffff3f 	.word	0x00ffff3f

08007b1c <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007b1c:	b590      	push	{r4, r7, lr}
 8007b1e:	b089      	sub	sp, #36	; 0x24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	61fb      	str	r3, [r7, #28]
 8007b30:	2300      	movs	r3, #0
 8007b32:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	7f1b      	ldrb	r3, [r3, #28]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d101      	bne.n	8007b40 <HAL_RTC_SetAlarm+0x24>
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	e101      	b.n	8007d44 <HAL_RTC_SetAlarm+0x228>
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2201      	movs	r2, #1
 8007b44:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2202      	movs	r2, #2
 8007b4a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d137      	bne.n	8007bc2 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d102      	bne.n	8007b66 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	2200      	movs	r2, #0
 8007b64:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 f942 	bl	8007df4 <RTC_ByteToBcd2>
 8007b70:	4603      	mov	r3, r0
 8007b72:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	785b      	ldrb	r3, [r3, #1]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f000 f93b 	bl	8007df4 <RTC_ByteToBcd2>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007b82:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	789b      	ldrb	r3, [r3, #2]
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f000 f933 	bl	8007df4 <RTC_ByteToBcd2>
 8007b8e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007b90:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	7b1b      	ldrb	r3, [r3, #12]
 8007b98:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007b9a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f000 f925 	bl	8007df4 <RTC_ByteToBcd2>
 8007baa:	4603      	mov	r3, r0
 8007bac:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007bae:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007bb6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	61fb      	str	r3, [r7, #28]
 8007bc0:	e023      	b.n	8007c0a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d102      	bne.n	8007bd6 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	785b      	ldrb	r3, [r3, #1]
 8007be0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007be2:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007be8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	7b1b      	ldrb	r3, [r3, #12]
 8007bee:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007bf0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007bf8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007bfa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007c00:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007c06:	4313      	orrs	r3, r2
 8007c08:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	69db      	ldr	r3, [r3, #28]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	22ca      	movs	r2, #202	; 0xca
 8007c1c:	625a      	str	r2, [r3, #36]	; 0x24
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2253      	movs	r2, #83	; 0x53
 8007c24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c2e:	d13f      	bne.n	8007cb0 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	689a      	ldr	r2, [r3, #8]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c3e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	689a      	ldr	r2, [r3, #8]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c4e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c50:	f7fb fa90 	bl	8003174 <HAL_GetTick>
 8007c54:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007c56:	e013      	b.n	8007c80 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007c58:	f7fb fa8c 	bl	8003174 <HAL_GetTick>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c66:	d90b      	bls.n	8007c80 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	22ff      	movs	r2, #255	; 0xff
 8007c6e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2203      	movs	r2, #3
 8007c74:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	e061      	b.n	8007d44 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d0e4      	beq.n	8007c58 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	69fa      	ldr	r2, [r7, #28]
 8007c94:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	689a      	ldr	r2, [r3, #8]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cac:	609a      	str	r2, [r3, #8]
 8007cae:	e03e      	b.n	8007d2e <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	689a      	ldr	r2, [r3, #8]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007cbe:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	689a      	ldr	r2, [r3, #8]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007cce:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007cd0:	f7fb fa50 	bl	8003174 <HAL_GetTick>
 8007cd4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007cd6:	e013      	b.n	8007d00 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007cd8:	f7fb fa4c 	bl	8003174 <HAL_GetTick>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ce6:	d90b      	bls.n	8007d00 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	22ff      	movs	r2, #255	; 0xff
 8007cee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2203      	movs	r2, #3
 8007cf4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	e021      	b.n	8007d44 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	f003 0302 	and.w	r3, r3, #2
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d0e4      	beq.n	8007cd8 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	69fa      	ldr	r2, [r7, #28]
 8007d14:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	689a      	ldr	r2, [r3, #8]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d2c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	22ff      	movs	r2, #255	; 0xff
 8007d34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3724      	adds	r7, #36	; 0x24
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd90      	pop	{r4, r7, pc}

08007d4c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007d54:	2300      	movs	r3, #0
 8007d56:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68da      	ldr	r2, [r3, #12]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007d66:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007d68:	f7fb fa04 	bl	8003174 <HAL_GetTick>
 8007d6c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007d6e:	e009      	b.n	8007d84 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007d70:	f7fb fa00 	bl	8003174 <HAL_GetTick>
 8007d74:	4602      	mov	r2, r0
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d7e:	d901      	bls.n	8007d84 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e007      	b.n	8007d94 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	f003 0320 	and.w	r3, r3, #32
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d0ee      	beq.n	8007d70 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007da4:	2300      	movs	r3, #0
 8007da6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d119      	bne.n	8007dea <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f04f 32ff 	mov.w	r2, #4294967295
 8007dbe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007dc0:	f7fb f9d8 	bl	8003174 <HAL_GetTick>
 8007dc4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007dc6:	e009      	b.n	8007ddc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007dc8:	f7fb f9d4 	bl	8003174 <HAL_GetTick>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dd6:	d901      	bls.n	8007ddc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e007      	b.n	8007dec <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d0ee      	beq.n	8007dc8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8007e02:	e005      	b.n	8007e10 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	3301      	adds	r3, #1
 8007e08:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8007e0a:	79fb      	ldrb	r3, [r7, #7]
 8007e0c:	3b0a      	subs	r3, #10
 8007e0e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8007e10:	79fb      	ldrb	r3, [r7, #7]
 8007e12:	2b09      	cmp	r3, #9
 8007e14:	d8f6      	bhi.n	8007e04 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	011b      	lsls	r3, r3, #4
 8007e1c:	b2da      	uxtb	r2, r3
 8007e1e:	79fb      	ldrb	r3, [r7, #7]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	b2db      	uxtb	r3, r3
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b087      	sub	sp, #28
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	7f1b      	ldrb	r3, [r3, #28]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d101      	bne.n	8007e4c <HAL_RTCEx_SetTimeStamp+0x1c>
 8007e48:	2302      	movs	r3, #2
 8007e4a:	e03e      	b.n	8007eca <HAL_RTCEx_SetTimeStamp+0x9a>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2202      	movs	r2, #2
 8007e56:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	689a      	ldr	r2, [r3, #8]
 8007e5e:	4b1e      	ldr	r3, [pc, #120]	; (8007ed8 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8007e60:	4013      	ands	r3, r2
 8007e62:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8007e64:	697a      	ldr	r2, [r7, #20]
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	22ca      	movs	r2, #202	; 0xca
 8007e72:	625a      	str	r2, [r3, #36]	; 0x24
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2253      	movs	r2, #83	; 0x53
 8007e7a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f022 0206 	bic.w	r2, r2, #6
 8007e8a:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	689a      	ldr	r2, [r3, #8]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007eb2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	22ff      	movs	r2, #255	; 0xff
 8007eba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	371c      	adds	r7, #28
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	fffff7f7 	.word	0xfffff7f7

08007edc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e01d      	b.n	8007f2a <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d105      	bne.n	8007f06 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f004 fdaf 	bl	800ca64 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2203      	movs	r2, #3
 8007f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f80f 	bl	8007f32 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3708      	adds	r7, #8
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007f32:	b5b0      	push	{r4, r5, r7, lr}
 8007f34:	b08e      	sub	sp, #56	; 0x38
 8007f36:	af04      	add	r7, sp, #16
 8007f38:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007f42:	2300      	movs	r3, #0
 8007f44:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007f46:	2300      	movs	r3, #0
 8007f48:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007f52:	2376      	movs	r3, #118	; 0x76
 8007f54:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681d      	ldr	r5, [r3, #0]
 8007f5a:	466c      	mov	r4, sp
 8007f5c:	f107 0318 	add.w	r3, r7, #24
 8007f60:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007f64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007f68:	f107 030c 	add.w	r3, r7, #12
 8007f6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f6e:	4628      	mov	r0, r5
 8007f70:	f001 ff78 	bl	8009e64 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	685a      	ldr	r2, [r3, #4]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f82:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f001 ffa4 	bl	8009ed6 <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	685a      	ldr	r2, [r3, #4]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f9c:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 8007f9e:	2002      	movs	r0, #2
 8007fa0:	f7fb f8f4 	bl	800318c <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 fb95 	bl	80086d4 <SD_PowerON>
 8007faa:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d00b      	beq.n	8007fca <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc0:	431a      	orrs	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e013      	b.n	8007ff2 <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 fab9 	bl	8008542 <SD_InitCard>
 8007fd0:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00b      	beq.n	8007ff0 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe6:	431a      	orrs	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e000      	b.n	8007ff2 <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3728      	adds	r7, #40	; 0x28
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bdb0      	pop	{r4, r5, r7, pc}

08007ffa <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	b085      	sub	sp, #20
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8008004:	2300      	movs	r3, #0
 8008006:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800800c:	0e1b      	lsrs	r3, r3, #24
 800800e:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	099b      	lsrs	r3, r3, #6
 8008014:	b2db      	uxtb	r3, r3
 8008016:	f003 0303 	and.w	r3, r3, #3
 800801a:	b2da      	uxtb	r2, r3
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	089b      	lsrs	r3, r3, #2
 8008024:	b2db      	uxtb	r3, r3
 8008026:	f003 030f 	and.w	r3, r3, #15
 800802a:	b2da      	uxtb	r2, r3
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	b2db      	uxtb	r3, r3
 8008034:	f003 0303 	and.w	r3, r3, #3
 8008038:	b2da      	uxtb	r2, r3
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008042:	0c1b      	lsrs	r3, r3, #16
 8008044:	b2db      	uxtb	r3, r3
 8008046:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	b2da      	uxtb	r2, r3
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008054:	0a1b      	lsrs	r3, r3, #8
 8008056:	b2db      	uxtb	r3, r3
 8008058:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	b2da      	uxtb	r2, r3
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008066:	b2db      	uxtb	r3, r3
 8008068:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	b2da      	uxtb	r2, r3
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008076:	0e1b      	lsrs	r3, r3, #24
 8008078:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	b29b      	uxth	r3, r3
 800807e:	011b      	lsls	r3, r3, #4
 8008080:	b29a      	uxth	r2, r3
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800808a:	0c1b      	lsrs	r3, r3, #16
 800808c:	b2db      	uxtb	r3, r3
 800808e:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	88db      	ldrh	r3, [r3, #6]
 8008094:	b29a      	uxth	r2, r3
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	091b      	lsrs	r3, r3, #4
 800809a:	b29b      	uxth	r3, r3
 800809c:	f003 030f 	and.w	r3, r3, #15
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	4313      	orrs	r3, r2
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	f003 030f 	and.w	r3, r3, #15
 80080b2:	b2da      	uxtb	r2, r3
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080bc:	0a1b      	lsrs	r3, r3, #8
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	09db      	lsrs	r3, r3, #7
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	f003 0301 	and.w	r3, r3, #1
 80080cc:	b2da      	uxtb	r2, r3
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	099b      	lsrs	r3, r3, #6
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	f003 0301 	and.w	r3, r3, #1
 80080dc:	b2da      	uxtb	r2, r3
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	095b      	lsrs	r3, r3, #5
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	f003 0301 	and.w	r3, r3, #1
 80080ec:	b2da      	uxtb	r2, r3
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	091b      	lsrs	r3, r3, #4
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	f003 0301 	and.w	r3, r3, #1
 80080fc:	b2da      	uxtb	r2, r3
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	2200      	movs	r2, #0
 8008106:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800810c:	2b00      	cmp	r3, #0
 800810e:	f040 8086 	bne.w	800821e <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	029b      	lsls	r3, r3, #10
 8008116:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008122:	b2db      	uxtb	r3, r3
 8008124:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	691a      	ldr	r2, [r3, #16]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	431a      	orrs	r2, r3
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008138:	0e1b      	lsrs	r3, r3, #24
 800813a:	b2db      	uxtb	r3, r3
 800813c:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	691a      	ldr	r2, [r3, #16]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	099b      	lsrs	r3, r3, #6
 8008146:	f003 0303 	and.w	r3, r3, #3
 800814a:	431a      	orrs	r2, r3
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	08db      	lsrs	r3, r3, #3
 8008154:	b2db      	uxtb	r3, r3
 8008156:	f003 0307 	and.w	r3, r3, #7
 800815a:	b2da      	uxtb	r2, r3
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	b2db      	uxtb	r3, r3
 8008164:	f003 0307 	and.w	r3, r3, #7
 8008168:	b2da      	uxtb	r2, r3
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008172:	0c1b      	lsrs	r3, r3, #16
 8008174:	b2db      	uxtb	r3, r3
 8008176:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	095b      	lsrs	r3, r3, #5
 800817c:	b2db      	uxtb	r3, r3
 800817e:	f003 0307 	and.w	r3, r3, #7
 8008182:	b2da      	uxtb	r2, r3
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	089b      	lsrs	r3, r3, #2
 800818c:	b2db      	uxtb	r3, r3
 800818e:	f003 0307 	and.w	r3, r3, #7
 8008192:	b2da      	uxtb	r2, r3
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	b2db      	uxtb	r3, r3
 800819c:	005b      	lsls	r3, r3, #1
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	f003 0306 	and.w	r3, r3, #6
 80081a4:	b2da      	uxtb	r2, r3
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081ae:	0a1b      	lsrs	r3, r3, #8
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	7e1b      	ldrb	r3, [r3, #24]
 80081b8:	b2da      	uxtb	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	09db      	lsrs	r3, r3, #7
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	f003 0301 	and.w	r3, r3, #1
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	4313      	orrs	r3, r2
 80081c8:	b2da      	uxtb	r2, r3
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	691b      	ldr	r3, [r3, #16]
 80081d2:	1c5a      	adds	r2, r3, #1
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	7e1b      	ldrb	r3, [r3, #24]
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	3302      	adds	r3, #2
 80081e0:	2201      	movs	r2, #1
 80081e2:	409a      	lsls	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081e8:	fb02 f203 	mul.w	r2, r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	7a1b      	ldrb	r3, [r3, #8]
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	461a      	mov	r2, r3
 80081f8:	2301      	movs	r3, #1
 80081fa:	4093      	lsls	r3, r2
 80081fc:	461a      	mov	r2, r3
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800820a:	0a52      	lsrs	r2, r2, #9
 800820c:	fb02 f203 	mul.w	r2, r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800821a:	661a      	str	r2, [r3, #96]	; 0x60
 800821c:	e04d      	b.n	80082ba <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008222:	2b01      	cmp	r3, #1
 8008224:	d138      	bne.n	8008298 <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800822a:	b2db      	uxtb	r3, r3
 800822c:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	041b      	lsls	r3, r3, #16
 8008232:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800823e:	0e1b      	lsrs	r3, r3, #24
 8008240:	b2db      	uxtb	r3, r3
 8008242:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	691a      	ldr	r2, [r3, #16]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	021b      	lsls	r3, r3, #8
 800824c:	431a      	orrs	r2, r3
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008256:	0c1b      	lsrs	r3, r3, #16
 8008258:	b2db      	uxtb	r3, r3
 800825a:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	691a      	ldr	r2, [r3, #16]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	431a      	orrs	r2, r3
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800826c:	0a1b      	lsrs	r3, r3, #8
 800826e:	b2db      	uxtb	r3, r3
 8008270:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	3301      	adds	r3, #1
 8008278:	029a      	lsls	r2, r3, #10
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	655a      	str	r2, [r3, #84]	; 0x54
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800828c:	659a      	str	r2, [r3, #88]	; 0x58
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	661a      	str	r2, [r3, #96]	; 0x60
 8008296:	e010      	b.n	80082ba <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80082a0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e0c1      	b.n	800843e <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	099b      	lsrs	r3, r3, #6
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	f003 0301 	and.w	r3, r3, #1
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	005b      	lsls	r3, r3, #1
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80082d6:	b2da      	uxtb	r2, r3
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	7e9b      	ldrb	r3, [r3, #26]
 80082e8:	b2da      	uxtb	r2, r3
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	09db      	lsrs	r3, r3, #7
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	f003 0301 	and.w	r3, r3, #1
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	4313      	orrs	r3, r2
 80082f8:	b2da      	uxtb	r2, r3
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	b2db      	uxtb	r3, r3
 8008302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008306:	b2da      	uxtb	r2, r3
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008310:	0e1b      	lsrs	r3, r3, #24
 8008312:	b2db      	uxtb	r3, r3
 8008314:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	09db      	lsrs	r3, r3, #7
 800831a:	b2db      	uxtb	r3, r3
 800831c:	f003 0301 	and.w	r3, r3, #1
 8008320:	b2da      	uxtb	r2, r3
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	095b      	lsrs	r3, r3, #5
 800832a:	b2db      	uxtb	r3, r3
 800832c:	f003 0303 	and.w	r3, r3, #3
 8008330:	b2da      	uxtb	r2, r3
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	089b      	lsrs	r3, r3, #2
 800833a:	b2db      	uxtb	r3, r3
 800833c:	f003 0307 	and.w	r3, r3, #7
 8008340:	b2da      	uxtb	r2, r3
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	b2db      	uxtb	r3, r3
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	b2db      	uxtb	r3, r3
 800834e:	f003 030c 	and.w	r3, r3, #12
 8008352:	b2da      	uxtb	r2, r3
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800835c:	0c1b      	lsrs	r3, r3, #16
 800835e:	b2db      	uxtb	r3, r3
 8008360:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	7fdb      	ldrb	r3, [r3, #31]
 8008366:	b2da      	uxtb	r2, r3
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	099b      	lsrs	r3, r3, #6
 800836c:	b2db      	uxtb	r3, r3
 800836e:	f003 0303 	and.w	r3, r3, #3
 8008372:	b2db      	uxtb	r3, r3
 8008374:	4313      	orrs	r3, r2
 8008376:	b2da      	uxtb	r2, r3
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	095b      	lsrs	r3, r3, #5
 8008380:	b2db      	uxtb	r3, r3
 8008382:	f003 0301 	and.w	r3, r3, #1
 8008386:	b2da      	uxtb	r2, r3
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	b2db      	uxtb	r3, r3
 800839a:	f003 0301 	and.w	r3, r3, #1
 800839e:	b2da      	uxtb	r2, r3
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083aa:	0a1b      	lsrs	r3, r3, #8
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	09db      	lsrs	r3, r3, #7
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	f003 0301 	and.w	r3, r3, #1
 80083ba:	b2da      	uxtb	r2, r3
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	099b      	lsrs	r3, r3, #6
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	f003 0301 	and.w	r3, r3, #1
 80083cc:	b2da      	uxtb	r2, r3
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	095b      	lsrs	r3, r3, #5
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	f003 0301 	and.w	r3, r3, #1
 80083de:	b2da      	uxtb	r2, r3
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	091b      	lsrs	r3, r3, #4
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	f003 0301 	and.w	r3, r3, #1
 80083f0:	b2da      	uxtb	r2, r3
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	089b      	lsrs	r3, r3, #2
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	f003 0303 	and.w	r3, r3, #3
 8008402:	b2da      	uxtb	r2, r3
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	b2db      	uxtb	r3, r3
 800840e:	f003 0303 	and.w	r3, r3, #3
 8008412:	b2da      	uxtb	r2, r3
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800841e:	b2db      	uxtb	r3, r3
 8008420:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	085b      	lsrs	r3, r3, #1
 8008426:	b2db      	uxtb	r3, r3
 8008428:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800842c:	b2da      	uxtb	r2, r3
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3714      	adds	r7, #20
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800844a:	b5b0      	push	{r4, r5, r7, lr}
 800844c:	b08e      	sub	sp, #56	; 0x38
 800844e:	af04      	add	r7, sp, #16
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008454:	2300      	movs	r3, #0
 8008456:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2203      	movs	r2, #3
 800845c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008464:	2b03      	cmp	r3, #3
 8008466:	d02e      	beq.n	80084c6 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800846e:	d106      	bne.n	800847e <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008474:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	639a      	str	r2, [r3, #56]	; 0x38
 800847c:	e029      	b.n	80084d2 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008484:	d10a      	bne.n	800849c <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f9cc 	bl	8008824 <SD_WideBus_Enable>
 800848c:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008494:	431a      	orrs	r2, r3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	639a      	str	r2, [r3, #56]	; 0x38
 800849a:	e01a      	b.n	80084d2 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d10a      	bne.n	80084b8 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 fa0b 	bl	80088be <SD_WideBus_Disable>
 80084a8:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b0:	431a      	orrs	r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	639a      	str	r2, [r3, #56]	; 0x38
 80084b6:	e00c      	b.n	80084d2 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084bc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	639a      	str	r2, [r3, #56]	; 0x38
 80084c4:	e005      	b.n	80084d2 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00a      	beq.n	80084f0 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80084e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	e024      	b.n	800853a <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	695b      	ldr	r3, [r3, #20]
 800850a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	699b      	ldr	r3, [r3, #24]
 8008510:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681d      	ldr	r5, [r3, #0]
 8008516:	466c      	mov	r4, sp
 8008518:	f107 0318 	add.w	r3, r7, #24
 800851c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008520:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008524:	f107 030c 	add.w	r3, r7, #12
 8008528:	cb0e      	ldmia	r3, {r1, r2, r3}
 800852a:	4628      	mov	r0, r5
 800852c:	f001 fc9a 	bl	8009e64 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3728      	adds	r7, #40	; 0x28
 800853e:	46bd      	mov	sp, r7
 8008540:	bdb0      	pop	{r4, r5, r7, pc}

08008542 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008542:	b5b0      	push	{r4, r5, r7, lr}
 8008544:	b094      	sub	sp, #80	; 0x50
 8008546:	af04      	add	r7, sp, #16
 8008548:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800854a:	2300      	movs	r3, #0
 800854c:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 800854e:	2301      	movs	r3, #1
 8008550:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4618      	mov	r0, r3
 8008558:	f001 fccb 	bl	8009ef2 <SDMMC_GetPowerState>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d102      	bne.n	8008568 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008562:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008566:	e0b1      	b.n	80086cc <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800856c:	2b03      	cmp	r3, #3
 800856e:	d02f      	beq.n	80085d0 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4618      	mov	r0, r3
 8008576:	f001 fe5e 	bl	800a236 <SDMMC_CmdSendCID>
 800857a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800857c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800857e:	2b00      	cmp	r3, #0
 8008580:	d001      	beq.n	8008586 <SD_InitCard+0x44>
    {
      return errorstate;
 8008582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008584:	e0a2      	b.n	80086cc <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2100      	movs	r1, #0
 800858c:	4618      	mov	r0, r3
 800858e:	f001 fcf6 	bl	8009f7e <SDMMC_GetResponse>
 8008592:	4602      	mov	r2, r0
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2104      	movs	r1, #4
 800859e:	4618      	mov	r0, r3
 80085a0:	f001 fced 	bl	8009f7e <SDMMC_GetResponse>
 80085a4:	4602      	mov	r2, r0
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2108      	movs	r1, #8
 80085b0:	4618      	mov	r0, r3
 80085b2:	f001 fce4 	bl	8009f7e <SDMMC_GetResponse>
 80085b6:	4602      	mov	r2, r0
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	210c      	movs	r1, #12
 80085c2:	4618      	mov	r0, r3
 80085c4:	f001 fcdb 	bl	8009f7e <SDMMC_GetResponse>
 80085c8:	4602      	mov	r2, r0
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085d4:	2b03      	cmp	r3, #3
 80085d6:	d00d      	beq.n	80085f4 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f107 020e 	add.w	r2, r7, #14
 80085e0:	4611      	mov	r1, r2
 80085e2:	4618      	mov	r0, r3
 80085e4:	f001 fe68 	bl	800a2b8 <SDMMC_CmdSetRelAdd>
 80085e8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80085ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d001      	beq.n	80085f4 <SD_InitCard+0xb2>
    {
      return errorstate;
 80085f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085f2:	e06b      	b.n	80086cc <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085f8:	2b03      	cmp	r3, #3
 80085fa:	d036      	beq.n	800866a <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80085fc:	89fb      	ldrh	r3, [r7, #14]
 80085fe:	461a      	mov	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800860c:	041b      	lsls	r3, r3, #16
 800860e:	4619      	mov	r1, r3
 8008610:	4610      	mov	r0, r2
 8008612:	f001 fe30 	bl	800a276 <SDMMC_CmdSendCSD>
 8008616:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <SD_InitCard+0xe0>
    {
      return errorstate;
 800861e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008620:	e054      	b.n	80086cc <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2100      	movs	r1, #0
 8008628:	4618      	mov	r0, r3
 800862a:	f001 fca8 	bl	8009f7e <SDMMC_GetResponse>
 800862e:	4602      	mov	r2, r0
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2104      	movs	r1, #4
 800863a:	4618      	mov	r0, r3
 800863c:	f001 fc9f 	bl	8009f7e <SDMMC_GetResponse>
 8008640:	4602      	mov	r2, r0
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2108      	movs	r1, #8
 800864c:	4618      	mov	r0, r3
 800864e:	f001 fc96 	bl	8009f7e <SDMMC_GetResponse>
 8008652:	4602      	mov	r2, r0
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	210c      	movs	r1, #12
 800865e:	4618      	mov	r0, r3
 8008660:	f001 fc8d 	bl	8009f7e <SDMMC_GetResponse>
 8008664:	4602      	mov	r2, r0
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2104      	movs	r1, #4
 8008670:	4618      	mov	r0, r3
 8008672:	f001 fc84 	bl	8009f7e <SDMMC_GetResponse>
 8008676:	4603      	mov	r3, r0
 8008678:	0d1a      	lsrs	r2, r3, #20
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 800867e:	f107 0310 	add.w	r3, r7, #16
 8008682:	4619      	mov	r1, r3
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f7ff fcb8 	bl	8007ffa <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6819      	ldr	r1, [r3, #0]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008692:	041b      	lsls	r3, r3, #16
 8008694:	f04f 0400 	mov.w	r4, #0
 8008698:	461a      	mov	r2, r3
 800869a:	4623      	mov	r3, r4
 800869c:	4608      	mov	r0, r1
 800869e:	f001 fcd3 	bl	800a048 <SDMMC_CmdSelDesel>
 80086a2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80086a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d001      	beq.n	80086ae <SD_InitCard+0x16c>
  {
    return errorstate;
 80086aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ac:	e00e      	b.n	80086cc <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681d      	ldr	r5, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	466c      	mov	r4, sp
 80086b6:	f103 0210 	add.w	r2, r3, #16
 80086ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80086bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80086c0:	3304      	adds	r3, #4
 80086c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80086c4:	4628      	mov	r0, r5
 80086c6:	f001 fbcd 	bl	8009e64 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3740      	adds	r7, #64	; 0x40
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bdb0      	pop	{r4, r5, r7, pc}

080086d4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b086      	sub	sp, #24
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80086dc:	2300      	movs	r3, #0
 80086de:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 80086e0:	2300      	movs	r3, #0
 80086e2:	617b      	str	r3, [r7, #20]
 80086e4:	2300      	movs	r3, #0
 80086e6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80086e8:	2300      	movs	r3, #0
 80086ea:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4618      	mov	r0, r3
 80086f2:	f001 fcce 	bl	800a092 <SDMMC_CmdGoIdleState>
 80086f6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d001      	beq.n	8008702 <SD_PowerON+0x2e>
  {
    return errorstate;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	e08c      	b.n	800881c <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4618      	mov	r0, r3
 8008708:	f001 fce3 	bl	800a0d2 <SDMMC_CmdOperCond>
 800870c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d03d      	beq.n	8008790 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 800871a:	e032      	b.n	8008782 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	1c5a      	adds	r2, r3, #1
 8008720:	60ba      	str	r2, [r7, #8]
 8008722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008726:	4293      	cmp	r3, r2
 8008728:	d102      	bne.n	8008730 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800872a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800872e:	e075      	b.n	800881c <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2100      	movs	r1, #0
 8008736:	4618      	mov	r0, r3
 8008738:	f001 fcec 	bl	800a114 <SDMMC_CmdAppCommand>
 800873c:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d002      	beq.n	800874a <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008744:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008748:	e068      	b.n	800881c <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2100      	movs	r1, #0
 8008750:	4618      	mov	r0, r3
 8008752:	f001 fd03 	bl	800a15c <SDMMC_CmdAppOperCommand>
 8008756:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d002      	beq.n	8008764 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800875e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008762:	e05b      	b.n	800881c <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2100      	movs	r1, #0
 800876a:	4618      	mov	r0, r3
 800876c:	f001 fc07 	bl	8009f7e <SDMMC_GetResponse>
 8008770:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	0fdb      	lsrs	r3, r3, #31
 8008776:	2b01      	cmp	r3, #1
 8008778:	bf0c      	ite	eq
 800877a:	2301      	moveq	r3, #1
 800877c:	2300      	movne	r3, #0
 800877e:	b2db      	uxtb	r3, r3
 8008780:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d0c9      	beq.n	800871c <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	645a      	str	r2, [r3, #68]	; 0x44
 800878e:	e044      	b.n	800881a <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8008796:	e031      	b.n	80087fc <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	1c5a      	adds	r2, r3, #1
 800879c:	60ba      	str	r2, [r7, #8]
 800879e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d102      	bne.n	80087ac <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80087a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80087aa:	e037      	b.n	800881c <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2100      	movs	r1, #0
 80087b2:	4618      	mov	r0, r3
 80087b4:	f001 fcae 	bl	800a114 <SDMMC_CmdAppCommand>
 80087b8:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d001      	beq.n	80087c4 <SD_PowerON+0xf0>
      {
        return errorstate;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	e02b      	b.n	800881c <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80087cc:	4618      	mov	r0, r3
 80087ce:	f001 fcc5 	bl	800a15c <SDMMC_CmdAppOperCommand>
 80087d2:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d001      	beq.n	80087de <SD_PowerON+0x10a>
      {
        return errorstate;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	e01e      	b.n	800881c <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2100      	movs	r1, #0
 80087e4:	4618      	mov	r0, r3
 80087e6:	f001 fbca 	bl	8009f7e <SDMMC_GetResponse>
 80087ea:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	0fdb      	lsrs	r3, r3, #31
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	bf0c      	ite	eq
 80087f4:	2301      	moveq	r3, #1
 80087f6:	2300      	movne	r3, #0
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d0ca      	beq.n	8008798 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008808:	2b00      	cmp	r3, #0
 800880a:	d003      	beq.n	8008814 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	645a      	str	r2, [r3, #68]	; 0x44
 8008812:	e002      	b.n	800881a <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3718      	adds	r7, #24
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b086      	sub	sp, #24
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 800882c:	2300      	movs	r3, #0
 800882e:	60fb      	str	r3, [r7, #12]
 8008830:	2300      	movs	r3, #0
 8008832:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008834:	2300      	movs	r3, #0
 8008836:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2100      	movs	r1, #0
 800883e:	4618      	mov	r0, r3
 8008840:	f001 fb9d 	bl	8009f7e <SDMMC_GetResponse>
 8008844:	4603      	mov	r3, r0
 8008846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800884a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800884e:	d102      	bne.n	8008856 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008850:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008854:	e02f      	b.n	80088b6 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008856:	f107 030c 	add.w	r3, r7, #12
 800885a:	4619      	mov	r1, r3
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 f87b 	bl	8008958 <SD_FindSCR>
 8008862:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d001      	beq.n	800886e <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	e023      	b.n	80088b6 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008874:	2b00      	cmp	r3, #0
 8008876:	d01c      	beq.n	80088b2 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008880:	041b      	lsls	r3, r3, #16
 8008882:	4619      	mov	r1, r3
 8008884:	4610      	mov	r0, r2
 8008886:	f001 fc45 	bl	800a114 <SDMMC_CmdAppCommand>
 800888a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d001      	beq.n	8008896 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	e00f      	b.n	80088b6 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2102      	movs	r1, #2
 800889c:	4618      	mov	r0, r3
 800889e:	f001 fc83 	bl	800a1a8 <SDMMC_CmdBusWidth>
 80088a2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d001      	beq.n	80088ae <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	e003      	b.n	80088b6 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 80088ae:	2300      	movs	r3, #0
 80088b0:	e001      	b.n	80088b6 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80088b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3718      	adds	r7, #24
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b086      	sub	sp, #24
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 80088c6:	2300      	movs	r3, #0
 80088c8:	60fb      	str	r3, [r7, #12]
 80088ca:	2300      	movs	r3, #0
 80088cc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80088ce:	2300      	movs	r3, #0
 80088d0:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2100      	movs	r1, #0
 80088d8:	4618      	mov	r0, r3
 80088da:	f001 fb50 	bl	8009f7e <SDMMC_GetResponse>
 80088de:	4603      	mov	r3, r0
 80088e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088e8:	d102      	bne.n	80088f0 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80088ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088ee:	e02f      	b.n	8008950 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80088f0:	f107 030c 	add.w	r3, r7, #12
 80088f4:	4619      	mov	r1, r3
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 f82e 	bl	8008958 <SD_FindSCR>
 80088fc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d001      	beq.n	8008908 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	e023      	b.n	8008950 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800890e:	2b00      	cmp	r3, #0
 8008910:	d01c      	beq.n	800894c <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800891a:	041b      	lsls	r3, r3, #16
 800891c:	4619      	mov	r1, r3
 800891e:	4610      	mov	r0, r2
 8008920:	f001 fbf8 	bl	800a114 <SDMMC_CmdAppCommand>
 8008924:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d001      	beq.n	8008930 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	e00f      	b.n	8008950 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2100      	movs	r1, #0
 8008936:	4618      	mov	r0, r3
 8008938:	f001 fc36 	bl	800a1a8 <SDMMC_CmdBusWidth>
 800893c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d001      	beq.n	8008948 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	e003      	b.n	8008950 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8008948:	2300      	movs	r3, #0
 800894a:	e001      	b.n	8008950 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800894c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008950:	4618      	mov	r0, r3
 8008952:	3718      	adds	r7, #24
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008958:	b590      	push	{r4, r7, lr}
 800895a:	b08f      	sub	sp, #60	; 0x3c
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008962:	2300      	movs	r3, #0
 8008964:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8008966:	f7fa fc05 	bl	8003174 <HAL_GetTick>
 800896a:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 800896c:	2300      	movs	r3, #0
 800896e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 8008970:	2300      	movs	r3, #0
 8008972:	60fb      	str	r3, [r7, #12]
 8008974:	2300      	movs	r3, #0
 8008976:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2108      	movs	r1, #8
 800897e:	4618      	mov	r0, r3
 8008980:	f001 fb3e 	bl	800a000 <SDMMC_CmdBlockLength>
 8008984:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008988:	2b00      	cmp	r3, #0
 800898a:	d001      	beq.n	8008990 <SD_FindSCR+0x38>
  {
    return errorstate;
 800898c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898e:	e0a8      	b.n	8008ae2 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008998:	041b      	lsls	r3, r3, #16
 800899a:	4619      	mov	r1, r3
 800899c:	4610      	mov	r0, r2
 800899e:	f001 fbb9 	bl	800a114 <SDMMC_CmdAppCommand>
 80089a2:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80089a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d001      	beq.n	80089ae <SD_FindSCR+0x56>
  {
    return errorstate;
 80089aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ac:	e099      	b.n	8008ae2 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80089ae:	f04f 33ff 	mov.w	r3, #4294967295
 80089b2:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 80089b4:	2308      	movs	r3, #8
 80089b6:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80089b8:	2330      	movs	r3, #48	; 0x30
 80089ba:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80089bc:	2302      	movs	r3, #2
 80089be:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80089c0:	2300      	movs	r3, #0
 80089c2:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80089c4:	2301      	movs	r3, #1
 80089c6:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f107 0214 	add.w	r2, r7, #20
 80089d0:	4611      	mov	r1, r2
 80089d2:	4618      	mov	r0, r3
 80089d4:	f001 fae8 	bl	8009fa8 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4618      	mov	r0, r3
 80089de:	f001 fc07 	bl	800a1f0 <SDMMC_CmdSendSCR>
 80089e2:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80089e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d022      	beq.n	8008a30 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80089ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ec:	e079      	b.n	8008ae2 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00e      	beq.n	8008a1a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6819      	ldr	r1, [r3, #0]
 8008a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	f107 020c 	add.w	r2, r7, #12
 8008a08:	18d4      	adds	r4, r2, r3
 8008a0a:	4608      	mov	r0, r1
 8008a0c:	f001 fa56 	bl	8009ebc <SDMMC_ReadFIFO>
 8008a10:	4603      	mov	r3, r0
 8008a12:	6023      	str	r3, [r4, #0]
      index++;
 8008a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a16:	3301      	adds	r3, #1
 8008a18:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008a1a:	f7fa fbab 	bl	8003174 <HAL_GetTick>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a22:	1ad3      	subs	r3, r2, r3
 8008a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a28:	d102      	bne.n	8008a30 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008a2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a2e:	e058      	b.n	8008ae2 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a36:	f240 432a 	movw	r3, #1066	; 0x42a
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d0d6      	beq.n	80089ee <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a46:	f003 0308 	and.w	r3, r3, #8
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d005      	beq.n	8008a5a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2208      	movs	r2, #8
 8008a54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008a56:	2308      	movs	r3, #8
 8008a58:	e043      	b.n	8008ae2 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a60:	f003 0302 	and.w	r3, r3, #2
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d005      	beq.n	8008a74 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2202      	movs	r2, #2
 8008a6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008a70:	2302      	movs	r3, #2
 8008a72:	e036      	b.n	8008ae2 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a7a:	f003 0320 	and.w	r3, r3, #32
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d005      	beq.n	8008a8e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2220      	movs	r2, #32
 8008a88:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8008a8a:	2320      	movs	r3, #32
 8008a8c:	e029      	b.n	8008ae2 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008a96:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	061a      	lsls	r2, r3, #24
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	021b      	lsls	r3, r3, #8
 8008aa0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008aa4:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	0a1b      	lsrs	r3, r3, #8
 8008aaa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008aae:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8008aba:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008abc:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	061a      	lsls	r2, r3, #24
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	021b      	lsls	r3, r3, #8
 8008ac6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008aca:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	0a1b      	lsrs	r3, r3, #8
 8008ad0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008ad4:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	0e1b      	lsrs	r3, r3, #24
 8008ada:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	373c      	adds	r7, #60	; 0x3c
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd90      	pop	{r4, r7, pc}

08008aea <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b082      	sub	sp, #8
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
 8008af2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d101      	bne.n	8008afe <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	e025      	b.n	8008b4a <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d106      	bne.n	8008b18 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f004 f962 	bl	800cddc <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2202      	movs	r2, #2
 8008b1c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	3304      	adds	r3, #4
 8008b28:	4619      	mov	r1, r3
 8008b2a:	4610      	mov	r0, r2
 8008b2c:	f001 f874 	bl	8009c18 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6818      	ldr	r0, [r3, #0]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	6839      	ldr	r1, [r7, #0]
 8008b3c:	f001 f8de 	bl	8009cfc <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b084      	sub	sp, #16
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	60f8      	str	r0, [r7, #12]
 8008b5a:	60b9      	str	r1, [r7, #8]
 8008b5c:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	2b02      	cmp	r3, #2
 8008b68:	d101      	bne.n	8008b6e <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008b6a:	2302      	movs	r3, #2
 8008b6c:	e018      	b.n	8008ba0 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2202      	movs	r2, #2
 8008b72:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	68b9      	ldr	r1, [r7, #8]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f001 f93c 	bl	8009dfc <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	d104      	bne.n	8008b96 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2205      	movs	r2, #5
 8008b90:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008b94:	e003      	b.n	8008b9e <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	d101      	bne.n	8008bc2 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008bbe:	2302      	movs	r3, #2
 8008bc0:	e00e      	b.n	8008be0 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2202      	movs	r2, #2
 8008bc6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	6839      	ldr	r1, [r7, #0]
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f001 f934 	bl	8009e3e <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008bde:	2300      	movs	r3, #0
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3708      	adds	r7, #8
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d101      	bne.n	8008bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e01d      	b.n	8008c36 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d106      	bne.n	8008c14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f003 ff8a 	bl	800cb28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2202      	movs	r2, #2
 8008c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	3304      	adds	r3, #4
 8008c24:	4619      	mov	r1, r3
 8008c26:	4610      	mov	r0, r2
 8008c28:	f000 fa36 	bl	8009098 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3708      	adds	r7, #8
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
	...

08008c40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	68da      	ldr	r2, [r3, #12]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f042 0201 	orr.w	r2, r2, #1
 8008c56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	689a      	ldr	r2, [r3, #8]
 8008c5e:	4b0c      	ldr	r3, [pc, #48]	; (8008c90 <HAL_TIM_Base_Start_IT+0x50>)
 8008c60:	4013      	ands	r3, r2
 8008c62:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2b06      	cmp	r3, #6
 8008c68:	d00b      	beq.n	8008c82 <HAL_TIM_Base_Start_IT+0x42>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c70:	d007      	beq.n	8008c82 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f042 0201 	orr.w	r2, r2, #1
 8008c80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3714      	adds	r7, #20
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr
 8008c90:	00010007 	.word	0x00010007

08008c94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	f003 0302 	and.w	r3, r3, #2
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d122      	bne.n	8008cf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	f003 0302 	and.w	r3, r3, #2
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d11b      	bne.n	8008cf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f06f 0202 	mvn.w	r2, #2
 8008cc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	699b      	ldr	r3, [r3, #24]
 8008cce:	f003 0303 	and.w	r3, r3, #3
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d003      	beq.n	8008cde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f9c0 	bl	800905c <HAL_TIM_IC_CaptureCallback>
 8008cdc:	e005      	b.n	8008cea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 f9b2 	bl	8009048 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 f9c3 	bl	8009070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	f003 0304 	and.w	r3, r3, #4
 8008cfa:	2b04      	cmp	r3, #4
 8008cfc:	d122      	bne.n	8008d44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	f003 0304 	and.w	r3, r3, #4
 8008d08:	2b04      	cmp	r3, #4
 8008d0a:	d11b      	bne.n	8008d44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f06f 0204 	mvn.w	r2, #4
 8008d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2202      	movs	r2, #2
 8008d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	699b      	ldr	r3, [r3, #24]
 8008d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d003      	beq.n	8008d32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f996 	bl	800905c <HAL_TIM_IC_CaptureCallback>
 8008d30:	e005      	b.n	8008d3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 f988 	bl	8009048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 f999 	bl	8009070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	f003 0308 	and.w	r3, r3, #8
 8008d4e:	2b08      	cmp	r3, #8
 8008d50:	d122      	bne.n	8008d98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	f003 0308 	and.w	r3, r3, #8
 8008d5c:	2b08      	cmp	r3, #8
 8008d5e:	d11b      	bne.n	8008d98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f06f 0208 	mvn.w	r2, #8
 8008d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2204      	movs	r2, #4
 8008d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	69db      	ldr	r3, [r3, #28]
 8008d76:	f003 0303 	and.w	r3, r3, #3
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d003      	beq.n	8008d86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f96c 	bl	800905c <HAL_TIM_IC_CaptureCallback>
 8008d84:	e005      	b.n	8008d92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f95e 	bl	8009048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 f96f 	bl	8009070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	f003 0310 	and.w	r3, r3, #16
 8008da2:	2b10      	cmp	r3, #16
 8008da4:	d122      	bne.n	8008dec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	f003 0310 	and.w	r3, r3, #16
 8008db0:	2b10      	cmp	r3, #16
 8008db2:	d11b      	bne.n	8008dec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f06f 0210 	mvn.w	r2, #16
 8008dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2208      	movs	r2, #8
 8008dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	69db      	ldr	r3, [r3, #28]
 8008dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d003      	beq.n	8008dda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 f942 	bl	800905c <HAL_TIM_IC_CaptureCallback>
 8008dd8:	e005      	b.n	8008de6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f934 	bl	8009048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 f945 	bl	8009070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	f003 0301 	and.w	r3, r3, #1
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d10e      	bne.n	8008e18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	f003 0301 	and.w	r3, r3, #1
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d107      	bne.n	8008e18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f06f 0201 	mvn.w	r2, #1
 8008e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f001 ffac 	bl	800ad70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e22:	2b80      	cmp	r3, #128	; 0x80
 8008e24:	d10e      	bne.n	8008e44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e30:	2b80      	cmp	r3, #128	; 0x80
 8008e32:	d107      	bne.n	8008e44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 faca 	bl	80093d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e52:	d10e      	bne.n	8008e72 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e5e:	2b80      	cmp	r3, #128	; 0x80
 8008e60:	d107      	bne.n	8008e72 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 fabd 	bl	80093ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e7c:	2b40      	cmp	r3, #64	; 0x40
 8008e7e:	d10e      	bne.n	8008e9e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e8a:	2b40      	cmp	r3, #64	; 0x40
 8008e8c:	d107      	bne.n	8008e9e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 f8f3 	bl	8009084 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	f003 0320 	and.w	r3, r3, #32
 8008ea8:	2b20      	cmp	r3, #32
 8008eaa:	d10e      	bne.n	8008eca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	f003 0320 	and.w	r3, r3, #32
 8008eb6:	2b20      	cmp	r3, #32
 8008eb8:	d107      	bne.n	8008eca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f06f 0220 	mvn.w	r2, #32
 8008ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 fa7d 	bl	80093c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008eca:	bf00      	nop
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
	...

08008ed4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d101      	bne.n	8008eec <HAL_TIM_ConfigClockSource+0x18>
 8008ee8:	2302      	movs	r3, #2
 8008eea:	e0a6      	b.n	800903a <HAL_TIM_ConfigClockSource+0x166>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2202      	movs	r2, #2
 8008ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	4b4f      	ldr	r3, [pc, #316]	; (8009044 <HAL_TIM_ConfigClockSource+0x170>)
 8008f08:	4013      	ands	r3, r2
 8008f0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2b40      	cmp	r3, #64	; 0x40
 8008f22:	d067      	beq.n	8008ff4 <HAL_TIM_ConfigClockSource+0x120>
 8008f24:	2b40      	cmp	r3, #64	; 0x40
 8008f26:	d80b      	bhi.n	8008f40 <HAL_TIM_ConfigClockSource+0x6c>
 8008f28:	2b10      	cmp	r3, #16
 8008f2a:	d073      	beq.n	8009014 <HAL_TIM_ConfigClockSource+0x140>
 8008f2c:	2b10      	cmp	r3, #16
 8008f2e:	d802      	bhi.n	8008f36 <HAL_TIM_ConfigClockSource+0x62>
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d06f      	beq.n	8009014 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008f34:	e078      	b.n	8009028 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008f36:	2b20      	cmp	r3, #32
 8008f38:	d06c      	beq.n	8009014 <HAL_TIM_ConfigClockSource+0x140>
 8008f3a:	2b30      	cmp	r3, #48	; 0x30
 8008f3c:	d06a      	beq.n	8009014 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008f3e:	e073      	b.n	8009028 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008f40:	2b70      	cmp	r3, #112	; 0x70
 8008f42:	d00d      	beq.n	8008f60 <HAL_TIM_ConfigClockSource+0x8c>
 8008f44:	2b70      	cmp	r3, #112	; 0x70
 8008f46:	d804      	bhi.n	8008f52 <HAL_TIM_ConfigClockSource+0x7e>
 8008f48:	2b50      	cmp	r3, #80	; 0x50
 8008f4a:	d033      	beq.n	8008fb4 <HAL_TIM_ConfigClockSource+0xe0>
 8008f4c:	2b60      	cmp	r3, #96	; 0x60
 8008f4e:	d041      	beq.n	8008fd4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008f50:	e06a      	b.n	8009028 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f56:	d066      	beq.n	8009026 <HAL_TIM_ConfigClockSource+0x152>
 8008f58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f5c:	d017      	beq.n	8008f8e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008f5e:	e063      	b.n	8009028 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6818      	ldr	r0, [r3, #0]
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	6899      	ldr	r1, [r3, #8]
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	685a      	ldr	r2, [r3, #4]
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	f000 f9ac 	bl	80092cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008f82:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	609a      	str	r2, [r3, #8]
      break;
 8008f8c:	e04c      	b.n	8009028 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6818      	ldr	r0, [r3, #0]
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	6899      	ldr	r1, [r3, #8]
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	685a      	ldr	r2, [r3, #4]
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	f000 f995 	bl	80092cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	689a      	ldr	r2, [r3, #8]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008fb0:	609a      	str	r2, [r3, #8]
      break;
 8008fb2:	e039      	b.n	8009028 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6818      	ldr	r0, [r3, #0]
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	6859      	ldr	r1, [r3, #4]
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	f000 f909 	bl	80091d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2150      	movs	r1, #80	; 0x50
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f000 f962 	bl	8009296 <TIM_ITRx_SetConfig>
      break;
 8008fd2:	e029      	b.n	8009028 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6818      	ldr	r0, [r3, #0]
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	6859      	ldr	r1, [r3, #4]
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	f000 f928 	bl	8009236 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2160      	movs	r1, #96	; 0x60
 8008fec:	4618      	mov	r0, r3
 8008fee:	f000 f952 	bl	8009296 <TIM_ITRx_SetConfig>
      break;
 8008ff2:	e019      	b.n	8009028 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6818      	ldr	r0, [r3, #0]
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	6859      	ldr	r1, [r3, #4]
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	461a      	mov	r2, r3
 8009002:	f000 f8e9 	bl	80091d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2140      	movs	r1, #64	; 0x40
 800900c:	4618      	mov	r0, r3
 800900e:	f000 f942 	bl	8009296 <TIM_ITRx_SetConfig>
      break;
 8009012:	e009      	b.n	8009028 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4619      	mov	r1, r3
 800901e:	4610      	mov	r0, r2
 8009020:	f000 f939 	bl	8009296 <TIM_ITRx_SetConfig>
      break;
 8009024:	e000      	b.n	8009028 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009026:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	fffeff88 	.word	0xfffeff88

08009048 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009064:	bf00      	nop
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009078:	bf00      	nop
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800908c:	bf00      	nop
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a40      	ldr	r2, [pc, #256]	; (80091ac <TIM_Base_SetConfig+0x114>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d013      	beq.n	80090d8 <TIM_Base_SetConfig+0x40>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090b6:	d00f      	beq.n	80090d8 <TIM_Base_SetConfig+0x40>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a3d      	ldr	r2, [pc, #244]	; (80091b0 <TIM_Base_SetConfig+0x118>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d00b      	beq.n	80090d8 <TIM_Base_SetConfig+0x40>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4a3c      	ldr	r2, [pc, #240]	; (80091b4 <TIM_Base_SetConfig+0x11c>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d007      	beq.n	80090d8 <TIM_Base_SetConfig+0x40>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	4a3b      	ldr	r2, [pc, #236]	; (80091b8 <TIM_Base_SetConfig+0x120>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d003      	beq.n	80090d8 <TIM_Base_SetConfig+0x40>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4a3a      	ldr	r2, [pc, #232]	; (80091bc <TIM_Base_SetConfig+0x124>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d108      	bne.n	80090ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	68fa      	ldr	r2, [r7, #12]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4a2f      	ldr	r2, [pc, #188]	; (80091ac <TIM_Base_SetConfig+0x114>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d02b      	beq.n	800914a <TIM_Base_SetConfig+0xb2>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090f8:	d027      	beq.n	800914a <TIM_Base_SetConfig+0xb2>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4a2c      	ldr	r2, [pc, #176]	; (80091b0 <TIM_Base_SetConfig+0x118>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d023      	beq.n	800914a <TIM_Base_SetConfig+0xb2>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4a2b      	ldr	r2, [pc, #172]	; (80091b4 <TIM_Base_SetConfig+0x11c>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d01f      	beq.n	800914a <TIM_Base_SetConfig+0xb2>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4a2a      	ldr	r2, [pc, #168]	; (80091b8 <TIM_Base_SetConfig+0x120>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d01b      	beq.n	800914a <TIM_Base_SetConfig+0xb2>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4a29      	ldr	r2, [pc, #164]	; (80091bc <TIM_Base_SetConfig+0x124>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d017      	beq.n	800914a <TIM_Base_SetConfig+0xb2>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4a28      	ldr	r2, [pc, #160]	; (80091c0 <TIM_Base_SetConfig+0x128>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d013      	beq.n	800914a <TIM_Base_SetConfig+0xb2>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	4a27      	ldr	r2, [pc, #156]	; (80091c4 <TIM_Base_SetConfig+0x12c>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d00f      	beq.n	800914a <TIM_Base_SetConfig+0xb2>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4a26      	ldr	r2, [pc, #152]	; (80091c8 <TIM_Base_SetConfig+0x130>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d00b      	beq.n	800914a <TIM_Base_SetConfig+0xb2>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4a25      	ldr	r2, [pc, #148]	; (80091cc <TIM_Base_SetConfig+0x134>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d007      	beq.n	800914a <TIM_Base_SetConfig+0xb2>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4a24      	ldr	r2, [pc, #144]	; (80091d0 <TIM_Base_SetConfig+0x138>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d003      	beq.n	800914a <TIM_Base_SetConfig+0xb2>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4a23      	ldr	r2, [pc, #140]	; (80091d4 <TIM_Base_SetConfig+0x13c>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d108      	bne.n	800915c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	68fa      	ldr	r2, [r7, #12]
 8009158:	4313      	orrs	r3, r2
 800915a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	695b      	ldr	r3, [r3, #20]
 8009166:	4313      	orrs	r3, r2
 8009168:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	689a      	ldr	r2, [r3, #8]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4a0a      	ldr	r2, [pc, #40]	; (80091ac <TIM_Base_SetConfig+0x114>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d003      	beq.n	8009190 <TIM_Base_SetConfig+0xf8>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4a0c      	ldr	r2, [pc, #48]	; (80091bc <TIM_Base_SetConfig+0x124>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d103      	bne.n	8009198 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	691a      	ldr	r2, [r3, #16]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	615a      	str	r2, [r3, #20]
}
 800919e:	bf00      	nop
 80091a0:	3714      	adds	r7, #20
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop
 80091ac:	40010000 	.word	0x40010000
 80091b0:	40000400 	.word	0x40000400
 80091b4:	40000800 	.word	0x40000800
 80091b8:	40000c00 	.word	0x40000c00
 80091bc:	40010400 	.word	0x40010400
 80091c0:	40014000 	.word	0x40014000
 80091c4:	40014400 	.word	0x40014400
 80091c8:	40014800 	.word	0x40014800
 80091cc:	40001800 	.word	0x40001800
 80091d0:	40001c00 	.word	0x40001c00
 80091d4:	40002000 	.word	0x40002000

080091d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091d8:	b480      	push	{r7}
 80091da:	b087      	sub	sp, #28
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6a1b      	ldr	r3, [r3, #32]
 80091e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6a1b      	ldr	r3, [r3, #32]
 80091ee:	f023 0201 	bic.w	r2, r3, #1
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	699b      	ldr	r3, [r3, #24]
 80091fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009202:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	011b      	lsls	r3, r3, #4
 8009208:	693a      	ldr	r2, [r7, #16]
 800920a:	4313      	orrs	r3, r2
 800920c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	f023 030a 	bic.w	r3, r3, #10
 8009214:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009216:	697a      	ldr	r2, [r7, #20]
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	4313      	orrs	r3, r2
 800921c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	693a      	ldr	r2, [r7, #16]
 8009222:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	697a      	ldr	r2, [r7, #20]
 8009228:	621a      	str	r2, [r3, #32]
}
 800922a:	bf00      	nop
 800922c:	371c      	adds	r7, #28
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr

08009236 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009236:	b480      	push	{r7}
 8009238:	b087      	sub	sp, #28
 800923a:	af00      	add	r7, sp, #0
 800923c:	60f8      	str	r0, [r7, #12]
 800923e:	60b9      	str	r1, [r7, #8]
 8009240:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6a1b      	ldr	r3, [r3, #32]
 8009246:	f023 0210 	bic.w	r2, r3, #16
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	699b      	ldr	r3, [r3, #24]
 8009252:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6a1b      	ldr	r3, [r3, #32]
 8009258:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009260:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	031b      	lsls	r3, r3, #12
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	4313      	orrs	r3, r2
 800926a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009272:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	011b      	lsls	r3, r3, #4
 8009278:	693a      	ldr	r2, [r7, #16]
 800927a:	4313      	orrs	r3, r2
 800927c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	697a      	ldr	r2, [r7, #20]
 8009282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	693a      	ldr	r2, [r7, #16]
 8009288:	621a      	str	r2, [r3, #32]
}
 800928a:	bf00      	nop
 800928c:	371c      	adds	r7, #28
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr

08009296 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009296:	b480      	push	{r7}
 8009298:	b085      	sub	sp, #20
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
 800929e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092ae:	683a      	ldr	r2, [r7, #0]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	4313      	orrs	r3, r2
 80092b4:	f043 0307 	orr.w	r3, r3, #7
 80092b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	68fa      	ldr	r2, [r7, #12]
 80092be:	609a      	str	r2, [r3, #8]
}
 80092c0:	bf00      	nop
 80092c2:	3714      	adds	r7, #20
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b087      	sub	sp, #28
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	607a      	str	r2, [r7, #4]
 80092d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	021a      	lsls	r2, r3, #8
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	431a      	orrs	r2, r3
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	4313      	orrs	r3, r2
 80092f4:	697a      	ldr	r2, [r7, #20]
 80092f6:	4313      	orrs	r3, r2
 80092f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	697a      	ldr	r2, [r7, #20]
 80092fe:	609a      	str	r2, [r3, #8]
}
 8009300:	bf00      	nop
 8009302:	371c      	adds	r7, #28
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800930c:	b480      	push	{r7}
 800930e:	b085      	sub	sp, #20
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800931c:	2b01      	cmp	r3, #1
 800931e:	d101      	bne.n	8009324 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009320:	2302      	movs	r3, #2
 8009322:	e045      	b.n	80093b0 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2201      	movs	r2, #1
 8009328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2202      	movs	r2, #2
 8009330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a1c      	ldr	r2, [pc, #112]	; (80093bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d004      	beq.n	8009358 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a1b      	ldr	r2, [pc, #108]	; (80093c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d108      	bne.n	800936a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800935e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	4313      	orrs	r3, r2
 8009368:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009370:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68fa      	ldr	r2, [r7, #12]
 8009378:	4313      	orrs	r3, r2
 800937a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009382:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	68ba      	ldr	r2, [r7, #8]
 800938a:	4313      	orrs	r3, r2
 800938c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	68fa      	ldr	r2, [r7, #12]
 8009394:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	68ba      	ldr	r2, [r7, #8]
 800939c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2201      	movs	r2, #1
 80093a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3714      	adds	r7, #20
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr
 80093bc:	40010000 	.word	0x40010000
 80093c0:	40010400 	.word	0x40010400

080093c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80093cc:	bf00      	nop
 80093ce:	370c      	adds	r7, #12
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093e0:	bf00      	nop
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80093f4:	bf00      	nop
 80093f6:	370c      	adds	r7, #12
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d101      	bne.n	8009412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800940e:	2301      	movs	r3, #1
 8009410:	e040      	b.n	8009494 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009416:	2b00      	cmp	r3, #0
 8009418:	d106      	bne.n	8009428 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f003 fbe8 	bl	800cbf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2224      	movs	r2, #36	; 0x24
 800942c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f022 0201 	bic.w	r2, r2, #1
 800943c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 f82c 	bl	800949c <UART_SetConfig>
 8009444:	4603      	mov	r3, r0
 8009446:	2b01      	cmp	r3, #1
 8009448:	d101      	bne.n	800944e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	e022      	b.n	8009494 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009452:	2b00      	cmp	r3, #0
 8009454:	d002      	beq.n	800945c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 fac4 	bl	80099e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	685a      	ldr	r2, [r3, #4]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800946a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	689a      	ldr	r2, [r3, #8]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800947a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f042 0201 	orr.w	r2, r2, #1
 800948a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 fb4b 	bl	8009b28 <UART_CheckIdleState>
 8009492:	4603      	mov	r3, r0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3708      	adds	r7, #8
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b088      	sub	sp, #32
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80094a4:	2300      	movs	r3, #0
 80094a6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80094a8:	2300      	movs	r3, #0
 80094aa:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	689a      	ldr	r2, [r3, #8]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	691b      	ldr	r3, [r3, #16]
 80094b4:	431a      	orrs	r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	695b      	ldr	r3, [r3, #20]
 80094ba:	431a      	orrs	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	69db      	ldr	r3, [r3, #28]
 80094c0:	4313      	orrs	r3, r2
 80094c2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	4bb1      	ldr	r3, [pc, #708]	; (8009790 <UART_SetConfig+0x2f4>)
 80094cc:	4013      	ands	r3, r2
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	6812      	ldr	r2, [r2, #0]
 80094d2:	6939      	ldr	r1, [r7, #16]
 80094d4:	430b      	orrs	r3, r1
 80094d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	68da      	ldr	r2, [r3, #12]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	430a      	orrs	r2, r1
 80094ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	699b      	ldr	r3, [r3, #24]
 80094f2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6a1b      	ldr	r3, [r3, #32]
 80094f8:	693a      	ldr	r2, [r7, #16]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	693a      	ldr	r2, [r7, #16]
 800950e:	430a      	orrs	r2, r1
 8009510:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a9f      	ldr	r2, [pc, #636]	; (8009794 <UART_SetConfig+0x2f8>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d121      	bne.n	8009560 <UART_SetConfig+0xc4>
 800951c:	4b9e      	ldr	r3, [pc, #632]	; (8009798 <UART_SetConfig+0x2fc>)
 800951e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009522:	f003 0303 	and.w	r3, r3, #3
 8009526:	2b03      	cmp	r3, #3
 8009528:	d816      	bhi.n	8009558 <UART_SetConfig+0xbc>
 800952a:	a201      	add	r2, pc, #4	; (adr r2, 8009530 <UART_SetConfig+0x94>)
 800952c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009530:	08009541 	.word	0x08009541
 8009534:	0800954d 	.word	0x0800954d
 8009538:	08009547 	.word	0x08009547
 800953c:	08009553 	.word	0x08009553
 8009540:	2301      	movs	r3, #1
 8009542:	77fb      	strb	r3, [r7, #31]
 8009544:	e151      	b.n	80097ea <UART_SetConfig+0x34e>
 8009546:	2302      	movs	r3, #2
 8009548:	77fb      	strb	r3, [r7, #31]
 800954a:	e14e      	b.n	80097ea <UART_SetConfig+0x34e>
 800954c:	2304      	movs	r3, #4
 800954e:	77fb      	strb	r3, [r7, #31]
 8009550:	e14b      	b.n	80097ea <UART_SetConfig+0x34e>
 8009552:	2308      	movs	r3, #8
 8009554:	77fb      	strb	r3, [r7, #31]
 8009556:	e148      	b.n	80097ea <UART_SetConfig+0x34e>
 8009558:	2310      	movs	r3, #16
 800955a:	77fb      	strb	r3, [r7, #31]
 800955c:	bf00      	nop
 800955e:	e144      	b.n	80097ea <UART_SetConfig+0x34e>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a8d      	ldr	r2, [pc, #564]	; (800979c <UART_SetConfig+0x300>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d134      	bne.n	80095d4 <UART_SetConfig+0x138>
 800956a:	4b8b      	ldr	r3, [pc, #556]	; (8009798 <UART_SetConfig+0x2fc>)
 800956c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009570:	f003 030c 	and.w	r3, r3, #12
 8009574:	2b0c      	cmp	r3, #12
 8009576:	d829      	bhi.n	80095cc <UART_SetConfig+0x130>
 8009578:	a201      	add	r2, pc, #4	; (adr r2, 8009580 <UART_SetConfig+0xe4>)
 800957a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800957e:	bf00      	nop
 8009580:	080095b5 	.word	0x080095b5
 8009584:	080095cd 	.word	0x080095cd
 8009588:	080095cd 	.word	0x080095cd
 800958c:	080095cd 	.word	0x080095cd
 8009590:	080095c1 	.word	0x080095c1
 8009594:	080095cd 	.word	0x080095cd
 8009598:	080095cd 	.word	0x080095cd
 800959c:	080095cd 	.word	0x080095cd
 80095a0:	080095bb 	.word	0x080095bb
 80095a4:	080095cd 	.word	0x080095cd
 80095a8:	080095cd 	.word	0x080095cd
 80095ac:	080095cd 	.word	0x080095cd
 80095b0:	080095c7 	.word	0x080095c7
 80095b4:	2300      	movs	r3, #0
 80095b6:	77fb      	strb	r3, [r7, #31]
 80095b8:	e117      	b.n	80097ea <UART_SetConfig+0x34e>
 80095ba:	2302      	movs	r3, #2
 80095bc:	77fb      	strb	r3, [r7, #31]
 80095be:	e114      	b.n	80097ea <UART_SetConfig+0x34e>
 80095c0:	2304      	movs	r3, #4
 80095c2:	77fb      	strb	r3, [r7, #31]
 80095c4:	e111      	b.n	80097ea <UART_SetConfig+0x34e>
 80095c6:	2308      	movs	r3, #8
 80095c8:	77fb      	strb	r3, [r7, #31]
 80095ca:	e10e      	b.n	80097ea <UART_SetConfig+0x34e>
 80095cc:	2310      	movs	r3, #16
 80095ce:	77fb      	strb	r3, [r7, #31]
 80095d0:	bf00      	nop
 80095d2:	e10a      	b.n	80097ea <UART_SetConfig+0x34e>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a71      	ldr	r2, [pc, #452]	; (80097a0 <UART_SetConfig+0x304>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d120      	bne.n	8009620 <UART_SetConfig+0x184>
 80095de:	4b6e      	ldr	r3, [pc, #440]	; (8009798 <UART_SetConfig+0x2fc>)
 80095e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80095e8:	2b10      	cmp	r3, #16
 80095ea:	d00f      	beq.n	800960c <UART_SetConfig+0x170>
 80095ec:	2b10      	cmp	r3, #16
 80095ee:	d802      	bhi.n	80095f6 <UART_SetConfig+0x15a>
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d005      	beq.n	8009600 <UART_SetConfig+0x164>
 80095f4:	e010      	b.n	8009618 <UART_SetConfig+0x17c>
 80095f6:	2b20      	cmp	r3, #32
 80095f8:	d005      	beq.n	8009606 <UART_SetConfig+0x16a>
 80095fa:	2b30      	cmp	r3, #48	; 0x30
 80095fc:	d009      	beq.n	8009612 <UART_SetConfig+0x176>
 80095fe:	e00b      	b.n	8009618 <UART_SetConfig+0x17c>
 8009600:	2300      	movs	r3, #0
 8009602:	77fb      	strb	r3, [r7, #31]
 8009604:	e0f1      	b.n	80097ea <UART_SetConfig+0x34e>
 8009606:	2302      	movs	r3, #2
 8009608:	77fb      	strb	r3, [r7, #31]
 800960a:	e0ee      	b.n	80097ea <UART_SetConfig+0x34e>
 800960c:	2304      	movs	r3, #4
 800960e:	77fb      	strb	r3, [r7, #31]
 8009610:	e0eb      	b.n	80097ea <UART_SetConfig+0x34e>
 8009612:	2308      	movs	r3, #8
 8009614:	77fb      	strb	r3, [r7, #31]
 8009616:	e0e8      	b.n	80097ea <UART_SetConfig+0x34e>
 8009618:	2310      	movs	r3, #16
 800961a:	77fb      	strb	r3, [r7, #31]
 800961c:	bf00      	nop
 800961e:	e0e4      	b.n	80097ea <UART_SetConfig+0x34e>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a5f      	ldr	r2, [pc, #380]	; (80097a4 <UART_SetConfig+0x308>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d120      	bne.n	800966c <UART_SetConfig+0x1d0>
 800962a:	4b5b      	ldr	r3, [pc, #364]	; (8009798 <UART_SetConfig+0x2fc>)
 800962c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009630:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009634:	2b40      	cmp	r3, #64	; 0x40
 8009636:	d00f      	beq.n	8009658 <UART_SetConfig+0x1bc>
 8009638:	2b40      	cmp	r3, #64	; 0x40
 800963a:	d802      	bhi.n	8009642 <UART_SetConfig+0x1a6>
 800963c:	2b00      	cmp	r3, #0
 800963e:	d005      	beq.n	800964c <UART_SetConfig+0x1b0>
 8009640:	e010      	b.n	8009664 <UART_SetConfig+0x1c8>
 8009642:	2b80      	cmp	r3, #128	; 0x80
 8009644:	d005      	beq.n	8009652 <UART_SetConfig+0x1b6>
 8009646:	2bc0      	cmp	r3, #192	; 0xc0
 8009648:	d009      	beq.n	800965e <UART_SetConfig+0x1c2>
 800964a:	e00b      	b.n	8009664 <UART_SetConfig+0x1c8>
 800964c:	2300      	movs	r3, #0
 800964e:	77fb      	strb	r3, [r7, #31]
 8009650:	e0cb      	b.n	80097ea <UART_SetConfig+0x34e>
 8009652:	2302      	movs	r3, #2
 8009654:	77fb      	strb	r3, [r7, #31]
 8009656:	e0c8      	b.n	80097ea <UART_SetConfig+0x34e>
 8009658:	2304      	movs	r3, #4
 800965a:	77fb      	strb	r3, [r7, #31]
 800965c:	e0c5      	b.n	80097ea <UART_SetConfig+0x34e>
 800965e:	2308      	movs	r3, #8
 8009660:	77fb      	strb	r3, [r7, #31]
 8009662:	e0c2      	b.n	80097ea <UART_SetConfig+0x34e>
 8009664:	2310      	movs	r3, #16
 8009666:	77fb      	strb	r3, [r7, #31]
 8009668:	bf00      	nop
 800966a:	e0be      	b.n	80097ea <UART_SetConfig+0x34e>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a4d      	ldr	r2, [pc, #308]	; (80097a8 <UART_SetConfig+0x30c>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d124      	bne.n	80096c0 <UART_SetConfig+0x224>
 8009676:	4b48      	ldr	r3, [pc, #288]	; (8009798 <UART_SetConfig+0x2fc>)
 8009678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800967c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009684:	d012      	beq.n	80096ac <UART_SetConfig+0x210>
 8009686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800968a:	d802      	bhi.n	8009692 <UART_SetConfig+0x1f6>
 800968c:	2b00      	cmp	r3, #0
 800968e:	d007      	beq.n	80096a0 <UART_SetConfig+0x204>
 8009690:	e012      	b.n	80096b8 <UART_SetConfig+0x21c>
 8009692:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009696:	d006      	beq.n	80096a6 <UART_SetConfig+0x20a>
 8009698:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800969c:	d009      	beq.n	80096b2 <UART_SetConfig+0x216>
 800969e:	e00b      	b.n	80096b8 <UART_SetConfig+0x21c>
 80096a0:	2300      	movs	r3, #0
 80096a2:	77fb      	strb	r3, [r7, #31]
 80096a4:	e0a1      	b.n	80097ea <UART_SetConfig+0x34e>
 80096a6:	2302      	movs	r3, #2
 80096a8:	77fb      	strb	r3, [r7, #31]
 80096aa:	e09e      	b.n	80097ea <UART_SetConfig+0x34e>
 80096ac:	2304      	movs	r3, #4
 80096ae:	77fb      	strb	r3, [r7, #31]
 80096b0:	e09b      	b.n	80097ea <UART_SetConfig+0x34e>
 80096b2:	2308      	movs	r3, #8
 80096b4:	77fb      	strb	r3, [r7, #31]
 80096b6:	e098      	b.n	80097ea <UART_SetConfig+0x34e>
 80096b8:	2310      	movs	r3, #16
 80096ba:	77fb      	strb	r3, [r7, #31]
 80096bc:	bf00      	nop
 80096be:	e094      	b.n	80097ea <UART_SetConfig+0x34e>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a39      	ldr	r2, [pc, #228]	; (80097ac <UART_SetConfig+0x310>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d124      	bne.n	8009714 <UART_SetConfig+0x278>
 80096ca:	4b33      	ldr	r3, [pc, #204]	; (8009798 <UART_SetConfig+0x2fc>)
 80096cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80096d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096d8:	d012      	beq.n	8009700 <UART_SetConfig+0x264>
 80096da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096de:	d802      	bhi.n	80096e6 <UART_SetConfig+0x24a>
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d007      	beq.n	80096f4 <UART_SetConfig+0x258>
 80096e4:	e012      	b.n	800970c <UART_SetConfig+0x270>
 80096e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096ea:	d006      	beq.n	80096fa <UART_SetConfig+0x25e>
 80096ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80096f0:	d009      	beq.n	8009706 <UART_SetConfig+0x26a>
 80096f2:	e00b      	b.n	800970c <UART_SetConfig+0x270>
 80096f4:	2301      	movs	r3, #1
 80096f6:	77fb      	strb	r3, [r7, #31]
 80096f8:	e077      	b.n	80097ea <UART_SetConfig+0x34e>
 80096fa:	2302      	movs	r3, #2
 80096fc:	77fb      	strb	r3, [r7, #31]
 80096fe:	e074      	b.n	80097ea <UART_SetConfig+0x34e>
 8009700:	2304      	movs	r3, #4
 8009702:	77fb      	strb	r3, [r7, #31]
 8009704:	e071      	b.n	80097ea <UART_SetConfig+0x34e>
 8009706:	2308      	movs	r3, #8
 8009708:	77fb      	strb	r3, [r7, #31]
 800970a:	e06e      	b.n	80097ea <UART_SetConfig+0x34e>
 800970c:	2310      	movs	r3, #16
 800970e:	77fb      	strb	r3, [r7, #31]
 8009710:	bf00      	nop
 8009712:	e06a      	b.n	80097ea <UART_SetConfig+0x34e>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a25      	ldr	r2, [pc, #148]	; (80097b0 <UART_SetConfig+0x314>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d124      	bne.n	8009768 <UART_SetConfig+0x2cc>
 800971e:	4b1e      	ldr	r3, [pc, #120]	; (8009798 <UART_SetConfig+0x2fc>)
 8009720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009724:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800972c:	d012      	beq.n	8009754 <UART_SetConfig+0x2b8>
 800972e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009732:	d802      	bhi.n	800973a <UART_SetConfig+0x29e>
 8009734:	2b00      	cmp	r3, #0
 8009736:	d007      	beq.n	8009748 <UART_SetConfig+0x2ac>
 8009738:	e012      	b.n	8009760 <UART_SetConfig+0x2c4>
 800973a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800973e:	d006      	beq.n	800974e <UART_SetConfig+0x2b2>
 8009740:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009744:	d009      	beq.n	800975a <UART_SetConfig+0x2be>
 8009746:	e00b      	b.n	8009760 <UART_SetConfig+0x2c4>
 8009748:	2300      	movs	r3, #0
 800974a:	77fb      	strb	r3, [r7, #31]
 800974c:	e04d      	b.n	80097ea <UART_SetConfig+0x34e>
 800974e:	2302      	movs	r3, #2
 8009750:	77fb      	strb	r3, [r7, #31]
 8009752:	e04a      	b.n	80097ea <UART_SetConfig+0x34e>
 8009754:	2304      	movs	r3, #4
 8009756:	77fb      	strb	r3, [r7, #31]
 8009758:	e047      	b.n	80097ea <UART_SetConfig+0x34e>
 800975a:	2308      	movs	r3, #8
 800975c:	77fb      	strb	r3, [r7, #31]
 800975e:	e044      	b.n	80097ea <UART_SetConfig+0x34e>
 8009760:	2310      	movs	r3, #16
 8009762:	77fb      	strb	r3, [r7, #31]
 8009764:	bf00      	nop
 8009766:	e040      	b.n	80097ea <UART_SetConfig+0x34e>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a11      	ldr	r2, [pc, #68]	; (80097b4 <UART_SetConfig+0x318>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d139      	bne.n	80097e6 <UART_SetConfig+0x34a>
 8009772:	4b09      	ldr	r3, [pc, #36]	; (8009798 <UART_SetConfig+0x2fc>)
 8009774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009778:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800977c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009780:	d027      	beq.n	80097d2 <UART_SetConfig+0x336>
 8009782:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009786:	d817      	bhi.n	80097b8 <UART_SetConfig+0x31c>
 8009788:	2b00      	cmp	r3, #0
 800978a:	d01c      	beq.n	80097c6 <UART_SetConfig+0x32a>
 800978c:	e027      	b.n	80097de <UART_SetConfig+0x342>
 800978e:	bf00      	nop
 8009790:	efff69f3 	.word	0xefff69f3
 8009794:	40011000 	.word	0x40011000
 8009798:	40023800 	.word	0x40023800
 800979c:	40004400 	.word	0x40004400
 80097a0:	40004800 	.word	0x40004800
 80097a4:	40004c00 	.word	0x40004c00
 80097a8:	40005000 	.word	0x40005000
 80097ac:	40011400 	.word	0x40011400
 80097b0:	40007800 	.word	0x40007800
 80097b4:	40007c00 	.word	0x40007c00
 80097b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097bc:	d006      	beq.n	80097cc <UART_SetConfig+0x330>
 80097be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80097c2:	d009      	beq.n	80097d8 <UART_SetConfig+0x33c>
 80097c4:	e00b      	b.n	80097de <UART_SetConfig+0x342>
 80097c6:	2300      	movs	r3, #0
 80097c8:	77fb      	strb	r3, [r7, #31]
 80097ca:	e00e      	b.n	80097ea <UART_SetConfig+0x34e>
 80097cc:	2302      	movs	r3, #2
 80097ce:	77fb      	strb	r3, [r7, #31]
 80097d0:	e00b      	b.n	80097ea <UART_SetConfig+0x34e>
 80097d2:	2304      	movs	r3, #4
 80097d4:	77fb      	strb	r3, [r7, #31]
 80097d6:	e008      	b.n	80097ea <UART_SetConfig+0x34e>
 80097d8:	2308      	movs	r3, #8
 80097da:	77fb      	strb	r3, [r7, #31]
 80097dc:	e005      	b.n	80097ea <UART_SetConfig+0x34e>
 80097de:	2310      	movs	r3, #16
 80097e0:	77fb      	strb	r3, [r7, #31]
 80097e2:	bf00      	nop
 80097e4:	e001      	b.n	80097ea <UART_SetConfig+0x34e>
 80097e6:	2310      	movs	r3, #16
 80097e8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	69db      	ldr	r3, [r3, #28]
 80097ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097f2:	d17c      	bne.n	80098ee <UART_SetConfig+0x452>
  {
    switch (clocksource)
 80097f4:	7ffb      	ldrb	r3, [r7, #31]
 80097f6:	2b08      	cmp	r3, #8
 80097f8:	d859      	bhi.n	80098ae <UART_SetConfig+0x412>
 80097fa:	a201      	add	r2, pc, #4	; (adr r2, 8009800 <UART_SetConfig+0x364>)
 80097fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009800:	08009825 	.word	0x08009825
 8009804:	08009843 	.word	0x08009843
 8009808:	08009861 	.word	0x08009861
 800980c:	080098af 	.word	0x080098af
 8009810:	08009879 	.word	0x08009879
 8009814:	080098af 	.word	0x080098af
 8009818:	080098af 	.word	0x080098af
 800981c:	080098af 	.word	0x080098af
 8009820:	08009897 	.word	0x08009897
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8009824:	f7fd fb82 	bl	8006f2c <HAL_RCC_GetPCLK1Freq>
 8009828:	4603      	mov	r3, r0
 800982a:	005a      	lsls	r2, r3, #1
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	085b      	lsrs	r3, r3, #1
 8009832:	441a      	add	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	fbb2 f3f3 	udiv	r3, r2, r3
 800983c:	b29b      	uxth	r3, r3
 800983e:	61bb      	str	r3, [r7, #24]
        break;
 8009840:	e038      	b.n	80098b4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8009842:	f7fd fb87 	bl	8006f54 <HAL_RCC_GetPCLK2Freq>
 8009846:	4603      	mov	r3, r0
 8009848:	005a      	lsls	r2, r3, #1
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	085b      	lsrs	r3, r3, #1
 8009850:	441a      	add	r2, r3
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	fbb2 f3f3 	udiv	r3, r2, r3
 800985a:	b29b      	uxth	r3, r3
 800985c:	61bb      	str	r3, [r7, #24]
        break;
 800985e:	e029      	b.n	80098b4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	085a      	lsrs	r2, r3, #1
 8009866:	4b5d      	ldr	r3, [pc, #372]	; (80099dc <UART_SetConfig+0x540>)
 8009868:	4413      	add	r3, r2
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	6852      	ldr	r2, [r2, #4]
 800986e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009872:	b29b      	uxth	r3, r3
 8009874:	61bb      	str	r3, [r7, #24]
        break;
 8009876:	e01d      	b.n	80098b4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009878:	f7fd fa9a 	bl	8006db0 <HAL_RCC_GetSysClockFreq>
 800987c:	4603      	mov	r3, r0
 800987e:	005a      	lsls	r2, r3, #1
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	085b      	lsrs	r3, r3, #1
 8009886:	441a      	add	r2, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009890:	b29b      	uxth	r3, r3
 8009892:	61bb      	str	r3, [r7, #24]
        break;
 8009894:	e00e      	b.n	80098b4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	085b      	lsrs	r3, r3, #1
 800989c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	61bb      	str	r3, [r7, #24]
        break;
 80098ac:	e002      	b.n	80098b4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80098ae:	2301      	movs	r3, #1
 80098b0:	75fb      	strb	r3, [r7, #23]
        break;
 80098b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098b4:	69bb      	ldr	r3, [r7, #24]
 80098b6:	2b0f      	cmp	r3, #15
 80098b8:	d916      	bls.n	80098e8 <UART_SetConfig+0x44c>
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098c0:	d212      	bcs.n	80098e8 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	f023 030f 	bic.w	r3, r3, #15
 80098ca:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80098cc:	69bb      	ldr	r3, [r7, #24]
 80098ce:	085b      	lsrs	r3, r3, #1
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	f003 0307 	and.w	r3, r3, #7
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	89fb      	ldrh	r3, [r7, #14]
 80098da:	4313      	orrs	r3, r2
 80098dc:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	89fa      	ldrh	r2, [r7, #14]
 80098e4:	60da      	str	r2, [r3, #12]
 80098e6:	e06e      	b.n	80099c6 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80098e8:	2301      	movs	r3, #1
 80098ea:	75fb      	strb	r3, [r7, #23]
 80098ec:	e06b      	b.n	80099c6 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 80098ee:	7ffb      	ldrb	r3, [r7, #31]
 80098f0:	2b08      	cmp	r3, #8
 80098f2:	d857      	bhi.n	80099a4 <UART_SetConfig+0x508>
 80098f4:	a201      	add	r2, pc, #4	; (adr r2, 80098fc <UART_SetConfig+0x460>)
 80098f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098fa:	bf00      	nop
 80098fc:	08009921 	.word	0x08009921
 8009900:	0800993d 	.word	0x0800993d
 8009904:	08009959 	.word	0x08009959
 8009908:	080099a5 	.word	0x080099a5
 800990c:	08009971 	.word	0x08009971
 8009910:	080099a5 	.word	0x080099a5
 8009914:	080099a5 	.word	0x080099a5
 8009918:	080099a5 	.word	0x080099a5
 800991c:	0800998d 	.word	0x0800998d
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8009920:	f7fd fb04 	bl	8006f2c <HAL_RCC_GetPCLK1Freq>
 8009924:	4602      	mov	r2, r0
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	085b      	lsrs	r3, r3, #1
 800992c:	441a      	add	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	fbb2 f3f3 	udiv	r3, r2, r3
 8009936:	b29b      	uxth	r3, r3
 8009938:	61bb      	str	r3, [r7, #24]
        break;
 800993a:	e036      	b.n	80099aa <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800993c:	f7fd fb0a 	bl	8006f54 <HAL_RCC_GetPCLK2Freq>
 8009940:	4602      	mov	r2, r0
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	085b      	lsrs	r3, r3, #1
 8009948:	441a      	add	r2, r3
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009952:	b29b      	uxth	r3, r3
 8009954:	61bb      	str	r3, [r7, #24]
        break;
 8009956:	e028      	b.n	80099aa <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	085a      	lsrs	r2, r3, #1
 800995e:	4b20      	ldr	r3, [pc, #128]	; (80099e0 <UART_SetConfig+0x544>)
 8009960:	4413      	add	r3, r2
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	6852      	ldr	r2, [r2, #4]
 8009966:	fbb3 f3f2 	udiv	r3, r3, r2
 800996a:	b29b      	uxth	r3, r3
 800996c:	61bb      	str	r3, [r7, #24]
        break;
 800996e:	e01c      	b.n	80099aa <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009970:	f7fd fa1e 	bl	8006db0 <HAL_RCC_GetSysClockFreq>
 8009974:	4602      	mov	r2, r0
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	085b      	lsrs	r3, r3, #1
 800997c:	441a      	add	r2, r3
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	fbb2 f3f3 	udiv	r3, r2, r3
 8009986:	b29b      	uxth	r3, r3
 8009988:	61bb      	str	r3, [r7, #24]
        break;
 800998a:	e00e      	b.n	80099aa <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	085b      	lsrs	r3, r3, #1
 8009992:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	fbb2 f3f3 	udiv	r3, r2, r3
 800999e:	b29b      	uxth	r3, r3
 80099a0:	61bb      	str	r3, [r7, #24]
        break;
 80099a2:	e002      	b.n	80099aa <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80099a4:	2301      	movs	r3, #1
 80099a6:	75fb      	strb	r3, [r7, #23]
        break;
 80099a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	2b0f      	cmp	r3, #15
 80099ae:	d908      	bls.n	80099c2 <UART_SetConfig+0x526>
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099b6:	d204      	bcs.n	80099c2 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	69ba      	ldr	r2, [r7, #24]
 80099be:	60da      	str	r2, [r3, #12]
 80099c0:	e001      	b.n	80099c6 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80099c2:	2301      	movs	r3, #1
 80099c4:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80099d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3720      	adds	r7, #32
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	01e84800 	.word	0x01e84800
 80099e0:	00f42400 	.word	0x00f42400

080099e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f0:	f003 0301 	and.w	r3, r3, #1
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d00a      	beq.n	8009a0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	430a      	orrs	r2, r1
 8009a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a12:	f003 0302 	and.w	r3, r3, #2
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00a      	beq.n	8009a30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	430a      	orrs	r2, r1
 8009a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a34:	f003 0304 	and.w	r3, r3, #4
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00a      	beq.n	8009a52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	430a      	orrs	r2, r1
 8009a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a56:	f003 0308 	and.w	r3, r3, #8
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d00a      	beq.n	8009a74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	430a      	orrs	r2, r1
 8009a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a78:	f003 0310 	and.w	r3, r3, #16
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00a      	beq.n	8009a96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	430a      	orrs	r2, r1
 8009a94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9a:	f003 0320 	and.w	r3, r3, #32
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00a      	beq.n	8009ab8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	430a      	orrs	r2, r1
 8009ab6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d01a      	beq.n	8009afa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	430a      	orrs	r2, r1
 8009ad8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ade:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ae2:	d10a      	bne.n	8009afa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	430a      	orrs	r2, r1
 8009af8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d00a      	beq.n	8009b1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	430a      	orrs	r2, r1
 8009b1a:	605a      	str	r2, [r3, #4]
  }
}
 8009b1c:	bf00      	nop
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b086      	sub	sp, #24
 8009b2c:	af02      	add	r7, sp, #8
 8009b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009b36:	f7f9 fb1d 	bl	8003174 <HAL_GetTick>
 8009b3a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f003 0308 	and.w	r3, r3, #8
 8009b46:	2b08      	cmp	r3, #8
 8009b48:	d10e      	bne.n	8009b68 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b4a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b4e:	9300      	str	r3, [sp, #0]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f814 	bl	8009b86 <UART_WaitOnFlagUntilTimeout>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d001      	beq.n	8009b68 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b64:	2303      	movs	r3, #3
 8009b66:	e00a      	b.n	8009b7e <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2220      	movs	r2, #32
 8009b6c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2220      	movs	r2, #32
 8009b72:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b084      	sub	sp, #16
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	60f8      	str	r0, [r7, #12]
 8009b8e:	60b9      	str	r1, [r7, #8]
 8009b90:	603b      	str	r3, [r7, #0]
 8009b92:	4613      	mov	r3, r2
 8009b94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b96:	e02a      	b.n	8009bee <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b9e:	d026      	beq.n	8009bee <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ba0:	f7f9 fae8 	bl	8003174 <HAL_GetTick>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	1ad3      	subs	r3, r2, r3
 8009baa:	69ba      	ldr	r2, [r7, #24]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d302      	bcc.n	8009bb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d11b      	bne.n	8009bee <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009bc4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	689a      	ldr	r2, [r3, #8]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f022 0201 	bic.w	r2, r2, #1
 8009bd4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2220      	movs	r2, #32
 8009bda:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2220      	movs	r2, #32
 8009be0:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2200      	movs	r2, #0
 8009be6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8009bea:	2303      	movs	r3, #3
 8009bec:	e00f      	b.n	8009c0e <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	69da      	ldr	r2, [r3, #28]
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	4013      	ands	r3, r2
 8009bf8:	68ba      	ldr	r2, [r7, #8]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	bf0c      	ite	eq
 8009bfe:	2301      	moveq	r3, #1
 8009c00:	2300      	movne	r3, #0
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	461a      	mov	r2, r3
 8009c06:	79fb      	ldrb	r3, [r7, #7]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d0c5      	beq.n	8009b98 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3710      	adds	r7, #16
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
	...

08009c18 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8009c22:	2300      	movs	r3, #0
 8009c24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8009c26:	2300      	movs	r3, #0
 8009c28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d027      	beq.n	8009c82 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	4b2f      	ldr	r3, [pc, #188]	; (8009cf8 <FMC_SDRAM_Init+0xe0>)
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009c48:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8009c4e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8009c54:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8009c5a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8009c60:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8009c66:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8009c6c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8009c72:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009c74:	68fa      	ldr	r2, [r7, #12]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	601a      	str	r2, [r3, #0]
 8009c80:	e032      	b.n	8009ce8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009c8e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009c98:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8009c9e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009ca0:	68fa      	ldr	r2, [r7, #12]
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009cac:	68ba      	ldr	r2, [r7, #8]
 8009cae:	4b12      	ldr	r3, [pc, #72]	; (8009cf8 <FMC_SDRAM_Init+0xe0>)
 8009cb0:	4013      	ands	r3, r2
 8009cb2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009cbc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8009cc2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8009cc8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8009cce:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8009cd4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009cd6:	68ba      	ldr	r2, [r7, #8]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	68ba      	ldr	r2, [r7, #8]
 8009ce6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8009ce8:	2300      	movs	r3, #0
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3714      	adds	r7, #20
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
 8009cf6:	bf00      	nop
 8009cf8:	ffff8000 	.word	0xffff8000

08009cfc <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b087      	sub	sp, #28
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d02e      	beq.n	8009d74 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009d22:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	3b01      	subs	r3, #1
 8009d30:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009d32:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8009d3c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	3b01      	subs	r3, #1
 8009d44:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8009d46:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	691b      	ldr	r3, [r3, #16]
 8009d4c:	3b01      	subs	r3, #1
 8009d4e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8009d50:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	695b      	ldr	r3, [r3, #20]
 8009d56:	3b01      	subs	r3, #1
 8009d58:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8009d5a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	699b      	ldr	r3, [r3, #24]
 8009d60:	3b01      	subs	r3, #1
 8009d62:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009d64:	4313      	orrs	r3, r2
 8009d66:	697a      	ldr	r2, [r7, #20]
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	697a      	ldr	r2, [r7, #20]
 8009d70:	609a      	str	r2, [r3, #8]
 8009d72:	e039      	b.n	8009de8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8009d7a:	697a      	ldr	r2, [r7, #20]
 8009d7c:	4b1e      	ldr	r3, [pc, #120]	; (8009df8 <FMC_SDRAM_Timing_Init+0xfc>)
 8009d7e:	4013      	ands	r3, r2
 8009d80:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	3b01      	subs	r3, #1
 8009d88:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	695b      	ldr	r3, [r3, #20]
 8009d8e:	3b01      	subs	r3, #1
 8009d90:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8009d92:	4313      	orrs	r3, r2
 8009d94:	697a      	ldr	r2, [r7, #20]
 8009d96:	4313      	orrs	r3, r2
 8009d98:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009da6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	3b01      	subs	r3, #1
 8009db4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009db6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	3b01      	subs	r3, #1
 8009dbe:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8009dc0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	691b      	ldr	r3, [r3, #16]
 8009dc6:	3b01      	subs	r3, #1
 8009dc8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8009dca:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	699b      	ldr	r3, [r3, #24]
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	693a      	ldr	r2, [r7, #16]
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	697a      	ldr	r2, [r7, #20]
 8009de0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	693a      	ldr	r2, [r7, #16]
 8009de6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	371c      	adds	r7, #28
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	ff0f0fff 	.word	0xff0f0fff

08009dfc <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b087      	sub	sp, #28
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009e14:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	3b01      	subs	r3, #1
 8009e1c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8009e1e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009e26:	4313      	orrs	r3, r2
 8009e28:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8009e2a:	697a      	ldr	r2, [r7, #20]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8009e30:	2300      	movs	r3, #0
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	371c      	adds	r7, #28
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr

08009e3e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009e3e:	b480      	push	{r7}
 8009e40:	b083      	sub	sp, #12
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
 8009e46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	695a      	ldr	r2, [r3, #20]
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	005b      	lsls	r3, r3, #1
 8009e50:	431a      	orrs	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009e64:	b084      	sub	sp, #16
 8009e66:	b480      	push	{r7}
 8009e68:	b085      	sub	sp, #20
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
 8009e6e:	f107 001c 	add.w	r0, r7, #28
 8009e72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009e76:	2300      	movs	r3, #0
 8009e78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009e7a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009e7c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009e7e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009e82:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009e86:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009e8a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009e8e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	4313      	orrs	r3, r2
 8009e94:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	685a      	ldr	r2, [r3, #4]
 8009e9a:	4b07      	ldr	r3, [pc, #28]	; (8009eb8 <SDMMC_Init+0x54>)
 8009e9c:	4013      	ands	r3, r2
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	431a      	orrs	r2, r3
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3714      	adds	r7, #20
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	b004      	add	sp, #16
 8009eb4:	4770      	bx	lr
 8009eb6:	bf00      	nop
 8009eb8:	ffff8100 	.word	0xffff8100

08009ebc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	370c      	adds	r7, #12
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr

08009ed6 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8009ed6:	b480      	push	{r7}
 8009ed8:	b083      	sub	sp, #12
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2203      	movs	r2, #3
 8009ee2:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 8009ee4:	2300      	movs	r3, #0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	370c      	adds	r7, #12
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr

08009ef2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8009ef2:	b480      	push	{r7}
 8009ef4:	b083      	sub	sp, #12
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f003 0303 	and.w	r3, r3, #3
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	370c      	adds	r7, #12
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr
	...

08009f10 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b085      	sub	sp, #20
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009f2e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009f34:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009f3a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009f3c:	68fa      	ldr	r2, [r7, #12]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	68da      	ldr	r2, [r3, #12]
 8009f46:	4b06      	ldr	r3, [pc, #24]	; (8009f60 <SDMMC_SendCommand+0x50>)
 8009f48:	4013      	ands	r3, r2
 8009f4a:	68fa      	ldr	r2, [r7, #12]
 8009f4c:	431a      	orrs	r2, r3
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3714      	adds	r7, #20
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr
 8009f60:	fffff000 	.word	0xfffff000

08009f64 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	691b      	ldr	r3, [r3, #16]
 8009f70:	b2db      	uxtb	r3, r3
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	370c      	adds	r7, #12
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr

08009f7e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009f7e:	b480      	push	{r7}
 8009f80:	b085      	sub	sp, #20
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
 8009f86:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	3314      	adds	r3, #20
 8009f90:	461a      	mov	r2, r3
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	4413      	add	r3, r2
 8009f96:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
}  
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3714      	adds	r7, #20
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	685a      	ldr	r2, [r3, #4]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009fce:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009fd4:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009fda:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009fdc:	68fa      	ldr	r2, [r7, #12]
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	431a      	orrs	r2, r3
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009ff2:	2300      	movs	r3, #0

}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3714      	adds	r7, #20
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b088      	sub	sp, #32
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a00a:	2300      	movs	r3, #0
 800a00c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a012:	2310      	movs	r3, #16
 800a014:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a016:	2340      	movs	r3, #64	; 0x40
 800a018:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a01a:	2300      	movs	r3, #0
 800a01c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a01e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a022:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a024:	f107 0308 	add.w	r3, r7, #8
 800a028:	4619      	mov	r1, r3
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f7ff ff70 	bl	8009f10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a030:	f241 3288 	movw	r2, #5000	; 0x1388
 800a034:	2110      	movs	r1, #16
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 f98c 	bl	800a354 <SDMMC_GetCmdResp1>
 800a03c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a03e:	69fb      	ldr	r3, [r7, #28]
}
 800a040:	4618      	mov	r0, r3
 800a042:	3720      	adds	r7, #32
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b08a      	sub	sp, #40	; 0x28
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a054:	2300      	movs	r3, #0
 800a056:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a05c:	2307      	movs	r3, #7
 800a05e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a060:	2340      	movs	r3, #64	; 0x40
 800a062:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a064:	2300      	movs	r3, #0
 800a066:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a06c:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a06e:	f107 0310 	add.w	r3, r7, #16
 800a072:	4619      	mov	r1, r3
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f7ff ff4b 	bl	8009f10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a07a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a07e:	2107      	movs	r1, #7
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	f000 f967 	bl	800a354 <SDMMC_GetCmdResp1>
 800a086:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3728      	adds	r7, #40	; 0x28
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b088      	sub	sp, #32
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a09a:	2300      	movs	r3, #0
 800a09c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a0ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0b2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a0b4:	f107 0308 	add.w	r3, r7, #8
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f7ff ff28 	bl	8009f10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 f91d 	bl	800a300 <SDMMC_GetCmdError>
 800a0c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0c8:	69fb      	ldr	r3, [r7, #28]
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3720      	adds	r7, #32
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b088      	sub	sp, #32
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a0de:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a0e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a0e4:	2308      	movs	r3, #8
 800a0e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a0e8:	2340      	movs	r3, #64	; 0x40
 800a0ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a0f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0f4:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a0f6:	f107 0308 	add.w	r3, r7, #8
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f7ff ff07 	bl	8009f10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 faee 	bl	800a6e4 <SDMMC_GetCmdResp7>
 800a108:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a10a:	69fb      	ldr	r3, [r7, #28]
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3720      	adds	r7, #32
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b088      	sub	sp, #32
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a11e:	2300      	movs	r3, #0
 800a120:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a126:	2337      	movs	r3, #55	; 0x37
 800a128:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a12a:	2340      	movs	r3, #64	; 0x40
 800a12c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a12e:	2300      	movs	r3, #0
 800a130:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a136:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a138:	f107 0308 	add.w	r3, r7, #8
 800a13c:	4619      	mov	r1, r3
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f7ff fee6 	bl	8009f10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a144:	f241 3288 	movw	r2, #5000	; 0x1388
 800a148:	2137      	movs	r1, #55	; 0x37
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 f902 	bl	800a354 <SDMMC_GetCmdResp1>
 800a150:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a152:	69fb      	ldr	r3, [r7, #28]
}
 800a154:	4618      	mov	r0, r3
 800a156:	3720      	adds	r7, #32
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b088      	sub	sp, #32
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a166:	2300      	movs	r3, #0
 800a168:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800a16a:	683a      	ldr	r2, [r7, #0]
 800a16c:	4b0d      	ldr	r3, [pc, #52]	; (800a1a4 <SDMMC_CmdAppOperCommand+0x48>)
 800a16e:	4313      	orrs	r3, r2
 800a170:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a172:	2329      	movs	r3, #41	; 0x29
 800a174:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a176:	2340      	movs	r3, #64	; 0x40
 800a178:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a17a:	2300      	movs	r3, #0
 800a17c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a17e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a182:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a184:	f107 0308 	add.w	r3, r7, #8
 800a188:	4619      	mov	r1, r3
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f7ff fec0 	bl	8009f10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 fa05 	bl	800a5a0 <SDMMC_GetCmdResp3>
 800a196:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a198:	69fb      	ldr	r3, [r7, #28]
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3720      	adds	r7, #32
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	80100000 	.word	0x80100000

0800a1a8 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b088      	sub	sp, #32
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a1ba:	2306      	movs	r3, #6
 800a1bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a1be:	2340      	movs	r3, #64	; 0x40
 800a1c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a1c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1ca:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a1cc:	f107 0308 	add.w	r3, r7, #8
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f7ff fe9c 	bl	8009f10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a1d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1dc:	2106      	movs	r1, #6
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 f8b8 	bl	800a354 <SDMMC_GetCmdResp1>
 800a1e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1e6:	69fb      	ldr	r3, [r7, #28]
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3720      	adds	r7, #32
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b088      	sub	sp, #32
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a200:	2333      	movs	r3, #51	; 0x33
 800a202:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a204:	2340      	movs	r3, #64	; 0x40
 800a206:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a208:	2300      	movs	r3, #0
 800a20a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a20c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a210:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a212:	f107 0308 	add.w	r3, r7, #8
 800a216:	4619      	mov	r1, r3
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f7ff fe79 	bl	8009f10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a21e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a222:	2133      	movs	r1, #51	; 0x33
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 f895 	bl	800a354 <SDMMC_GetCmdResp1>
 800a22a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a22c:	69fb      	ldr	r3, [r7, #28]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3720      	adds	r7, #32
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a236:	b580      	push	{r7, lr}
 800a238:	b088      	sub	sp, #32
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a23e:	2300      	movs	r3, #0
 800a240:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 800a242:	2300      	movs	r3, #0
 800a244:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a246:	2302      	movs	r3, #2
 800a248:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a24a:	23c0      	movs	r3, #192	; 0xc0
 800a24c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a24e:	2300      	movs	r3, #0
 800a250:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a256:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a258:	f107 0308 	add.w	r3, r7, #8
 800a25c:	4619      	mov	r1, r3
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f7ff fe56 	bl	8009f10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 f95b 	bl	800a520 <SDMMC_GetCmdResp2>
 800a26a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a26c:	69fb      	ldr	r3, [r7, #28]
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3720      	adds	r7, #32
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}

0800a276 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a276:	b580      	push	{r7, lr}
 800a278:	b088      	sub	sp, #32
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
 800a27e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a280:	2300      	movs	r3, #0
 800a282:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a288:	2309      	movs	r3, #9
 800a28a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a28c:	23c0      	movs	r3, #192	; 0xc0
 800a28e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a290:	2300      	movs	r3, #0
 800a292:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a298:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a29a:	f107 0308 	add.w	r3, r7, #8
 800a29e:	4619      	mov	r1, r3
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f7ff fe35 	bl	8009f10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 f93a 	bl	800a520 <SDMMC_GetCmdResp2>
 800a2ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2ae:	69fb      	ldr	r3, [r7, #28]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3720      	adds	r7, #32
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b088      	sub	sp, #32
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a2ca:	2303      	movs	r3, #3
 800a2cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a2ce:	2340      	movs	r3, #64	; 0x40
 800a2d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a2d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2da:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a2dc:	f107 0308 	add.w	r3, r7, #8
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f7ff fe14 	bl	8009f10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a2e8:	683a      	ldr	r2, [r7, #0]
 800a2ea:	2103      	movs	r1, #3
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 f98b 	bl	800a608 <SDMMC_GetCmdResp6>
 800a2f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2f4:	69fb      	ldr	r3, [r7, #28]
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3720      	adds	r7, #32
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
	...

0800a300 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a300:	b490      	push	{r4, r7}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800a308:	4b10      	ldr	r3, [pc, #64]	; (800a34c <SDMMC_GetCmdError+0x4c>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a10      	ldr	r2, [pc, #64]	; (800a350 <SDMMC_GetCmdError+0x50>)
 800a30e:	fba2 2303 	umull	r2, r3, r2, r3
 800a312:	0a5b      	lsrs	r3, r3, #9
 800a314:	f241 3288 	movw	r2, #5000	; 0x1388
 800a318:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800a31c:	4623      	mov	r3, r4
 800a31e:	1e5c      	subs	r4, r3, #1
 800a320:	2b00      	cmp	r3, #0
 800a322:	d102      	bne.n	800a32a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a324:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a328:	e00a      	b.n	800a340 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a32e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a332:	2b00      	cmp	r3, #0
 800a334:	d0f2      	beq.n	800a31c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a33c:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	4618      	mov	r0, r3
 800a342:	3708      	adds	r7, #8
 800a344:	46bd      	mov	sp, r7
 800a346:	bc90      	pop	{r4, r7}
 800a348:	4770      	bx	lr
 800a34a:	bf00      	nop
 800a34c:	200000a8 	.word	0x200000a8
 800a350:	10624dd3 	.word	0x10624dd3

0800a354 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a354:	b590      	push	{r4, r7, lr}
 800a356:	b087      	sub	sp, #28
 800a358:	af00      	add	r7, sp, #0
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	460b      	mov	r3, r1
 800a35e:	607a      	str	r2, [r7, #4]
 800a360:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800a362:	4b6c      	ldr	r3, [pc, #432]	; (800a514 <SDMMC_GetCmdResp1+0x1c0>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a6c      	ldr	r2, [pc, #432]	; (800a518 <SDMMC_GetCmdResp1+0x1c4>)
 800a368:	fba2 2303 	umull	r2, r3, r2, r3
 800a36c:	0a5b      	lsrs	r3, r3, #9
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800a374:	4623      	mov	r3, r4
 800a376:	1e5c      	subs	r4, r3, #1
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d102      	bne.n	800a382 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a37c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a380:	e0c3      	b.n	800a50a <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a386:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d0f2      	beq.n	800a374 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a392:	f003 0304 	and.w	r3, r3, #4
 800a396:	2b00      	cmp	r3, #0
 800a398:	d004      	beq.n	800a3a4 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2204      	movs	r2, #4
 800a39e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a3a0:	2304      	movs	r3, #4
 800a3a2:	e0b2      	b.n	800a50a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3a8:	f003 0301 	and.w	r3, r3, #1
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d004      	beq.n	800a3ba <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e0a7      	b.n	800a50a <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a3ba:	68f8      	ldr	r0, [r7, #12]
 800a3bc:	f7ff fdd2 	bl	8009f64 <SDMMC_GetCommandResponse>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	7afb      	ldrb	r3, [r7, #11]
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d001      	beq.n	800a3ce <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e09d      	b.n	800a50a <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a3d4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a3d6:	2100      	movs	r1, #0
 800a3d8:	68f8      	ldr	r0, [r7, #12]
 800a3da:	f7ff fdd0 	bl	8009f7e <SDMMC_GetResponse>
 800a3de:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a3e0:	697a      	ldr	r2, [r7, #20]
 800a3e2:	4b4e      	ldr	r3, [pc, #312]	; (800a51c <SDMMC_GetCmdResp1+0x1c8>)
 800a3e4:	4013      	ands	r3, r2
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d101      	bne.n	800a3ee <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	e08d      	b.n	800a50a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	da02      	bge.n	800a3fa <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a3f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a3f8:	e087      	b.n	800a50a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a400:	2b00      	cmp	r3, #0
 800a402:	d001      	beq.n	800a408 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a404:	2340      	movs	r3, #64	; 0x40
 800a406:	e080      	b.n	800a50a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d001      	beq.n	800a416 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a412:	2380      	movs	r3, #128	; 0x80
 800a414:	e079      	b.n	800a50a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d002      	beq.n	800a426 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a420:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a424:	e071      	b.n	800a50a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d002      	beq.n	800a436 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a430:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a434:	e069      	b.n	800a50a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d002      	beq.n	800a446 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a444:	e061      	b.n	800a50a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d002      	beq.n	800a456 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a450:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a454:	e059      	b.n	800a50a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d002      	beq.n	800a466 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a464:	e051      	b.n	800a50a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d002      	beq.n	800a476 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a470:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a474:	e049      	b.n	800a50a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d002      	beq.n	800a486 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a480:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a484:	e041      	b.n	800a50a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d002      	beq.n	800a496 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800a490:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a494:	e039      	b.n	800a50a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d002      	beq.n	800a4a6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a4a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a4a4:	e031      	b.n	800a50a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d002      	beq.n	800a4b6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a4b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a4b4:	e029      	b.n	800a50a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d002      	beq.n	800a4c6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a4c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a4c4:	e021      	b.n	800a50a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d002      	beq.n	800a4d6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a4d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a4d4:	e019      	b.n	800a50a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d002      	beq.n	800a4e6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a4e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a4e4:	e011      	b.n	800a50a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d002      	beq.n	800a4f6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a4f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a4f4:	e009      	b.n	800a50a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	f003 0308 	and.w	r3, r3, #8
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d002      	beq.n	800a506 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a500:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a504:	e001      	b.n	800a50a <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a506:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	371c      	adds	r7, #28
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd90      	pop	{r4, r7, pc}
 800a512:	bf00      	nop
 800a514:	200000a8 	.word	0x200000a8
 800a518:	10624dd3 	.word	0x10624dd3
 800a51c:	fdffe008 	.word	0xfdffe008

0800a520 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a520:	b490      	push	{r4, r7}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800a528:	4b1b      	ldr	r3, [pc, #108]	; (800a598 <SDMMC_GetCmdResp2+0x78>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a1b      	ldr	r2, [pc, #108]	; (800a59c <SDMMC_GetCmdResp2+0x7c>)
 800a52e:	fba2 2303 	umull	r2, r3, r2, r3
 800a532:	0a5b      	lsrs	r3, r3, #9
 800a534:	f241 3288 	movw	r2, #5000	; 0x1388
 800a538:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800a53c:	4623      	mov	r3, r4
 800a53e:	1e5c      	subs	r4, r3, #1
 800a540:	2b00      	cmp	r3, #0
 800a542:	d102      	bne.n	800a54a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a544:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a548:	e020      	b.n	800a58c <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a54e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a552:	2b00      	cmp	r3, #0
 800a554:	d0f2      	beq.n	800a53c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a55a:	f003 0304 	and.w	r3, r3, #4
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d004      	beq.n	800a56c <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2204      	movs	r2, #4
 800a566:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a568:	2304      	movs	r3, #4
 800a56a:	e00f      	b.n	800a58c <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a570:	f003 0301 	and.w	r3, r3, #1
 800a574:	2b00      	cmp	r3, #0
 800a576:	d004      	beq.n	800a582 <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2201      	movs	r2, #1
 800a57c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a57e:	2301      	movs	r3, #1
 800a580:	e004      	b.n	800a58c <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a588:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a58a:	2300      	movs	r3, #0
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bc90      	pop	{r4, r7}
 800a594:	4770      	bx	lr
 800a596:	bf00      	nop
 800a598:	200000a8 	.word	0x200000a8
 800a59c:	10624dd3 	.word	0x10624dd3

0800a5a0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a5a0:	b490      	push	{r4, r7}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800a5a8:	4b15      	ldr	r3, [pc, #84]	; (800a600 <SDMMC_GetCmdResp3+0x60>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a15      	ldr	r2, [pc, #84]	; (800a604 <SDMMC_GetCmdResp3+0x64>)
 800a5ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a5b2:	0a5b      	lsrs	r3, r3, #9
 800a5b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5b8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800a5bc:	4623      	mov	r3, r4
 800a5be:	1e5c      	subs	r4, r3, #1
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d102      	bne.n	800a5ca <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a5c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a5c8:	e015      	b.n	800a5f6 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d0f2      	beq.n	800a5bc <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5da:	f003 0304 	and.w	r3, r3, #4
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d004      	beq.n	800a5ec <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2204      	movs	r2, #4
 800a5e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5e8:	2304      	movs	r3, #4
 800a5ea:	e004      	b.n	800a5f6 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a5f2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a5f4:	2300      	movs	r3, #0
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3708      	adds	r7, #8
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bc90      	pop	{r4, r7}
 800a5fe:	4770      	bx	lr
 800a600:	200000a8 	.word	0x200000a8
 800a604:	10624dd3 	.word	0x10624dd3

0800a608 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a608:	b590      	push	{r4, r7, lr}
 800a60a:	b087      	sub	sp, #28
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	460b      	mov	r3, r1
 800a612:	607a      	str	r2, [r7, #4]
 800a614:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800a616:	4b31      	ldr	r3, [pc, #196]	; (800a6dc <SDMMC_GetCmdResp6+0xd4>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a31      	ldr	r2, [pc, #196]	; (800a6e0 <SDMMC_GetCmdResp6+0xd8>)
 800a61c:	fba2 2303 	umull	r2, r3, r2, r3
 800a620:	0a5b      	lsrs	r3, r3, #9
 800a622:	f241 3288 	movw	r2, #5000	; 0x1388
 800a626:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800a62a:	4623      	mov	r3, r4
 800a62c:	1e5c      	subs	r4, r3, #1
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d102      	bne.n	800a638 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a632:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a636:	e04c      	b.n	800a6d2 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a63c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a640:	2b00      	cmp	r3, #0
 800a642:	d0f2      	beq.n	800a62a <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a648:	f003 0304 	and.w	r3, r3, #4
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d004      	beq.n	800a65a <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2204      	movs	r2, #4
 800a654:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a656:	2304      	movs	r3, #4
 800a658:	e03b      	b.n	800a6d2 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a65e:	f003 0301 	and.w	r3, r3, #1
 800a662:	2b00      	cmp	r3, #0
 800a664:	d004      	beq.n	800a670 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2201      	movs	r2, #1
 800a66a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a66c:	2301      	movs	r3, #1
 800a66e:	e030      	b.n	800a6d2 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a670:	68f8      	ldr	r0, [r7, #12]
 800a672:	f7ff fc77 	bl	8009f64 <SDMMC_GetCommandResponse>
 800a676:	4603      	mov	r3, r0
 800a678:	461a      	mov	r2, r3
 800a67a:	7afb      	ldrb	r3, [r7, #11]
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d001      	beq.n	800a684 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a680:	2301      	movs	r3, #1
 800a682:	e026      	b.n	800a6d2 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a68a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a68c:	2100      	movs	r1, #0
 800a68e:	68f8      	ldr	r0, [r7, #12]
 800a690:	f7ff fc75 	bl	8009f7e <SDMMC_GetResponse>
 800a694:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d106      	bne.n	800a6ae <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	0c1b      	lsrs	r3, r3, #16
 800a6a4:	b29a      	uxth	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	e011      	b.n	800a6d2 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d002      	beq.n	800a6be <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a6b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a6bc:	e009      	b.n	800a6d2 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d002      	beq.n	800a6ce <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a6c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6cc:	e001      	b.n	800a6d2 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a6ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	371c      	adds	r7, #28
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd90      	pop	{r4, r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	200000a8 	.word	0x200000a8
 800a6e0:	10624dd3 	.word	0x10624dd3

0800a6e4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a6e4:	b490      	push	{r4, r7}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800a6ec:	4b18      	ldr	r3, [pc, #96]	; (800a750 <SDMMC_GetCmdResp7+0x6c>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a18      	ldr	r2, [pc, #96]	; (800a754 <SDMMC_GetCmdResp7+0x70>)
 800a6f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a6f6:	0a5b      	lsrs	r3, r3, #9
 800a6f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6fc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800a700:	4623      	mov	r3, r4
 800a702:	1e5c      	subs	r4, r3, #1
 800a704:	2b00      	cmp	r3, #0
 800a706:	d102      	bne.n	800a70e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a708:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a70c:	e01a      	b.n	800a744 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a712:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a716:	2b00      	cmp	r3, #0
 800a718:	d0f2      	beq.n	800a700 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a71e:	f003 0304 	and.w	r3, r3, #4
 800a722:	2b00      	cmp	r3, #0
 800a724:	d004      	beq.n	800a730 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2240      	movs	r2, #64	; 0x40
 800a72a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a72c:	2304      	movs	r3, #4
 800a72e:	e009      	b.n	800a744 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d002      	beq.n	800a742 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2240      	movs	r2, #64	; 0x40
 800a740:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a742:	2300      	movs	r3, #0
  
}
 800a744:	4618      	mov	r0, r3
 800a746:	3708      	adds	r7, #8
 800a748:	46bd      	mov	sp, r7
 800a74a:	bc90      	pop	{r4, r7}
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	200000a8 	.word	0x200000a8
 800a754:	10624dd3 	.word	0x10624dd3

0800a758 <Init_Display>:

//
//  }

void Init_Display(void)
{
 800a758:	b598      	push	{r3, r4, r7, lr}
 800a75a:	af00      	add	r7, sp, #0
	BSP_LCD_Init();
 800a75c:	f7f6 fff6 	bl	800174c <BSP_LCD_Init>

	/* Initialize TouchScreen in Interrupts Mode */
	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800a760:	f7f7 f864 	bl	800182c <BSP_LCD_GetXSize>
 800a764:	4603      	mov	r3, r0
 800a766:	b29c      	uxth	r4, r3
 800a768:	f7f7 f874 	bl	8001854 <BSP_LCD_GetYSize>
 800a76c:	4603      	mov	r3, r0
 800a76e:	b29b      	uxth	r3, r3
 800a770:	4619      	mov	r1, r3
 800a772:	4620      	mov	r0, r4
 800a774:	f7f8 fa4c 	bl	8002c10 <BSP_TS_Init>

	BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FB_START_ADDRESS);
 800a778:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800a77c:	2001      	movs	r0, #1
 800a77e:	f7f7 f87d 	bl	800187c <BSP_LCD_LayerDefaultInit>

	/* Set LCD Foreground Layer  */
	BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 800a782:	2001      	movs	r0, #1
 800a784:	f7f7 f8da 	bl	800193c <BSP_LCD_SelectLayer>

	/* Enable LCD Display */
	BSP_LCD_DisplayOn();
 800a788:	f7f7 fe74 	bl	8002474 <BSP_LCD_DisplayOn>


	/* Clear the LCD */
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800a78c:	f04f 30ff 	mov.w	r0, #4294967295
 800a790:	f7f7 f8fc 	bl	800198c <BSP_LCD_SetBackColor>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800a794:	f04f 30ff 	mov.w	r0, #4294967295
 800a798:	f7f7 f92c 	bl	80019f4 <BSP_LCD_Clear>


	/* Set the LCD Text Color */
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 800a79c:	4802      	ldr	r0, [pc, #8]	; (800a7a8 <Init_Display+0x50>)
 800a79e:	f7f7 f8dd 	bl	800195c <BSP_LCD_SetTextColor>

	/* Display LCD messages */
	//BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"KiCAD Team Bitch !", CENTER_MODE);
	//BSP_LCD_DisplayStringAt(0, 35, (uint8_t *)"Drivers examples", CENTER_MODE);
}
 800a7a2:	bf00      	nop
 800a7a4:	bd98      	pop	{r3, r4, r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	ff000080 	.word	0xff000080

0800a7ac <Display_Render>:


void Display_Render(void)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	af00      	add	r7, sp, #0
	/* Clear the LCD */
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800a7b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7b4:	f7f7 f8ea 	bl	800198c <BSP_LCD_SetBackColor>
	//BSP_LCD_Clear(LCD_COLOR_WHITE);

	/* Set the LCD Text Color */
	BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 800a7b8:	480c      	ldr	r0, [pc, #48]	; (800a7ec <Display_Render+0x40>)
 800a7ba:	f7f7 f8cf 	bl	800195c <BSP_LCD_SetTextColor>

	/* Main Analyzer Title */
	BSP_LCD_SetFont(&Font16);
 800a7be:	480c      	ldr	r0, [pc, #48]	; (800a7f0 <Display_Render+0x44>)
 800a7c0:	f7f7 f8fe 	bl	80019c0 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"CPE Lyon : Raw Signal !", CENTER_MODE);
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	4a0b      	ldr	r2, [pc, #44]	; (800a7f4 <Display_Render+0x48>)
 800a7c8:	210a      	movs	r1, #10
 800a7ca:	2000      	movs	r0, #0
 800a7cc:	f7f7 f97e 	bl	8001acc <BSP_LCD_DisplayStringAt>

	/* Plot Background */
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800a7d0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800a7d4:	f7f7 f8c2 	bl	800195c <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(PLOT_X, PLOT_Y, PLOT_WIDTH, PLOT_HEIGHT);
 800a7d8:	2396      	movs	r3, #150	; 0x96
 800a7da:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800a7de:	2128      	movs	r1, #40	; 0x28
 800a7e0:	2014      	movs	r0, #20
 800a7e2:	f7f7 fd2d 	bl	8002240 <BSP_LCD_FillRect>

	//Plot_Signal((uint8_t*)signal_test_buffer, SIGNAL_BUFF);
}
 800a7e6:	bf00      	nop
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	bf00      	nop
 800a7ec:	ffffa500 	.word	0xffffa500
 800a7f0:	20000030 	.word	0x20000030
 800a7f4:	0800d240 	.word	0x0800d240

0800a7f8 <Draw_GUI>:

void Draw_GUI(void)
{
 800a7f8:	b5b0      	push	{r4, r5, r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800a7fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a802:	f7f7 f8ab 	bl	800195c <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(GUI_X, GUI_Y, GUI_WIDTH, GUI_HEIGHT);
 800a806:	2350      	movs	r3, #80	; 0x50
 800a808:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800a80c:	21c3      	movs	r1, #195	; 0xc3
 800a80e:	2014      	movs	r0, #20
 800a810:	f7f7 fd16 	bl	8002240 <BSP_LCD_FillRect>

	for(int i = 0; i < NUMBER_OF_BUTTON ; i++)
 800a814:	2300      	movs	r3, #0
 800a816:	607b      	str	r3, [r7, #4]
 800a818:	e08f      	b.n	800a93a <Draw_GUI+0x142>
	{
		BSP_LCD_SetTextColor(button_list[i].color);
 800a81a:	4957      	ldr	r1, [pc, #348]	; (800a978 <Draw_GUI+0x180>)
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	4613      	mov	r3, r2
 800a820:	009b      	lsls	r3, r3, #2
 800a822:	4413      	add	r3, r2
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	440b      	add	r3, r1
 800a828:	330c      	adds	r3, #12
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7f7 f895 	bl	800195c <BSP_LCD_SetTextColor>
		if(button_list[i].is_active == 0)
 800a832:	4951      	ldr	r1, [pc, #324]	; (800a978 <Draw_GUI+0x180>)
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	4613      	mov	r3, r2
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	4413      	add	r3, r2
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	440b      	add	r3, r1
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d128      	bne.n	800a898 <Draw_GUI+0xa0>
		{
			BSP_LCD_DrawRect(button_list[i].x_pos, button_list[i].y_pos, button_list[i].width, button_list[i].height);
 800a846:	494c      	ldr	r1, [pc, #304]	; (800a978 <Draw_GUI+0x180>)
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	4613      	mov	r3, r2
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	4413      	add	r3, r2
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	440b      	add	r3, r1
 800a854:	3302      	adds	r3, #2
 800a856:	8818      	ldrh	r0, [r3, #0]
 800a858:	4947      	ldr	r1, [pc, #284]	; (800a978 <Draw_GUI+0x180>)
 800a85a:	687a      	ldr	r2, [r7, #4]
 800a85c:	4613      	mov	r3, r2
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	4413      	add	r3, r2
 800a862:	009b      	lsls	r3, r3, #2
 800a864:	440b      	add	r3, r1
 800a866:	3304      	adds	r3, #4
 800a868:	881c      	ldrh	r4, [r3, #0]
 800a86a:	4943      	ldr	r1, [pc, #268]	; (800a978 <Draw_GUI+0x180>)
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	4613      	mov	r3, r2
 800a870:	009b      	lsls	r3, r3, #2
 800a872:	4413      	add	r3, r2
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	440b      	add	r3, r1
 800a878:	3306      	adds	r3, #6
 800a87a:	881d      	ldrh	r5, [r3, #0]
 800a87c:	493e      	ldr	r1, [pc, #248]	; (800a978 <Draw_GUI+0x180>)
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	4613      	mov	r3, r2
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	4413      	add	r3, r2
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	440b      	add	r3, r1
 800a88a:	3308      	adds	r3, #8
 800a88c:	881b      	ldrh	r3, [r3, #0]
 800a88e:	462a      	mov	r2, r5
 800a890:	4621      	mov	r1, r4
 800a892:	f7f7 fb6b 	bl	8001f6c <BSP_LCD_DrawRect>
 800a896:	e027      	b.n	800a8e8 <Draw_GUI+0xf0>
		}
		else
		{
			BSP_LCD_FillRect(button_list[i].x_pos, button_list[i].y_pos, button_list[i].width, button_list[i].height);
 800a898:	4937      	ldr	r1, [pc, #220]	; (800a978 <Draw_GUI+0x180>)
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	4613      	mov	r3, r2
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	4413      	add	r3, r2
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	440b      	add	r3, r1
 800a8a6:	3302      	adds	r3, #2
 800a8a8:	8818      	ldrh	r0, [r3, #0]
 800a8aa:	4933      	ldr	r1, [pc, #204]	; (800a978 <Draw_GUI+0x180>)
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	4413      	add	r3, r2
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	440b      	add	r3, r1
 800a8b8:	3304      	adds	r3, #4
 800a8ba:	881c      	ldrh	r4, [r3, #0]
 800a8bc:	492e      	ldr	r1, [pc, #184]	; (800a978 <Draw_GUI+0x180>)
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	4613      	mov	r3, r2
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	4413      	add	r3, r2
 800a8c6:	009b      	lsls	r3, r3, #2
 800a8c8:	440b      	add	r3, r1
 800a8ca:	3306      	adds	r3, #6
 800a8cc:	881d      	ldrh	r5, [r3, #0]
 800a8ce:	492a      	ldr	r1, [pc, #168]	; (800a978 <Draw_GUI+0x180>)
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	4613      	mov	r3, r2
 800a8d4:	009b      	lsls	r3, r3, #2
 800a8d6:	4413      	add	r3, r2
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	440b      	add	r3, r1
 800a8dc:	3308      	adds	r3, #8
 800a8de:	881b      	ldrh	r3, [r3, #0]
 800a8e0:	462a      	mov	r2, r5
 800a8e2:	4621      	mov	r1, r4
 800a8e4:	f7f7 fcac 	bl	8002240 <BSP_LCD_FillRect>
		}
		BSP_LCD_SetFont(&Font8);
 800a8e8:	4824      	ldr	r0, [pc, #144]	; (800a97c <Draw_GUI+0x184>)
 800a8ea:	f7f7 f869 	bl	80019c0 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(button_list[i].x_pos + 15, button_list[i].y_pos + 15, button_list[i].text, LEFT_MODE);
 800a8ee:	4922      	ldr	r1, [pc, #136]	; (800a978 <Draw_GUI+0x180>)
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	4613      	mov	r3, r2
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	4413      	add	r3, r2
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	440b      	add	r3, r1
 800a8fc:	3302      	adds	r3, #2
 800a8fe:	881b      	ldrh	r3, [r3, #0]
 800a900:	330f      	adds	r3, #15
 800a902:	b298      	uxth	r0, r3
 800a904:	491c      	ldr	r1, [pc, #112]	; (800a978 <Draw_GUI+0x180>)
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	4613      	mov	r3, r2
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	4413      	add	r3, r2
 800a90e:	009b      	lsls	r3, r3, #2
 800a910:	440b      	add	r3, r1
 800a912:	3304      	adds	r3, #4
 800a914:	881b      	ldrh	r3, [r3, #0]
 800a916:	330f      	adds	r3, #15
 800a918:	b29c      	uxth	r4, r3
 800a91a:	4917      	ldr	r1, [pc, #92]	; (800a978 <Draw_GUI+0x180>)
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	4613      	mov	r3, r2
 800a920:	009b      	lsls	r3, r3, #2
 800a922:	4413      	add	r3, r2
 800a924:	009b      	lsls	r3, r3, #2
 800a926:	440b      	add	r3, r1
 800a928:	3310      	adds	r3, #16
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	2303      	movs	r3, #3
 800a92e:	4621      	mov	r1, r4
 800a930:	f7f7 f8cc 	bl	8001acc <BSP_LCD_DisplayStringAt>
	for(int i = 0; i < NUMBER_OF_BUTTON ; i++)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	3301      	adds	r3, #1
 800a938:	607b      	str	r3, [r7, #4]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2b02      	cmp	r3, #2
 800a93e:	f77f af6c 	ble.w	800a81a <Draw_GUI+0x22>
	}

	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTCYAN);
 800a942:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 800a946:	f7f7 f809 	bl	800195c <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(DETEC_CNT_X, DETEC_CNT_Y, DETEC_CNT_WIDTH, DETEC_CNT_HEIGHT);
 800a94a:	231e      	movs	r3, #30
 800a94c:	2264      	movs	r2, #100	; 0x64
 800a94e:	21f0      	movs	r1, #240	; 0xf0
 800a950:	2014      	movs	r0, #20
 800a952:	f7f7 fc75 	bl	8002240 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800a956:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800a95a:	f7f6 ffff 	bl	800195c <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font8);
 800a95e:	4807      	ldr	r0, [pc, #28]	; (800a97c <Draw_GUI+0x184>)
 800a960:	f7f7 f82e 	bl	80019c0 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(DETEC_CNT_X + 10, DETEC_CNT_Y + 10, detection_label, LEFT_MODE);
 800a964:	2303      	movs	r3, #3
 800a966:	4a06      	ldr	r2, [pc, #24]	; (800a980 <Draw_GUI+0x188>)
 800a968:	21fa      	movs	r1, #250	; 0xfa
 800a96a:	201e      	movs	r0, #30
 800a96c:	f7f7 f8ae 	bl	8001acc <BSP_LCD_DisplayStringAt>

}
 800a970:	bf00      	nop
 800a972:	3708      	adds	r7, #8
 800a974:	46bd      	mov	sp, r7
 800a976:	bdb0      	pop	{r4, r5, r7, pc}
 800a978:	2000004c 	.word	0x2000004c
 800a97c:	20000038 	.word	0x20000038
 800a980:	20000088 	.word	0x20000088

0800a984 <Plot_Signal>:

void Plot_Signal(uint8_t *buffer, uint16_t nbr_pts)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b086      	sub	sp, #24
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	460b      	mov	r3, r1
 800a98e:	807b      	strh	r3, [r7, #2]
	float pts1 = 0;
 800a990:	f04f 0300 	mov.w	r3, #0
 800a994:	613b      	str	r3, [r7, #16]
	float time_step = 0;
 800a996:	f04f 0300 	mov.w	r3, #0
 800a99a:	60fb      	str	r3, [r7, #12]

	time_step = 1;
 800a99c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800a9a0:	60fb      	str	r3, [r7, #12]

	/* Clear Last Signal */
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800a9a2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800a9a6:	f7f6 ffd9 	bl	800195c <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(PLOT_X, PLOT_Y, PLOT_WIDTH, PLOT_HEIGHT);
 800a9aa:	2396      	movs	r3, #150	; 0x96
 800a9ac:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800a9b0:	2128      	movs	r1, #40	; 0x28
 800a9b2:	2014      	movs	r0, #20
 800a9b4:	f7f7 fc44 	bl	8002240 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);
 800a9b8:	482e      	ldr	r0, [pc, #184]	; (800aa74 <Plot_Signal+0xf0>)
 800a9ba:	f7f6 ffcf 	bl	800195c <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(PLOT_X - 5, PLOT_Y - 5, PLOT_WIDTH + 10, PLOT_HEIGHT + 10);
 800a9be:	23a0      	movs	r3, #160	; 0xa0
 800a9c0:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800a9c4:	2123      	movs	r1, #35	; 0x23
 800a9c6:	200f      	movs	r0, #15
 800a9c8:	f7f7 fc3a 	bl	8002240 <BSP_LCD_FillRect>

	BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800a9cc:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 800a9d0:	f7f6 ffc4 	bl	800195c <BSP_LCD_SetTextColor>

	for(uint16_t i = 0 ; i < nbr_pts ; i++)
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	82fb      	strh	r3, [r7, #22]
 800a9d8:	e044      	b.n	800aa64 <Plot_Signal+0xe0>
	{
		pts1 = buffer[i];
 800a9da:	8afb      	ldrh	r3, [r7, #22]
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	4413      	add	r3, r2
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	ee07 3a90 	vmov	s15, r3
 800a9e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ea:	edc7 7a04 	vstr	s15, [r7, #16]
		pts1 = (pts1 / 0xFF);
 800a9ee:	ed97 7a04 	vldr	s14, [r7, #16]
 800a9f2:	eddf 6a21 	vldr	s13, [pc, #132]	; 800aa78 <Plot_Signal+0xf4>
 800a9f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a9fa:	edc7 7a04 	vstr	s15, [r7, #16]
		pts1 = (1 - pts1);
 800a9fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa02:	edd7 7a04 	vldr	s15, [r7, #16]
 800aa06:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa0a:	edc7 7a04 	vstr	s15, [r7, #16]

		pts1 = PLOT_Y + pts1 * PLOT_HEIGHT;
 800aa0e:	edd7 7a04 	vldr	s15, [r7, #16]
 800aa12:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800aa7c <Plot_Signal+0xf8>
 800aa16:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aa1a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800aa80 <Plot_Signal+0xfc>
 800aa1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa22:	edc7 7a04 	vstr	s15, [r7, #16]

		BSP_LCD_DrawPixel(PLOT_X + (uint16_t)(time_step * i), (uint16_t)(pts1), LCD_COLOR_YELLOW);
 800aa26:	8afb      	ldrh	r3, [r7, #22]
 800aa28:	ee07 3a90 	vmov	s15, r3
 800aa2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa30:	edd7 7a03 	vldr	s15, [r7, #12]
 800aa34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa3c:	ee17 3a90 	vmov	r3, s15
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	3314      	adds	r3, #20
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	edd7 7a04 	vldr	s15, [r7, #16]
 800aa4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa4e:	ee17 2a90 	vmov	r2, s15
 800aa52:	b291      	uxth	r1, r2
 800aa54:	f06f 02ff 	mvn.w	r2, #255	; 0xff
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7f7 fba9 	bl	80021b0 <BSP_LCD_DrawPixel>
	for(uint16_t i = 0 ; i < nbr_pts ; i++)
 800aa5e:	8afb      	ldrh	r3, [r7, #22]
 800aa60:	3301      	adds	r3, #1
 800aa62:	82fb      	strh	r3, [r7, #22]
 800aa64:	8afa      	ldrh	r2, [r7, #22]
 800aa66:	887b      	ldrh	r3, [r7, #2]
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d3b6      	bcc.n	800a9da <Plot_Signal+0x56>

	}


}
 800aa6c:	bf00      	nop
 800aa6e:	3718      	adds	r7, #24
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	ff404040 	.word	0xff404040
 800aa78:	437f0000 	.word	0x437f0000
 800aa7c:	43160000 	.word	0x43160000
 800aa80:	42200000 	.word	0x42200000

0800aa84 <Plot_Threshold>:

void Plot_Threshold(uint8_t th)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b084      	sub	sp, #16
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	71fb      	strb	r3, [r7, #7]
	float th_f = 0;
 800aa8e:	f04f 0300 	mov.w	r3, #0
 800aa92:	60fb      	str	r3, [r7, #12]

	th_f = th;
 800aa94:	79fb      	ldrb	r3, [r7, #7]
 800aa96:	ee07 3a90 	vmov	s15, r3
 800aa9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa9e:	edc7 7a03 	vstr	s15, [r7, #12]
	th_f = (th_f / 0xFF);
 800aaa2:	ed97 7a03 	vldr	s14, [r7, #12]
 800aaa6:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800ab18 <Plot_Threshold+0x94>
 800aaaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aaae:	edc7 7a03 	vstr	s15, [r7, #12]
	th_f = (1 - th_f);
 800aab2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aab6:	edd7 7a03 	vldr	s15, [r7, #12]
 800aaba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aabe:	edc7 7a03 	vstr	s15, [r7, #12]

	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800aac2:	4816      	ldr	r0, [pc, #88]	; (800ab1c <Plot_Threshold+0x98>)
 800aac4:	f7f6 ff4a 	bl	800195c <BSP_LCD_SetTextColor>

	BSP_LCD_DrawLine(PLOT_X, (uint16_t)(PLOT_Y + th_f * 0xFF), PLOT_X + PLOT_WIDTH, (uint16_t)(PLOT_Y + th_f * 0xFF));
 800aac8:	edd7 7a03 	vldr	s15, [r7, #12]
 800aacc:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800ab18 <Plot_Threshold+0x94>
 800aad0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aad4:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800ab20 <Plot_Threshold+0x9c>
 800aad8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aadc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aae0:	ee17 3a90 	vmov	r3, s15
 800aae4:	b299      	uxth	r1, r3
 800aae6:	edd7 7a03 	vldr	s15, [r7, #12]
 800aaea:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800ab18 <Plot_Threshold+0x94>
 800aaee:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aaf2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800ab20 <Plot_Threshold+0x9c>
 800aaf6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aafa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aafe:	ee17 3a90 	vmov	r3, s15
 800ab02:	b29b      	uxth	r3, r3
 800ab04:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ab08:	2014      	movs	r0, #20
 800ab0a:	f7f7 f963 	bl	8001dd4 <BSP_LCD_DrawLine>
}
 800ab0e:	bf00      	nop
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	437f0000 	.word	0x437f0000
 800ab1c:	ffff0000 	.word	0xffff0000
 800ab20:	42200000 	.word	0x42200000

0800ab24 <Draw_Signal_Marker>:

void Draw_Signal_Marker(SIGNAL_STATE signal_state)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	71fb      	strb	r3, [r7, #7]
	if(SIGNAL_HERE)
	{
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800ab2e:	4806      	ldr	r0, [pc, #24]	; (800ab48 <Draw_Signal_Marker+0x24>)
 800ab30:	f7f6 ff14 	bl	800195c <BSP_LCD_SetTextColor>
	else
	{
		BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
	}

	BSP_LCD_FillCircle(15, 15, 10);
 800ab34:	220a      	movs	r2, #10
 800ab36:	210f      	movs	r1, #15
 800ab38:	200f      	movs	r0, #15
 800ab3a:	f7f7 fbfb 	bl	8002334 <BSP_LCD_FillCircle>

}
 800ab3e:	bf00      	nop
 800ab40:	3708      	adds	r7, #8
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	bf00      	nop
 800ab48:	ffff0000 	.word	0xffff0000

0800ab4c <active_button>:

void active_button(uint8_t index)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b085      	sub	sp, #20
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	4603      	mov	r3, r0
 800ab54:	71fb      	strb	r3, [r7, #7]
	for(int j = 0 ; j < NUMBER_OF_BUTTON ; j++)
 800ab56:	2300      	movs	r3, #0
 800ab58:	60fb      	str	r3, [r7, #12]
 800ab5a:	e01d      	b.n	800ab98 <active_button+0x4c>
	{
		if(j != index)
 800ab5c:	79fb      	ldrb	r3, [r7, #7]
 800ab5e:	68fa      	ldr	r2, [r7, #12]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d009      	beq.n	800ab78 <active_button+0x2c>
		{
			button_list[j].is_active = 0;
 800ab64:	4911      	ldr	r1, [pc, #68]	; (800abac <active_button+0x60>)
 800ab66:	68fa      	ldr	r2, [r7, #12]
 800ab68:	4613      	mov	r3, r2
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	4413      	add	r3, r2
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	440b      	add	r3, r1
 800ab72:	2200      	movs	r2, #0
 800ab74:	701a      	strb	r2, [r3, #0]
 800ab76:	e00c      	b.n	800ab92 <active_button+0x46>
		}
		else{
			button_list[j].is_active = 1;
 800ab78:	490c      	ldr	r1, [pc, #48]	; (800abac <active_button+0x60>)
 800ab7a:	68fa      	ldr	r2, [r7, #12]
 800ab7c:	4613      	mov	r3, r2
 800ab7e:	009b      	lsls	r3, r3, #2
 800ab80:	4413      	add	r3, r2
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	440b      	add	r3, r1
 800ab86:	2201      	movs	r2, #1
 800ab88:	701a      	strb	r2, [r3, #0]
			plot_id = j;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	b2da      	uxtb	r2, r3
 800ab8e:	4b08      	ldr	r3, [pc, #32]	; (800abb0 <active_button+0x64>)
 800ab90:	701a      	strb	r2, [r3, #0]
	for(int j = 0 ; j < NUMBER_OF_BUTTON ; j++)
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	3301      	adds	r3, #1
 800ab96:	60fb      	str	r3, [r7, #12]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2b02      	cmp	r3, #2
 800ab9c:	ddde      	ble.n	800ab5c <active_button+0x10>
		}
	}
}
 800ab9e:	bf00      	nop
 800aba0:	3714      	adds	r7, #20
 800aba2:	46bd      	mov	sp, r7
 800aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba8:	4770      	bx	lr
 800abaa:	bf00      	nop
 800abac:	2000004c 	.word	0x2000004c
 800abb0:	20000350 	.word	0x20000350

0800abb4 <TouchScreen_Polling>:

void TouchScreen_Polling(void)
{
 800abb4:	b590      	push	{r4, r7, lr}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
	static uint8_t t = 0;
	uint16_t x = 0;
 800abba:	2300      	movs	r3, #0
 800abbc:	807b      	strh	r3, [r7, #2]
	uint16_t y = 0;
 800abbe:	2300      	movs	r3, #0
 800abc0:	803b      	strh	r3, [r7, #0]

	BSP_TS_GetState(&TS_State);
 800abc2:	4833      	ldr	r0, [pc, #204]	; (800ac90 <TouchScreen_Polling+0xdc>)
 800abc4:	f7f8 f864 	bl	8002c90 <BSP_TS_GetState>

	if(TS_State.touchDetected)
 800abc8:	4b31      	ldr	r3, [pc, #196]	; (800ac90 <TouchScreen_Polling+0xdc>)
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d05b      	beq.n	800ac88 <TouchScreen_Polling+0xd4>
	{
		x = TS_State.touchX[0];
 800abd0:	4b2f      	ldr	r3, [pc, #188]	; (800ac90 <TouchScreen_Polling+0xdc>)
 800abd2:	885b      	ldrh	r3, [r3, #2]
 800abd4:	807b      	strh	r3, [r7, #2]
		y = TS_State.touchY[0];
 800abd6:	4b2e      	ldr	r3, [pc, #184]	; (800ac90 <TouchScreen_Polling+0xdc>)
 800abd8:	899b      	ldrh	r3, [r3, #12]
 800abda:	803b      	strh	r3, [r7, #0]

		for(int i = 0; i < NUMBER_OF_BUTTON ; i++)
 800abdc:	2300      	movs	r3, #0
 800abde:	607b      	str	r3, [r7, #4]
 800abe0:	e04f      	b.n	800ac82 <TouchScreen_Polling+0xce>
		{
			if(x > button_list[i].x_pos && x < (button_list[i].x_pos + button_list[i].width))
 800abe2:	492c      	ldr	r1, [pc, #176]	; (800ac94 <TouchScreen_Polling+0xe0>)
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	4613      	mov	r3, r2
 800abe8:	009b      	lsls	r3, r3, #2
 800abea:	4413      	add	r3, r2
 800abec:	009b      	lsls	r3, r3, #2
 800abee:	440b      	add	r3, r1
 800abf0:	3302      	adds	r3, #2
 800abf2:	881b      	ldrh	r3, [r3, #0]
 800abf4:	887a      	ldrh	r2, [r7, #2]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d940      	bls.n	800ac7c <TouchScreen_Polling+0xc8>
 800abfa:	8879      	ldrh	r1, [r7, #2]
 800abfc:	4825      	ldr	r0, [pc, #148]	; (800ac94 <TouchScreen_Polling+0xe0>)
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	4613      	mov	r3, r2
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	4413      	add	r3, r2
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	4403      	add	r3, r0
 800ac0a:	3302      	adds	r3, #2
 800ac0c:	881b      	ldrh	r3, [r3, #0]
 800ac0e:	461c      	mov	r4, r3
 800ac10:	4820      	ldr	r0, [pc, #128]	; (800ac94 <TouchScreen_Polling+0xe0>)
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	4613      	mov	r3, r2
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	4413      	add	r3, r2
 800ac1a:	009b      	lsls	r3, r3, #2
 800ac1c:	4403      	add	r3, r0
 800ac1e:	3306      	adds	r3, #6
 800ac20:	881b      	ldrh	r3, [r3, #0]
 800ac22:	4423      	add	r3, r4
 800ac24:	4299      	cmp	r1, r3
 800ac26:	da29      	bge.n	800ac7c <TouchScreen_Polling+0xc8>
			{
				if(y > button_list[i].y_pos && y < (button_list[i].y_pos + button_list[i].height))
 800ac28:	491a      	ldr	r1, [pc, #104]	; (800ac94 <TouchScreen_Polling+0xe0>)
 800ac2a:	687a      	ldr	r2, [r7, #4]
 800ac2c:	4613      	mov	r3, r2
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	4413      	add	r3, r2
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	440b      	add	r3, r1
 800ac36:	3304      	adds	r3, #4
 800ac38:	881b      	ldrh	r3, [r3, #0]
 800ac3a:	883a      	ldrh	r2, [r7, #0]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d91d      	bls.n	800ac7c <TouchScreen_Polling+0xc8>
 800ac40:	8839      	ldrh	r1, [r7, #0]
 800ac42:	4814      	ldr	r0, [pc, #80]	; (800ac94 <TouchScreen_Polling+0xe0>)
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	4613      	mov	r3, r2
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	4413      	add	r3, r2
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	4403      	add	r3, r0
 800ac50:	3304      	adds	r3, #4
 800ac52:	881b      	ldrh	r3, [r3, #0]
 800ac54:	461c      	mov	r4, r3
 800ac56:	480f      	ldr	r0, [pc, #60]	; (800ac94 <TouchScreen_Polling+0xe0>)
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	4613      	mov	r3, r2
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	4413      	add	r3, r2
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	4403      	add	r3, r0
 800ac64:	3308      	adds	r3, #8
 800ac66:	881b      	ldrh	r3, [r3, #0]
 800ac68:	4423      	add	r3, r4
 800ac6a:	4299      	cmp	r1, r3
 800ac6c:	da06      	bge.n	800ac7c <TouchScreen_Polling+0xc8>
				{
					active_button(i);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	4618      	mov	r0, r3
 800ac74:	f7ff ff6a 	bl	800ab4c <active_button>
					Draw_GUI();
 800ac78:	f7ff fdbe 	bl	800a7f8 <Draw_GUI>
		for(int i = 0; i < NUMBER_OF_BUTTON ; i++)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	3301      	adds	r3, #1
 800ac80:	607b      	str	r3, [r7, #4]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2b02      	cmp	r3, #2
 800ac86:	ddac      	ble.n	800abe2 <TouchScreen_Polling+0x2e>
			}
		}


	}
}
 800ac88:	bf00      	nop
 800ac8a:	370c      	adds	r7, #12
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd90      	pop	{r4, r7, pc}
 800ac90:	20000324 	.word	0x20000324
 800ac94:	2000004c 	.word	0x2000004c

0800ac98 <get_current_plot_ID>:

PLOT_ID get_current_plot_ID()
{
 800ac98:	b480      	push	{r7}
 800ac9a:	af00      	add	r7, sp, #0
	return plot_id;
 800ac9c:	4b03      	ldr	r3, [pc, #12]	; (800acac <get_current_plot_ID+0x14>)
 800ac9e:	781b      	ldrb	r3, [r3, #0]
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr
 800acaa:	bf00      	nop
 800acac:	20000350 	.word	0x20000350

0800acb0 <SCB_EnableICache>:
{
 800acb0:	b480      	push	{r7}
 800acb2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800acb4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800acb8:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800acbc:	4b0b      	ldr	r3, [pc, #44]	; (800acec <SCB_EnableICache+0x3c>)
 800acbe:	2200      	movs	r2, #0
 800acc0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800acc4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800acc8:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800accc:	4b07      	ldr	r3, [pc, #28]	; (800acec <SCB_EnableICache+0x3c>)
 800acce:	695b      	ldr	r3, [r3, #20]
 800acd0:	4a06      	ldr	r2, [pc, #24]	; (800acec <SCB_EnableICache+0x3c>)
 800acd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acd6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800acd8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800acdc:	f3bf 8f6f 	isb	sy
}
 800ace0:	bf00      	nop
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr
 800acea:	bf00      	nop
 800acec:	e000ed00 	.word	0xe000ed00

0800acf0 <SCB_EnableDCache>:
{
 800acf0:	b480      	push	{r7}
 800acf2:	b085      	sub	sp, #20
 800acf4:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800acf6:	4b1d      	ldr	r3, [pc, #116]	; (800ad6c <SCB_EnableDCache+0x7c>)
 800acf8:	2200      	movs	r2, #0
 800acfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800acfe:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800ad02:	4b1a      	ldr	r3, [pc, #104]	; (800ad6c <SCB_EnableDCache+0x7c>)
 800ad04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad08:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	0b5b      	lsrs	r3, r3, #13
 800ad0e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ad12:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	08db      	lsrs	r3, r3, #3
 800ad18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad1c:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	015a      	lsls	r2, r3, #5
 800ad22:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800ad26:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800ad28:	68ba      	ldr	r2, [r7, #8]
 800ad2a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800ad2c:	490f      	ldr	r1, [pc, #60]	; (800ad6c <SCB_EnableDCache+0x7c>)
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	1e5a      	subs	r2, r3, #1
 800ad38:	60ba      	str	r2, [r7, #8]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d1ef      	bne.n	800ad1e <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	1e5a      	subs	r2, r3, #1
 800ad42:	60fa      	str	r2, [r7, #12]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d1e5      	bne.n	800ad14 <SCB_EnableDCache+0x24>
 800ad48:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800ad4c:	4b07      	ldr	r3, [pc, #28]	; (800ad6c <SCB_EnableDCache+0x7c>)
 800ad4e:	695b      	ldr	r3, [r3, #20]
 800ad50:	4a06      	ldr	r2, [pc, #24]	; (800ad6c <SCB_EnableDCache+0x7c>)
 800ad52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad56:	6153      	str	r3, [r2, #20]
 800ad58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ad5c:	f3bf 8f6f 	isb	sy
}
 800ad60:	bf00      	nop
 800ad62:	3714      	adds	r7, #20
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr
 800ad6c:	e000ed00 	.word	0xe000ed00

0800ad70 <HAL_TIM_PeriodElapsedCallback>:
	HAL_TIM_Base_Start_IT(&htim7);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM7)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a06      	ldr	r2, [pc, #24]	; (800ad98 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d006      	beq.n	800ad90 <HAL_TIM_PeriodElapsedCallback+0x20>
//		}



	}
	else if(htim->Instance==TIM3)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a05      	ldr	r2, [pc, #20]	; (800ad9c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d101      	bne.n	800ad90 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		TouchScreen_Polling();
 800ad8c:	f7ff ff12 	bl	800abb4 <TouchScreen_Polling>
	}
}
 800ad90:	bf00      	nop
 800ad92:	3708      	adds	r7, #8
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	40001400 	.word	0x40001400
 800ad9c:	40000400 	.word	0x40000400

0800ada0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800ada4:	f7ff ff84 	bl	800acb0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800ada8:	f7ff ffa2 	bl	800acf0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800adac:	f7f8 f990 	bl	80030d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800adb0:	f000 f86e 	bl	800ae90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800adb4:	f000 fc7c 	bl	800b6b0 <MX_GPIO_Init>
  MX_DMA_Init();
 800adb8:	f000 fc0c 	bl	800b5d4 <MX_DMA_Init>
  MX_DCMI_Init();
 800adbc:	f000 f96a 	bl	800b094 <MX_DCMI_Init>
  MX_DMA2D_Init();
 800adc0:	f000 f99c 	bl	800b0fc <MX_DMA2D_Init>
  MX_FMC_Init();
 800adc4:	f000 fc24 	bl	800b610 <MX_FMC_Init>
  MX_LTDC_Init();
 800adc8:	f000 f9ca 	bl	800b160 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800adcc:	f000 fa4a 	bl	800b264 <MX_QUADSPI_Init>
  MX_RTC_Init();
 800add0:	f000 fa74 	bl	800b2bc <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 800add4:	f000 fb1a 	bl	800b40c <MX_SDMMC1_SD_Init>
  MX_USART1_UART_Init();
 800add8:	f000 fbcc 	bl	800b574 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800addc:	f000 f906 	bl	800afec <MX_ADC1_Init>
  MX_TIM7_Init();
 800ade0:	f000 fb92 	bl	800b508 <MX_TIM7_Init>
  MX_TIM3_Init();
 800ade4:	f000 fb42 	bl	800b46c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  Init_Display();
 800ade8:	f7ff fcb6 	bl	800a758 <Init_Display>
  /* Draw Bitmap */
  //BSP_LCD_DrawBitmap((BSP_LCD_GetXSize() - 80) / 2, 65, (uint8_t *)stlogo);

  Display_Render();
 800adec:	f7ff fcde 	bl	800a7ac <Display_Render>
  Draw_GUI();
 800adf0:	f7ff fd02 	bl	800a7f8 <Draw_GUI>



  Init_Sampling(&hadc1);
 800adf4:	4824      	ldr	r0, [pc, #144]	; (800ae88 <main+0xe8>)
 800adf6:	f000 ff5f 	bl	800bcb8 <Init_Sampling>

  //declencher_acquisition();

  /* Periodic Check of touchscreen) */
  HAL_TIM_Base_Start_IT(&htim3);
 800adfa:	4824      	ldr	r0, [pc, #144]	; (800ae8c <main+0xec>)
 800adfc:	f7fd ff20 	bl	8008c40 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	signal_handler_process();
 800ae00:	f000 ff6e 	bl	800bce0 <signal_handler_process>

	if(can_display() == 1)
 800ae04:	f001 faca 	bl	800c39c <can_display>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	d1f8      	bne.n	800ae00 <main+0x60>
	{
		//Plot_Signal( (corr_func + (corr_max_abs-200)), 400);
		switch(get_current_plot_ID())
 800ae0e:	f7ff ff43 	bl	800ac98 <get_current_plot_ID>
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d00d      	beq.n	800ae34 <main+0x94>
 800ae18:	2b02      	cmp	r3, #2
 800ae1a:	d015      	beq.n	800ae48 <main+0xa8>
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d123      	bne.n	800ae68 <main+0xc8>
		{
			case INPUT_PLOT:
				Plot_Signal( get_signal_data(INPUT) , DISPLAY_BUFF_SIZE);
 800ae20:	2000      	movs	r0, #0
 800ae22:	f001 faff 	bl	800c424 <get_signal_data>
 800ae26:	4603      	mov	r3, r0
 800ae28:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f7ff fda9 	bl	800a984 <Plot_Signal>
				break;
 800ae32:	e019      	b.n	800ae68 <main+0xc8>
			case REF_PLOT:
				Plot_Signal( get_signal_data(REF) , DISPLAY_BUFF_SIZE);
 800ae34:	2001      	movs	r0, #1
 800ae36:	f001 faf5 	bl	800c424 <get_signal_data>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7ff fd9f 	bl	800a984 <Plot_Signal>
				break;
 800ae46:	e00f      	b.n	800ae68 <main+0xc8>
			case CORR_PLOT:
				Plot_Signal( get_signal_data(CORR) , DISPLAY_BUFF_SIZE);
 800ae48:	2002      	movs	r0, #2
 800ae4a:	f001 faeb 	bl	800c424 <get_signal_data>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7ff fd95 	bl	800a984 <Plot_Signal>
				Plot_Threshold(get_threshold());
 800ae5a:	f001 fab9 	bl	800c3d0 <get_threshold>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	4618      	mov	r0, r3
 800ae62:	f7ff fe0f 	bl	800aa84 <Plot_Threshold>
				break;
 800ae66:	bf00      	nop
		}

		if(is_signal_here())
 800ae68:	f001 fad0 	bl	800c40c <is_signal_here>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d003      	beq.n	800ae7a <main+0xda>
		{
			Draw_Signal_Marker(SIGNAL_HERE);
 800ae72:	2001      	movs	r0, #1
 800ae74:	f7ff fe56 	bl	800ab24 <Draw_Signal_Marker>
 800ae78:	e002      	b.n	800ae80 <main+0xe0>
		}
		else
		{
			Draw_Signal_Marker(NO_SIGNAL);
 800ae7a:	2000      	movs	r0, #0
 800ae7c:	f7ff fe52 	bl	800ab24 <Draw_Signal_Marker>
		}

		disable_signal_display();
 800ae80:	f001 fa98 	bl	800c3b4 <disable_signal_display>
	signal_handler_process();
 800ae84:	e7bc      	b.n	800ae00 <main+0x60>
 800ae86:	bf00      	nop
 800ae88:	200005a4 	.word	0x200005a4
 800ae8c:	200004bc 	.word	0x200004bc

0800ae90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b0b4      	sub	sp, #208	; 0xd0
 800ae94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ae96:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800ae9a:	2230      	movs	r2, #48	; 0x30
 800ae9c:	2100      	movs	r1, #0
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f002 f894 	bl	800cfcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800aea4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800aea8:	2200      	movs	r2, #0
 800aeaa:	601a      	str	r2, [r3, #0]
 800aeac:	605a      	str	r2, [r3, #4]
 800aeae:	609a      	str	r2, [r3, #8]
 800aeb0:	60da      	str	r2, [r3, #12]
 800aeb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800aeb4:	f107 0308 	add.w	r3, r7, #8
 800aeb8:	2284      	movs	r2, #132	; 0x84
 800aeba:	2100      	movs	r1, #0
 800aebc:	4618      	mov	r0, r3
 800aebe:	f002 f885 	bl	800cfcc <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800aec2:	f7fb faed 	bl	80064a0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800aec6:	4b46      	ldr	r3, [pc, #280]	; (800afe0 <SystemClock_Config+0x150>)
 800aec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeca:	4a45      	ldr	r2, [pc, #276]	; (800afe0 <SystemClock_Config+0x150>)
 800aecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aed0:	6413      	str	r3, [r2, #64]	; 0x40
 800aed2:	4b43      	ldr	r3, [pc, #268]	; (800afe0 <SystemClock_Config+0x150>)
 800aed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aeda:	607b      	str	r3, [r7, #4]
 800aedc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800aede:	4b41      	ldr	r3, [pc, #260]	; (800afe4 <SystemClock_Config+0x154>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a40      	ldr	r2, [pc, #256]	; (800afe4 <SystemClock_Config+0x154>)
 800aee4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aee8:	6013      	str	r3, [r2, #0]
 800aeea:	4b3e      	ldr	r3, [pc, #248]	; (800afe4 <SystemClock_Config+0x154>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aef2:	603b      	str	r3, [r7, #0]
 800aef4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800aef6:	2309      	movs	r3, #9
 800aef8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800aefc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800af00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800af04:	2301      	movs	r3, #1
 800af06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800af0a:	2302      	movs	r3, #2
 800af0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800af10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800af14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800af18:	2319      	movs	r3, #25
 800af1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800af1e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800af22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800af26:	2302      	movs	r3, #2
 800af28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800af2c:	2309      	movs	r3, #9
 800af2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800af32:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800af36:	4618      	mov	r0, r3
 800af38:	f7fb fbe2 	bl	8006700 <HAL_RCC_OscConfig>
 800af3c:	4603      	mov	r3, r0
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d001      	beq.n	800af46 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800af42:	f000 fea1 	bl	800bc88 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800af46:	f7fb fabb 	bl	80064c0 <HAL_PWREx_EnableOverDrive>
 800af4a:	4603      	mov	r3, r0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d001      	beq.n	800af54 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800af50:	f000 fe9a 	bl	800bc88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800af54:	230f      	movs	r3, #15
 800af56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800af5a:	2302      	movs	r3, #2
 800af5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800af60:	2300      	movs	r3, #0
 800af62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800af66:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800af6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800af6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800af76:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800af7a:	2106      	movs	r1, #6
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7fb fe2f 	bl	8006be0 <HAL_RCC_ClockConfig>
 800af82:	4603      	mov	r3, r0
 800af84:	2b00      	cmp	r3, #0
 800af86:	d001      	beq.n	800af8c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800af88:	f000 fe7e 	bl	800bc88 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 800af8c:	4b16      	ldr	r3, [pc, #88]	; (800afe8 <SystemClock_Config+0x158>)
 800af8e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800af90:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800af94:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800af96:	2305      	movs	r3, #5
 800af98:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800af9a:	2302      	movs	r3, #2
 800af9c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800af9e:	2303      	movs	r3, #3
 800afa0:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800afa2:	2301      	movs	r3, #1
 800afa4:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800afa6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800afaa:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800afac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afb0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800afb2:	2300      	movs	r3, #0
 800afb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800afb6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800afba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800afbe:	2300      	movs	r3, #0
 800afc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800afc4:	f107 0308 	add.w	r3, r7, #8
 800afc8:	4618      	mov	r0, r3
 800afca:	f7fb ffd7 	bl	8006f7c <HAL_RCCEx_PeriphCLKConfig>
 800afce:	4603      	mov	r3, r0
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d001      	beq.n	800afd8 <SystemClock_Config+0x148>
  {
    Error_Handler();
 800afd4:	f000 fe58 	bl	800bc88 <Error_Handler>
  }
}
 800afd8:	bf00      	nop
 800afda:	37d0      	adds	r7, #208	; 0xd0
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}
 800afe0:	40023800 	.word	0x40023800
 800afe4:	40007000 	.word	0x40007000
 800afe8:	00a00068 	.word	0x00a00068

0800afec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800aff2:	463b      	mov	r3, r7
 800aff4:	2200      	movs	r2, #0
 800aff6:	601a      	str	r2, [r3, #0]
 800aff8:	605a      	str	r2, [r3, #4]
 800affa:	609a      	str	r2, [r3, #8]
 800affc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800affe:	4b22      	ldr	r3, [pc, #136]	; (800b088 <MX_ADC1_Init+0x9c>)
 800b000:	4a22      	ldr	r2, [pc, #136]	; (800b08c <MX_ADC1_Init+0xa0>)
 800b002:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800b004:	4b20      	ldr	r3, [pc, #128]	; (800b088 <MX_ADC1_Init+0x9c>)
 800b006:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800b00a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800b00c:	4b1e      	ldr	r3, [pc, #120]	; (800b088 <MX_ADC1_Init+0x9c>)
 800b00e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b012:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800b014:	4b1c      	ldr	r3, [pc, #112]	; (800b088 <MX_ADC1_Init+0x9c>)
 800b016:	2200      	movs	r2, #0
 800b018:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800b01a:	4b1b      	ldr	r3, [pc, #108]	; (800b088 <MX_ADC1_Init+0x9c>)
 800b01c:	2201      	movs	r2, #1
 800b01e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800b020:	4b19      	ldr	r3, [pc, #100]	; (800b088 <MX_ADC1_Init+0x9c>)
 800b022:	2200      	movs	r2, #0
 800b024:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800b028:	4b17      	ldr	r3, [pc, #92]	; (800b088 <MX_ADC1_Init+0x9c>)
 800b02a:	2200      	movs	r2, #0
 800b02c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b02e:	4b16      	ldr	r3, [pc, #88]	; (800b088 <MX_ADC1_Init+0x9c>)
 800b030:	4a17      	ldr	r2, [pc, #92]	; (800b090 <MX_ADC1_Init+0xa4>)
 800b032:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b034:	4b14      	ldr	r3, [pc, #80]	; (800b088 <MX_ADC1_Init+0x9c>)
 800b036:	2200      	movs	r2, #0
 800b038:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800b03a:	4b13      	ldr	r3, [pc, #76]	; (800b088 <MX_ADC1_Init+0x9c>)
 800b03c:	2201      	movs	r2, #1
 800b03e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800b040:	4b11      	ldr	r3, [pc, #68]	; (800b088 <MX_ADC1_Init+0x9c>)
 800b042:	2201      	movs	r2, #1
 800b044:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800b048:	4b0f      	ldr	r3, [pc, #60]	; (800b088 <MX_ADC1_Init+0x9c>)
 800b04a:	2200      	movs	r2, #0
 800b04c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800b04e:	480e      	ldr	r0, [pc, #56]	; (800b088 <MX_ADC1_Init+0x9c>)
 800b050:	f7f8 f8be 	bl	80031d0 <HAL_ADC_Init>
 800b054:	4603      	mov	r3, r0
 800b056:	2b00      	cmp	r3, #0
 800b058:	d001      	beq.n	800b05e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800b05a:	f000 fe15 	bl	800bc88 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800b05e:	2300      	movs	r3, #0
 800b060:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800b062:	2301      	movs	r3, #1
 800b064:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800b066:	2306      	movs	r3, #6
 800b068:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b06a:	463b      	mov	r3, r7
 800b06c:	4619      	mov	r1, r3
 800b06e:	4806      	ldr	r0, [pc, #24]	; (800b088 <MX_ADC1_Init+0x9c>)
 800b070:	f7f8 fc00 	bl	8003874 <HAL_ADC_ConfigChannel>
 800b074:	4603      	mov	r3, r0
 800b076:	2b00      	cmp	r3, #0
 800b078:	d001      	beq.n	800b07e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800b07a:	f000 fe05 	bl	800bc88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800b07e:	bf00      	nop
 800b080:	3710      	adds	r7, #16
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	200005a4 	.word	0x200005a4
 800b08c:	40012000 	.word	0x40012000
 800b090:	0f000001 	.word	0x0f000001

0800b094 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800b098:	4b16      	ldr	r3, [pc, #88]	; (800b0f4 <MX_DCMI_Init+0x60>)
 800b09a:	4a17      	ldr	r2, [pc, #92]	; (800b0f8 <MX_DCMI_Init+0x64>)
 800b09c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800b09e:	4b15      	ldr	r3, [pc, #84]	; (800b0f4 <MX_DCMI_Init+0x60>)
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800b0a4:	4b13      	ldr	r3, [pc, #76]	; (800b0f4 <MX_DCMI_Init+0x60>)
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800b0aa:	4b12      	ldr	r3, [pc, #72]	; (800b0f4 <MX_DCMI_Init+0x60>)
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800b0b0:	4b10      	ldr	r3, [pc, #64]	; (800b0f4 <MX_DCMI_Init+0x60>)
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800b0b6:	4b0f      	ldr	r3, [pc, #60]	; (800b0f4 <MX_DCMI_Init+0x60>)
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800b0bc:	4b0d      	ldr	r3, [pc, #52]	; (800b0f4 <MX_DCMI_Init+0x60>)
 800b0be:	2200      	movs	r2, #0
 800b0c0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800b0c2:	4b0c      	ldr	r3, [pc, #48]	; (800b0f4 <MX_DCMI_Init+0x60>)
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800b0c8:	4b0a      	ldr	r3, [pc, #40]	; (800b0f4 <MX_DCMI_Init+0x60>)
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800b0ce:	4b09      	ldr	r3, [pc, #36]	; (800b0f4 <MX_DCMI_Init+0x60>)
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800b0d4:	4b07      	ldr	r3, [pc, #28]	; (800b0f4 <MX_DCMI_Init+0x60>)
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800b0da:	4b06      	ldr	r3, [pc, #24]	; (800b0f4 <MX_DCMI_Init+0x60>)
 800b0dc:	2200      	movs	r2, #0
 800b0de:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800b0e0:	4804      	ldr	r0, [pc, #16]	; (800b0f4 <MX_DCMI_Init+0x60>)
 800b0e2:	f7f8 ff93 	bl	800400c <HAL_DCMI_Init>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d001      	beq.n	800b0f0 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 800b0ec:	f000 fdcc 	bl	800bc88 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800b0f0:	bf00      	nop
 800b0f2:	bd80      	pop	{r7, pc}
 800b0f4:	200005ec 	.word	0x200005ec
 800b0f8:	50050000 	.word	0x50050000

0800b0fc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800b100:	4b15      	ldr	r3, [pc, #84]	; (800b158 <MX_DMA2D_Init+0x5c>)
 800b102:	4a16      	ldr	r2, [pc, #88]	; (800b15c <MX_DMA2D_Init+0x60>)
 800b104:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800b106:	4b14      	ldr	r3, [pc, #80]	; (800b158 <MX_DMA2D_Init+0x5c>)
 800b108:	2200      	movs	r2, #0
 800b10a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800b10c:	4b12      	ldr	r3, [pc, #72]	; (800b158 <MX_DMA2D_Init+0x5c>)
 800b10e:	2200      	movs	r2, #0
 800b110:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800b112:	4b11      	ldr	r3, [pc, #68]	; (800b158 <MX_DMA2D_Init+0x5c>)
 800b114:	2200      	movs	r2, #0
 800b116:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800b118:	4b0f      	ldr	r3, [pc, #60]	; (800b158 <MX_DMA2D_Init+0x5c>)
 800b11a:	2200      	movs	r2, #0
 800b11c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800b11e:	4b0e      	ldr	r3, [pc, #56]	; (800b158 <MX_DMA2D_Init+0x5c>)
 800b120:	2200      	movs	r2, #0
 800b122:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800b124:	4b0c      	ldr	r3, [pc, #48]	; (800b158 <MX_DMA2D_Init+0x5c>)
 800b126:	2200      	movs	r2, #0
 800b128:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800b12a:	4b0b      	ldr	r3, [pc, #44]	; (800b158 <MX_DMA2D_Init+0x5c>)
 800b12c:	2200      	movs	r2, #0
 800b12e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800b130:	4809      	ldr	r0, [pc, #36]	; (800b158 <MX_DMA2D_Init+0x5c>)
 800b132:	f7f9 fbb1 	bl	8004898 <HAL_DMA2D_Init>
 800b136:	4603      	mov	r3, r0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d001      	beq.n	800b140 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800b13c:	f000 fda4 	bl	800bc88 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800b140:	2101      	movs	r1, #1
 800b142:	4805      	ldr	r0, [pc, #20]	; (800b158 <MX_DMA2D_Init+0x5c>)
 800b144:	f7f9 fe16 	bl	8004d74 <HAL_DMA2D_ConfigLayer>
 800b148:	4603      	mov	r3, r0
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d001      	beq.n	800b152 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800b14e:	f000 fd9b 	bl	800bc88 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800b152:	bf00      	nop
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	2000073c 	.word	0x2000073c
 800b15c:	4002b000 	.word	0x4002b000

0800b160 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b08e      	sub	sp, #56	; 0x38
 800b164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800b166:	1d3b      	adds	r3, r7, #4
 800b168:	2234      	movs	r2, #52	; 0x34
 800b16a:	2100      	movs	r1, #0
 800b16c:	4618      	mov	r0, r3
 800b16e:	f001 ff2d 	bl	800cfcc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800b172:	4b3a      	ldr	r3, [pc, #232]	; (800b25c <MX_LTDC_Init+0xfc>)
 800b174:	4a3a      	ldr	r2, [pc, #232]	; (800b260 <MX_LTDC_Init+0x100>)
 800b176:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800b178:	4b38      	ldr	r3, [pc, #224]	; (800b25c <MX_LTDC_Init+0xfc>)
 800b17a:	2200      	movs	r2, #0
 800b17c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800b17e:	4b37      	ldr	r3, [pc, #220]	; (800b25c <MX_LTDC_Init+0xfc>)
 800b180:	2200      	movs	r2, #0
 800b182:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800b184:	4b35      	ldr	r3, [pc, #212]	; (800b25c <MX_LTDC_Init+0xfc>)
 800b186:	2200      	movs	r2, #0
 800b188:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800b18a:	4b34      	ldr	r3, [pc, #208]	; (800b25c <MX_LTDC_Init+0xfc>)
 800b18c:	2200      	movs	r2, #0
 800b18e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800b190:	4b32      	ldr	r3, [pc, #200]	; (800b25c <MX_LTDC_Init+0xfc>)
 800b192:	2228      	movs	r2, #40	; 0x28
 800b194:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800b196:	4b31      	ldr	r3, [pc, #196]	; (800b25c <MX_LTDC_Init+0xfc>)
 800b198:	2209      	movs	r2, #9
 800b19a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800b19c:	4b2f      	ldr	r3, [pc, #188]	; (800b25c <MX_LTDC_Init+0xfc>)
 800b19e:	2235      	movs	r2, #53	; 0x35
 800b1a0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800b1a2:	4b2e      	ldr	r3, [pc, #184]	; (800b25c <MX_LTDC_Init+0xfc>)
 800b1a4:	220b      	movs	r2, #11
 800b1a6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800b1a8:	4b2c      	ldr	r3, [pc, #176]	; (800b25c <MX_LTDC_Init+0xfc>)
 800b1aa:	f240 2215 	movw	r2, #533	; 0x215
 800b1ae:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800b1b0:	4b2a      	ldr	r3, [pc, #168]	; (800b25c <MX_LTDC_Init+0xfc>)
 800b1b2:	f240 121b 	movw	r2, #283	; 0x11b
 800b1b6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800b1b8:	4b28      	ldr	r3, [pc, #160]	; (800b25c <MX_LTDC_Init+0xfc>)
 800b1ba:	f240 2235 	movw	r2, #565	; 0x235
 800b1be:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800b1c0:	4b26      	ldr	r3, [pc, #152]	; (800b25c <MX_LTDC_Init+0xfc>)
 800b1c2:	f240 121d 	movw	r2, #285	; 0x11d
 800b1c6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800b1c8:	4b24      	ldr	r3, [pc, #144]	; (800b25c <MX_LTDC_Init+0xfc>)
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800b1d0:	4b22      	ldr	r3, [pc, #136]	; (800b25c <MX_LTDC_Init+0xfc>)
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800b1d8:	4b20      	ldr	r3, [pc, #128]	; (800b25c <MX_LTDC_Init+0xfc>)
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800b1e0:	481e      	ldr	r0, [pc, #120]	; (800b25c <MX_LTDC_Init+0xfc>)
 800b1e2:	f7fa fde5 	bl	8005db0 <HAL_LTDC_Init>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d001      	beq.n	800b1f0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800b1ec:	f000 fd4c 	bl	800bc88 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800b1f4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800b1f8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800b1fe:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b202:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800b204:	2302      	movs	r3, #2
 800b206:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800b208:	23ff      	movs	r3, #255	; 0xff
 800b20a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800b20c:	2300      	movs	r3, #0
 800b20e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800b210:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b214:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800b216:	2307      	movs	r3, #7
 800b218:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800b21a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800b21e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800b220:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800b224:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800b226:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b22a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800b22c:	2300      	movs	r3, #0
 800b22e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800b232:	2300      	movs	r3, #0
 800b234:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800b238:	2300      	movs	r3, #0
 800b23a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800b23e:	1d3b      	adds	r3, r7, #4
 800b240:	2200      	movs	r2, #0
 800b242:	4619      	mov	r1, r3
 800b244:	4805      	ldr	r0, [pc, #20]	; (800b25c <MX_LTDC_Init+0xfc>)
 800b246:	f7fa ff45 	bl	80060d4 <HAL_LTDC_ConfigLayer>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d001      	beq.n	800b254 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800b250:	f000 fd1a 	bl	800bc88 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800b254:	bf00      	nop
 800b256:	3738      	adds	r7, #56	; 0x38
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}
 800b25c:	200004fc 	.word	0x200004fc
 800b260:	40016800 	.word	0x40016800

0800b264 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800b268:	4b12      	ldr	r3, [pc, #72]	; (800b2b4 <MX_QUADSPI_Init+0x50>)
 800b26a:	4a13      	ldr	r2, [pc, #76]	; (800b2b8 <MX_QUADSPI_Init+0x54>)
 800b26c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800b26e:	4b11      	ldr	r3, [pc, #68]	; (800b2b4 <MX_QUADSPI_Init+0x50>)
 800b270:	22ff      	movs	r2, #255	; 0xff
 800b272:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800b274:	4b0f      	ldr	r3, [pc, #60]	; (800b2b4 <MX_QUADSPI_Init+0x50>)
 800b276:	2201      	movs	r2, #1
 800b278:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800b27a:	4b0e      	ldr	r3, [pc, #56]	; (800b2b4 <MX_QUADSPI_Init+0x50>)
 800b27c:	2200      	movs	r2, #0
 800b27e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800b280:	4b0c      	ldr	r3, [pc, #48]	; (800b2b4 <MX_QUADSPI_Init+0x50>)
 800b282:	2201      	movs	r2, #1
 800b284:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800b286:	4b0b      	ldr	r3, [pc, #44]	; (800b2b4 <MX_QUADSPI_Init+0x50>)
 800b288:	2200      	movs	r2, #0
 800b28a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800b28c:	4b09      	ldr	r3, [pc, #36]	; (800b2b4 <MX_QUADSPI_Init+0x50>)
 800b28e:	2200      	movs	r2, #0
 800b290:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800b292:	4b08      	ldr	r3, [pc, #32]	; (800b2b4 <MX_QUADSPI_Init+0x50>)
 800b294:	2200      	movs	r2, #0
 800b296:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800b298:	4b06      	ldr	r3, [pc, #24]	; (800b2b4 <MX_QUADSPI_Init+0x50>)
 800b29a:	2200      	movs	r2, #0
 800b29c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800b29e:	4805      	ldr	r0, [pc, #20]	; (800b2b4 <MX_QUADSPI_Init+0x50>)
 800b2a0:	f7fb f95e 	bl	8006560 <HAL_QSPI_Init>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d001      	beq.n	800b2ae <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800b2aa:	f000 fced 	bl	800bc88 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800b2ae:	bf00      	nop
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	200007f0 	.word	0x200007f0
 800b2b8:	a0001000 	.word	0xa0001000

0800b2bc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b092      	sub	sp, #72	; 0x48
 800b2c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800b2c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	601a      	str	r2, [r3, #0]
 800b2ca:	605a      	str	r2, [r3, #4]
 800b2cc:	609a      	str	r2, [r3, #8]
 800b2ce:	60da      	str	r2, [r3, #12]
 800b2d0:	611a      	str	r2, [r3, #16]
 800b2d2:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 800b2d8:	463b      	mov	r3, r7
 800b2da:	222c      	movs	r2, #44	; 0x2c
 800b2dc:	2100      	movs	r1, #0
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f001 fe74 	bl	800cfcc <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800b2e4:	4b47      	ldr	r3, [pc, #284]	; (800b404 <MX_RTC_Init+0x148>)
 800b2e6:	4a48      	ldr	r2, [pc, #288]	; (800b408 <MX_RTC_Init+0x14c>)
 800b2e8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800b2ea:	4b46      	ldr	r3, [pc, #280]	; (800b404 <MX_RTC_Init+0x148>)
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800b2f0:	4b44      	ldr	r3, [pc, #272]	; (800b404 <MX_RTC_Init+0x148>)
 800b2f2:	227f      	movs	r2, #127	; 0x7f
 800b2f4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800b2f6:	4b43      	ldr	r3, [pc, #268]	; (800b404 <MX_RTC_Init+0x148>)
 800b2f8:	22ff      	movs	r2, #255	; 0xff
 800b2fa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800b2fc:	4b41      	ldr	r3, [pc, #260]	; (800b404 <MX_RTC_Init+0x148>)
 800b2fe:	2200      	movs	r2, #0
 800b300:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800b302:	4b40      	ldr	r3, [pc, #256]	; (800b404 <MX_RTC_Init+0x148>)
 800b304:	2200      	movs	r2, #0
 800b306:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800b308:	4b3e      	ldr	r3, [pc, #248]	; (800b404 <MX_RTC_Init+0x148>)
 800b30a:	2200      	movs	r2, #0
 800b30c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800b30e:	483d      	ldr	r0, [pc, #244]	; (800b404 <MX_RTC_Init+0x148>)
 800b310:	f7fc fa22 	bl	8007758 <HAL_RTC_Init>
 800b314:	4603      	mov	r3, r0
 800b316:	2b00      	cmp	r3, #0
 800b318:	d001      	beq.n	800b31e <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800b31a:	f000 fcb5 	bl	800bc88 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 800b31e:	2300      	movs	r3, #0
 800b320:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 800b324:	2300      	movs	r3, #0
 800b326:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 800b32a:	2300      	movs	r3, #0
 800b32c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800b330:	2300      	movs	r3, #0
 800b332:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800b334:	2300      	movs	r3, #0
 800b336:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800b338:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b33c:	2201      	movs	r2, #1
 800b33e:	4619      	mov	r1, r3
 800b340:	4830      	ldr	r0, [pc, #192]	; (800b404 <MX_RTC_Init+0x148>)
 800b342:	f7fc fa85 	bl	8007850 <HAL_RTC_SetTime>
 800b346:	4603      	mov	r3, r0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d001      	beq.n	800b350 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 800b34c:	f000 fc9c 	bl	800bc88 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800b350:	2301      	movs	r3, #1
 800b352:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 800b356:	2301      	movs	r3, #1
 800b358:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 800b35c:	2301      	movs	r3, #1
 800b35e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 800b362:	2300      	movs	r3, #0
 800b364:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800b368:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b36c:	2201      	movs	r2, #1
 800b36e:	4619      	mov	r1, r3
 800b370:	4824      	ldr	r0, [pc, #144]	; (800b404 <MX_RTC_Init+0x148>)
 800b372:	f7fc fb2b 	bl	80079cc <HAL_RTC_SetDate>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d001      	beq.n	800b380 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 800b37c:	f000 fc84 	bl	800bc88 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800b380:	2300      	movs	r3, #0
 800b382:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800b384:	2300      	movs	r3, #0
 800b386:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800b388:	2300      	movs	r3, #0
 800b38a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800b38c:	2300      	movs	r3, #0
 800b38e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800b390:	2300      	movs	r3, #0
 800b392:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800b394:	2300      	movs	r3, #0
 800b396:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800b398:	2300      	movs	r3, #0
 800b39a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800b39c:	2300      	movs	r3, #0
 800b39e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800b3aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800b3b0:	463b      	mov	r3, r7
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	4813      	ldr	r0, [pc, #76]	; (800b404 <MX_RTC_Init+0x148>)
 800b3b8:	f7fc fbb0 	bl	8007b1c <HAL_RTC_SetAlarm>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d001      	beq.n	800b3c6 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800b3c2:	f000 fc61 	bl	800bc88 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 800b3cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3d0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800b3d2:	463b      	mov	r3, r7
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	480a      	ldr	r0, [pc, #40]	; (800b404 <MX_RTC_Init+0x148>)
 800b3da:	f7fc fb9f 	bl	8007b1c <HAL_RTC_SetAlarm>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d001      	beq.n	800b3e8 <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 800b3e4:	f000 fc50 	bl	800bc88 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800b3e8:	2202      	movs	r2, #2
 800b3ea:	2100      	movs	r1, #0
 800b3ec:	4805      	ldr	r0, [pc, #20]	; (800b404 <MX_RTC_Init+0x148>)
 800b3ee:	f7fc fd1f 	bl	8007e30 <HAL_RTCEx_SetTimeStamp>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d001      	beq.n	800b3fc <MX_RTC_Init+0x140>
  {
    Error_Handler();
 800b3f8:	f000 fc46 	bl	800bc88 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800b3fc:	bf00      	nop
 800b3fe:	3748      	adds	r7, #72	; 0x48
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}
 800b404:	2000071c 	.word	0x2000071c
 800b408:	40002800 	.word	0x40002800

0800b40c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800b410:	4b14      	ldr	r3, [pc, #80]	; (800b464 <MX_SDMMC1_SD_Init+0x58>)
 800b412:	4a15      	ldr	r2, [pc, #84]	; (800b468 <MX_SDMMC1_SD_Init+0x5c>)
 800b414:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800b416:	4b13      	ldr	r3, [pc, #76]	; (800b464 <MX_SDMMC1_SD_Init+0x58>)
 800b418:	2200      	movs	r2, #0
 800b41a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800b41c:	4b11      	ldr	r3, [pc, #68]	; (800b464 <MX_SDMMC1_SD_Init+0x58>)
 800b41e:	2200      	movs	r2, #0
 800b420:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b422:	4b10      	ldr	r3, [pc, #64]	; (800b464 <MX_SDMMC1_SD_Init+0x58>)
 800b424:	2200      	movs	r2, #0
 800b426:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800b428:	4b0e      	ldr	r3, [pc, #56]	; (800b464 <MX_SDMMC1_SD_Init+0x58>)
 800b42a:	2200      	movs	r2, #0
 800b42c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b42e:	4b0d      	ldr	r3, [pc, #52]	; (800b464 <MX_SDMMC1_SD_Init+0x58>)
 800b430:	2200      	movs	r2, #0
 800b432:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800b434:	4b0b      	ldr	r3, [pc, #44]	; (800b464 <MX_SDMMC1_SD_Init+0x58>)
 800b436:	2200      	movs	r2, #0
 800b438:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800b43a:	480a      	ldr	r0, [pc, #40]	; (800b464 <MX_SDMMC1_SD_Init+0x58>)
 800b43c:	f7fc fd4e 	bl	8007edc <HAL_SD_Init>
 800b440:	4603      	mov	r3, r0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d001      	beq.n	800b44a <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 800b446:	f000 fc1f 	bl	800bc88 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800b44a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b44e:	4805      	ldr	r0, [pc, #20]	; (800b464 <MX_SDMMC1_SD_Init+0x58>)
 800b450:	f7fc fffb 	bl	800844a <HAL_SD_ConfigWideBusOperation>
 800b454:	4603      	mov	r3, r0
 800b456:	2b00      	cmp	r3, #0
 800b458:	d001      	beq.n	800b45e <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 800b45a:	f000 fc15 	bl	800bc88 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800b45e:	bf00      	nop
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	20000438 	.word	0x20000438
 800b468:	40012c00 	.word	0x40012c00

0800b46c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b088      	sub	sp, #32
 800b470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b472:	f107 0310 	add.w	r3, r7, #16
 800b476:	2200      	movs	r2, #0
 800b478:	601a      	str	r2, [r3, #0]
 800b47a:	605a      	str	r2, [r3, #4]
 800b47c:	609a      	str	r2, [r3, #8]
 800b47e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b480:	1d3b      	adds	r3, r7, #4
 800b482:	2200      	movs	r2, #0
 800b484:	601a      	str	r2, [r3, #0]
 800b486:	605a      	str	r2, [r3, #4]
 800b488:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800b48a:	4b1d      	ldr	r3, [pc, #116]	; (800b500 <MX_TIM3_Init+0x94>)
 800b48c:	4a1d      	ldr	r2, [pc, #116]	; (800b504 <MX_TIM3_Init+0x98>)
 800b48e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 199;
 800b490:	4b1b      	ldr	r3, [pc, #108]	; (800b500 <MX_TIM3_Init+0x94>)
 800b492:	22c7      	movs	r2, #199	; 0xc7
 800b494:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b496:	4b1a      	ldr	r3, [pc, #104]	; (800b500 <MX_TIM3_Init+0x94>)
 800b498:	2200      	movs	r2, #0
 800b49a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800b49c:	4b18      	ldr	r3, [pc, #96]	; (800b500 <MX_TIM3_Init+0x94>)
 800b49e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800b4a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b4a4:	4b16      	ldr	r3, [pc, #88]	; (800b500 <MX_TIM3_Init+0x94>)
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b4aa:	4b15      	ldr	r3, [pc, #84]	; (800b500 <MX_TIM3_Init+0x94>)
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800b4b0:	4813      	ldr	r0, [pc, #76]	; (800b500 <MX_TIM3_Init+0x94>)
 800b4b2:	f7fd fb99 	bl	8008be8 <HAL_TIM_Base_Init>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d001      	beq.n	800b4c0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800b4bc:	f000 fbe4 	bl	800bc88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b4c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800b4c6:	f107 0310 	add.w	r3, r7, #16
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	480c      	ldr	r0, [pc, #48]	; (800b500 <MX_TIM3_Init+0x94>)
 800b4ce:	f7fd fd01 	bl	8008ed4 <HAL_TIM_ConfigClockSource>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d001      	beq.n	800b4dc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800b4d8:	f000 fbd6 	bl	800bc88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b4e4:	1d3b      	adds	r3, r7, #4
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	4805      	ldr	r0, [pc, #20]	; (800b500 <MX_TIM3_Init+0x94>)
 800b4ea:	f7fd ff0f 	bl	800930c <HAL_TIMEx_MasterConfigSynchronization>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d001      	beq.n	800b4f8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800b4f4:	f000 fbc8 	bl	800bc88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800b4f8:	bf00      	nop
 800b4fa:	3720      	adds	r7, #32
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	200004bc 	.word	0x200004bc
 800b504:	40000400 	.word	0x40000400

0800b508 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b50e:	1d3b      	adds	r3, r7, #4
 800b510:	2200      	movs	r2, #0
 800b512:	601a      	str	r2, [r3, #0]
 800b514:	605a      	str	r2, [r3, #4]
 800b516:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800b518:	4b14      	ldr	r3, [pc, #80]	; (800b56c <MX_TIM7_Init+0x64>)
 800b51a:	4a15      	ldr	r2, [pc, #84]	; (800b570 <MX_TIM7_Init+0x68>)
 800b51c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800b51e:	4b13      	ldr	r3, [pc, #76]	; (800b56c <MX_TIM7_Init+0x64>)
 800b520:	2200      	movs	r2, #0
 800b522:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b524:	4b11      	ldr	r3, [pc, #68]	; (800b56c <MX_TIM7_Init+0x64>)
 800b526:	2200      	movs	r2, #0
 800b528:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4165;
 800b52a:	4b10      	ldr	r3, [pc, #64]	; (800b56c <MX_TIM7_Init+0x64>)
 800b52c:	f241 0245 	movw	r2, #4165	; 0x1045
 800b530:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800b532:	4b0e      	ldr	r3, [pc, #56]	; (800b56c <MX_TIM7_Init+0x64>)
 800b534:	2280      	movs	r2, #128	; 0x80
 800b536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800b538:	480c      	ldr	r0, [pc, #48]	; (800b56c <MX_TIM7_Init+0x64>)
 800b53a:	f7fd fb55 	bl	8008be8 <HAL_TIM_Base_Init>
 800b53e:	4603      	mov	r3, r0
 800b540:	2b00      	cmp	r3, #0
 800b542:	d001      	beq.n	800b548 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800b544:	f000 fba0 	bl	800bc88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b548:	2300      	movs	r3, #0
 800b54a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b54c:	2300      	movs	r3, #0
 800b54e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800b550:	1d3b      	adds	r3, r7, #4
 800b552:	4619      	mov	r1, r3
 800b554:	4805      	ldr	r0, [pc, #20]	; (800b56c <MX_TIM7_Init+0x64>)
 800b556:	f7fd fed9 	bl	800930c <HAL_TIMEx_MasterConfigSynchronization>
 800b55a:	4603      	mov	r3, r0
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d001      	beq.n	800b564 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800b560:	f000 fb92 	bl	800bc88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800b564:	bf00      	nop
 800b566:	3710      	adds	r7, #16
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}
 800b56c:	200007b0 	.word	0x200007b0
 800b570:	40001400 	.word	0x40001400

0800b574 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800b578:	4b14      	ldr	r3, [pc, #80]	; (800b5cc <MX_USART1_UART_Init+0x58>)
 800b57a:	4a15      	ldr	r2, [pc, #84]	; (800b5d0 <MX_USART1_UART_Init+0x5c>)
 800b57c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800b57e:	4b13      	ldr	r3, [pc, #76]	; (800b5cc <MX_USART1_UART_Init+0x58>)
 800b580:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b584:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b586:	4b11      	ldr	r3, [pc, #68]	; (800b5cc <MX_USART1_UART_Init+0x58>)
 800b588:	2200      	movs	r2, #0
 800b58a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b58c:	4b0f      	ldr	r3, [pc, #60]	; (800b5cc <MX_USART1_UART_Init+0x58>)
 800b58e:	2200      	movs	r2, #0
 800b590:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b592:	4b0e      	ldr	r3, [pc, #56]	; (800b5cc <MX_USART1_UART_Init+0x58>)
 800b594:	2200      	movs	r2, #0
 800b596:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b598:	4b0c      	ldr	r3, [pc, #48]	; (800b5cc <MX_USART1_UART_Init+0x58>)
 800b59a:	220c      	movs	r2, #12
 800b59c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b59e:	4b0b      	ldr	r3, [pc, #44]	; (800b5cc <MX_USART1_UART_Init+0x58>)
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b5a4:	4b09      	ldr	r3, [pc, #36]	; (800b5cc <MX_USART1_UART_Init+0x58>)
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b5aa:	4b08      	ldr	r3, [pc, #32]	; (800b5cc <MX_USART1_UART_Init+0x58>)
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b5b0:	4b06      	ldr	r3, [pc, #24]	; (800b5cc <MX_USART1_UART_Init+0x58>)
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b5b6:	4805      	ldr	r0, [pc, #20]	; (800b5cc <MX_USART1_UART_Init+0x58>)
 800b5b8:	f7fd ff22 	bl	8009400 <HAL_UART_Init>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d001      	beq.n	800b5c6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800b5c2:	f000 fb61 	bl	800bc88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800b5c6:	bf00      	nop
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	2000063c 	.word	0x2000063c
 800b5d0:	40011000 	.word	0x40011000

0800b5d4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800b5da:	4b0c      	ldr	r3, [pc, #48]	; (800b60c <MX_DMA_Init+0x38>)
 800b5dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5de:	4a0b      	ldr	r2, [pc, #44]	; (800b60c <MX_DMA_Init+0x38>)
 800b5e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b5e4:	6313      	str	r3, [r2, #48]	; 0x30
 800b5e6:	4b09      	ldr	r3, [pc, #36]	; (800b60c <MX_DMA_Init+0x38>)
 800b5e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5ee:	607b      	str	r3, [r7, #4]
 800b5f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	2100      	movs	r1, #0
 800b5f6:	203c      	movs	r0, #60	; 0x3c
 800b5f8:	f7f8 fcd1 	bl	8003f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800b5fc:	203c      	movs	r0, #60	; 0x3c
 800b5fe:	f7f8 fcea 	bl	8003fd6 <HAL_NVIC_EnableIRQ>

}
 800b602:	bf00      	nop
 800b604:	3708      	adds	r7, #8
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
 800b60a:	bf00      	nop
 800b60c:	40023800 	.word	0x40023800

0800b610 <MX_FMC_Init>:
/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b088      	sub	sp, #32
 800b614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800b616:	1d3b      	adds	r3, r7, #4
 800b618:	2200      	movs	r2, #0
 800b61a:	601a      	str	r2, [r3, #0]
 800b61c:	605a      	str	r2, [r3, #4]
 800b61e:	609a      	str	r2, [r3, #8]
 800b620:	60da      	str	r2, [r3, #12]
 800b622:	611a      	str	r2, [r3, #16]
 800b624:	615a      	str	r2, [r3, #20]
 800b626:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800b628:	4b1f      	ldr	r3, [pc, #124]	; (800b6a8 <MX_FMC_Init+0x98>)
 800b62a:	4a20      	ldr	r2, [pc, #128]	; (800b6ac <MX_FMC_Init+0x9c>)
 800b62c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800b62e:	4b1e      	ldr	r3, [pc, #120]	; (800b6a8 <MX_FMC_Init+0x98>)
 800b630:	2200      	movs	r2, #0
 800b632:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800b634:	4b1c      	ldr	r3, [pc, #112]	; (800b6a8 <MX_FMC_Init+0x98>)
 800b636:	2200      	movs	r2, #0
 800b638:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800b63a:	4b1b      	ldr	r3, [pc, #108]	; (800b6a8 <MX_FMC_Init+0x98>)
 800b63c:	2204      	movs	r2, #4
 800b63e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800b640:	4b19      	ldr	r3, [pc, #100]	; (800b6a8 <MX_FMC_Init+0x98>)
 800b642:	2210      	movs	r2, #16
 800b644:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800b646:	4b18      	ldr	r3, [pc, #96]	; (800b6a8 <MX_FMC_Init+0x98>)
 800b648:	2240      	movs	r2, #64	; 0x40
 800b64a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800b64c:	4b16      	ldr	r3, [pc, #88]	; (800b6a8 <MX_FMC_Init+0x98>)
 800b64e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800b652:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800b654:	4b14      	ldr	r3, [pc, #80]	; (800b6a8 <MX_FMC_Init+0x98>)
 800b656:	2200      	movs	r2, #0
 800b658:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800b65a:	4b13      	ldr	r3, [pc, #76]	; (800b6a8 <MX_FMC_Init+0x98>)
 800b65c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b660:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800b662:	4b11      	ldr	r3, [pc, #68]	; (800b6a8 <MX_FMC_Init+0x98>)
 800b664:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b668:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800b66a:	4b0f      	ldr	r3, [pc, #60]	; (800b6a8 <MX_FMC_Init+0x98>)
 800b66c:	2200      	movs	r2, #0
 800b66e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800b670:	2302      	movs	r3, #2
 800b672:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800b674:	2307      	movs	r3, #7
 800b676:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800b678:	2304      	movs	r3, #4
 800b67a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800b67c:	2307      	movs	r3, #7
 800b67e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800b680:	2303      	movs	r3, #3
 800b682:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800b684:	2302      	movs	r3, #2
 800b686:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800b688:	2302      	movs	r3, #2
 800b68a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800b68c:	1d3b      	adds	r3, r7, #4
 800b68e:	4619      	mov	r1, r3
 800b690:	4805      	ldr	r0, [pc, #20]	; (800b6a8 <MX_FMC_Init+0x98>)
 800b692:	f7fd fa2a 	bl	8008aea <HAL_SDRAM_Init>
 800b696:	4603      	mov	r3, r0
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d001      	beq.n	800b6a0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800b69c:	f000 faf4 	bl	800bc88 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800b6a0:	bf00      	nop
 800b6a2:	3720      	adds	r7, #32
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}
 800b6a8:	2000077c 	.word	0x2000077c
 800b6ac:	a0000140 	.word	0xa0000140

0800b6b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b090      	sub	sp, #64	; 0x40
 800b6b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	601a      	str	r2, [r3, #0]
 800b6be:	605a      	str	r2, [r3, #4]
 800b6c0:	609a      	str	r2, [r3, #8]
 800b6c2:	60da      	str	r2, [r3, #12]
 800b6c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800b6c6:	4bad      	ldr	r3, [pc, #692]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ca:	4aac      	ldr	r2, [pc, #688]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b6cc:	f043 0310 	orr.w	r3, r3, #16
 800b6d0:	6313      	str	r3, [r2, #48]	; 0x30
 800b6d2:	4baa      	ldr	r3, [pc, #680]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b6d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6d6:	f003 0310 	and.w	r3, r3, #16
 800b6da:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800b6de:	4ba7      	ldr	r3, [pc, #668]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b6e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6e2:	4aa6      	ldr	r2, [pc, #664]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b6e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6e8:	6313      	str	r3, [r2, #48]	; 0x30
 800b6ea:	4ba4      	ldr	r3, [pc, #656]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b6ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6f2:	627b      	str	r3, [r7, #36]	; 0x24
 800b6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b6f6:	4ba1      	ldr	r3, [pc, #644]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b6f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6fa:	4aa0      	ldr	r2, [pc, #640]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b6fc:	f043 0302 	orr.w	r3, r3, #2
 800b700:	6313      	str	r3, [r2, #48]	; 0x30
 800b702:	4b9e      	ldr	r3, [pc, #632]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b706:	f003 0302 	and.w	r3, r3, #2
 800b70a:	623b      	str	r3, [r7, #32]
 800b70c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b70e:	4b9b      	ldr	r3, [pc, #620]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b712:	4a9a      	ldr	r2, [pc, #616]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b714:	f043 0308 	orr.w	r3, r3, #8
 800b718:	6313      	str	r3, [r2, #48]	; 0x30
 800b71a:	4b98      	ldr	r3, [pc, #608]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b71c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b71e:	f003 0308 	and.w	r3, r3, #8
 800b722:	61fb      	str	r3, [r7, #28]
 800b724:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b726:	4b95      	ldr	r3, [pc, #596]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b72a:	4a94      	ldr	r2, [pc, #592]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b72c:	f043 0304 	orr.w	r3, r3, #4
 800b730:	6313      	str	r3, [r2, #48]	; 0x30
 800b732:	4b92      	ldr	r3, [pc, #584]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b736:	f003 0304 	and.w	r3, r3, #4
 800b73a:	61bb      	str	r3, [r7, #24]
 800b73c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b73e:	4b8f      	ldr	r3, [pc, #572]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b742:	4a8e      	ldr	r2, [pc, #568]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b744:	f043 0301 	orr.w	r3, r3, #1
 800b748:	6313      	str	r3, [r2, #48]	; 0x30
 800b74a:	4b8c      	ldr	r3, [pc, #560]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b74c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b74e:	f003 0301 	and.w	r3, r3, #1
 800b752:	617b      	str	r3, [r7, #20]
 800b754:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800b756:	4b89      	ldr	r3, [pc, #548]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b75a:	4a88      	ldr	r2, [pc, #544]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b75c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b760:	6313      	str	r3, [r2, #48]	; 0x30
 800b762:	4b86      	ldr	r3, [pc, #536]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b766:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b76a:	613b      	str	r3, [r7, #16]
 800b76c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800b76e:	4b83      	ldr	r3, [pc, #524]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b772:	4a82      	ldr	r2, [pc, #520]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b778:	6313      	str	r3, [r2, #48]	; 0x30
 800b77a:	4b80      	ldr	r3, [pc, #512]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b77c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b77e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b782:	60fb      	str	r3, [r7, #12]
 800b784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800b786:	4b7d      	ldr	r3, [pc, #500]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b78a:	4a7c      	ldr	r2, [pc, #496]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b78c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b790:	6313      	str	r3, [r2, #48]	; 0x30
 800b792:	4b7a      	ldr	r3, [pc, #488]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b79a:	60bb      	str	r3, [r7, #8]
 800b79c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800b79e:	4b77      	ldr	r3, [pc, #476]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b7a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7a2:	4a76      	ldr	r2, [pc, #472]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b7a4:	f043 0320 	orr.w	r3, r3, #32
 800b7a8:	6313      	str	r3, [r2, #48]	; 0x30
 800b7aa:	4b74      	ldr	r3, [pc, #464]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b7ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7ae:	f003 0320 	and.w	r3, r3, #32
 800b7b2:	607b      	str	r3, [r7, #4]
 800b7b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b7b6:	4b71      	ldr	r3, [pc, #452]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b7b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7ba:	4a70      	ldr	r2, [pc, #448]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b7bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7c0:	6313      	str	r3, [r2, #48]	; 0x30
 800b7c2:	4b6e      	ldr	r3, [pc, #440]	; (800b97c <MX_GPIO_Init+0x2cc>)
 800b7c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7ca:	603b      	str	r3, [r7, #0]
 800b7cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	2120      	movs	r1, #32
 800b7d2:	486b      	ldr	r0, [pc, #428]	; (800b980 <MX_GPIO_Init+0x2d0>)
 800b7d4:	f7f9 fda6 	bl	8005324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800b7d8:	2200      	movs	r2, #0
 800b7da:	210c      	movs	r1, #12
 800b7dc:	4869      	ldr	r0, [pc, #420]	; (800b984 <MX_GPIO_Init+0x2d4>)
 800b7de:	f7f9 fda1 	bl	8005324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	2108      	movs	r1, #8
 800b7e6:	4868      	ldr	r0, [pc, #416]	; (800b988 <MX_GPIO_Init+0x2d8>)
 800b7e8:	f7f9 fd9c 	bl	8005324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b7f2:	4864      	ldr	r0, [pc, #400]	; (800b984 <MX_GPIO_Init+0x2d4>)
 800b7f4:	f7f9 fd96 	bl	8005324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b7fe:	4863      	ldr	r0, [pc, #396]	; (800b98c <MX_GPIO_Init+0x2dc>)
 800b800:	f7f9 fd90 	bl	8005324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800b804:	2200      	movs	r2, #0
 800b806:	21c8      	movs	r1, #200	; 0xc8
 800b808:	4861      	ldr	r0, [pc, #388]	; (800b990 <MX_GPIO_Init+0x2e0>)
 800b80a:	f7f9 fd8b 	bl	8005324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800b80e:	2308      	movs	r3, #8
 800b810:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b812:	2300      	movs	r3, #0
 800b814:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b816:	2300      	movs	r3, #0
 800b818:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800b81a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b81e:	4619      	mov	r1, r3
 800b820:	485c      	ldr	r0, [pc, #368]	; (800b994 <MX_GPIO_Init+0x2e4>)
 800b822:	f7f9 fbd5 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800b826:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800b82a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b82c:	2302      	movs	r3, #2
 800b82e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b830:	2300      	movs	r3, #0
 800b832:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b834:	2303      	movs	r3, #3
 800b836:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b838:	230b      	movs	r3, #11
 800b83a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b83c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b840:	4619      	mov	r1, r3
 800b842:	4853      	ldr	r0, [pc, #332]	; (800b990 <MX_GPIO_Init+0x2e0>)
 800b844:	f7f9 fbc4 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800b848:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b84c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b84e:	2312      	movs	r3, #18
 800b850:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b852:	2301      	movs	r3, #1
 800b854:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b856:	2300      	movs	r3, #0
 800b858:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800b85a:	2304      	movs	r3, #4
 800b85c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b85e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b862:	4619      	mov	r1, r3
 800b864:	484c      	ldr	r0, [pc, #304]	; (800b998 <MX_GPIO_Init+0x2e8>)
 800b866:	f7f9 fbb3 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 800b86a:	f643 4323 	movw	r3, #15395	; 0x3c23
 800b86e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b870:	2302      	movs	r3, #2
 800b872:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b874:	2300      	movs	r3, #0
 800b876:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b878:	2303      	movs	r3, #3
 800b87a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800b87c:	230a      	movs	r3, #10
 800b87e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b880:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b884:	4619      	mov	r1, r3
 800b886:	4844      	ldr	r0, [pc, #272]	; (800b998 <MX_GPIO_Init+0x2e8>)
 800b888:	f7f9 fba2 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800b88c:	2380      	movs	r3, #128	; 0x80
 800b88e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b890:	2302      	movs	r3, #2
 800b892:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b894:	2300      	movs	r3, #0
 800b896:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b898:	2300      	movs	r3, #0
 800b89a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800b89c:	2308      	movs	r3, #8
 800b89e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800b8a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	4836      	ldr	r0, [pc, #216]	; (800b980 <MX_GPIO_Init+0x2d0>)
 800b8a8:	f7f9 fb92 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800b8ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b8b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8b2:	2302      	movs	r3, #2
 800b8b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800b8c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	4834      	ldr	r0, [pc, #208]	; (800b99c <MX_GPIO_Init+0x2ec>)
 800b8ca:	f7f9 fb81 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800b8ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800b8dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	482f      	ldr	r0, [pc, #188]	; (800b9a0 <MX_GPIO_Init+0x2f0>)
 800b8e4:	f7f9 fb74 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800b8e8:	2340      	movs	r3, #64	; 0x40
 800b8ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800b8ec:	4b2d      	ldr	r3, [pc, #180]	; (800b9a4 <MX_GPIO_Init+0x2f4>)
 800b8ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800b8f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	4821      	ldr	r0, [pc, #132]	; (800b980 <MX_GPIO_Init+0x2d0>)
 800b8fc:	f7f9 fb68 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800b900:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b904:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b906:	2302      	movs	r3, #2
 800b908:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b90a:	2300      	movs	r3, #0
 800b90c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b90e:	2303      	movs	r3, #3
 800b910:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b912:	230a      	movs	r3, #10
 800b914:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b916:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b91a:	4619      	mov	r1, r3
 800b91c:	481f      	ldr	r0, [pc, #124]	; (800b99c <MX_GPIO_Init+0x2ec>)
 800b91e:	f7f9 fb57 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800b922:	23f0      	movs	r3, #240	; 0xf0
 800b924:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b926:	2302      	movs	r3, #2
 800b928:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b92a:	2300      	movs	r3, #0
 800b92c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b92e:	2300      	movs	r3, #0
 800b930:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800b932:	230a      	movs	r3, #10
 800b934:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800b936:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b93a:	4619      	mov	r1, r3
 800b93c:	4811      	ldr	r0, [pc, #68]	; (800b984 <MX_GPIO_Init+0x2d4>)
 800b93e:	f7f9 fb47 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800b942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b946:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b948:	2302      	movs	r3, #2
 800b94a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b94c:	2300      	movs	r3, #0
 800b94e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b950:	2300      	movs	r3, #0
 800b952:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800b954:	230a      	movs	r3, #10
 800b956:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800b958:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b95c:	4619      	mov	r1, r3
 800b95e:	480c      	ldr	r0, [pc, #48]	; (800b990 <MX_GPIO_Init+0x2e0>)
 800b960:	f7f9 fb36 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800b964:	2320      	movs	r3, #32
 800b966:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b968:	2301      	movs	r3, #1
 800b96a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b96c:	2300      	movs	r3, #0
 800b96e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b970:	2300      	movs	r3, #0
 800b972:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800b974:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b978:	4619      	mov	r1, r3
 800b97a:	e015      	b.n	800b9a8 <MX_GPIO_Init+0x2f8>
 800b97c:	40023800 	.word	0x40023800
 800b980:	40020c00 	.word	0x40020c00
 800b984:	40022000 	.word	0x40022000
 800b988:	40022800 	.word	0x40022800
 800b98c:	40021c00 	.word	0x40021c00
 800b990:	40021800 	.word	0x40021800
 800b994:	40021000 	.word	0x40021000
 800b998:	40020400 	.word	0x40020400
 800b99c:	40020000 	.word	0x40020000
 800b9a0:	40022400 	.word	0x40022400
 800b9a4:	10120000 	.word	0x10120000
 800b9a8:	48ad      	ldr	r0, [pc, #692]	; (800bc60 <MX_GPIO_Init+0x5b0>)
 800b9aa:	f7f9 fb11 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800b9ae:	f241 030c 	movw	r3, #4108	; 0x100c
 800b9b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800b9c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	48a7      	ldr	r0, [pc, #668]	; (800bc64 <MX_GPIO_Init+0x5b4>)
 800b9c8:	f7f9 fb02 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800b9cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b9d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800b9da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b9de:	4619      	mov	r1, r3
 800b9e0:	48a1      	ldr	r0, [pc, #644]	; (800bc68 <MX_GPIO_Init+0x5b8>)
 800b9e2:	f7f9 faf5 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800b9e6:	2308      	movs	r3, #8
 800b9e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800b9f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	489b      	ldr	r0, [pc, #620]	; (800bc6c <MX_GPIO_Init+0x5bc>)
 800b9fe:	f7f9 fae7 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800ba02:	2310      	movs	r3, #16
 800ba04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ba06:	2300      	movs	r3, #0
 800ba08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800ba0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ba12:	4619      	mov	r1, r3
 800ba14:	4892      	ldr	r0, [pc, #584]	; (800bc60 <MX_GPIO_Init+0x5b0>)
 800ba16:	f7f9 fadb 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800ba1a:	f248 0304 	movw	r3, #32772	; 0x8004
 800ba1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ba20:	2300      	movs	r3, #0
 800ba22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba24:	2300      	movs	r3, #0
 800ba26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800ba28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	4890      	ldr	r0, [pc, #576]	; (800bc70 <MX_GPIO_Init+0x5c0>)
 800ba30:	f7f9 face 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800ba34:	2302      	movs	r3, #2
 800ba36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba38:	2302      	movs	r3, #2
 800ba3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ba40:	2300      	movs	r3, #0
 800ba42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800ba44:	2305      	movs	r3, #5
 800ba46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800ba48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	4885      	ldr	r0, [pc, #532]	; (800bc64 <MX_GPIO_Init+0x5b4>)
 800ba50:	f7f9 fabe 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800ba54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ba58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ba62:	2300      	movs	r3, #0
 800ba64:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800ba66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	4880      	ldr	r0, [pc, #512]	; (800bc70 <MX_GPIO_Init+0x5c0>)
 800ba6e:	f7f9 faaf 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800ba72:	2301      	movs	r3, #1
 800ba74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba76:	2302      	movs	r3, #2
 800ba78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800ba82:	2302      	movs	r3, #2
 800ba84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800ba86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	4875      	ldr	r0, [pc, #468]	; (800bc64 <MX_GPIO_Init+0x5b4>)
 800ba8e:	f7f9 fa9f 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800ba92:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba98:	2302      	movs	r3, #2
 800ba9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800baa0:	2300      	movs	r3, #0
 800baa2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800baa4:	2301      	movs	r3, #1
 800baa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800baa8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800baac:	4619      	mov	r1, r3
 800baae:	4871      	ldr	r0, [pc, #452]	; (800bc74 <MX_GPIO_Init+0x5c4>)
 800bab0:	f7f9 fa8e 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800bab4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800baba:	4b6f      	ldr	r3, [pc, #444]	; (800bc78 <MX_GPIO_Init+0x5c8>)
 800babc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800babe:	2300      	movs	r3, #0
 800bac0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800bac2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bac6:	4619      	mov	r1, r3
 800bac8:	4866      	ldr	r0, [pc, #408]	; (800bc64 <MX_GPIO_Init+0x5b4>)
 800baca:	f7f9 fa81 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800bace:	23c0      	movs	r3, #192	; 0xc0
 800bad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bad2:	2302      	movs	r3, #2
 800bad4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bad6:	2300      	movs	r3, #0
 800bad8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bada:	2303      	movs	r3, #3
 800badc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800bade:	2308      	movs	r3, #8
 800bae0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bae2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bae6:	4619      	mov	r1, r3
 800bae8:	485f      	ldr	r0, [pc, #380]	; (800bc68 <MX_GPIO_Init+0x5b8>)
 800baea:	f7f9 fa71 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800baee:	2310      	movs	r3, #16
 800baf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800baf2:	2302      	movs	r3, #2
 800baf4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800baf6:	2300      	movs	r3, #0
 800baf8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bafa:	2303      	movs	r3, #3
 800bafc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800bafe:	230a      	movs	r3, #10
 800bb00:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800bb02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb06:	4619      	mov	r1, r3
 800bb08:	4859      	ldr	r0, [pc, #356]	; (800bc70 <MX_GPIO_Init+0x5c0>)
 800bb0a:	f7f9 fa61 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800bb0e:	23c8      	movs	r3, #200	; 0xc8
 800bb10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bb12:	2301      	movs	r3, #1
 800bb14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb16:	2300      	movs	r3, #0
 800bb18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800bb1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb22:	4619      	mov	r1, r3
 800bb24:	4855      	ldr	r0, [pc, #340]	; (800bc7c <MX_GPIO_Init+0x5cc>)
 800bb26:	f7f9 fa53 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin 
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 800bb2a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800bb2e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bb30:	2303      	movs	r3, #3
 800bb32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb34:	2300      	movs	r3, #0
 800bb36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800bb38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb3c:	4619      	mov	r1, r3
 800bb3e:	4850      	ldr	r0, [pc, #320]	; (800bc80 <MX_GPIO_Init+0x5d0>)
 800bb40:	f7f9 fa46 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800bb44:	2305      	movs	r3, #5
 800bb46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb48:	2302      	movs	r3, #2
 800bb4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bb50:	2303      	movs	r3, #3
 800bb52:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800bb54:	230a      	movs	r3, #10
 800bb56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bb58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	4842      	ldr	r0, [pc, #264]	; (800bc68 <MX_GPIO_Init+0x5b8>)
 800bb60:	f7f9 fa36 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800bb64:	2332      	movs	r3, #50	; 0x32
 800bb66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb68:	2302      	movs	r3, #2
 800bb6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bb70:	2303      	movs	r3, #3
 800bb72:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bb74:	230b      	movs	r3, #11
 800bb76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bb78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	483a      	ldr	r0, [pc, #232]	; (800bc68 <MX_GPIO_Init+0x5b8>)
 800bb80:	f7f9 fa26 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800bb84:	2304      	movs	r3, #4
 800bb86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800bb90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb94:	4619      	mov	r1, r3
 800bb96:	4839      	ldr	r0, [pc, #228]	; (800bc7c <MX_GPIO_Init+0x5cc>)
 800bb98:	f7f9 fa1a 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800bb9c:	2386      	movs	r3, #134	; 0x86
 800bb9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bba0:	2302      	movs	r3, #2
 800bba2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bba4:	2300      	movs	r3, #0
 800bba6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bba8:	2303      	movs	r3, #3
 800bbaa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bbac:	230b      	movs	r3, #11
 800bbae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bbb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	482f      	ldr	r0, [pc, #188]	; (800bc74 <MX_GPIO_Init+0x5c4>)
 800bbb8:	f7f9 fa0a 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bbc0:	2303      	movs	r3, #3
 800bbc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bbc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bbcc:	4619      	mov	r1, r3
 800bbce:	4829      	ldr	r0, [pc, #164]	; (800bc74 <MX_GPIO_Init+0x5c4>)
 800bbd0:	f7f9 f9fe 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800bbd4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800bbd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800bbda:	2312      	movs	r3, #18
 800bbdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bbde:	2301      	movs	r3, #1
 800bbe0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bbe2:	2303      	movs	r3, #3
 800bbe4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800bbe6:	2304      	movs	r3, #4
 800bbe8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800bbea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bbee:	4619      	mov	r1, r3
 800bbf0:	481f      	ldr	r0, [pc, #124]	; (800bc70 <MX_GPIO_Init+0x5c0>)
 800bbf2:	f7f9 f9ed 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800bbf6:	2328      	movs	r3, #40	; 0x28
 800bbf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bbfa:	2302      	movs	r3, #2
 800bbfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bc02:	2303      	movs	r3, #3
 800bc04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800bc06:	230a      	movs	r3, #10
 800bc08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bc0e:	4619      	mov	r1, r3
 800bc10:	4818      	ldr	r0, [pc, #96]	; (800bc74 <MX_GPIO_Init+0x5c4>)
 800bc12:	f7f9 f9dd 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800bc16:	2340      	movs	r3, #64	; 0x40
 800bc18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc1a:	2302      	movs	r3, #2
 800bc1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc22:	2300      	movs	r3, #0
 800bc24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800bc26:	2309      	movs	r3, #9
 800bc28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800bc2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bc2e:	4619      	mov	r1, r3
 800bc30:	480f      	ldr	r0, [pc, #60]	; (800bc70 <MX_GPIO_Init+0x5c0>)
 800bc32:	f7f9 f9cd 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800bc36:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800bc3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc3c:	2302      	movs	r3, #2
 800bc3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc40:	2300      	movs	r3, #0
 800bc42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc44:	2300      	movs	r3, #0
 800bc46:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800bc48:	2305      	movs	r3, #5
 800bc4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bc4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bc50:	4619      	mov	r1, r3
 800bc52:	480c      	ldr	r0, [pc, #48]	; (800bc84 <MX_GPIO_Init+0x5d4>)
 800bc54:	f7f9 f9bc 	bl	8004fd0 <HAL_GPIO_Init>

}
 800bc58:	bf00      	nop
 800bc5a:	3740      	adds	r7, #64	; 0x40
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	40020c00 	.word	0x40020c00
 800bc64:	40022000 	.word	0x40022000
 800bc68:	40020800 	.word	0x40020800
 800bc6c:	40022800 	.word	0x40022800
 800bc70:	40021c00 	.word	0x40021c00
 800bc74:	40020000 	.word	0x40020000
 800bc78:	10120000 	.word	0x10120000
 800bc7c:	40021800 	.word	0x40021800
 800bc80:	40021400 	.word	0x40021400
 800bc84:	40020400 	.word	0x40020400

0800bc88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800bc8c:	bf00      	nop
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr
	...

0800bc98 <HAL_ADC_ConvCpltCallback>:
			INTERRUPT HANDLERS
##########################################################################
*/

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b083      	sub	sp, #12
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
	is_ready = 1;
 800bca0:	4b04      	ldr	r3, [pc, #16]	; (800bcb4 <HAL_ADC_ConvCpltCallback+0x1c>)
 800bca2:	2201      	movs	r2, #1
 800bca4:	701a      	strb	r2, [r3, #0]
}
 800bca6:	bf00      	nop
 800bca8:	370c      	adds	r7, #12
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb0:	4770      	bx	lr
 800bcb2:	bf00      	nop
 800bcb4:	20003841 	.word	0x20003841

0800bcb8 <Init_Sampling>:
			CORE FUNCTIONS
##########################################################################
*/

void Init_Sampling(ADC_HandleTypeDef * hadc1)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b082      	sub	sp, #8
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
//	signals_pck->corr_max = 0;
//	signals_pck->ref_sampled = 0;
//	signals_pck->result_ready = 0;
//	signals_pck->sample_corr_max = 0;

	HAL_ADC_Start(hadc1);
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f7f7 fac9 	bl	8003258 <HAL_ADC_Start>
	HAL_ADC_Start_DMA(hadc1, sampling_buff, SAMPLES_NBR);
 800bcc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bcca:	4904      	ldr	r1, [pc, #16]	; (800bcdc <Init_Sampling+0x24>)
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f7f7 fcc5 	bl	800365c <HAL_ADC_Start_DMA>

}
 800bcd2:	bf00      	nop
 800bcd4:	3708      	adds	r7, #8
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	20001840 	.word	0x20001840

0800bce0 <signal_handler_process>:

void signal_handler_process()
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	af00      	add	r7, sp, #0
	if(is_ready == 1)
 800bce4:	4b06      	ldr	r3, [pc, #24]	; (800bd00 <signal_handler_process+0x20>)
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	d107      	bne.n	800bcfc <signal_handler_process+0x1c>
	{
		signals_analyse();
 800bcec:	f000 f80c 	bl	800bd08 <signals_analyse>
		display_ready = 1;
 800bcf0:	4b04      	ldr	r3, [pc, #16]	; (800bd04 <signal_handler_process+0x24>)
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	701a      	strb	r2, [r3, #0]
		is_ready = 0;
 800bcf6:	4b02      	ldr	r3, [pc, #8]	; (800bd00 <signal_handler_process+0x20>)
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	701a      	strb	r2, [r3, #0]
	}
}
 800bcfc:	bf00      	nop
 800bcfe:	bd80      	pop	{r7, pc}
 800bd00:	20003841 	.word	0x20003841
 800bd04:	20000353 	.word	0x20000353

0800bd08 <signals_analyse>:

void signals_analyse()
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
	if(ref_sampled == 0)
 800bd0e:	4b1f      	ldr	r3, [pc, #124]	; (800bd8c <signals_analyse+0x84>)
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d11f      	bne.n	800bd56 <signals_analyse+0x4e>
	{
		//memset(ref_signal, sampling_buff, SAMPLES_NBR);
		for(int i = 0 ; i < SAMPLES_NBR ; i++)
 800bd16:	2300      	movs	r3, #0
 800bd18:	607b      	str	r3, [r7, #4]
 800bd1a:	e00c      	b.n	800bd36 <signals_analyse+0x2e>
		{
			ref_signal[i] = sampling_buff[i];
 800bd1c:	4a1c      	ldr	r2, [pc, #112]	; (800bd90 <signals_analyse+0x88>)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd24:	b2d9      	uxtb	r1, r3
 800bd26:	4a1b      	ldr	r2, [pc, #108]	; (800bd94 <signals_analyse+0x8c>)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	4413      	add	r3, r2
 800bd2c:	460a      	mov	r2, r1
 800bd2e:	701a      	strb	r2, [r3, #0]
		for(int i = 0 ; i < SAMPLES_NBR ; i++)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	3301      	adds	r3, #1
 800bd34:	607b      	str	r3, [r7, #4]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd3c:	dbee      	blt.n	800bd1c <signals_analyse+0x14>
		}
		crosscorrelation(ref_signal, ref_signal);
 800bd3e:	4915      	ldr	r1, [pc, #84]	; (800bd94 <signals_analyse+0x8c>)
 800bd40:	4814      	ldr	r0, [pc, #80]	; (800bd94 <signals_analyse+0x8c>)
 800bd42:	f000 f86b 	bl	800be1c <crosscorrelation>
		ref_threshold = corr_max;
 800bd46:	4b14      	ldr	r3, [pc, #80]	; (800bd98 <signals_analyse+0x90>)
 800bd48:	781a      	ldrb	r2, [r3, #0]
 800bd4a:	4b14      	ldr	r3, [pc, #80]	; (800bd9c <signals_analyse+0x94>)
 800bd4c:	701a      	strb	r2, [r3, #0]
		ref_sampled = 1;
 800bd4e:	4b0f      	ldr	r3, [pc, #60]	; (800bd8c <signals_analyse+0x84>)
 800bd50:	2201      	movs	r2, #1
 800bd52:	701a      	strb	r2, [r3, #0]
		search_signal();

	}


}
 800bd54:	e015      	b.n	800bd82 <signals_analyse+0x7a>
		for(int i = 0 ; i < SAMPLES_NBR ; i++)
 800bd56:	2300      	movs	r3, #0
 800bd58:	603b      	str	r3, [r7, #0]
 800bd5a:	e00c      	b.n	800bd76 <signals_analyse+0x6e>
			raw_signal[i] = sampling_buff[i];//sampling_buff[i];
 800bd5c:	4a0c      	ldr	r2, [pc, #48]	; (800bd90 <signals_analyse+0x88>)
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd64:	b2d9      	uxtb	r1, r3
 800bd66:	4a0e      	ldr	r2, [pc, #56]	; (800bda0 <signals_analyse+0x98>)
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	4413      	add	r3, r2
 800bd6c:	460a      	mov	r2, r1
 800bd6e:	701a      	strb	r2, [r3, #0]
		for(int i = 0 ; i < SAMPLES_NBR ; i++)
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	3301      	adds	r3, #1
 800bd74:	603b      	str	r3, [r7, #0]
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd7c:	dbee      	blt.n	800bd5c <signals_analyse+0x54>
		search_signal();
 800bd7e:	f000 f813 	bl	800bda8 <search_signal>
}
 800bd82:	bf00      	nop
 800bd84:	3708      	adds	r7, #8
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
 800bd8a:	bf00      	nop
 800bd8c:	2000083d 	.word	0x2000083d
 800bd90:	20001840 	.word	0x20001840
 800bd94:	20003844 	.word	0x20003844
 800bd98:	2000083c 	.word	0x2000083c
 800bd9c:	20000351 	.word	0x20000351
 800bda0:	20004044 	.word	0x20004044
 800bda4:	00000000 	.word	0x00000000

0800bda8 <search_signal>:

void search_signal()
{
 800bda8:	b590      	push	{r4, r7, lr}
 800bdaa:	b083      	sub	sp, #12
 800bdac:	af00      	add	r7, sp, #0
	uint16_t th = (THRESHOLD_RATIO * ref_threshold);
 800bdae:	4b18      	ldr	r3, [pc, #96]	; (800be10 <search_signal+0x68>)
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7f4 fb7a 	bl	80004ac <__aeabi_i2d>
 800bdb8:	a313      	add	r3, pc, #76	; (adr r3, 800be08 <search_signal+0x60>)
 800bdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdbe:	f7f4 fbdf 	bl	8000580 <__aeabi_dmul>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	460c      	mov	r4, r1
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	4621      	mov	r1, r4
 800bdca:	f7f4 fe89 	bl	8000ae0 <__aeabi_d2uiz>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	80fb      	strh	r3, [r7, #6]
	if(signal_detected == 0)
 800bdd2:	4b10      	ldr	r3, [pc, #64]	; (800be14 <search_signal+0x6c>)
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d109      	bne.n	800bdee <search_signal+0x46>
	{
		if(corr_max >= th)
 800bdda:	4b0f      	ldr	r3, [pc, #60]	; (800be18 <search_signal+0x70>)
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	88fa      	ldrh	r2, [r7, #6]
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d80c      	bhi.n	800be00 <search_signal+0x58>
		{
			signal_detected = 1;
 800bde6:	4b0b      	ldr	r3, [pc, #44]	; (800be14 <search_signal+0x6c>)
 800bde8:	2201      	movs	r2, #1
 800bdea:	701a      	strb	r2, [r3, #0]
		if(corr_max < th)
		{
			signal_detected = 0;
		}
	}
}
 800bdec:	e008      	b.n	800be00 <search_signal+0x58>
		if(corr_max < th)
 800bdee:	4b0a      	ldr	r3, [pc, #40]	; (800be18 <search_signal+0x70>)
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	88fa      	ldrh	r2, [r7, #6]
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d902      	bls.n	800be00 <search_signal+0x58>
			signal_detected = 0;
 800bdfa:	4b06      	ldr	r3, [pc, #24]	; (800be14 <search_signal+0x6c>)
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	701a      	strb	r2, [r3, #0]
}
 800be00:	bf00      	nop
 800be02:	370c      	adds	r7, #12
 800be04:	46bd      	mov	sp, r7
 800be06:	bd90      	pop	{r4, r7, pc}
 800be08:	66666666 	.word	0x66666666
 800be0c:	3fee6666 	.word	0x3fee6666
 800be10:	20000351 	.word	0x20000351
 800be14:	20000352 	.word	0x20000352
 800be18:	2000083c 	.word	0x2000083c

0800be1c <crosscorrelation>:


void crosscorrelation(uint8_t* ref_signal, uint8_t* comp_signal)
{
 800be1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800be20:	b096      	sub	sp, #88	; 0x58
 800be22:	af00      	add	r7, sp, #0
 800be24:	60f8      	str	r0, [r7, #12]
 800be26:	60b9      	str	r1, [r7, #8]
 800be28:	466b      	mov	r3, sp
 800be2a:	461d      	mov	r5, r3

	int i,j,k;
	int p = SAMPLES_NBR + SAMPLES_NBR -1;
 800be2c:	f640 73ff 	movw	r3, #4095	; 0xfff
 800be30:	643b      	str	r3, [r7, #64]	; 0x40

	float comp_f[p],comp_f_2[p], ref_signal_2[p],comp_signal_2[p];
 800be32:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800be34:	1e43      	subs	r3, r0, #1
 800be36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be38:	4603      	mov	r3, r0
 800be3a:	4619      	mov	r1, r3
 800be3c:	f04f 0200 	mov.w	r2, #0
 800be40:	f04f 0300 	mov.w	r3, #0
 800be44:	f04f 0400 	mov.w	r4, #0
 800be48:	0154      	lsls	r4, r2, #5
 800be4a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800be4e:	014b      	lsls	r3, r1, #5
 800be50:	4603      	mov	r3, r0
 800be52:	4619      	mov	r1, r3
 800be54:	f04f 0200 	mov.w	r2, #0
 800be58:	f04f 0300 	mov.w	r3, #0
 800be5c:	f04f 0400 	mov.w	r4, #0
 800be60:	0154      	lsls	r4, r2, #5
 800be62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800be66:	014b      	lsls	r3, r1, #5
 800be68:	4603      	mov	r3, r0
 800be6a:	009b      	lsls	r3, r3, #2
 800be6c:	3303      	adds	r3, #3
 800be6e:	3307      	adds	r3, #7
 800be70:	08db      	lsrs	r3, r3, #3
 800be72:	00db      	lsls	r3, r3, #3
 800be74:	ebad 0d03 	sub.w	sp, sp, r3
 800be78:	466b      	mov	r3, sp
 800be7a:	3303      	adds	r3, #3
 800be7c:	089b      	lsrs	r3, r3, #2
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	63bb      	str	r3, [r7, #56]	; 0x38
 800be82:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800be84:	1e43      	subs	r3, r0, #1
 800be86:	637b      	str	r3, [r7, #52]	; 0x34
 800be88:	4603      	mov	r3, r0
 800be8a:	4619      	mov	r1, r3
 800be8c:	f04f 0200 	mov.w	r2, #0
 800be90:	f04f 0300 	mov.w	r3, #0
 800be94:	f04f 0400 	mov.w	r4, #0
 800be98:	0154      	lsls	r4, r2, #5
 800be9a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800be9e:	014b      	lsls	r3, r1, #5
 800bea0:	4603      	mov	r3, r0
 800bea2:	4619      	mov	r1, r3
 800bea4:	f04f 0200 	mov.w	r2, #0
 800bea8:	f04f 0300 	mov.w	r3, #0
 800beac:	f04f 0400 	mov.w	r4, #0
 800beb0:	0154      	lsls	r4, r2, #5
 800beb2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800beb6:	014b      	lsls	r3, r1, #5
 800beb8:	4603      	mov	r3, r0
 800beba:	009b      	lsls	r3, r3, #2
 800bebc:	3303      	adds	r3, #3
 800bebe:	3307      	adds	r3, #7
 800bec0:	08db      	lsrs	r3, r3, #3
 800bec2:	00db      	lsls	r3, r3, #3
 800bec4:	ebad 0d03 	sub.w	sp, sp, r3
 800bec8:	466b      	mov	r3, sp
 800beca:	3303      	adds	r3, #3
 800becc:	089b      	lsrs	r3, r3, #2
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	633b      	str	r3, [r7, #48]	; 0x30
 800bed2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800bed4:	1e43      	subs	r3, r0, #1
 800bed6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bed8:	4603      	mov	r3, r0
 800beda:	4619      	mov	r1, r3
 800bedc:	f04f 0200 	mov.w	r2, #0
 800bee0:	f04f 0300 	mov.w	r3, #0
 800bee4:	f04f 0400 	mov.w	r4, #0
 800bee8:	0154      	lsls	r4, r2, #5
 800beea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800beee:	014b      	lsls	r3, r1, #5
 800bef0:	4603      	mov	r3, r0
 800bef2:	4619      	mov	r1, r3
 800bef4:	f04f 0200 	mov.w	r2, #0
 800bef8:	f04f 0300 	mov.w	r3, #0
 800befc:	f04f 0400 	mov.w	r4, #0
 800bf00:	0154      	lsls	r4, r2, #5
 800bf02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bf06:	014b      	lsls	r3, r1, #5
 800bf08:	4603      	mov	r3, r0
 800bf0a:	009b      	lsls	r3, r3, #2
 800bf0c:	3303      	adds	r3, #3
 800bf0e:	3307      	adds	r3, #7
 800bf10:	08db      	lsrs	r3, r3, #3
 800bf12:	00db      	lsls	r3, r3, #3
 800bf14:	ebad 0d03 	sub.w	sp, sp, r3
 800bf18:	466b      	mov	r3, sp
 800bf1a:	3303      	adds	r3, #3
 800bf1c:	089b      	lsrs	r3, r3, #2
 800bf1e:	009b      	lsls	r3, r3, #2
 800bf20:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf22:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800bf24:	1e43      	subs	r3, r0, #1
 800bf26:	627b      	str	r3, [r7, #36]	; 0x24
 800bf28:	4603      	mov	r3, r0
 800bf2a:	4619      	mov	r1, r3
 800bf2c:	f04f 0200 	mov.w	r2, #0
 800bf30:	f04f 0300 	mov.w	r3, #0
 800bf34:	f04f 0400 	mov.w	r4, #0
 800bf38:	0154      	lsls	r4, r2, #5
 800bf3a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bf3e:	014b      	lsls	r3, r1, #5
 800bf40:	4603      	mov	r3, r0
 800bf42:	4619      	mov	r1, r3
 800bf44:	f04f 0200 	mov.w	r2, #0
 800bf48:	f04f 0300 	mov.w	r3, #0
 800bf4c:	f04f 0400 	mov.w	r4, #0
 800bf50:	0154      	lsls	r4, r2, #5
 800bf52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bf56:	014b      	lsls	r3, r1, #5
 800bf58:	4603      	mov	r3, r0
 800bf5a:	009b      	lsls	r3, r3, #2
 800bf5c:	3303      	adds	r3, #3
 800bf5e:	3307      	adds	r3, #7
 800bf60:	08db      	lsrs	r3, r3, #3
 800bf62:	00db      	lsls	r3, r3, #3
 800bf64:	ebad 0d03 	sub.w	sp, sp, r3
 800bf68:	466b      	mov	r3, sp
 800bf6a:	3303      	adds	r3, #3
 800bf6c:	089b      	lsrs	r3, r3, #2
 800bf6e:	009b      	lsls	r3, r3, #2
 800bf70:	623b      	str	r3, [r7, #32]
	float y[p];
 800bf72:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800bf74:	1e43      	subs	r3, r0, #1
 800bf76:	61fb      	str	r3, [r7, #28]
 800bf78:	4603      	mov	r3, r0
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	f04f 0200 	mov.w	r2, #0
 800bf80:	f04f 0300 	mov.w	r3, #0
 800bf84:	f04f 0400 	mov.w	r4, #0
 800bf88:	0154      	lsls	r4, r2, #5
 800bf8a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bf8e:	014b      	lsls	r3, r1, #5
 800bf90:	4603      	mov	r3, r0
 800bf92:	4619      	mov	r1, r3
 800bf94:	f04f 0200 	mov.w	r2, #0
 800bf98:	f04f 0300 	mov.w	r3, #0
 800bf9c:	f04f 0400 	mov.w	r4, #0
 800bfa0:	0154      	lsls	r4, r2, #5
 800bfa2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bfa6:	014b      	lsls	r3, r1, #5
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	009b      	lsls	r3, r3, #2
 800bfac:	3303      	adds	r3, #3
 800bfae:	3307      	adds	r3, #7
 800bfb0:	08db      	lsrs	r3, r3, #3
 800bfb2:	00db      	lsls	r3, r3, #3
 800bfb4:	ebad 0d03 	sub.w	sp, sp, r3
 800bfb8:	466b      	mov	r3, sp
 800bfba:	3303      	adds	r3, #3
 800bfbc:	089b      	lsrs	r3, r3, #2
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	61bb      	str	r3, [r7, #24]
	float norm;

	/*Copy signals*/
	/* Pad the smaller sequence with zero*/

	comp_signal_2[0] = (float)((comp_signal[0] - 0x7F))/0x7F;
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	781b      	ldrb	r3, [r3, #0]
 800bfc6:	3b7f      	subs	r3, #127	; 0x7f
 800bfc8:	ee07 3a90 	vmov	s15, r3
 800bfcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bfd0:	eddf 6ab3 	vldr	s13, [pc, #716]	; 800c2a0 <crosscorrelation+0x484>
 800bfd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bfd8:	6a3b      	ldr	r3, [r7, #32]
 800bfda:	edc3 7a00 	vstr	s15, [r3]
	ref_signal_2[0] = (float)((ref_signal[0] - 0x7F))/0x7F;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	3b7f      	subs	r3, #127	; 0x7f
 800bfe4:	ee07 3a90 	vmov	s15, r3
 800bfe8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bfec:	eddf 6aac 	vldr	s13, [pc, #688]	; 800c2a0 <crosscorrelation+0x484>
 800bff0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff6:	edc3 7a00 	vstr	s15, [r3]

	somme_ref=ref_signal_2[0]*ref_signal_2[0];
 800bffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffc:	ed93 7a00 	vldr	s14, [r3]
 800c000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c002:	edd3 7a00 	vldr	s15, [r3]
 800c006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c00a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	somme_comp=comp_signal_2[0]*comp_signal_2[0];
 800c00e:	6a3b      	ldr	r3, [r7, #32]
 800c010:	ed93 7a00 	vldr	s14, [r3]
 800c014:	6a3b      	ldr	r3, [r7, #32]
 800c016:	edd3 7a00 	vldr	s15, [r3]
 800c01a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c01e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	/* Reverse Signal Array to perform correlation x(n-l) */
	/* and remove offset for each signals */
	for(j=1;j<SAMPLES_NBR;j++){
 800c022:	2301      	movs	r3, #1
 800c024:	64bb      	str	r3, [r7, #72]	; 0x48
 800c026:	e050      	b.n	800c0ca <crosscorrelation+0x2ae>
		comp_signal_2[j] = (float)((comp_signal[j] - 0x7F))/0x7F;
 800c028:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c02a:	68ba      	ldr	r2, [r7, #8]
 800c02c:	4413      	add	r3, r2
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	3b7f      	subs	r3, #127	; 0x7f
 800c032:	ee07 3a90 	vmov	s15, r3
 800c036:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c03a:	eddf 6a99 	vldr	s13, [pc, #612]	; 800c2a0 <crosscorrelation+0x484>
 800c03e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c042:	6a3a      	ldr	r2, [r7, #32]
 800c044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	4413      	add	r3, r2
 800c04a:	edc3 7a00 	vstr	s15, [r3]
		somme_comp+=comp_signal_2[j]*comp_signal_2[j];
 800c04e:	6a3a      	ldr	r2, [r7, #32]
 800c050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c052:	009b      	lsls	r3, r3, #2
 800c054:	4413      	add	r3, r2
 800c056:	ed93 7a00 	vldr	s14, [r3]
 800c05a:	6a3a      	ldr	r2, [r7, #32]
 800c05c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	4413      	add	r3, r2
 800c062:	edd3 7a00 	vldr	s15, [r3]
 800c066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c06a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800c06e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c072:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		ref_signal_2[j] = (float)((ref_signal[j] - 0x7F))/0x7F;
 800c076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c078:	68fa      	ldr	r2, [r7, #12]
 800c07a:	4413      	add	r3, r2
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	3b7f      	subs	r3, #127	; 0x7f
 800c080:	ee07 3a90 	vmov	s15, r3
 800c084:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c088:	eddf 6a85 	vldr	s13, [pc, #532]	; 800c2a0 <crosscorrelation+0x484>
 800c08c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c094:	009b      	lsls	r3, r3, #2
 800c096:	4413      	add	r3, r2
 800c098:	edc3 7a00 	vstr	s15, [r3]
		somme_ref+=ref_signal_2[j]*ref_signal_2[j];
 800c09c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c09e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0a0:	009b      	lsls	r3, r3, #2
 800c0a2:	4413      	add	r3, r2
 800c0a4:	ed93 7a00 	vldr	s14, [r3]
 800c0a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0ac:	009b      	lsls	r3, r3, #2
 800c0ae:	4413      	add	r3, r2
 800c0b0:	edd3 7a00 	vldr	s15, [r3]
 800c0b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0b8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800c0bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0c0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	for(j=1;j<SAMPLES_NBR;j++){
 800c0c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0c6:	3301      	adds	r3, #1
 800c0c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0d0:	dbaa      	blt.n	800c028 <crosscorrelation+0x20c>
	}
	for(i= SAMPLES_NBR ;i<p;i++){
 800c0d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c0d6:	647b      	str	r3, [r7, #68]	; 0x44
 800c0d8:	e009      	b.n	800c0ee <crosscorrelation+0x2d2>
		comp_signal_2[i]=0;
 800c0da:	6a3a      	ldr	r2, [r7, #32]
 800c0dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	4413      	add	r3, r2
 800c0e2:	f04f 0200 	mov.w	r2, #0
 800c0e6:	601a      	str	r2, [r3, #0]
	for(i= SAMPLES_NBR ;i<p;i++){
 800c0e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0ea:	3301      	adds	r3, #1
 800c0ec:	647b      	str	r3, [r7, #68]	; 0x44
 800c0ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	dbf1      	blt.n	800c0da <crosscorrelation+0x2be>
	}
	for(i= SAMPLES_NBR;i<p;i++){
 800c0f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c0fa:	647b      	str	r3, [r7, #68]	; 0x44
 800c0fc:	e009      	b.n	800c112 <crosscorrelation+0x2f6>
		ref_signal_2[i]=0;
 800c0fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c102:	009b      	lsls	r3, r3, #2
 800c104:	4413      	add	r3, r2
 800c106:	f04f 0200 	mov.w	r2, #0
 800c10a:	601a      	str	r2, [r3, #0]
	for(i= SAMPLES_NBR;i<p;i++){
 800c10c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c10e:	3301      	adds	r3, #1
 800c110:	647b      	str	r3, [r7, #68]	; 0x44
 800c112:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c116:	429a      	cmp	r2, r3
 800c118:	dbf1      	blt.n	800c0fe <crosscorrelation+0x2e2>
	}

  /*folding h(n) to h(-n)*/
	y[0]=0;
 800c11a:	69bb      	ldr	r3, [r7, #24]
 800c11c:	f04f 0200 	mov.w	r2, #0
 800c120:	601a      	str	r2, [r3, #0]
	comp_f[0]=comp_signal_2[0];
 800c122:	6a3b      	ldr	r3, [r7, #32]
 800c124:	681a      	ldr	r2, [r3, #0]
 800c126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c128:	601a      	str	r2, [r3, #0]
	/* Reverse Signal Array to perform correlation x(n-l) */
	/* and remove offset for each signals */
	for(j=1;j<p;j++){ /*folding h(n) to h(-n)*/
 800c12a:	2301      	movs	r3, #1
 800c12c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c12e:	e00e      	b.n	800c14e <crosscorrelation+0x332>
		comp_f[j]=comp_signal_2[p-j];
 800c130:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c134:	1ad3      	subs	r3, r2, r3
 800c136:	6a3a      	ldr	r2, [r7, #32]
 800c138:	009b      	lsls	r3, r3, #2
 800c13a:	4413      	add	r3, r2
 800c13c:	681a      	ldr	r2, [r3, #0]
 800c13e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c142:	009b      	lsls	r3, r3, #2
 800c144:	440b      	add	r3, r1
 800c146:	601a      	str	r2, [r3, #0]
	for(j=1;j<p;j++){ /*folding h(n) to h(-n)*/
 800c148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c14a:	3301      	adds	r3, #1
 800c14c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c14e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c152:	429a      	cmp	r2, r3
 800c154:	dbec      	blt.n	800c130 <crosscorrelation+0x314>
	}

	/*Circular convolution*/
	for(i=0;i<p;i++){
 800c156:	2300      	movs	r3, #0
 800c158:	647b      	str	r3, [r7, #68]	; 0x44
 800c15a:	e018      	b.n	800c18e <crosscorrelation+0x372>
		y[0] += ref_signal_2[i] * comp_f[i];
 800c15c:	69bb      	ldr	r3, [r7, #24]
 800c15e:	ed93 7a00 	vldr	s14, [r3]
 800c162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c166:	009b      	lsls	r3, r3, #2
 800c168:	4413      	add	r3, r2
 800c16a:	edd3 6a00 	vldr	s13, [r3]
 800c16e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c172:	009b      	lsls	r3, r3, #2
 800c174:	4413      	add	r3, r2
 800c176:	edd3 7a00 	vldr	s15, [r3]
 800c17a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c17e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c182:	69bb      	ldr	r3, [r7, #24]
 800c184:	edc3 7a00 	vstr	s15, [r3]
	for(i=0;i<p;i++){
 800c188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c18a:	3301      	adds	r3, #1
 800c18c:	647b      	str	r3, [r7, #68]	; 0x44
 800c18e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c192:	429a      	cmp	r2, r3
 800c194:	dbe2      	blt.n	800c15c <crosscorrelation+0x340>
	}


	for(k=1;k<p;k++)
 800c196:	2301      	movs	r3, #1
 800c198:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c19a:	e056      	b.n	800c24a <crosscorrelation+0x42e>
	{
		y[k]=0;
 800c19c:	69ba      	ldr	r2, [r7, #24]
 800c19e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1a0:	009b      	lsls	r3, r3, #2
 800c1a2:	4413      	add	r3, r2
 800c1a4:	f04f 0200 	mov.w	r2, #0
 800c1a8:	601a      	str	r2, [r3, #0]

		/*circular shift*/
		for(j=1;j<p;j++){
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1ae:	e00d      	b.n	800c1cc <crosscorrelation+0x3b0>
			comp_f_2[j] = comp_f[j-1];
 800c1b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1b2:	3b01      	subs	r3, #1
 800c1b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1b6:	009b      	lsls	r3, r3, #2
 800c1b8:	4413      	add	r3, r2
 800c1ba:	681a      	ldr	r2, [r3, #0]
 800c1bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c1be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1c0:	009b      	lsls	r3, r3, #2
 800c1c2:	440b      	add	r3, r1
 800c1c4:	601a      	str	r2, [r3, #0]
		for(j=1;j<p;j++){
 800c1c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1c8:	3301      	adds	r3, #1
 800c1ca:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c1ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	dbed      	blt.n	800c1b0 <crosscorrelation+0x394>
		}

		comp_f_2[0] = comp_f[p-1];
 800c1d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1d6:	3b01      	subs	r3, #1
 800c1d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	4413      	add	r3, r2
 800c1de:	681a      	ldr	r2, [r3, #0]
 800c1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e2:	601a      	str	r2, [r3, #0]

		/*Circular convolution*/
		for(i=0;i<p;i++)
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	647b      	str	r3, [r7, #68]	; 0x44
 800c1e8:	e028      	b.n	800c23c <crosscorrelation+0x420>
		{
			comp_f[i] = comp_f_2[i];
 800c1ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	4413      	add	r3, r2
 800c1f2:	681a      	ldr	r2, [r3, #0]
 800c1f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c1f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1f8:	009b      	lsls	r3, r3, #2
 800c1fa:	440b      	add	r3, r1
 800c1fc:	601a      	str	r2, [r3, #0]
			y[k] += ref_signal_2[i] * comp_f_2[i];
 800c1fe:	69ba      	ldr	r2, [r7, #24]
 800c200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c202:	009b      	lsls	r3, r3, #2
 800c204:	4413      	add	r3, r2
 800c206:	ed93 7a00 	vldr	s14, [r3]
 800c20a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c20c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	4413      	add	r3, r2
 800c212:	edd3 6a00 	vldr	s13, [r3]
 800c216:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	4413      	add	r3, r2
 800c21e:	edd3 7a00 	vldr	s15, [r3]
 800c222:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c226:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c22a:	69ba      	ldr	r2, [r7, #24]
 800c22c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c22e:	009b      	lsls	r3, r3, #2
 800c230:	4413      	add	r3, r2
 800c232:	edc3 7a00 	vstr	s15, [r3]
		for(i=0;i<p;i++)
 800c236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c238:	3301      	adds	r3, #1
 800c23a:	647b      	str	r3, [r7, #68]	; 0x44
 800c23c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c23e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c240:	429a      	cmp	r2, r3
 800c242:	dbd2      	blt.n	800c1ea <crosscorrelation+0x3ce>
	for(k=1;k<p;k++)
 800c244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c246:	3301      	adds	r3, #1
 800c248:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c24a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c24c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c24e:	429a      	cmp	r2, r3
 800c250:	dba4      	blt.n	800c19c <crosscorrelation+0x380>

	}


		/* Normalize Correlation function */
		norm = (float) (sqrt(somme_ref) * sqrt(somme_comp));
 800c252:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c254:	f7f4 f93c 	bl	80004d0 <__aeabi_f2d>
 800c258:	4603      	mov	r3, r0
 800c25a:	460c      	mov	r4, r1
 800c25c:	ec44 3b10 	vmov	d0, r3, r4
 800c260:	f000 febc 	bl	800cfdc <sqrt>
 800c264:	ec59 8b10 	vmov	r8, r9, d0
 800c268:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c26a:	f7f4 f931 	bl	80004d0 <__aeabi_f2d>
 800c26e:	4603      	mov	r3, r0
 800c270:	460c      	mov	r4, r1
 800c272:	ec44 3b10 	vmov	d0, r3, r4
 800c276:	f000 feb1 	bl	800cfdc <sqrt>
 800c27a:	ec54 3b10 	vmov	r3, r4, d0
 800c27e:	461a      	mov	r2, r3
 800c280:	4623      	mov	r3, r4
 800c282:	4640      	mov	r0, r8
 800c284:	4649      	mov	r1, r9
 800c286:	f7f4 f97b 	bl	8000580 <__aeabi_dmul>
 800c28a:	4603      	mov	r3, r0
 800c28c:	460c      	mov	r4, r1
 800c28e:	4618      	mov	r0, r3
 800c290:	4621      	mov	r1, r4
 800c292:	f7f4 fc45 	bl	8000b20 <__aeabi_d2f>
 800c296:	4603      	mov	r3, r0
 800c298:	617b      	str	r3, [r7, #20]
		for(k = 0 ; k < p ; k++)
 800c29a:	2300      	movs	r3, #0
 800c29c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c29e:	e04c      	b.n	800c33a <crosscorrelation+0x51e>
 800c2a0:	42fe0000 	.word	0x42fe0000
		{
			y[k] = 0x7F * (y[k]/ norm) + 0x7F;
 800c2a4:	69ba      	ldr	r2, [r7, #24]
 800c2a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2a8:	009b      	lsls	r3, r3, #2
 800c2aa:	4413      	add	r3, r2
 800c2ac:	edd3 6a00 	vldr	s13, [r3]
 800c2b0:	ed97 7a05 	vldr	s14, [r7, #20]
 800c2b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2b8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800c2a0 <crosscorrelation+0x484>
 800c2bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c2c0:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 800c2a0 <crosscorrelation+0x484>
 800c2c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c2c8:	69ba      	ldr	r2, [r7, #24]
 800c2ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2cc:	009b      	lsls	r3, r3, #2
 800c2ce:	4413      	add	r3, r2
 800c2d0:	edc3 7a00 	vstr	s15, [r3]
			corr_func[k] = (uint8_t) ( y[k] );
 800c2d4:	69ba      	ldr	r2, [r7, #24]
 800c2d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	4413      	add	r3, r2
 800c2dc:	edd3 7a00 	vldr	s15, [r3]
 800c2e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2e4:	edc7 7a01 	vstr	s15, [r7, #4]
 800c2e8:	793b      	ldrb	r3, [r7, #4]
 800c2ea:	b2d9      	uxtb	r1, r3
 800c2ec:	4a28      	ldr	r2, [pc, #160]	; (800c390 <crosscorrelation+0x574>)
 800c2ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2f0:	4413      	add	r3, r2
 800c2f2:	460a      	mov	r2, r1
 800c2f4:	701a      	strb	r2, [r3, #0]
			corr_func[k] = 0xFF * corr_func[k];
 800c2f6:	4a26      	ldr	r2, [pc, #152]	; (800c390 <crosscorrelation+0x574>)
 800c2f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2fa:	4413      	add	r3, r2
 800c2fc:	781b      	ldrb	r3, [r3, #0]
 800c2fe:	425b      	negs	r3, r3
 800c300:	b2d9      	uxtb	r1, r3
 800c302:	4a23      	ldr	r2, [pc, #140]	; (800c390 <crosscorrelation+0x574>)
 800c304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c306:	4413      	add	r3, r2
 800c308:	460a      	mov	r2, r1
 800c30a:	701a      	strb	r2, [r3, #0]
			if(y[k] > 1)
 800c30c:	69ba      	ldr	r2, [r7, #24]
 800c30e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c310:	009b      	lsls	r3, r3, #2
 800c312:	4413      	add	r3, r2
 800c314:	edd3 7a00 	vldr	s15, [r3]
 800c318:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c31c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c324:	dd06      	ble.n	800c334 <crosscorrelation+0x518>
			{
				y[k] = 1;
 800c326:	69ba      	ldr	r2, [r7, #24]
 800c328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c32a:	009b      	lsls	r3, r3, #2
 800c32c:	4413      	add	r3, r2
 800c32e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c332:	601a      	str	r2, [r3, #0]
		for(k = 0 ; k < p ; k++)
 800c334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c336:	3301      	adds	r3, #1
 800c338:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c33a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c33c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c33e:	429a      	cmp	r2, r3
 800c340:	dbb0      	blt.n	800c2a4 <crosscorrelation+0x488>
			}
		}

		corr_max = corr_func[0];
 800c342:	4b13      	ldr	r3, [pc, #76]	; (800c390 <crosscorrelation+0x574>)
 800c344:	781a      	ldrb	r2, [r3, #0]
 800c346:	4b13      	ldr	r3, [pc, #76]	; (800c394 <crosscorrelation+0x578>)
 800c348:	701a      	strb	r2, [r3, #0]

		//l=0;

		for(k=1;k<p;k++)
 800c34a:	2301      	movs	r3, #1
 800c34c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c34e:	e014      	b.n	800c37a <crosscorrelation+0x55e>
		{
			if(corr_func[k] > corr_max)
 800c350:	4a0f      	ldr	r2, [pc, #60]	; (800c390 <crosscorrelation+0x574>)
 800c352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c354:	4413      	add	r3, r2
 800c356:	781a      	ldrb	r2, [r3, #0]
 800c358:	4b0e      	ldr	r3, [pc, #56]	; (800c394 <crosscorrelation+0x578>)
 800c35a:	781b      	ldrb	r3, [r3, #0]
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d909      	bls.n	800c374 <crosscorrelation+0x558>
			{
				corr_max = corr_func[k];
 800c360:	4a0b      	ldr	r2, [pc, #44]	; (800c390 <crosscorrelation+0x574>)
 800c362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c364:	4413      	add	r3, r2
 800c366:	781a      	ldrb	r2, [r3, #0]
 800c368:	4b0a      	ldr	r3, [pc, #40]	; (800c394 <crosscorrelation+0x578>)
 800c36a:	701a      	strb	r2, [r3, #0]
				sample_corr_max = k;
 800c36c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c36e:	b29a      	uxth	r2, r3
 800c370:	4b09      	ldr	r3, [pc, #36]	; (800c398 <crosscorrelation+0x57c>)
 800c372:	801a      	strh	r2, [r3, #0]
		for(k=1;k<p;k++)
 800c374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c376:	3301      	adds	r3, #1
 800c378:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c37a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c37c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c37e:	429a      	cmp	r2, r3
 800c380:	dbe6      	blt.n	800c350 <crosscorrelation+0x534>
 800c382:	46ad      	mov	sp, r5
				//l=k;
			}

		}

}
 800c384:	bf00      	nop
 800c386:	3758      	adds	r7, #88	; 0x58
 800c388:	46bd      	mov	sp, r7
 800c38a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c38e:	bf00      	nop
 800c390:	20000840 	.word	0x20000840
 800c394:	2000083c 	.word	0x2000083c
 800c398:	2000083e 	.word	0x2000083e

0800c39c <can_display>:

uint8_t can_display()
{
 800c39c:	b480      	push	{r7}
 800c39e:	af00      	add	r7, sp, #0
	return display_ready;
 800c3a0:	4b03      	ldr	r3, [pc, #12]	; (800c3b0 <can_display+0x14>)
 800c3a2:	781b      	ldrb	r3, [r3, #0]
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ac:	4770      	bx	lr
 800c3ae:	bf00      	nop
 800c3b0:	20000353 	.word	0x20000353

0800c3b4 <disable_signal_display>:

void disable_signal_display()
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	af00      	add	r7, sp, #0
	display_ready = 0;
 800c3b8:	4b03      	ldr	r3, [pc, #12]	; (800c3c8 <disable_signal_display+0x14>)
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	701a      	strb	r2, [r3, #0]
}
 800c3be:	bf00      	nop
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr
 800c3c8:	20000353 	.word	0x20000353
 800c3cc:	00000000 	.word	0x00000000

0800c3d0 <get_threshold>:

uint8_t get_threshold()
{
 800c3d0:	b598      	push	{r3, r4, r7, lr}
 800c3d2:	af00      	add	r7, sp, #0
	return THRESHOLD_RATIO * ref_threshold;
 800c3d4:	4b0c      	ldr	r3, [pc, #48]	; (800c408 <get_threshold+0x38>)
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f7f4 f867 	bl	80004ac <__aeabi_i2d>
 800c3de:	a308      	add	r3, pc, #32	; (adr r3, 800c400 <get_threshold+0x30>)
 800c3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e4:	f7f4 f8cc 	bl	8000580 <__aeabi_dmul>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	460c      	mov	r4, r1
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	4621      	mov	r1, r4
 800c3f0:	f7f4 fb76 	bl	8000ae0 <__aeabi_d2uiz>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	b2db      	uxtb	r3, r3
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	bd98      	pop	{r3, r4, r7, pc}
 800c3fc:	f3af 8000 	nop.w
 800c400:	66666666 	.word	0x66666666
 800c404:	3fee6666 	.word	0x3fee6666
 800c408:	20000351 	.word	0x20000351

0800c40c <is_signal_here>:

uint8_t is_signal_here()
{
 800c40c:	b480      	push	{r7}
 800c40e:	af00      	add	r7, sp, #0
	return signal_detected;
 800c410:	4b03      	ldr	r3, [pc, #12]	; (800c420 <is_signal_here+0x14>)
 800c412:	781b      	ldrb	r3, [r3, #0]
}
 800c414:	4618      	mov	r0, r3
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr
 800c41e:	bf00      	nop
 800c420:	20000352 	.word	0x20000352

0800c424 <get_signal_data>:

uint8_t* get_signal_data(SIGNAL_ID id)
{
 800c424:	b480      	push	{r7}
 800c426:	b085      	sub	sp, #20
 800c428:	af00      	add	r7, sp, #0
 800c42a:	4603      	mov	r3, r0
 800c42c:	71fb      	strb	r3, [r7, #7]
	uint8_t* ret = 0;
 800c42e:	2300      	movs	r3, #0
 800c430:	60fb      	str	r3, [r7, #12]

	switch(id)
 800c432:	79fb      	ldrb	r3, [r7, #7]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d002      	beq.n	800c43e <get_signal_data+0x1a>
 800c438:	2b01      	cmp	r3, #1
 800c43a:	d003      	beq.n	800c444 <get_signal_data+0x20>
 800c43c:	e005      	b.n	800c44a <get_signal_data+0x26>
	{
	case INPUT:
		ret = raw_signal;
 800c43e:	4b0a      	ldr	r3, [pc, #40]	; (800c468 <get_signal_data+0x44>)
 800c440:	60fb      	str	r3, [r7, #12]
		break;
 800c442:	e009      	b.n	800c458 <get_signal_data+0x34>
	case REF:
		ret = ref_signal;
 800c444:	4b09      	ldr	r3, [pc, #36]	; (800c46c <get_signal_data+0x48>)
 800c446:	60fb      	str	r3, [r7, #12]
		break;
 800c448:	e006      	b.n	800c458 <get_signal_data+0x34>
	default:
		ret = (corr_func + (sample_corr_max - 200));
 800c44a:	4b09      	ldr	r3, [pc, #36]	; (800c470 <get_signal_data+0x4c>)
 800c44c:	881b      	ldrh	r3, [r3, #0]
 800c44e:	3bc8      	subs	r3, #200	; 0xc8
 800c450:	4a08      	ldr	r2, [pc, #32]	; (800c474 <get_signal_data+0x50>)
 800c452:	4413      	add	r3, r2
 800c454:	60fb      	str	r3, [r7, #12]
		break;
 800c456:	bf00      	nop
	}

	return ret;
 800c458:	68fb      	ldr	r3, [r7, #12]
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3714      	adds	r7, #20
 800c45e:	46bd      	mov	sp, r7
 800c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c464:	4770      	bx	lr
 800c466:	bf00      	nop
 800c468:	20004044 	.word	0x20004044
 800c46c:	20003844 	.word	0x20003844
 800c470:	2000083e 	.word	0x2000083e
 800c474:	20000840 	.word	0x20000840

0800c478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c478:	b480      	push	{r7}
 800c47a:	b083      	sub	sp, #12
 800c47c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800c47e:	4b0f      	ldr	r3, [pc, #60]	; (800c4bc <HAL_MspInit+0x44>)
 800c480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c482:	4a0e      	ldr	r2, [pc, #56]	; (800c4bc <HAL_MspInit+0x44>)
 800c484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c488:	6413      	str	r3, [r2, #64]	; 0x40
 800c48a:	4b0c      	ldr	r3, [pc, #48]	; (800c4bc <HAL_MspInit+0x44>)
 800c48c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c48e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c492:	607b      	str	r3, [r7, #4]
 800c494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c496:	4b09      	ldr	r3, [pc, #36]	; (800c4bc <HAL_MspInit+0x44>)
 800c498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c49a:	4a08      	ldr	r2, [pc, #32]	; (800c4bc <HAL_MspInit+0x44>)
 800c49c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c4a0:	6453      	str	r3, [r2, #68]	; 0x44
 800c4a2:	4b06      	ldr	r3, [pc, #24]	; (800c4bc <HAL_MspInit+0x44>)
 800c4a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4aa:	603b      	str	r3, [r7, #0]
 800c4ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c4ae:	bf00      	nop
 800c4b0:	370c      	adds	r7, #12
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b8:	4770      	bx	lr
 800c4ba:	bf00      	nop
 800c4bc:	40023800 	.word	0x40023800

0800c4c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b08a      	sub	sp, #40	; 0x28
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c4c8:	f107 0314 	add.w	r3, r7, #20
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	601a      	str	r2, [r3, #0]
 800c4d0:	605a      	str	r2, [r3, #4]
 800c4d2:	609a      	str	r2, [r3, #8]
 800c4d4:	60da      	str	r2, [r3, #12]
 800c4d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4a31      	ldr	r2, [pc, #196]	; (800c5a4 <HAL_ADC_MspInit+0xe4>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d15c      	bne.n	800c59c <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800c4e2:	4b31      	ldr	r3, [pc, #196]	; (800c5a8 <HAL_ADC_MspInit+0xe8>)
 800c4e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4e6:	4a30      	ldr	r2, [pc, #192]	; (800c5a8 <HAL_ADC_MspInit+0xe8>)
 800c4e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c4ec:	6453      	str	r3, [r2, #68]	; 0x44
 800c4ee:	4b2e      	ldr	r3, [pc, #184]	; (800c5a8 <HAL_ADC_MspInit+0xe8>)
 800c4f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4f6:	613b      	str	r3, [r7, #16]
 800c4f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c4fa:	4b2b      	ldr	r3, [pc, #172]	; (800c5a8 <HAL_ADC_MspInit+0xe8>)
 800c4fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4fe:	4a2a      	ldr	r2, [pc, #168]	; (800c5a8 <HAL_ADC_MspInit+0xe8>)
 800c500:	f043 0301 	orr.w	r3, r3, #1
 800c504:	6313      	str	r3, [r2, #48]	; 0x30
 800c506:	4b28      	ldr	r3, [pc, #160]	; (800c5a8 <HAL_ADC_MspInit+0xe8>)
 800c508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c50a:	f003 0301 	and.w	r3, r3, #1
 800c50e:	60fb      	str	r3, [r7, #12]
 800c510:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0/WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800c512:	2301      	movs	r3, #1
 800c514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c516:	2303      	movs	r3, #3
 800c518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c51a:	2300      	movs	r3, #0
 800c51c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c51e:	f107 0314 	add.w	r3, r7, #20
 800c522:	4619      	mov	r1, r3
 800c524:	4821      	ldr	r0, [pc, #132]	; (800c5ac <HAL_ADC_MspInit+0xec>)
 800c526:	f7f8 fd53 	bl	8004fd0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 800c52a:	4b21      	ldr	r3, [pc, #132]	; (800c5b0 <HAL_ADC_MspInit+0xf0>)
 800c52c:	4a21      	ldr	r2, [pc, #132]	; (800c5b4 <HAL_ADC_MspInit+0xf4>)
 800c52e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800c530:	4b1f      	ldr	r3, [pc, #124]	; (800c5b0 <HAL_ADC_MspInit+0xf0>)
 800c532:	2200      	movs	r2, #0
 800c534:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c536:	4b1e      	ldr	r3, [pc, #120]	; (800c5b0 <HAL_ADC_MspInit+0xf0>)
 800c538:	2200      	movs	r2, #0
 800c53a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800c53c:	4b1c      	ldr	r3, [pc, #112]	; (800c5b0 <HAL_ADC_MspInit+0xf0>)
 800c53e:	2200      	movs	r2, #0
 800c540:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800c542:	4b1b      	ldr	r3, [pc, #108]	; (800c5b0 <HAL_ADC_MspInit+0xf0>)
 800c544:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c548:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c54a:	4b19      	ldr	r3, [pc, #100]	; (800c5b0 <HAL_ADC_MspInit+0xf0>)
 800c54c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c550:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c552:	4b17      	ldr	r3, [pc, #92]	; (800c5b0 <HAL_ADC_MspInit+0xf0>)
 800c554:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c558:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800c55a:	4b15      	ldr	r3, [pc, #84]	; (800c5b0 <HAL_ADC_MspInit+0xf0>)
 800c55c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c560:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800c562:	4b13      	ldr	r3, [pc, #76]	; (800c5b0 <HAL_ADC_MspInit+0xf0>)
 800c564:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c568:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c56a:	4b11      	ldr	r3, [pc, #68]	; (800c5b0 <HAL_ADC_MspInit+0xf0>)
 800c56c:	2200      	movs	r2, #0
 800c56e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800c570:	480f      	ldr	r0, [pc, #60]	; (800c5b0 <HAL_ADC_MspInit+0xf0>)
 800c572:	f7f7 fdbd 	bl	80040f0 <HAL_DMA_Init>
 800c576:	4603      	mov	r3, r0
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d001      	beq.n	800c580 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 800c57c:	f7ff fb84 	bl	800bc88 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	4a0b      	ldr	r2, [pc, #44]	; (800c5b0 <HAL_ADC_MspInit+0xf0>)
 800c584:	639a      	str	r2, [r3, #56]	; 0x38
 800c586:	4a0a      	ldr	r2, [pc, #40]	; (800c5b0 <HAL_ADC_MspInit+0xf0>)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800c58c:	2200      	movs	r2, #0
 800c58e:	2100      	movs	r1, #0
 800c590:	2012      	movs	r0, #18
 800c592:	f7f7 fd04 	bl	8003f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800c596:	2012      	movs	r0, #18
 800c598:	f7f7 fd1d 	bl	8003fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800c59c:	bf00      	nop
 800c59e:	3728      	adds	r7, #40	; 0x28
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}
 800c5a4:	40012000 	.word	0x40012000
 800c5a8:	40023800 	.word	0x40023800
 800c5ac:	40020000 	.word	0x40020000
 800c5b0:	200006bc 	.word	0x200006bc
 800c5b4:	40026470 	.word	0x40026470

0800c5b8 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b08e      	sub	sp, #56	; 0x38
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c5c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	601a      	str	r2, [r3, #0]
 800c5c8:	605a      	str	r2, [r3, #4]
 800c5ca:	609a      	str	r2, [r3, #8]
 800c5cc:	60da      	str	r2, [r3, #12]
 800c5ce:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4a50      	ldr	r2, [pc, #320]	; (800c718 <HAL_DCMI_MspInit+0x160>)
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	f040 809a 	bne.w	800c710 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800c5dc:	4b4f      	ldr	r3, [pc, #316]	; (800c71c <HAL_DCMI_MspInit+0x164>)
 800c5de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5e0:	4a4e      	ldr	r2, [pc, #312]	; (800c71c <HAL_DCMI_MspInit+0x164>)
 800c5e2:	f043 0301 	orr.w	r3, r3, #1
 800c5e6:	6353      	str	r3, [r2, #52]	; 0x34
 800c5e8:	4b4c      	ldr	r3, [pc, #304]	; (800c71c <HAL_DCMI_MspInit+0x164>)
 800c5ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5ec:	f003 0301 	and.w	r3, r3, #1
 800c5f0:	623b      	str	r3, [r7, #32]
 800c5f2:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800c5f4:	4b49      	ldr	r3, [pc, #292]	; (800c71c <HAL_DCMI_MspInit+0x164>)
 800c5f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5f8:	4a48      	ldr	r2, [pc, #288]	; (800c71c <HAL_DCMI_MspInit+0x164>)
 800c5fa:	f043 0310 	orr.w	r3, r3, #16
 800c5fe:	6313      	str	r3, [r2, #48]	; 0x30
 800c600:	4b46      	ldr	r3, [pc, #280]	; (800c71c <HAL_DCMI_MspInit+0x164>)
 800c602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c604:	f003 0310 	and.w	r3, r3, #16
 800c608:	61fb      	str	r3, [r7, #28]
 800c60a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c60c:	4b43      	ldr	r3, [pc, #268]	; (800c71c <HAL_DCMI_MspInit+0x164>)
 800c60e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c610:	4a42      	ldr	r2, [pc, #264]	; (800c71c <HAL_DCMI_MspInit+0x164>)
 800c612:	f043 0308 	orr.w	r3, r3, #8
 800c616:	6313      	str	r3, [r2, #48]	; 0x30
 800c618:	4b40      	ldr	r3, [pc, #256]	; (800c71c <HAL_DCMI_MspInit+0x164>)
 800c61a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c61c:	f003 0308 	and.w	r3, r3, #8
 800c620:	61bb      	str	r3, [r7, #24]
 800c622:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c624:	4b3d      	ldr	r3, [pc, #244]	; (800c71c <HAL_DCMI_MspInit+0x164>)
 800c626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c628:	4a3c      	ldr	r2, [pc, #240]	; (800c71c <HAL_DCMI_MspInit+0x164>)
 800c62a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c62e:	6313      	str	r3, [r2, #48]	; 0x30
 800c630:	4b3a      	ldr	r3, [pc, #232]	; (800c71c <HAL_DCMI_MspInit+0x164>)
 800c632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c638:	617b      	str	r3, [r7, #20]
 800c63a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800c63c:	4b37      	ldr	r3, [pc, #220]	; (800c71c <HAL_DCMI_MspInit+0x164>)
 800c63e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c640:	4a36      	ldr	r2, [pc, #216]	; (800c71c <HAL_DCMI_MspInit+0x164>)
 800c642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c646:	6313      	str	r3, [r2, #48]	; 0x30
 800c648:	4b34      	ldr	r3, [pc, #208]	; (800c71c <HAL_DCMI_MspInit+0x164>)
 800c64a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c64c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c650:	613b      	str	r3, [r7, #16]
 800c652:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c654:	4b31      	ldr	r3, [pc, #196]	; (800c71c <HAL_DCMI_MspInit+0x164>)
 800c656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c658:	4a30      	ldr	r2, [pc, #192]	; (800c71c <HAL_DCMI_MspInit+0x164>)
 800c65a:	f043 0301 	orr.w	r3, r3, #1
 800c65e:	6313      	str	r3, [r2, #48]	; 0x30
 800c660:	4b2e      	ldr	r3, [pc, #184]	; (800c71c <HAL_DCMI_MspInit+0x164>)
 800c662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c664:	f003 0301 	and.w	r3, r3, #1
 800c668:	60fb      	str	r3, [r7, #12]
 800c66a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800c66c:	2360      	movs	r3, #96	; 0x60
 800c66e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c670:	2302      	movs	r3, #2
 800c672:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c674:	2300      	movs	r3, #0
 800c676:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c678:	2300      	movs	r3, #0
 800c67a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800c67c:	230d      	movs	r3, #13
 800c67e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800c680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c684:	4619      	mov	r1, r3
 800c686:	4826      	ldr	r0, [pc, #152]	; (800c720 <HAL_DCMI_MspInit+0x168>)
 800c688:	f7f8 fca2 	bl	8004fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800c68c:	2308      	movs	r3, #8
 800c68e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c690:	2302      	movs	r3, #2
 800c692:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c694:	2300      	movs	r3, #0
 800c696:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c698:	2300      	movs	r3, #0
 800c69a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800c69c:	230d      	movs	r3, #13
 800c69e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800c6a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6a4:	4619      	mov	r1, r3
 800c6a6:	481f      	ldr	r0, [pc, #124]	; (800c724 <HAL_DCMI_MspInit+0x16c>)
 800c6a8:	f7f8 fc92 	bl	8004fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800c6ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6b2:	2302      	movs	r3, #2
 800c6b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800c6be:	230d      	movs	r3, #13
 800c6c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800c6c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	4817      	ldr	r0, [pc, #92]	; (800c728 <HAL_DCMI_MspInit+0x170>)
 800c6ca:	f7f8 fc81 	bl	8004fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 800c6ce:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800c6d2:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6d4:	2302      	movs	r3, #2
 800c6d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800c6e0:	230d      	movs	r3, #13
 800c6e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800c6e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	4810      	ldr	r0, [pc, #64]	; (800c72c <HAL_DCMI_MspInit+0x174>)
 800c6ec:	f7f8 fc70 	bl	8004fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800c6f0:	2350      	movs	r3, #80	; 0x50
 800c6f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6f4:	2302      	movs	r3, #2
 800c6f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800c700:	230d      	movs	r3, #13
 800c702:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c708:	4619      	mov	r1, r3
 800c70a:	4809      	ldr	r0, [pc, #36]	; (800c730 <HAL_DCMI_MspInit+0x178>)
 800c70c:	f7f8 fc60 	bl	8004fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800c710:	bf00      	nop
 800c712:	3738      	adds	r7, #56	; 0x38
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}
 800c718:	50050000 	.word	0x50050000
 800c71c:	40023800 	.word	0x40023800
 800c720:	40021000 	.word	0x40021000
 800c724:	40020c00 	.word	0x40020c00
 800c728:	40021800 	.word	0x40021800
 800c72c:	40021c00 	.word	0x40021c00
 800c730:	40020000 	.word	0x40020000

0800c734 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b084      	sub	sp, #16
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4a0d      	ldr	r2, [pc, #52]	; (800c778 <HAL_DMA2D_MspInit+0x44>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d113      	bne.n	800c76e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800c746:	4b0d      	ldr	r3, [pc, #52]	; (800c77c <HAL_DMA2D_MspInit+0x48>)
 800c748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c74a:	4a0c      	ldr	r2, [pc, #48]	; (800c77c <HAL_DMA2D_MspInit+0x48>)
 800c74c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c750:	6313      	str	r3, [r2, #48]	; 0x30
 800c752:	4b0a      	ldr	r3, [pc, #40]	; (800c77c <HAL_DMA2D_MspInit+0x48>)
 800c754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c756:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c75a:	60fb      	str	r3, [r7, #12]
 800c75c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800c75e:	2200      	movs	r2, #0
 800c760:	2100      	movs	r1, #0
 800c762:	205a      	movs	r0, #90	; 0x5a
 800c764:	f7f7 fc1b 	bl	8003f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800c768:	205a      	movs	r0, #90	; 0x5a
 800c76a:	f7f7 fc34 	bl	8003fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800c76e:	bf00      	nop
 800c770:	3710      	adds	r7, #16
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}
 800c776:	bf00      	nop
 800c778:	4002b000 	.word	0x4002b000
 800c77c:	40023800 	.word	0x40023800

0800c780 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b08e      	sub	sp, #56	; 0x38
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c78c:	2200      	movs	r2, #0
 800c78e:	601a      	str	r2, [r3, #0]
 800c790:	605a      	str	r2, [r3, #4]
 800c792:	609a      	str	r2, [r3, #8]
 800c794:	60da      	str	r2, [r3, #12]
 800c796:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4a55      	ldr	r2, [pc, #340]	; (800c8f4 <HAL_LTDC_MspInit+0x174>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	f040 80a3 	bne.w	800c8ea <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800c7a4:	4b54      	ldr	r3, [pc, #336]	; (800c8f8 <HAL_LTDC_MspInit+0x178>)
 800c7a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7a8:	4a53      	ldr	r2, [pc, #332]	; (800c8f8 <HAL_LTDC_MspInit+0x178>)
 800c7aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c7ae:	6453      	str	r3, [r2, #68]	; 0x44
 800c7b0:	4b51      	ldr	r3, [pc, #324]	; (800c8f8 <HAL_LTDC_MspInit+0x178>)
 800c7b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c7b8:	623b      	str	r3, [r7, #32]
 800c7ba:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800c7bc:	4b4e      	ldr	r3, [pc, #312]	; (800c8f8 <HAL_LTDC_MspInit+0x178>)
 800c7be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7c0:	4a4d      	ldr	r2, [pc, #308]	; (800c8f8 <HAL_LTDC_MspInit+0x178>)
 800c7c2:	f043 0310 	orr.w	r3, r3, #16
 800c7c6:	6313      	str	r3, [r2, #48]	; 0x30
 800c7c8:	4b4b      	ldr	r3, [pc, #300]	; (800c8f8 <HAL_LTDC_MspInit+0x178>)
 800c7ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7cc:	f003 0310 	and.w	r3, r3, #16
 800c7d0:	61fb      	str	r3, [r7, #28]
 800c7d2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c7d4:	4b48      	ldr	r3, [pc, #288]	; (800c8f8 <HAL_LTDC_MspInit+0x178>)
 800c7d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7d8:	4a47      	ldr	r2, [pc, #284]	; (800c8f8 <HAL_LTDC_MspInit+0x178>)
 800c7da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c7de:	6313      	str	r3, [r2, #48]	; 0x30
 800c7e0:	4b45      	ldr	r3, [pc, #276]	; (800c8f8 <HAL_LTDC_MspInit+0x178>)
 800c7e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c7e8:	61bb      	str	r3, [r7, #24]
 800c7ea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800c7ec:	4b42      	ldr	r3, [pc, #264]	; (800c8f8 <HAL_LTDC_MspInit+0x178>)
 800c7ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7f0:	4a41      	ldr	r2, [pc, #260]	; (800c8f8 <HAL_LTDC_MspInit+0x178>)
 800c7f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c7f6:	6313      	str	r3, [r2, #48]	; 0x30
 800c7f8:	4b3f      	ldr	r3, [pc, #252]	; (800c8f8 <HAL_LTDC_MspInit+0x178>)
 800c7fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c800:	617b      	str	r3, [r7, #20]
 800c802:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c804:	4b3c      	ldr	r3, [pc, #240]	; (800c8f8 <HAL_LTDC_MspInit+0x178>)
 800c806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c808:	4a3b      	ldr	r2, [pc, #236]	; (800c8f8 <HAL_LTDC_MspInit+0x178>)
 800c80a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c80e:	6313      	str	r3, [r2, #48]	; 0x30
 800c810:	4b39      	ldr	r3, [pc, #228]	; (800c8f8 <HAL_LTDC_MspInit+0x178>)
 800c812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c818:	613b      	str	r3, [r7, #16]
 800c81a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800c81c:	4b36      	ldr	r3, [pc, #216]	; (800c8f8 <HAL_LTDC_MspInit+0x178>)
 800c81e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c820:	4a35      	ldr	r2, [pc, #212]	; (800c8f8 <HAL_LTDC_MspInit+0x178>)
 800c822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c826:	6313      	str	r3, [r2, #48]	; 0x30
 800c828:	4b33      	ldr	r3, [pc, #204]	; (800c8f8 <HAL_LTDC_MspInit+0x178>)
 800c82a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c82c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c830:	60fb      	str	r3, [r7, #12]
 800c832:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800c834:	2310      	movs	r3, #16
 800c836:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c838:	2302      	movs	r3, #2
 800c83a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c83c:	2300      	movs	r3, #0
 800c83e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c840:	2300      	movs	r3, #0
 800c842:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c844:	230e      	movs	r3, #14
 800c846:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800c848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c84c:	4619      	mov	r1, r3
 800c84e:	482b      	ldr	r0, [pc, #172]	; (800c8fc <HAL_LTDC_MspInit+0x17c>)
 800c850:	f7f8 fbbe 	bl	8004fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800c854:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800c858:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c85a:	2302      	movs	r3, #2
 800c85c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c85e:	2300      	movs	r3, #0
 800c860:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c862:	2300      	movs	r3, #0
 800c864:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c866:	230e      	movs	r3, #14
 800c868:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800c86a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c86e:	4619      	mov	r1, r3
 800c870:	4823      	ldr	r0, [pc, #140]	; (800c900 <HAL_LTDC_MspInit+0x180>)
 800c872:	f7f8 fbad 	bl	8004fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 800c876:	23f7      	movs	r3, #247	; 0xf7
 800c878:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c87a:	2302      	movs	r3, #2
 800c87c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c87e:	2300      	movs	r3, #0
 800c880:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c882:	2300      	movs	r3, #0
 800c884:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c886:	230e      	movs	r3, #14
 800c888:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800c88a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c88e:	4619      	mov	r1, r3
 800c890:	481c      	ldr	r0, [pc, #112]	; (800c904 <HAL_LTDC_MspInit+0x184>)
 800c892:	f7f8 fb9d 	bl	8004fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800c896:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c89a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c89c:	2302      	movs	r3, #2
 800c89e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800c8a8:	2309      	movs	r3, #9
 800c8aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800c8ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	4815      	ldr	r0, [pc, #84]	; (800c908 <HAL_LTDC_MspInit+0x188>)
 800c8b4:	f7f8 fb8c 	bl	8004fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800c8b8:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800c8bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c8be:	2302      	movs	r3, #2
 800c8c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c8ca:	230e      	movs	r3, #14
 800c8cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800c8ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8d2:	4619      	mov	r1, r3
 800c8d4:	480d      	ldr	r0, [pc, #52]	; (800c90c <HAL_LTDC_MspInit+0x18c>)
 800c8d6:	f7f8 fb7b 	bl	8004fd0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800c8da:	2200      	movs	r2, #0
 800c8dc:	2100      	movs	r1, #0
 800c8de:	2058      	movs	r0, #88	; 0x58
 800c8e0:	f7f7 fb5d 	bl	8003f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800c8e4:	2058      	movs	r0, #88	; 0x58
 800c8e6:	f7f7 fb76 	bl	8003fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800c8ea:	bf00      	nop
 800c8ec:	3738      	adds	r7, #56	; 0x38
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}
 800c8f2:	bf00      	nop
 800c8f4:	40016800 	.word	0x40016800
 800c8f8:	40023800 	.word	0x40023800
 800c8fc:	40021000 	.word	0x40021000
 800c900:	40022400 	.word	0x40022400
 800c904:	40022800 	.word	0x40022800
 800c908:	40021800 	.word	0x40021800
 800c90c:	40022000 	.word	0x40022000

0800c910 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b08c      	sub	sp, #48	; 0x30
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c918:	f107 031c 	add.w	r3, r7, #28
 800c91c:	2200      	movs	r2, #0
 800c91e:	601a      	str	r2, [r3, #0]
 800c920:	605a      	str	r2, [r3, #4]
 800c922:	609a      	str	r2, [r3, #8]
 800c924:	60da      	str	r2, [r3, #12]
 800c926:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4a3b      	ldr	r2, [pc, #236]	; (800ca1c <HAL_QSPI_MspInit+0x10c>)
 800c92e:	4293      	cmp	r3, r2
 800c930:	d170      	bne.n	800ca14 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800c932:	4b3b      	ldr	r3, [pc, #236]	; (800ca20 <HAL_QSPI_MspInit+0x110>)
 800c934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c936:	4a3a      	ldr	r2, [pc, #232]	; (800ca20 <HAL_QSPI_MspInit+0x110>)
 800c938:	f043 0302 	orr.w	r3, r3, #2
 800c93c:	6393      	str	r3, [r2, #56]	; 0x38
 800c93e:	4b38      	ldr	r3, [pc, #224]	; (800ca20 <HAL_QSPI_MspInit+0x110>)
 800c940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c942:	f003 0302 	and.w	r3, r3, #2
 800c946:	61bb      	str	r3, [r7, #24]
 800c948:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800c94a:	4b35      	ldr	r3, [pc, #212]	; (800ca20 <HAL_QSPI_MspInit+0x110>)
 800c94c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c94e:	4a34      	ldr	r2, [pc, #208]	; (800ca20 <HAL_QSPI_MspInit+0x110>)
 800c950:	f043 0310 	orr.w	r3, r3, #16
 800c954:	6313      	str	r3, [r2, #48]	; 0x30
 800c956:	4b32      	ldr	r3, [pc, #200]	; (800ca20 <HAL_QSPI_MspInit+0x110>)
 800c958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c95a:	f003 0310 	and.w	r3, r3, #16
 800c95e:	617b      	str	r3, [r7, #20]
 800c960:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c962:	4b2f      	ldr	r3, [pc, #188]	; (800ca20 <HAL_QSPI_MspInit+0x110>)
 800c964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c966:	4a2e      	ldr	r2, [pc, #184]	; (800ca20 <HAL_QSPI_MspInit+0x110>)
 800c968:	f043 0302 	orr.w	r3, r3, #2
 800c96c:	6313      	str	r3, [r2, #48]	; 0x30
 800c96e:	4b2c      	ldr	r3, [pc, #176]	; (800ca20 <HAL_QSPI_MspInit+0x110>)
 800c970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c972:	f003 0302 	and.w	r3, r3, #2
 800c976:	613b      	str	r3, [r7, #16]
 800c978:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c97a:	4b29      	ldr	r3, [pc, #164]	; (800ca20 <HAL_QSPI_MspInit+0x110>)
 800c97c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c97e:	4a28      	ldr	r2, [pc, #160]	; (800ca20 <HAL_QSPI_MspInit+0x110>)
 800c980:	f043 0308 	orr.w	r3, r3, #8
 800c984:	6313      	str	r3, [r2, #48]	; 0x30
 800c986:	4b26      	ldr	r3, [pc, #152]	; (800ca20 <HAL_QSPI_MspInit+0x110>)
 800c988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c98a:	f003 0308 	and.w	r3, r3, #8
 800c98e:	60fb      	str	r3, [r7, #12]
 800c990:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800c992:	2304      	movs	r3, #4
 800c994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c996:	2302      	movs	r3, #2
 800c998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c99a:	2300      	movs	r3, #0
 800c99c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c99e:	2303      	movs	r3, #3
 800c9a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800c9a2:	2309      	movs	r3, #9
 800c9a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800c9a6:	f107 031c 	add.w	r3, r7, #28
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	481d      	ldr	r0, [pc, #116]	; (800ca24 <HAL_QSPI_MspInit+0x114>)
 800c9ae:	f7f8 fb0f 	bl	8004fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800c9b2:	2340      	movs	r3, #64	; 0x40
 800c9b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9b6:	2302      	movs	r3, #2
 800c9b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c9be:	2303      	movs	r3, #3
 800c9c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800c9c2:	230a      	movs	r3, #10
 800c9c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800c9c6:	f107 031c 	add.w	r3, r7, #28
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	4816      	ldr	r0, [pc, #88]	; (800ca28 <HAL_QSPI_MspInit+0x118>)
 800c9ce:	f7f8 faff 	bl	8004fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c9d2:	2304      	movs	r3, #4
 800c9d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9d6:	2302      	movs	r3, #2
 800c9d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c9de:	2303      	movs	r3, #3
 800c9e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800c9e2:	2309      	movs	r3, #9
 800c9e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c9e6:	f107 031c 	add.w	r3, r7, #28
 800c9ea:	4619      	mov	r1, r3
 800c9ec:	480e      	ldr	r0, [pc, #56]	; (800ca28 <HAL_QSPI_MspInit+0x118>)
 800c9ee:	f7f8 faef 	bl	8004fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800c9f2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c9f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9f8:	2302      	movs	r3, #2
 800c9fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ca00:	2303      	movs	r3, #3
 800ca02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800ca04:	2309      	movs	r3, #9
 800ca06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ca08:	f107 031c 	add.w	r3, r7, #28
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	4807      	ldr	r0, [pc, #28]	; (800ca2c <HAL_QSPI_MspInit+0x11c>)
 800ca10:	f7f8 fade 	bl	8004fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800ca14:	bf00      	nop
 800ca16:	3730      	adds	r7, #48	; 0x30
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	a0001000 	.word	0xa0001000
 800ca20:	40023800 	.word	0x40023800
 800ca24:	40021000 	.word	0x40021000
 800ca28:	40020400 	.word	0x40020400
 800ca2c:	40020c00 	.word	0x40020c00

0800ca30 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b083      	sub	sp, #12
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4a07      	ldr	r2, [pc, #28]	; (800ca5c <HAL_RTC_MspInit+0x2c>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d105      	bne.n	800ca4e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800ca42:	4b07      	ldr	r3, [pc, #28]	; (800ca60 <HAL_RTC_MspInit+0x30>)
 800ca44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca46:	4a06      	ldr	r2, [pc, #24]	; (800ca60 <HAL_RTC_MspInit+0x30>)
 800ca48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca4c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800ca4e:	bf00      	nop
 800ca50:	370c      	adds	r7, #12
 800ca52:	46bd      	mov	sp, r7
 800ca54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca58:	4770      	bx	lr
 800ca5a:	bf00      	nop
 800ca5c:	40002800 	.word	0x40002800
 800ca60:	40023800 	.word	0x40023800

0800ca64 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b08a      	sub	sp, #40	; 0x28
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ca6c:	f107 0314 	add.w	r3, r7, #20
 800ca70:	2200      	movs	r2, #0
 800ca72:	601a      	str	r2, [r3, #0]
 800ca74:	605a      	str	r2, [r3, #4]
 800ca76:	609a      	str	r2, [r3, #8]
 800ca78:	60da      	str	r2, [r3, #12]
 800ca7a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4a25      	ldr	r2, [pc, #148]	; (800cb18 <HAL_SD_MspInit+0xb4>)
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d144      	bne.n	800cb10 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800ca86:	4b25      	ldr	r3, [pc, #148]	; (800cb1c <HAL_SD_MspInit+0xb8>)
 800ca88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca8a:	4a24      	ldr	r2, [pc, #144]	; (800cb1c <HAL_SD_MspInit+0xb8>)
 800ca8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ca90:	6453      	str	r3, [r2, #68]	; 0x44
 800ca92:	4b22      	ldr	r3, [pc, #136]	; (800cb1c <HAL_SD_MspInit+0xb8>)
 800ca94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ca9a:	613b      	str	r3, [r7, #16]
 800ca9c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ca9e:	4b1f      	ldr	r3, [pc, #124]	; (800cb1c <HAL_SD_MspInit+0xb8>)
 800caa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caa2:	4a1e      	ldr	r2, [pc, #120]	; (800cb1c <HAL_SD_MspInit+0xb8>)
 800caa4:	f043 0304 	orr.w	r3, r3, #4
 800caa8:	6313      	str	r3, [r2, #48]	; 0x30
 800caaa:	4b1c      	ldr	r3, [pc, #112]	; (800cb1c <HAL_SD_MspInit+0xb8>)
 800caac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caae:	f003 0304 	and.w	r3, r3, #4
 800cab2:	60fb      	str	r3, [r7, #12]
 800cab4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800cab6:	4b19      	ldr	r3, [pc, #100]	; (800cb1c <HAL_SD_MspInit+0xb8>)
 800cab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caba:	4a18      	ldr	r2, [pc, #96]	; (800cb1c <HAL_SD_MspInit+0xb8>)
 800cabc:	f043 0308 	orr.w	r3, r3, #8
 800cac0:	6313      	str	r3, [r2, #48]	; 0x30
 800cac2:	4b16      	ldr	r3, [pc, #88]	; (800cb1c <HAL_SD_MspInit+0xb8>)
 800cac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cac6:	f003 0308 	and.w	r3, r3, #8
 800caca:	60bb      	str	r3, [r7, #8]
 800cacc:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 800cace:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800cad2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cad4:	2302      	movs	r3, #2
 800cad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cad8:	2300      	movs	r3, #0
 800cada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cadc:	2303      	movs	r3, #3
 800cade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800cae0:	230c      	movs	r3, #12
 800cae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cae4:	f107 0314 	add.w	r3, r7, #20
 800cae8:	4619      	mov	r1, r3
 800caea:	480d      	ldr	r0, [pc, #52]	; (800cb20 <HAL_SD_MspInit+0xbc>)
 800caec:	f7f8 fa70 	bl	8004fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800caf0:	2304      	movs	r3, #4
 800caf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800caf4:	2302      	movs	r3, #2
 800caf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800caf8:	2300      	movs	r3, #0
 800cafa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cafc:	2303      	movs	r3, #3
 800cafe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800cb00:	230c      	movs	r3, #12
 800cb02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800cb04:	f107 0314 	add.w	r3, r7, #20
 800cb08:	4619      	mov	r1, r3
 800cb0a:	4806      	ldr	r0, [pc, #24]	; (800cb24 <HAL_SD_MspInit+0xc0>)
 800cb0c:	f7f8 fa60 	bl	8004fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800cb10:	bf00      	nop
 800cb12:	3728      	adds	r7, #40	; 0x28
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}
 800cb18:	40012c00 	.word	0x40012c00
 800cb1c:	40023800 	.word	0x40023800
 800cb20:	40020800 	.word	0x40020800
 800cb24:	40020c00 	.word	0x40020c00

0800cb28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b08a      	sub	sp, #40	; 0x28
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb30:	f107 0314 	add.w	r3, r7, #20
 800cb34:	2200      	movs	r2, #0
 800cb36:	601a      	str	r2, [r3, #0]
 800cb38:	605a      	str	r2, [r3, #4]
 800cb3a:	609a      	str	r2, [r3, #8]
 800cb3c:	60da      	str	r2, [r3, #12]
 800cb3e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	4a28      	ldr	r2, [pc, #160]	; (800cbe8 <HAL_TIM_Base_MspInit+0xc0>)
 800cb46:	4293      	cmp	r3, r2
 800cb48:	d130      	bne.n	800cbac <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800cb4a:	4b28      	ldr	r3, [pc, #160]	; (800cbec <HAL_TIM_Base_MspInit+0xc4>)
 800cb4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb4e:	4a27      	ldr	r2, [pc, #156]	; (800cbec <HAL_TIM_Base_MspInit+0xc4>)
 800cb50:	f043 0302 	orr.w	r3, r3, #2
 800cb54:	6413      	str	r3, [r2, #64]	; 0x40
 800cb56:	4b25      	ldr	r3, [pc, #148]	; (800cbec <HAL_TIM_Base_MspInit+0xc4>)
 800cb58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb5a:	f003 0302 	and.w	r3, r3, #2
 800cb5e:	613b      	str	r3, [r7, #16]
 800cb60:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cb62:	4b22      	ldr	r3, [pc, #136]	; (800cbec <HAL_TIM_Base_MspInit+0xc4>)
 800cb64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb66:	4a21      	ldr	r2, [pc, #132]	; (800cbec <HAL_TIM_Base_MspInit+0xc4>)
 800cb68:	f043 0302 	orr.w	r3, r3, #2
 800cb6c:	6313      	str	r3, [r2, #48]	; 0x30
 800cb6e:	4b1f      	ldr	r3, [pc, #124]	; (800cbec <HAL_TIM_Base_MspInit+0xc4>)
 800cb70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb72:	f003 0302 	and.w	r3, r3, #2
 800cb76:	60fb      	str	r3, [r7, #12]
 800cb78:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800cb7a:	2310      	movs	r3, #16
 800cb7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb7e:	2302      	movs	r3, #2
 800cb80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb82:	2300      	movs	r3, #0
 800cb84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cb86:	2300      	movs	r3, #0
 800cb88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800cb8a:	2302      	movs	r3, #2
 800cb8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800cb8e:	f107 0314 	add.w	r3, r7, #20
 800cb92:	4619      	mov	r1, r3
 800cb94:	4816      	ldr	r0, [pc, #88]	; (800cbf0 <HAL_TIM_Base_MspInit+0xc8>)
 800cb96:	f7f8 fa1b 	bl	8004fd0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	2100      	movs	r1, #0
 800cb9e:	201d      	movs	r0, #29
 800cba0:	f7f7 f9fd 	bl	8003f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800cba4:	201d      	movs	r0, #29
 800cba6:	f7f7 fa16 	bl	8003fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800cbaa:	e018      	b.n	800cbde <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM7)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a10      	ldr	r2, [pc, #64]	; (800cbf4 <HAL_TIM_Base_MspInit+0xcc>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d113      	bne.n	800cbde <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800cbb6:	4b0d      	ldr	r3, [pc, #52]	; (800cbec <HAL_TIM_Base_MspInit+0xc4>)
 800cbb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbba:	4a0c      	ldr	r2, [pc, #48]	; (800cbec <HAL_TIM_Base_MspInit+0xc4>)
 800cbbc:	f043 0320 	orr.w	r3, r3, #32
 800cbc0:	6413      	str	r3, [r2, #64]	; 0x40
 800cbc2:	4b0a      	ldr	r3, [pc, #40]	; (800cbec <HAL_TIM_Base_MspInit+0xc4>)
 800cbc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbc6:	f003 0320 	and.w	r3, r3, #32
 800cbca:	60bb      	str	r3, [r7, #8]
 800cbcc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800cbce:	2200      	movs	r2, #0
 800cbd0:	2100      	movs	r1, #0
 800cbd2:	2037      	movs	r0, #55	; 0x37
 800cbd4:	f7f7 f9e3 	bl	8003f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800cbd8:	2037      	movs	r0, #55	; 0x37
 800cbda:	f7f7 f9fc 	bl	8003fd6 <HAL_NVIC_EnableIRQ>
}
 800cbde:	bf00      	nop
 800cbe0:	3728      	adds	r7, #40	; 0x28
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop
 800cbe8:	40000400 	.word	0x40000400
 800cbec:	40023800 	.word	0x40023800
 800cbf0:	40020400 	.word	0x40020400
 800cbf4:	40001400 	.word	0x40001400

0800cbf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b08a      	sub	sp, #40	; 0x28
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc00:	f107 0314 	add.w	r3, r7, #20
 800cc04:	2200      	movs	r2, #0
 800cc06:	601a      	str	r2, [r3, #0]
 800cc08:	605a      	str	r2, [r3, #4]
 800cc0a:	609a      	str	r2, [r3, #8]
 800cc0c:	60da      	str	r2, [r3, #12]
 800cc0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4a25      	ldr	r2, [pc, #148]	; (800ccac <HAL_UART_MspInit+0xb4>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d144      	bne.n	800cca4 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800cc1a:	4b25      	ldr	r3, [pc, #148]	; (800ccb0 <HAL_UART_MspInit+0xb8>)
 800cc1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc1e:	4a24      	ldr	r2, [pc, #144]	; (800ccb0 <HAL_UART_MspInit+0xb8>)
 800cc20:	f043 0310 	orr.w	r3, r3, #16
 800cc24:	6453      	str	r3, [r2, #68]	; 0x44
 800cc26:	4b22      	ldr	r3, [pc, #136]	; (800ccb0 <HAL_UART_MspInit+0xb8>)
 800cc28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc2a:	f003 0310 	and.w	r3, r3, #16
 800cc2e:	613b      	str	r3, [r7, #16]
 800cc30:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cc32:	4b1f      	ldr	r3, [pc, #124]	; (800ccb0 <HAL_UART_MspInit+0xb8>)
 800cc34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc36:	4a1e      	ldr	r2, [pc, #120]	; (800ccb0 <HAL_UART_MspInit+0xb8>)
 800cc38:	f043 0302 	orr.w	r3, r3, #2
 800cc3c:	6313      	str	r3, [r2, #48]	; 0x30
 800cc3e:	4b1c      	ldr	r3, [pc, #112]	; (800ccb0 <HAL_UART_MspInit+0xb8>)
 800cc40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc42:	f003 0302 	and.w	r3, r3, #2
 800cc46:	60fb      	str	r3, [r7, #12]
 800cc48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cc4a:	4b19      	ldr	r3, [pc, #100]	; (800ccb0 <HAL_UART_MspInit+0xb8>)
 800cc4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc4e:	4a18      	ldr	r2, [pc, #96]	; (800ccb0 <HAL_UART_MspInit+0xb8>)
 800cc50:	f043 0301 	orr.w	r3, r3, #1
 800cc54:	6313      	str	r3, [r2, #48]	; 0x30
 800cc56:	4b16      	ldr	r3, [pc, #88]	; (800ccb0 <HAL_UART_MspInit+0xb8>)
 800cc58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc5a:	f003 0301 	and.w	r3, r3, #1
 800cc5e:	60bb      	str	r3, [r7, #8]
 800cc60:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800cc62:	2380      	movs	r3, #128	; 0x80
 800cc64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc66:	2302      	movs	r3, #2
 800cc68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800cc72:	2307      	movs	r3, #7
 800cc74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800cc76:	f107 0314 	add.w	r3, r7, #20
 800cc7a:	4619      	mov	r1, r3
 800cc7c:	480d      	ldr	r0, [pc, #52]	; (800ccb4 <HAL_UART_MspInit+0xbc>)
 800cc7e:	f7f8 f9a7 	bl	8004fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800cc82:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc88:	2302      	movs	r3, #2
 800cc8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cc90:	2300      	movs	r3, #0
 800cc92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800cc94:	2307      	movs	r3, #7
 800cc96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800cc98:	f107 0314 	add.w	r3, r7, #20
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	4806      	ldr	r0, [pc, #24]	; (800ccb8 <HAL_UART_MspInit+0xc0>)
 800cca0:	f7f8 f996 	bl	8004fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800cca4:	bf00      	nop
 800cca6:	3728      	adds	r7, #40	; 0x28
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}
 800ccac:	40011000 	.word	0x40011000
 800ccb0:	40023800 	.word	0x40023800
 800ccb4:	40020400 	.word	0x40020400
 800ccb8:	40020000 	.word	0x40020000

0800ccbc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b086      	sub	sp, #24
 800ccc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800ccc2:	1d3b      	adds	r3, r7, #4
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	601a      	str	r2, [r3, #0]
 800ccc8:	605a      	str	r2, [r3, #4]
 800ccca:	609a      	str	r2, [r3, #8]
 800cccc:	60da      	str	r2, [r3, #12]
 800ccce:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800ccd0:	4b3a      	ldr	r3, [pc, #232]	; (800cdbc <HAL_FMC_MspInit+0x100>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d16d      	bne.n	800cdb4 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800ccd8:	4b38      	ldr	r3, [pc, #224]	; (800cdbc <HAL_FMC_MspInit+0x100>)
 800ccda:	2201      	movs	r2, #1
 800ccdc:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800ccde:	4b38      	ldr	r3, [pc, #224]	; (800cdc0 <HAL_FMC_MspInit+0x104>)
 800cce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cce2:	4a37      	ldr	r2, [pc, #220]	; (800cdc0 <HAL_FMC_MspInit+0x104>)
 800cce4:	f043 0301 	orr.w	r3, r3, #1
 800cce8:	6393      	str	r3, [r2, #56]	; 0x38
 800ccea:	4b35      	ldr	r3, [pc, #212]	; (800cdc0 <HAL_FMC_MspInit+0x104>)
 800ccec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccee:	f003 0301 	and.w	r3, r3, #1
 800ccf2:	603b      	str	r3, [r7, #0]
 800ccf4:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800ccf6:	f64f 7383 	movw	r3, #65411	; 0xff83
 800ccfa:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccfc:	2302      	movs	r3, #2
 800ccfe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd00:	2300      	movs	r3, #0
 800cd02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd04:	2303      	movs	r3, #3
 800cd06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800cd08:	230c      	movs	r3, #12
 800cd0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800cd0c:	1d3b      	adds	r3, r7, #4
 800cd0e:	4619      	mov	r1, r3
 800cd10:	482c      	ldr	r0, [pc, #176]	; (800cdc4 <HAL_FMC_MspInit+0x108>)
 800cd12:	f7f8 f95d 	bl	8004fd0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800cd16:	f248 1333 	movw	r3, #33075	; 0x8133
 800cd1a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd1c:	2302      	movs	r3, #2
 800cd1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd20:	2300      	movs	r3, #0
 800cd22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd24:	2303      	movs	r3, #3
 800cd26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800cd28:	230c      	movs	r3, #12
 800cd2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800cd2c:	1d3b      	adds	r3, r7, #4
 800cd2e:	4619      	mov	r1, r3
 800cd30:	4825      	ldr	r0, [pc, #148]	; (800cdc8 <HAL_FMC_MspInit+0x10c>)
 800cd32:	f7f8 f94d 	bl	8004fd0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800cd36:	f24c 7303 	movw	r3, #50947	; 0xc703
 800cd3a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd3c:	2302      	movs	r3, #2
 800cd3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd40:	2300      	movs	r3, #0
 800cd42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd44:	2303      	movs	r3, #3
 800cd46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800cd48:	230c      	movs	r3, #12
 800cd4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cd4c:	1d3b      	adds	r3, r7, #4
 800cd4e:	4619      	mov	r1, r3
 800cd50:	481e      	ldr	r0, [pc, #120]	; (800cdcc <HAL_FMC_MspInit+0x110>)
 800cd52:	f7f8 f93d 	bl	8004fd0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800cd56:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800cd5a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd5c:	2302      	movs	r3, #2
 800cd5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd60:	2300      	movs	r3, #0
 800cd62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd64:	2303      	movs	r3, #3
 800cd66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800cd68:	230c      	movs	r3, #12
 800cd6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800cd6c:	1d3b      	adds	r3, r7, #4
 800cd6e:	4619      	mov	r1, r3
 800cd70:	4817      	ldr	r0, [pc, #92]	; (800cdd0 <HAL_FMC_MspInit+0x114>)
 800cd72:	f7f8 f92d 	bl	8004fd0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800cd76:	2328      	movs	r3, #40	; 0x28
 800cd78:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd7a:	2302      	movs	r3, #2
 800cd7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd82:	2303      	movs	r3, #3
 800cd84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800cd86:	230c      	movs	r3, #12
 800cd88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800cd8a:	1d3b      	adds	r3, r7, #4
 800cd8c:	4619      	mov	r1, r3
 800cd8e:	4811      	ldr	r0, [pc, #68]	; (800cdd4 <HAL_FMC_MspInit+0x118>)
 800cd90:	f7f8 f91e 	bl	8004fd0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800cd94:	2308      	movs	r3, #8
 800cd96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd98:	2302      	movs	r3, #2
 800cd9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cda0:	2303      	movs	r3, #3
 800cda2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800cda4:	230c      	movs	r3, #12
 800cda6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800cda8:	1d3b      	adds	r3, r7, #4
 800cdaa:	4619      	mov	r1, r3
 800cdac:	480a      	ldr	r0, [pc, #40]	; (800cdd8 <HAL_FMC_MspInit+0x11c>)
 800cdae:	f7f8 f90f 	bl	8004fd0 <HAL_GPIO_Init>
 800cdb2:	e000      	b.n	800cdb6 <HAL_FMC_MspInit+0xfa>
    return;
 800cdb4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800cdb6:	3718      	adds	r7, #24
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}
 800cdbc:	20000354 	.word	0x20000354
 800cdc0:	40023800 	.word	0x40023800
 800cdc4:	40021000 	.word	0x40021000
 800cdc8:	40021800 	.word	0x40021800
 800cdcc:	40020c00 	.word	0x40020c00
 800cdd0:	40021400 	.word	0x40021400
 800cdd4:	40021c00 	.word	0x40021c00
 800cdd8:	40020800 	.word	0x40020800

0800cddc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b082      	sub	sp, #8
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800cde4:	f7ff ff6a 	bl	800ccbc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800cde8:	bf00      	nop
 800cdea:	3708      	adds	r7, #8
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}

0800cdf0 <SysTick_Handler>:
extern DMA2D_HandleTypeDef hdma2d;
extern LTDC_HandleTypeDef hltdc;
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim7;
/* USER CODE BEGIN EV */
void SysTick_Handler(void) {
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	af00      	add	r7, sp, #0
    HAL_IncTick();
 800cdf4:	f7f6 f9aa 	bl	800314c <HAL_IncTick>
}
 800cdf8:	bf00      	nop
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ce00:	bf00      	nop
 800ce02:	46bd      	mov	sp, r7
 800ce04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce08:	4770      	bx	lr

0800ce0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ce0a:	b480      	push	{r7}
 800ce0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ce0e:	e7fe      	b.n	800ce0e <HardFault_Handler+0x4>

0800ce10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ce10:	b480      	push	{r7}
 800ce12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ce14:	e7fe      	b.n	800ce14 <MemManage_Handler+0x4>

0800ce16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ce16:	b480      	push	{r7}
 800ce18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ce1a:	e7fe      	b.n	800ce1a <BusFault_Handler+0x4>

0800ce1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ce20:	e7fe      	b.n	800ce20 <UsageFault_Handler+0x4>

0800ce22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ce22:	b480      	push	{r7}
 800ce24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ce26:	bf00      	nop
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2e:	4770      	bx	lr

0800ce30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ce30:	b480      	push	{r7}
 800ce32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ce34:	bf00      	nop
 800ce36:	46bd      	mov	sp, r7
 800ce38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3c:	4770      	bx	lr

0800ce3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ce3e:	b480      	push	{r7}
 800ce40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ce42:	bf00      	nop
 800ce44:	46bd      	mov	sp, r7
 800ce46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4a:	4770      	bx	lr

0800ce4c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800ce50:	4802      	ldr	r0, [pc, #8]	; (800ce5c <ADC_IRQHandler+0x10>)
 800ce52:	f7f6 fac1 	bl	80033d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800ce56:	bf00      	nop
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	bf00      	nop
 800ce5c:	200005a4 	.word	0x200005a4

0800ce60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800ce64:	4802      	ldr	r0, [pc, #8]	; (800ce70 <TIM3_IRQHandler+0x10>)
 800ce66:	f7fb ff15 	bl	8008c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800ce6a:	bf00      	nop
 800ce6c:	bd80      	pop	{r7, pc}
 800ce6e:	bf00      	nop
 800ce70:	200004bc 	.word	0x200004bc

0800ce74 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800ce78:	4802      	ldr	r0, [pc, #8]	; (800ce84 <TIM7_IRQHandler+0x10>)
 800ce7a:	f7fb ff0b 	bl	8008c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800ce7e:	bf00      	nop
 800ce80:	bd80      	pop	{r7, pc}
 800ce82:	bf00      	nop
 800ce84:	200007b0 	.word	0x200007b0

0800ce88 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800ce8c:	4802      	ldr	r0, [pc, #8]	; (800ce98 <DMA2_Stream4_IRQHandler+0x10>)
 800ce8e:	f7f7 fa9b 	bl	80043c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800ce92:	bf00      	nop
 800ce94:	bd80      	pop	{r7, pc}
 800ce96:	bf00      	nop
 800ce98:	200006bc 	.word	0x200006bc

0800ce9c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800cea0:	4802      	ldr	r0, [pc, #8]	; (800ceac <LTDC_IRQHandler+0x10>)
 800cea2:	f7f9 f855 	bl	8005f50 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800cea6:	bf00      	nop
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	bf00      	nop
 800ceac:	200004fc 	.word	0x200004fc

0800ceb0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800ceb4:	4802      	ldr	r0, [pc, #8]	; (800cec0 <DMA2D_IRQHandler+0x10>)
 800ceb6:	f7f7 fe4d 	bl	8004b54 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800ceba:	bf00      	nop
 800cebc:	bd80      	pop	{r7, pc}
 800cebe:	bf00      	nop
 800cec0:	2000073c 	.word	0x2000073c

0800cec4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800cec4:	b480      	push	{r7}
 800cec6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800cec8:	4b15      	ldr	r3, [pc, #84]	; (800cf20 <SystemInit+0x5c>)
 800ceca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cece:	4a14      	ldr	r2, [pc, #80]	; (800cf20 <SystemInit+0x5c>)
 800ced0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ced4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800ced8:	4b12      	ldr	r3, [pc, #72]	; (800cf24 <SystemInit+0x60>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	4a11      	ldr	r2, [pc, #68]	; (800cf24 <SystemInit+0x60>)
 800cede:	f043 0301 	orr.w	r3, r3, #1
 800cee2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800cee4:	4b0f      	ldr	r3, [pc, #60]	; (800cf24 <SystemInit+0x60>)
 800cee6:	2200      	movs	r2, #0
 800cee8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800ceea:	4b0e      	ldr	r3, [pc, #56]	; (800cf24 <SystemInit+0x60>)
 800ceec:	681a      	ldr	r2, [r3, #0]
 800ceee:	490d      	ldr	r1, [pc, #52]	; (800cf24 <SystemInit+0x60>)
 800cef0:	4b0d      	ldr	r3, [pc, #52]	; (800cf28 <SystemInit+0x64>)
 800cef2:	4013      	ands	r3, r2
 800cef4:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800cef6:	4b0b      	ldr	r3, [pc, #44]	; (800cf24 <SystemInit+0x60>)
 800cef8:	4a0c      	ldr	r2, [pc, #48]	; (800cf2c <SystemInit+0x68>)
 800cefa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800cefc:	4b09      	ldr	r3, [pc, #36]	; (800cf24 <SystemInit+0x60>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4a08      	ldr	r2, [pc, #32]	; (800cf24 <SystemInit+0x60>)
 800cf02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cf06:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800cf08:	4b06      	ldr	r3, [pc, #24]	; (800cf24 <SystemInit+0x60>)
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800cf0e:	4b04      	ldr	r3, [pc, #16]	; (800cf20 <SystemInit+0x5c>)
 800cf10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cf14:	609a      	str	r2, [r3, #8]
#endif
}
 800cf16:	bf00      	nop
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr
 800cf20:	e000ed00 	.word	0xe000ed00
 800cf24:	40023800 	.word	0x40023800
 800cf28:	fef6ffff 	.word	0xfef6ffff
 800cf2c:	24003010 	.word	0x24003010

0800cf30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800cf30:	f8df d034 	ldr.w	sp, [pc, #52]	; 800cf68 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800cf34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800cf36:	e003      	b.n	800cf40 <LoopCopyDataInit>

0800cf38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800cf38:	4b0c      	ldr	r3, [pc, #48]	; (800cf6c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800cf3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800cf3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800cf3e:	3104      	adds	r1, #4

0800cf40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800cf40:	480b      	ldr	r0, [pc, #44]	; (800cf70 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800cf42:	4b0c      	ldr	r3, [pc, #48]	; (800cf74 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800cf44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800cf46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800cf48:	d3f6      	bcc.n	800cf38 <CopyDataInit>
  ldr  r2, =_sbss
 800cf4a:	4a0b      	ldr	r2, [pc, #44]	; (800cf78 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800cf4c:	e002      	b.n	800cf54 <LoopFillZerobss>

0800cf4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800cf4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800cf50:	f842 3b04 	str.w	r3, [r2], #4

0800cf54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800cf54:	4b09      	ldr	r3, [pc, #36]	; (800cf7c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800cf56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800cf58:	d3f9      	bcc.n	800cf4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800cf5a:	f7ff ffb3 	bl	800cec4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800cf5e:	f000 f811 	bl	800cf84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800cf62:	f7fd ff1d 	bl	800ada0 <main>
  bx  lr    
 800cf66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800cf68:	2004ffff 	.word	0x2004ffff
  ldr  r3, =_sidata
 800cf6c:	0800fc20 	.word	0x0800fc20
  ldr  r0, =_sdata
 800cf70:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800cf74:	20000114 	.word	0x20000114
  ldr  r2, =_sbss
 800cf78:	20000114 	.word	0x20000114
  ldr  r3, = _ebss
 800cf7c:	20004844 	.word	0x20004844

0800cf80 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800cf80:	e7fe      	b.n	800cf80 <CAN1_RX0_IRQHandler>
	...

0800cf84 <__libc_init_array>:
 800cf84:	b570      	push	{r4, r5, r6, lr}
 800cf86:	4e0d      	ldr	r6, [pc, #52]	; (800cfbc <__libc_init_array+0x38>)
 800cf88:	4c0d      	ldr	r4, [pc, #52]	; (800cfc0 <__libc_init_array+0x3c>)
 800cf8a:	1ba4      	subs	r4, r4, r6
 800cf8c:	10a4      	asrs	r4, r4, #2
 800cf8e:	2500      	movs	r5, #0
 800cf90:	42a5      	cmp	r5, r4
 800cf92:	d109      	bne.n	800cfa8 <__libc_init_array+0x24>
 800cf94:	4e0b      	ldr	r6, [pc, #44]	; (800cfc4 <__libc_init_array+0x40>)
 800cf96:	4c0c      	ldr	r4, [pc, #48]	; (800cfc8 <__libc_init_array+0x44>)
 800cf98:	f000 f932 	bl	800d200 <_init>
 800cf9c:	1ba4      	subs	r4, r4, r6
 800cf9e:	10a4      	asrs	r4, r4, #2
 800cfa0:	2500      	movs	r5, #0
 800cfa2:	42a5      	cmp	r5, r4
 800cfa4:	d105      	bne.n	800cfb2 <__libc_init_array+0x2e>
 800cfa6:	bd70      	pop	{r4, r5, r6, pc}
 800cfa8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cfac:	4798      	blx	r3
 800cfae:	3501      	adds	r5, #1
 800cfb0:	e7ee      	b.n	800cf90 <__libc_init_array+0xc>
 800cfb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cfb6:	4798      	blx	r3
 800cfb8:	3501      	adds	r5, #1
 800cfba:	e7f2      	b.n	800cfa2 <__libc_init_array+0x1e>
 800cfbc:	0800fc18 	.word	0x0800fc18
 800cfc0:	0800fc18 	.word	0x0800fc18
 800cfc4:	0800fc18 	.word	0x0800fc18
 800cfc8:	0800fc1c 	.word	0x0800fc1c

0800cfcc <memset>:
 800cfcc:	4402      	add	r2, r0
 800cfce:	4603      	mov	r3, r0
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	d100      	bne.n	800cfd6 <memset+0xa>
 800cfd4:	4770      	bx	lr
 800cfd6:	f803 1b01 	strb.w	r1, [r3], #1
 800cfda:	e7f9      	b.n	800cfd0 <memset+0x4>

0800cfdc <sqrt>:
 800cfdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cfe0:	ed2d 8b02 	vpush	{d8}
 800cfe4:	b08b      	sub	sp, #44	; 0x2c
 800cfe6:	ec55 4b10 	vmov	r4, r5, d0
 800cfea:	f000 f851 	bl	800d090 <__ieee754_sqrt>
 800cfee:	4b26      	ldr	r3, [pc, #152]	; (800d088 <sqrt+0xac>)
 800cff0:	eeb0 8a40 	vmov.f32	s16, s0
 800cff4:	eef0 8a60 	vmov.f32	s17, s1
 800cff8:	f993 6000 	ldrsb.w	r6, [r3]
 800cffc:	1c73      	adds	r3, r6, #1
 800cffe:	d02a      	beq.n	800d056 <sqrt+0x7a>
 800d000:	4622      	mov	r2, r4
 800d002:	462b      	mov	r3, r5
 800d004:	4620      	mov	r0, r4
 800d006:	4629      	mov	r1, r5
 800d008:	f7f3 fd54 	bl	8000ab4 <__aeabi_dcmpun>
 800d00c:	4607      	mov	r7, r0
 800d00e:	bb10      	cbnz	r0, 800d056 <sqrt+0x7a>
 800d010:	f04f 0800 	mov.w	r8, #0
 800d014:	f04f 0900 	mov.w	r9, #0
 800d018:	4642      	mov	r2, r8
 800d01a:	464b      	mov	r3, r9
 800d01c:	4620      	mov	r0, r4
 800d01e:	4629      	mov	r1, r5
 800d020:	f7f3 fd20 	bl	8000a64 <__aeabi_dcmplt>
 800d024:	b1b8      	cbz	r0, 800d056 <sqrt+0x7a>
 800d026:	2301      	movs	r3, #1
 800d028:	9300      	str	r3, [sp, #0]
 800d02a:	4b18      	ldr	r3, [pc, #96]	; (800d08c <sqrt+0xb0>)
 800d02c:	9301      	str	r3, [sp, #4]
 800d02e:	9708      	str	r7, [sp, #32]
 800d030:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800d034:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d038:	b9b6      	cbnz	r6, 800d068 <sqrt+0x8c>
 800d03a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800d03e:	4668      	mov	r0, sp
 800d040:	f000 f8d6 	bl	800d1f0 <matherr>
 800d044:	b1d0      	cbz	r0, 800d07c <sqrt+0xa0>
 800d046:	9b08      	ldr	r3, [sp, #32]
 800d048:	b11b      	cbz	r3, 800d052 <sqrt+0x76>
 800d04a:	f000 f8d3 	bl	800d1f4 <__errno>
 800d04e:	9b08      	ldr	r3, [sp, #32]
 800d050:	6003      	str	r3, [r0, #0]
 800d052:	ed9d 8b06 	vldr	d8, [sp, #24]
 800d056:	eeb0 0a48 	vmov.f32	s0, s16
 800d05a:	eef0 0a68 	vmov.f32	s1, s17
 800d05e:	b00b      	add	sp, #44	; 0x2c
 800d060:	ecbd 8b02 	vpop	{d8}
 800d064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d068:	4642      	mov	r2, r8
 800d06a:	464b      	mov	r3, r9
 800d06c:	4640      	mov	r0, r8
 800d06e:	4649      	mov	r1, r9
 800d070:	f7f3 fbb0 	bl	80007d4 <__aeabi_ddiv>
 800d074:	2e02      	cmp	r6, #2
 800d076:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d07a:	d1e0      	bne.n	800d03e <sqrt+0x62>
 800d07c:	f000 f8ba 	bl	800d1f4 <__errno>
 800d080:	2321      	movs	r3, #33	; 0x21
 800d082:	6003      	str	r3, [r0, #0]
 800d084:	e7df      	b.n	800d046 <sqrt+0x6a>
 800d086:	bf00      	nop
 800d088:	20000110 	.word	0x20000110
 800d08c:	0800fc08 	.word	0x0800fc08

0800d090 <__ieee754_sqrt>:
 800d090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d094:	4955      	ldr	r1, [pc, #340]	; (800d1ec <__ieee754_sqrt+0x15c>)
 800d096:	ec55 4b10 	vmov	r4, r5, d0
 800d09a:	43a9      	bics	r1, r5
 800d09c:	462b      	mov	r3, r5
 800d09e:	462a      	mov	r2, r5
 800d0a0:	d112      	bne.n	800d0c8 <__ieee754_sqrt+0x38>
 800d0a2:	ee10 2a10 	vmov	r2, s0
 800d0a6:	ee10 0a10 	vmov	r0, s0
 800d0aa:	4629      	mov	r1, r5
 800d0ac:	f7f3 fa68 	bl	8000580 <__aeabi_dmul>
 800d0b0:	4602      	mov	r2, r0
 800d0b2:	460b      	mov	r3, r1
 800d0b4:	4620      	mov	r0, r4
 800d0b6:	4629      	mov	r1, r5
 800d0b8:	f7f3 f8ac 	bl	8000214 <__adddf3>
 800d0bc:	4604      	mov	r4, r0
 800d0be:	460d      	mov	r5, r1
 800d0c0:	ec45 4b10 	vmov	d0, r4, r5
 800d0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0c8:	2d00      	cmp	r5, #0
 800d0ca:	ee10 0a10 	vmov	r0, s0
 800d0ce:	4621      	mov	r1, r4
 800d0d0:	dc0f      	bgt.n	800d0f2 <__ieee754_sqrt+0x62>
 800d0d2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d0d6:	4330      	orrs	r0, r6
 800d0d8:	d0f2      	beq.n	800d0c0 <__ieee754_sqrt+0x30>
 800d0da:	b155      	cbz	r5, 800d0f2 <__ieee754_sqrt+0x62>
 800d0dc:	ee10 2a10 	vmov	r2, s0
 800d0e0:	4620      	mov	r0, r4
 800d0e2:	4629      	mov	r1, r5
 800d0e4:	f7f3 f894 	bl	8000210 <__aeabi_dsub>
 800d0e8:	4602      	mov	r2, r0
 800d0ea:	460b      	mov	r3, r1
 800d0ec:	f7f3 fb72 	bl	80007d4 <__aeabi_ddiv>
 800d0f0:	e7e4      	b.n	800d0bc <__ieee754_sqrt+0x2c>
 800d0f2:	151b      	asrs	r3, r3, #20
 800d0f4:	d073      	beq.n	800d1de <__ieee754_sqrt+0x14e>
 800d0f6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d0fa:	07dd      	lsls	r5, r3, #31
 800d0fc:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d100:	bf48      	it	mi
 800d102:	0fc8      	lsrmi	r0, r1, #31
 800d104:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d108:	bf44      	itt	mi
 800d10a:	0049      	lslmi	r1, r1, #1
 800d10c:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800d110:	2500      	movs	r5, #0
 800d112:	1058      	asrs	r0, r3, #1
 800d114:	0fcb      	lsrs	r3, r1, #31
 800d116:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800d11a:	0049      	lsls	r1, r1, #1
 800d11c:	2316      	movs	r3, #22
 800d11e:	462c      	mov	r4, r5
 800d120:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800d124:	19a7      	adds	r7, r4, r6
 800d126:	4297      	cmp	r7, r2
 800d128:	bfde      	ittt	le
 800d12a:	19bc      	addle	r4, r7, r6
 800d12c:	1bd2      	suble	r2, r2, r7
 800d12e:	19ad      	addle	r5, r5, r6
 800d130:	0fcf      	lsrs	r7, r1, #31
 800d132:	3b01      	subs	r3, #1
 800d134:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800d138:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d13c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d140:	d1f0      	bne.n	800d124 <__ieee754_sqrt+0x94>
 800d142:	f04f 0c20 	mov.w	ip, #32
 800d146:	469e      	mov	lr, r3
 800d148:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d14c:	42a2      	cmp	r2, r4
 800d14e:	eb06 070e 	add.w	r7, r6, lr
 800d152:	dc02      	bgt.n	800d15a <__ieee754_sqrt+0xca>
 800d154:	d112      	bne.n	800d17c <__ieee754_sqrt+0xec>
 800d156:	428f      	cmp	r7, r1
 800d158:	d810      	bhi.n	800d17c <__ieee754_sqrt+0xec>
 800d15a:	2f00      	cmp	r7, #0
 800d15c:	eb07 0e06 	add.w	lr, r7, r6
 800d160:	da42      	bge.n	800d1e8 <__ieee754_sqrt+0x158>
 800d162:	f1be 0f00 	cmp.w	lr, #0
 800d166:	db3f      	blt.n	800d1e8 <__ieee754_sqrt+0x158>
 800d168:	f104 0801 	add.w	r8, r4, #1
 800d16c:	1b12      	subs	r2, r2, r4
 800d16e:	428f      	cmp	r7, r1
 800d170:	bf88      	it	hi
 800d172:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800d176:	1bc9      	subs	r1, r1, r7
 800d178:	4433      	add	r3, r6
 800d17a:	4644      	mov	r4, r8
 800d17c:	0052      	lsls	r2, r2, #1
 800d17e:	f1bc 0c01 	subs.w	ip, ip, #1
 800d182:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800d186:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d18a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d18e:	d1dd      	bne.n	800d14c <__ieee754_sqrt+0xbc>
 800d190:	430a      	orrs	r2, r1
 800d192:	d006      	beq.n	800d1a2 <__ieee754_sqrt+0x112>
 800d194:	1c5c      	adds	r4, r3, #1
 800d196:	bf13      	iteet	ne
 800d198:	3301      	addne	r3, #1
 800d19a:	3501      	addeq	r5, #1
 800d19c:	4663      	moveq	r3, ip
 800d19e:	f023 0301 	bicne.w	r3, r3, #1
 800d1a2:	106a      	asrs	r2, r5, #1
 800d1a4:	085b      	lsrs	r3, r3, #1
 800d1a6:	07e9      	lsls	r1, r5, #31
 800d1a8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d1ac:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d1b0:	bf48      	it	mi
 800d1b2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d1b6:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800d1ba:	461c      	mov	r4, r3
 800d1bc:	e780      	b.n	800d0c0 <__ieee754_sqrt+0x30>
 800d1be:	0aca      	lsrs	r2, r1, #11
 800d1c0:	3815      	subs	r0, #21
 800d1c2:	0549      	lsls	r1, r1, #21
 800d1c4:	2a00      	cmp	r2, #0
 800d1c6:	d0fa      	beq.n	800d1be <__ieee754_sqrt+0x12e>
 800d1c8:	02d6      	lsls	r6, r2, #11
 800d1ca:	d50a      	bpl.n	800d1e2 <__ieee754_sqrt+0x152>
 800d1cc:	f1c3 0420 	rsb	r4, r3, #32
 800d1d0:	fa21 f404 	lsr.w	r4, r1, r4
 800d1d4:	1e5d      	subs	r5, r3, #1
 800d1d6:	4099      	lsls	r1, r3
 800d1d8:	4322      	orrs	r2, r4
 800d1da:	1b43      	subs	r3, r0, r5
 800d1dc:	e78b      	b.n	800d0f6 <__ieee754_sqrt+0x66>
 800d1de:	4618      	mov	r0, r3
 800d1e0:	e7f0      	b.n	800d1c4 <__ieee754_sqrt+0x134>
 800d1e2:	0052      	lsls	r2, r2, #1
 800d1e4:	3301      	adds	r3, #1
 800d1e6:	e7ef      	b.n	800d1c8 <__ieee754_sqrt+0x138>
 800d1e8:	46a0      	mov	r8, r4
 800d1ea:	e7bf      	b.n	800d16c <__ieee754_sqrt+0xdc>
 800d1ec:	7ff00000 	.word	0x7ff00000

0800d1f0 <matherr>:
 800d1f0:	2000      	movs	r0, #0
 800d1f2:	4770      	bx	lr

0800d1f4 <__errno>:
 800d1f4:	4b01      	ldr	r3, [pc, #4]	; (800d1fc <__errno+0x8>)
 800d1f6:	6818      	ldr	r0, [r3, #0]
 800d1f8:	4770      	bx	lr
 800d1fa:	bf00      	nop
 800d1fc:	200000ac 	.word	0x200000ac

0800d200 <_init>:
 800d200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d202:	bf00      	nop
 800d204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d206:	bc08      	pop	{r3}
 800d208:	469e      	mov	lr, r3
 800d20a:	4770      	bx	lr

0800d20c <_fini>:
 800d20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d20e:	bf00      	nop
 800d210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d212:	bc08      	pop	{r3}
 800d214:	469e      	mov	lr, r3
 800d216:	4770      	bx	lr
