
Signal_Detector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d504  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a34  0800d6d4  0800d6d4  0001d6d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010108  08010108  00030114  2**0
                  CONTENTS
  4 .ARM          00000008  08010108  08010108  00020108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010110  08010110  00030114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010110  08010110  00020110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010114  08010114  00020114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  08010118  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003750  20000114  0801022c  00030114  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003864  0801022c  00033864  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030114  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026d12  00000000  00000000  00030144  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000048d7  00000000  00000000  00056e56  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022a8  00000000  00000000  0005b730  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002070  00000000  00000000  0005d9d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002bad5  00000000  00000000  0005fa48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c382  00000000  00000000  0008b51d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010e41d  00000000  00000000  000a789f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b5cbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009884  00000000  00000000  001b5d38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000114 	.word	0x20000114
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d6bc 	.word	0x0800d6bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000118 	.word	0x20000118
 800020c:	0800d6bc 	.word	0x0800d6bc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b972 	b.w	8000d88 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9e08      	ldr	r6, [sp, #32]
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	4688      	mov	r8, r1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d14b      	bne.n	8000b62 <__udivmoddi4+0xa6>
 8000aca:	428a      	cmp	r2, r1
 8000acc:	4615      	mov	r5, r2
 8000ace:	d967      	bls.n	8000ba0 <__udivmoddi4+0xe4>
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0720 	rsb	r7, r2, #32
 8000ada:	fa01 f302 	lsl.w	r3, r1, r2
 8000ade:	fa20 f707 	lsr.w	r7, r0, r7
 8000ae2:	4095      	lsls	r5, r2
 8000ae4:	ea47 0803 	orr.w	r8, r7, r3
 8000ae8:	4094      	lsls	r4, r2
 8000aea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aee:	0c23      	lsrs	r3, r4, #16
 8000af0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000af4:	fa1f fc85 	uxth.w	ip, r5
 8000af8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000afc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b00:	fb07 f10c 	mul.w	r1, r7, ip
 8000b04:	4299      	cmp	r1, r3
 8000b06:	d909      	bls.n	8000b1c <__udivmoddi4+0x60>
 8000b08:	18eb      	adds	r3, r5, r3
 8000b0a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b0e:	f080 811b 	bcs.w	8000d48 <__udivmoddi4+0x28c>
 8000b12:	4299      	cmp	r1, r3
 8000b14:	f240 8118 	bls.w	8000d48 <__udivmoddi4+0x28c>
 8000b18:	3f02      	subs	r7, #2
 8000b1a:	442b      	add	r3, r5
 8000b1c:	1a5b      	subs	r3, r3, r1
 8000b1e:	b2a4      	uxth	r4, r4
 8000b20:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b24:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b2c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b30:	45a4      	cmp	ip, r4
 8000b32:	d909      	bls.n	8000b48 <__udivmoddi4+0x8c>
 8000b34:	192c      	adds	r4, r5, r4
 8000b36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3a:	f080 8107 	bcs.w	8000d4c <__udivmoddi4+0x290>
 8000b3e:	45a4      	cmp	ip, r4
 8000b40:	f240 8104 	bls.w	8000d4c <__udivmoddi4+0x290>
 8000b44:	3802      	subs	r0, #2
 8000b46:	442c      	add	r4, r5
 8000b48:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b4c:	eba4 040c 	sub.w	r4, r4, ip
 8000b50:	2700      	movs	r7, #0
 8000b52:	b11e      	cbz	r6, 8000b5c <__udivmoddi4+0xa0>
 8000b54:	40d4      	lsrs	r4, r2
 8000b56:	2300      	movs	r3, #0
 8000b58:	e9c6 4300 	strd	r4, r3, [r6]
 8000b5c:	4639      	mov	r1, r7
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d909      	bls.n	8000b7a <__udivmoddi4+0xbe>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	f000 80eb 	beq.w	8000d42 <__udivmoddi4+0x286>
 8000b6c:	2700      	movs	r7, #0
 8000b6e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b72:	4638      	mov	r0, r7
 8000b74:	4639      	mov	r1, r7
 8000b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7a:	fab3 f783 	clz	r7, r3
 8000b7e:	2f00      	cmp	r7, #0
 8000b80:	d147      	bne.n	8000c12 <__udivmoddi4+0x156>
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xd0>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 80fa 	bhi.w	8000d80 <__udivmoddi4+0x2c4>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4698      	mov	r8, r3
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d0e0      	beq.n	8000b5c <__udivmoddi4+0xa0>
 8000b9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b9e:	e7dd      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000ba0:	b902      	cbnz	r2, 8000ba4 <__udivmoddi4+0xe8>
 8000ba2:	deff      	udf	#255	; 0xff
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	2a00      	cmp	r2, #0
 8000baa:	f040 808f 	bne.w	8000ccc <__udivmoddi4+0x210>
 8000bae:	1b49      	subs	r1, r1, r5
 8000bb0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bb4:	fa1f f885 	uxth.w	r8, r5
 8000bb8:	2701      	movs	r7, #1
 8000bba:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bbe:	0c23      	lsrs	r3, r4, #16
 8000bc0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bcc:	4299      	cmp	r1, r3
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x124>
 8000bd0:	18eb      	adds	r3, r5, r3
 8000bd2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x122>
 8000bd8:	4299      	cmp	r1, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2bc>
 8000bde:	4684      	mov	ip, r0
 8000be0:	1a59      	subs	r1, r3, r1
 8000be2:	b2a3      	uxth	r3, r4
 8000be4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000be8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bf0:	fb08 f800 	mul.w	r8, r8, r0
 8000bf4:	45a0      	cmp	r8, r4
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x14c>
 8000bf8:	192c      	adds	r4, r5, r4
 8000bfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x14a>
 8000c00:	45a0      	cmp	r8, r4
 8000c02:	f200 80b6 	bhi.w	8000d72 <__udivmoddi4+0x2b6>
 8000c06:	4618      	mov	r0, r3
 8000c08:	eba4 0408 	sub.w	r4, r4, r8
 8000c0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c10:	e79f      	b.n	8000b52 <__udivmoddi4+0x96>
 8000c12:	f1c7 0c20 	rsb	ip, r7, #32
 8000c16:	40bb      	lsls	r3, r7
 8000c18:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c1c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c20:	fa01 f407 	lsl.w	r4, r1, r7
 8000c24:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c28:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c2c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c30:	4325      	orrs	r5, r4
 8000c32:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c36:	0c2c      	lsrs	r4, r5, #16
 8000c38:	fb08 3319 	mls	r3, r8, r9, r3
 8000c3c:	fa1f fa8e 	uxth.w	sl, lr
 8000c40:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c44:	fb09 f40a 	mul.w	r4, r9, sl
 8000c48:	429c      	cmp	r4, r3
 8000c4a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c4e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c52:	d90b      	bls.n	8000c6c <__udivmoddi4+0x1b0>
 8000c54:	eb1e 0303 	adds.w	r3, lr, r3
 8000c58:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c5c:	f080 8087 	bcs.w	8000d6e <__udivmoddi4+0x2b2>
 8000c60:	429c      	cmp	r4, r3
 8000c62:	f240 8084 	bls.w	8000d6e <__udivmoddi4+0x2b2>
 8000c66:	f1a9 0902 	sub.w	r9, r9, #2
 8000c6a:	4473      	add	r3, lr
 8000c6c:	1b1b      	subs	r3, r3, r4
 8000c6e:	b2ad      	uxth	r5, r5
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c7c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c80:	45a2      	cmp	sl, r4
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x1da>
 8000c84:	eb1e 0404 	adds.w	r4, lr, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	d26b      	bcs.n	8000d66 <__udivmoddi4+0x2aa>
 8000c8e:	45a2      	cmp	sl, r4
 8000c90:	d969      	bls.n	8000d66 <__udivmoddi4+0x2aa>
 8000c92:	3802      	subs	r0, #2
 8000c94:	4474      	add	r4, lr
 8000c96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c9e:	eba4 040a 	sub.w	r4, r4, sl
 8000ca2:	454c      	cmp	r4, r9
 8000ca4:	46c2      	mov	sl, r8
 8000ca6:	464b      	mov	r3, r9
 8000ca8:	d354      	bcc.n	8000d54 <__udivmoddi4+0x298>
 8000caa:	d051      	beq.n	8000d50 <__udivmoddi4+0x294>
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d069      	beq.n	8000d84 <__udivmoddi4+0x2c8>
 8000cb0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cb4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cb8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cbc:	40fd      	lsrs	r5, r7
 8000cbe:	40fc      	lsrs	r4, r7
 8000cc0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cc4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e747      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000ccc:	f1c2 0320 	rsb	r3, r2, #32
 8000cd0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cd4:	4095      	lsls	r5, r2
 8000cd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cda:	fa21 f303 	lsr.w	r3, r1, r3
 8000cde:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce2:	4338      	orrs	r0, r7
 8000ce4:	0c01      	lsrs	r1, r0, #16
 8000ce6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cea:	fa1f f885 	uxth.w	r8, r5
 8000cee:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cf2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf6:	fb07 f308 	mul.w	r3, r7, r8
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	fa04 f402 	lsl.w	r4, r4, r2
 8000d00:	d907      	bls.n	8000d12 <__udivmoddi4+0x256>
 8000d02:	1869      	adds	r1, r5, r1
 8000d04:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d08:	d22f      	bcs.n	8000d6a <__udivmoddi4+0x2ae>
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d92d      	bls.n	8000d6a <__udivmoddi4+0x2ae>
 8000d0e:	3f02      	subs	r7, #2
 8000d10:	4429      	add	r1, r5
 8000d12:	1acb      	subs	r3, r1, r3
 8000d14:	b281      	uxth	r1, r0
 8000d16:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d1a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d22:	fb00 f308 	mul.w	r3, r0, r8
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d907      	bls.n	8000d3a <__udivmoddi4+0x27e>
 8000d2a:	1869      	adds	r1, r5, r1
 8000d2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d30:	d217      	bcs.n	8000d62 <__udivmoddi4+0x2a6>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d915      	bls.n	8000d62 <__udivmoddi4+0x2a6>
 8000d36:	3802      	subs	r0, #2
 8000d38:	4429      	add	r1, r5
 8000d3a:	1ac9      	subs	r1, r1, r3
 8000d3c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d40:	e73b      	b.n	8000bba <__udivmoddi4+0xfe>
 8000d42:	4637      	mov	r7, r6
 8000d44:	4630      	mov	r0, r6
 8000d46:	e709      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000d48:	4607      	mov	r7, r0
 8000d4a:	e6e7      	b.n	8000b1c <__udivmoddi4+0x60>
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	e6fb      	b.n	8000b48 <__udivmoddi4+0x8c>
 8000d50:	4541      	cmp	r1, r8
 8000d52:	d2ab      	bcs.n	8000cac <__udivmoddi4+0x1f0>
 8000d54:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d58:	eb69 020e 	sbc.w	r2, r9, lr
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	4613      	mov	r3, r2
 8000d60:	e7a4      	b.n	8000cac <__udivmoddi4+0x1f0>
 8000d62:	4660      	mov	r0, ip
 8000d64:	e7e9      	b.n	8000d3a <__udivmoddi4+0x27e>
 8000d66:	4618      	mov	r0, r3
 8000d68:	e795      	b.n	8000c96 <__udivmoddi4+0x1da>
 8000d6a:	4667      	mov	r7, ip
 8000d6c:	e7d1      	b.n	8000d12 <__udivmoddi4+0x256>
 8000d6e:	4681      	mov	r9, r0
 8000d70:	e77c      	b.n	8000c6c <__udivmoddi4+0x1b0>
 8000d72:	3802      	subs	r0, #2
 8000d74:	442c      	add	r4, r5
 8000d76:	e747      	b.n	8000c08 <__udivmoddi4+0x14c>
 8000d78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d7c:	442b      	add	r3, r5
 8000d7e:	e72f      	b.n	8000be0 <__udivmoddi4+0x124>
 8000d80:	4638      	mov	r0, r7
 8000d82:	e708      	b.n	8000b96 <__udivmoddi4+0xda>
 8000d84:	4637      	mov	r7, r6
 8000d86:	e6e9      	b.n	8000b5c <__udivmoddi4+0xa0>

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000d96:	20c8      	movs	r0, #200	; 0xc8
 8000d98:	f000 fc32 	bl	8001600 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000d9c:	f000 fa7a 	bl	8001294 <ft5336_I2C_InitializeIfRequired>
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b084      	sub	sp, #16
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000dd4:	f000 fa5e 	bl	8001294 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000dd8:	2300      	movs	r3, #0
 8000dda:	73fb      	strb	r3, [r7, #15]
 8000ddc:	e010      	b.n	8000e00 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	21a8      	movs	r1, #168	; 0xa8
 8000de4:	4618      	mov	r0, r3
 8000de6:	f000 fbed 	bl	80015c4 <TS_IO_Read>
 8000dea:	4603      	mov	r3, r0
 8000dec:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000dee:	7b7b      	ldrb	r3, [r7, #13]
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b51      	cmp	r3, #81	; 0x51
 8000df4:	d101      	bne.n	8000dfa <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000df6:	2301      	movs	r3, #1
 8000df8:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	73fb      	strb	r3, [r7, #15]
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d802      	bhi.n	8000e0c <ft5336_ReadID+0x4e>
 8000e06:	7bbb      	ldrb	r3, [r7, #14]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d0e8      	beq.n	8000dde <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000e0c:	7b7b      	ldrb	r3, [r7, #13]
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	b29b      	uxth	r3, r3
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000e24:	88fb      	ldrh	r3, [r7, #6]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 fa44 	bl	80012b4 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000e2c:	88fb      	ldrh	r3, [r7, #6]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 f932 	bl	8001098 <ft5336_TS_DisableIT>
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2102      	movs	r1, #2
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 fbb7 	bl	80015c4 <TS_IO_Read>
 8000e56:	4603      	mov	r3, r0
 8000e58:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	f003 030f 	and.w	r3, r3, #15
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b05      	cmp	r3, #5
 8000e6c:	d901      	bls.n	8000e72 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <ft5336_TS_DetectTouch+0x50>)
 8000e78:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000e7a:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <ft5336_TS_DetectTouch+0x50>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	b2db      	uxtb	r3, r3
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000130 	.word	0x20000130

08000e90 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
 8000e9c:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000eb2:	4b6d      	ldr	r3, [pc, #436]	; (8001068 <ft5336_TS_GetXY+0x1d8>)
 8000eb4:	789a      	ldrb	r2, [r3, #2]
 8000eb6:	4b6c      	ldr	r3, [pc, #432]	; (8001068 <ft5336_TS_GetXY+0x1d8>)
 8000eb8:	785b      	ldrb	r3, [r3, #1]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	f080 80cf 	bcs.w	800105e <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000ec0:	4b69      	ldr	r3, [pc, #420]	; (8001068 <ft5336_TS_GetXY+0x1d8>)
 8000ec2:	789b      	ldrb	r3, [r3, #2]
 8000ec4:	2b09      	cmp	r3, #9
 8000ec6:	d871      	bhi.n	8000fac <ft5336_TS_GetXY+0x11c>
 8000ec8:	a201      	add	r2, pc, #4	; (adr r2, 8000ed0 <ft5336_TS_GetXY+0x40>)
 8000eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ece:	bf00      	nop
 8000ed0:	08000ef9 	.word	0x08000ef9
 8000ed4:	08000f0b 	.word	0x08000f0b
 8000ed8:	08000f1d 	.word	0x08000f1d
 8000edc:	08000f2f 	.word	0x08000f2f
 8000ee0:	08000f41 	.word	0x08000f41
 8000ee4:	08000f53 	.word	0x08000f53
 8000ee8:	08000f65 	.word	0x08000f65
 8000eec:	08000f77 	.word	0x08000f77
 8000ef0:	08000f89 	.word	0x08000f89
 8000ef4:	08000f9b 	.word	0x08000f9b
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000ef8:	2304      	movs	r3, #4
 8000efa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000efc:	2303      	movs	r3, #3
 8000efe:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000f00:	2306      	movs	r3, #6
 8000f02:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000f04:	2305      	movs	r3, #5
 8000f06:	753b      	strb	r3, [r7, #20]
      break;
 8000f08:	e051      	b.n	8000fae <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000f0a:	230a      	movs	r3, #10
 8000f0c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000f0e:	2309      	movs	r3, #9
 8000f10:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000f12:	230c      	movs	r3, #12
 8000f14:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8000f16:	230b      	movs	r3, #11
 8000f18:	753b      	strb	r3, [r7, #20]
      break;
 8000f1a:	e048      	b.n	8000fae <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000f1c:	2310      	movs	r3, #16
 8000f1e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000f20:	230f      	movs	r3, #15
 8000f22:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000f24:	2312      	movs	r3, #18
 8000f26:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8000f28:	2311      	movs	r3, #17
 8000f2a:	753b      	strb	r3, [r7, #20]
      break;
 8000f2c:	e03f      	b.n	8000fae <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000f2e:	2316      	movs	r3, #22
 8000f30:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000f32:	2315      	movs	r3, #21
 8000f34:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8000f36:	2318      	movs	r3, #24
 8000f38:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8000f3a:	2317      	movs	r3, #23
 8000f3c:	753b      	strb	r3, [r7, #20]
      break;
 8000f3e:	e036      	b.n	8000fae <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000f40:	231c      	movs	r3, #28
 8000f42:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000f44:	231b      	movs	r3, #27
 8000f46:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8000f48:	231e      	movs	r3, #30
 8000f4a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000f4c:	231d      	movs	r3, #29
 8000f4e:	753b      	strb	r3, [r7, #20]
      break;
 8000f50:	e02d      	b.n	8000fae <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000f52:	2322      	movs	r3, #34	; 0x22
 8000f54:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8000f56:	2321      	movs	r3, #33	; 0x21
 8000f58:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8000f5a:	2324      	movs	r3, #36	; 0x24
 8000f5c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000f5e:	2323      	movs	r3, #35	; 0x23
 8000f60:	753b      	strb	r3, [r7, #20]
      break;
 8000f62:	e024      	b.n	8000fae <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000f64:	2328      	movs	r3, #40	; 0x28
 8000f66:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000f68:	2327      	movs	r3, #39	; 0x27
 8000f6a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000f6c:	232a      	movs	r3, #42	; 0x2a
 8000f6e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000f70:	2329      	movs	r3, #41	; 0x29
 8000f72:	753b      	strb	r3, [r7, #20]
      break;
 8000f74:	e01b      	b.n	8000fae <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000f76:	232e      	movs	r3, #46	; 0x2e
 8000f78:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8000f7a:	232d      	movs	r3, #45	; 0x2d
 8000f7c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8000f7e:	2330      	movs	r3, #48	; 0x30
 8000f80:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000f82:	232f      	movs	r3, #47	; 0x2f
 8000f84:	753b      	strb	r3, [r7, #20]
      break;
 8000f86:	e012      	b.n	8000fae <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000f88:	2334      	movs	r3, #52	; 0x34
 8000f8a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000f8c:	2333      	movs	r3, #51	; 0x33
 8000f8e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000f90:	2336      	movs	r3, #54	; 0x36
 8000f92:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000f94:	2335      	movs	r3, #53	; 0x35
 8000f96:	753b      	strb	r3, [r7, #20]
      break;
 8000f98:	e009      	b.n	8000fae <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000f9a:	233a      	movs	r3, #58	; 0x3a
 8000f9c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8000f9e:	2339      	movs	r3, #57	; 0x39
 8000fa0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000fa2:	233c      	movs	r3, #60	; 0x3c
 8000fa4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000fa6:	233b      	movs	r3, #59	; 0x3b
 8000fa8:	753b      	strb	r3, [r7, #20]
      break;
 8000faa:	e000      	b.n	8000fae <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000fac:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000fae:	89fb      	ldrh	r3, [r7, #14]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	7dfa      	ldrb	r2, [r7, #23]
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 fb04 	bl	80015c4 <TS_IO_Read>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000fc0:	7cfb      	ldrb	r3, [r7, #19]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	4b29      	ldr	r3, [pc, #164]	; (800106c <ft5336_TS_GetXY+0x1dc>)
 8000fc8:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000fca:	89fb      	ldrh	r3, [r7, #14]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	7dba      	ldrb	r2, [r7, #22]
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 faf6 	bl	80015c4 <TS_IO_Read>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000fdc:	7cfb      	ldrb	r3, [r7, #19]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	021b      	lsls	r3, r3, #8
 8000fe2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000fe6:	b21a      	sxth	r2, r3
 8000fe8:	4b20      	ldr	r3, [pc, #128]	; (800106c <ft5336_TS_GetXY+0x1dc>)
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	; (800106c <ft5336_TS_GetXY+0x1dc>)
 8000ff6:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000ff8:	4b1c      	ldr	r3, [pc, #112]	; (800106c <ft5336_TS_GetXY+0x1dc>)
 8000ffa:	881a      	ldrh	r2, [r3, #0]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8001000:	89fb      	ldrh	r3, [r7, #14]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	7d7a      	ldrb	r2, [r7, #21]
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f000 fadb 	bl	80015c4 <TS_IO_Read>
 800100e:	4603      	mov	r3, r0
 8001010:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001012:	7cfb      	ldrb	r3, [r7, #19]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	b29a      	uxth	r2, r3
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <ft5336_TS_GetXY+0x1dc>)
 800101a:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800101c:	89fb      	ldrh	r3, [r7, #14]
 800101e:	b2db      	uxtb	r3, r3
 8001020:	7d3a      	ldrb	r2, [r7, #20]
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f000 facd 	bl	80015c4 <TS_IO_Read>
 800102a:	4603      	mov	r3, r0
 800102c:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800102e:	7cfb      	ldrb	r3, [r7, #19]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	021b      	lsls	r3, r3, #8
 8001034:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001038:	b21a      	sxth	r2, r3
 800103a:	4b0c      	ldr	r3, [pc, #48]	; (800106c <ft5336_TS_GetXY+0x1dc>)
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	b21b      	sxth	r3, r3
 8001040:	4313      	orrs	r3, r2
 8001042:	b21b      	sxth	r3, r3
 8001044:	b29a      	uxth	r2, r3
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <ft5336_TS_GetXY+0x1dc>)
 8001048:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <ft5336_TS_GetXY+0x1dc>)
 800104c:	881a      	ldrh	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8001052:	4b05      	ldr	r3, [pc, #20]	; (8001068 <ft5336_TS_GetXY+0x1d8>)
 8001054:	789b      	ldrb	r3, [r3, #2]
 8001056:	3301      	adds	r3, #1
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4b03      	ldr	r3, [pc, #12]	; (8001068 <ft5336_TS_GetXY+0x1d8>)
 800105c:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800105e:	bf00      	nop
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000130 	.word	0x20000130
 800106c:	20000134 	.word	0x20000134

08001070 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800107e:	2301      	movs	r3, #1
 8001080:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001082:	88fb      	ldrh	r3, [r7, #6]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	7bfa      	ldrb	r2, [r7, #15]
 8001088:	21a4      	movs	r1, #164	; 0xa4
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fa80 	bl	8001590 <TS_IO_Write>
}
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80010a6:	2300      	movs	r3, #0
 80010a8:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80010aa:	88fb      	ldrh	r3, [r7, #6]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	7bfa      	ldrb	r2, [r7, #15]
 80010b0:	21a4      	movs	r1, #164	; 0xa4
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 fa6c 	bl	8001590 <TS_IO_Write>
}
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b084      	sub	sp, #16
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	6039      	str	r1, [r7, #0]
 80010f8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80010fe:	88fb      	ldrh	r3, [r7, #6]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2101      	movs	r1, #1
 8001104:	4618      	mov	r0, r3
 8001106:	f000 fa5d 	bl	80015c4 <TS_IO_Read>
 800110a:	4603      	mov	r3, r0
 800110c:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	461a      	mov	r2, r3
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	601a      	str	r2, [r3, #0]
}
 8001118:	bf00      	nop
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	4603      	mov	r3, r0
 800112e:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8001140:	4b4d      	ldr	r3, [pc, #308]	; (8001278 <ft5336_TS_GetTouchInfo+0x158>)
 8001142:	785b      	ldrb	r3, [r3, #1]
 8001144:	461a      	mov	r2, r3
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	4293      	cmp	r3, r2
 800114a:	f080 8090 	bcs.w	800126e <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	2b09      	cmp	r3, #9
 8001152:	d85d      	bhi.n	8001210 <ft5336_TS_GetTouchInfo+0xf0>
 8001154:	a201      	add	r2, pc, #4	; (adr r2, 800115c <ft5336_TS_GetTouchInfo+0x3c>)
 8001156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115a:	bf00      	nop
 800115c:	08001185 	.word	0x08001185
 8001160:	08001193 	.word	0x08001193
 8001164:	080011a1 	.word	0x080011a1
 8001168:	080011af 	.word	0x080011af
 800116c:	080011bd 	.word	0x080011bd
 8001170:	080011cb 	.word	0x080011cb
 8001174:	080011d9 	.word	0x080011d9
 8001178:	080011e7 	.word	0x080011e7
 800117c:	080011f5 	.word	0x080011f5
 8001180:	08001203 	.word	0x08001203
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8001184:	2303      	movs	r3, #3
 8001186:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8001188:	2307      	movs	r3, #7
 800118a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 800118c:	2308      	movs	r3, #8
 800118e:	757b      	strb	r3, [r7, #21]
      break;
 8001190:	e03f      	b.n	8001212 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8001192:	2309      	movs	r3, #9
 8001194:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8001196:	230d      	movs	r3, #13
 8001198:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 800119a:	230e      	movs	r3, #14
 800119c:	757b      	strb	r3, [r7, #21]
      break;
 800119e:	e038      	b.n	8001212 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 80011a0:	230f      	movs	r3, #15
 80011a2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 80011a4:	2313      	movs	r3, #19
 80011a6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 80011a8:	2314      	movs	r3, #20
 80011aa:	757b      	strb	r3, [r7, #21]
      break;
 80011ac:	e031      	b.n	8001212 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 80011ae:	2315      	movs	r3, #21
 80011b0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 80011b2:	2319      	movs	r3, #25
 80011b4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 80011b6:	231a      	movs	r3, #26
 80011b8:	757b      	strb	r3, [r7, #21]
      break;
 80011ba:	e02a      	b.n	8001212 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 80011bc:	231b      	movs	r3, #27
 80011be:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 80011c0:	231f      	movs	r3, #31
 80011c2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 80011c4:	2320      	movs	r3, #32
 80011c6:	757b      	strb	r3, [r7, #21]
      break;
 80011c8:	e023      	b.n	8001212 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 80011ca:	2321      	movs	r3, #33	; 0x21
 80011cc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 80011ce:	2325      	movs	r3, #37	; 0x25
 80011d0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 80011d2:	2326      	movs	r3, #38	; 0x26
 80011d4:	757b      	strb	r3, [r7, #21]
      break;
 80011d6:	e01c      	b.n	8001212 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 80011d8:	2327      	movs	r3, #39	; 0x27
 80011da:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 80011dc:	232b      	movs	r3, #43	; 0x2b
 80011de:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 80011e0:	232c      	movs	r3, #44	; 0x2c
 80011e2:	757b      	strb	r3, [r7, #21]
      break;
 80011e4:	e015      	b.n	8001212 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 80011e6:	232d      	movs	r3, #45	; 0x2d
 80011e8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 80011ea:	2331      	movs	r3, #49	; 0x31
 80011ec:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 80011ee:	2332      	movs	r3, #50	; 0x32
 80011f0:	757b      	strb	r3, [r7, #21]
      break;
 80011f2:	e00e      	b.n	8001212 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 80011f4:	2333      	movs	r3, #51	; 0x33
 80011f6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 80011f8:	2337      	movs	r3, #55	; 0x37
 80011fa:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 80011fc:	2338      	movs	r3, #56	; 0x38
 80011fe:	757b      	strb	r3, [r7, #21]
      break;
 8001200:	e007      	b.n	8001212 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8001202:	2339      	movs	r3, #57	; 0x39
 8001204:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8001206:	233d      	movs	r3, #61	; 0x3d
 8001208:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 800120a:	233e      	movs	r3, #62	; 0x3e
 800120c:	757b      	strb	r3, [r7, #21]
      break;
 800120e:	e000      	b.n	8001212 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8001210:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001212:	89fb      	ldrh	r3, [r7, #14]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	7dfa      	ldrb	r2, [r7, #23]
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f000 f9d2 	bl	80015c4 <TS_IO_Read>
 8001220:	4603      	mov	r3, r0
 8001222:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8001224:	7d3b      	ldrb	r3, [r7, #20]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	119b      	asrs	r3, r3, #6
 800122a:	f003 0203 	and.w	r2, r3, #3
 800122e:	6a3b      	ldr	r3, [r7, #32]
 8001230:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8001232:	89fb      	ldrh	r3, [r7, #14]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	7dba      	ldrb	r2, [r7, #22]
 8001238:	4611      	mov	r1, r2
 800123a:	4618      	mov	r0, r3
 800123c:	f000 f9c2 	bl	80015c4 <TS_IO_Read>
 8001240:	4603      	mov	r3, r0
 8001242:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8001244:	7d3b      	ldrb	r3, [r7, #20]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	461a      	mov	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 800124e:	89fb      	ldrh	r3, [r7, #14]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	7d7a      	ldrb	r2, [r7, #21]
 8001254:	4611      	mov	r1, r2
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f9b4 	bl	80015c4 <TS_IO_Read>
 800125c:	4603      	mov	r3, r0
 800125e:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8001260:	7d3b      	ldrb	r3, [r7, #20]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	111b      	asrs	r3, r3, #4
 8001266:	f003 0204 	and.w	r2, r3, #4
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000130 	.word	0x20000130

0800127c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8001280:	4b03      	ldr	r3, [pc, #12]	; (8001290 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8001282:	781b      	ldrb	r3, [r3, #0]
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000130 	.word	0x20000130

08001294 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8001298:	f7ff fff0 	bl	800127c <ft5336_Get_I2C_InitializedStatus>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d104      	bne.n	80012ac <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80012a2:	f000 f96b 	bl	800157c <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80012a6:	4b02      	ldr	r3, [pc, #8]	; (80012b0 <ft5336_I2C_InitializeIfRequired+0x1c>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	701a      	strb	r2, [r3, #0]
  }
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000130 	.word	0x20000130

080012b4 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80012c2:	68fb      	ldr	r3, [r7, #12]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08c      	sub	sp, #48	; 0x30
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a51      	ldr	r2, [pc, #324]	; (8001420 <I2Cx_MspInit+0x150>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d14d      	bne.n	800137c <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80012e0:	4b50      	ldr	r3, [pc, #320]	; (8001424 <I2Cx_MspInit+0x154>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e4:	4a4f      	ldr	r2, [pc, #316]	; (8001424 <I2Cx_MspInit+0x154>)
 80012e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ea:	6313      	str	r3, [r2, #48]	; 0x30
 80012ec:	4b4d      	ldr	r3, [pc, #308]	; (8001424 <I2Cx_MspInit+0x154>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012f4:	61bb      	str	r3, [r7, #24]
 80012f6:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80012fc:	2312      	movs	r3, #18
 80012fe:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001304:	2302      	movs	r3, #2
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001308:	2304      	movs	r3, #4
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	4845      	ldr	r0, [pc, #276]	; (8001428 <I2Cx_MspInit+0x158>)
 8001314:	f003 fdc2 	bl	8004e9c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001318:	f44f 7380 	mov.w	r3, #256	; 0x100
 800131c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	4619      	mov	r1, r3
 8001324:	4840      	ldr	r0, [pc, #256]	; (8001428 <I2Cx_MspInit+0x158>)
 8001326:	f003 fdb9 	bl	8004e9c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800132a:	4b3e      	ldr	r3, [pc, #248]	; (8001424 <I2Cx_MspInit+0x154>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	4a3d      	ldr	r2, [pc, #244]	; (8001424 <I2Cx_MspInit+0x154>)
 8001330:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001334:	6413      	str	r3, [r2, #64]	; 0x40
 8001336:	4b3b      	ldr	r3, [pc, #236]	; (8001424 <I2Cx_MspInit+0x154>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8001342:	4b38      	ldr	r3, [pc, #224]	; (8001424 <I2Cx_MspInit+0x154>)
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	4a37      	ldr	r2, [pc, #220]	; (8001424 <I2Cx_MspInit+0x154>)
 8001348:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800134c:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800134e:	4b35      	ldr	r3, [pc, #212]	; (8001424 <I2Cx_MspInit+0x154>)
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	4a34      	ldr	r2, [pc, #208]	; (8001424 <I2Cx_MspInit+0x154>)
 8001354:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001358:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	210f      	movs	r1, #15
 800135e:	2048      	movs	r0, #72	; 0x48
 8001360:	f002 fd83 	bl	8003e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8001364:	2048      	movs	r0, #72	; 0x48
 8001366:	f002 fd9c 	bl	8003ea2 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	210f      	movs	r1, #15
 800136e:	2049      	movs	r0, #73	; 0x49
 8001370:	f002 fd7b 	bl	8003e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8001374:	2049      	movs	r0, #73	; 0x49
 8001376:	f002 fd94 	bl	8003ea2 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800137a:	e04d      	b.n	8001418 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800137c:	4b29      	ldr	r3, [pc, #164]	; (8001424 <I2Cx_MspInit+0x154>)
 800137e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001380:	4a28      	ldr	r2, [pc, #160]	; (8001424 <I2Cx_MspInit+0x154>)
 8001382:	f043 0302 	orr.w	r3, r3, #2
 8001386:	6313      	str	r3, [r2, #48]	; 0x30
 8001388:	4b26      	ldr	r3, [pc, #152]	; (8001424 <I2Cx_MspInit+0x154>)
 800138a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8001394:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001398:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800139a:	2312      	movs	r3, #18
 800139c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80013a2:	2302      	movs	r3, #2
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80013a6:	2304      	movs	r3, #4
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80013aa:	f107 031c 	add.w	r3, r7, #28
 80013ae:	4619      	mov	r1, r3
 80013b0:	481e      	ldr	r0, [pc, #120]	; (800142c <I2Cx_MspInit+0x15c>)
 80013b2:	f003 fd73 	bl	8004e9c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80013b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4619      	mov	r1, r3
 80013c2:	481a      	ldr	r0, [pc, #104]	; (800142c <I2Cx_MspInit+0x15c>)
 80013c4:	f003 fd6a 	bl	8004e9c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80013c8:	4b16      	ldr	r3, [pc, #88]	; (8001424 <I2Cx_MspInit+0x154>)
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	4a15      	ldr	r2, [pc, #84]	; (8001424 <I2Cx_MspInit+0x154>)
 80013ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013d2:	6413      	str	r3, [r2, #64]	; 0x40
 80013d4:	4b13      	ldr	r3, [pc, #76]	; (8001424 <I2Cx_MspInit+0x154>)
 80013d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80013e0:	4b10      	ldr	r3, [pc, #64]	; (8001424 <I2Cx_MspInit+0x154>)
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	4a0f      	ldr	r2, [pc, #60]	; (8001424 <I2Cx_MspInit+0x154>)
 80013e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013ea:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80013ec:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <I2Cx_MspInit+0x154>)
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	4a0c      	ldr	r2, [pc, #48]	; (8001424 <I2Cx_MspInit+0x154>)
 80013f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80013f6:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80013f8:	2200      	movs	r2, #0
 80013fa:	210f      	movs	r1, #15
 80013fc:	201f      	movs	r0, #31
 80013fe:	f002 fd34 	bl	8003e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8001402:	201f      	movs	r0, #31
 8001404:	f002 fd4d 	bl	8003ea2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	210f      	movs	r1, #15
 800140c:	2020      	movs	r0, #32
 800140e:	f002 fd2c 	bl	8003e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8001412:	2020      	movs	r0, #32
 8001414:	f002 fd45 	bl	8003ea2 <HAL_NVIC_EnableIRQ>
}
 8001418:	bf00      	nop
 800141a:	3730      	adds	r7, #48	; 0x30
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000138 	.word	0x20000138
 8001424:	40023800 	.word	0x40023800
 8001428:	40021c00 	.word	0x40021c00
 800142c:	40020400 	.word	0x40020400

08001430 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f004 f9f5 	bl	8005828 <HAL_I2C_GetState>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d125      	bne.n	8001490 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a14      	ldr	r2, [pc, #80]	; (8001498 <I2Cx_Init+0x68>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d103      	bne.n	8001454 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a13      	ldr	r2, [pc, #76]	; (800149c <I2Cx_Init+0x6c>)
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	e002      	b.n	800145a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <I2Cx_Init+0x70>)
 8001458:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a11      	ldr	r2, [pc, #68]	; (80014a4 <I2Cx_Init+0x74>)
 800145e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2201      	movs	r2, #1
 800146a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ff23 	bl	80012d0 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f003 feca 	bl	8005224 <HAL_I2C_Init>
  }
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000138 	.word	0x20000138
 800149c:	40005c00 	.word	0x40005c00
 80014a0:	40005400 	.word	0x40005400
 80014a4:	40912732 	.word	0x40912732

080014a8 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	; 0x28
 80014ac:	af04      	add	r7, sp, #16
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	4608      	mov	r0, r1
 80014b2:	4611      	mov	r1, r2
 80014b4:	461a      	mov	r2, r3
 80014b6:	4603      	mov	r3, r0
 80014b8:	72fb      	strb	r3, [r7, #11]
 80014ba:	460b      	mov	r3, r1
 80014bc:	813b      	strh	r3, [r7, #8]
 80014be:	4613      	mov	r3, r2
 80014c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80014c2:	2300      	movs	r3, #0
 80014c4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80014c6:	7afb      	ldrb	r3, [r7, #11]
 80014c8:	b299      	uxth	r1, r3
 80014ca:	88f8      	ldrh	r0, [r7, #6]
 80014cc:	893a      	ldrh	r2, [r7, #8]
 80014ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d2:	9302      	str	r3, [sp, #8]
 80014d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80014d6:	9301      	str	r3, [sp, #4]
 80014d8:	6a3b      	ldr	r3, [r7, #32]
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	4603      	mov	r3, r0
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f004 f888 	bl	80055f4 <HAL_I2C_Mem_Read>
 80014e4:	4603      	mov	r3, r0
 80014e6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80014e8:	7dfb      	ldrb	r3, [r7, #23]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d004      	beq.n	80014f8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80014ee:	7afb      	ldrb	r3, [r7, #11]
 80014f0:	4619      	mov	r1, r3
 80014f2:	68f8      	ldr	r0, [r7, #12]
 80014f4:	f000 f832 	bl	800155c <I2Cx_Error>
  }
  return status;    
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b08a      	sub	sp, #40	; 0x28
 8001506:	af04      	add	r7, sp, #16
 8001508:	60f8      	str	r0, [r7, #12]
 800150a:	4608      	mov	r0, r1
 800150c:	4611      	mov	r1, r2
 800150e:	461a      	mov	r2, r3
 8001510:	4603      	mov	r3, r0
 8001512:	72fb      	strb	r3, [r7, #11]
 8001514:	460b      	mov	r3, r1
 8001516:	813b      	strh	r3, [r7, #8]
 8001518:	4613      	mov	r3, r2
 800151a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800151c:	2300      	movs	r3, #0
 800151e:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001520:	7afb      	ldrb	r3, [r7, #11]
 8001522:	b299      	uxth	r1, r3
 8001524:	88f8      	ldrh	r0, [r7, #6]
 8001526:	893a      	ldrh	r2, [r7, #8]
 8001528:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152c:	9302      	str	r3, [sp, #8]
 800152e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001530:	9301      	str	r3, [sp, #4]
 8001532:	6a3b      	ldr	r3, [r7, #32]
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	4603      	mov	r3, r0
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f003 ff47 	bl	80053cc <HAL_I2C_Mem_Write>
 800153e:	4603      	mov	r3, r0
 8001540:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001542:	7dfb      	ldrb	r3, [r7, #23]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d004      	beq.n	8001552 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001548:	7afb      	ldrb	r3, [r7, #11]
 800154a:	4619      	mov	r1, r3
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f000 f805 	bl	800155c <I2Cx_Error>
  }
  return status;
 8001552:	7dfb      	ldrb	r3, [r7, #23]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f003 feeb 	bl	8005344 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff ff5e 	bl	8001430 <I2Cx_Init>
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8001580:	4802      	ldr	r0, [pc, #8]	; (800158c <TS_IO_Init+0x10>)
 8001582:	f7ff ff55 	bl	8001430 <I2Cx_Init>
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000138 	.word	0x20000138

08001590 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af02      	add	r7, sp, #8
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
 800159a:	460b      	mov	r3, r1
 800159c:	71bb      	strb	r3, [r7, #6]
 800159e:	4613      	mov	r3, r2
 80015a0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80015a2:	79bb      	ldrb	r3, [r7, #6]
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	79f9      	ldrb	r1, [r7, #7]
 80015a8:	2301      	movs	r3, #1
 80015aa:	9301      	str	r3, [sp, #4]
 80015ac:	1d7b      	adds	r3, r7, #5
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	2301      	movs	r3, #1
 80015b2:	4803      	ldr	r0, [pc, #12]	; (80015c0 <TS_IO_Write+0x30>)
 80015b4:	f7ff ffa5 	bl	8001502 <I2Cx_WriteMultiple>
}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000138 	.word	0x20000138

080015c4 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af02      	add	r7, sp, #8
 80015ca:	4603      	mov	r3, r0
 80015cc:	460a      	mov	r2, r1
 80015ce:	71fb      	strb	r3, [r7, #7]
 80015d0:	4613      	mov	r3, r2
 80015d2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80015d8:	79bb      	ldrb	r3, [r7, #6]
 80015da:	b29a      	uxth	r2, r3
 80015dc:	79f9      	ldrb	r1, [r7, #7]
 80015de:	2301      	movs	r3, #1
 80015e0:	9301      	str	r3, [sp, #4]
 80015e2:	f107 030f 	add.w	r3, r7, #15
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	2301      	movs	r3, #1
 80015ea:	4804      	ldr	r0, [pc, #16]	; (80015fc <TS_IO_Read+0x38>)
 80015ec:	f7ff ff5c 	bl	80014a8 <I2Cx_ReadMultiple>

  return read_value;
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000138 	.word	0x20000138

08001600 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f001 fd25 	bl	8003058 <HAL_Delay>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800161c:	4b31      	ldr	r3, [pc, #196]	; (80016e4 <BSP_LCD_Init+0xcc>)
 800161e:	2228      	movs	r2, #40	; 0x28
 8001620:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8001622:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <BSP_LCD_Init+0xcc>)
 8001624:	2209      	movs	r2, #9
 8001626:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001628:	4b2e      	ldr	r3, [pc, #184]	; (80016e4 <BSP_LCD_Init+0xcc>)
 800162a:	2235      	movs	r2, #53	; 0x35
 800162c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800162e:	4b2d      	ldr	r3, [pc, #180]	; (80016e4 <BSP_LCD_Init+0xcc>)
 8001630:	220b      	movs	r2, #11
 8001632:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001634:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <BSP_LCD_Init+0xcc>)
 8001636:	f240 121b 	movw	r2, #283	; 0x11b
 800163a:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800163c:	4b29      	ldr	r3, [pc, #164]	; (80016e4 <BSP_LCD_Init+0xcc>)
 800163e:	f240 2215 	movw	r2, #533	; 0x215
 8001642:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8001644:	4b27      	ldr	r3, [pc, #156]	; (80016e4 <BSP_LCD_Init+0xcc>)
 8001646:	f240 121d 	movw	r2, #285	; 0x11d
 800164a:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800164c:	4b25      	ldr	r3, [pc, #148]	; (80016e4 <BSP_LCD_Init+0xcc>)
 800164e:	f240 2235 	movw	r2, #565	; 0x235
 8001652:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8001654:	2100      	movs	r1, #0
 8001656:	4823      	ldr	r0, [pc, #140]	; (80016e4 <BSP_LCD_Init+0xcc>)
 8001658:	f000 ff6a 	bl	8002530 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800165c:	4b21      	ldr	r3, [pc, #132]	; (80016e4 <BSP_LCD_Init+0xcc>)
 800165e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001662:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8001664:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <BSP_LCD_Init+0xcc>)
 8001666:	f44f 7288 	mov.w	r2, #272	; 0x110
 800166a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800166c:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <BSP_LCD_Init+0xcc>)
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8001674:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <BSP_LCD_Init+0xcc>)
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 800167c:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <BSP_LCD_Init+0xcc>)
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001684:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <BSP_LCD_Init+0xcc>)
 8001686:	2200      	movs	r2, #0
 8001688:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800168a:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <BSP_LCD_Init+0xcc>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8001690:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <BSP_LCD_Init+0xcc>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001696:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <BSP_LCD_Init+0xcc>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <BSP_LCD_Init+0xcc>)
 800169e:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <BSP_LCD_Init+0xd0>)
 80016a0:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80016a2:	4810      	ldr	r0, [pc, #64]	; (80016e4 <BSP_LCD_Init+0xcc>)
 80016a4:	f004 fcba 	bl	800601c <HAL_LTDC_GetState>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d103      	bne.n	80016b6 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80016ae:	2100      	movs	r1, #0
 80016b0:	480c      	ldr	r0, [pc, #48]	; (80016e4 <BSP_LCD_Init+0xcc>)
 80016b2:	f000 fe63 	bl	800237c <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80016b6:	480b      	ldr	r0, [pc, #44]	; (80016e4 <BSP_LCD_Init+0xcc>)
 80016b8:	f004 fae0 	bl	8005c7c <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80016bc:	2201      	movs	r2, #1
 80016be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016c2:	480a      	ldr	r0, [pc, #40]	; (80016ec <BSP_LCD_Init+0xd4>)
 80016c4:	f003 fd94 	bl	80051f0 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80016c8:	2201      	movs	r2, #1
 80016ca:	2108      	movs	r1, #8
 80016cc:	4808      	ldr	r0, [pc, #32]	; (80016f0 <BSP_LCD_Init+0xd8>)
 80016ce:	f003 fd8f 	bl	80051f0 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80016d2:	f001 f84d 	bl	8002770 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80016d6:	4807      	ldr	r0, [pc, #28]	; (80016f4 <BSP_LCD_Init+0xdc>)
 80016d8:	f000 f8d8 	bl	800188c <BSP_LCD_SetFont>
  
  return LCD_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000370 	.word	0x20000370
 80016e8:	40016800 	.word	0x40016800
 80016ec:	40022000 	.word	0x40022000
 80016f0:	40022800 	.word	0x40022800
 80016f4:	20000028 	.word	0x20000028

080016f8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <BSP_LCD_GetXSize+0x20>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a06      	ldr	r2, [pc, #24]	; (800171c <BSP_LCD_GetXSize+0x24>)
 8001702:	2134      	movs	r1, #52	; 0x34
 8001704:	fb01 f303 	mul.w	r3, r1, r3
 8001708:	4413      	add	r3, r2
 800170a:	3360      	adds	r3, #96	; 0x60
 800170c:	681b      	ldr	r3, [r3, #0]
}
 800170e:	4618      	mov	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	200001c4 	.word	0x200001c4
 800171c:	20000370 	.word	0x20000370

08001720 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <BSP_LCD_GetYSize+0x20>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a06      	ldr	r2, [pc, #24]	; (8001744 <BSP_LCD_GetYSize+0x24>)
 800172a:	2134      	movs	r1, #52	; 0x34
 800172c:	fb01 f303 	mul.w	r3, r1, r3
 8001730:	4413      	add	r3, r2
 8001732:	3364      	adds	r3, #100	; 0x64
 8001734:	681b      	ldr	r3, [r3, #0]
}
 8001736:	4618      	mov	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	200001c4 	.word	0x200001c4
 8001744:	20000370 	.word	0x20000370

08001748 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001748:	b580      	push	{r7, lr}
 800174a:	b090      	sub	sp, #64	; 0x40
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	6039      	str	r1, [r7, #0]
 8001752:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8001758:	f7ff ffce 	bl	80016f8 <BSP_LCD_GetXSize>
 800175c:	4603      	mov	r3, r0
 800175e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001764:	f7ff ffdc 	bl	8001720 <BSP_LCD_GetYSize>
 8001768:	4603      	mov	r3, r0
 800176a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8001774:	23ff      	movs	r3, #255	; 0xff
 8001776:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800178e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001794:	2307      	movs	r3, #7
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8001798:	f7ff ffae 	bl	80016f8 <BSP_LCD_GetXSize>
 800179c:	4603      	mov	r3, r0
 800179e:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80017a0:	f7ff ffbe 	bl	8001720 <BSP_LCD_GetYSize>
 80017a4:	4603      	mov	r3, r0
 80017a6:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80017a8:	88fa      	ldrh	r2, [r7, #6]
 80017aa:	f107 030c 	add.w	r3, r7, #12
 80017ae:	4619      	mov	r1, r3
 80017b0:	4812      	ldr	r0, [pc, #72]	; (80017fc <BSP_LCD_LayerDefaultInit+0xb4>)
 80017b2:	f004 fbf5 	bl	8005fa0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80017b6:	88fa      	ldrh	r2, [r7, #6]
 80017b8:	4911      	ldr	r1, [pc, #68]	; (8001800 <BSP_LCD_LayerDefaultInit+0xb8>)
 80017ba:	4613      	mov	r3, r2
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4413      	add	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	440b      	add	r3, r1
 80017c4:	3304      	adds	r3, #4
 80017c6:	f04f 32ff 	mov.w	r2, #4294967295
 80017ca:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80017cc:	88fa      	ldrh	r2, [r7, #6]
 80017ce:	490c      	ldr	r1, [pc, #48]	; (8001800 <BSP_LCD_LayerDefaultInit+0xb8>)
 80017d0:	4613      	mov	r3, r2
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4413      	add	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	440b      	add	r3, r1
 80017da:	3308      	adds	r3, #8
 80017dc:	4a09      	ldr	r2, [pc, #36]	; (8001804 <BSP_LCD_LayerDefaultInit+0xbc>)
 80017de:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80017e0:	88fa      	ldrh	r2, [r7, #6]
 80017e2:	4907      	ldr	r1, [pc, #28]	; (8001800 <BSP_LCD_LayerDefaultInit+0xb8>)
 80017e4:	4613      	mov	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	440b      	add	r3, r1
 80017ee:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80017f2:	601a      	str	r2, [r3, #0]
}
 80017f4:	bf00      	nop
 80017f6:	3740      	adds	r7, #64	; 0x40
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000370 	.word	0x20000370
 8001800:	200001c8 	.word	0x200001c8
 8001804:	20000028 	.word	0x20000028

08001808 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001810:	4a04      	ldr	r2, [pc, #16]	; (8001824 <BSP_LCD_SelectLayer+0x1c>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6013      	str	r3, [r2, #0]
} 
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	200001c4 	.word	0x200001c4

08001828 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001830:	4b07      	ldr	r3, [pc, #28]	; (8001850 <BSP_LCD_SetTextColor+0x28>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4907      	ldr	r1, [pc, #28]	; (8001854 <BSP_LCD_SetTextColor+0x2c>)
 8001836:	4613      	mov	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	4413      	add	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	440b      	add	r3, r1
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	601a      	str	r2, [r3, #0]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	200001c4 	.word	0x200001c4
 8001854:	200001c8 	.word	0x200001c8

08001858 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <BSP_LCD_SetBackColor+0x2c>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4908      	ldr	r1, [pc, #32]	; (8001888 <BSP_LCD_SetBackColor+0x30>)
 8001866:	4613      	mov	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	4413      	add	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	440b      	add	r3, r1
 8001870:	3304      	adds	r3, #4
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	601a      	str	r2, [r3, #0]
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	200001c4 	.word	0x200001c4
 8001888:	200001c8 	.word	0x200001c8

0800188c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <BSP_LCD_SetFont+0x2c>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4908      	ldr	r1, [pc, #32]	; (80018bc <BSP_LCD_SetFont+0x30>)
 800189a:	4613      	mov	r3, r2
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	4413      	add	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	440b      	add	r3, r1
 80018a4:	3308      	adds	r3, #8
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	601a      	str	r2, [r3, #0]
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	200001c4 	.word	0x200001c4
 80018bc:	200001c8 	.word	0x200001c8

080018c0 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80018c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af02      	add	r7, sp, #8
 80018c6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80018c8:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <BSP_LCD_Clear+0x48>)
 80018ca:	681c      	ldr	r4, [r3, #0]
 80018cc:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <BSP_LCD_Clear+0x48>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0e      	ldr	r2, [pc, #56]	; (800190c <BSP_LCD_Clear+0x4c>)
 80018d2:	2134      	movs	r1, #52	; 0x34
 80018d4:	fb01 f303 	mul.w	r3, r1, r3
 80018d8:	4413      	add	r3, r2
 80018da:	335c      	adds	r3, #92	; 0x5c
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	461d      	mov	r5, r3
 80018e0:	f7ff ff0a 	bl	80016f8 <BSP_LCD_GetXSize>
 80018e4:	4606      	mov	r6, r0
 80018e6:	f7ff ff1b 	bl	8001720 <BSP_LCD_GetYSize>
 80018ea:	4602      	mov	r2, r0
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	9301      	str	r3, [sp, #4]
 80018f0:	2300      	movs	r3, #0
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	4613      	mov	r3, r2
 80018f6:	4632      	mov	r2, r6
 80018f8:	4629      	mov	r1, r5
 80018fa:	4620      	mov	r0, r4
 80018fc:	f000 feec 	bl	80026d8 <LL_FillBuffer>
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001908:	200001c4 	.word	0x200001c4
 800190c:	20000370 	.word	0x20000370

08001910 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	80fb      	strh	r3, [r7, #6]
 800191a:	460b      	mov	r3, r1
 800191c:	80bb      	strh	r3, [r7, #4]
 800191e:	4613      	mov	r3, r2
 8001920:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001922:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <BSP_LCD_DisplayChar+0x80>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	491b      	ldr	r1, [pc, #108]	; (8001994 <BSP_LCD_DisplayChar+0x84>)
 8001928:	4613      	mov	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4413      	add	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	3308      	adds	r3, #8
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6819      	ldr	r1, [r3, #0]
 8001938:	78fb      	ldrb	r3, [r7, #3]
 800193a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800193e:	4b14      	ldr	r3, [pc, #80]	; (8001990 <BSP_LCD_DisplayChar+0x80>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4c14      	ldr	r4, [pc, #80]	; (8001994 <BSP_LCD_DisplayChar+0x84>)
 8001944:	4613      	mov	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4413      	add	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4423      	add	r3, r4
 800194e:	3308      	adds	r3, #8
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001954:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001958:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <BSP_LCD_DisplayChar+0x80>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4c0d      	ldr	r4, [pc, #52]	; (8001994 <BSP_LCD_DisplayChar+0x84>)
 800195e:	4613      	mov	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4413      	add	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4423      	add	r3, r4
 8001968:	3308      	adds	r3, #8
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	889b      	ldrh	r3, [r3, #4]
 800196e:	3307      	adds	r3, #7
 8001970:	2b00      	cmp	r3, #0
 8001972:	da00      	bge.n	8001976 <BSP_LCD_DisplayChar+0x66>
 8001974:	3307      	adds	r3, #7
 8001976:	10db      	asrs	r3, r3, #3
 8001978:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800197c:	18ca      	adds	r2, r1, r3
 800197e:	88b9      	ldrh	r1, [r7, #4]
 8001980:	88fb      	ldrh	r3, [r7, #6]
 8001982:	4618      	mov	r0, r3
 8001984:	f000 fdf0 	bl	8002568 <DrawChar>
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	bd90      	pop	{r4, r7, pc}
 8001990:	200001c4 	.word	0x200001c4
 8001994:	200001c8 	.word	0x200001c8

08001998 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001998:	b5b0      	push	{r4, r5, r7, lr}
 800199a:	b088      	sub	sp, #32
 800199c:	af00      	add	r7, sp, #0
 800199e:	60ba      	str	r2, [r7, #8]
 80019a0:	461a      	mov	r2, r3
 80019a2:	4603      	mov	r3, r0
 80019a4:	81fb      	strh	r3, [r7, #14]
 80019a6:	460b      	mov	r3, r1
 80019a8:	81bb      	strh	r3, [r7, #12]
 80019aa:	4613      	mov	r3, r2
 80019ac:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80019ae:	2301      	movs	r3, #1
 80019b0:	83fb      	strh	r3, [r7, #30]
 80019b2:	2300      	movs	r3, #0
 80019b4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80019b6:	2300      	movs	r3, #0
 80019b8:	61bb      	str	r3, [r7, #24]
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80019c2:	e002      	b.n	80019ca <BSP_LCD_DisplayStringAt+0x32>
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	3301      	adds	r3, #1
 80019c8:	61bb      	str	r3, [r7, #24]
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	1c5a      	adds	r2, r3, #1
 80019ce:	617a      	str	r2, [r7, #20]
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f6      	bne.n	80019c4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80019d6:	f7ff fe8f 	bl	80016f8 <BSP_LCD_GetXSize>
 80019da:	4b4f      	ldr	r3, [pc, #316]	; (8001b18 <BSP_LCD_DisplayStringAt+0x180>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	494f      	ldr	r1, [pc, #316]	; (8001b1c <BSP_LCD_DisplayStringAt+0x184>)
 80019e0:	4613      	mov	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	3308      	adds	r3, #8
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	889b      	ldrh	r3, [r3, #4]
 80019f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80019f4:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d01c      	beq.n	8001a36 <BSP_LCD_DisplayStringAt+0x9e>
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d017      	beq.n	8001a30 <BSP_LCD_DisplayStringAt+0x98>
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d12e      	bne.n	8001a62 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	1ad1      	subs	r1, r2, r3
 8001a0a:	4b43      	ldr	r3, [pc, #268]	; (8001b18 <BSP_LCD_DisplayStringAt+0x180>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	4843      	ldr	r0, [pc, #268]	; (8001b1c <BSP_LCD_DisplayStringAt+0x184>)
 8001a10:	4613      	mov	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	4413      	add	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4403      	add	r3, r0
 8001a1a:	3308      	adds	r3, #8
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	889b      	ldrh	r3, [r3, #4]
 8001a20:	fb03 f301 	mul.w	r3, r3, r1
 8001a24:	085b      	lsrs	r3, r3, #1
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	89fb      	ldrh	r3, [r7, #14]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	83fb      	strh	r3, [r7, #30]
      break;
 8001a2e:	e01b      	b.n	8001a68 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8001a30:	89fb      	ldrh	r3, [r7, #14]
 8001a32:	83fb      	strh	r3, [r7, #30]
      break;
 8001a34:	e018      	b.n	8001a68 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	b299      	uxth	r1, r3
 8001a3e:	4b36      	ldr	r3, [pc, #216]	; (8001b18 <BSP_LCD_DisplayStringAt+0x180>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	4836      	ldr	r0, [pc, #216]	; (8001b1c <BSP_LCD_DisplayStringAt+0x184>)
 8001a44:	4613      	mov	r3, r2
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	4413      	add	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4403      	add	r3, r0
 8001a4e:	3308      	adds	r3, #8
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	889b      	ldrh	r3, [r3, #4]
 8001a54:	fb11 f303 	smulbb	r3, r1, r3
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	89fb      	ldrh	r3, [r7, #14]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	83fb      	strh	r3, [r7, #30]
      break;
 8001a60:	e002      	b.n	8001a68 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 8001a62:	89fb      	ldrh	r3, [r7, #14]
 8001a64:	83fb      	strh	r3, [r7, #30]
      break;
 8001a66:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8001a68:	8bfb      	ldrh	r3, [r7, #30]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <BSP_LCD_DisplayStringAt+0xde>
 8001a6e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	da1d      	bge.n	8001ab2 <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8001a76:	2301      	movs	r3, #1
 8001a78:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001a7a:	e01a      	b.n	8001ab2 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	781a      	ldrb	r2, [r3, #0]
 8001a80:	89b9      	ldrh	r1, [r7, #12]
 8001a82:	8bfb      	ldrh	r3, [r7, #30]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff43 	bl	8001910 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8001a8a:	4b23      	ldr	r3, [pc, #140]	; (8001b18 <BSP_LCD_DisplayStringAt+0x180>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	4923      	ldr	r1, [pc, #140]	; (8001b1c <BSP_LCD_DisplayStringAt+0x184>)
 8001a90:	4613      	mov	r3, r2
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	3308      	adds	r3, #8
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	889a      	ldrh	r2, [r3, #4]
 8001aa0:	8bfb      	ldrh	r3, [r7, #30]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	60bb      	str	r3, [r7, #8]
    i++;
 8001aac:	8bbb      	ldrh	r3, [r7, #28]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	bf14      	ite	ne
 8001aba:	2301      	movne	r3, #1
 8001abc:	2300      	moveq	r3, #0
 8001abe:	b2dc      	uxtb	r4, r3
 8001ac0:	f7ff fe1a 	bl	80016f8 <BSP_LCD_GetXSize>
 8001ac4:	4605      	mov	r5, r0
 8001ac6:	8bb9      	ldrh	r1, [r7, #28]
 8001ac8:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <BSP_LCD_DisplayStringAt+0x180>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4813      	ldr	r0, [pc, #76]	; (8001b1c <BSP_LCD_DisplayStringAt+0x184>)
 8001ace:	4613      	mov	r3, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	4413      	add	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4403      	add	r3, r0
 8001ad8:	3308      	adds	r3, #8
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	889b      	ldrh	r3, [r3, #4]
 8001ade:	fb03 f301 	mul.w	r3, r3, r1
 8001ae2:	1aeb      	subs	r3, r5, r3
 8001ae4:	b299      	uxth	r1, r3
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <BSP_LCD_DisplayStringAt+0x180>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	480c      	ldr	r0, [pc, #48]	; (8001b1c <BSP_LCD_DisplayStringAt+0x184>)
 8001aec:	4613      	mov	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	4413      	add	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4403      	add	r3, r0
 8001af6:	3308      	adds	r3, #8
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	889b      	ldrh	r3, [r3, #4]
 8001afc:	4299      	cmp	r1, r3
 8001afe:	bf2c      	ite	cs
 8001b00:	2301      	movcs	r3, #1
 8001b02:	2300      	movcc	r3, #0
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	4023      	ands	r3, r4
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1b6      	bne.n	8001a7c <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 8001b0e:	bf00      	nop
 8001b10:	3720      	adds	r7, #32
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bdb0      	pop	{r4, r5, r7, pc}
 8001b16:	bf00      	nop
 8001b18:	200001c4 	.word	0x200001c4
 8001b1c:	200001c8 	.word	0x200001c8

08001b20 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001b20:	b5b0      	push	{r4, r5, r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af02      	add	r7, sp, #8
 8001b26:	4603      	mov	r3, r0
 8001b28:	80fb      	strh	r3, [r7, #6]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	80bb      	strh	r3, [r7, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001b36:	4b26      	ldr	r3, [pc, #152]	; (8001bd0 <BSP_LCD_DrawHLine+0xb0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a26      	ldr	r2, [pc, #152]	; (8001bd4 <BSP_LCD_DrawHLine+0xb4>)
 8001b3c:	2134      	movs	r1, #52	; 0x34
 8001b3e:	fb01 f303 	mul.w	r3, r1, r3
 8001b42:	4413      	add	r3, r2
 8001b44:	3348      	adds	r3, #72	; 0x48
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d114      	bne.n	8001b76 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001b4c:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <BSP_LCD_DrawHLine+0xb0>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a20      	ldr	r2, [pc, #128]	; (8001bd4 <BSP_LCD_DrawHLine+0xb4>)
 8001b52:	2134      	movs	r1, #52	; 0x34
 8001b54:	fb01 f303 	mul.w	r3, r1, r3
 8001b58:	4413      	add	r3, r2
 8001b5a:	335c      	adds	r3, #92	; 0x5c
 8001b5c:	681c      	ldr	r4, [r3, #0]
 8001b5e:	f7ff fdcb 	bl	80016f8 <BSP_LCD_GetXSize>
 8001b62:	4602      	mov	r2, r0
 8001b64:	88bb      	ldrh	r3, [r7, #4]
 8001b66:	fb03 f202 	mul.w	r2, r3, r2
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	4423      	add	r3, r4
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	e013      	b.n	8001b9e <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001b76:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <BSP_LCD_DrawHLine+0xb0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a16      	ldr	r2, [pc, #88]	; (8001bd4 <BSP_LCD_DrawHLine+0xb4>)
 8001b7c:	2134      	movs	r1, #52	; 0x34
 8001b7e:	fb01 f303 	mul.w	r3, r1, r3
 8001b82:	4413      	add	r3, r2
 8001b84:	335c      	adds	r3, #92	; 0x5c
 8001b86:	681c      	ldr	r4, [r3, #0]
 8001b88:	f7ff fdb6 	bl	80016f8 <BSP_LCD_GetXSize>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	88bb      	ldrh	r3, [r7, #4]
 8001b90:	fb03 f202 	mul.w	r2, r3, r2
 8001b94:	88fb      	ldrh	r3, [r7, #6]
 8001b96:	4413      	add	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4423      	add	r3, r4
 8001b9c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <BSP_LCD_DrawHLine+0xb0>)
 8001ba0:	6818      	ldr	r0, [r3, #0]
 8001ba2:	68fc      	ldr	r4, [r7, #12]
 8001ba4:	887d      	ldrh	r5, [r7, #2]
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <BSP_LCD_DrawHLine+0xb0>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	490b      	ldr	r1, [pc, #44]	; (8001bd8 <BSP_LCD_DrawHLine+0xb8>)
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	9301      	str	r3, [sp, #4]
 8001bba:	2300      	movs	r3, #0
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	462a      	mov	r2, r5
 8001bc2:	4621      	mov	r1, r4
 8001bc4:	f000 fd88 	bl	80026d8 <LL_FillBuffer>
}
 8001bc8:	bf00      	nop
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd0:	200001c4 	.word	0x200001c4
 8001bd4:	20000370 	.word	0x20000370
 8001bd8:	200001c8 	.word	0x200001c8

08001bdc <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bde:	b087      	sub	sp, #28
 8001be0:	af02      	add	r7, sp, #8
 8001be2:	4603      	mov	r3, r0
 8001be4:	80fb      	strh	r3, [r7, #6]
 8001be6:	460b      	mov	r3, r1
 8001be8:	80bb      	strh	r3, [r7, #4]
 8001bea:	4613      	mov	r3, r2
 8001bec:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001bf2:	4b28      	ldr	r3, [pc, #160]	; (8001c94 <BSP_LCD_DrawVLine+0xb8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a28      	ldr	r2, [pc, #160]	; (8001c98 <BSP_LCD_DrawVLine+0xbc>)
 8001bf8:	2134      	movs	r1, #52	; 0x34
 8001bfa:	fb01 f303 	mul.w	r3, r1, r3
 8001bfe:	4413      	add	r3, r2
 8001c00:	3348      	adds	r3, #72	; 0x48
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d114      	bne.n	8001c32 <BSP_LCD_DrawVLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001c08:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <BSP_LCD_DrawVLine+0xb8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a22      	ldr	r2, [pc, #136]	; (8001c98 <BSP_LCD_DrawVLine+0xbc>)
 8001c0e:	2134      	movs	r1, #52	; 0x34
 8001c10:	fb01 f303 	mul.w	r3, r1, r3
 8001c14:	4413      	add	r3, r2
 8001c16:	335c      	adds	r3, #92	; 0x5c
 8001c18:	681c      	ldr	r4, [r3, #0]
 8001c1a:	f7ff fd6d 	bl	80016f8 <BSP_LCD_GetXSize>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	88bb      	ldrh	r3, [r7, #4]
 8001c22:	fb03 f202 	mul.w	r2, r3, r2
 8001c26:	88fb      	ldrh	r3, [r7, #6]
 8001c28:	4413      	add	r3, r2
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4423      	add	r3, r4
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	e013      	b.n	8001c5a <BSP_LCD_DrawVLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001c32:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <BSP_LCD_DrawVLine+0xb8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a18      	ldr	r2, [pc, #96]	; (8001c98 <BSP_LCD_DrawVLine+0xbc>)
 8001c38:	2134      	movs	r1, #52	; 0x34
 8001c3a:	fb01 f303 	mul.w	r3, r1, r3
 8001c3e:	4413      	add	r3, r2
 8001c40:	335c      	adds	r3, #92	; 0x5c
 8001c42:	681c      	ldr	r4, [r3, #0]
 8001c44:	f7ff fd58 	bl	80016f8 <BSP_LCD_GetXSize>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	88bb      	ldrh	r3, [r7, #4]
 8001c4c:	fb03 f202 	mul.w	r2, r3, r2
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	4413      	add	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4423      	add	r3, r4
 8001c58:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <BSP_LCD_DrawVLine+0xb8>)
 8001c5c:	681c      	ldr	r4, [r3, #0]
 8001c5e:	68fd      	ldr	r5, [r7, #12]
 8001c60:	887e      	ldrh	r6, [r7, #2]
 8001c62:	f7ff fd49 	bl	80016f8 <BSP_LCD_GetXSize>
 8001c66:	4603      	mov	r3, r0
 8001c68:	1e59      	subs	r1, r3, #1
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <BSP_LCD_DrawVLine+0xb8>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	480b      	ldr	r0, [pc, #44]	; (8001c9c <BSP_LCD_DrawVLine+0xc0>)
 8001c70:	4613      	mov	r3, r2
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	4413      	add	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4403      	add	r3, r0
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	9301      	str	r3, [sp, #4]
 8001c7e:	9100      	str	r1, [sp, #0]
 8001c80:	4633      	mov	r3, r6
 8001c82:	2201      	movs	r2, #1
 8001c84:	4629      	mov	r1, r5
 8001c86:	4620      	mov	r0, r4
 8001c88:	f000 fd26 	bl	80026d8 <LL_FillBuffer>
}
 8001c8c:	bf00      	nop
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c94:	200001c4 	.word	0x200001c4
 8001c98:	20000370 	.word	0x20000370
 8001c9c:	200001c8 	.word	0x200001c8

08001ca0 <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8001ca0:	b590      	push	{r4, r7, lr}
 8001ca2:	b08b      	sub	sp, #44	; 0x2c
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4604      	mov	r4, r0
 8001ca8:	4608      	mov	r0, r1
 8001caa:	4611      	mov	r1, r2
 8001cac:	461a      	mov	r2, r3
 8001cae:	4623      	mov	r3, r4
 8001cb0:	80fb      	strh	r3, [r7, #6]
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	80bb      	strh	r3, [r7, #4]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	807b      	strh	r3, [r7, #2]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	823b      	strh	r3, [r7, #16]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	81fb      	strh	r3, [r7, #14]
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001cca:	2300      	movs	r3, #0
 8001ccc:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001cce:	2300      	movs	r3, #0
 8001cd0:	847b      	strh	r3, [r7, #34]	; 0x22
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	83fb      	strh	r3, [r7, #30]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	83bb      	strh	r3, [r7, #28]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	837b      	strh	r3, [r7, #26]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	833b      	strh	r3, [r7, #24]
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	82fb      	strh	r3, [r7, #22]
 8001cea:	2300      	movs	r3, #0
 8001cec:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8001cf2:	887a      	ldrh	r2, [r7, #2]
 8001cf4:	88fb      	ldrh	r3, [r7, #6]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	bfb8      	it	lt
 8001cfc:	425b      	neglt	r3, r3
 8001cfe:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8001d00:	883a      	ldrh	r2, [r7, #0]
 8001d02:	88bb      	ldrh	r3, [r7, #4]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	bfb8      	it	lt
 8001d0a:	425b      	neglt	r3, r3
 8001d0c:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8001d12:	88bb      	ldrh	r3, [r7, #4]
 8001d14:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8001d16:	887a      	ldrh	r2, [r7, #2]
 8001d18:	88fb      	ldrh	r3, [r7, #6]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d304      	bcc.n	8001d28 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8001d22:	2301      	movs	r3, #1
 8001d24:	843b      	strh	r3, [r7, #32]
 8001d26:	e005      	b.n	8001d34 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8001d28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d2c:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8001d2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d32:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8001d34:	883a      	ldrh	r2, [r7, #0]
 8001d36:	88bb      	ldrh	r3, [r7, #4]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d304      	bcc.n	8001d46 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8001d40:	2301      	movs	r3, #1
 8001d42:	83bb      	strh	r3, [r7, #28]
 8001d44:	e005      	b.n	8001d52 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8001d46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d4a:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8001d4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d50:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8001d52:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001d56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	db11      	blt.n	8001d82 <BSP_LCD_DrawLine+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8001d5e:	2300      	movs	r3, #0
 8001d60:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8001d62:	2300      	movs	r3, #0
 8001d64:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8001d66:	8a3b      	ldrh	r3, [r7, #16]
 8001d68:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8001d6a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	da00      	bge.n	8001d74 <BSP_LCD_DrawLine+0xd4>
 8001d72:	3301      	adds	r3, #1
 8001d74:	105b      	asrs	r3, r3, #1
 8001d76:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 8001d78:	89fb      	ldrh	r3, [r7, #14]
 8001d7a:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 8001d7c:	8a3b      	ldrh	r3, [r7, #16]
 8001d7e:	82bb      	strh	r3, [r7, #20]
 8001d80:	e010      	b.n	8001da4 <BSP_LCD_DrawLine+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8001d82:	2300      	movs	r3, #0
 8001d84:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8001d86:	2300      	movs	r3, #0
 8001d88:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8001d8a:	89fb      	ldrh	r3, [r7, #14]
 8001d8c:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8001d8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	da00      	bge.n	8001d98 <BSP_LCD_DrawLine+0xf8>
 8001d96:	3301      	adds	r3, #1
 8001d98:	105b      	asrs	r3, r3, #1
 8001d9a:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 8001d9c:	8a3b      	ldrh	r3, [r7, #16]
 8001d9e:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 8001da0:	89fb      	ldrh	r3, [r7, #14]
 8001da2:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8001da4:	2300      	movs	r3, #0
 8001da6:	827b      	strh	r3, [r7, #18]
 8001da8:	e038      	b.n	8001e1c <BSP_LCD_DrawLine+0x17c>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8001daa:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001dac:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 8001dae:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <BSP_LCD_DrawLine+0x190>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	4920      	ldr	r1, [pc, #128]	; (8001e34 <BSP_LCD_DrawLine+0x194>)
 8001db4:	4613      	mov	r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	4413      	add	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4621      	mov	r1, r4
 8001dc4:	f000 f95a 	bl	800207c <BSP_LCD_DrawPixel>
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8001dc8:	8b3a      	ldrh	r2, [r7, #24]
 8001dca:	8afb      	ldrh	r3, [r7, #22]
 8001dcc:	4413      	add	r3, r2
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8001dd2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001dd6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	db0e      	blt.n	8001dfc <BSP_LCD_DrawLine+0x15c>
    {
      num -= den;                             /* Calculate the new numerator value */
 8001dde:	8b3a      	ldrh	r2, [r7, #24]
 8001de0:	8b7b      	ldrh	r3, [r7, #26]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8001de8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001dea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001dec:	4413      	add	r3, r2
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8001df2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001df4:	8bfb      	ldrh	r3, [r7, #30]
 8001df6:	4413      	add	r3, r2
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8001dfc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001dfe:	8c3b      	ldrh	r3, [r7, #32]
 8001e00:	4413      	add	r3, r2
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8001e06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e08:	8bbb      	ldrh	r3, [r7, #28]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8001e10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	3301      	adds	r3, #1
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	827b      	strh	r3, [r7, #18]
 8001e1c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001e20:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	ddc0      	ble.n	8001daa <BSP_LCD_DrawLine+0x10a>
  }
}
 8001e28:	bf00      	nop
 8001e2a:	372c      	adds	r7, #44	; 0x2c
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd90      	pop	{r4, r7, pc}
 8001e30:	200001c4 	.word	0x200001c4
 8001e34:	200001c8 	.word	0x200001c8

08001e38 <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001e38:	b590      	push	{r4, r7, lr}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4604      	mov	r4, r0
 8001e40:	4608      	mov	r0, r1
 8001e42:	4611      	mov	r1, r2
 8001e44:	461a      	mov	r2, r3
 8001e46:	4623      	mov	r3, r4
 8001e48:	80fb      	strh	r3, [r7, #6]
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	80bb      	strh	r3, [r7, #4]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	807b      	strh	r3, [r7, #2]
 8001e52:	4613      	mov	r3, r2
 8001e54:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8001e56:	887a      	ldrh	r2, [r7, #2]
 8001e58:	88b9      	ldrh	r1, [r7, #4]
 8001e5a:	88fb      	ldrh	r3, [r7, #6]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fe5f 	bl	8001b20 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8001e62:	88ba      	ldrh	r2, [r7, #4]
 8001e64:	883b      	ldrh	r3, [r7, #0]
 8001e66:	4413      	add	r3, r2
 8001e68:	b299      	uxth	r1, r3
 8001e6a:	887a      	ldrh	r2, [r7, #2]
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff fe56 	bl	8001b20 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8001e74:	883a      	ldrh	r2, [r7, #0]
 8001e76:	88b9      	ldrh	r1, [r7, #4]
 8001e78:	88fb      	ldrh	r3, [r7, #6]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff feae 	bl	8001bdc <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8001e80:	88fa      	ldrh	r2, [r7, #6]
 8001e82:	887b      	ldrh	r3, [r7, #2]
 8001e84:	4413      	add	r3, r2
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	883a      	ldrh	r2, [r7, #0]
 8001e8a:	88b9      	ldrh	r1, [r7, #4]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fea5 	bl	8001bdc <BSP_LCD_DrawVLine>
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd90      	pop	{r4, r7, pc}
	...

08001e9c <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001e9c:	b590      	push	{r4, r7, lr}
 8001e9e:	b087      	sub	sp, #28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	80fb      	strh	r3, [r7, #6]
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	80bb      	strh	r3, [r7, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8001eae:	887b      	ldrh	r3, [r7, #2]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	f1c3 0303 	rsb	r3, r3, #3
 8001eb6:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8001ebc:	887b      	ldrh	r3, [r7, #2]
 8001ebe:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8001ec0:	e0cf      	b.n	8002062 <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	88fb      	ldrh	r3, [r7, #6]
 8001ec8:	4413      	add	r3, r2
 8001eca:	b298      	uxth	r0, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	88ba      	ldrh	r2, [r7, #4]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	b29c      	uxth	r4, r3
 8001ed6:	4b67      	ldr	r3, [pc, #412]	; (8002074 <BSP_LCD_DrawCircle+0x1d8>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	4967      	ldr	r1, [pc, #412]	; (8002078 <BSP_LCD_DrawCircle+0x1dc>)
 8001edc:	4613      	mov	r3, r2
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4413      	add	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4621      	mov	r1, r4
 8001eec:	f000 f8c6 	bl	800207c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	88fa      	ldrh	r2, [r7, #6]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	b298      	uxth	r0, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	88ba      	ldrh	r2, [r7, #4]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	b29c      	uxth	r4, r3
 8001f04:	4b5b      	ldr	r3, [pc, #364]	; (8002074 <BSP_LCD_DrawCircle+0x1d8>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	495b      	ldr	r1, [pc, #364]	; (8002078 <BSP_LCD_DrawCircle+0x1dc>)
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4413      	add	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	4621      	mov	r1, r4
 8001f1a:	f000 f8af 	bl	800207c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	4413      	add	r3, r2
 8001f26:	b298      	uxth	r0, r3
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	88ba      	ldrh	r2, [r7, #4]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	b29c      	uxth	r4, r3
 8001f32:	4b50      	ldr	r3, [pc, #320]	; (8002074 <BSP_LCD_DrawCircle+0x1d8>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	4950      	ldr	r1, [pc, #320]	; (8002078 <BSP_LCD_DrawCircle+0x1dc>)
 8001f38:	4613      	mov	r3, r2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	4621      	mov	r1, r4
 8001f48:	f000 f898 	bl	800207c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	88fa      	ldrh	r2, [r7, #6]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	b298      	uxth	r0, r3
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	88ba      	ldrh	r2, [r7, #4]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	b29c      	uxth	r4, r3
 8001f60:	4b44      	ldr	r3, [pc, #272]	; (8002074 <BSP_LCD_DrawCircle+0x1d8>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4944      	ldr	r1, [pc, #272]	; (8002078 <BSP_LCD_DrawCircle+0x1dc>)
 8001f66:	4613      	mov	r3, r2
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	440b      	add	r3, r1
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	4621      	mov	r1, r4
 8001f76:	f000 f881 	bl	800207c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	4413      	add	r3, r2
 8001f82:	b298      	uxth	r0, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	88bb      	ldrh	r3, [r7, #4]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	b29c      	uxth	r4, r3
 8001f8e:	4b39      	ldr	r3, [pc, #228]	; (8002074 <BSP_LCD_DrawCircle+0x1d8>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	4939      	ldr	r1, [pc, #228]	; (8002078 <BSP_LCD_DrawCircle+0x1dc>)
 8001f94:	4613      	mov	r3, r2
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	4413      	add	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4621      	mov	r1, r4
 8001fa4:	f000 f86a 	bl	800207c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	88fa      	ldrh	r2, [r7, #6]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	b298      	uxth	r0, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	88bb      	ldrh	r3, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	b29c      	uxth	r4, r3
 8001fbc:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <BSP_LCD_DrawCircle+0x1d8>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	492d      	ldr	r1, [pc, #180]	; (8002078 <BSP_LCD_DrawCircle+0x1dc>)
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	4413      	add	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	440b      	add	r3, r1
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	4621      	mov	r1, r4
 8001fd2:	f000 f853 	bl	800207c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	88fb      	ldrh	r3, [r7, #6]
 8001fdc:	4413      	add	r3, r2
 8001fde:	b298      	uxth	r0, r3
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	88bb      	ldrh	r3, [r7, #4]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	b29c      	uxth	r4, r3
 8001fea:	4b22      	ldr	r3, [pc, #136]	; (8002074 <BSP_LCD_DrawCircle+0x1d8>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	4922      	ldr	r1, [pc, #136]	; (8002078 <BSP_LCD_DrawCircle+0x1dc>)
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4621      	mov	r1, r4
 8002000:	f000 f83c 	bl	800207c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	b29b      	uxth	r3, r3
 8002008:	88fa      	ldrh	r2, [r7, #6]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	b298      	uxth	r0, r3
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	b29a      	uxth	r2, r3
 8002012:	88bb      	ldrh	r3, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	b29c      	uxth	r4, r3
 8002018:	4b16      	ldr	r3, [pc, #88]	; (8002074 <BSP_LCD_DrawCircle+0x1d8>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4916      	ldr	r1, [pc, #88]	; (8002078 <BSP_LCD_DrawCircle+0x1dc>)
 800201e:	4613      	mov	r3, r2
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	4413      	add	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	4621      	mov	r1, r4
 800202e:	f000 f825 	bl	800207c <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	2b00      	cmp	r3, #0
 8002036:	da06      	bge.n	8002046 <BSP_LCD_DrawCircle+0x1aa>
    { 
      decision += (current_x << 2) + 6;
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	009a      	lsls	r2, r3, #2
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	4413      	add	r3, r2
 8002040:	3306      	adds	r3, #6
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	e00a      	b.n	800205c <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	009a      	lsls	r2, r3, #2
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	4413      	add	r3, r2
 8002052:	330a      	adds	r3, #10
 8002054:	617b      	str	r3, [r7, #20]
      current_y--;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	3b01      	subs	r3, #1
 800205a:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	3301      	adds	r3, #1
 8002060:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	429a      	cmp	r2, r3
 8002068:	f67f af2b 	bls.w	8001ec2 <BSP_LCD_DrawCircle+0x26>
  } 
}
 800206c:	bf00      	nop
 800206e:	371c      	adds	r7, #28
 8002070:	46bd      	mov	sp, r7
 8002072:	bd90      	pop	{r4, r7, pc}
 8002074:	200001c4 	.word	0x200001c4
 8002078:	200001c8 	.word	0x200001c8

0800207c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800207c:	b5b0      	push	{r4, r5, r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	603a      	str	r2, [r7, #0]
 8002086:	80fb      	strh	r3, [r7, #6]
 8002088:	460b      	mov	r3, r1
 800208a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800208c:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <BSP_LCD_DrawPixel+0x88>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a1d      	ldr	r2, [pc, #116]	; (8002108 <BSP_LCD_DrawPixel+0x8c>)
 8002092:	2134      	movs	r1, #52	; 0x34
 8002094:	fb01 f303 	mul.w	r3, r1, r3
 8002098:	4413      	add	r3, r2
 800209a:	3348      	adds	r3, #72	; 0x48
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d116      	bne.n	80020d0 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80020a2:	4b18      	ldr	r3, [pc, #96]	; (8002104 <BSP_LCD_DrawPixel+0x88>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a18      	ldr	r2, [pc, #96]	; (8002108 <BSP_LCD_DrawPixel+0x8c>)
 80020a8:	2134      	movs	r1, #52	; 0x34
 80020aa:	fb01 f303 	mul.w	r3, r1, r3
 80020ae:	4413      	add	r3, r2
 80020b0:	335c      	adds	r3, #92	; 0x5c
 80020b2:	681c      	ldr	r4, [r3, #0]
 80020b4:	88bd      	ldrh	r5, [r7, #4]
 80020b6:	f7ff fb1f 	bl	80016f8 <BSP_LCD_GetXSize>
 80020ba:	4603      	mov	r3, r0
 80020bc:	fb03 f205 	mul.w	r2, r3, r5
 80020c0:	88fb      	ldrh	r3, [r7, #6]
 80020c2:	4413      	add	r3, r2
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	4423      	add	r3, r4
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	b292      	uxth	r2, r2
 80020cc:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80020ce:	e015      	b.n	80020fc <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <BSP_LCD_DrawPixel+0x88>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a0c      	ldr	r2, [pc, #48]	; (8002108 <BSP_LCD_DrawPixel+0x8c>)
 80020d6:	2134      	movs	r1, #52	; 0x34
 80020d8:	fb01 f303 	mul.w	r3, r1, r3
 80020dc:	4413      	add	r3, r2
 80020de:	335c      	adds	r3, #92	; 0x5c
 80020e0:	681c      	ldr	r4, [r3, #0]
 80020e2:	88bd      	ldrh	r5, [r7, #4]
 80020e4:	f7ff fb08 	bl	80016f8 <BSP_LCD_GetXSize>
 80020e8:	4603      	mov	r3, r0
 80020ea:	fb03 f205 	mul.w	r2, r3, r5
 80020ee:	88fb      	ldrh	r3, [r7, #6]
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4423      	add	r3, r4
 80020f6:	461a      	mov	r2, r3
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	6013      	str	r3, [r2, #0]
}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bdb0      	pop	{r4, r5, r7, pc}
 8002104:	200001c4 	.word	0x200001c4
 8002108:	20000370 	.word	0x20000370

0800210c <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800210c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002110:	b086      	sub	sp, #24
 8002112:	af02      	add	r7, sp, #8
 8002114:	4604      	mov	r4, r0
 8002116:	4608      	mov	r0, r1
 8002118:	4611      	mov	r1, r2
 800211a:	461a      	mov	r2, r3
 800211c:	4623      	mov	r3, r4
 800211e:	80fb      	strh	r3, [r7, #6]
 8002120:	4603      	mov	r3, r0
 8002122:	80bb      	strh	r3, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	807b      	strh	r3, [r7, #2]
 8002128:	4613      	mov	r3, r2
 800212a:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002130:	4b30      	ldr	r3, [pc, #192]	; (80021f4 <BSP_LCD_FillRect+0xe8>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4930      	ldr	r1, [pc, #192]	; (80021f8 <BSP_LCD_FillRect+0xec>)
 8002136:	4613      	mov	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	4413      	add	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	440b      	add	r3, r1
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff fb70 	bl	8001828 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002148:	4b2a      	ldr	r3, [pc, #168]	; (80021f4 <BSP_LCD_FillRect+0xe8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a2b      	ldr	r2, [pc, #172]	; (80021fc <BSP_LCD_FillRect+0xf0>)
 800214e:	2134      	movs	r1, #52	; 0x34
 8002150:	fb01 f303 	mul.w	r3, r1, r3
 8002154:	4413      	add	r3, r2
 8002156:	3348      	adds	r3, #72	; 0x48
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d114      	bne.n	8002188 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800215e:	4b25      	ldr	r3, [pc, #148]	; (80021f4 <BSP_LCD_FillRect+0xe8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a26      	ldr	r2, [pc, #152]	; (80021fc <BSP_LCD_FillRect+0xf0>)
 8002164:	2134      	movs	r1, #52	; 0x34
 8002166:	fb01 f303 	mul.w	r3, r1, r3
 800216a:	4413      	add	r3, r2
 800216c:	335c      	adds	r3, #92	; 0x5c
 800216e:	681c      	ldr	r4, [r3, #0]
 8002170:	f7ff fac2 	bl	80016f8 <BSP_LCD_GetXSize>
 8002174:	4602      	mov	r2, r0
 8002176:	88bb      	ldrh	r3, [r7, #4]
 8002178:	fb03 f202 	mul.w	r2, r3, r2
 800217c:	88fb      	ldrh	r3, [r7, #6]
 800217e:	4413      	add	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	4423      	add	r3, r4
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	e013      	b.n	80021b0 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002188:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <BSP_LCD_FillRect+0xe8>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a1b      	ldr	r2, [pc, #108]	; (80021fc <BSP_LCD_FillRect+0xf0>)
 800218e:	2134      	movs	r1, #52	; 0x34
 8002190:	fb01 f303 	mul.w	r3, r1, r3
 8002194:	4413      	add	r3, r2
 8002196:	335c      	adds	r3, #92	; 0x5c
 8002198:	681c      	ldr	r4, [r3, #0]
 800219a:	f7ff faad 	bl	80016f8 <BSP_LCD_GetXSize>
 800219e:	4602      	mov	r2, r0
 80021a0:	88bb      	ldrh	r3, [r7, #4]
 80021a2:	fb03 f202 	mul.w	r2, r3, r2
 80021a6:	88fb      	ldrh	r3, [r7, #6]
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4423      	add	r3, r4
 80021ae:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80021b0:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <BSP_LCD_FillRect+0xe8>)
 80021b2:	681c      	ldr	r4, [r3, #0]
 80021b4:	68fd      	ldr	r5, [r7, #12]
 80021b6:	887e      	ldrh	r6, [r7, #2]
 80021b8:	f8b7 8000 	ldrh.w	r8, [r7]
 80021bc:	f7ff fa9c 	bl	80016f8 <BSP_LCD_GetXSize>
 80021c0:	4602      	mov	r2, r0
 80021c2:	887b      	ldrh	r3, [r7, #2]
 80021c4:	1ad1      	subs	r1, r2, r3
 80021c6:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <BSP_LCD_FillRect+0xe8>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	480b      	ldr	r0, [pc, #44]	; (80021f8 <BSP_LCD_FillRect+0xec>)
 80021cc:	4613      	mov	r3, r2
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	4413      	add	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4403      	add	r3, r0
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	9301      	str	r3, [sp, #4]
 80021da:	9100      	str	r1, [sp, #0]
 80021dc:	4643      	mov	r3, r8
 80021de:	4632      	mov	r2, r6
 80021e0:	4629      	mov	r1, r5
 80021e2:	4620      	mov	r0, r4
 80021e4:	f000 fa78 	bl	80026d8 <LL_FillBuffer>
}
 80021e8:	bf00      	nop
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021f2:	bf00      	nop
 80021f4:	200001c4 	.word	0x200001c4
 80021f8:	200001c8 	.word	0x200001c8
 80021fc:	20000370 	.word	0x20000370

08002200 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	80fb      	strh	r3, [r7, #6]
 800220a:	460b      	mov	r3, r1
 800220c:	80bb      	strh	r3, [r7, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8002212:	887b      	ldrh	r3, [r7, #2]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	f1c3 0303 	rsb	r3, r3, #3
 800221a:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8002220:	887b      	ldrh	r3, [r7, #2]
 8002222:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002224:	4b44      	ldr	r3, [pc, #272]	; (8002338 <BSP_LCD_FillCircle+0x138>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4944      	ldr	r1, [pc, #272]	; (800233c <BSP_LCD_FillCircle+0x13c>)
 800222a:	4613      	mov	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4413      	add	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff faf6 	bl	8001828 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 800223c:	e061      	b.n	8002302 <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d021      	beq.n	8002288 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	b29b      	uxth	r3, r3
 8002248:	88fa      	ldrh	r2, [r7, #6]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	b298      	uxth	r0, r3
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	b29a      	uxth	r2, r3
 8002252:	88bb      	ldrh	r3, [r7, #4]
 8002254:	4413      	add	r3, r2
 8002256:	b299      	uxth	r1, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	b29b      	uxth	r3, r3
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	b29b      	uxth	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	f7ff fc5d 	bl	8001b20 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	b29b      	uxth	r3, r3
 800226a:	88fa      	ldrh	r2, [r7, #6]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	b298      	uxth	r0, r3
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	b29b      	uxth	r3, r3
 8002274:	88ba      	ldrh	r2, [r7, #4]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	b299      	uxth	r1, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	b29b      	uxth	r3, r3
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	b29b      	uxth	r3, r3
 8002282:	461a      	mov	r2, r3
 8002284:	f7ff fc4c 	bl	8001b20 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d021      	beq.n	80022d2 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	b29b      	uxth	r3, r3
 8002292:	88fa      	ldrh	r2, [r7, #6]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	b298      	uxth	r0, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	b29b      	uxth	r3, r3
 800229c:	88ba      	ldrh	r2, [r7, #4]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	b299      	uxth	r1, r3
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	461a      	mov	r2, r3
 80022ac:	f7ff fc38 	bl	8001b20 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	88fa      	ldrh	r2, [r7, #6]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	b298      	uxth	r0, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	b29a      	uxth	r2, r3
 80022be:	88bb      	ldrh	r3, [r7, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	b299      	uxth	r1, r3
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	f7ff fc27 	bl	8001b20 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	da06      	bge.n	80022e6 <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	009a      	lsls	r2, r3, #2
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	4413      	add	r3, r2
 80022e0:	3306      	adds	r3, #6
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	e00a      	b.n	80022fc <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	009a      	lsls	r2, r3, #2
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	4413      	add	r3, r2
 80022f2:	330a      	adds	r3, #10
 80022f4:	617b      	str	r3, [r7, #20]
      current_y--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	3b01      	subs	r3, #1
 80022fa:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	3301      	adds	r3, #1
 8002300:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	429a      	cmp	r2, r3
 8002308:	d999      	bls.n	800223e <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800230a:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <BSP_LCD_FillCircle+0x138>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	490b      	ldr	r1, [pc, #44]	; (800233c <BSP_LCD_FillCircle+0x13c>)
 8002310:	4613      	mov	r3, r2
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff fa83 	bl	8001828 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002322:	887a      	ldrh	r2, [r7, #2]
 8002324:	88b9      	ldrh	r1, [r7, #4]
 8002326:	88fb      	ldrh	r3, [r7, #6]
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff fdb7 	bl	8001e9c <BSP_LCD_DrawCircle>
}
 800232e:	bf00      	nop
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	200001c4 	.word	0x200001c4
 800233c:	200001c8 	.word	0x200001c8

08002340 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8002344:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <BSP_LCD_DisplayOn+0x30>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699a      	ldr	r2, [r3, #24]
 800234a:	4b09      	ldr	r3, [pc, #36]	; (8002370 <BSP_LCD_DisplayOn+0x30>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0201 	orr.w	r2, r2, #1
 8002352:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002354:	2201      	movs	r2, #1
 8002356:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800235a:	4806      	ldr	r0, [pc, #24]	; (8002374 <BSP_LCD_DisplayOn+0x34>)
 800235c:	f002 ff48 	bl	80051f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002360:	2201      	movs	r2, #1
 8002362:	2108      	movs	r1, #8
 8002364:	4804      	ldr	r0, [pc, #16]	; (8002378 <BSP_LCD_DisplayOn+0x38>)
 8002366:	f002 ff43 	bl	80051f0 <HAL_GPIO_WritePin>
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000370 	.word	0x20000370
 8002374:	40022000 	.word	0x40022000
 8002378:	40022800 	.word	0x40022800

0800237c <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b090      	sub	sp, #64	; 0x40
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002386:	4b64      	ldr	r3, [pc, #400]	; (8002518 <BSP_LCD_MspInit+0x19c>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	4a63      	ldr	r2, [pc, #396]	; (8002518 <BSP_LCD_MspInit+0x19c>)
 800238c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002390:	6453      	str	r3, [r2, #68]	; 0x44
 8002392:	4b61      	ldr	r3, [pc, #388]	; (8002518 <BSP_LCD_MspInit+0x19c>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800239a:	62bb      	str	r3, [r7, #40]	; 0x28
 800239c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800239e:	4b5e      	ldr	r3, [pc, #376]	; (8002518 <BSP_LCD_MspInit+0x19c>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	4a5d      	ldr	r2, [pc, #372]	; (8002518 <BSP_LCD_MspInit+0x19c>)
 80023a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023a8:	6313      	str	r3, [r2, #48]	; 0x30
 80023aa:	4b5b      	ldr	r3, [pc, #364]	; (8002518 <BSP_LCD_MspInit+0x19c>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023b6:	4b58      	ldr	r3, [pc, #352]	; (8002518 <BSP_LCD_MspInit+0x19c>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	4a57      	ldr	r2, [pc, #348]	; (8002518 <BSP_LCD_MspInit+0x19c>)
 80023bc:	f043 0310 	orr.w	r3, r3, #16
 80023c0:	6313      	str	r3, [r2, #48]	; 0x30
 80023c2:	4b55      	ldr	r3, [pc, #340]	; (8002518 <BSP_LCD_MspInit+0x19c>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	f003 0310 	and.w	r3, r3, #16
 80023ca:	623b      	str	r3, [r7, #32]
 80023cc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80023ce:	4b52      	ldr	r3, [pc, #328]	; (8002518 <BSP_LCD_MspInit+0x19c>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a51      	ldr	r2, [pc, #324]	; (8002518 <BSP_LCD_MspInit+0x19c>)
 80023d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b4f      	ldr	r3, [pc, #316]	; (8002518 <BSP_LCD_MspInit+0x19c>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e2:	61fb      	str	r3, [r7, #28]
 80023e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80023e6:	4b4c      	ldr	r3, [pc, #304]	; (8002518 <BSP_LCD_MspInit+0x19c>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a4b      	ldr	r2, [pc, #300]	; (8002518 <BSP_LCD_MspInit+0x19c>)
 80023ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30
 80023f2:	4b49      	ldr	r3, [pc, #292]	; (8002518 <BSP_LCD_MspInit+0x19c>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fa:	61bb      	str	r3, [r7, #24]
 80023fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80023fe:	4b46      	ldr	r3, [pc, #280]	; (8002518 <BSP_LCD_MspInit+0x19c>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	4a45      	ldr	r2, [pc, #276]	; (8002518 <BSP_LCD_MspInit+0x19c>)
 8002404:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002408:	6313      	str	r3, [r2, #48]	; 0x30
 800240a:	4b43      	ldr	r3, [pc, #268]	; (8002518 <BSP_LCD_MspInit+0x19c>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002416:	4b40      	ldr	r3, [pc, #256]	; (8002518 <BSP_LCD_MspInit+0x19c>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	4a3f      	ldr	r2, [pc, #252]	; (8002518 <BSP_LCD_MspInit+0x19c>)
 800241c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002420:	6313      	str	r3, [r2, #48]	; 0x30
 8002422:	4b3d      	ldr	r3, [pc, #244]	; (8002518 <BSP_LCD_MspInit+0x19c>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800242e:	4b3a      	ldr	r3, [pc, #232]	; (8002518 <BSP_LCD_MspInit+0x19c>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	4a39      	ldr	r2, [pc, #228]	; (8002518 <BSP_LCD_MspInit+0x19c>)
 8002434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002438:	6313      	str	r3, [r2, #48]	; 0x30
 800243a:	4b37      	ldr	r3, [pc, #220]	; (8002518 <BSP_LCD_MspInit+0x19c>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002446:	4b34      	ldr	r3, [pc, #208]	; (8002518 <BSP_LCD_MspInit+0x19c>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	4a33      	ldr	r2, [pc, #204]	; (8002518 <BSP_LCD_MspInit+0x19c>)
 800244c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002450:	6313      	str	r3, [r2, #48]	; 0x30
 8002452:	4b31      	ldr	r3, [pc, #196]	; (8002518 <BSP_LCD_MspInit+0x19c>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800245e:	2310      	movs	r3, #16
 8002460:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002462:	2302      	movs	r3, #2
 8002464:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800246a:	2302      	movs	r3, #2
 800246c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800246e:	230e      	movs	r3, #14
 8002470:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002472:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002476:	4619      	mov	r1, r3
 8002478:	4828      	ldr	r0, [pc, #160]	; (800251c <BSP_LCD_MspInit+0x1a0>)
 800247a:	f002 fd0f 	bl	8004e9c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800247e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002482:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002488:	2309      	movs	r3, #9
 800248a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800248c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002490:	4619      	mov	r1, r3
 8002492:	4823      	ldr	r0, [pc, #140]	; (8002520 <BSP_LCD_MspInit+0x1a4>)
 8002494:	f002 fd02 	bl	8004e9c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8002498:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 800249c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800249e:	2302      	movs	r3, #2
 80024a0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80024a2:	230e      	movs	r3, #14
 80024a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80024a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024aa:	4619      	mov	r1, r3
 80024ac:	481d      	ldr	r0, [pc, #116]	; (8002524 <BSP_LCD_MspInit+0x1a8>)
 80024ae:	f002 fcf5 	bl	8004e9c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80024b2:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80024b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80024b8:	2302      	movs	r3, #2
 80024ba:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80024bc:	230e      	movs	r3, #14
 80024be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80024c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024c4:	4619      	mov	r1, r3
 80024c6:	4818      	ldr	r0, [pc, #96]	; (8002528 <BSP_LCD_MspInit+0x1ac>)
 80024c8:	f002 fce8 	bl	8004e9c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80024cc:	23f7      	movs	r3, #247	; 0xf7
 80024ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80024d0:	2302      	movs	r3, #2
 80024d2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80024d4:	230e      	movs	r3, #14
 80024d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80024d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024dc:	4619      	mov	r1, r3
 80024de:	4813      	ldr	r0, [pc, #76]	; (800252c <BSP_LCD_MspInit+0x1b0>)
 80024e0:	f002 fcdc 	bl	8004e9c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80024e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80024ea:	2301      	movs	r3, #1
 80024ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80024ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024f2:	4619      	mov	r1, r3
 80024f4:	480b      	ldr	r0, [pc, #44]	; (8002524 <BSP_LCD_MspInit+0x1a8>)
 80024f6:	f002 fcd1 	bl	8004e9c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80024fa:	2308      	movs	r3, #8
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80024fe:	2301      	movs	r3, #1
 8002500:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002502:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002506:	4619      	mov	r1, r3
 8002508:	4808      	ldr	r0, [pc, #32]	; (800252c <BSP_LCD_MspInit+0x1b0>)
 800250a:	f002 fcc7 	bl	8004e9c <HAL_GPIO_Init>
}
 800250e:	bf00      	nop
 8002510:	3740      	adds	r7, #64	; 0x40
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40023800 	.word	0x40023800
 800251c:	40021000 	.word	0x40021000
 8002520:	40021800 	.word	0x40021800
 8002524:	40022000 	.word	0x40022000
 8002528:	40022400 	.word	0x40022400
 800252c:	40022800 	.word	0x40022800

08002530 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800253a:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <BSP_LCD_ClockConfig+0x34>)
 800253c:	2208      	movs	r2, #8
 800253e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002540:	4b08      	ldr	r3, [pc, #32]	; (8002564 <BSP_LCD_ClockConfig+0x34>)
 8002542:	22c0      	movs	r2, #192	; 0xc0
 8002544:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8002546:	4b07      	ldr	r3, [pc, #28]	; (8002564 <BSP_LCD_ClockConfig+0x34>)
 8002548:	2205      	movs	r2, #5
 800254a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800254c:	4b05      	ldr	r3, [pc, #20]	; (8002564 <BSP_LCD_ClockConfig+0x34>)
 800254e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002552:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002554:	4803      	ldr	r0, [pc, #12]	; (8002564 <BSP_LCD_ClockConfig+0x34>)
 8002556:	f004 fc77 	bl	8006e48 <HAL_RCCEx_PeriphCLKConfig>
}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	200001e0 	.word	0x200001e0

08002568 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b088      	sub	sp, #32
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	603a      	str	r2, [r7, #0]
 8002572:	80fb      	strh	r3, [r7, #6]
 8002574:	460b      	mov	r3, r1
 8002576:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	61fb      	str	r3, [r7, #28]
 800257c:	2300      	movs	r3, #0
 800257e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8002580:	4b53      	ldr	r3, [pc, #332]	; (80026d0 <DrawChar+0x168>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4953      	ldr	r1, [pc, #332]	; (80026d4 <DrawChar+0x16c>)
 8002586:	4613      	mov	r3, r2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	4413      	add	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	3308      	adds	r3, #8
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	88db      	ldrh	r3, [r3, #6]
 8002596:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002598:	4b4d      	ldr	r3, [pc, #308]	; (80026d0 <DrawChar+0x168>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	494d      	ldr	r1, [pc, #308]	; (80026d4 <DrawChar+0x16c>)
 800259e:	4613      	mov	r3, r2
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	4413      	add	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	440b      	add	r3, r1
 80025a8:	3308      	adds	r3, #8
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	889b      	ldrh	r3, [r3, #4]
 80025ae:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80025b0:	8a3b      	ldrh	r3, [r7, #16]
 80025b2:	3307      	adds	r3, #7
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	da00      	bge.n	80025ba <DrawChar+0x52>
 80025b8:	3307      	adds	r3, #7
 80025ba:	10db      	asrs	r3, r3, #3
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	8a3b      	ldrh	r3, [r7, #16]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
 80025ce:	e076      	b.n	80026be <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80025d0:	8a3b      	ldrh	r3, [r7, #16]
 80025d2:	3307      	adds	r3, #7
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	da00      	bge.n	80025da <DrawChar+0x72>
 80025d8:	3307      	adds	r3, #7
 80025da:	10db      	asrs	r3, r3, #3
 80025dc:	461a      	mov	r2, r3
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	fb03 f302 	mul.w	r3, r3, r2
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	4413      	add	r3, r2
 80025e8:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80025ea:	8a3b      	ldrh	r3, [r7, #16]
 80025ec:	3307      	adds	r3, #7
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	da00      	bge.n	80025f4 <DrawChar+0x8c>
 80025f2:	3307      	adds	r3, #7
 80025f4:	10db      	asrs	r3, r3, #3
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d002      	beq.n	8002600 <DrawChar+0x98>
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d004      	beq.n	8002608 <DrawChar+0xa0>
 80025fe:	e00c      	b.n	800261a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	617b      	str	r3, [r7, #20]
      break;
 8002606:	e016      	b.n	8002636 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	021b      	lsls	r3, r3, #8
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	3201      	adds	r2, #1
 8002612:	7812      	ldrb	r2, [r2, #0]
 8002614:	4313      	orrs	r3, r2
 8002616:	617b      	str	r3, [r7, #20]
      break;
 8002618:	e00d      	b.n	8002636 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	041a      	lsls	r2, r3, #16
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	3301      	adds	r3, #1
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	021b      	lsls	r3, r3, #8
 8002628:	4313      	orrs	r3, r2
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	3202      	adds	r2, #2
 800262e:	7812      	ldrb	r2, [r2, #0]
 8002630:	4313      	orrs	r3, r2
 8002632:	617b      	str	r3, [r7, #20]
      break;
 8002634:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8002636:	2300      	movs	r3, #0
 8002638:	61bb      	str	r3, [r7, #24]
 800263a:	e036      	b.n	80026aa <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800263c:	8a3a      	ldrh	r2, [r7, #16]
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	1ad2      	subs	r2, r2, r3
 8002642:	7bfb      	ldrb	r3, [r7, #15]
 8002644:	4413      	add	r3, r2
 8002646:	3b01      	subs	r3, #1
 8002648:	2201      	movs	r2, #1
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	461a      	mov	r2, r3
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	4013      	ands	r3, r2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d012      	beq.n	800267e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	b29a      	uxth	r2, r3
 800265c:	88fb      	ldrh	r3, [r7, #6]
 800265e:	4413      	add	r3, r2
 8002660:	b298      	uxth	r0, r3
 8002662:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <DrawChar+0x168>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	491b      	ldr	r1, [pc, #108]	; (80026d4 <DrawChar+0x16c>)
 8002668:	4613      	mov	r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	88bb      	ldrh	r3, [r7, #4]
 8002676:	4619      	mov	r1, r3
 8002678:	f7ff fd00 	bl	800207c <BSP_LCD_DrawPixel>
 800267c:	e012      	b.n	80026a4 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	b29a      	uxth	r2, r3
 8002682:	88fb      	ldrh	r3, [r7, #6]
 8002684:	4413      	add	r3, r2
 8002686:	b298      	uxth	r0, r3
 8002688:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <DrawChar+0x168>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4911      	ldr	r1, [pc, #68]	; (80026d4 <DrawChar+0x16c>)
 800268e:	4613      	mov	r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	4413      	add	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	3304      	adds	r3, #4
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	88bb      	ldrh	r3, [r7, #4]
 800269e:	4619      	mov	r1, r3
 80026a0:	f7ff fcec 	bl	800207c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	3301      	adds	r3, #1
 80026a8:	61bb      	str	r3, [r7, #24]
 80026aa:	8a3b      	ldrh	r3, [r7, #16]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d3c4      	bcc.n	800263c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80026b2:	88bb      	ldrh	r3, [r7, #4]
 80026b4:	3301      	adds	r3, #1
 80026b6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	3301      	adds	r3, #1
 80026bc:	61fb      	str	r3, [r7, #28]
 80026be:	8a7b      	ldrh	r3, [r7, #18]
 80026c0:	69fa      	ldr	r2, [r7, #28]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d384      	bcc.n	80025d0 <DrawChar+0x68>
  }
}
 80026c6:	bf00      	nop
 80026c8:	3720      	adds	r7, #32
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	200001c4 	.word	0x200001c4
 80026d4:	200001c8 	.word	0x200001c8

080026d8 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af02      	add	r7, sp, #8
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
 80026e4:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80026e6:	4b1e      	ldr	r3, [pc, #120]	; (8002760 <LL_FillBuffer+0x88>)
 80026e8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80026ec:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80026ee:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <LL_FillBuffer+0x8c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a1d      	ldr	r2, [pc, #116]	; (8002768 <LL_FillBuffer+0x90>)
 80026f4:	2134      	movs	r1, #52	; 0x34
 80026f6:	fb01 f303 	mul.w	r3, r1, r3
 80026fa:	4413      	add	r3, r2
 80026fc:	3348      	adds	r3, #72	; 0x48
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d103      	bne.n	800270c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8002704:	4b16      	ldr	r3, [pc, #88]	; (8002760 <LL_FillBuffer+0x88>)
 8002706:	2202      	movs	r2, #2
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	e002      	b.n	8002712 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800270c:	4b14      	ldr	r3, [pc, #80]	; (8002760 <LL_FillBuffer+0x88>)
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8002712:	4a13      	ldr	r2, [pc, #76]	; (8002760 <LL_FillBuffer+0x88>)
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8002718:	4b11      	ldr	r3, [pc, #68]	; (8002760 <LL_FillBuffer+0x88>)
 800271a:	4a14      	ldr	r2, [pc, #80]	; (800276c <LL_FillBuffer+0x94>)
 800271c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800271e:	4810      	ldr	r0, [pc, #64]	; (8002760 <LL_FillBuffer+0x88>)
 8002720:	f002 f820 	bl	8004764 <HAL_DMA2D_Init>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d115      	bne.n	8002756 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800272a:	68f9      	ldr	r1, [r7, #12]
 800272c:	480c      	ldr	r0, [pc, #48]	; (8002760 <LL_FillBuffer+0x88>)
 800272e:	f002 fa87 	bl	8004c40 <HAL_DMA2D_ConfigLayer>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10e      	bne.n	8002756 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69f9      	ldr	r1, [r7, #28]
 8002742:	4807      	ldr	r0, [pc, #28]	; (8002760 <LL_FillBuffer+0x88>)
 8002744:	f002 f858 	bl	80047f8 <HAL_DMA2D_Start>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d103      	bne.n	8002756 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800274e:	210a      	movs	r1, #10
 8002750:	4803      	ldr	r0, [pc, #12]	; (8002760 <LL_FillBuffer+0x88>)
 8002752:	f002 f87c 	bl	800484e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002756:	bf00      	nop
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000184 	.word	0x20000184
 8002764:	200001c4 	.word	0x200001c4
 8002768:	20000370 	.word	0x20000370
 800276c:	4002b000 	.word	0x4002b000

08002770 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002774:	4b29      	ldr	r3, [pc, #164]	; (800281c <BSP_SDRAM_Init+0xac>)
 8002776:	4a2a      	ldr	r2, [pc, #168]	; (8002820 <BSP_SDRAM_Init+0xb0>)
 8002778:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800277a:	4b2a      	ldr	r3, [pc, #168]	; (8002824 <BSP_SDRAM_Init+0xb4>)
 800277c:	2202      	movs	r2, #2
 800277e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002780:	4b28      	ldr	r3, [pc, #160]	; (8002824 <BSP_SDRAM_Init+0xb4>)
 8002782:	2207      	movs	r2, #7
 8002784:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8002786:	4b27      	ldr	r3, [pc, #156]	; (8002824 <BSP_SDRAM_Init+0xb4>)
 8002788:	2204      	movs	r2, #4
 800278a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 800278c:	4b25      	ldr	r3, [pc, #148]	; (8002824 <BSP_SDRAM_Init+0xb4>)
 800278e:	2207      	movs	r2, #7
 8002790:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8002792:	4b24      	ldr	r3, [pc, #144]	; (8002824 <BSP_SDRAM_Init+0xb4>)
 8002794:	2202      	movs	r2, #2
 8002796:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002798:	4b22      	ldr	r3, [pc, #136]	; (8002824 <BSP_SDRAM_Init+0xb4>)
 800279a:	2202      	movs	r2, #2
 800279c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800279e:	4b21      	ldr	r3, [pc, #132]	; (8002824 <BSP_SDRAM_Init+0xb4>)
 80027a0:	2202      	movs	r2, #2
 80027a2:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80027a4:	4b1d      	ldr	r3, [pc, #116]	; (800281c <BSP_SDRAM_Init+0xac>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80027aa:	4b1c      	ldr	r3, [pc, #112]	; (800281c <BSP_SDRAM_Init+0xac>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80027b0:	4b1a      	ldr	r3, [pc, #104]	; (800281c <BSP_SDRAM_Init+0xac>)
 80027b2:	2204      	movs	r2, #4
 80027b4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80027b6:	4b19      	ldr	r3, [pc, #100]	; (800281c <BSP_SDRAM_Init+0xac>)
 80027b8:	2210      	movs	r2, #16
 80027ba:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80027bc:	4b17      	ldr	r3, [pc, #92]	; (800281c <BSP_SDRAM_Init+0xac>)
 80027be:	2240      	movs	r2, #64	; 0x40
 80027c0:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80027c2:	4b16      	ldr	r3, [pc, #88]	; (800281c <BSP_SDRAM_Init+0xac>)
 80027c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027c8:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80027ca:	4b14      	ldr	r3, [pc, #80]	; (800281c <BSP_SDRAM_Init+0xac>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80027d0:	4b12      	ldr	r3, [pc, #72]	; (800281c <BSP_SDRAM_Init+0xac>)
 80027d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027d6:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80027d8:	4b10      	ldr	r3, [pc, #64]	; (800281c <BSP_SDRAM_Init+0xac>)
 80027da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027de:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80027e0:	4b0e      	ldr	r3, [pc, #56]	; (800281c <BSP_SDRAM_Init+0xac>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80027e6:	2100      	movs	r1, #0
 80027e8:	480c      	ldr	r0, [pc, #48]	; (800281c <BSP_SDRAM_Init+0xac>)
 80027ea:	f000 f87f 	bl	80028ec <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80027ee:	490d      	ldr	r1, [pc, #52]	; (8002824 <BSP_SDRAM_Init+0xb4>)
 80027f0:	480a      	ldr	r0, [pc, #40]	; (800281c <BSP_SDRAM_Init+0xac>)
 80027f2:	f006 f8e0 	bl	80089b6 <HAL_SDRAM_Init>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80027fc:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <BSP_SDRAM_Init+0xb8>)
 80027fe:	2201      	movs	r2, #1
 8002800:	701a      	strb	r2, [r3, #0]
 8002802:	e002      	b.n	800280a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002804:	4b08      	ldr	r3, [pc, #32]	; (8002828 <BSP_SDRAM_Init+0xb8>)
 8002806:	2200      	movs	r2, #0
 8002808:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800280a:	f240 6003 	movw	r0, #1539	; 0x603
 800280e:	f000 f80d 	bl	800282c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002812:	4b05      	ldr	r3, [pc, #20]	; (8002828 <BSP_SDRAM_Init+0xb8>)
 8002814:	781b      	ldrb	r3, [r3, #0]
}
 8002816:	4618      	mov	r0, r3
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000418 	.word	0x20000418
 8002820:	a0000140 	.word	0xa0000140
 8002824:	20000264 	.word	0x20000264
 8002828:	20000040 	.word	0x20000040

0800282c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002838:	4b2a      	ldr	r3, [pc, #168]	; (80028e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800283a:	2201      	movs	r2, #1
 800283c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800283e:	4b29      	ldr	r3, [pc, #164]	; (80028e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002840:	2210      	movs	r2, #16
 8002842:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002844:	4b27      	ldr	r3, [pc, #156]	; (80028e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002846:	2201      	movs	r2, #1
 8002848:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800284a:	4b26      	ldr	r3, [pc, #152]	; (80028e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800284c:	2200      	movs	r2, #0
 800284e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002850:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002854:	4923      	ldr	r1, [pc, #140]	; (80028e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002856:	4824      	ldr	r0, [pc, #144]	; (80028e8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002858:	f006 f8e1 	bl	8008a1e <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800285c:	2001      	movs	r0, #1
 800285e:	f000 fbfb 	bl	8003058 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002862:	4b20      	ldr	r3, [pc, #128]	; (80028e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002864:	2202      	movs	r2, #2
 8002866:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002868:	4b1e      	ldr	r3, [pc, #120]	; (80028e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800286a:	2210      	movs	r2, #16
 800286c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800286e:	4b1d      	ldr	r3, [pc, #116]	; (80028e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002870:	2201      	movs	r2, #1
 8002872:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002874:	4b1b      	ldr	r3, [pc, #108]	; (80028e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002876:	2200      	movs	r2, #0
 8002878:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800287a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800287e:	4919      	ldr	r1, [pc, #100]	; (80028e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002880:	4819      	ldr	r0, [pc, #100]	; (80028e8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002882:	f006 f8cc 	bl	8008a1e <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002886:	4b17      	ldr	r3, [pc, #92]	; (80028e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002888:	2203      	movs	r2, #3
 800288a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800288c:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800288e:	2210      	movs	r2, #16
 8002890:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8002892:	4b14      	ldr	r3, [pc, #80]	; (80028e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002894:	2208      	movs	r2, #8
 8002896:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002898:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800289a:	2200      	movs	r2, #0
 800289c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800289e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028a2:	4910      	ldr	r1, [pc, #64]	; (80028e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028a4:	4810      	ldr	r0, [pc, #64]	; (80028e8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80028a6:	f006 f8ba 	bl	8008a1e <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80028aa:	f44f 7308 	mov.w	r3, #544	; 0x220
 80028ae:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028b2:	2204      	movs	r2, #4
 80028b4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80028b6:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028b8:	2210      	movs	r2, #16
 80028ba:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80028bc:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028be:	2201      	movs	r2, #1
 80028c0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4a07      	ldr	r2, [pc, #28]	; (80028e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028c6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80028c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028cc:	4905      	ldr	r1, [pc, #20]	; (80028e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028ce:	4806      	ldr	r0, [pc, #24]	; (80028e8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80028d0:	f006 f8a5 	bl	8008a1e <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	4804      	ldr	r0, [pc, #16]	; (80028e8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80028d8:	f006 f8cc 	bl	8008a74 <HAL_SDRAM_ProgramRefreshRate>
}
 80028dc:	bf00      	nop
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	20000280 	.word	0x20000280
 80028e8:	20000418 	.word	0x20000418

080028ec <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b090      	sub	sp, #64	; 0x40
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80028f6:	4b70      	ldr	r3, [pc, #448]	; (8002ab8 <BSP_SDRAM_MspInit+0x1cc>)
 80028f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fa:	4a6f      	ldr	r2, [pc, #444]	; (8002ab8 <BSP_SDRAM_MspInit+0x1cc>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6393      	str	r3, [r2, #56]	; 0x38
 8002902:	4b6d      	ldr	r3, [pc, #436]	; (8002ab8 <BSP_SDRAM_MspInit+0x1cc>)
 8002904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	62bb      	str	r3, [r7, #40]	; 0x28
 800290c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800290e:	4b6a      	ldr	r3, [pc, #424]	; (8002ab8 <BSP_SDRAM_MspInit+0x1cc>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	4a69      	ldr	r2, [pc, #420]	; (8002ab8 <BSP_SDRAM_MspInit+0x1cc>)
 8002914:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002918:	6313      	str	r3, [r2, #48]	; 0x30
 800291a:	4b67      	ldr	r3, [pc, #412]	; (8002ab8 <BSP_SDRAM_MspInit+0x1cc>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002926:	4b64      	ldr	r3, [pc, #400]	; (8002ab8 <BSP_SDRAM_MspInit+0x1cc>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	4a63      	ldr	r2, [pc, #396]	; (8002ab8 <BSP_SDRAM_MspInit+0x1cc>)
 800292c:	f043 0304 	orr.w	r3, r3, #4
 8002930:	6313      	str	r3, [r2, #48]	; 0x30
 8002932:	4b61      	ldr	r3, [pc, #388]	; (8002ab8 <BSP_SDRAM_MspInit+0x1cc>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	f003 0304 	and.w	r3, r3, #4
 800293a:	623b      	str	r3, [r7, #32]
 800293c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800293e:	4b5e      	ldr	r3, [pc, #376]	; (8002ab8 <BSP_SDRAM_MspInit+0x1cc>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	4a5d      	ldr	r2, [pc, #372]	; (8002ab8 <BSP_SDRAM_MspInit+0x1cc>)
 8002944:	f043 0308 	orr.w	r3, r3, #8
 8002948:	6313      	str	r3, [r2, #48]	; 0x30
 800294a:	4b5b      	ldr	r3, [pc, #364]	; (8002ab8 <BSP_SDRAM_MspInit+0x1cc>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	61fb      	str	r3, [r7, #28]
 8002954:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002956:	4b58      	ldr	r3, [pc, #352]	; (8002ab8 <BSP_SDRAM_MspInit+0x1cc>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	4a57      	ldr	r2, [pc, #348]	; (8002ab8 <BSP_SDRAM_MspInit+0x1cc>)
 800295c:	f043 0310 	orr.w	r3, r3, #16
 8002960:	6313      	str	r3, [r2, #48]	; 0x30
 8002962:	4b55      	ldr	r3, [pc, #340]	; (8002ab8 <BSP_SDRAM_MspInit+0x1cc>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	f003 0310 	and.w	r3, r3, #16
 800296a:	61bb      	str	r3, [r7, #24]
 800296c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800296e:	4b52      	ldr	r3, [pc, #328]	; (8002ab8 <BSP_SDRAM_MspInit+0x1cc>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	4a51      	ldr	r2, [pc, #324]	; (8002ab8 <BSP_SDRAM_MspInit+0x1cc>)
 8002974:	f043 0320 	orr.w	r3, r3, #32
 8002978:	6313      	str	r3, [r2, #48]	; 0x30
 800297a:	4b4f      	ldr	r3, [pc, #316]	; (8002ab8 <BSP_SDRAM_MspInit+0x1cc>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f003 0320 	and.w	r3, r3, #32
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002986:	4b4c      	ldr	r3, [pc, #304]	; (8002ab8 <BSP_SDRAM_MspInit+0x1cc>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	4a4b      	ldr	r2, [pc, #300]	; (8002ab8 <BSP_SDRAM_MspInit+0x1cc>)
 800298c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002990:	6313      	str	r3, [r2, #48]	; 0x30
 8002992:	4b49      	ldr	r3, [pc, #292]	; (8002ab8 <BSP_SDRAM_MspInit+0x1cc>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299a:	613b      	str	r3, [r7, #16]
 800299c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800299e:	4b46      	ldr	r3, [pc, #280]	; (8002ab8 <BSP_SDRAM_MspInit+0x1cc>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	4a45      	ldr	r2, [pc, #276]	; (8002ab8 <BSP_SDRAM_MspInit+0x1cc>)
 80029a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029a8:	6313      	str	r3, [r2, #48]	; 0x30
 80029aa:	4b43      	ldr	r3, [pc, #268]	; (8002ab8 <BSP_SDRAM_MspInit+0x1cc>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80029b6:	2302      	movs	r3, #2
 80029b8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80029ba:	2301      	movs	r3, #1
 80029bc:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80029be:	2302      	movs	r3, #2
 80029c0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80029c2:	230c      	movs	r3, #12
 80029c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80029c6:	2308      	movs	r3, #8
 80029c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80029ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029ce:	4619      	mov	r1, r3
 80029d0:	483a      	ldr	r0, [pc, #232]	; (8002abc <BSP_SDRAM_MspInit+0x1d0>)
 80029d2:	f002 fa63 	bl	8004e9c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80029d6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80029da:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80029dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029e0:	4619      	mov	r1, r3
 80029e2:	4837      	ldr	r0, [pc, #220]	; (8002ac0 <BSP_SDRAM_MspInit+0x1d4>)
 80029e4:	f002 fa5a 	bl	8004e9c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80029e8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80029ec:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80029ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029f2:	4619      	mov	r1, r3
 80029f4:	4833      	ldr	r0, [pc, #204]	; (8002ac4 <BSP_SDRAM_MspInit+0x1d8>)
 80029f6:	f002 fa51 	bl	8004e9c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80029fa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80029fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002a00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a04:	4619      	mov	r1, r3
 8002a06:	4830      	ldr	r0, [pc, #192]	; (8002ac8 <BSP_SDRAM_MspInit+0x1dc>)
 8002a08:	f002 fa48 	bl	8004e9c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002a0c:	f248 1333 	movw	r3, #33075	; 0x8133
 8002a10:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002a12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a16:	4619      	mov	r1, r3
 8002a18:	482c      	ldr	r0, [pc, #176]	; (8002acc <BSP_SDRAM_MspInit+0x1e0>)
 8002a1a:	f002 fa3f 	bl	8004e9c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8002a1e:	2328      	movs	r3, #40	; 0x28
 8002a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a26:	4619      	mov	r1, r3
 8002a28:	4829      	ldr	r0, [pc, #164]	; (8002ad0 <BSP_SDRAM_MspInit+0x1e4>)
 8002a2a:	f002 fa37 	bl	8004e9c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002a2e:	4b29      	ldr	r3, [pc, #164]	; (8002ad4 <BSP_SDRAM_MspInit+0x1e8>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002a34:	4b27      	ldr	r3, [pc, #156]	; (8002ad4 <BSP_SDRAM_MspInit+0x1e8>)
 8002a36:	2280      	movs	r2, #128	; 0x80
 8002a38:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002a3a:	4b26      	ldr	r3, [pc, #152]	; (8002ad4 <BSP_SDRAM_MspInit+0x1e8>)
 8002a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a40:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002a42:	4b24      	ldr	r3, [pc, #144]	; (8002ad4 <BSP_SDRAM_MspInit+0x1e8>)
 8002a44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a48:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a4a:	4b22      	ldr	r3, [pc, #136]	; (8002ad4 <BSP_SDRAM_MspInit+0x1e8>)
 8002a4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a50:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002a52:	4b20      	ldr	r3, [pc, #128]	; (8002ad4 <BSP_SDRAM_MspInit+0x1e8>)
 8002a54:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a58:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002a5a:	4b1e      	ldr	r3, [pc, #120]	; (8002ad4 <BSP_SDRAM_MspInit+0x1e8>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002a60:	4b1c      	ldr	r3, [pc, #112]	; (8002ad4 <BSP_SDRAM_MspInit+0x1e8>)
 8002a62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a66:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002a68:	4b1a      	ldr	r3, [pc, #104]	; (8002ad4 <BSP_SDRAM_MspInit+0x1e8>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002a6e:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <BSP_SDRAM_MspInit+0x1e8>)
 8002a70:	2203      	movs	r2, #3
 8002a72:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002a74:	4b17      	ldr	r3, [pc, #92]	; (8002ad4 <BSP_SDRAM_MspInit+0x1e8>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002a7a:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <BSP_SDRAM_MspInit+0x1e8>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002a80:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <BSP_SDRAM_MspInit+0x1e8>)
 8002a82:	4a15      	ldr	r2, [pc, #84]	; (8002ad8 <BSP_SDRAM_MspInit+0x1ec>)
 8002a84:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a12      	ldr	r2, [pc, #72]	; (8002ad4 <BSP_SDRAM_MspInit+0x1e8>)
 8002a8a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a8c:	4a11      	ldr	r2, [pc, #68]	; (8002ad4 <BSP_SDRAM_MspInit+0x1e8>)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002a92:	4810      	ldr	r0, [pc, #64]	; (8002ad4 <BSP_SDRAM_MspInit+0x1e8>)
 8002a94:	f001 fb40 	bl	8004118 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002a98:	480e      	ldr	r0, [pc, #56]	; (8002ad4 <BSP_SDRAM_MspInit+0x1e8>)
 8002a9a:	f001 fa8f 	bl	8003fbc <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	210f      	movs	r1, #15
 8002aa2:	2038      	movs	r0, #56	; 0x38
 8002aa4:	f001 f9e1 	bl	8003e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002aa8:	2038      	movs	r0, #56	; 0x38
 8002aaa:	f001 f9fa 	bl	8003ea2 <HAL_NVIC_EnableIRQ>
}
 8002aae:	bf00      	nop
 8002ab0:	3740      	adds	r7, #64	; 0x40
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	40020800 	.word	0x40020800
 8002ac0:	40020c00 	.word	0x40020c00
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	40021400 	.word	0x40021400
 8002acc:	40021800 	.word	0x40021800
 8002ad0:	40021c00 	.word	0x40021c00
 8002ad4:	20000290 	.word	0x20000290
 8002ad8:	40026410 	.word	0x40026410

08002adc <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	460a      	mov	r2, r1
 8002ae6:	80fb      	strh	r3, [r7, #6]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8002af0:	4a14      	ldr	r2, [pc, #80]	; (8002b44 <BSP_TS_Init+0x68>)
 8002af2:	88fb      	ldrh	r3, [r7, #6]
 8002af4:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8002af6:	4a14      	ldr	r2, [pc, #80]	; (8002b48 <BSP_TS_Init+0x6c>)
 8002af8:	88bb      	ldrh	r3, [r7, #4]
 8002afa:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8002afc:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <BSP_TS_Init+0x70>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2070      	movs	r0, #112	; 0x70
 8002b02:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8002b04:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <BSP_TS_Init+0x70>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2070      	movs	r0, #112	; 0x70
 8002b0a:	4798      	blx	r3
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b51      	cmp	r3, #81	; 0x51
 8002b10:	d111      	bne.n	8002b36 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8002b12:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <BSP_TS_Init+0x74>)
 8002b14:	4a0d      	ldr	r2, [pc, #52]	; (8002b4c <BSP_TS_Init+0x70>)
 8002b16:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8002b18:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <BSP_TS_Init+0x78>)
 8002b1a:	2270      	movs	r2, #112	; 0x70
 8002b1c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <BSP_TS_Init+0x7c>)
 8002b20:	2208      	movs	r2, #8
 8002b22:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8002b24:	4b0a      	ldr	r3, [pc, #40]	; (8002b50 <BSP_TS_Init+0x74>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	4a0a      	ldr	r2, [pc, #40]	; (8002b54 <BSP_TS_Init+0x78>)
 8002b2c:	7812      	ldrb	r2, [r2, #0]
 8002b2e:	b292      	uxth	r2, r2
 8002b30:	4610      	mov	r0, r2
 8002b32:	4798      	blx	r3
 8002b34:	e001      	b.n	8002b3a <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8002b36:	2303      	movs	r3, #3
 8002b38:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	200002f4 	.word	0x200002f4
 8002b48:	200002f6 	.word	0x200002f6
 8002b4c:	20000000 	.word	0x20000000
 8002b50:	200002f0 	.word	0x200002f0
 8002b54:	200002f9 	.word	0x200002f9
 8002b58:	200002f8 	.word	0x200002f8

08002b5c <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8002b5c:	b590      	push	{r4, r7, lr}
 8002b5e:	b097      	sub	sp, #92	; 0x5c
 8002b60:	af02      	add	r7, sp, #8
 8002b62:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8002b64:	2300      	movs	r3, #0
 8002b66:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8002b76:	4b97      	ldr	r3, [pc, #604]	; (8002dd4 <BSP_TS_GetState+0x278>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	4a96      	ldr	r2, [pc, #600]	; (8002dd8 <BSP_TS_GetState+0x27c>)
 8002b7e:	7812      	ldrb	r2, [r2, #0]
 8002b80:	b292      	uxth	r2, r2
 8002b82:	4610      	mov	r0, r2
 8002b84:	4798      	blx	r3
 8002b86:	4603      	mov	r3, r0
 8002b88:	461a      	mov	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 81a8 	beq.w	8002ee8 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8002b98:	2300      	movs	r3, #0
 8002b9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b9c:	e197      	b.n	8002ece <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8002b9e:	4b8d      	ldr	r3, [pc, #564]	; (8002dd4 <BSP_TS_GetState+0x278>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	4a8c      	ldr	r2, [pc, #560]	; (8002dd8 <BSP_TS_GetState+0x27c>)
 8002ba6:	7812      	ldrb	r2, [r2, #0]
 8002ba8:	b290      	uxth	r0, r2
 8002baa:	f107 0120 	add.w	r1, r7, #32
 8002bae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bb0:	0052      	lsls	r2, r2, #1
 8002bb2:	188c      	adds	r4, r1, r2
 8002bb4:	f107 0114 	add.w	r1, r7, #20
 8002bb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bba:	0052      	lsls	r2, r2, #1
 8002bbc:	440a      	add	r2, r1
 8002bbe:	4621      	mov	r1, r4
 8002bc0:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8002bc2:	4b86      	ldr	r3, [pc, #536]	; (8002ddc <BSP_TS_GetState+0x280>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d11b      	bne.n	8002c02 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 8002bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8002bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002be0:	440b      	add	r3, r1
 8002be2:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8002be6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002bee:	4413      	add	r3, r2
 8002bf0:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8002bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002bfc:	440b      	add	r3, r1
 8002bfe:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8002c02:	4b76      	ldr	r3, [pc, #472]	; (8002ddc <BSP_TS_GetState+0x280>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d010      	beq.n	8002c30 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 8002c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002c16:	4413      	add	r3, r2
 8002c18:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8002c1c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002c2a:	440b      	add	r3, r1
 8002c2c:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8002c30:	4b6a      	ldr	r3, [pc, #424]	; (8002ddc <BSP_TS_GetState+0x280>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d010      	beq.n	8002c5e <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 8002c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002c44:	4413      	add	r3, r2
 8002c46:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8002c4a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002c58:	440b      	add	r3, r1
 8002c5a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8002c5e:	4b5f      	ldr	r3, [pc, #380]	; (8002ddc <BSP_TS_GetState+0x280>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d01b      	beq.n	8002ca2 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 8002c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002c72:	4413      	add	r3, r2
 8002c74:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8002c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002c80:	440b      	add	r3, r1
 8002c82:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8002c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002c8e:	4413      	add	r3, r2
 8002c90:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8002c94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002c9c:	440b      	add	r3, r1
 8002c9e:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8002ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002caa:	4413      	add	r3, r2
 8002cac:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4a4b      	ldr	r2, [pc, #300]	; (8002de0 <BSP_TS_GetState+0x284>)
 8002cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cba:	4299      	cmp	r1, r3
 8002cbc:	d90e      	bls.n	8002cdc <BSP_TS_GetState+0x180>
 8002cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002cc6:	4413      	add	r3, r2
 8002cc8:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8002ccc:	4944      	ldr	r1, [pc, #272]	; (8002de0 <BSP_TS_GetState+0x284>)
 8002cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	e00d      	b.n	8002cf8 <BSP_TS_GetState+0x19c>
 8002cdc:	4a40      	ldr	r2, [pc, #256]	; (8002de0 <BSP_TS_GetState+0x284>)
 8002cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002cee:	440b      	add	r3, r1
 8002cf0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8002cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002d04:	4413      	add	r3, r2
 8002d06:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4a35      	ldr	r2, [pc, #212]	; (8002de4 <BSP_TS_GetState+0x288>)
 8002d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d14:	4299      	cmp	r1, r3
 8002d16:	d90e      	bls.n	8002d36 <BSP_TS_GetState+0x1da>
 8002d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002d20:	4413      	add	r3, r2
 8002d22:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8002d26:	492f      	ldr	r1, [pc, #188]	; (8002de4 <BSP_TS_GetState+0x288>)
 8002d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d2a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	e00d      	b.n	8002d52 <BSP_TS_GetState+0x1f6>
 8002d36:	4a2b      	ldr	r2, [pc, #172]	; (8002de4 <BSP_TS_GetState+0x288>)
 8002d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002d48:	440b      	add	r3, r1
 8002d4a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8002d56:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8002d5a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002d5e:	4413      	add	r3, r2
 8002d60:	2b05      	cmp	r3, #5
 8002d62:	dd17      	ble.n	8002d94 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8002d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002d72:	4619      	mov	r1, r3
 8002d74:	4a1a      	ldr	r2, [pc, #104]	; (8002de0 <BSP_TS_GetState+0x284>)
 8002d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8002d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002d84:	4413      	add	r3, r2
 8002d86:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4a15      	ldr	r2, [pc, #84]	; (8002de4 <BSP_TS_GetState+0x288>)
 8002d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8002d94:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <BSP_TS_GetState+0x27c>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b70      	cmp	r3, #112	; 0x70
 8002d9a:	d125      	bne.n	8002de8 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 8002d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002da4:	4413      	add	r3, r2
 8002da6:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	4413      	add	r3, r2
 8002db2:	460a      	mov	r2, r1
 8002db4:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8002db6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dc8:	3304      	adds	r3, #4
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	4413      	add	r3, r2
 8002dce:	460a      	mov	r2, r1
 8002dd0:	809a      	strh	r2, [r3, #4]
 8002dd2:	e02c      	b.n	8002e2e <BSP_TS_GetState+0x2d2>
 8002dd4:	200002f0 	.word	0x200002f0
 8002dd8:	200002f9 	.word	0x200002f9
 8002ddc:	200002f8 	.word	0x200002f8
 8002de0:	200002fc 	.word	0x200002fc
 8002de4:	20000310 	.word	0x20000310
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8002de8:	4b42      	ldr	r3, [pc, #264]	; (8002ef4 <BSP_TS_GetState+0x398>)
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	4619      	mov	r1, r3
 8002dee:	4a42      	ldr	r2, [pc, #264]	; (8002ef8 <BSP_TS_GetState+0x39c>)
 8002df0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df6:	fb03 f301 	mul.w	r3, r3, r1
 8002dfa:	0b1b      	lsrs	r3, r3, #12
 8002dfc:	b299      	uxth	r1, r3
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	4413      	add	r3, r2
 8002e06:	460a      	mov	r2, r1
 8002e08:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8002e0a:	4b3c      	ldr	r3, [pc, #240]	; (8002efc <BSP_TS_GetState+0x3a0>)
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4a3b      	ldr	r2, [pc, #236]	; (8002f00 <BSP_TS_GetState+0x3a4>)
 8002e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e18:	fb03 f301 	mul.w	r3, r3, r1
 8002e1c:	0b1b      	lsrs	r3, r3, #12
 8002e1e:	b299      	uxth	r1, r3
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e24:	3304      	adds	r3, #4
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	4413      	add	r3, r2
 8002e2a:	460a      	mov	r2, r1
 8002e2c:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8002e2e:	4b35      	ldr	r3, [pc, #212]	; (8002f04 <BSP_TS_GetState+0x3a8>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	b298      	uxth	r0, r3
 8002e34:	f107 010c 	add.w	r1, r7, #12
 8002e38:	f107 0210 	add.w	r2, r7, #16
 8002e3c:	f107 0308 	add.w	r3, r7, #8
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	460b      	mov	r3, r1
 8002e44:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002e46:	f7fe f96b 	bl	8001120 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	b2d9      	uxtb	r1, r3
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e52:	4413      	add	r3, r2
 8002e54:	3316      	adds	r3, #22
 8002e56:	460a      	mov	r2, r1
 8002e58:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	b2d9      	uxtb	r1, r3
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e62:	4413      	add	r3, r2
 8002e64:	3320      	adds	r3, #32
 8002e66:	460a      	mov	r2, r1
 8002e68:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	d827      	bhi.n	8002ec0 <BSP_TS_GetState+0x364>
 8002e70:	a201      	add	r2, pc, #4	; (adr r2, 8002e78 <BSP_TS_GetState+0x31c>)
 8002e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e76:	bf00      	nop
 8002e78:	08002e89 	.word	0x08002e89
 8002e7c:	08002e97 	.word	0x08002e97
 8002e80:	08002ea5 	.word	0x08002ea5
 8002e84:	08002eb3 	.word	0x08002eb3
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e8c:	4413      	add	r3, r2
 8002e8e:	331b      	adds	r3, #27
 8002e90:	2201      	movs	r2, #1
 8002e92:	701a      	strb	r2, [r3, #0]
          break;
 8002e94:	e018      	b.n	8002ec8 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e9a:	4413      	add	r3, r2
 8002e9c:	331b      	adds	r3, #27
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	701a      	strb	r2, [r3, #0]
          break;
 8002ea2:	e011      	b.n	8002ec8 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ea8:	4413      	add	r3, r2
 8002eaa:	331b      	adds	r3, #27
 8002eac:	2203      	movs	r2, #3
 8002eae:	701a      	strb	r2, [r3, #0]
          break;
 8002eb0:	e00a      	b.n	8002ec8 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eb6:	4413      	add	r3, r2
 8002eb8:	331b      	adds	r3, #27
 8002eba:	2200      	movs	r2, #0
 8002ebc:	701a      	strb	r2, [r3, #0]
          break;
 8002ebe:	e003      	b.n	8002ec8 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8002ec6:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8002ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eca:	3301      	adds	r3, #1
 8002ecc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	f4ff ae61 	bcc.w	8002b9e <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 f813 	bl	8002f08 <BSP_TS_Get_GestureId>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8002ee8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3754      	adds	r7, #84	; 0x54
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd90      	pop	{r4, r7, pc}
 8002ef4:	200002f4 	.word	0x200002f4
 8002ef8:	200002fc 	.word	0x200002fc
 8002efc:	200002f6 	.word	0x200002f6
 8002f00:	20000310 	.word	0x20000310
 8002f04:	200002f9 	.word	0x200002f9

08002f08 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8002f10:	2300      	movs	r3, #0
 8002f12:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8002f14:	2300      	movs	r3, #0
 8002f16:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8002f18:	4b1f      	ldr	r3, [pc, #124]	; (8002f98 <BSP_TS_Get_GestureId+0x90>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	f107 0208 	add.w	r2, r7, #8
 8002f22:	4611      	mov	r1, r2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fe f8e2 	bl	80010ee <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2b18      	cmp	r3, #24
 8002f2e:	d01b      	beq.n	8002f68 <BSP_TS_Get_GestureId+0x60>
 8002f30:	2b18      	cmp	r3, #24
 8002f32:	d806      	bhi.n	8002f42 <BSP_TS_Get_GestureId+0x3a>
 8002f34:	2b10      	cmp	r3, #16
 8002f36:	d00f      	beq.n	8002f58 <BSP_TS_Get_GestureId+0x50>
 8002f38:	2b14      	cmp	r3, #20
 8002f3a:	d011      	beq.n	8002f60 <BSP_TS_Get_GestureId+0x58>
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d007      	beq.n	8002f50 <BSP_TS_Get_GestureId+0x48>
 8002f40:	e022      	b.n	8002f88 <BSP_TS_Get_GestureId+0x80>
 8002f42:	2b40      	cmp	r3, #64	; 0x40
 8002f44:	d018      	beq.n	8002f78 <BSP_TS_Get_GestureId+0x70>
 8002f46:	2b49      	cmp	r3, #73	; 0x49
 8002f48:	d01a      	beq.n	8002f80 <BSP_TS_Get_GestureId+0x78>
 8002f4a:	2b1c      	cmp	r3, #28
 8002f4c:	d010      	beq.n	8002f70 <BSP_TS_Get_GestureId+0x68>
 8002f4e:	e01b      	b.n	8002f88 <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002f56:	e01a      	b.n	8002f8e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002f5e:	e016      	b.n	8002f8e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002f66:	e012      	b.n	8002f8e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002f6e:	e00e      	b.n	8002f8e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2204      	movs	r2, #4
 8002f74:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002f76:	e00a      	b.n	8002f8e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2205      	movs	r2, #5
 8002f7c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002f7e:	e006      	b.n	8002f8e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2206      	movs	r2, #6
 8002f84:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002f86:	e002      	b.n	8002f8e <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f8c:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	200002f9 	.word	0x200002f9

08002f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fa0:	2003      	movs	r0, #3
 8002fa2:	f000 ff57 	bl	8003e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	f000 f806 	bl	8002fb8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002fac:	f009 f9c0 	bl	800c330 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	bd80      	pop	{r7, pc}
	...

08002fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fc0:	4b12      	ldr	r3, [pc, #72]	; (800300c <HAL_InitTick+0x54>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	4b12      	ldr	r3, [pc, #72]	; (8003010 <HAL_InitTick+0x58>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 ff71 	bl	8003ebe <HAL_SYSTICK_Config>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e00e      	b.n	8003004 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b0f      	cmp	r3, #15
 8002fea:	d80a      	bhi.n	8003002 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fec:	2200      	movs	r2, #0
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff4:	f000 ff39 	bl	8003e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ff8:	4a06      	ldr	r2, [pc, #24]	; (8003014 <HAL_InitTick+0x5c>)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
 8003000:	e000      	b.n	8003004 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
}
 8003004:	4618      	mov	r0, r3
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	200000ac 	.word	0x200000ac
 8003010:	20000048 	.word	0x20000048
 8003014:	20000044 	.word	0x20000044

08003018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800301c:	4b06      	ldr	r3, [pc, #24]	; (8003038 <HAL_IncTick+0x20>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	4b06      	ldr	r3, [pc, #24]	; (800303c <HAL_IncTick+0x24>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4413      	add	r3, r2
 8003028:	4a04      	ldr	r2, [pc, #16]	; (800303c <HAL_IncTick+0x24>)
 800302a:	6013      	str	r3, [r2, #0]
}
 800302c:	bf00      	nop
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	20000048 	.word	0x20000048
 800303c:	2000044c 	.word	0x2000044c

08003040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  return uwTick;
 8003044:	4b03      	ldr	r3, [pc, #12]	; (8003054 <HAL_GetTick+0x14>)
 8003046:	681b      	ldr	r3, [r3, #0]
}
 8003048:	4618      	mov	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	2000044c 	.word	0x2000044c

08003058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003060:	f7ff ffee 	bl	8003040 <HAL_GetTick>
 8003064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003070:	d005      	beq.n	800307e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003072:	4b09      	ldr	r3, [pc, #36]	; (8003098 <HAL_Delay+0x40>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4413      	add	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800307e:	bf00      	nop
 8003080:	f7ff ffde 	bl	8003040 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	429a      	cmp	r2, r3
 800308e:	d8f7      	bhi.n	8003080 <HAL_Delay+0x28>
  {
  }
}
 8003090:	bf00      	nop
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20000048 	.word	0x20000048

0800309c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e031      	b.n	8003116 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d109      	bne.n	80030ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f009 f95c 	bl	800c378 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f003 0310 	and.w	r3, r3, #16
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d116      	bne.n	8003108 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030de:	4b10      	ldr	r3, [pc, #64]	; (8003120 <HAL_ADC_Init+0x84>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	f043 0202 	orr.w	r2, r3, #2
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 fc5c 	bl	80039a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	f023 0303 	bic.w	r3, r3, #3
 80030fe:	f043 0201 	orr.w	r2, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	641a      	str	r2, [r3, #64]	; 0x40
 8003106:	e001      	b.n	800310c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003114:	7bfb      	ldrb	r3, [r7, #15]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	ffffeefd 	.word	0xffffeefd

08003124 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800312c:	2300      	movs	r3, #0
 800312e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003136:	2b01      	cmp	r3, #1
 8003138:	d101      	bne.n	800313e <HAL_ADC_Start+0x1a>
 800313a:	2302      	movs	r3, #2
 800313c:	e0a0      	b.n	8003280 <HAL_ADC_Start+0x15c>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b01      	cmp	r3, #1
 8003152:	d018      	beq.n	8003186 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0201 	orr.w	r2, r2, #1
 8003162:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003164:	4b49      	ldr	r3, [pc, #292]	; (800328c <HAL_ADC_Start+0x168>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a49      	ldr	r2, [pc, #292]	; (8003290 <HAL_ADC_Start+0x16c>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	0c9a      	lsrs	r2, r3, #18
 8003170:	4613      	mov	r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	4413      	add	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003178:	e002      	b.n	8003180 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	3b01      	subs	r3, #1
 800317e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f9      	bne.n	800317a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b01      	cmp	r3, #1
 8003192:	d174      	bne.n	800327e <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003198:	4b3e      	ldr	r3, [pc, #248]	; (8003294 <HAL_ADC_Start+0x170>)
 800319a:	4013      	ands	r3, r2
 800319c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d007      	beq.n	80031c2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ce:	d106      	bne.n	80031de <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d4:	f023 0206 	bic.w	r2, r3, #6
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	645a      	str	r2, [r3, #68]	; 0x44
 80031dc:	e002      	b.n	80031e4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80031f4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80031f6:	4b28      	ldr	r3, [pc, #160]	; (8003298 <HAL_ADC_Start+0x174>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 031f 	and.w	r3, r3, #31
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10f      	bne.n	8003222 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d136      	bne.n	800327e <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800321e:	609a      	str	r2, [r3, #8]
 8003220:	e02d      	b.n	800327e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a1d      	ldr	r2, [pc, #116]	; (800329c <HAL_ADC_Start+0x178>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d10e      	bne.n	800324a <HAL_ADC_Start+0x126>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d107      	bne.n	800324a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003248:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800324a:	4b13      	ldr	r3, [pc, #76]	; (8003298 <HAL_ADC_Start+0x174>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f003 0310 	and.w	r3, r3, #16
 8003252:	2b00      	cmp	r3, #0
 8003254:	d113      	bne.n	800327e <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a11      	ldr	r2, [pc, #68]	; (80032a0 <HAL_ADC_Start+0x17c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d10e      	bne.n	800327e <HAL_ADC_Start+0x15a>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d107      	bne.n	800327e <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800327c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	200000ac 	.word	0x200000ac
 8003290:	431bde83 	.word	0x431bde83
 8003294:	fffff8fe 	.word	0xfffff8fe
 8003298:	40012300 	.word	0x40012300
 800329c:	40012000 	.word	0x40012000
 80032a0:	40012200 	.word	0x40012200

080032a4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80032ac:	2300      	movs	r3, #0
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	2300      	movs	r3, #0
 80032b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b02      	cmp	r3, #2
 80032c0:	bf0c      	ite	eq
 80032c2:	2301      	moveq	r3, #1
 80032c4:	2300      	movne	r3, #0
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 0320 	and.w	r3, r3, #32
 80032d4:	2b20      	cmp	r3, #32
 80032d6:	bf0c      	ite	eq
 80032d8:	2301      	moveq	r3, #1
 80032da:	2300      	movne	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d049      	beq.n	800337a <HAL_ADC_IRQHandler+0xd6>
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d046      	beq.n	800337a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	f003 0310 	and.w	r3, r3, #16
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d105      	bne.n	8003304 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d12b      	bne.n	800336a <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003316:	2b00      	cmp	r3, #0
 8003318:	d127      	bne.n	800336a <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003324:	2b00      	cmp	r3, #0
 8003326:	d006      	beq.n	8003336 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003332:	2b00      	cmp	r3, #0
 8003334:	d119      	bne.n	800336a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0220 	bic.w	r2, r2, #32
 8003344:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d105      	bne.n	800336a <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	f043 0201 	orr.w	r2, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f008 fc60 	bl	800bc30 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f06f 0212 	mvn.w	r2, #18
 8003378:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b04      	cmp	r3, #4
 8003386:	bf0c      	ite	eq
 8003388:	2301      	moveq	r3, #1
 800338a:	2300      	movne	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339a:	2b80      	cmp	r3, #128	; 0x80
 800339c:	bf0c      	ite	eq
 800339e:	2301      	moveq	r3, #1
 80033a0:	2300      	movne	r3, #0
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d057      	beq.n	800345c <HAL_ADC_IRQHandler+0x1b8>
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d054      	beq.n	800345c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	f003 0310 	and.w	r3, r3, #16
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d105      	bne.n	80033ca <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d139      	bne.n	800344c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033de:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d006      	beq.n	80033f4 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d12b      	bne.n	800344c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d124      	bne.n	800344c <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800340c:	2b00      	cmp	r3, #0
 800340e:	d11d      	bne.n	800344c <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003414:	2b00      	cmp	r3, #0
 8003416:	d119      	bne.n	800344c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003426:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343c:	2b00      	cmp	r3, #0
 800343e:	d105      	bne.n	800344c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	f043 0201 	orr.w	r2, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fc27 	bl	8003ca0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f06f 020c 	mvn.w	r2, #12
 800345a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b01      	cmp	r3, #1
 8003468:	bf0c      	ite	eq
 800346a:	2301      	moveq	r3, #1
 800346c:	2300      	movne	r3, #0
 800346e:	b2db      	uxtb	r3, r3
 8003470:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347c:	2b40      	cmp	r3, #64	; 0x40
 800347e:	bf0c      	ite	eq
 8003480:	2301      	moveq	r3, #1
 8003482:	2300      	movne	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d017      	beq.n	80034be <HAL_ADC_IRQHandler+0x21a>
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d014      	beq.n	80034be <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d10d      	bne.n	80034be <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f932 	bl	8003718 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f06f 0201 	mvn.w	r2, #1
 80034bc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0320 	and.w	r3, r3, #32
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	bf0c      	ite	eq
 80034cc:	2301      	moveq	r3, #1
 80034ce:	2300      	movne	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034e2:	bf0c      	ite	eq
 80034e4:	2301      	moveq	r3, #1
 80034e6:	2300      	movne	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d015      	beq.n	800351e <HAL_ADC_IRQHandler+0x27a>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d012      	beq.n	800351e <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fc:	f043 0202 	orr.w	r2, r3, #2
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0220 	mvn.w	r2, #32
 800350c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f90c 	bl	800372c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f06f 0220 	mvn.w	r2, #32
 800351c:	601a      	str	r2, [r3, #0]
  }
}
 800351e:	bf00      	nop
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8003534:	2300      	movs	r3, #0
 8003536:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800353e:	2b01      	cmp	r3, #1
 8003540:	d101      	bne.n	8003546 <HAL_ADC_Start_DMA+0x1e>
 8003542:	2302      	movs	r3, #2
 8003544:	e0c7      	b.n	80036d6 <HAL_ADC_Start_DMA+0x1ae>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b01      	cmp	r3, #1
 800355a:	d018      	beq.n	800358e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0201 	orr.w	r2, r2, #1
 800356a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800356c:	4b5c      	ldr	r3, [pc, #368]	; (80036e0 <HAL_ADC_Start_DMA+0x1b8>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a5c      	ldr	r2, [pc, #368]	; (80036e4 <HAL_ADC_Start_DMA+0x1bc>)
 8003572:	fba2 2303 	umull	r2, r3, r2, r3
 8003576:	0c9a      	lsrs	r2, r3, #18
 8003578:	4613      	mov	r3, r2
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	4413      	add	r3, r2
 800357e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003580:	e002      	b.n	8003588 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	3b01      	subs	r3, #1
 8003586:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f9      	bne.n	8003582 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b01      	cmp	r3, #1
 800359a:	f040 809b 	bne.w	80036d4 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035a2:	4b51      	ldr	r3, [pc, #324]	; (80036e8 <HAL_ADC_Start_DMA+0x1c0>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d007      	beq.n	80035cc <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d8:	d106      	bne.n	80035e8 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035de:	f023 0206 	bic.w	r2, r3, #6
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	645a      	str	r2, [r3, #68]	; 0x44
 80035e6:	e002      	b.n	80035ee <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fa:	4a3c      	ldr	r2, [pc, #240]	; (80036ec <HAL_ADC_Start_DMA+0x1c4>)
 80035fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003602:	4a3b      	ldr	r2, [pc, #236]	; (80036f0 <HAL_ADC_Start_DMA+0x1c8>)
 8003604:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360a:	4a3a      	ldr	r2, [pc, #232]	; (80036f4 <HAL_ADC_Start_DMA+0x1cc>)
 800360c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003616:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003626:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003636:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	334c      	adds	r3, #76	; 0x4c
 8003642:	4619      	mov	r1, r3
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f000 fdc4 	bl	80041d4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800364c:	4b2a      	ldr	r3, [pc, #168]	; (80036f8 <HAL_ADC_Start_DMA+0x1d0>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f003 031f 	and.w	r3, r3, #31
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10f      	bne.n	8003678 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d136      	bne.n	80036d4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003674:	609a      	str	r2, [r3, #8]
 8003676:	e02d      	b.n	80036d4 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a1f      	ldr	r2, [pc, #124]	; (80036fc <HAL_ADC_Start_DMA+0x1d4>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d10e      	bne.n	80036a0 <HAL_ADC_Start_DMA+0x178>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d107      	bne.n	80036a0 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800369e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80036a0:	4b15      	ldr	r3, [pc, #84]	; (80036f8 <HAL_ADC_Start_DMA+0x1d0>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 0310 	and.w	r3, r3, #16
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d113      	bne.n	80036d4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a13      	ldr	r2, [pc, #76]	; (8003700 <HAL_ADC_Start_DMA+0x1d8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d10e      	bne.n	80036d4 <HAL_ADC_Start_DMA+0x1ac>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d107      	bne.n	80036d4 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036d2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	200000ac 	.word	0x200000ac
 80036e4:	431bde83 	.word	0x431bde83
 80036e8:	fffff8fe 	.word	0xfffff8fe
 80036ec:	08003b9d 	.word	0x08003b9d
 80036f0:	08003c57 	.word	0x08003c57
 80036f4:	08003c73 	.word	0x08003c73
 80036f8:	40012300 	.word	0x40012300
 80036fc:	40012000 	.word	0x40012000
 8003700:	40012200 	.word	0x40012200

08003704 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800374a:	2300      	movs	r3, #0
 800374c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_ADC_ConfigChannel+0x1c>
 8003758:	2302      	movs	r3, #2
 800375a:	e115      	b.n	8003988 <HAL_ADC_ConfigChannel+0x248>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b09      	cmp	r3, #9
 800376a:	d935      	bls.n	80037d8 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68d9      	ldr	r1, [r3, #12]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	b29b      	uxth	r3, r3
 8003778:	461a      	mov	r2, r3
 800377a:	4613      	mov	r3, r2
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	4413      	add	r3, r2
 8003780:	3b1e      	subs	r3, #30
 8003782:	2207      	movs	r2, #7
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	43da      	mvns	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	400a      	ands	r2, r1
 8003790:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a7f      	ldr	r2, [pc, #508]	; (8003994 <HAL_ADC_ConfigChannel+0x254>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d10a      	bne.n	80037b2 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68d9      	ldr	r1, [r3, #12]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	061a      	lsls	r2, r3, #24
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	60da      	str	r2, [r3, #12]
 80037b0:	e035      	b.n	800381e <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68d9      	ldr	r1, [r3, #12]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	4618      	mov	r0, r3
 80037c4:	4603      	mov	r3, r0
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	4403      	add	r3, r0
 80037ca:	3b1e      	subs	r3, #30
 80037cc:	409a      	lsls	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	60da      	str	r2, [r3, #12]
 80037d6:	e022      	b.n	800381e <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6919      	ldr	r1, [r3, #16]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	461a      	mov	r2, r3
 80037e6:	4613      	mov	r3, r2
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	4413      	add	r3, r2
 80037ec:	2207      	movs	r2, #7
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43da      	mvns	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	400a      	ands	r2, r1
 80037fa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6919      	ldr	r1, [r3, #16]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	b29b      	uxth	r3, r3
 800380c:	4618      	mov	r0, r3
 800380e:	4603      	mov	r3, r0
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	4403      	add	r3, r0
 8003814:	409a      	lsls	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b06      	cmp	r3, #6
 8003824:	d824      	bhi.n	8003870 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	4613      	mov	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	3b05      	subs	r3, #5
 8003838:	221f      	movs	r2, #31
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43da      	mvns	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	400a      	ands	r2, r1
 8003846:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	b29b      	uxth	r3, r3
 8003854:	4618      	mov	r0, r3
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	3b05      	subs	r3, #5
 8003862:	fa00 f203 	lsl.w	r2, r0, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	635a      	str	r2, [r3, #52]	; 0x34
 800386e:	e04c      	b.n	800390a <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b0c      	cmp	r3, #12
 8003876:	d824      	bhi.n	80038c2 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	3b23      	subs	r3, #35	; 0x23
 800388a:	221f      	movs	r2, #31
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	43da      	mvns	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	400a      	ands	r2, r1
 8003898:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	4618      	mov	r0, r3
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	3b23      	subs	r3, #35	; 0x23
 80038b4:	fa00 f203 	lsl.w	r2, r0, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	631a      	str	r2, [r3, #48]	; 0x30
 80038c0:	e023      	b.n	800390a <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	3b41      	subs	r3, #65	; 0x41
 80038d4:	221f      	movs	r2, #31
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43da      	mvns	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	400a      	ands	r2, r1
 80038e2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	4618      	mov	r0, r3
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	4613      	mov	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	3b41      	subs	r3, #65	; 0x41
 80038fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a22      	ldr	r2, [pc, #136]	; (8003998 <HAL_ADC_ConfigChannel+0x258>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d109      	bne.n	8003928 <HAL_ADC_ConfigChannel+0x1e8>
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b12      	cmp	r3, #18
 800391a:	d105      	bne.n	8003928 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800391c:	4b1f      	ldr	r3, [pc, #124]	; (800399c <HAL_ADC_ConfigChannel+0x25c>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	4a1e      	ldr	r2, [pc, #120]	; (800399c <HAL_ADC_ConfigChannel+0x25c>)
 8003922:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003926:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a1a      	ldr	r2, [pc, #104]	; (8003998 <HAL_ADC_ConfigChannel+0x258>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d125      	bne.n	800397e <HAL_ADC_ConfigChannel+0x23e>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a17      	ldr	r2, [pc, #92]	; (8003994 <HAL_ADC_ConfigChannel+0x254>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d003      	beq.n	8003944 <HAL_ADC_ConfigChannel+0x204>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b11      	cmp	r3, #17
 8003942:	d11c      	bne.n	800397e <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003944:	4b15      	ldr	r3, [pc, #84]	; (800399c <HAL_ADC_ConfigChannel+0x25c>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	4a14      	ldr	r2, [pc, #80]	; (800399c <HAL_ADC_ConfigChannel+0x25c>)
 800394a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800394e:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a0f      	ldr	r2, [pc, #60]	; (8003994 <HAL_ADC_ConfigChannel+0x254>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d111      	bne.n	800397e <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800395a:	4b11      	ldr	r3, [pc, #68]	; (80039a0 <HAL_ADC_ConfigChannel+0x260>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a11      	ldr	r2, [pc, #68]	; (80039a4 <HAL_ADC_ConfigChannel+0x264>)
 8003960:	fba2 2303 	umull	r2, r3, r2, r3
 8003964:	0c9a      	lsrs	r2, r3, #18
 8003966:	4613      	mov	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003970:	e002      	b.n	8003978 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	3b01      	subs	r3, #1
 8003976:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f9      	bne.n	8003972 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	10000012 	.word	0x10000012
 8003998:	40012000 	.word	0x40012000
 800399c:	40012300 	.word	0x40012300
 80039a0:	200000ac 	.word	0x200000ac
 80039a4:	431bde83 	.word	0x431bde83

080039a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80039b0:	4b78      	ldr	r3, [pc, #480]	; (8003b94 <ADC_Init+0x1ec>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	4a77      	ldr	r2, [pc, #476]	; (8003b94 <ADC_Init+0x1ec>)
 80039b6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80039ba:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80039bc:	4b75      	ldr	r3, [pc, #468]	; (8003b94 <ADC_Init+0x1ec>)
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	4973      	ldr	r1, [pc, #460]	; (8003b94 <ADC_Init+0x1ec>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6859      	ldr	r1, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	021a      	lsls	r2, r3, #8
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80039fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6859      	ldr	r1, [r3, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6899      	ldr	r1, [r3, #8]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a36:	4a58      	ldr	r2, [pc, #352]	; (8003b98 <ADC_Init+0x1f0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d022      	beq.n	8003a82 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6899      	ldr	r1, [r3, #8]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6899      	ldr	r1, [r3, #8]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	609a      	str	r2, [r3, #8]
 8003a80:	e00f      	b.n	8003aa2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003aa0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0202 	bic.w	r2, r2, #2
 8003ab0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6899      	ldr	r1, [r3, #8]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	005a      	lsls	r2, r3, #1
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d01b      	beq.n	8003b08 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ade:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003aee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6859      	ldr	r1, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	3b01      	subs	r3, #1
 8003afc:	035a      	lsls	r2, r3, #13
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	605a      	str	r2, [r3, #4]
 8003b06:	e007      	b.n	8003b18 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b16:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	051a      	lsls	r2, r3, #20
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6899      	ldr	r1, [r3, #8]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b5a:	025a      	lsls	r2, r3, #9
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6899      	ldr	r1, [r3, #8]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	029a      	lsls	r2, r3, #10
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	609a      	str	r2, [r3, #8]
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	40012300 	.word	0x40012300
 8003b98:	0f000001 	.word	0x0f000001

08003b9c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d13c      	bne.n	8003c30 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d12b      	bne.n	8003c28 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d127      	bne.n	8003c28 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bde:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d006      	beq.n	8003bf4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d119      	bne.n	8003c28 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0220 	bic.w	r2, r2, #32
 8003c02:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d105      	bne.n	8003c28 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	f043 0201 	orr.w	r2, r3, #1
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f008 f801 	bl	800bc30 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c2e:	e00e      	b.n	8003c4e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	f003 0310 	and.w	r3, r3, #16
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f7ff fd75 	bl	800372c <HAL_ADC_ErrorCallback>
}
 8003c42:	e004      	b.n	8003c4e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	4798      	blx	r3
}
 8003c4e:	bf00      	nop
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b084      	sub	sp, #16
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c62:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f7ff fd4d 	bl	8003704 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c6a:	bf00      	nop
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b084      	sub	sp, #16
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2240      	movs	r2, #64	; 0x40
 8003c84:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8a:	f043 0204 	orr.w	r2, r3, #4
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f7ff fd4a 	bl	800372c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c98:	bf00      	nop
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cc4:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <__NVIC_SetPriorityGrouping+0x40>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003cdc:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ce2:	4a04      	ldr	r2, [pc, #16]	; (8003cf4 <__NVIC_SetPriorityGrouping+0x40>)
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	60d3      	str	r3, [r2, #12]
}
 8003ce8:	bf00      	nop
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	e000ed00 	.word	0xe000ed00
 8003cf8:	05fa0000 	.word	0x05fa0000

08003cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d00:	4b04      	ldr	r3, [pc, #16]	; (8003d14 <__NVIC_GetPriorityGrouping+0x18>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	0a1b      	lsrs	r3, r3, #8
 8003d06:	f003 0307 	and.w	r3, r3, #7
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	e000ed00 	.word	0xe000ed00

08003d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	db0b      	blt.n	8003d42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d2a:	79fb      	ldrb	r3, [r7, #7]
 8003d2c:	f003 021f 	and.w	r2, r3, #31
 8003d30:	4907      	ldr	r1, [pc, #28]	; (8003d50 <__NVIC_EnableIRQ+0x38>)
 8003d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d36:	095b      	lsrs	r3, r3, #5
 8003d38:	2001      	movs	r0, #1
 8003d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	e000e100 	.word	0xe000e100

08003d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	6039      	str	r1, [r7, #0]
 8003d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	db0a      	blt.n	8003d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	490c      	ldr	r1, [pc, #48]	; (8003da0 <__NVIC_SetPriority+0x4c>)
 8003d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d72:	0112      	lsls	r2, r2, #4
 8003d74:	b2d2      	uxtb	r2, r2
 8003d76:	440b      	add	r3, r1
 8003d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d7c:	e00a      	b.n	8003d94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	4908      	ldr	r1, [pc, #32]	; (8003da4 <__NVIC_SetPriority+0x50>)
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	3b04      	subs	r3, #4
 8003d8c:	0112      	lsls	r2, r2, #4
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	440b      	add	r3, r1
 8003d92:	761a      	strb	r2, [r3, #24]
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	e000e100 	.word	0xe000e100
 8003da4:	e000ed00 	.word	0xe000ed00

08003da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b089      	sub	sp, #36	; 0x24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	f1c3 0307 	rsb	r3, r3, #7
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	bf28      	it	cs
 8003dc6:	2304      	movcs	r3, #4
 8003dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	3304      	adds	r3, #4
 8003dce:	2b06      	cmp	r3, #6
 8003dd0:	d902      	bls.n	8003dd8 <NVIC_EncodePriority+0x30>
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	3b03      	subs	r3, #3
 8003dd6:	e000      	b.n	8003dda <NVIC_EncodePriority+0x32>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	43da      	mvns	r2, r3
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	401a      	ands	r2, r3
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003df0:	f04f 31ff 	mov.w	r1, #4294967295
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfa:	43d9      	mvns	r1, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e00:	4313      	orrs	r3, r2
         );
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3724      	adds	r7, #36	; 0x24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
	...

08003e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e20:	d301      	bcc.n	8003e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e22:	2301      	movs	r3, #1
 8003e24:	e00f      	b.n	8003e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e26:	4a0a      	ldr	r2, [pc, #40]	; (8003e50 <SysTick_Config+0x40>)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e2e:	210f      	movs	r1, #15
 8003e30:	f04f 30ff 	mov.w	r0, #4294967295
 8003e34:	f7ff ff8e 	bl	8003d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e38:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <SysTick_Config+0x40>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e3e:	4b04      	ldr	r3, [pc, #16]	; (8003e50 <SysTick_Config+0x40>)
 8003e40:	2207      	movs	r2, #7
 8003e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	e000e010 	.word	0xe000e010

08003e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff ff29 	bl	8003cb4 <__NVIC_SetPriorityGrouping>
}
 8003e62:	bf00      	nop
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b086      	sub	sp, #24
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	4603      	mov	r3, r0
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	607a      	str	r2, [r7, #4]
 8003e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e7c:	f7ff ff3e 	bl	8003cfc <__NVIC_GetPriorityGrouping>
 8003e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	68b9      	ldr	r1, [r7, #8]
 8003e86:	6978      	ldr	r0, [r7, #20]
 8003e88:	f7ff ff8e 	bl	8003da8 <NVIC_EncodePriority>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e92:	4611      	mov	r1, r2
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff ff5d 	bl	8003d54 <__NVIC_SetPriority>
}
 8003e9a:	bf00      	nop
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b082      	sub	sp, #8
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff ff31 	bl	8003d18 <__NVIC_EnableIRQ>
}
 8003eb6:	bf00      	nop
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7ff ffa2 	bl	8003e10 <SysTick_Config>
 8003ecc:	4603      	mov	r3, r0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
	...

08003ed8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e062      	b.n	8003fb0 <HAL_DCMI_Init+0xd8>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d102      	bne.n	8003efc <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else  
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f008 faba 	bl	800c470 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6819      	ldr	r1, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	4b2a      	ldr	r3, [pc, #168]	; (8003fb8 <HAL_DCMI_Init+0xe0>)
 8003f10:	400b      	ands	r3, r1
 8003f12:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6819      	ldr	r1, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003f28:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003f34:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003f40:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8003f4c:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f52:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003f58:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	601a      	str	r2, [r3, #0]
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2b10      	cmp	r3, #16
 8003f68:	d112      	bne.n	8003f90 <HAL_DCMI_Init+0xb8>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	7f1b      	ldrb	r3, [r3, #28]
 8003f6e:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	7f5b      	ldrb	r3, [r3, #29]
 8003f74:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8003f76:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	7f9b      	ldrb	r3, [r3, #30]
 8003f7c:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8003f7e:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	7fdb      	ldrb	r3, [r3, #31]
 8003f86:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8003f8c:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8003f8e:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 021e 	orr.w	r2, r2, #30
 8003f9e:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	ffe0f007 	.word	0xffe0f007

08003fbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003fc8:	f7ff f83a 	bl	8003040 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e099      	b.n	800410c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 0201 	bic.w	r2, r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ff8:	e00f      	b.n	800401a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ffa:	f7ff f821 	bl	8003040 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b05      	cmp	r3, #5
 8004006:	d908      	bls.n	800401a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2220      	movs	r2, #32
 800400c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2203      	movs	r2, #3
 8004012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e078      	b.n	800410c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1e8      	bne.n	8003ffa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	4b38      	ldr	r3, [pc, #224]	; (8004114 <HAL_DMA_Init+0x158>)
 8004034:	4013      	ands	r3, r2
 8004036:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004046:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004052:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800405e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	4313      	orrs	r3, r2
 800406a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	2b04      	cmp	r3, #4
 8004072:	d107      	bne.n	8004084 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407c:	4313      	orrs	r3, r2
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	4313      	orrs	r3, r2
 8004082:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f023 0307 	bic.w	r3, r3, #7
 800409a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d117      	bne.n	80040de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00e      	beq.n	80040de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 fad5 	bl	8004670 <DMA_CheckFifoParam>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d008      	beq.n	80040de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2240      	movs	r2, #64	; 0x40
 80040d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80040da:	2301      	movs	r3, #1
 80040dc:	e016      	b.n	800410c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 fa8c 	bl	8004604 <DMA_CalcBaseAndBitshift>
 80040ec:	4603      	mov	r3, r0
 80040ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f4:	223f      	movs	r2, #63	; 0x3f
 80040f6:	409a      	lsls	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	f010803f 	.word	0xf010803f

08004118 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e050      	b.n	80041cc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d101      	bne.n	800413a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004136:	2302      	movs	r3, #2
 8004138:	e048      	b.n	80041cc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0201 	bic.w	r2, r2, #1
 8004148:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2200      	movs	r2, #0
 8004150:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2200      	movs	r2, #0
 8004158:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2200      	movs	r2, #0
 8004160:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2200      	movs	r2, #0
 8004168:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2200      	movs	r2, #0
 8004170:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2221      	movs	r2, #33	; 0x21
 8004178:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 fa42 	bl	8004604 <DMA_CalcBaseAndBitshift>
 8004180:	4603      	mov	r3, r0
 8004182:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004188:	223f      	movs	r2, #63	; 0x3f
 800418a:	409a      	lsls	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041e2:	2300      	movs	r3, #0
 80041e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d101      	bne.n	80041fa <HAL_DMA_Start_IT+0x26>
 80041f6:	2302      	movs	r3, #2
 80041f8:	e048      	b.n	800428c <HAL_DMA_Start_IT+0xb8>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b01      	cmp	r3, #1
 800420c:	d137      	bne.n	800427e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2202      	movs	r2, #2
 8004212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	68b9      	ldr	r1, [r7, #8]
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 f9c0 	bl	80045a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422c:	223f      	movs	r2, #63	; 0x3f
 800422e:	409a      	lsls	r2, r3
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0216 	orr.w	r2, r2, #22
 8004242:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695a      	ldr	r2, [r3, #20]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004252:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	2b00      	cmp	r3, #0
 800425a:	d007      	beq.n	800426c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0208 	orr.w	r2, r2, #8
 800426a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0201 	orr.w	r2, r2, #1
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	e005      	b.n	800428a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004286:	2302      	movs	r3, #2
 8004288:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800428a:	7dfb      	ldrb	r3, [r7, #23]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800429c:	2300      	movs	r3, #0
 800429e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80042a0:	4b92      	ldr	r3, [pc, #584]	; (80044ec <HAL_DMA_IRQHandler+0x258>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a92      	ldr	r2, [pc, #584]	; (80044f0 <HAL_DMA_IRQHandler+0x25c>)
 80042a6:	fba2 2303 	umull	r2, r3, r2, r3
 80042aa:	0a9b      	lsrs	r3, r3, #10
 80042ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042be:	2208      	movs	r2, #8
 80042c0:	409a      	lsls	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4013      	ands	r3, r2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d01a      	beq.n	8004300 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d013      	beq.n	8004300 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0204 	bic.w	r2, r2, #4
 80042e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ec:	2208      	movs	r2, #8
 80042ee:	409a      	lsls	r2, r3
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f8:	f043 0201 	orr.w	r2, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004304:	2201      	movs	r2, #1
 8004306:	409a      	lsls	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4013      	ands	r3, r2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d012      	beq.n	8004336 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004322:	2201      	movs	r2, #1
 8004324:	409a      	lsls	r2, r3
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432e:	f043 0202 	orr.w	r2, r3, #2
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800433a:	2204      	movs	r2, #4
 800433c:	409a      	lsls	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4013      	ands	r3, r2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d012      	beq.n	800436c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00b      	beq.n	800436c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004358:	2204      	movs	r2, #4
 800435a:	409a      	lsls	r2, r3
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004364:	f043 0204 	orr.w	r2, r3, #4
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004370:	2210      	movs	r2, #16
 8004372:	409a      	lsls	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4013      	ands	r3, r2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d043      	beq.n	8004404 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d03c      	beq.n	8004404 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438e:	2210      	movs	r2, #16
 8004390:	409a      	lsls	r2, r3
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d018      	beq.n	80043d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d108      	bne.n	80043c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d024      	beq.n	8004404 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	4798      	blx	r3
 80043c2:	e01f      	b.n	8004404 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d01b      	beq.n	8004404 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	4798      	blx	r3
 80043d4:	e016      	b.n	8004404 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d107      	bne.n	80043f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0208 	bic.w	r2, r2, #8
 80043f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004408:	2220      	movs	r2, #32
 800440a:	409a      	lsls	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4013      	ands	r3, r2
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 808e 	beq.w	8004532 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0310 	and.w	r3, r3, #16
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 8086 	beq.w	8004532 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442a:	2220      	movs	r2, #32
 800442c:	409a      	lsls	r2, r3
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b05      	cmp	r3, #5
 800443c:	d136      	bne.n	80044ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0216 	bic.w	r2, r2, #22
 800444c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695a      	ldr	r2, [r3, #20]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800445c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	2b00      	cmp	r3, #0
 8004464:	d103      	bne.n	800446e <HAL_DMA_IRQHandler+0x1da>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800446a:	2b00      	cmp	r3, #0
 800446c:	d007      	beq.n	800447e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0208 	bic.w	r2, r2, #8
 800447c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004482:	223f      	movs	r2, #63	; 0x3f
 8004484:	409a      	lsls	r2, r3
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d07d      	beq.n	800459e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	4798      	blx	r3
        }
        return;
 80044aa:	e078      	b.n	800459e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d01c      	beq.n	80044f4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d108      	bne.n	80044da <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d030      	beq.n	8004532 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	4798      	blx	r3
 80044d8:	e02b      	b.n	8004532 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d027      	beq.n	8004532 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	4798      	blx	r3
 80044ea:	e022      	b.n	8004532 <HAL_DMA_IRQHandler+0x29e>
 80044ec:	200000ac 	.word	0x200000ac
 80044f0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10f      	bne.n	8004522 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0210 	bic.w	r2, r2, #16
 8004510:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004536:	2b00      	cmp	r3, #0
 8004538:	d032      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d022      	beq.n	800458c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2205      	movs	r2, #5
 800454a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0201 	bic.w	r2, r2, #1
 800455c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	3301      	adds	r3, #1
 8004562:	60bb      	str	r3, [r7, #8]
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	429a      	cmp	r2, r3
 8004568:	d307      	bcc.n	800457a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1f2      	bne.n	800455e <HAL_DMA_IRQHandler+0x2ca>
 8004578:	e000      	b.n	800457c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800457a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	4798      	blx	r3
 800459c:	e000      	b.n	80045a0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800459e:	bf00      	nop
    }
  }
}
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop

080045a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	2b40      	cmp	r3, #64	; 0x40
 80045d4:	d108      	bne.n	80045e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80045e6:	e007      	b.n	80045f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	60da      	str	r2, [r3, #12]
}
 80045f8:	bf00      	nop
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	b2db      	uxtb	r3, r3
 8004612:	3b10      	subs	r3, #16
 8004614:	4a13      	ldr	r2, [pc, #76]	; (8004664 <DMA_CalcBaseAndBitshift+0x60>)
 8004616:	fba2 2303 	umull	r2, r3, r2, r3
 800461a:	091b      	lsrs	r3, r3, #4
 800461c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800461e:	4a12      	ldr	r2, [pc, #72]	; (8004668 <DMA_CalcBaseAndBitshift+0x64>)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4413      	add	r3, r2
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	461a      	mov	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b03      	cmp	r3, #3
 8004630:	d908      	bls.n	8004644 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	461a      	mov	r2, r3
 8004638:	4b0c      	ldr	r3, [pc, #48]	; (800466c <DMA_CalcBaseAndBitshift+0x68>)
 800463a:	4013      	ands	r3, r2
 800463c:	1d1a      	adds	r2, r3, #4
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	659a      	str	r2, [r3, #88]	; 0x58
 8004642:	e006      	b.n	8004652 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	461a      	mov	r2, r3
 800464a:	4b08      	ldr	r3, [pc, #32]	; (800466c <DMA_CalcBaseAndBitshift+0x68>)
 800464c:	4013      	ands	r3, r2
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004656:	4618      	mov	r0, r3
 8004658:	3714      	adds	r7, #20
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	aaaaaaab 	.word	0xaaaaaaab
 8004668:	080100b4 	.word	0x080100b4
 800466c:	fffffc00 	.word	0xfffffc00

08004670 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004678:	2300      	movs	r3, #0
 800467a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004680:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d11f      	bne.n	80046ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b03      	cmp	r3, #3
 800468e:	d855      	bhi.n	800473c <DMA_CheckFifoParam+0xcc>
 8004690:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <DMA_CheckFifoParam+0x28>)
 8004692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004696:	bf00      	nop
 8004698:	080046a9 	.word	0x080046a9
 800469c:	080046bb 	.word	0x080046bb
 80046a0:	080046a9 	.word	0x080046a9
 80046a4:	0800473d 	.word	0x0800473d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d045      	beq.n	8004740 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046b8:	e042      	b.n	8004740 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046c2:	d13f      	bne.n	8004744 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046c8:	e03c      	b.n	8004744 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046d2:	d121      	bne.n	8004718 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2b03      	cmp	r3, #3
 80046d8:	d836      	bhi.n	8004748 <DMA_CheckFifoParam+0xd8>
 80046da:	a201      	add	r2, pc, #4	; (adr r2, 80046e0 <DMA_CheckFifoParam+0x70>)
 80046dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e0:	080046f1 	.word	0x080046f1
 80046e4:	080046f7 	.word	0x080046f7
 80046e8:	080046f1 	.word	0x080046f1
 80046ec:	08004709 	.word	0x08004709
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	73fb      	strb	r3, [r7, #15]
      break;
 80046f4:	e02f      	b.n	8004756 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d024      	beq.n	800474c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004706:	e021      	b.n	800474c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004710:	d11e      	bne.n	8004750 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004716:	e01b      	b.n	8004750 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2b02      	cmp	r3, #2
 800471c:	d902      	bls.n	8004724 <DMA_CheckFifoParam+0xb4>
 800471e:	2b03      	cmp	r3, #3
 8004720:	d003      	beq.n	800472a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004722:	e018      	b.n	8004756 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	73fb      	strb	r3, [r7, #15]
      break;
 8004728:	e015      	b.n	8004756 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00e      	beq.n	8004754 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	73fb      	strb	r3, [r7, #15]
      break;
 800473a:	e00b      	b.n	8004754 <DMA_CheckFifoParam+0xe4>
      break;
 800473c:	bf00      	nop
 800473e:	e00a      	b.n	8004756 <DMA_CheckFifoParam+0xe6>
      break;
 8004740:	bf00      	nop
 8004742:	e008      	b.n	8004756 <DMA_CheckFifoParam+0xe6>
      break;
 8004744:	bf00      	nop
 8004746:	e006      	b.n	8004756 <DMA_CheckFifoParam+0xe6>
      break;
 8004748:	bf00      	nop
 800474a:	e004      	b.n	8004756 <DMA_CheckFifoParam+0xe6>
      break;
 800474c:	bf00      	nop
 800474e:	e002      	b.n	8004756 <DMA_CheckFifoParam+0xe6>
      break;   
 8004750:	bf00      	nop
 8004752:	e000      	b.n	8004756 <DMA_CheckFifoParam+0xe6>
      break;
 8004754:	bf00      	nop
    }
  } 
  
  return status; 
 8004756:	7bfb      	ldrb	r3, [r7, #15]
}
 8004758:	4618      	mov	r0, r3
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e039      	b.n	80047ea <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d106      	bne.n	8004790 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f007 ff2e 	bl	800c5ec <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b4:	f023 0107 	bic.w	r1, r3, #7
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047ca:	4b0a      	ldr	r3, [pc, #40]	; (80047f4 <HAL_DMA2D_Init+0x90>)
 80047cc:	4013      	ands	r3, r2
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	68d1      	ldr	r1, [r2, #12]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6812      	ldr	r2, [r2, #0]
 80047d6:	430b      	orrs	r3, r1
 80047d8:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	ffffc000 	.word	0xffffc000

080047f8 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af02      	add	r7, sp, #8
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
 8004804:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_DMA2D_Start+0x1c>
 8004810:	2302      	movs	r3, #2
 8004812:	e018      	b.n	8004846 <HAL_DMA2D_Start+0x4e>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	68b9      	ldr	r1, [r7, #8]
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 fa98 	bl	8004d64 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0201 	orr.w	r2, r2, #1
 8004842:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b086      	sub	sp, #24
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004858:	2300      	movs	r3, #0
 800485a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d056      	beq.n	8004918 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 800486a:	f7fe fbe9 	bl	8003040 <HAL_GetTick>
 800486e:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004870:	e04b      	b.n	800490a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004880:	2b00      	cmp	r3, #0
 8004882:	d023      	beq.n	80048cc <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f003 0320 	and.w	r3, r3, #32
 800488a:	2b00      	cmp	r3, #0
 800488c:	d005      	beq.n	800489a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004892:	f043 0202 	orr.w	r2, r3, #2
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d005      	beq.n	80048b0 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a8:	f043 0201 	orr.w	r2, r3, #1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2221      	movs	r2, #33	; 0x21
 80048b6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2204      	movs	r2, #4
 80048bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e0a5      	b.n	8004a18 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d2:	d01a      	beq.n	800490a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80048d4:	f7fe fbb4 	bl	8003040 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d302      	bcc.n	80048ea <HAL_DMA2D_PollForTransfer+0x9c>
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10f      	bne.n	800490a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ee:	f043 0220 	orr.w	r2, r3, #32
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2203      	movs	r2, #3
 80048fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e086      	b.n	8004a18 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0ac      	beq.n	8004872 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	f003 0320 	and.w	r3, r3, #32
 8004922:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	f003 0320 	and.w	r3, r3, #32
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	4313      	orrs	r3, r2
 8004932:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d061      	beq.n	80049fe <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800493a:	f7fe fb81 	bl	8003040 <HAL_GetTick>
 800493e:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004940:	e056      	b.n	80049f0 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004950:	2b00      	cmp	r3, #0
 8004952:	d02e      	beq.n	80049b2 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	2b00      	cmp	r3, #0
 800495c:	d005      	beq.n	800496a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004962:	f043 0204 	orr.w	r2, r3, #4
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f003 0320 	and.w	r3, r3, #32
 8004970:	2b00      	cmp	r3, #0
 8004972:	d005      	beq.n	8004980 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004978:	f043 0202 	orr.w	r2, r3, #2
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d005      	beq.n	8004996 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800498e:	f043 0201 	orr.w	r2, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2229      	movs	r2, #41	; 0x29
 800499c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2204      	movs	r2, #4
 80049a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e032      	b.n	8004a18 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b8:	d01a      	beq.n	80049f0 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80049ba:	f7fe fb41 	bl	8003040 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d302      	bcc.n	80049d0 <HAL_DMA2D_PollForTransfer+0x182>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10f      	bne.n	80049f0 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d4:	f043 0220 	orr.w	r2, r3, #32
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2203      	movs	r2, #3
 80049e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e013      	b.n	8004a18 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f003 0310 	and.w	r3, r3, #16
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0a1      	beq.n	8004942 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2212      	movs	r2, #18
 8004a04:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d026      	beq.n	8004a90 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d021      	beq.n	8004a90 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a5a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a60:	f043 0201 	orr.w	r2, r3, #1
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2204      	movs	r2, #4
 8004a74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f003 0320 	and.w	r3, r3, #32
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d026      	beq.n	8004ae8 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d021      	beq.n	8004ae8 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ab2:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac0:	f043 0202 	orr.w	r2, r3, #2
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2204      	movs	r2, #4
 8004acc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f003 0308 	and.w	r3, r3, #8
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d026      	beq.n	8004b40 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d021      	beq.n	8004b40 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b0a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2208      	movs	r2, #8
 8004b12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b18:	f043 0204 	orr.w	r2, r3, #4
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2204      	movs	r2, #4
 8004b24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f003 0304 	and.w	r3, r3, #4
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d013      	beq.n	8004b72 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00e      	beq.n	8004b72 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b62:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2204      	movs	r2, #4
 8004b6a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 f853 	bl	8004c18 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d024      	beq.n	8004bc6 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d01f      	beq.n	8004bc6 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004b94:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f003 0310 	and.w	r3, r3, #16
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01f      	beq.n	8004c10 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d01a      	beq.n	8004c10 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004be8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2210      	movs	r2, #16
 8004bf0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f80e 	bl	8004c2c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004c10:	bf00      	nop
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d101      	bne.n	8004c60 <HAL_DMA2D_ConfigLayer+0x20>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	e079      	b.n	8004d54 <HAL_DMA2D_ConfigLayer+0x114>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	3318      	adds	r3, #24
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	4413      	add	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	041b      	lsls	r3, r3, #16
 8004c86:	4313      	orrs	r3, r2
 8004c88:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004c8a:	4b35      	ldr	r3, [pc, #212]	; (8004d60 <HAL_DMA2D_ConfigLayer+0x120>)
 8004c8c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2b0a      	cmp	r3, #10
 8004c94:	d003      	beq.n	8004c9e <HAL_DMA2D_ConfigLayer+0x5e>
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	2b09      	cmp	r3, #9
 8004c9c:	d107      	bne.n	8004cae <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]
 8004cac:	e005      	b.n	8004cba <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	061b      	lsls	r3, r3, #24
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d120      	bne.n	8004d02 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	43db      	mvns	r3, r3
 8004cca:	ea02 0103 	and.w	r1, r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	6812      	ldr	r2, [r2, #0]
 8004ce0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	2b0a      	cmp	r3, #10
 8004ce8:	d003      	beq.n	8004cf2 <HAL_DMA2D_ConfigLayer+0xb2>
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2b09      	cmp	r3, #9
 8004cf0:	d127      	bne.n	8004d42 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004cfe:	629a      	str	r2, [r3, #40]	; 0x28
 8004d00:	e01f      	b.n	8004d42 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69da      	ldr	r2, [r3, #28]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	43db      	mvns	r3, r3
 8004d0c:	ea02 0103 	and.w	r1, r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	6812      	ldr	r2, [r2, #0]
 8004d22:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	2b0a      	cmp	r3, #10
 8004d2a:	d003      	beq.n	8004d34 <HAL_DMA2D_ConfigLayer+0xf4>
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	2b09      	cmp	r3, #9
 8004d32:	d106      	bne.n	8004d42 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	68da      	ldr	r2, [r3, #12]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004d40:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	371c      	adds	r7, #28
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	ff03000f 	.word	0xff03000f

08004d64 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b08b      	sub	sp, #44	; 0x2c
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d78:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	041a      	lsls	r2, r3, #16
 8004d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d82:	431a      	orrs	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d9c:	d174      	bne.n	8004e88 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004da4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004dac:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004db4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d108      	bne.n	8004dd6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd4:	e053      	b.n	8004e7e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d106      	bne.n	8004dec <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dea:	e048      	b.n	8004e7e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d111      	bne.n	8004e18 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	0cdb      	lsrs	r3, r3, #19
 8004df8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	0a9b      	lsrs	r3, r3, #10
 8004dfe:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	08db      	lsrs	r3, r3, #3
 8004e04:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	015a      	lsls	r2, r3, #5
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	02db      	lsls	r3, r3, #11
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	627b      	str	r3, [r7, #36]	; 0x24
 8004e16:	e032      	b.n	8004e7e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	2b03      	cmp	r3, #3
 8004e1e:	d117      	bne.n	8004e50 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	0fdb      	lsrs	r3, r3, #31
 8004e24:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	0cdb      	lsrs	r3, r3, #19
 8004e2a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	0adb      	lsrs	r3, r3, #11
 8004e30:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	08db      	lsrs	r3, r3, #3
 8004e36:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	029b      	lsls	r3, r3, #10
 8004e40:	431a      	orrs	r2, r3
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	03db      	lsls	r3, r3, #15
 8004e46:	4313      	orrs	r3, r2
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e4e:	e016      	b.n	8004e7e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	0f1b      	lsrs	r3, r3, #28
 8004e54:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	0d1b      	lsrs	r3, r3, #20
 8004e5a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	0b1b      	lsrs	r3, r3, #12
 8004e60:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	091b      	lsrs	r3, r3, #4
 8004e66:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	011a      	lsls	r2, r3, #4
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	021b      	lsls	r3, r3, #8
 8004e70:	431a      	orrs	r2, r3
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	031b      	lsls	r3, r3, #12
 8004e76:	4313      	orrs	r3, r2
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e84:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004e86:	e003      	b.n	8004e90 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	60da      	str	r2, [r3, #12]
}
 8004e90:	bf00      	nop
 8004e92:	372c      	adds	r7, #44	; 0x2c
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b089      	sub	sp, #36	; 0x24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	61fb      	str	r3, [r7, #28]
 8004eba:	e175      	b.n	80051a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	f040 8164 	bne.w	80051a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d003      	beq.n	8004eea <HAL_GPIO_Init+0x4e>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	2b12      	cmp	r3, #18
 8004ee8:	d123      	bne.n	8004f32 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	08da      	lsrs	r2, r3, #3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	3208      	adds	r2, #8
 8004ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	220f      	movs	r2, #15
 8004f02:	fa02 f303 	lsl.w	r3, r2, r3
 8004f06:	43db      	mvns	r3, r3
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	691a      	ldr	r2, [r3, #16]
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	08da      	lsrs	r2, r3, #3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3208      	adds	r2, #8
 8004f2c:	69b9      	ldr	r1, [r7, #24]
 8004f2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	2203      	movs	r2, #3
 8004f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f42:	43db      	mvns	r3, r3
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	4013      	ands	r3, r2
 8004f48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f003 0203 	and.w	r2, r3, #3
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d00b      	beq.n	8004f86 <HAL_GPIO_Init+0xea>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d007      	beq.n	8004f86 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f7a:	2b11      	cmp	r3, #17
 8004f7c:	d003      	beq.n	8004f86 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b12      	cmp	r3, #18
 8004f84:	d130      	bne.n	8004fe8 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	2203      	movs	r2, #3
 8004f92:	fa02 f303 	lsl.w	r3, r2, r3
 8004f96:	43db      	mvns	r3, r3
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	005b      	lsls	r3, r3, #1
 8004fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	091b      	lsrs	r3, r3, #4
 8004fd2:	f003 0201 	and.w	r2, r3, #1
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	2203      	movs	r2, #3
 8004ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	fa02 f303 	lsl.w	r3, r2, r3
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	4313      	orrs	r3, r2
 8005010:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 80be 	beq.w	80051a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005026:	4b65      	ldr	r3, [pc, #404]	; (80051bc <HAL_GPIO_Init+0x320>)
 8005028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502a:	4a64      	ldr	r2, [pc, #400]	; (80051bc <HAL_GPIO_Init+0x320>)
 800502c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005030:	6453      	str	r3, [r2, #68]	; 0x44
 8005032:	4b62      	ldr	r3, [pc, #392]	; (80051bc <HAL_GPIO_Init+0x320>)
 8005034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800503e:	4a60      	ldr	r2, [pc, #384]	; (80051c0 <HAL_GPIO_Init+0x324>)
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	089b      	lsrs	r3, r3, #2
 8005044:	3302      	adds	r3, #2
 8005046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800504a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	220f      	movs	r2, #15
 8005056:	fa02 f303 	lsl.w	r3, r2, r3
 800505a:	43db      	mvns	r3, r3
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	4013      	ands	r3, r2
 8005060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a57      	ldr	r2, [pc, #348]	; (80051c4 <HAL_GPIO_Init+0x328>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d037      	beq.n	80050da <HAL_GPIO_Init+0x23e>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a56      	ldr	r2, [pc, #344]	; (80051c8 <HAL_GPIO_Init+0x32c>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d031      	beq.n	80050d6 <HAL_GPIO_Init+0x23a>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a55      	ldr	r2, [pc, #340]	; (80051cc <HAL_GPIO_Init+0x330>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d02b      	beq.n	80050d2 <HAL_GPIO_Init+0x236>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a54      	ldr	r2, [pc, #336]	; (80051d0 <HAL_GPIO_Init+0x334>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d025      	beq.n	80050ce <HAL_GPIO_Init+0x232>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a53      	ldr	r2, [pc, #332]	; (80051d4 <HAL_GPIO_Init+0x338>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d01f      	beq.n	80050ca <HAL_GPIO_Init+0x22e>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a52      	ldr	r2, [pc, #328]	; (80051d8 <HAL_GPIO_Init+0x33c>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d019      	beq.n	80050c6 <HAL_GPIO_Init+0x22a>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a51      	ldr	r2, [pc, #324]	; (80051dc <HAL_GPIO_Init+0x340>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d013      	beq.n	80050c2 <HAL_GPIO_Init+0x226>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a50      	ldr	r2, [pc, #320]	; (80051e0 <HAL_GPIO_Init+0x344>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00d      	beq.n	80050be <HAL_GPIO_Init+0x222>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a4f      	ldr	r2, [pc, #316]	; (80051e4 <HAL_GPIO_Init+0x348>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d007      	beq.n	80050ba <HAL_GPIO_Init+0x21e>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a4e      	ldr	r2, [pc, #312]	; (80051e8 <HAL_GPIO_Init+0x34c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d101      	bne.n	80050b6 <HAL_GPIO_Init+0x21a>
 80050b2:	2309      	movs	r3, #9
 80050b4:	e012      	b.n	80050dc <HAL_GPIO_Init+0x240>
 80050b6:	230a      	movs	r3, #10
 80050b8:	e010      	b.n	80050dc <HAL_GPIO_Init+0x240>
 80050ba:	2308      	movs	r3, #8
 80050bc:	e00e      	b.n	80050dc <HAL_GPIO_Init+0x240>
 80050be:	2307      	movs	r3, #7
 80050c0:	e00c      	b.n	80050dc <HAL_GPIO_Init+0x240>
 80050c2:	2306      	movs	r3, #6
 80050c4:	e00a      	b.n	80050dc <HAL_GPIO_Init+0x240>
 80050c6:	2305      	movs	r3, #5
 80050c8:	e008      	b.n	80050dc <HAL_GPIO_Init+0x240>
 80050ca:	2304      	movs	r3, #4
 80050cc:	e006      	b.n	80050dc <HAL_GPIO_Init+0x240>
 80050ce:	2303      	movs	r3, #3
 80050d0:	e004      	b.n	80050dc <HAL_GPIO_Init+0x240>
 80050d2:	2302      	movs	r3, #2
 80050d4:	e002      	b.n	80050dc <HAL_GPIO_Init+0x240>
 80050d6:	2301      	movs	r3, #1
 80050d8:	e000      	b.n	80050dc <HAL_GPIO_Init+0x240>
 80050da:	2300      	movs	r3, #0
 80050dc:	69fa      	ldr	r2, [r7, #28]
 80050de:	f002 0203 	and.w	r2, r2, #3
 80050e2:	0092      	lsls	r2, r2, #2
 80050e4:	4093      	lsls	r3, r2
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80050ec:	4934      	ldr	r1, [pc, #208]	; (80051c0 <HAL_GPIO_Init+0x324>)
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	089b      	lsrs	r3, r3, #2
 80050f2:	3302      	adds	r3, #2
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050fa:	4b3c      	ldr	r3, [pc, #240]	; (80051ec <HAL_GPIO_Init+0x350>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	43db      	mvns	r3, r3
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	4013      	ands	r3, r2
 8005108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	4313      	orrs	r3, r2
 800511c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800511e:	4a33      	ldr	r2, [pc, #204]	; (80051ec <HAL_GPIO_Init+0x350>)
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005124:	4b31      	ldr	r3, [pc, #196]	; (80051ec <HAL_GPIO_Init+0x350>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	43db      	mvns	r3, r3
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	4013      	ands	r3, r2
 8005132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005148:	4a28      	ldr	r2, [pc, #160]	; (80051ec <HAL_GPIO_Init+0x350>)
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800514e:	4b27      	ldr	r3, [pc, #156]	; (80051ec <HAL_GPIO_Init+0x350>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	43db      	mvns	r3, r3
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	4013      	ands	r3, r2
 800515c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	4313      	orrs	r3, r2
 8005170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005172:	4a1e      	ldr	r2, [pc, #120]	; (80051ec <HAL_GPIO_Init+0x350>)
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005178:	4b1c      	ldr	r3, [pc, #112]	; (80051ec <HAL_GPIO_Init+0x350>)
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	43db      	mvns	r3, r3
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	4013      	ands	r3, r2
 8005186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d003      	beq.n	800519c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	4313      	orrs	r3, r2
 800519a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800519c:	4a13      	ldr	r2, [pc, #76]	; (80051ec <HAL_GPIO_Init+0x350>)
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	3301      	adds	r3, #1
 80051a6:	61fb      	str	r3, [r7, #28]
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	2b0f      	cmp	r3, #15
 80051ac:	f67f ae86 	bls.w	8004ebc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80051b0:	bf00      	nop
 80051b2:	3724      	adds	r7, #36	; 0x24
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	40023800 	.word	0x40023800
 80051c0:	40013800 	.word	0x40013800
 80051c4:	40020000 	.word	0x40020000
 80051c8:	40020400 	.word	0x40020400
 80051cc:	40020800 	.word	0x40020800
 80051d0:	40020c00 	.word	0x40020c00
 80051d4:	40021000 	.word	0x40021000
 80051d8:	40021400 	.word	0x40021400
 80051dc:	40021800 	.word	0x40021800
 80051e0:	40021c00 	.word	0x40021c00
 80051e4:	40022000 	.word	0x40022000
 80051e8:	40022400 	.word	0x40022400
 80051ec:	40013c00 	.word	0x40013c00

080051f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	460b      	mov	r3, r1
 80051fa:	807b      	strh	r3, [r7, #2]
 80051fc:	4613      	mov	r3, r2
 80051fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005200:	787b      	ldrb	r3, [r7, #1]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005206:	887a      	ldrh	r2, [r7, #2]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800520c:	e003      	b.n	8005216 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800520e:	887b      	ldrh	r3, [r7, #2]
 8005210:	041a      	lsls	r2, r3, #16
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	619a      	str	r2, [r3, #24]
}
 8005216:	bf00      	nop
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
	...

08005224 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e07f      	b.n	8005336 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d106      	bne.n	8005250 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f8a9 	bl	80053a2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2224      	movs	r2, #36	; 0x24
 8005254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0201 	bic.w	r2, r2, #1
 8005266:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005274:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005284:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d107      	bne.n	800529e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689a      	ldr	r2, [r3, #8]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800529a:	609a      	str	r2, [r3, #8]
 800529c:	e006      	b.n	80052ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689a      	ldr	r2, [r3, #8]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80052aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d104      	bne.n	80052be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6859      	ldr	r1, [r3, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	4b1d      	ldr	r3, [pc, #116]	; (8005340 <HAL_I2C_Init+0x11c>)
 80052ca:	430b      	orrs	r3, r1
 80052cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68da      	ldr	r2, [r3, #12]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691a      	ldr	r2, [r3, #16]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	ea42 0103 	orr.w	r1, r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	021a      	lsls	r2, r3, #8
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	69d9      	ldr	r1, [r3, #28]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a1a      	ldr	r2, [r3, #32]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0201 	orr.w	r2, r2, #1
 8005316:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2220      	movs	r2, #32
 8005322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	02008000 	.word	0x02008000

08005344 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e021      	b.n	800539a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2224      	movs	r2, #36	; 0x24
 800535a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 0201 	bic.w	r2, r2, #1
 800536c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f821 	bl	80053b6 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b083      	sub	sp, #12
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80053be:	bf00      	nop
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
	...

080053cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b088      	sub	sp, #32
 80053d0:	af02      	add	r7, sp, #8
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	4608      	mov	r0, r1
 80053d6:	4611      	mov	r1, r2
 80053d8:	461a      	mov	r2, r3
 80053da:	4603      	mov	r3, r0
 80053dc:	817b      	strh	r3, [r7, #10]
 80053de:	460b      	mov	r3, r1
 80053e0:	813b      	strh	r3, [r7, #8]
 80053e2:	4613      	mov	r3, r2
 80053e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b20      	cmp	r3, #32
 80053f0:	f040 80f9 	bne.w	80055e6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <HAL_I2C_Mem_Write+0x34>
 80053fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d105      	bne.n	800540c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005406:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e0ed      	b.n	80055e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005412:	2b01      	cmp	r3, #1
 8005414:	d101      	bne.n	800541a <HAL_I2C_Mem_Write+0x4e>
 8005416:	2302      	movs	r3, #2
 8005418:	e0e6      	b.n	80055e8 <HAL_I2C_Mem_Write+0x21c>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005422:	f7fd fe0d 	bl	8003040 <HAL_GetTick>
 8005426:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	2319      	movs	r3, #25
 800542e:	2201      	movs	r2, #1
 8005430:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 fad1 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e0d1      	b.n	80055e8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2221      	movs	r2, #33	; 0x21
 8005448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2240      	movs	r2, #64	; 0x40
 8005450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6a3a      	ldr	r2, [r7, #32]
 800545e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005464:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800546c:	88f8      	ldrh	r0, [r7, #6]
 800546e:	893a      	ldrh	r2, [r7, #8]
 8005470:	8979      	ldrh	r1, [r7, #10]
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	9301      	str	r3, [sp, #4]
 8005476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	4603      	mov	r3, r0
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 f9e1 	bl	8005844 <I2C_RequestMemoryWrite>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d005      	beq.n	8005494 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e0a9      	b.n	80055e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005498:	b29b      	uxth	r3, r3
 800549a:	2bff      	cmp	r3, #255	; 0xff
 800549c:	d90e      	bls.n	80054bc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	22ff      	movs	r2, #255	; 0xff
 80054a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	8979      	ldrh	r1, [r7, #10]
 80054ac:	2300      	movs	r3, #0
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 fbb3 	bl	8005c20 <I2C_TransferConfig>
 80054ba:	e00f      	b.n	80054dc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	8979      	ldrh	r1, [r7, #10]
 80054ce:	2300      	movs	r3, #0
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 fba2 	bl	8005c20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f000 fabb 	bl	8005a5c <I2C_WaitOnTXISFlagUntilTimeout>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e07b      	b.n	80055e8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	781a      	ldrb	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005500:	1c5a      	adds	r2, r3, #1
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800550a:	b29b      	uxth	r3, r3
 800550c:	3b01      	subs	r3, #1
 800550e:	b29a      	uxth	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005518:	3b01      	subs	r3, #1
 800551a:	b29a      	uxth	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005524:	b29b      	uxth	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d034      	beq.n	8005594 <HAL_I2C_Mem_Write+0x1c8>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800552e:	2b00      	cmp	r3, #0
 8005530:	d130      	bne.n	8005594 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005538:	2200      	movs	r2, #0
 800553a:	2180      	movs	r1, #128	; 0x80
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f000 fa4d 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e04d      	b.n	80055e8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005550:	b29b      	uxth	r3, r3
 8005552:	2bff      	cmp	r3, #255	; 0xff
 8005554:	d90e      	bls.n	8005574 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	22ff      	movs	r2, #255	; 0xff
 800555a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005560:	b2da      	uxtb	r2, r3
 8005562:	8979      	ldrh	r1, [r7, #10]
 8005564:	2300      	movs	r3, #0
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f000 fb57 	bl	8005c20 <I2C_TransferConfig>
 8005572:	e00f      	b.n	8005594 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005578:	b29a      	uxth	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005582:	b2da      	uxtb	r2, r3
 8005584:	8979      	ldrh	r1, [r7, #10]
 8005586:	2300      	movs	r3, #0
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f000 fb46 	bl	8005c20 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005598:	b29b      	uxth	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d19e      	bne.n	80054dc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 fa9a 	bl	8005adc <I2C_WaitOnSTOPFlagUntilTimeout>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e01a      	b.n	80055e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2220      	movs	r2, #32
 80055b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6859      	ldr	r1, [r3, #4]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <HAL_I2C_Mem_Write+0x224>)
 80055c6:	400b      	ands	r3, r1
 80055c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80055e2:	2300      	movs	r3, #0
 80055e4:	e000      	b.n	80055e8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80055e6:	2302      	movs	r3, #2
  }
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3718      	adds	r7, #24
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	fe00e800 	.word	0xfe00e800

080055f4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b088      	sub	sp, #32
 80055f8:	af02      	add	r7, sp, #8
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	4608      	mov	r0, r1
 80055fe:	4611      	mov	r1, r2
 8005600:	461a      	mov	r2, r3
 8005602:	4603      	mov	r3, r0
 8005604:	817b      	strh	r3, [r7, #10]
 8005606:	460b      	mov	r3, r1
 8005608:	813b      	strh	r3, [r7, #8]
 800560a:	4613      	mov	r3, r2
 800560c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b20      	cmp	r3, #32
 8005618:	f040 80fd 	bne.w	8005816 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <HAL_I2C_Mem_Read+0x34>
 8005622:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005624:	2b00      	cmp	r3, #0
 8005626:	d105      	bne.n	8005634 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800562e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e0f1      	b.n	8005818 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800563a:	2b01      	cmp	r3, #1
 800563c:	d101      	bne.n	8005642 <HAL_I2C_Mem_Read+0x4e>
 800563e:	2302      	movs	r3, #2
 8005640:	e0ea      	b.n	8005818 <HAL_I2C_Mem_Read+0x224>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800564a:	f7fd fcf9 	bl	8003040 <HAL_GetTick>
 800564e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	2319      	movs	r3, #25
 8005656:	2201      	movs	r2, #1
 8005658:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f000 f9bd 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e0d5      	b.n	8005818 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2222      	movs	r2, #34	; 0x22
 8005670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2240      	movs	r2, #64	; 0x40
 8005678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6a3a      	ldr	r2, [r7, #32]
 8005686:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800568c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005694:	88f8      	ldrh	r0, [r7, #6]
 8005696:	893a      	ldrh	r2, [r7, #8]
 8005698:	8979      	ldrh	r1, [r7, #10]
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	9301      	str	r3, [sp, #4]
 800569e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	4603      	mov	r3, r0
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 f921 	bl	80058ec <I2C_RequestMemoryRead>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d005      	beq.n	80056bc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e0ad      	b.n	8005818 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	2bff      	cmp	r3, #255	; 0xff
 80056c4:	d90e      	bls.n	80056e4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	22ff      	movs	r2, #255	; 0xff
 80056ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	8979      	ldrh	r1, [r7, #10]
 80056d4:	4b52      	ldr	r3, [pc, #328]	; (8005820 <HAL_I2C_Mem_Read+0x22c>)
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 fa9f 	bl	8005c20 <I2C_TransferConfig>
 80056e2:	e00f      	b.n	8005704 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	8979      	ldrh	r1, [r7, #10]
 80056f6:	4b4a      	ldr	r3, [pc, #296]	; (8005820 <HAL_I2C_Mem_Read+0x22c>)
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f000 fa8e 	bl	8005c20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570a:	2200      	movs	r2, #0
 800570c:	2104      	movs	r1, #4
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f000 f964 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d001      	beq.n	800571e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e07c      	b.n	8005818 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	b2d2      	uxtb	r2, r2
 800572a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800573a:	3b01      	subs	r3, #1
 800573c:	b29a      	uxth	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005746:	b29b      	uxth	r3, r3
 8005748:	3b01      	subs	r3, #1
 800574a:	b29a      	uxth	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005754:	b29b      	uxth	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d034      	beq.n	80057c4 <HAL_I2C_Mem_Read+0x1d0>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800575e:	2b00      	cmp	r3, #0
 8005760:	d130      	bne.n	80057c4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005768:	2200      	movs	r2, #0
 800576a:	2180      	movs	r1, #128	; 0x80
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f000 f935 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e04d      	b.n	8005818 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005780:	b29b      	uxth	r3, r3
 8005782:	2bff      	cmp	r3, #255	; 0xff
 8005784:	d90e      	bls.n	80057a4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	22ff      	movs	r2, #255	; 0xff
 800578a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005790:	b2da      	uxtb	r2, r3
 8005792:	8979      	ldrh	r1, [r7, #10]
 8005794:	2300      	movs	r3, #0
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 fa3f 	bl	8005c20 <I2C_TransferConfig>
 80057a2:	e00f      	b.n	80057c4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	8979      	ldrh	r1, [r7, #10]
 80057b6:	2300      	movs	r3, #0
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f000 fa2e 	bl	8005c20 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d19a      	bne.n	8005704 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f000 f982 	bl	8005adc <I2C_WaitOnSTOPFlagUntilTimeout>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e01a      	b.n	8005818 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2220      	movs	r2, #32
 80057e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	6859      	ldr	r1, [r3, #4]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	4b0b      	ldr	r3, [pc, #44]	; (8005824 <HAL_I2C_Mem_Read+0x230>)
 80057f6:	400b      	ands	r3, r1
 80057f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2220      	movs	r2, #32
 80057fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	e000      	b.n	8005818 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005816:	2302      	movs	r3, #2
  }
}
 8005818:	4618      	mov	r0, r3
 800581a:	3718      	adds	r7, #24
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	80002400 	.word	0x80002400
 8005824:	fe00e800 	.word	0xfe00e800

08005828 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005836:	b2db      	uxtb	r3, r3
}
 8005838:	4618      	mov	r0, r3
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af02      	add	r7, sp, #8
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	4608      	mov	r0, r1
 800584e:	4611      	mov	r1, r2
 8005850:	461a      	mov	r2, r3
 8005852:	4603      	mov	r3, r0
 8005854:	817b      	strh	r3, [r7, #10]
 8005856:	460b      	mov	r3, r1
 8005858:	813b      	strh	r3, [r7, #8]
 800585a:	4613      	mov	r3, r2
 800585c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800585e:	88fb      	ldrh	r3, [r7, #6]
 8005860:	b2da      	uxtb	r2, r3
 8005862:	8979      	ldrh	r1, [r7, #10]
 8005864:	4b20      	ldr	r3, [pc, #128]	; (80058e8 <I2C_RequestMemoryWrite+0xa4>)
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 f9d7 	bl	8005c20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005872:	69fa      	ldr	r2, [r7, #28]
 8005874:	69b9      	ldr	r1, [r7, #24]
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f000 f8f0 	bl	8005a5c <I2C_WaitOnTXISFlagUntilTimeout>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e02c      	b.n	80058e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005886:	88fb      	ldrh	r3, [r7, #6]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d105      	bne.n	8005898 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800588c:	893b      	ldrh	r3, [r7, #8]
 800588e:	b2da      	uxtb	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	629a      	str	r2, [r3, #40]	; 0x28
 8005896:	e015      	b.n	80058c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005898:	893b      	ldrh	r3, [r7, #8]
 800589a:	0a1b      	lsrs	r3, r3, #8
 800589c:	b29b      	uxth	r3, r3
 800589e:	b2da      	uxtb	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058a6:	69fa      	ldr	r2, [r7, #28]
 80058a8:	69b9      	ldr	r1, [r7, #24]
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 f8d6 	bl	8005a5c <I2C_WaitOnTXISFlagUntilTimeout>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e012      	b.n	80058e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058ba:	893b      	ldrh	r3, [r7, #8]
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	2200      	movs	r2, #0
 80058cc:	2180      	movs	r1, #128	; 0x80
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 f884 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e000      	b.n	80058e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	80002000 	.word	0x80002000

080058ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af02      	add	r7, sp, #8
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	4608      	mov	r0, r1
 80058f6:	4611      	mov	r1, r2
 80058f8:	461a      	mov	r2, r3
 80058fa:	4603      	mov	r3, r0
 80058fc:	817b      	strh	r3, [r7, #10]
 80058fe:	460b      	mov	r3, r1
 8005900:	813b      	strh	r3, [r7, #8]
 8005902:	4613      	mov	r3, r2
 8005904:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005906:	88fb      	ldrh	r3, [r7, #6]
 8005908:	b2da      	uxtb	r2, r3
 800590a:	8979      	ldrh	r1, [r7, #10]
 800590c:	4b20      	ldr	r3, [pc, #128]	; (8005990 <I2C_RequestMemoryRead+0xa4>)
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	2300      	movs	r3, #0
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f000 f984 	bl	8005c20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005918:	69fa      	ldr	r2, [r7, #28]
 800591a:	69b9      	ldr	r1, [r7, #24]
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 f89d 	bl	8005a5c <I2C_WaitOnTXISFlagUntilTimeout>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e02c      	b.n	8005986 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800592c:	88fb      	ldrh	r3, [r7, #6]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d105      	bne.n	800593e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005932:	893b      	ldrh	r3, [r7, #8]
 8005934:	b2da      	uxtb	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	629a      	str	r2, [r3, #40]	; 0x28
 800593c:	e015      	b.n	800596a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800593e:	893b      	ldrh	r3, [r7, #8]
 8005940:	0a1b      	lsrs	r3, r3, #8
 8005942:	b29b      	uxth	r3, r3
 8005944:	b2da      	uxtb	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800594c:	69fa      	ldr	r2, [r7, #28]
 800594e:	69b9      	ldr	r1, [r7, #24]
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f000 f883 	bl	8005a5c <I2C_WaitOnTXISFlagUntilTimeout>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e012      	b.n	8005986 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005960:	893b      	ldrh	r3, [r7, #8]
 8005962:	b2da      	uxtb	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	2200      	movs	r2, #0
 8005972:	2140      	movs	r1, #64	; 0x40
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f000 f831 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e000      	b.n	8005986 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	80002000 	.word	0x80002000

08005994 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d103      	bne.n	80059b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2200      	movs	r2, #0
 80059b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d007      	beq.n	80059d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699a      	ldr	r2, [r3, #24]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f042 0201 	orr.w	r2, r2, #1
 80059ce:	619a      	str	r2, [r3, #24]
  }
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	603b      	str	r3, [r7, #0]
 80059e8:	4613      	mov	r3, r2
 80059ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059ec:	e022      	b.n	8005a34 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f4:	d01e      	beq.n	8005a34 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059f6:	f7fd fb23 	bl	8003040 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d302      	bcc.n	8005a0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d113      	bne.n	8005a34 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a10:	f043 0220 	orr.w	r2, r3, #32
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e00f      	b.n	8005a54 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	699a      	ldr	r2, [r3, #24]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	bf0c      	ite	eq
 8005a44:	2301      	moveq	r3, #1
 8005a46:	2300      	movne	r3, #0
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	79fb      	ldrb	r3, [r7, #7]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d0cd      	beq.n	80059ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a68:	e02c      	b.n	8005ac4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	68b9      	ldr	r1, [r7, #8]
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f000 f870 	bl	8005b54 <I2C_IsAcknowledgeFailed>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e02a      	b.n	8005ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a84:	d01e      	beq.n	8005ac4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a86:	f7fd fadb 	bl	8003040 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d302      	bcc.n	8005a9c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d113      	bne.n	8005ac4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa0:	f043 0220 	orr.w	r2, r3, #32
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e007      	b.n	8005ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	f003 0302 	and.w	r3, r3, #2
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d1cb      	bne.n	8005a6a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ae8:	e028      	b.n	8005b3c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	68b9      	ldr	r1, [r7, #8]
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f000 f830 	bl	8005b54 <I2C_IsAcknowledgeFailed>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e026      	b.n	8005b4c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005afe:	f7fd fa9f 	bl	8003040 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d302      	bcc.n	8005b14 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d113      	bne.n	8005b3c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b18:	f043 0220 	orr.w	r2, r3, #32
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e007      	b.n	8005b4c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	f003 0320 	and.w	r3, r3, #32
 8005b46:	2b20      	cmp	r3, #32
 8005b48:	d1cf      	bne.n	8005aea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	f003 0310 	and.w	r3, r3, #16
 8005b6a:	2b10      	cmp	r3, #16
 8005b6c:	d151      	bne.n	8005c12 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b6e:	e022      	b.n	8005bb6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b76:	d01e      	beq.n	8005bb6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b78:	f7fd fa62 	bl	8003040 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d302      	bcc.n	8005b8e <I2C_IsAcknowledgeFailed+0x3a>
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d113      	bne.n	8005bb6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b92:	f043 0220 	orr.w	r2, r3, #32
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e02e      	b.n	8005c14 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	f003 0320 	and.w	r3, r3, #32
 8005bc0:	2b20      	cmp	r3, #32
 8005bc2:	d1d5      	bne.n	8005b70 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2210      	movs	r2, #16
 8005bca:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f7ff fedd 	bl	8005994 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6859      	ldr	r1, [r3, #4]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	4b0d      	ldr	r3, [pc, #52]	; (8005c1c <I2C_IsAcknowledgeFailed+0xc8>)
 8005be6:	400b      	ands	r3, r1
 8005be8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bee:	f043 0204 	orr.w	r2, r3, #4
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e000      	b.n	8005c14 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	fe00e800 	.word	0xfe00e800

08005c20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	607b      	str	r3, [r7, #4]
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	817b      	strh	r3, [r7, #10]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	0d5b      	lsrs	r3, r3, #21
 8005c3c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005c40:	4b0d      	ldr	r3, [pc, #52]	; (8005c78 <I2C_TransferConfig+0x58>)
 8005c42:	430b      	orrs	r3, r1
 8005c44:	43db      	mvns	r3, r3
 8005c46:	ea02 0103 	and.w	r1, r2, r3
 8005c4a:	897b      	ldrh	r3, [r7, #10]
 8005c4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005c50:	7a7b      	ldrb	r3, [r7, #9]
 8005c52:	041b      	lsls	r3, r3, #16
 8005c54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	431a      	orrs	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005c6a:	bf00      	nop
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	03ff63ff 	.word	0x03ff63ff

08005c7c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e0bf      	b.n	8005e0e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d106      	bne.n	8005ca8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f006 fcc8 	bl	800c638 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2202      	movs	r2, #2
 8005cac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	699a      	ldr	r2, [r3, #24]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005cbe:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6999      	ldr	r1, [r3, #24]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005cd4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6899      	ldr	r1, [r3, #8]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	4b4a      	ldr	r3, [pc, #296]	; (8005e18 <HAL_LTDC_Init+0x19c>)
 8005cf0:	400b      	ands	r3, r1
 8005cf2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	695b      	ldr	r3, [r3, #20]
 8005cf8:	041b      	lsls	r3, r3, #16
 8005cfa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6899      	ldr	r1, [r3, #8]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	699a      	ldr	r2, [r3, #24]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68d9      	ldr	r1, [r3, #12]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	4b3e      	ldr	r3, [pc, #248]	; (8005e18 <HAL_LTDC_Init+0x19c>)
 8005d1e:	400b      	ands	r3, r1
 8005d20:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	69db      	ldr	r3, [r3, #28]
 8005d26:	041b      	lsls	r3, r3, #16
 8005d28:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68d9      	ldr	r1, [r3, #12]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a1a      	ldr	r2, [r3, #32]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	431a      	orrs	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6919      	ldr	r1, [r3, #16]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	4b33      	ldr	r3, [pc, #204]	; (8005e18 <HAL_LTDC_Init+0x19c>)
 8005d4c:	400b      	ands	r3, r1
 8005d4e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d54:	041b      	lsls	r3, r3, #16
 8005d56:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6919      	ldr	r1, [r3, #16]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	431a      	orrs	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6959      	ldr	r1, [r3, #20]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	4b27      	ldr	r3, [pc, #156]	; (8005e18 <HAL_LTDC_Init+0x19c>)
 8005d7a:	400b      	ands	r3, r1
 8005d7c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d82:	041b      	lsls	r3, r3, #16
 8005d84:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6959      	ldr	r1, [r3, #20]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	431a      	orrs	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005da2:	021b      	lsls	r3, r3, #8
 8005da4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005dac:	041b      	lsls	r3, r3, #16
 8005dae:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f042 0206 	orr.w	r2, r2, #6
 8005dea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	699a      	ldr	r2, [r3, #24]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f042 0201 	orr.w	r2, r2, #1
 8005dfa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	f000f800 	.word	0xf000f800

08005e1c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e32:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f003 0304 	and.w	r3, r3, #4
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d023      	beq.n	8005e86 <HAL_LTDC_IRQHandler+0x6a>
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	f003 0304 	and.w	r3, r3, #4
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d01e      	beq.n	8005e86 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f022 0204 	bic.w	r2, r2, #4
 8005e56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2204      	movs	r2, #4
 8005e5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e66:	f043 0201 	orr.w	r2, r3, #1
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2204      	movs	r2, #4
 8005e74:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f86f 	bl	8005f64 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d023      	beq.n	8005ed8 <HAL_LTDC_IRQHandler+0xbc>
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d01e      	beq.n	8005ed8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 0202 	bic.w	r2, r2, #2
 8005ea8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005eb8:	f043 0202 	orr.w	r2, r3, #2
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2204      	movs	r2, #4
 8005ec6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f846 	bl	8005f64 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d01b      	beq.n	8005f1a <HAL_LTDC_IRQHandler+0xfe>
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d016      	beq.n	8005f1a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 0201 	bic.w	r2, r2, #1
 8005efa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2201      	movs	r2, #1
 8005f02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 f82f 	bl	8005f78 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f003 0308 	and.w	r3, r3, #8
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d01b      	beq.n	8005f5c <HAL_LTDC_IRQHandler+0x140>
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	f003 0308 	and.w	r3, r3, #8
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d016      	beq.n	8005f5c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 0208 	bic.w	r2, r2, #8
 8005f3c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2208      	movs	r2, #8
 8005f44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f818 	bl	8005f8c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005f5c:	bf00      	nop
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005fa0:	b5b0      	push	{r4, r5, r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d101      	bne.n	8005fba <HAL_LTDC_ConfigLayer+0x1a>
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	e02c      	b.n	8006014 <HAL_LTDC_ConfigLayer+0x74>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2134      	movs	r1, #52	; 0x34
 8005fd0:	fb01 f303 	mul.w	r3, r1, r3
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	4614      	mov	r4, r2
 8005fde:	461d      	mov	r5, r3
 8005fe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fec:	682b      	ldr	r3, [r5, #0]
 8005fee:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	68b9      	ldr	r1, [r7, #8]
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 f81f 	bl	8006038 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2201      	movs	r2, #1
 8006000:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bdb0      	pop	{r4, r5, r7, pc}

0800601c <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800602a:	b2db      	uxtb	r3, r3
}
 800602c:	4618      	mov	r0, r3
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006038:	b480      	push	{r7}
 800603a:	b089      	sub	sp, #36	; 0x24
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	0c1b      	lsrs	r3, r3, #16
 8006050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006054:	4413      	add	r3, r2
 8006056:	041b      	lsls	r3, r3, #16
 8006058:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	461a      	mov	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	01db      	lsls	r3, r3, #7
 8006064:	4413      	add	r3, r2
 8006066:	3384      	adds	r3, #132	; 0x84
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	6812      	ldr	r2, [r2, #0]
 800606e:	4611      	mov	r1, r2
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	01d2      	lsls	r2, r2, #7
 8006074:	440a      	add	r2, r1
 8006076:	3284      	adds	r2, #132	; 0x84
 8006078:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800607c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	0c1b      	lsrs	r3, r3, #16
 800608a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800608e:	4413      	add	r3, r2
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4619      	mov	r1, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	01db      	lsls	r3, r3, #7
 800609c:	440b      	add	r3, r1
 800609e:	3384      	adds	r3, #132	; 0x84
 80060a0:	4619      	mov	r1, r3
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	68da      	ldr	r2, [r3, #12]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060b6:	4413      	add	r3, r2
 80060b8:	041b      	lsls	r3, r3, #16
 80060ba:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	461a      	mov	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	01db      	lsls	r3, r3, #7
 80060c6:	4413      	add	r3, r2
 80060c8:	3384      	adds	r3, #132	; 0x84
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	6812      	ldr	r2, [r2, #0]
 80060d0:	4611      	mov	r1, r2
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	01d2      	lsls	r2, r2, #7
 80060d6:	440a      	add	r2, r1
 80060d8:	3284      	adds	r2, #132	; 0x84
 80060da:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80060de:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	689a      	ldr	r2, [r3, #8]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060ee:	4413      	add	r3, r2
 80060f0:	1c5a      	adds	r2, r3, #1
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4619      	mov	r1, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	01db      	lsls	r3, r3, #7
 80060fc:	440b      	add	r3, r1
 80060fe:	3384      	adds	r3, #132	; 0x84
 8006100:	4619      	mov	r1, r3
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	4313      	orrs	r3, r2
 8006106:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	461a      	mov	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	01db      	lsls	r3, r3, #7
 8006112:	4413      	add	r3, r2
 8006114:	3384      	adds	r3, #132	; 0x84
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	6812      	ldr	r2, [r2, #0]
 800611c:	4611      	mov	r1, r2
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	01d2      	lsls	r2, r2, #7
 8006122:	440a      	add	r2, r1
 8006124:	3284      	adds	r2, #132	; 0x84
 8006126:	f023 0307 	bic.w	r3, r3, #7
 800612a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	461a      	mov	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	01db      	lsls	r3, r3, #7
 8006136:	4413      	add	r3, r2
 8006138:	3384      	adds	r3, #132	; 0x84
 800613a:	461a      	mov	r2, r3
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006148:	021b      	lsls	r3, r3, #8
 800614a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006152:	041b      	lsls	r3, r3, #16
 8006154:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	061b      	lsls	r3, r3, #24
 800615c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	461a      	mov	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	01db      	lsls	r3, r3, #7
 8006168:	4413      	add	r3, r2
 800616a:	3384      	adds	r3, #132	; 0x84
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	461a      	mov	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	01db      	lsls	r3, r3, #7
 8006178:	4413      	add	r3, r2
 800617a:	3384      	adds	r3, #132	; 0x84
 800617c:	461a      	mov	r2, r3
 800617e:	2300      	movs	r3, #0
 8006180:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006188:	461a      	mov	r2, r3
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	431a      	orrs	r2, r3
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	431a      	orrs	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4619      	mov	r1, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	01db      	lsls	r3, r3, #7
 800619c:	440b      	add	r3, r1
 800619e:	3384      	adds	r3, #132	; 0x84
 80061a0:	4619      	mov	r1, r3
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	461a      	mov	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	01db      	lsls	r3, r3, #7
 80061b2:	4413      	add	r3, r2
 80061b4:	3384      	adds	r3, #132	; 0x84
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	6812      	ldr	r2, [r2, #0]
 80061bc:	4611      	mov	r1, r2
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	01d2      	lsls	r2, r2, #7
 80061c2:	440a      	add	r2, r1
 80061c4:	3284      	adds	r2, #132	; 0x84
 80061c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80061ca:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	461a      	mov	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	01db      	lsls	r3, r3, #7
 80061d6:	4413      	add	r3, r2
 80061d8:	3384      	adds	r3, #132	; 0x84
 80061da:	461a      	mov	r2, r3
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	461a      	mov	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	01db      	lsls	r3, r3, #7
 80061ec:	4413      	add	r3, r2
 80061ee:	3384      	adds	r3, #132	; 0x84
 80061f0:	69da      	ldr	r2, [r3, #28]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4619      	mov	r1, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	01db      	lsls	r3, r3, #7
 80061fc:	440b      	add	r3, r1
 80061fe:	3384      	adds	r3, #132	; 0x84
 8006200:	4619      	mov	r1, r3
 8006202:	4b58      	ldr	r3, [pc, #352]	; (8006364 <LTDC_SetConfig+0x32c>)
 8006204:	4013      	ands	r3, r2
 8006206:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	69da      	ldr	r2, [r3, #28]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	68f9      	ldr	r1, [r7, #12]
 8006212:	6809      	ldr	r1, [r1, #0]
 8006214:	4608      	mov	r0, r1
 8006216:	6879      	ldr	r1, [r7, #4]
 8006218:	01c9      	lsls	r1, r1, #7
 800621a:	4401      	add	r1, r0
 800621c:	3184      	adds	r1, #132	; 0x84
 800621e:	4313      	orrs	r3, r2
 8006220:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	01db      	lsls	r3, r3, #7
 800622c:	4413      	add	r3, r2
 800622e:	3384      	adds	r3, #132	; 0x84
 8006230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	461a      	mov	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	01db      	lsls	r3, r3, #7
 800623c:	4413      	add	r3, r2
 800623e:	3384      	adds	r3, #132	; 0x84
 8006240:	461a      	mov	r2, r3
 8006242:	2300      	movs	r3, #0
 8006244:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	461a      	mov	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	01db      	lsls	r3, r3, #7
 8006250:	4413      	add	r3, r2
 8006252:	3384      	adds	r3, #132	; 0x84
 8006254:	461a      	mov	r2, r3
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d102      	bne.n	800626a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006264:	2304      	movs	r3, #4
 8006266:	61fb      	str	r3, [r7, #28]
 8006268:	e01b      	b.n	80062a2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d102      	bne.n	8006278 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006272:	2303      	movs	r3, #3
 8006274:	61fb      	str	r3, [r7, #28]
 8006276:	e014      	b.n	80062a2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	2b04      	cmp	r3, #4
 800627e:	d00b      	beq.n	8006298 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006284:	2b02      	cmp	r3, #2
 8006286:	d007      	beq.n	8006298 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800628c:	2b03      	cmp	r3, #3
 800628e:	d003      	beq.n	8006298 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006294:	2b07      	cmp	r3, #7
 8006296:	d102      	bne.n	800629e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006298:	2302      	movs	r3, #2
 800629a:	61fb      	str	r3, [r7, #28]
 800629c:	e001      	b.n	80062a2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800629e:	2301      	movs	r3, #1
 80062a0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	461a      	mov	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	01db      	lsls	r3, r3, #7
 80062ac:	4413      	add	r3, r2
 80062ae:	3384      	adds	r3, #132	; 0x84
 80062b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	6812      	ldr	r2, [r2, #0]
 80062b6:	4611      	mov	r1, r2
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	01d2      	lsls	r2, r2, #7
 80062bc:	440a      	add	r2, r1
 80062be:	3284      	adds	r2, #132	; 0x84
 80062c0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80062c4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ca:	69fa      	ldr	r2, [r7, #28]
 80062cc:	fb02 f303 	mul.w	r3, r2, r3
 80062d0:	041a      	lsls	r2, r3, #16
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	6859      	ldr	r1, [r3, #4]
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	1acb      	subs	r3, r1, r3
 80062dc:	69f9      	ldr	r1, [r7, #28]
 80062de:	fb01 f303 	mul.w	r3, r1, r3
 80062e2:	3303      	adds	r3, #3
 80062e4:	68f9      	ldr	r1, [r7, #12]
 80062e6:	6809      	ldr	r1, [r1, #0]
 80062e8:	4608      	mov	r0, r1
 80062ea:	6879      	ldr	r1, [r7, #4]
 80062ec:	01c9      	lsls	r1, r1, #7
 80062ee:	4401      	add	r1, r0
 80062f0:	3184      	adds	r1, #132	; 0x84
 80062f2:	4313      	orrs	r3, r2
 80062f4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	461a      	mov	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	01db      	lsls	r3, r3, #7
 8006300:	4413      	add	r3, r2
 8006302:	3384      	adds	r3, #132	; 0x84
 8006304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4619      	mov	r1, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	01db      	lsls	r3, r3, #7
 8006310:	440b      	add	r3, r1
 8006312:	3384      	adds	r3, #132	; 0x84
 8006314:	4619      	mov	r1, r3
 8006316:	4b14      	ldr	r3, [pc, #80]	; (8006368 <LTDC_SetConfig+0x330>)
 8006318:	4013      	ands	r3, r2
 800631a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	461a      	mov	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	01db      	lsls	r3, r3, #7
 8006326:	4413      	add	r3, r2
 8006328:	3384      	adds	r3, #132	; 0x84
 800632a:	461a      	mov	r2, r3
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006330:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	461a      	mov	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	01db      	lsls	r3, r3, #7
 800633c:	4413      	add	r3, r2
 800633e:	3384      	adds	r3, #132	; 0x84
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	6812      	ldr	r2, [r2, #0]
 8006346:	4611      	mov	r1, r2
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	01d2      	lsls	r2, r2, #7
 800634c:	440a      	add	r2, r1
 800634e:	3284      	adds	r2, #132	; 0x84
 8006350:	f043 0301 	orr.w	r3, r3, #1
 8006354:	6013      	str	r3, [r2, #0]
}
 8006356:	bf00      	nop
 8006358:	3724      	adds	r7, #36	; 0x24
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	fffff8f8 	.word	0xfffff8f8
 8006368:	fffff800 	.word	0xfffff800

0800636c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800636c:	b480      	push	{r7}
 800636e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006370:	4b05      	ldr	r3, [pc, #20]	; (8006388 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a04      	ldr	r2, [pc, #16]	; (8006388 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800637a:	6013      	str	r3, [r2, #0]
}
 800637c:	bf00      	nop
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	40007000 	.word	0x40007000

0800638c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006392:	2300      	movs	r3, #0
 8006394:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006396:	4b23      	ldr	r3, [pc, #140]	; (8006424 <HAL_PWREx_EnableOverDrive+0x98>)
 8006398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639a:	4a22      	ldr	r2, [pc, #136]	; (8006424 <HAL_PWREx_EnableOverDrive+0x98>)
 800639c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063a0:	6413      	str	r3, [r2, #64]	; 0x40
 80063a2:	4b20      	ldr	r3, [pc, #128]	; (8006424 <HAL_PWREx_EnableOverDrive+0x98>)
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063aa:	603b      	str	r3, [r7, #0]
 80063ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80063ae:	4b1e      	ldr	r3, [pc, #120]	; (8006428 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a1d      	ldr	r2, [pc, #116]	; (8006428 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063b8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063ba:	f7fc fe41 	bl	8003040 <HAL_GetTick>
 80063be:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80063c0:	e009      	b.n	80063d6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80063c2:	f7fc fe3d 	bl	8003040 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063d0:	d901      	bls.n	80063d6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e022      	b.n	800641c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80063d6:	4b14      	ldr	r3, [pc, #80]	; (8006428 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063e2:	d1ee      	bne.n	80063c2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80063e4:	4b10      	ldr	r3, [pc, #64]	; (8006428 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a0f      	ldr	r2, [pc, #60]	; (8006428 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063f0:	f7fc fe26 	bl	8003040 <HAL_GetTick>
 80063f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80063f6:	e009      	b.n	800640c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80063f8:	f7fc fe22 	bl	8003040 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006406:	d901      	bls.n	800640c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e007      	b.n	800641c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800640c:	4b06      	ldr	r3, [pc, #24]	; (8006428 <HAL_PWREx_EnableOverDrive+0x9c>)
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006414:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006418:	d1ee      	bne.n	80063f8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	40023800 	.word	0x40023800
 8006428:	40007000 	.word	0x40007000

0800642c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af02      	add	r7, sp, #8
 8006432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006438:	f7fc fe02 	bl	8003040 <HAL_GetTick>
 800643c:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d101      	bne.n	8006448 <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e073      	b.n	8006530 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800644e:	b2db      	uxtb	r3, r3
 8006450:	2b01      	cmp	r3, #1
 8006452:	d101      	bne.n	8006458 <HAL_QSPI_Init+0x2c>
 8006454:	2302      	movs	r3, #2
 8006456:	e06b      	b.n	8006530 <HAL_QSPI_Init+0x104>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10b      	bne.n	8006484 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f006 f9a7 	bl	800c7c8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 800647a:	f241 3188 	movw	r1, #5000	; 0x1388
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f85e 	bl	8006540 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	3b01      	subs	r3, #1
 8006494:	021a      	lsls	r2, r3, #8
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	2200      	movs	r2, #0
 80064a8:	2120      	movs	r1, #32
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f856 	bl	800655c <QSPI_WaitFlagStateUntilTimeout>
 80064b0:	4603      	mov	r3, r0
 80064b2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d135      	bne.n	8006526 <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	4b1d      	ldr	r3, [pc, #116]	; (8006538 <HAL_QSPI_Init+0x10c>)
 80064c2:	4013      	ands	r3, r2
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	6852      	ldr	r2, [r2, #4]
 80064c8:	0611      	lsls	r1, r2, #24
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	68d2      	ldr	r2, [r2, #12]
 80064ce:	4311      	orrs	r1, r2
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	69d2      	ldr	r2, [r2, #28]
 80064d4:	4311      	orrs	r1, r2
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	6a12      	ldr	r2, [r2, #32]
 80064da:	4311      	orrs	r1, r2
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	6812      	ldr	r2, [r2, #0]
 80064e0:	430b      	orrs	r3, r1
 80064e2:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	4b14      	ldr	r3, [pc, #80]	; (800653c <HAL_QSPI_Init+0x110>)
 80064ec:	4013      	ands	r3, r2
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6912      	ldr	r2, [r2, #16]
 80064f2:	0411      	lsls	r1, r2, #16
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	6952      	ldr	r2, [r2, #20]
 80064f8:	4311      	orrs	r1, r2
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	6992      	ldr	r2, [r2, #24]
 80064fe:	4311      	orrs	r1, r2
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	6812      	ldr	r2, [r2, #0]
 8006504:	430b      	orrs	r3, r1
 8006506:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f042 0201 	orr.w	r2, r2, #1
 8006516:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800652e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006530:	4618      	mov	r0, r3
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	00ffff2f 	.word	0x00ffff2f
 800653c:	ffe0f8fe 	.word	0xffe0f8fe

08006540 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	603b      	str	r3, [r7, #0]
 8006568:	4613      	mov	r3, r2
 800656a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800656c:	e01a      	b.n	80065a4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006574:	d016      	beq.n	80065a4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d007      	beq.n	800658c <QSPI_WaitFlagStateUntilTimeout+0x30>
 800657c:	f7fc fd60 	bl	8003040 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	429a      	cmp	r2, r3
 800658a:	d20b      	bcs.n	80065a4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2204      	movs	r2, #4
 8006590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006598:	f043 0201 	orr.w	r2, r3, #1
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e00e      	b.n	80065c2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689a      	ldr	r2, [r3, #8]
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	4013      	ands	r3, r2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	bf14      	ite	ne
 80065b2:	2301      	movne	r3, #1
 80065b4:	2300      	moveq	r3, #0
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	461a      	mov	r2, r3
 80065ba:	79fb      	ldrb	r3, [r7, #7]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d1d6      	bne.n	800656e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
	...

080065cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80065d4:	2300      	movs	r3, #0
 80065d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d101      	bne.n	80065e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e25c      	b.n	8006a9c <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f000 8087 	beq.w	80066fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80065f0:	4b96      	ldr	r3, [pc, #600]	; (800684c <HAL_RCC_OscConfig+0x280>)
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f003 030c 	and.w	r3, r3, #12
 80065f8:	2b04      	cmp	r3, #4
 80065fa:	d00c      	beq.n	8006616 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065fc:	4b93      	ldr	r3, [pc, #588]	; (800684c <HAL_RCC_OscConfig+0x280>)
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f003 030c 	and.w	r3, r3, #12
 8006604:	2b08      	cmp	r3, #8
 8006606:	d112      	bne.n	800662e <HAL_RCC_OscConfig+0x62>
 8006608:	4b90      	ldr	r3, [pc, #576]	; (800684c <HAL_RCC_OscConfig+0x280>)
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006610:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006614:	d10b      	bne.n	800662e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006616:	4b8d      	ldr	r3, [pc, #564]	; (800684c <HAL_RCC_OscConfig+0x280>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d06c      	beq.n	80066fc <HAL_RCC_OscConfig+0x130>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d168      	bne.n	80066fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e236      	b.n	8006a9c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006636:	d106      	bne.n	8006646 <HAL_RCC_OscConfig+0x7a>
 8006638:	4b84      	ldr	r3, [pc, #528]	; (800684c <HAL_RCC_OscConfig+0x280>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a83      	ldr	r2, [pc, #524]	; (800684c <HAL_RCC_OscConfig+0x280>)
 800663e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006642:	6013      	str	r3, [r2, #0]
 8006644:	e02e      	b.n	80066a4 <HAL_RCC_OscConfig+0xd8>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10c      	bne.n	8006668 <HAL_RCC_OscConfig+0x9c>
 800664e:	4b7f      	ldr	r3, [pc, #508]	; (800684c <HAL_RCC_OscConfig+0x280>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a7e      	ldr	r2, [pc, #504]	; (800684c <HAL_RCC_OscConfig+0x280>)
 8006654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006658:	6013      	str	r3, [r2, #0]
 800665a:	4b7c      	ldr	r3, [pc, #496]	; (800684c <HAL_RCC_OscConfig+0x280>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a7b      	ldr	r2, [pc, #492]	; (800684c <HAL_RCC_OscConfig+0x280>)
 8006660:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006664:	6013      	str	r3, [r2, #0]
 8006666:	e01d      	b.n	80066a4 <HAL_RCC_OscConfig+0xd8>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006670:	d10c      	bne.n	800668c <HAL_RCC_OscConfig+0xc0>
 8006672:	4b76      	ldr	r3, [pc, #472]	; (800684c <HAL_RCC_OscConfig+0x280>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a75      	ldr	r2, [pc, #468]	; (800684c <HAL_RCC_OscConfig+0x280>)
 8006678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800667c:	6013      	str	r3, [r2, #0]
 800667e:	4b73      	ldr	r3, [pc, #460]	; (800684c <HAL_RCC_OscConfig+0x280>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a72      	ldr	r2, [pc, #456]	; (800684c <HAL_RCC_OscConfig+0x280>)
 8006684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006688:	6013      	str	r3, [r2, #0]
 800668a:	e00b      	b.n	80066a4 <HAL_RCC_OscConfig+0xd8>
 800668c:	4b6f      	ldr	r3, [pc, #444]	; (800684c <HAL_RCC_OscConfig+0x280>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a6e      	ldr	r2, [pc, #440]	; (800684c <HAL_RCC_OscConfig+0x280>)
 8006692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006696:	6013      	str	r3, [r2, #0]
 8006698:	4b6c      	ldr	r3, [pc, #432]	; (800684c <HAL_RCC_OscConfig+0x280>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a6b      	ldr	r2, [pc, #428]	; (800684c <HAL_RCC_OscConfig+0x280>)
 800669e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d013      	beq.n	80066d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ac:	f7fc fcc8 	bl	8003040 <HAL_GetTick>
 80066b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066b2:	e008      	b.n	80066c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066b4:	f7fc fcc4 	bl	8003040 <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	2b64      	cmp	r3, #100	; 0x64
 80066c0:	d901      	bls.n	80066c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e1ea      	b.n	8006a9c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066c6:	4b61      	ldr	r3, [pc, #388]	; (800684c <HAL_RCC_OscConfig+0x280>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d0f0      	beq.n	80066b4 <HAL_RCC_OscConfig+0xe8>
 80066d2:	e014      	b.n	80066fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d4:	f7fc fcb4 	bl	8003040 <HAL_GetTick>
 80066d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066da:	e008      	b.n	80066ee <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066dc:	f7fc fcb0 	bl	8003040 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	2b64      	cmp	r3, #100	; 0x64
 80066e8:	d901      	bls.n	80066ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e1d6      	b.n	8006a9c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066ee:	4b57      	ldr	r3, [pc, #348]	; (800684c <HAL_RCC_OscConfig+0x280>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1f0      	bne.n	80066dc <HAL_RCC_OscConfig+0x110>
 80066fa:	e000      	b.n	80066fe <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d069      	beq.n	80067de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800670a:	4b50      	ldr	r3, [pc, #320]	; (800684c <HAL_RCC_OscConfig+0x280>)
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f003 030c 	and.w	r3, r3, #12
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00b      	beq.n	800672e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006716:	4b4d      	ldr	r3, [pc, #308]	; (800684c <HAL_RCC_OscConfig+0x280>)
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f003 030c 	and.w	r3, r3, #12
 800671e:	2b08      	cmp	r3, #8
 8006720:	d11c      	bne.n	800675c <HAL_RCC_OscConfig+0x190>
 8006722:	4b4a      	ldr	r3, [pc, #296]	; (800684c <HAL_RCC_OscConfig+0x280>)
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d116      	bne.n	800675c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800672e:	4b47      	ldr	r3, [pc, #284]	; (800684c <HAL_RCC_OscConfig+0x280>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b00      	cmp	r3, #0
 8006738:	d005      	beq.n	8006746 <HAL_RCC_OscConfig+0x17a>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d001      	beq.n	8006746 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e1aa      	b.n	8006a9c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006746:	4b41      	ldr	r3, [pc, #260]	; (800684c <HAL_RCC_OscConfig+0x280>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	00db      	lsls	r3, r3, #3
 8006754:	493d      	ldr	r1, [pc, #244]	; (800684c <HAL_RCC_OscConfig+0x280>)
 8006756:	4313      	orrs	r3, r2
 8006758:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800675a:	e040      	b.n	80067de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d023      	beq.n	80067ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006764:	4b39      	ldr	r3, [pc, #228]	; (800684c <HAL_RCC_OscConfig+0x280>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a38      	ldr	r2, [pc, #224]	; (800684c <HAL_RCC_OscConfig+0x280>)
 800676a:	f043 0301 	orr.w	r3, r3, #1
 800676e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006770:	f7fc fc66 	bl	8003040 <HAL_GetTick>
 8006774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006776:	e008      	b.n	800678a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006778:	f7fc fc62 	bl	8003040 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b02      	cmp	r3, #2
 8006784:	d901      	bls.n	800678a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e188      	b.n	8006a9c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800678a:	4b30      	ldr	r3, [pc, #192]	; (800684c <HAL_RCC_OscConfig+0x280>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0f0      	beq.n	8006778 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006796:	4b2d      	ldr	r3, [pc, #180]	; (800684c <HAL_RCC_OscConfig+0x280>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	4929      	ldr	r1, [pc, #164]	; (800684c <HAL_RCC_OscConfig+0x280>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	600b      	str	r3, [r1, #0]
 80067aa:	e018      	b.n	80067de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067ac:	4b27      	ldr	r3, [pc, #156]	; (800684c <HAL_RCC_OscConfig+0x280>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a26      	ldr	r2, [pc, #152]	; (800684c <HAL_RCC_OscConfig+0x280>)
 80067b2:	f023 0301 	bic.w	r3, r3, #1
 80067b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067b8:	f7fc fc42 	bl	8003040 <HAL_GetTick>
 80067bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067be:	e008      	b.n	80067d2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067c0:	f7fc fc3e 	bl	8003040 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d901      	bls.n	80067d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e164      	b.n	8006a9c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067d2:	4b1e      	ldr	r3, [pc, #120]	; (800684c <HAL_RCC_OscConfig+0x280>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0302 	and.w	r3, r3, #2
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1f0      	bne.n	80067c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0308 	and.w	r3, r3, #8
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d038      	beq.n	800685c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d019      	beq.n	8006826 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067f2:	4b16      	ldr	r3, [pc, #88]	; (800684c <HAL_RCC_OscConfig+0x280>)
 80067f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067f6:	4a15      	ldr	r2, [pc, #84]	; (800684c <HAL_RCC_OscConfig+0x280>)
 80067f8:	f043 0301 	orr.w	r3, r3, #1
 80067fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067fe:	f7fc fc1f 	bl	8003040 <HAL_GetTick>
 8006802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006804:	e008      	b.n	8006818 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006806:	f7fc fc1b 	bl	8003040 <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	2b02      	cmp	r3, #2
 8006812:	d901      	bls.n	8006818 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e141      	b.n	8006a9c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006818:	4b0c      	ldr	r3, [pc, #48]	; (800684c <HAL_RCC_OscConfig+0x280>)
 800681a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800681c:	f003 0302 	and.w	r3, r3, #2
 8006820:	2b00      	cmp	r3, #0
 8006822:	d0f0      	beq.n	8006806 <HAL_RCC_OscConfig+0x23a>
 8006824:	e01a      	b.n	800685c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006826:	4b09      	ldr	r3, [pc, #36]	; (800684c <HAL_RCC_OscConfig+0x280>)
 8006828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800682a:	4a08      	ldr	r2, [pc, #32]	; (800684c <HAL_RCC_OscConfig+0x280>)
 800682c:	f023 0301 	bic.w	r3, r3, #1
 8006830:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006832:	f7fc fc05 	bl	8003040 <HAL_GetTick>
 8006836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006838:	e00a      	b.n	8006850 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800683a:	f7fc fc01 	bl	8003040 <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	2b02      	cmp	r3, #2
 8006846:	d903      	bls.n	8006850 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e127      	b.n	8006a9c <HAL_RCC_OscConfig+0x4d0>
 800684c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006850:	4b94      	ldr	r3, [pc, #592]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 8006852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1ee      	bne.n	800683a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0304 	and.w	r3, r3, #4
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 80a4 	beq.w	80069b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800686a:	4b8e      	ldr	r3, [pc, #568]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 800686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10d      	bne.n	8006892 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006876:	4b8b      	ldr	r3, [pc, #556]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 8006878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687a:	4a8a      	ldr	r2, [pc, #552]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 800687c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006880:	6413      	str	r3, [r2, #64]	; 0x40
 8006882:	4b88      	ldr	r3, [pc, #544]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 8006884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800688e:	2301      	movs	r3, #1
 8006890:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006892:	4b85      	ldr	r3, [pc, #532]	; (8006aa8 <HAL_RCC_OscConfig+0x4dc>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800689a:	2b00      	cmp	r3, #0
 800689c:	d118      	bne.n	80068d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800689e:	4b82      	ldr	r3, [pc, #520]	; (8006aa8 <HAL_RCC_OscConfig+0x4dc>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a81      	ldr	r2, [pc, #516]	; (8006aa8 <HAL_RCC_OscConfig+0x4dc>)
 80068a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068aa:	f7fc fbc9 	bl	8003040 <HAL_GetTick>
 80068ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068b0:	e008      	b.n	80068c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80068b2:	f7fc fbc5 	bl	8003040 <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	2b64      	cmp	r3, #100	; 0x64
 80068be:	d901      	bls.n	80068c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e0eb      	b.n	8006a9c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068c4:	4b78      	ldr	r3, [pc, #480]	; (8006aa8 <HAL_RCC_OscConfig+0x4dc>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d0f0      	beq.n	80068b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d106      	bne.n	80068e6 <HAL_RCC_OscConfig+0x31a>
 80068d8:	4b72      	ldr	r3, [pc, #456]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 80068da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068dc:	4a71      	ldr	r2, [pc, #452]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 80068de:	f043 0301 	orr.w	r3, r3, #1
 80068e2:	6713      	str	r3, [r2, #112]	; 0x70
 80068e4:	e02d      	b.n	8006942 <HAL_RCC_OscConfig+0x376>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10c      	bne.n	8006908 <HAL_RCC_OscConfig+0x33c>
 80068ee:	4b6d      	ldr	r3, [pc, #436]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 80068f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f2:	4a6c      	ldr	r2, [pc, #432]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 80068f4:	f023 0301 	bic.w	r3, r3, #1
 80068f8:	6713      	str	r3, [r2, #112]	; 0x70
 80068fa:	4b6a      	ldr	r3, [pc, #424]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 80068fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068fe:	4a69      	ldr	r2, [pc, #420]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 8006900:	f023 0304 	bic.w	r3, r3, #4
 8006904:	6713      	str	r3, [r2, #112]	; 0x70
 8006906:	e01c      	b.n	8006942 <HAL_RCC_OscConfig+0x376>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	2b05      	cmp	r3, #5
 800690e:	d10c      	bne.n	800692a <HAL_RCC_OscConfig+0x35e>
 8006910:	4b64      	ldr	r3, [pc, #400]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 8006912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006914:	4a63      	ldr	r2, [pc, #396]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 8006916:	f043 0304 	orr.w	r3, r3, #4
 800691a:	6713      	str	r3, [r2, #112]	; 0x70
 800691c:	4b61      	ldr	r3, [pc, #388]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 800691e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006920:	4a60      	ldr	r2, [pc, #384]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 8006922:	f043 0301 	orr.w	r3, r3, #1
 8006926:	6713      	str	r3, [r2, #112]	; 0x70
 8006928:	e00b      	b.n	8006942 <HAL_RCC_OscConfig+0x376>
 800692a:	4b5e      	ldr	r3, [pc, #376]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 800692c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692e:	4a5d      	ldr	r2, [pc, #372]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 8006930:	f023 0301 	bic.w	r3, r3, #1
 8006934:	6713      	str	r3, [r2, #112]	; 0x70
 8006936:	4b5b      	ldr	r3, [pc, #364]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 8006938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693a:	4a5a      	ldr	r2, [pc, #360]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 800693c:	f023 0304 	bic.w	r3, r3, #4
 8006940:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d015      	beq.n	8006976 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800694a:	f7fc fb79 	bl	8003040 <HAL_GetTick>
 800694e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006950:	e00a      	b.n	8006968 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006952:	f7fc fb75 	bl	8003040 <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006960:	4293      	cmp	r3, r2
 8006962:	d901      	bls.n	8006968 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e099      	b.n	8006a9c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006968:	4b4e      	ldr	r3, [pc, #312]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 800696a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d0ee      	beq.n	8006952 <HAL_RCC_OscConfig+0x386>
 8006974:	e014      	b.n	80069a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006976:	f7fc fb63 	bl	8003040 <HAL_GetTick>
 800697a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800697c:	e00a      	b.n	8006994 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800697e:	f7fc fb5f 	bl	8003040 <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	f241 3288 	movw	r2, #5000	; 0x1388
 800698c:	4293      	cmp	r3, r2
 800698e:	d901      	bls.n	8006994 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	e083      	b.n	8006a9c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006994:	4b43      	ldr	r3, [pc, #268]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 8006996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006998:	f003 0302 	and.w	r3, r3, #2
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1ee      	bne.n	800697e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069a0:	7dfb      	ldrb	r3, [r7, #23]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d105      	bne.n	80069b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069a6:	4b3f      	ldr	r3, [pc, #252]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 80069a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069aa:	4a3e      	ldr	r2, [pc, #248]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 80069ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d06f      	beq.n	8006a9a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80069ba:	4b3a      	ldr	r3, [pc, #232]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f003 030c 	and.w	r3, r3, #12
 80069c2:	2b08      	cmp	r3, #8
 80069c4:	d067      	beq.n	8006a96 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d149      	bne.n	8006a62 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069ce:	4b35      	ldr	r3, [pc, #212]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a34      	ldr	r2, [pc, #208]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 80069d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069da:	f7fc fb31 	bl	8003040 <HAL_GetTick>
 80069de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069e0:	e008      	b.n	80069f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069e2:	f7fc fb2d 	bl	8003040 <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d901      	bls.n	80069f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e053      	b.n	8006a9c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069f4:	4b2b      	ldr	r3, [pc, #172]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1f0      	bne.n	80069e2 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	69da      	ldr	r2, [r3, #28]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a1b      	ldr	r3, [r3, #32]
 8006a08:	431a      	orrs	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0e:	019b      	lsls	r3, r3, #6
 8006a10:	431a      	orrs	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a16:	085b      	lsrs	r3, r3, #1
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	041b      	lsls	r3, r3, #16
 8006a1c:	431a      	orrs	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a22:	061b      	lsls	r3, r3, #24
 8006a24:	4313      	orrs	r3, r2
 8006a26:	4a1f      	ldr	r2, [pc, #124]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 8006a28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a2c:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a2e:	4b1d      	ldr	r3, [pc, #116]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a1c      	ldr	r2, [pc, #112]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 8006a34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a3a:	f7fc fb01 	bl	8003040 <HAL_GetTick>
 8006a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a40:	e008      	b.n	8006a54 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a42:	f7fc fafd 	bl	8003040 <HAL_GetTick>
 8006a46:	4602      	mov	r2, r0
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d901      	bls.n	8006a54 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e023      	b.n	8006a9c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a54:	4b13      	ldr	r3, [pc, #76]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d0f0      	beq.n	8006a42 <HAL_RCC_OscConfig+0x476>
 8006a60:	e01b      	b.n	8006a9a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a62:	4b10      	ldr	r3, [pc, #64]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a0f      	ldr	r2, [pc, #60]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 8006a68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a6e:	f7fc fae7 	bl	8003040 <HAL_GetTick>
 8006a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a74:	e008      	b.n	8006a88 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a76:	f7fc fae3 	bl	8003040 <HAL_GetTick>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d901      	bls.n	8006a88 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e009      	b.n	8006a9c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a88:	4b06      	ldr	r3, [pc, #24]	; (8006aa4 <HAL_RCC_OscConfig+0x4d8>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1f0      	bne.n	8006a76 <HAL_RCC_OscConfig+0x4aa>
 8006a94:	e001      	b.n	8006a9a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e000      	b.n	8006a9c <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3718      	adds	r7, #24
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	40023800 	.word	0x40023800
 8006aa8:	40007000 	.word	0x40007000

08006aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e0ce      	b.n	8006c62 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ac4:	4b69      	ldr	r3, [pc, #420]	; (8006c6c <HAL_RCC_ClockConfig+0x1c0>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 030f 	and.w	r3, r3, #15
 8006acc:	683a      	ldr	r2, [r7, #0]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d910      	bls.n	8006af4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ad2:	4b66      	ldr	r3, [pc, #408]	; (8006c6c <HAL_RCC_ClockConfig+0x1c0>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f023 020f 	bic.w	r2, r3, #15
 8006ada:	4964      	ldr	r1, [pc, #400]	; (8006c6c <HAL_RCC_ClockConfig+0x1c0>)
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ae2:	4b62      	ldr	r3, [pc, #392]	; (8006c6c <HAL_RCC_ClockConfig+0x1c0>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 030f 	and.w	r3, r3, #15
 8006aea:	683a      	ldr	r2, [r7, #0]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d001      	beq.n	8006af4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e0b6      	b.n	8006c62 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0302 	and.w	r3, r3, #2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d020      	beq.n	8006b42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0304 	and.w	r3, r3, #4
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d005      	beq.n	8006b18 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b0c:	4b58      	ldr	r3, [pc, #352]	; (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	4a57      	ldr	r2, [pc, #348]	; (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006b12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0308 	and.w	r3, r3, #8
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d005      	beq.n	8006b30 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b24:	4b52      	ldr	r3, [pc, #328]	; (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	4a51      	ldr	r2, [pc, #324]	; (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006b2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b30:	4b4f      	ldr	r3, [pc, #316]	; (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	494c      	ldr	r1, [pc, #304]	; (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d040      	beq.n	8006bd0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d107      	bne.n	8006b66 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b56:	4b46      	ldr	r3, [pc, #280]	; (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d115      	bne.n	8006b8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e07d      	b.n	8006c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d107      	bne.n	8006b7e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b6e:	4b40      	ldr	r3, [pc, #256]	; (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d109      	bne.n	8006b8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e071      	b.n	8006c62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b7e:	4b3c      	ldr	r3, [pc, #240]	; (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d101      	bne.n	8006b8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e069      	b.n	8006c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b8e:	4b38      	ldr	r3, [pc, #224]	; (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f023 0203 	bic.w	r2, r3, #3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	4935      	ldr	r1, [pc, #212]	; (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ba0:	f7fc fa4e 	bl	8003040 <HAL_GetTick>
 8006ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ba6:	e00a      	b.n	8006bbe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ba8:	f7fc fa4a 	bl	8003040 <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e051      	b.n	8006c62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bbe:	4b2c      	ldr	r3, [pc, #176]	; (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f003 020c 	and.w	r2, r3, #12
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d1eb      	bne.n	8006ba8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006bd0:	4b26      	ldr	r3, [pc, #152]	; (8006c6c <HAL_RCC_ClockConfig+0x1c0>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 030f 	and.w	r3, r3, #15
 8006bd8:	683a      	ldr	r2, [r7, #0]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d210      	bcs.n	8006c00 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bde:	4b23      	ldr	r3, [pc, #140]	; (8006c6c <HAL_RCC_ClockConfig+0x1c0>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f023 020f 	bic.w	r2, r3, #15
 8006be6:	4921      	ldr	r1, [pc, #132]	; (8006c6c <HAL_RCC_ClockConfig+0x1c0>)
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bee:	4b1f      	ldr	r3, [pc, #124]	; (8006c6c <HAL_RCC_ClockConfig+0x1c0>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 030f 	and.w	r3, r3, #15
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d001      	beq.n	8006c00 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e030      	b.n	8006c62 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0304 	and.w	r3, r3, #4
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d008      	beq.n	8006c1e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c0c:	4b18      	ldr	r3, [pc, #96]	; (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	4915      	ldr	r1, [pc, #84]	; (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0308 	and.w	r3, r3, #8
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d009      	beq.n	8006c3e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c2a:	4b11      	ldr	r3, [pc, #68]	; (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	00db      	lsls	r3, r3, #3
 8006c38:	490d      	ldr	r1, [pc, #52]	; (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c3e:	f000 f81d 	bl	8006c7c <HAL_RCC_GetSysClockFreq>
 8006c42:	4601      	mov	r1, r0
 8006c44:	4b0a      	ldr	r3, [pc, #40]	; (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	091b      	lsrs	r3, r3, #4
 8006c4a:	f003 030f 	and.w	r3, r3, #15
 8006c4e:	4a09      	ldr	r2, [pc, #36]	; (8006c74 <HAL_RCC_ClockConfig+0x1c8>)
 8006c50:	5cd3      	ldrb	r3, [r2, r3]
 8006c52:	fa21 f303 	lsr.w	r3, r1, r3
 8006c56:	4a08      	ldr	r2, [pc, #32]	; (8006c78 <HAL_RCC_ClockConfig+0x1cc>)
 8006c58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006c5a:	2000      	movs	r0, #0
 8006c5c:	f7fc f9ac 	bl	8002fb8 <HAL_InitTick>

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	40023c00 	.word	0x40023c00
 8006c70:	40023800 	.word	0x40023800
 8006c74:	080100bc 	.word	0x080100bc
 8006c78:	200000ac 	.word	0x200000ac

08006c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006c82:	2300      	movs	r3, #0
 8006c84:	607b      	str	r3, [r7, #4]
 8006c86:	2300      	movs	r3, #0
 8006c88:	60fb      	str	r3, [r7, #12]
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c92:	4b50      	ldr	r3, [pc, #320]	; (8006dd4 <HAL_RCC_GetSysClockFreq+0x158>)
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f003 030c 	and.w	r3, r3, #12
 8006c9a:	2b04      	cmp	r3, #4
 8006c9c:	d007      	beq.n	8006cae <HAL_RCC_GetSysClockFreq+0x32>
 8006c9e:	2b08      	cmp	r3, #8
 8006ca0:	d008      	beq.n	8006cb4 <HAL_RCC_GetSysClockFreq+0x38>
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f040 808d 	bne.w	8006dc2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ca8:	4b4b      	ldr	r3, [pc, #300]	; (8006dd8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006caa:	60bb      	str	r3, [r7, #8]
       break;
 8006cac:	e08c      	b.n	8006dc8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006cae:	4b4b      	ldr	r3, [pc, #300]	; (8006ddc <HAL_RCC_GetSysClockFreq+0x160>)
 8006cb0:	60bb      	str	r3, [r7, #8]
      break;
 8006cb2:	e089      	b.n	8006dc8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006cb4:	4b47      	ldr	r3, [pc, #284]	; (8006dd4 <HAL_RCC_GetSysClockFreq+0x158>)
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cbc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006cbe:	4b45      	ldr	r3, [pc, #276]	; (8006dd4 <HAL_RCC_GetSysClockFreq+0x158>)
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d023      	beq.n	8006d12 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cca:	4b42      	ldr	r3, [pc, #264]	; (8006dd4 <HAL_RCC_GetSysClockFreq+0x158>)
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	099b      	lsrs	r3, r3, #6
 8006cd0:	f04f 0400 	mov.w	r4, #0
 8006cd4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006cd8:	f04f 0200 	mov.w	r2, #0
 8006cdc:	ea03 0501 	and.w	r5, r3, r1
 8006ce0:	ea04 0602 	and.w	r6, r4, r2
 8006ce4:	4a3d      	ldr	r2, [pc, #244]	; (8006ddc <HAL_RCC_GetSysClockFreq+0x160>)
 8006ce6:	fb02 f106 	mul.w	r1, r2, r6
 8006cea:	2200      	movs	r2, #0
 8006cec:	fb02 f205 	mul.w	r2, r2, r5
 8006cf0:	440a      	add	r2, r1
 8006cf2:	493a      	ldr	r1, [pc, #232]	; (8006ddc <HAL_RCC_GetSysClockFreq+0x160>)
 8006cf4:	fba5 0101 	umull	r0, r1, r5, r1
 8006cf8:	1853      	adds	r3, r2, r1
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f04f 0400 	mov.w	r4, #0
 8006d02:	461a      	mov	r2, r3
 8006d04:	4623      	mov	r3, r4
 8006d06:	f7f9 fec1 	bl	8000a8c <__aeabi_uldivmod>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	460c      	mov	r4, r1
 8006d0e:	60fb      	str	r3, [r7, #12]
 8006d10:	e049      	b.n	8006da6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d12:	4b30      	ldr	r3, [pc, #192]	; (8006dd4 <HAL_RCC_GetSysClockFreq+0x158>)
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	099b      	lsrs	r3, r3, #6
 8006d18:	f04f 0400 	mov.w	r4, #0
 8006d1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006d20:	f04f 0200 	mov.w	r2, #0
 8006d24:	ea03 0501 	and.w	r5, r3, r1
 8006d28:	ea04 0602 	and.w	r6, r4, r2
 8006d2c:	4629      	mov	r1, r5
 8006d2e:	4632      	mov	r2, r6
 8006d30:	f04f 0300 	mov.w	r3, #0
 8006d34:	f04f 0400 	mov.w	r4, #0
 8006d38:	0154      	lsls	r4, r2, #5
 8006d3a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006d3e:	014b      	lsls	r3, r1, #5
 8006d40:	4619      	mov	r1, r3
 8006d42:	4622      	mov	r2, r4
 8006d44:	1b49      	subs	r1, r1, r5
 8006d46:	eb62 0206 	sbc.w	r2, r2, r6
 8006d4a:	f04f 0300 	mov.w	r3, #0
 8006d4e:	f04f 0400 	mov.w	r4, #0
 8006d52:	0194      	lsls	r4, r2, #6
 8006d54:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006d58:	018b      	lsls	r3, r1, #6
 8006d5a:	1a5b      	subs	r3, r3, r1
 8006d5c:	eb64 0402 	sbc.w	r4, r4, r2
 8006d60:	f04f 0100 	mov.w	r1, #0
 8006d64:	f04f 0200 	mov.w	r2, #0
 8006d68:	00e2      	lsls	r2, r4, #3
 8006d6a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006d6e:	00d9      	lsls	r1, r3, #3
 8006d70:	460b      	mov	r3, r1
 8006d72:	4614      	mov	r4, r2
 8006d74:	195b      	adds	r3, r3, r5
 8006d76:	eb44 0406 	adc.w	r4, r4, r6
 8006d7a:	f04f 0100 	mov.w	r1, #0
 8006d7e:	f04f 0200 	mov.w	r2, #0
 8006d82:	02a2      	lsls	r2, r4, #10
 8006d84:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006d88:	0299      	lsls	r1, r3, #10
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4614      	mov	r4, r2
 8006d8e:	4618      	mov	r0, r3
 8006d90:	4621      	mov	r1, r4
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f04f 0400 	mov.w	r4, #0
 8006d98:	461a      	mov	r2, r3
 8006d9a:	4623      	mov	r3, r4
 8006d9c:	f7f9 fe76 	bl	8000a8c <__aeabi_uldivmod>
 8006da0:	4603      	mov	r3, r0
 8006da2:	460c      	mov	r4, r1
 8006da4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8006da6:	4b0b      	ldr	r3, [pc, #44]	; (8006dd4 <HAL_RCC_GetSysClockFreq+0x158>)
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	0c1b      	lsrs	r3, r3, #16
 8006dac:	f003 0303 	and.w	r3, r3, #3
 8006db0:	3301      	adds	r3, #1
 8006db2:	005b      	lsls	r3, r3, #1
 8006db4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dbe:	60bb      	str	r3, [r7, #8]
      break;
 8006dc0:	e002      	b.n	8006dc8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006dc2:	4b05      	ldr	r3, [pc, #20]	; (8006dd8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006dc4:	60bb      	str	r3, [r7, #8]
      break;
 8006dc6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006dc8:	68bb      	ldr	r3, [r7, #8]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	40023800 	.word	0x40023800
 8006dd8:	00f42400 	.word	0x00f42400
 8006ddc:	017d7840 	.word	0x017d7840

08006de0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006de0:	b480      	push	{r7}
 8006de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006de4:	4b03      	ldr	r3, [pc, #12]	; (8006df4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006de6:	681b      	ldr	r3, [r3, #0]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	200000ac 	.word	0x200000ac

08006df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006dfc:	f7ff fff0 	bl	8006de0 <HAL_RCC_GetHCLKFreq>
 8006e00:	4601      	mov	r1, r0
 8006e02:	4b05      	ldr	r3, [pc, #20]	; (8006e18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	0a9b      	lsrs	r3, r3, #10
 8006e08:	f003 0307 	and.w	r3, r3, #7
 8006e0c:	4a03      	ldr	r2, [pc, #12]	; (8006e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e0e:	5cd3      	ldrb	r3, [r2, r3]
 8006e10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	40023800 	.word	0x40023800
 8006e1c:	080100cc 	.word	0x080100cc

08006e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006e24:	f7ff ffdc 	bl	8006de0 <HAL_RCC_GetHCLKFreq>
 8006e28:	4601      	mov	r1, r0
 8006e2a:	4b05      	ldr	r3, [pc, #20]	; (8006e40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	0b5b      	lsrs	r3, r3, #13
 8006e30:	f003 0307 	and.w	r3, r3, #7
 8006e34:	4a03      	ldr	r2, [pc, #12]	; (8006e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e36:	5cd3      	ldrb	r3, [r2, r3]
 8006e38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	40023800 	.word	0x40023800
 8006e44:	080100cc 	.word	0x080100cc

08006e48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b088      	sub	sp, #32
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006e50:	2300      	movs	r3, #0
 8006e52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006e54:	2300      	movs	r3, #0
 8006e56:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006e60:	2300      	movs	r3, #0
 8006e62:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d012      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006e70:	4b69      	ldr	r3, [pc, #420]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	4a68      	ldr	r2, [pc, #416]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e76:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006e7a:	6093      	str	r3, [r2, #8]
 8006e7c:	4b66      	ldr	r3, [pc, #408]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e84:	4964      	ldr	r1, [pc, #400]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d101      	bne.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006e92:	2301      	movs	r3, #1
 8006e94:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d017      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ea2:	4b5d      	ldr	r3, [pc, #372]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ea8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eb0:	4959      	ldr	r1, [pc, #356]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ebc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ec0:	d101      	bne.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d017      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006ede:	4b4e      	ldr	r3, [pc, #312]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ee4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eec:	494a      	ldr	r1, [pc, #296]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006efc:	d101      	bne.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006efe:	2301      	movs	r3, #1
 8006f00:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d101      	bne.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d001      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 0320 	and.w	r3, r3, #32
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f000 808b 	beq.w	8007042 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f2c:	4b3a      	ldr	r3, [pc, #232]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f30:	4a39      	ldr	r2, [pc, #228]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f36:	6413      	str	r3, [r2, #64]	; 0x40
 8006f38:	4b37      	ldr	r3, [pc, #220]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f40:	60bb      	str	r3, [r7, #8]
 8006f42:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006f44:	4b35      	ldr	r3, [pc, #212]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a34      	ldr	r2, [pc, #208]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f50:	f7fc f876 	bl	8003040 <HAL_GetTick>
 8006f54:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006f56:	e008      	b.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f58:	f7fc f872 	bl	8003040 <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	2b64      	cmp	r3, #100	; 0x64
 8006f64:	d901      	bls.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e355      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006f6a:	4b2c      	ldr	r3, [pc, #176]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d0f0      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006f76:	4b28      	ldr	r3, [pc, #160]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f7e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d035      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d02e      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f94:	4b20      	ldr	r3, [pc, #128]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f9c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f9e:	4b1e      	ldr	r3, [pc, #120]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa2:	4a1d      	ldr	r2, [pc, #116]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fa8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006faa:	4b1b      	ldr	r3, [pc, #108]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fae:	4a1a      	ldr	r2, [pc, #104]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fb4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006fb6:	4a18      	ldr	r2, [pc, #96]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006fbc:	4b16      	ldr	r3, [pc, #88]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d114      	bne.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fc8:	f7fc f83a 	bl	8003040 <HAL_GetTick>
 8006fcc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fce:	e00a      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fd0:	f7fc f836 	bl	8003040 <HAL_GetTick>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d901      	bls.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e317      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fe6:	4b0c      	ldr	r3, [pc, #48]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fea:	f003 0302 	and.w	r3, r3, #2
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d0ee      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ffa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ffe:	d111      	bne.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007000:	4b05      	ldr	r3, [pc, #20]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800700c:	4b04      	ldr	r3, [pc, #16]	; (8007020 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800700e:	400b      	ands	r3, r1
 8007010:	4901      	ldr	r1, [pc, #4]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007012:	4313      	orrs	r3, r2
 8007014:	608b      	str	r3, [r1, #8]
 8007016:	e00b      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007018:	40023800 	.word	0x40023800
 800701c:	40007000 	.word	0x40007000
 8007020:	0ffffcff 	.word	0x0ffffcff
 8007024:	4bb0      	ldr	r3, [pc, #704]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	4aaf      	ldr	r2, [pc, #700]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800702a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800702e:	6093      	str	r3, [r2, #8]
 8007030:	4bad      	ldr	r3, [pc, #692]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007032:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800703c:	49aa      	ldr	r1, [pc, #680]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800703e:	4313      	orrs	r3, r2
 8007040:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0310 	and.w	r3, r3, #16
 800704a:	2b00      	cmp	r3, #0
 800704c:	d010      	beq.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800704e:	4ba6      	ldr	r3, [pc, #664]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007054:	4aa4      	ldr	r2, [pc, #656]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007056:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800705a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800705e:	4ba2      	ldr	r3, [pc, #648]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007060:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007068:	499f      	ldr	r1, [pc, #636]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800706a:	4313      	orrs	r3, r2
 800706c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00a      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800707c:	4b9a      	ldr	r3, [pc, #616]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800707e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007082:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800708a:	4997      	ldr	r1, [pc, #604]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800708c:	4313      	orrs	r3, r2
 800708e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00a      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800709e:	4b92      	ldr	r3, [pc, #584]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070ac:	498e      	ldr	r1, [pc, #568]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070ae:	4313      	orrs	r3, r2
 80070b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00a      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80070c0:	4b89      	ldr	r3, [pc, #548]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070ce:	4986      	ldr	r1, [pc, #536]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070d0:	4313      	orrs	r3, r2
 80070d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00a      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80070e2:	4b81      	ldr	r3, [pc, #516]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f0:	497d      	ldr	r1, [pc, #500]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00a      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007104:	4b78      	ldr	r3, [pc, #480]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800710a:	f023 0203 	bic.w	r2, r3, #3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007112:	4975      	ldr	r1, [pc, #468]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007114:	4313      	orrs	r3, r2
 8007116:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00a      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007126:	4b70      	ldr	r3, [pc, #448]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800712c:	f023 020c 	bic.w	r2, r3, #12
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007134:	496c      	ldr	r1, [pc, #432]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007136:	4313      	orrs	r3, r2
 8007138:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00a      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007148:	4b67      	ldr	r3, [pc, #412]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800714a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800714e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007156:	4964      	ldr	r1, [pc, #400]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007158:	4313      	orrs	r3, r2
 800715a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00a      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800716a:	4b5f      	ldr	r3, [pc, #380]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800716c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007170:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007178:	495b      	ldr	r1, [pc, #364]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800717a:	4313      	orrs	r3, r2
 800717c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00a      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800718c:	4b56      	ldr	r3, [pc, #344]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800718e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007192:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800719a:	4953      	ldr	r1, [pc, #332]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800719c:	4313      	orrs	r3, r2
 800719e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00a      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80071ae:	4b4e      	ldr	r3, [pc, #312]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071bc:	494a      	ldr	r1, [pc, #296]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00a      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80071d0:	4b45      	ldr	r3, [pc, #276]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071de:	4942      	ldr	r1, [pc, #264]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00a      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80071f2:	4b3d      	ldr	r3, [pc, #244]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007200:	4939      	ldr	r1, [pc, #228]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007202:	4313      	orrs	r3, r2
 8007204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00a      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007214:	4b34      	ldr	r3, [pc, #208]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800721a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007222:	4931      	ldr	r1, [pc, #196]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007224:	4313      	orrs	r3, r2
 8007226:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d011      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007236:	4b2c      	ldr	r3, [pc, #176]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800723c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007244:	4928      	ldr	r1, [pc, #160]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007246:	4313      	orrs	r3, r2
 8007248:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007250:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007254:	d101      	bne.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007256:	2301      	movs	r3, #1
 8007258:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0308 	and.w	r3, r3, #8
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007266:	2301      	movs	r3, #1
 8007268:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00a      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007276:	4b1c      	ldr	r3, [pc, #112]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800727c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007284:	4918      	ldr	r1, [pc, #96]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007286:	4313      	orrs	r3, r2
 8007288:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00b      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007298:	4b13      	ldr	r3, [pc, #76]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800729a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800729e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072a8:	490f      	ldr	r1, [pc, #60]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d005      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072be:	f040 80d8 	bne.w	8007472 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80072c2:	4b09      	ldr	r3, [pc, #36]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a08      	ldr	r2, [pc, #32]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80072cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072ce:	f7fb feb7 	bl	8003040 <HAL_GetTick>
 80072d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072d4:	e00a      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80072d6:	f7fb feb3 	bl	8003040 <HAL_GetTick>
 80072da:	4602      	mov	r2, r0
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	2b64      	cmp	r3, #100	; 0x64
 80072e2:	d903      	bls.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e196      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80072e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072ec:	4b6c      	ldr	r3, [pc, #432]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1ee      	bne.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0301 	and.w	r3, r3, #1
 8007300:	2b00      	cmp	r3, #0
 8007302:	d021      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007308:	2b00      	cmp	r3, #0
 800730a:	d11d      	bne.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800730c:	4b64      	ldr	r3, [pc, #400]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800730e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007312:	0c1b      	lsrs	r3, r3, #16
 8007314:	f003 0303 	and.w	r3, r3, #3
 8007318:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800731a:	4b61      	ldr	r3, [pc, #388]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800731c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007320:	0e1b      	lsrs	r3, r3, #24
 8007322:	f003 030f 	and.w	r3, r3, #15
 8007326:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	019a      	lsls	r2, r3, #6
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	041b      	lsls	r3, r3, #16
 8007332:	431a      	orrs	r2, r3
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	061b      	lsls	r3, r3, #24
 8007338:	431a      	orrs	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	071b      	lsls	r3, r3, #28
 8007340:	4957      	ldr	r1, [pc, #348]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007342:	4313      	orrs	r3, r2
 8007344:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007350:	2b00      	cmp	r3, #0
 8007352:	d004      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007358:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800735c:	d00a      	beq.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007366:	2b00      	cmp	r3, #0
 8007368:	d02e      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007372:	d129      	bne.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007374:	4b4a      	ldr	r3, [pc, #296]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007376:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800737a:	0c1b      	lsrs	r3, r3, #16
 800737c:	f003 0303 	and.w	r3, r3, #3
 8007380:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007382:	4b47      	ldr	r3, [pc, #284]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007388:	0f1b      	lsrs	r3, r3, #28
 800738a:	f003 0307 	and.w	r3, r3, #7
 800738e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	019a      	lsls	r2, r3, #6
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	041b      	lsls	r3, r3, #16
 800739a:	431a      	orrs	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	061b      	lsls	r3, r3, #24
 80073a2:	431a      	orrs	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	071b      	lsls	r3, r3, #28
 80073a8:	493d      	ldr	r1, [pc, #244]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80073b0:	4b3b      	ldr	r3, [pc, #236]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80073b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073b6:	f023 021f 	bic.w	r2, r3, #31
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073be:	3b01      	subs	r3, #1
 80073c0:	4937      	ldr	r1, [pc, #220]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d01d      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80073d4:	4b32      	ldr	r3, [pc, #200]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80073d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073da:	0e1b      	lsrs	r3, r3, #24
 80073dc:	f003 030f 	and.w	r3, r3, #15
 80073e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80073e2:	4b2f      	ldr	r3, [pc, #188]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80073e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073e8:	0f1b      	lsrs	r3, r3, #28
 80073ea:	f003 0307 	and.w	r3, r3, #7
 80073ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	019a      	lsls	r2, r3, #6
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	041b      	lsls	r3, r3, #16
 80073fc:	431a      	orrs	r2, r3
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	061b      	lsls	r3, r3, #24
 8007402:	431a      	orrs	r2, r3
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	071b      	lsls	r3, r3, #28
 8007408:	4925      	ldr	r1, [pc, #148]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800740a:	4313      	orrs	r3, r2
 800740c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d011      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	019a      	lsls	r2, r3, #6
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	041b      	lsls	r3, r3, #16
 8007428:	431a      	orrs	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	061b      	lsls	r3, r3, #24
 8007430:	431a      	orrs	r2, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	071b      	lsls	r3, r3, #28
 8007438:	4919      	ldr	r1, [pc, #100]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800743a:	4313      	orrs	r3, r2
 800743c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007440:	4b17      	ldr	r3, [pc, #92]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a16      	ldr	r2, [pc, #88]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007446:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800744a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800744c:	f7fb fdf8 	bl	8003040 <HAL_GetTick>
 8007450:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007452:	e008      	b.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007454:	f7fb fdf4 	bl	8003040 <HAL_GetTick>
 8007458:	4602      	mov	r2, r0
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	2b64      	cmp	r3, #100	; 0x64
 8007460:	d901      	bls.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e0d7      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007466:	4b0e      	ldr	r3, [pc, #56]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d0f0      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	2b01      	cmp	r3, #1
 8007476:	f040 80cd 	bne.w	8007614 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800747a:	4b09      	ldr	r3, [pc, #36]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a08      	ldr	r2, [pc, #32]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007484:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007486:	f7fb fddb 	bl	8003040 <HAL_GetTick>
 800748a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800748c:	e00a      	b.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800748e:	f7fb fdd7 	bl	8003040 <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	2b64      	cmp	r3, #100	; 0x64
 800749a:	d903      	bls.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e0ba      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80074a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80074a4:	4b5e      	ldr	r3, [pc, #376]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074b0:	d0ed      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d003      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d009      	beq.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d02e      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d12a      	bne.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80074da:	4b51      	ldr	r3, [pc, #324]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074e0:	0c1b      	lsrs	r3, r3, #16
 80074e2:	f003 0303 	and.w	r3, r3, #3
 80074e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80074e8:	4b4d      	ldr	r3, [pc, #308]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ee:	0f1b      	lsrs	r3, r3, #28
 80074f0:	f003 0307 	and.w	r3, r3, #7
 80074f4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	019a      	lsls	r2, r3, #6
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	041b      	lsls	r3, r3, #16
 8007500:	431a      	orrs	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	061b      	lsls	r3, r3, #24
 8007508:	431a      	orrs	r2, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	071b      	lsls	r3, r3, #28
 800750e:	4944      	ldr	r1, [pc, #272]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007510:	4313      	orrs	r3, r2
 8007512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007516:	4b42      	ldr	r3, [pc, #264]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007518:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800751c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007524:	3b01      	subs	r3, #1
 8007526:	021b      	lsls	r3, r3, #8
 8007528:	493d      	ldr	r1, [pc, #244]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800752a:	4313      	orrs	r3, r2
 800752c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007538:	2b00      	cmp	r3, #0
 800753a:	d022      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007540:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007544:	d11d      	bne.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007546:	4b36      	ldr	r3, [pc, #216]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800754c:	0e1b      	lsrs	r3, r3, #24
 800754e:	f003 030f 	and.w	r3, r3, #15
 8007552:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007554:	4b32      	ldr	r3, [pc, #200]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800755a:	0f1b      	lsrs	r3, r3, #28
 800755c:	f003 0307 	and.w	r3, r3, #7
 8007560:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	019a      	lsls	r2, r3, #6
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a1b      	ldr	r3, [r3, #32]
 800756c:	041b      	lsls	r3, r3, #16
 800756e:	431a      	orrs	r2, r3
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	061b      	lsls	r3, r3, #24
 8007574:	431a      	orrs	r2, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	071b      	lsls	r3, r3, #28
 800757a:	4929      	ldr	r1, [pc, #164]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800757c:	4313      	orrs	r3, r2
 800757e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0308 	and.w	r3, r3, #8
 800758a:	2b00      	cmp	r3, #0
 800758c:	d028      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800758e:	4b24      	ldr	r3, [pc, #144]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007594:	0e1b      	lsrs	r3, r3, #24
 8007596:	f003 030f 	and.w	r3, r3, #15
 800759a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800759c:	4b20      	ldr	r3, [pc, #128]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800759e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075a2:	0c1b      	lsrs	r3, r3, #16
 80075a4:	f003 0303 	and.w	r3, r3, #3
 80075a8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	019a      	lsls	r2, r3, #6
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	041b      	lsls	r3, r3, #16
 80075b4:	431a      	orrs	r2, r3
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	061b      	lsls	r3, r3, #24
 80075ba:	431a      	orrs	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	69db      	ldr	r3, [r3, #28]
 80075c0:	071b      	lsls	r3, r3, #28
 80075c2:	4917      	ldr	r1, [pc, #92]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80075c4:	4313      	orrs	r3, r2
 80075c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80075ca:	4b15      	ldr	r3, [pc, #84]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80075cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d8:	4911      	ldr	r1, [pc, #68]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80075e0:	4b0f      	ldr	r3, [pc, #60]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a0e      	ldr	r2, [pc, #56]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80075e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075ec:	f7fb fd28 	bl	8003040 <HAL_GetTick>
 80075f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80075f2:	e008      	b.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80075f4:	f7fb fd24 	bl	8003040 <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	2b64      	cmp	r3, #100	; 0x64
 8007600:	d901      	bls.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e007      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007606:	4b06      	ldr	r3, [pc, #24]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800760e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007612:	d1ef      	bne.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3720      	adds	r7, #32
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	40023800 	.word	0x40023800

08007624 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d101      	bne.n	8007636 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e06b      	b.n	800770e <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	7f5b      	ldrb	r3, [r3, #29]
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b00      	cmp	r3, #0
 800763e:	d105      	bne.n	800764c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f005 f94e 	bl	800c8e8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2202      	movs	r2, #2
 8007650:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	22ca      	movs	r2, #202	; 0xca
 8007658:	625a      	str	r2, [r3, #36]	; 0x24
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2253      	movs	r2, #83	; 0x53
 8007660:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fb00 	bl	8007c68 <RTC_EnterInitMode>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d008      	beq.n	8007680 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	22ff      	movs	r2, #255	; 0xff
 8007674:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2204      	movs	r2, #4
 800767a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e046      	b.n	800770e <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	6899      	ldr	r1, [r3, #8]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	4b23      	ldr	r3, [pc, #140]	; (8007718 <HAL_RTC_Init+0xf4>)
 800768c:	400b      	ands	r3, r1
 800768e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	6899      	ldr	r1, [r3, #8]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685a      	ldr	r2, [r3, #4]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	431a      	orrs	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	431a      	orrs	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	430a      	orrs	r2, r1
 80076ac:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	68d2      	ldr	r2, [r2, #12]
 80076b6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	6919      	ldr	r1, [r3, #16]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	041a      	lsls	r2, r3, #16
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	430a      	orrs	r2, r1
 80076ca:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68da      	ldr	r2, [r3, #12]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076da:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f022 0208 	bic.w	r2, r2, #8
 80076ea:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	699a      	ldr	r2, [r3, #24]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	430a      	orrs	r2, r1
 80076fc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	22ff      	movs	r2, #255	; 0xff
 8007704:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800770c:	2300      	movs	r3, #0
  }
}
 800770e:	4618      	mov	r0, r3
 8007710:	3708      	adds	r7, #8
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	ff8fffbf 	.word	0xff8fffbf

0800771c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800771c:	b590      	push	{r4, r7, lr}
 800771e:	b087      	sub	sp, #28
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007728:	2300      	movs	r3, #0
 800772a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	7f1b      	ldrb	r3, [r3, #28]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d101      	bne.n	8007738 <HAL_RTC_SetTime+0x1c>
 8007734:	2302      	movs	r3, #2
 8007736:	e0a8      	b.n	800788a <HAL_RTC_SetTime+0x16e>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2201      	movs	r2, #1
 800773c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2202      	movs	r2, #2
 8007742:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d126      	bne.n	8007798 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007754:	2b00      	cmp	r3, #0
 8007756:	d102      	bne.n	800775e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	2200      	movs	r2, #0
 800775c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	4618      	mov	r0, r3
 8007764:	f000 faac 	bl	8007cc0 <RTC_ByteToBcd2>
 8007768:	4603      	mov	r3, r0
 800776a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	785b      	ldrb	r3, [r3, #1]
 8007770:	4618      	mov	r0, r3
 8007772:	f000 faa5 	bl	8007cc0 <RTC_ByteToBcd2>
 8007776:	4603      	mov	r3, r0
 8007778:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800777a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	789b      	ldrb	r3, [r3, #2]
 8007780:	4618      	mov	r0, r3
 8007782:	f000 fa9d 	bl	8007cc0 <RTC_ByteToBcd2>
 8007786:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007788:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	7b1b      	ldrb	r3, [r3, #12]
 8007790:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007792:	4313      	orrs	r3, r2
 8007794:	617b      	str	r3, [r7, #20]
 8007796:	e018      	b.n	80077ca <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d102      	bne.n	80077ac <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	2200      	movs	r2, #0
 80077aa:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	785b      	ldrb	r3, [r3, #1]
 80077b6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80077b8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80077ba:	68ba      	ldr	r2, [r7, #8]
 80077bc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80077be:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	7b1b      	ldrb	r3, [r3, #12]
 80077c4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80077c6:	4313      	orrs	r3, r2
 80077c8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	22ca      	movs	r2, #202	; 0xca
 80077d0:	625a      	str	r2, [r3, #36]	; 0x24
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2253      	movs	r2, #83	; 0x53
 80077d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f000 fa44 	bl	8007c68 <RTC_EnterInitMode>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00b      	beq.n	80077fe <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	22ff      	movs	r2, #255	; 0xff
 80077ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2204      	movs	r2, #4
 80077f2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e045      	b.n	800788a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	6979      	ldr	r1, [r7, #20]
 8007804:	4b23      	ldr	r3, [pc, #140]	; (8007894 <HAL_RTC_SetTime+0x178>)
 8007806:	400b      	ands	r3, r1
 8007808:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	689a      	ldr	r2, [r3, #8]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007818:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	6899      	ldr	r1, [r3, #8]
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	691a      	ldr	r2, [r3, #16]
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	695b      	ldr	r3, [r3, #20]
 8007828:	431a      	orrs	r2, r3
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68da      	ldr	r2, [r3, #12]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007840:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f003 0320 	and.w	r3, r3, #32
 800784c:	2b00      	cmp	r3, #0
 800784e:	d111      	bne.n	8007874 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f000 f9e1 	bl	8007c18 <HAL_RTC_WaitForSynchro>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00b      	beq.n	8007874 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	22ff      	movs	r2, #255	; 0xff
 8007862:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2204      	movs	r2, #4
 8007868:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e00a      	b.n	800788a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	22ff      	movs	r2, #255	; 0xff
 800787a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2201      	movs	r2, #1
 8007880:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007888:	2300      	movs	r3, #0
  }
}
 800788a:	4618      	mov	r0, r3
 800788c:	371c      	adds	r7, #28
 800788e:	46bd      	mov	sp, r7
 8007890:	bd90      	pop	{r4, r7, pc}
 8007892:	bf00      	nop
 8007894:	007f7f7f 	.word	0x007f7f7f

08007898 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007898:	b590      	push	{r4, r7, lr}
 800789a:	b087      	sub	sp, #28
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80078a4:	2300      	movs	r3, #0
 80078a6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	7f1b      	ldrb	r3, [r3, #28]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d101      	bne.n	80078b4 <HAL_RTC_SetDate+0x1c>
 80078b0:	2302      	movs	r3, #2
 80078b2:	e092      	b.n	80079da <HAL_RTC_SetDate+0x142>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2201      	movs	r2, #1
 80078b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2202      	movs	r2, #2
 80078be:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10e      	bne.n	80078e4 <HAL_RTC_SetDate+0x4c>
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	785b      	ldrb	r3, [r3, #1]
 80078ca:	f003 0310 	and.w	r3, r3, #16
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d008      	beq.n	80078e4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	785b      	ldrb	r3, [r3, #1]
 80078d6:	f023 0310 	bic.w	r3, r3, #16
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	330a      	adds	r3, #10
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d11c      	bne.n	8007924 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	78db      	ldrb	r3, [r3, #3]
 80078ee:	4618      	mov	r0, r3
 80078f0:	f000 f9e6 	bl	8007cc0 <RTC_ByteToBcd2>
 80078f4:	4603      	mov	r3, r0
 80078f6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	785b      	ldrb	r3, [r3, #1]
 80078fc:	4618      	mov	r0, r3
 80078fe:	f000 f9df 	bl	8007cc0 <RTC_ByteToBcd2>
 8007902:	4603      	mov	r3, r0
 8007904:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007906:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	789b      	ldrb	r3, [r3, #2]
 800790c:	4618      	mov	r0, r3
 800790e:	f000 f9d7 	bl	8007cc0 <RTC_ByteToBcd2>
 8007912:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007914:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800791e:	4313      	orrs	r3, r2
 8007920:	617b      	str	r3, [r7, #20]
 8007922:	e00e      	b.n	8007942 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	78db      	ldrb	r3, [r3, #3]
 8007928:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	785b      	ldrb	r3, [r3, #1]
 800792e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007930:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8007936:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800793e:	4313      	orrs	r3, r2
 8007940:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	22ca      	movs	r2, #202	; 0xca
 8007948:	625a      	str	r2, [r3, #36]	; 0x24
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2253      	movs	r2, #83	; 0x53
 8007950:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	f000 f988 	bl	8007c68 <RTC_EnterInitMode>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00b      	beq.n	8007976 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	22ff      	movs	r2, #255	; 0xff
 8007964:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2204      	movs	r2, #4
 800796a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2200      	movs	r2, #0
 8007970:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e031      	b.n	80079da <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	6979      	ldr	r1, [r7, #20]
 800797c:	4b19      	ldr	r3, [pc, #100]	; (80079e4 <HAL_RTC_SetDate+0x14c>)
 800797e:	400b      	ands	r3, r1
 8007980:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68da      	ldr	r2, [r3, #12]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007990:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f003 0320 	and.w	r3, r3, #32
 800799c:	2b00      	cmp	r3, #0
 800799e:	d111      	bne.n	80079c4 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f000 f939 	bl	8007c18 <HAL_RTC_WaitForSynchro>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00b      	beq.n	80079c4 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	22ff      	movs	r2, #255	; 0xff
 80079b2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2204      	movs	r2, #4
 80079b8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e00a      	b.n	80079da <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	22ff      	movs	r2, #255	; 0xff
 80079ca:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2201      	movs	r2, #1
 80079d0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80079d8:	2300      	movs	r3, #0
  }
}
 80079da:	4618      	mov	r0, r3
 80079dc:	371c      	adds	r7, #28
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd90      	pop	{r4, r7, pc}
 80079e2:	bf00      	nop
 80079e4:	00ffff3f 	.word	0x00ffff3f

080079e8 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80079e8:	b590      	push	{r4, r7, lr}
 80079ea:	b089      	sub	sp, #36	; 0x24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80079f4:	2300      	movs	r3, #0
 80079f6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 80079f8:	2300      	movs	r3, #0
 80079fa:	61fb      	str	r3, [r7, #28]
 80079fc:	2300      	movs	r3, #0
 80079fe:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	7f1b      	ldrb	r3, [r3, #28]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d101      	bne.n	8007a0c <HAL_RTC_SetAlarm+0x24>
 8007a08:	2302      	movs	r3, #2
 8007a0a:	e101      	b.n	8007c10 <HAL_RTC_SetAlarm+0x228>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2202      	movs	r2, #2
 8007a16:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d137      	bne.n	8007a8e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d102      	bne.n	8007a32 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	4618      	mov	r0, r3
 8007a38:	f000 f942 	bl	8007cc0 <RTC_ByteToBcd2>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	785b      	ldrb	r3, [r3, #1]
 8007a44:	4618      	mov	r0, r3
 8007a46:	f000 f93b 	bl	8007cc0 <RTC_ByteToBcd2>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007a4e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	789b      	ldrb	r3, [r3, #2]
 8007a54:	4618      	mov	r0, r3
 8007a56:	f000 f933 	bl	8007cc0 <RTC_ByteToBcd2>
 8007a5a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007a5c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	7b1b      	ldrb	r3, [r3, #12]
 8007a64:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007a66:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007a70:	4618      	mov	r0, r3
 8007a72:	f000 f925 	bl	8007cc0 <RTC_ByteToBcd2>
 8007a76:	4603      	mov	r3, r0
 8007a78:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007a7a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007a82:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	61fb      	str	r3, [r7, #28]
 8007a8c:	e023      	b.n	8007ad6 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d102      	bne.n	8007aa2 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	785b      	ldrb	r3, [r3, #1]
 8007aac:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007aae:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007ab4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	7b1b      	ldrb	r3, [r3, #12]
 8007aba:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007abc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ac4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007ac6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007acc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	685a      	ldr	r2, [r3, #4]
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	22ca      	movs	r2, #202	; 0xca
 8007ae8:	625a      	str	r2, [r3, #36]	; 0x24
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2253      	movs	r2, #83	; 0x53
 8007af0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007afa:	d13f      	bne.n	8007b7c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	689a      	ldr	r2, [r3, #8]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b0a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	689a      	ldr	r2, [r3, #8]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b1a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007b1c:	f7fb fa90 	bl	8003040 <HAL_GetTick>
 8007b20:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007b22:	e013      	b.n	8007b4c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007b24:	f7fb fa8c 	bl	8003040 <HAL_GetTick>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b32:	d90b      	bls.n	8007b4c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	22ff      	movs	r2, #255	; 0xff
 8007b3a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2203      	movs	r2, #3
 8007b40:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e061      	b.n	8007c10 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d0e4      	beq.n	8007b24 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	69fa      	ldr	r2, [r7, #28]
 8007b60:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	689a      	ldr	r2, [r3, #8]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b78:	609a      	str	r2, [r3, #8]
 8007b7a:	e03e      	b.n	8007bfa <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	689a      	ldr	r2, [r3, #8]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007b8a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	689a      	ldr	r2, [r3, #8]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b9a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007b9c:	f7fb fa50 	bl	8003040 <HAL_GetTick>
 8007ba0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007ba2:	e013      	b.n	8007bcc <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007ba4:	f7fb fa4c 	bl	8003040 <HAL_GetTick>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bb2:	d90b      	bls.n	8007bcc <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	22ff      	movs	r2, #255	; 0xff
 8007bba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2203      	movs	r2, #3
 8007bc0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e021      	b.n	8007c10 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	f003 0302 	and.w	r3, r3, #2
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d0e4      	beq.n	8007ba4 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	69fa      	ldr	r2, [r7, #28]
 8007be0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689a      	ldr	r2, [r3, #8]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bf8:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	22ff      	movs	r2, #255	; 0xff
 8007c00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2201      	movs	r2, #1
 8007c06:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3724      	adds	r7, #36	; 0x24
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd90      	pop	{r4, r7, pc}

08007c18 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007c20:	2300      	movs	r3, #0
 8007c22:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68da      	ldr	r2, [r3, #12]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007c32:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c34:	f7fb fa04 	bl	8003040 <HAL_GetTick>
 8007c38:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007c3a:	e009      	b.n	8007c50 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007c3c:	f7fb fa00 	bl	8003040 <HAL_GetTick>
 8007c40:	4602      	mov	r2, r0
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c4a:	d901      	bls.n	8007c50 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e007      	b.n	8007c60 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	f003 0320 	and.w	r3, r3, #32
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d0ee      	beq.n	8007c3c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007c70:	2300      	movs	r3, #0
 8007c72:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d119      	bne.n	8007cb6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f04f 32ff 	mov.w	r2, #4294967295
 8007c8a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c8c:	f7fb f9d8 	bl	8003040 <HAL_GetTick>
 8007c90:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007c92:	e009      	b.n	8007ca8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007c94:	f7fb f9d4 	bl	8003040 <HAL_GetTick>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	1ad3      	subs	r3, r2, r3
 8007c9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ca2:	d901      	bls.n	8007ca8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e007      	b.n	8007cb8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d0ee      	beq.n	8007c94 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8007cce:	e005      	b.n	8007cdc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8007cd6:	79fb      	ldrb	r3, [r7, #7]
 8007cd8:	3b0a      	subs	r3, #10
 8007cda:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8007cdc:	79fb      	ldrb	r3, [r7, #7]
 8007cde:	2b09      	cmp	r3, #9
 8007ce0:	d8f6      	bhi.n	8007cd0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	011b      	lsls	r3, r3, #4
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	79fb      	ldrb	r3, [r7, #7]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	b2db      	uxtb	r3, r3
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3714      	adds	r7, #20
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	7f1b      	ldrb	r3, [r3, #28]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d101      	bne.n	8007d18 <HAL_RTCEx_SetTimeStamp+0x1c>
 8007d14:	2302      	movs	r3, #2
 8007d16:	e03e      	b.n	8007d96 <HAL_RTCEx_SetTimeStamp+0x9a>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2202      	movs	r2, #2
 8007d22:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	689a      	ldr	r2, [r3, #8]
 8007d2a:	4b1e      	ldr	r3, [pc, #120]	; (8007da4 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8007d30:	697a      	ldr	r2, [r7, #20]
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	22ca      	movs	r2, #202	; 0xca
 8007d3e:	625a      	str	r2, [r3, #36]	; 0x24
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2253      	movs	r2, #83	; 0x53
 8007d46:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f022 0206 	bic.w	r2, r2, #6
 8007d56:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	430a      	orrs	r2, r1
 8007d66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	697a      	ldr	r2, [r7, #20]
 8007d6e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	689a      	ldr	r2, [r3, #8]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d7e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	22ff      	movs	r2, #255	; 0xff
 8007d86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	371c      	adds	r7, #28
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	fffff7f7 	.word	0xfffff7f7

08007da8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d101      	bne.n	8007dba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e01d      	b.n	8007df6 <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d105      	bne.n	8007dd2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f004 fda5 	bl	800c91c <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2203      	movs	r2, #3
 8007dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f80f 	bl	8007dfe <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3708      	adds	r7, #8
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007dfe:	b5b0      	push	{r4, r5, r7, lr}
 8007e00:	b08e      	sub	sp, #56	; 0x38
 8007e02:	af04      	add	r7, sp, #16
 8007e04:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007e06:	2300      	movs	r3, #0
 8007e08:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007e12:	2300      	movs	r3, #0
 8007e14:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007e16:	2300      	movs	r3, #0
 8007e18:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007e1e:	2376      	movs	r3, #118	; 0x76
 8007e20:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681d      	ldr	r5, [r3, #0]
 8007e26:	466c      	mov	r4, sp
 8007e28:	f107 0318 	add.w	r3, r7, #24
 8007e2c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007e30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007e34:	f107 030c 	add.w	r3, r7, #12
 8007e38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	f001 ff78 	bl	8009d30 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	685a      	ldr	r2, [r3, #4]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e4e:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4618      	mov	r0, r3
 8007e56:	f001 ffa4 	bl	8009da2 <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e68:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 8007e6a:	2002      	movs	r0, #2
 8007e6c:	f7fb f8f4 	bl	8003058 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fb95 	bl	80085a0 <SD_PowerON>
 8007e76:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00b      	beq.n	8007e96 <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8c:	431a      	orrs	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e013      	b.n	8007ebe <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 fab9 	bl	800840e <SD_InitCard>
 8007e9c:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00b      	beq.n	8007ebc <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb2:	431a      	orrs	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e000      	b.n	8007ebe <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3728      	adds	r7, #40	; 0x28
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bdb0      	pop	{r4, r5, r7, pc}

08007ec6 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b085      	sub	sp, #20
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ed8:	0e1b      	lsrs	r3, r3, #24
 8007eda:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	099b      	lsrs	r3, r3, #6
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	f003 0303 	and.w	r3, r3, #3
 8007ee6:	b2da      	uxtb	r2, r3
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	089b      	lsrs	r3, r3, #2
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	f003 030f 	and.w	r3, r3, #15
 8007ef6:	b2da      	uxtb	r2, r3
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	f003 0303 	and.w	r3, r3, #3
 8007f04:	b2da      	uxtb	r2, r3
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f0e:	0c1b      	lsrs	r3, r3, #16
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	b2da      	uxtb	r2, r3
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f20:	0a1b      	lsrs	r3, r3, #8
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	b2da      	uxtb	r2, r3
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	b2da      	uxtb	r2, r3
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f42:	0e1b      	lsrs	r3, r3, #24
 8007f44:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	011b      	lsls	r3, r3, #4
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f56:	0c1b      	lsrs	r3, r3, #16
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	88db      	ldrh	r3, [r3, #6]
 8007f60:	b29a      	uxth	r2, r3
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	091b      	lsrs	r3, r3, #4
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	f003 030f 	and.w	r3, r3, #15
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	f003 030f 	and.w	r3, r3, #15
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f88:	0a1b      	lsrs	r3, r3, #8
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	09db      	lsrs	r3, r3, #7
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	f003 0301 	and.w	r3, r3, #1
 8007f98:	b2da      	uxtb	r2, r3
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	099b      	lsrs	r3, r3, #6
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	f003 0301 	and.w	r3, r3, #1
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	095b      	lsrs	r3, r3, #5
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	f003 0301 	and.w	r3, r3, #1
 8007fb8:	b2da      	uxtb	r2, r3
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	091b      	lsrs	r3, r3, #4
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	f003 0301 	and.w	r3, r3, #1
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f040 8086 	bne.w	80080ea <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	029b      	lsls	r3, r3, #10
 8007fe2:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	691a      	ldr	r2, [r3, #16]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	431a      	orrs	r2, r3
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008004:	0e1b      	lsrs	r3, r3, #24
 8008006:	b2db      	uxtb	r3, r3
 8008008:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	691a      	ldr	r2, [r3, #16]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	099b      	lsrs	r3, r3, #6
 8008012:	f003 0303 	and.w	r3, r3, #3
 8008016:	431a      	orrs	r2, r3
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	08db      	lsrs	r3, r3, #3
 8008020:	b2db      	uxtb	r3, r3
 8008022:	f003 0307 	and.w	r3, r3, #7
 8008026:	b2da      	uxtb	r2, r3
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	b2db      	uxtb	r3, r3
 8008030:	f003 0307 	and.w	r3, r3, #7
 8008034:	b2da      	uxtb	r2, r3
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800803e:	0c1b      	lsrs	r3, r3, #16
 8008040:	b2db      	uxtb	r3, r3
 8008042:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	095b      	lsrs	r3, r3, #5
 8008048:	b2db      	uxtb	r3, r3
 800804a:	f003 0307 	and.w	r3, r3, #7
 800804e:	b2da      	uxtb	r2, r3
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	089b      	lsrs	r3, r3, #2
 8008058:	b2db      	uxtb	r3, r3
 800805a:	f003 0307 	and.w	r3, r3, #7
 800805e:	b2da      	uxtb	r2, r3
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	b2db      	uxtb	r3, r3
 8008068:	005b      	lsls	r3, r3, #1
 800806a:	b2db      	uxtb	r3, r3
 800806c:	f003 0306 	and.w	r3, r3, #6
 8008070:	b2da      	uxtb	r2, r3
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800807a:	0a1b      	lsrs	r3, r3, #8
 800807c:	b2db      	uxtb	r3, r3
 800807e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	7e1b      	ldrb	r3, [r3, #24]
 8008084:	b2da      	uxtb	r2, r3
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	09db      	lsrs	r3, r3, #7
 800808a:	b2db      	uxtb	r3, r3
 800808c:	f003 0301 	and.w	r3, r3, #1
 8008090:	b2db      	uxtb	r3, r3
 8008092:	4313      	orrs	r3, r2
 8008094:	b2da      	uxtb	r2, r3
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	1c5a      	adds	r2, r3, #1
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	7e1b      	ldrb	r3, [r3, #24]
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	3302      	adds	r3, #2
 80080ac:	2201      	movs	r2, #1
 80080ae:	409a      	lsls	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080b4:	fb02 f203 	mul.w	r2, r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	7a1b      	ldrb	r3, [r3, #8]
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	461a      	mov	r2, r3
 80080c4:	2301      	movs	r3, #1
 80080c6:	4093      	lsls	r3, r2
 80080c8:	461a      	mov	r2, r3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80080d6:	0a52      	lsrs	r2, r2, #9
 80080d8:	fb02 f203 	mul.w	r2, r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080e6:	661a      	str	r2, [r3, #96]	; 0x60
 80080e8:	e04d      	b.n	8008186 <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d138      	bne.n	8008164 <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	041b      	lsls	r3, r3, #16
 80080fe:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800810a:	0e1b      	lsrs	r3, r3, #24
 800810c:	b2db      	uxtb	r3, r3
 800810e:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	691a      	ldr	r2, [r3, #16]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	021b      	lsls	r3, r3, #8
 8008118:	431a      	orrs	r2, r3
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008122:	0c1b      	lsrs	r3, r3, #16
 8008124:	b2db      	uxtb	r3, r3
 8008126:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	691a      	ldr	r2, [r3, #16]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	431a      	orrs	r2, r3
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008138:	0a1b      	lsrs	r3, r3, #8
 800813a:	b2db      	uxtb	r3, r3
 800813c:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	3301      	adds	r3, #1
 8008144:	029a      	lsls	r2, r3, #10
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	655a      	str	r2, [r3, #84]	; 0x54
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008158:	659a      	str	r2, [r3, #88]	; 0x58
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	661a      	str	r2, [r3, #96]	; 0x60
 8008162:	e010      	b.n	8008186 <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800816c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008172:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e0c1      	b.n	800830a <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	099b      	lsrs	r3, r3, #6
 800818a:	b2db      	uxtb	r3, r3
 800818c:	f003 0301 	and.w	r3, r3, #1
 8008190:	b2da      	uxtb	r2, r3
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	b2db      	uxtb	r3, r3
 800819a:	005b      	lsls	r3, r3, #1
 800819c:	b2db      	uxtb	r3, r3
 800819e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80081a2:	b2da      	uxtb	r2, r3
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	7e9b      	ldrb	r3, [r3, #26]
 80081b4:	b2da      	uxtb	r2, r3
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	09db      	lsrs	r3, r3, #7
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	f003 0301 	and.w	r3, r3, #1
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	4313      	orrs	r3, r2
 80081c4:	b2da      	uxtb	r2, r3
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081d2:	b2da      	uxtb	r2, r3
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081dc:	0e1b      	lsrs	r3, r3, #24
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	09db      	lsrs	r3, r3, #7
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	f003 0301 	and.w	r3, r3, #1
 80081ec:	b2da      	uxtb	r2, r3
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	095b      	lsrs	r3, r3, #5
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	f003 0303 	and.w	r3, r3, #3
 80081fc:	b2da      	uxtb	r2, r3
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	089b      	lsrs	r3, r3, #2
 8008206:	b2db      	uxtb	r3, r3
 8008208:	f003 0307 	and.w	r3, r3, #7
 800820c:	b2da      	uxtb	r2, r3
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	b2db      	uxtb	r3, r3
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	b2db      	uxtb	r3, r3
 800821a:	f003 030c 	and.w	r3, r3, #12
 800821e:	b2da      	uxtb	r2, r3
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008228:	0c1b      	lsrs	r3, r3, #16
 800822a:	b2db      	uxtb	r3, r3
 800822c:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	7fdb      	ldrb	r3, [r3, #31]
 8008232:	b2da      	uxtb	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	099b      	lsrs	r3, r3, #6
 8008238:	b2db      	uxtb	r3, r3
 800823a:	f003 0303 	and.w	r3, r3, #3
 800823e:	b2db      	uxtb	r3, r3
 8008240:	4313      	orrs	r3, r2
 8008242:	b2da      	uxtb	r2, r3
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	095b      	lsrs	r3, r3, #5
 800824c:	b2db      	uxtb	r3, r3
 800824e:	f003 0301 	and.w	r3, r3, #1
 8008252:	b2da      	uxtb	r2, r3
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	b2db      	uxtb	r3, r3
 8008266:	f003 0301 	and.w	r3, r3, #1
 800826a:	b2da      	uxtb	r2, r3
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008276:	0a1b      	lsrs	r3, r3, #8
 8008278:	b2db      	uxtb	r3, r3
 800827a:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	09db      	lsrs	r3, r3, #7
 8008280:	b2db      	uxtb	r3, r3
 8008282:	f003 0301 	and.w	r3, r3, #1
 8008286:	b2da      	uxtb	r2, r3
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	099b      	lsrs	r3, r3, #6
 8008292:	b2db      	uxtb	r3, r3
 8008294:	f003 0301 	and.w	r3, r3, #1
 8008298:	b2da      	uxtb	r2, r3
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	095b      	lsrs	r3, r3, #5
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	b2da      	uxtb	r2, r3
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	091b      	lsrs	r3, r3, #4
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	b2da      	uxtb	r2, r3
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	089b      	lsrs	r3, r3, #2
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	f003 0303 	and.w	r3, r3, #3
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	f003 0303 	and.w	r3, r3, #3
 80082de:	b2da      	uxtb	r2, r3
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	085b      	lsrs	r3, r3, #1
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082f8:	b2da      	uxtb	r2, r3
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3714      	adds	r7, #20
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr

08008316 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008316:	b5b0      	push	{r4, r5, r7, lr}
 8008318:	b08e      	sub	sp, #56	; 0x38
 800831a:	af04      	add	r7, sp, #16
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008320:	2300      	movs	r3, #0
 8008322:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2203      	movs	r2, #3
 8008328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008330:	2b03      	cmp	r3, #3
 8008332:	d02e      	beq.n	8008392 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800833a:	d106      	bne.n	800834a <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008340:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	639a      	str	r2, [r3, #56]	; 0x38
 8008348:	e029      	b.n	800839e <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008350:	d10a      	bne.n	8008368 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f9cc 	bl	80086f0 <SD_WideBus_Enable>
 8008358:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800835e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008360:	431a      	orrs	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	639a      	str	r2, [r3, #56]	; 0x38
 8008366:	e01a      	b.n	800839e <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10a      	bne.n	8008384 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fa0b 	bl	800878a <SD_WideBus_Disable>
 8008374:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800837a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837c:	431a      	orrs	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	639a      	str	r2, [r3, #56]	; 0x38
 8008382:	e00c      	b.n	800839e <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008388:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	639a      	str	r2, [r3, #56]	; 0x38
 8008390:	e005      	b.n	800839e <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008396:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00a      	beq.n	80083bc <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80083ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	e024      	b.n	8008406 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	68db      	ldr	r3, [r3, #12]
 80083cc:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	695b      	ldr	r3, [r3, #20]
 80083d6:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	699b      	ldr	r3, [r3, #24]
 80083dc:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681d      	ldr	r5, [r3, #0]
 80083e2:	466c      	mov	r4, sp
 80083e4:	f107 0318 	add.w	r3, r7, #24
 80083e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80083ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80083f0:	f107 030c 	add.w	r3, r7, #12
 80083f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083f6:	4628      	mov	r0, r5
 80083f8:	f001 fc9a 	bl	8009d30 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3728      	adds	r7, #40	; 0x28
 800840a:	46bd      	mov	sp, r7
 800840c:	bdb0      	pop	{r4, r5, r7, pc}

0800840e <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800840e:	b5b0      	push	{r4, r5, r7, lr}
 8008410:	b094      	sub	sp, #80	; 0x50
 8008412:	af04      	add	r7, sp, #16
 8008414:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008416:	2300      	movs	r3, #0
 8008418:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 800841a:	2301      	movs	r3, #1
 800841c:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4618      	mov	r0, r3
 8008424:	f001 fccb 	bl	8009dbe <SDMMC_GetPowerState>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d102      	bne.n	8008434 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800842e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008432:	e0b1      	b.n	8008598 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008438:	2b03      	cmp	r3, #3
 800843a:	d02f      	beq.n	800849c <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4618      	mov	r0, r3
 8008442:	f001 fe5e 	bl	800a102 <SDMMC_CmdSendCID>
 8008446:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800844a:	2b00      	cmp	r3, #0
 800844c:	d001      	beq.n	8008452 <SD_InitCard+0x44>
    {
      return errorstate;
 800844e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008450:	e0a2      	b.n	8008598 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2100      	movs	r1, #0
 8008458:	4618      	mov	r0, r3
 800845a:	f001 fcf6 	bl	8009e4a <SDMMC_GetResponse>
 800845e:	4602      	mov	r2, r0
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2104      	movs	r1, #4
 800846a:	4618      	mov	r0, r3
 800846c:	f001 fced 	bl	8009e4a <SDMMC_GetResponse>
 8008470:	4602      	mov	r2, r0
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2108      	movs	r1, #8
 800847c:	4618      	mov	r0, r3
 800847e:	f001 fce4 	bl	8009e4a <SDMMC_GetResponse>
 8008482:	4602      	mov	r2, r0
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	210c      	movs	r1, #12
 800848e:	4618      	mov	r0, r3
 8008490:	f001 fcdb 	bl	8009e4a <SDMMC_GetResponse>
 8008494:	4602      	mov	r2, r0
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084a0:	2b03      	cmp	r3, #3
 80084a2:	d00d      	beq.n	80084c0 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f107 020e 	add.w	r2, r7, #14
 80084ac:	4611      	mov	r1, r2
 80084ae:	4618      	mov	r0, r3
 80084b0:	f001 fe68 	bl	800a184 <SDMMC_CmdSetRelAdd>
 80084b4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80084b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d001      	beq.n	80084c0 <SD_InitCard+0xb2>
    {
      return errorstate;
 80084bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084be:	e06b      	b.n	8008598 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084c4:	2b03      	cmp	r3, #3
 80084c6:	d036      	beq.n	8008536 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80084c8:	89fb      	ldrh	r3, [r7, #14]
 80084ca:	461a      	mov	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084d8:	041b      	lsls	r3, r3, #16
 80084da:	4619      	mov	r1, r3
 80084dc:	4610      	mov	r0, r2
 80084de:	f001 fe30 	bl	800a142 <SDMMC_CmdSendCSD>
 80084e2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80084e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d001      	beq.n	80084ee <SD_InitCard+0xe0>
    {
      return errorstate;
 80084ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ec:	e054      	b.n	8008598 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2100      	movs	r1, #0
 80084f4:	4618      	mov	r0, r3
 80084f6:	f001 fca8 	bl	8009e4a <SDMMC_GetResponse>
 80084fa:	4602      	mov	r2, r0
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2104      	movs	r1, #4
 8008506:	4618      	mov	r0, r3
 8008508:	f001 fc9f 	bl	8009e4a <SDMMC_GetResponse>
 800850c:	4602      	mov	r2, r0
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2108      	movs	r1, #8
 8008518:	4618      	mov	r0, r3
 800851a:	f001 fc96 	bl	8009e4a <SDMMC_GetResponse>
 800851e:	4602      	mov	r2, r0
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	210c      	movs	r1, #12
 800852a:	4618      	mov	r0, r3
 800852c:	f001 fc8d 	bl	8009e4a <SDMMC_GetResponse>
 8008530:	4602      	mov	r2, r0
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2104      	movs	r1, #4
 800853c:	4618      	mov	r0, r3
 800853e:	f001 fc84 	bl	8009e4a <SDMMC_GetResponse>
 8008542:	4603      	mov	r3, r0
 8008544:	0d1a      	lsrs	r2, r3, #20
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 800854a:	f107 0310 	add.w	r3, r7, #16
 800854e:	4619      	mov	r1, r3
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f7ff fcb8 	bl	8007ec6 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6819      	ldr	r1, [r3, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800855e:	041b      	lsls	r3, r3, #16
 8008560:	f04f 0400 	mov.w	r4, #0
 8008564:	461a      	mov	r2, r3
 8008566:	4623      	mov	r3, r4
 8008568:	4608      	mov	r0, r1
 800856a:	f001 fcd3 	bl	8009f14 <SDMMC_CmdSelDesel>
 800856e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008572:	2b00      	cmp	r3, #0
 8008574:	d001      	beq.n	800857a <SD_InitCard+0x16c>
  {
    return errorstate;
 8008576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008578:	e00e      	b.n	8008598 <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681d      	ldr	r5, [r3, #0]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	466c      	mov	r4, sp
 8008582:	f103 0210 	add.w	r2, r3, #16
 8008586:	ca07      	ldmia	r2, {r0, r1, r2}
 8008588:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800858c:	3304      	adds	r3, #4
 800858e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008590:	4628      	mov	r0, r5
 8008592:	f001 fbcd 	bl	8009d30 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	3740      	adds	r7, #64	; 0x40
 800859c:	46bd      	mov	sp, r7
 800859e:	bdb0      	pop	{r4, r5, r7, pc}

080085a0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80085a8:	2300      	movs	r3, #0
 80085aa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 80085ac:	2300      	movs	r3, #0
 80085ae:	617b      	str	r3, [r7, #20]
 80085b0:	2300      	movs	r3, #0
 80085b2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80085b4:	2300      	movs	r3, #0
 80085b6:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4618      	mov	r0, r3
 80085be:	f001 fcce 	bl	8009f5e <SDMMC_CmdGoIdleState>
 80085c2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <SD_PowerON+0x2e>
  {
    return errorstate;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	e08c      	b.n	80086e8 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4618      	mov	r0, r3
 80085d4:	f001 fce3 	bl	8009f9e <SDMMC_CmdOperCond>
 80085d8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d03d      	beq.n	800865c <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 80085e6:	e032      	b.n	800864e <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	1c5a      	adds	r2, r3, #1
 80085ec:	60ba      	str	r2, [r7, #8]
 80085ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d102      	bne.n	80085fc <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80085f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80085fa:	e075      	b.n	80086e8 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2100      	movs	r1, #0
 8008602:	4618      	mov	r0, r3
 8008604:	f001 fcec 	bl	8009fe0 <SDMMC_CmdAppCommand>
 8008608:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d002      	beq.n	8008616 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008610:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008614:	e068      	b.n	80086e8 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2100      	movs	r1, #0
 800861c:	4618      	mov	r0, r3
 800861e:	f001 fd03 	bl	800a028 <SDMMC_CmdAppOperCommand>
 8008622:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d002      	beq.n	8008630 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800862a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800862e:	e05b      	b.n	80086e8 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2100      	movs	r1, #0
 8008636:	4618      	mov	r0, r3
 8008638:	f001 fc07 	bl	8009e4a <SDMMC_GetResponse>
 800863c:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	0fdb      	lsrs	r3, r3, #31
 8008642:	2b01      	cmp	r3, #1
 8008644:	bf0c      	ite	eq
 8008646:	2301      	moveq	r3, #1
 8008648:	2300      	movne	r3, #0
 800864a:	b2db      	uxtb	r3, r3
 800864c:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d0c9      	beq.n	80085e8 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	645a      	str	r2, [r3, #68]	; 0x44
 800865a:	e044      	b.n	80086e6 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8008662:	e031      	b.n	80086c8 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	1c5a      	adds	r2, r3, #1
 8008668:	60ba      	str	r2, [r7, #8]
 800866a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800866e:	4293      	cmp	r3, r2
 8008670:	d102      	bne.n	8008678 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008672:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008676:	e037      	b.n	80086e8 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2100      	movs	r1, #0
 800867e:	4618      	mov	r0, r3
 8008680:	f001 fcae 	bl	8009fe0 <SDMMC_CmdAppCommand>
 8008684:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d001      	beq.n	8008690 <SD_PowerON+0xf0>
      {
        return errorstate;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	e02b      	b.n	80086e8 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008698:	4618      	mov	r0, r3
 800869a:	f001 fcc5 	bl	800a028 <SDMMC_CmdAppOperCommand>
 800869e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d001      	beq.n	80086aa <SD_PowerON+0x10a>
      {
        return errorstate;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	e01e      	b.n	80086e8 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2100      	movs	r1, #0
 80086b0:	4618      	mov	r0, r3
 80086b2:	f001 fbca 	bl	8009e4a <SDMMC_GetResponse>
 80086b6:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	0fdb      	lsrs	r3, r3, #31
 80086bc:	2b01      	cmp	r3, #1
 80086be:	bf0c      	ite	eq
 80086c0:	2301      	moveq	r3, #1
 80086c2:	2300      	movne	r3, #0
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d0ca      	beq.n	8008664 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d003      	beq.n	80086e0 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	645a      	str	r2, [r3, #68]	; 0x44
 80086de:	e002      	b.n	80086e6 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3718      	adds	r7, #24
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b086      	sub	sp, #24
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 80086f8:	2300      	movs	r3, #0
 80086fa:	60fb      	str	r3, [r7, #12]
 80086fc:	2300      	movs	r3, #0
 80086fe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008700:	2300      	movs	r3, #0
 8008702:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2100      	movs	r1, #0
 800870a:	4618      	mov	r0, r3
 800870c:	f001 fb9d 	bl	8009e4a <SDMMC_GetResponse>
 8008710:	4603      	mov	r3, r0
 8008712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008716:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800871a:	d102      	bne.n	8008722 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800871c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008720:	e02f      	b.n	8008782 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008722:	f107 030c 	add.w	r3, r7, #12
 8008726:	4619      	mov	r1, r3
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 f87b 	bl	8008824 <SD_FindSCR>
 800872e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d001      	beq.n	800873a <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	e023      	b.n	8008782 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008740:	2b00      	cmp	r3, #0
 8008742:	d01c      	beq.n	800877e <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800874c:	041b      	lsls	r3, r3, #16
 800874e:	4619      	mov	r1, r3
 8008750:	4610      	mov	r0, r2
 8008752:	f001 fc45 	bl	8009fe0 <SDMMC_CmdAppCommand>
 8008756:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d001      	beq.n	8008762 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	e00f      	b.n	8008782 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2102      	movs	r1, #2
 8008768:	4618      	mov	r0, r3
 800876a:	f001 fc83 	bl	800a074 <SDMMC_CmdBusWidth>
 800876e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	e003      	b.n	8008782 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 800877a:	2300      	movs	r3, #0
 800877c:	e001      	b.n	8008782 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800877e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008782:	4618      	mov	r0, r3
 8008784:	3718      	adds	r7, #24
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b086      	sub	sp, #24
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8008792:	2300      	movs	r3, #0
 8008794:	60fb      	str	r3, [r7, #12]
 8008796:	2300      	movs	r3, #0
 8008798:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800879a:	2300      	movs	r3, #0
 800879c:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2100      	movs	r1, #0
 80087a4:	4618      	mov	r0, r3
 80087a6:	f001 fb50 	bl	8009e4a <SDMMC_GetResponse>
 80087aa:	4603      	mov	r3, r0
 80087ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087b4:	d102      	bne.n	80087bc <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80087b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087ba:	e02f      	b.n	800881c <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80087bc:	f107 030c 	add.w	r3, r7, #12
 80087c0:	4619      	mov	r1, r3
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f82e 	bl	8008824 <SD_FindSCR>
 80087c8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d001      	beq.n	80087d4 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	e023      	b.n	800881c <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d01c      	beq.n	8008818 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087e6:	041b      	lsls	r3, r3, #16
 80087e8:	4619      	mov	r1, r3
 80087ea:	4610      	mov	r0, r2
 80087ec:	f001 fbf8 	bl	8009fe0 <SDMMC_CmdAppCommand>
 80087f0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d001      	beq.n	80087fc <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	e00f      	b.n	800881c <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2100      	movs	r1, #0
 8008802:	4618      	mov	r0, r3
 8008804:	f001 fc36 	bl	800a074 <SDMMC_CmdBusWidth>
 8008808:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d001      	beq.n	8008814 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	e003      	b.n	800881c <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8008814:	2300      	movs	r3, #0
 8008816:	e001      	b.n	800881c <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008818:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800881c:	4618      	mov	r0, r3
 800881e:	3718      	adds	r7, #24
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008824:	b590      	push	{r4, r7, lr}
 8008826:	b08f      	sub	sp, #60	; 0x3c
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800882e:	2300      	movs	r3, #0
 8008830:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8008832:	f7fa fc05 	bl	8003040 <HAL_GetTick>
 8008836:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 8008838:	2300      	movs	r3, #0
 800883a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 800883c:	2300      	movs	r3, #0
 800883e:	60fb      	str	r3, [r7, #12]
 8008840:	2300      	movs	r3, #0
 8008842:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2108      	movs	r1, #8
 800884a:	4618      	mov	r0, r3
 800884c:	f001 fb3e 	bl	8009ecc <SDMMC_CmdBlockLength>
 8008850:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008854:	2b00      	cmp	r3, #0
 8008856:	d001      	beq.n	800885c <SD_FindSCR+0x38>
  {
    return errorstate;
 8008858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885a:	e0a8      	b.n	80089ae <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008864:	041b      	lsls	r3, r3, #16
 8008866:	4619      	mov	r1, r3
 8008868:	4610      	mov	r0, r2
 800886a:	f001 fbb9 	bl	8009fe0 <SDMMC_CmdAppCommand>
 800886e:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008872:	2b00      	cmp	r3, #0
 8008874:	d001      	beq.n	800887a <SD_FindSCR+0x56>
  {
    return errorstate;
 8008876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008878:	e099      	b.n	80089ae <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800887a:	f04f 33ff 	mov.w	r3, #4294967295
 800887e:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 8008880:	2308      	movs	r3, #8
 8008882:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008884:	2330      	movs	r3, #48	; 0x30
 8008886:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008888:	2302      	movs	r3, #2
 800888a:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800888c:	2300      	movs	r3, #0
 800888e:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008890:	2301      	movs	r3, #1
 8008892:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f107 0214 	add.w	r2, r7, #20
 800889c:	4611      	mov	r1, r2
 800889e:	4618      	mov	r0, r3
 80088a0:	f001 fae8 	bl	8009e74 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4618      	mov	r0, r3
 80088aa:	f001 fc07 	bl	800a0bc <SDMMC_CmdSendSCR>
 80088ae:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80088b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d022      	beq.n	80088fc <SD_FindSCR+0xd8>
  {
    return errorstate;
 80088b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b8:	e079      	b.n	80089ae <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00e      	beq.n	80088e6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6819      	ldr	r1, [r3, #0]
 80088cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	f107 020c 	add.w	r2, r7, #12
 80088d4:	18d4      	adds	r4, r2, r3
 80088d6:	4608      	mov	r0, r1
 80088d8:	f001 fa56 	bl	8009d88 <SDMMC_ReadFIFO>
 80088dc:	4603      	mov	r3, r0
 80088de:	6023      	str	r3, [r4, #0]
      index++;
 80088e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e2:	3301      	adds	r3, #1
 80088e4:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80088e6:	f7fa fbab 	bl	8003040 <HAL_GetTick>
 80088ea:	4602      	mov	r2, r0
 80088ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ee:	1ad3      	subs	r3, r2, r3
 80088f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f4:	d102      	bne.n	80088fc <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80088f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088fa:	e058      	b.n	80089ae <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008902:	f240 432a 	movw	r3, #1066	; 0x42a
 8008906:	4013      	ands	r3, r2
 8008908:	2b00      	cmp	r3, #0
 800890a:	d0d6      	beq.n	80088ba <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008912:	f003 0308 	and.w	r3, r3, #8
 8008916:	2b00      	cmp	r3, #0
 8008918:	d005      	beq.n	8008926 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2208      	movs	r2, #8
 8008920:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008922:	2308      	movs	r3, #8
 8008924:	e043      	b.n	80089ae <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800892c:	f003 0302 	and.w	r3, r3, #2
 8008930:	2b00      	cmp	r3, #0
 8008932:	d005      	beq.n	8008940 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2202      	movs	r2, #2
 800893a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800893c:	2302      	movs	r3, #2
 800893e:	e036      	b.n	80089ae <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008946:	f003 0320 	and.w	r3, r3, #32
 800894a:	2b00      	cmp	r3, #0
 800894c:	d005      	beq.n	800895a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2220      	movs	r2, #32
 8008954:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8008956:	2320      	movs	r3, #32
 8008958:	e029      	b.n	80089ae <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008962:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	061a      	lsls	r2, r3, #24
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	021b      	lsls	r3, r3, #8
 800896c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008970:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	0a1b      	lsrs	r3, r3, #8
 8008976:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800897a:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8008986:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008988:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	061a      	lsls	r2, r3, #24
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	021b      	lsls	r3, r3, #8
 8008992:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008996:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	0a1b      	lsrs	r3, r3, #8
 800899c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80089a0:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	0e1b      	lsrs	r3, r3, #24
 80089a6:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	373c      	adds	r7, #60	; 0x3c
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd90      	pop	{r4, r7, pc}

080089b6 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b082      	sub	sp, #8
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
 80089be:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d101      	bne.n	80089ca <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	e025      	b.n	8008a16 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d106      	bne.n	80089e4 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f004 f958 	bl	800cc94 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2202      	movs	r2, #2
 80089e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	3304      	adds	r3, #4
 80089f4:	4619      	mov	r1, r3
 80089f6:	4610      	mov	r0, r2
 80089f8:	f001 f874 	bl	8009ae4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6818      	ldr	r0, [r3, #0]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	461a      	mov	r2, r3
 8008a06:	6839      	ldr	r1, [r7, #0]
 8008a08:	f001 f8de 	bl	8009bc8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b084      	sub	sp, #16
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	60f8      	str	r0, [r7, #12]
 8008a26:	60b9      	str	r1, [r7, #8]
 8008a28:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d101      	bne.n	8008a3a <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008a36:	2302      	movs	r3, #2
 8008a38:	e018      	b.n	8008a6c <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2202      	movs	r2, #2
 8008a3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	68b9      	ldr	r1, [r7, #8]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f001 f93c 	bl	8009cc8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d104      	bne.n	8008a62 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2205      	movs	r2, #5
 8008a5c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008a60:	e003      	b.n	8008a6a <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2201      	movs	r2, #1
 8008a66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d101      	bne.n	8008a8e <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008a8a:	2302      	movs	r3, #2
 8008a8c:	e00e      	b.n	8008aac <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2202      	movs	r2, #2
 8008a92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	6839      	ldr	r1, [r7, #0]
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f001 f934 	bl	8009d0a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d101      	bne.n	8008ac6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e01d      	b.n	8008b02 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d106      	bne.n	8008ae0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f003 ff80 	bl	800c9e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2202      	movs	r2, #2
 8008ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	3304      	adds	r3, #4
 8008af0:	4619      	mov	r1, r3
 8008af2:	4610      	mov	r0, r2
 8008af4:	f000 fa36 	bl	8008f64 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3708      	adds	r7, #8
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
	...

08008b0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b085      	sub	sp, #20
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	68da      	ldr	r2, [r3, #12]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f042 0201 	orr.w	r2, r2, #1
 8008b22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	689a      	ldr	r2, [r3, #8]
 8008b2a:	4b0c      	ldr	r3, [pc, #48]	; (8008b5c <HAL_TIM_Base_Start_IT+0x50>)
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2b06      	cmp	r3, #6
 8008b34:	d00b      	beq.n	8008b4e <HAL_TIM_Base_Start_IT+0x42>
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b3c:	d007      	beq.n	8008b4e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f042 0201 	orr.w	r2, r2, #1
 8008b4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3714      	adds	r7, #20
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr
 8008b5c:	00010007 	.word	0x00010007

08008b60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	f003 0302 	and.w	r3, r3, #2
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	d122      	bne.n	8008bbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	f003 0302 	and.w	r3, r3, #2
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d11b      	bne.n	8008bbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f06f 0202 	mvn.w	r2, #2
 8008b8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2201      	movs	r2, #1
 8008b92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	f003 0303 	and.w	r3, r3, #3
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d003      	beq.n	8008baa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 f9c0 	bl	8008f28 <HAL_TIM_IC_CaptureCallback>
 8008ba8:	e005      	b.n	8008bb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 f9b2 	bl	8008f14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 f9c3 	bl	8008f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	f003 0304 	and.w	r3, r3, #4
 8008bc6:	2b04      	cmp	r3, #4
 8008bc8:	d122      	bne.n	8008c10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	f003 0304 	and.w	r3, r3, #4
 8008bd4:	2b04      	cmp	r3, #4
 8008bd6:	d11b      	bne.n	8008c10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f06f 0204 	mvn.w	r2, #4
 8008be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2202      	movs	r2, #2
 8008be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	699b      	ldr	r3, [r3, #24]
 8008bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d003      	beq.n	8008bfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f996 	bl	8008f28 <HAL_TIM_IC_CaptureCallback>
 8008bfc:	e005      	b.n	8008c0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f988 	bl	8008f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 f999 	bl	8008f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	f003 0308 	and.w	r3, r3, #8
 8008c1a:	2b08      	cmp	r3, #8
 8008c1c:	d122      	bne.n	8008c64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	f003 0308 	and.w	r3, r3, #8
 8008c28:	2b08      	cmp	r3, #8
 8008c2a:	d11b      	bne.n	8008c64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f06f 0208 	mvn.w	r2, #8
 8008c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2204      	movs	r2, #4
 8008c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	69db      	ldr	r3, [r3, #28]
 8008c42:	f003 0303 	and.w	r3, r3, #3
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d003      	beq.n	8008c52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f96c 	bl	8008f28 <HAL_TIM_IC_CaptureCallback>
 8008c50:	e005      	b.n	8008c5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f95e 	bl	8008f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 f96f 	bl	8008f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	f003 0310 	and.w	r3, r3, #16
 8008c6e:	2b10      	cmp	r3, #16
 8008c70:	d122      	bne.n	8008cb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	f003 0310 	and.w	r3, r3, #16
 8008c7c:	2b10      	cmp	r3, #16
 8008c7e:	d11b      	bne.n	8008cb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f06f 0210 	mvn.w	r2, #16
 8008c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2208      	movs	r2, #8
 8008c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	69db      	ldr	r3, [r3, #28]
 8008c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d003      	beq.n	8008ca6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 f942 	bl	8008f28 <HAL_TIM_IC_CaptureCallback>
 8008ca4:	e005      	b.n	8008cb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f934 	bl	8008f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 f945 	bl	8008f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	f003 0301 	and.w	r3, r3, #1
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d10e      	bne.n	8008ce4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	f003 0301 	and.w	r3, r3, #1
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d107      	bne.n	8008ce4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f06f 0201 	mvn.w	r2, #1
 8008cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f001 ffe6 	bl	800acb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cee:	2b80      	cmp	r3, #128	; 0x80
 8008cf0:	d10e      	bne.n	8008d10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cfc:	2b80      	cmp	r3, #128	; 0x80
 8008cfe:	d107      	bne.n	8008d10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 faca 	bl	80092a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d1e:	d10e      	bne.n	8008d3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d2a:	2b80      	cmp	r3, #128	; 0x80
 8008d2c:	d107      	bne.n	8008d3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 fabd 	bl	80092b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d48:	2b40      	cmp	r3, #64	; 0x40
 8008d4a:	d10e      	bne.n	8008d6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d56:	2b40      	cmp	r3, #64	; 0x40
 8008d58:	d107      	bne.n	8008d6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 f8f3 	bl	8008f50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	691b      	ldr	r3, [r3, #16]
 8008d70:	f003 0320 	and.w	r3, r3, #32
 8008d74:	2b20      	cmp	r3, #32
 8008d76:	d10e      	bne.n	8008d96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	f003 0320 	and.w	r3, r3, #32
 8008d82:	2b20      	cmp	r3, #32
 8008d84:	d107      	bne.n	8008d96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f06f 0220 	mvn.w	r2, #32
 8008d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 fa7d 	bl	8009290 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d96:	bf00      	nop
 8008d98:	3708      	adds	r7, #8
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
	...

08008da0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d101      	bne.n	8008db8 <HAL_TIM_ConfigClockSource+0x18>
 8008db4:	2302      	movs	r3, #2
 8008db6:	e0a6      	b.n	8008f06 <HAL_TIM_ConfigClockSource+0x166>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008dd0:	68fa      	ldr	r2, [r7, #12]
 8008dd2:	4b4f      	ldr	r3, [pc, #316]	; (8008f10 <HAL_TIM_ConfigClockSource+0x170>)
 8008dd4:	4013      	ands	r3, r2
 8008dd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008dde:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68fa      	ldr	r2, [r7, #12]
 8008de6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2b40      	cmp	r3, #64	; 0x40
 8008dee:	d067      	beq.n	8008ec0 <HAL_TIM_ConfigClockSource+0x120>
 8008df0:	2b40      	cmp	r3, #64	; 0x40
 8008df2:	d80b      	bhi.n	8008e0c <HAL_TIM_ConfigClockSource+0x6c>
 8008df4:	2b10      	cmp	r3, #16
 8008df6:	d073      	beq.n	8008ee0 <HAL_TIM_ConfigClockSource+0x140>
 8008df8:	2b10      	cmp	r3, #16
 8008dfa:	d802      	bhi.n	8008e02 <HAL_TIM_ConfigClockSource+0x62>
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d06f      	beq.n	8008ee0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008e00:	e078      	b.n	8008ef4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008e02:	2b20      	cmp	r3, #32
 8008e04:	d06c      	beq.n	8008ee0 <HAL_TIM_ConfigClockSource+0x140>
 8008e06:	2b30      	cmp	r3, #48	; 0x30
 8008e08:	d06a      	beq.n	8008ee0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008e0a:	e073      	b.n	8008ef4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008e0c:	2b70      	cmp	r3, #112	; 0x70
 8008e0e:	d00d      	beq.n	8008e2c <HAL_TIM_ConfigClockSource+0x8c>
 8008e10:	2b70      	cmp	r3, #112	; 0x70
 8008e12:	d804      	bhi.n	8008e1e <HAL_TIM_ConfigClockSource+0x7e>
 8008e14:	2b50      	cmp	r3, #80	; 0x50
 8008e16:	d033      	beq.n	8008e80 <HAL_TIM_ConfigClockSource+0xe0>
 8008e18:	2b60      	cmp	r3, #96	; 0x60
 8008e1a:	d041      	beq.n	8008ea0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008e1c:	e06a      	b.n	8008ef4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e22:	d066      	beq.n	8008ef2 <HAL_TIM_ConfigClockSource+0x152>
 8008e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e28:	d017      	beq.n	8008e5a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008e2a:	e063      	b.n	8008ef4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6818      	ldr	r0, [r3, #0]
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	6899      	ldr	r1, [r3, #8]
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	685a      	ldr	r2, [r3, #4]
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	f000 f9ac 	bl	8009198 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008e4e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	609a      	str	r2, [r3, #8]
      break;
 8008e58:	e04c      	b.n	8008ef4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6818      	ldr	r0, [r3, #0]
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	6899      	ldr	r1, [r3, #8]
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	68db      	ldr	r3, [r3, #12]
 8008e6a:	f000 f995 	bl	8009198 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	689a      	ldr	r2, [r3, #8]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e7c:	609a      	str	r2, [r3, #8]
      break;
 8008e7e:	e039      	b.n	8008ef4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6818      	ldr	r0, [r3, #0]
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	6859      	ldr	r1, [r3, #4]
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	f000 f909 	bl	80090a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2150      	movs	r1, #80	; 0x50
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f000 f962 	bl	8009162 <TIM_ITRx_SetConfig>
      break;
 8008e9e:	e029      	b.n	8008ef4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6818      	ldr	r0, [r3, #0]
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	6859      	ldr	r1, [r3, #4]
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	461a      	mov	r2, r3
 8008eae:	f000 f928 	bl	8009102 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2160      	movs	r1, #96	; 0x60
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f000 f952 	bl	8009162 <TIM_ITRx_SetConfig>
      break;
 8008ebe:	e019      	b.n	8008ef4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6818      	ldr	r0, [r3, #0]
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	6859      	ldr	r1, [r3, #4]
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	461a      	mov	r2, r3
 8008ece:	f000 f8e9 	bl	80090a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2140      	movs	r1, #64	; 0x40
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f000 f942 	bl	8009162 <TIM_ITRx_SetConfig>
      break;
 8008ede:	e009      	b.n	8008ef4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4619      	mov	r1, r3
 8008eea:	4610      	mov	r0, r2
 8008eec:	f000 f939 	bl	8009162 <TIM_ITRx_SetConfig>
      break;
 8008ef0:	e000      	b.n	8008ef4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008ef2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	fffeff88 	.word	0xfffeff88

08008f14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f1c:	bf00      	nop
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f30:	bf00      	nop
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f44:	bf00      	nop
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f58:	bf00      	nop
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b085      	sub	sp, #20
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a40      	ldr	r2, [pc, #256]	; (8009078 <TIM_Base_SetConfig+0x114>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d013      	beq.n	8008fa4 <TIM_Base_SetConfig+0x40>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f82:	d00f      	beq.n	8008fa4 <TIM_Base_SetConfig+0x40>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4a3d      	ldr	r2, [pc, #244]	; (800907c <TIM_Base_SetConfig+0x118>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d00b      	beq.n	8008fa4 <TIM_Base_SetConfig+0x40>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4a3c      	ldr	r2, [pc, #240]	; (8009080 <TIM_Base_SetConfig+0x11c>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d007      	beq.n	8008fa4 <TIM_Base_SetConfig+0x40>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4a3b      	ldr	r2, [pc, #236]	; (8009084 <TIM_Base_SetConfig+0x120>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d003      	beq.n	8008fa4 <TIM_Base_SetConfig+0x40>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4a3a      	ldr	r2, [pc, #232]	; (8009088 <TIM_Base_SetConfig+0x124>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d108      	bne.n	8008fb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008faa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a2f      	ldr	r2, [pc, #188]	; (8009078 <TIM_Base_SetConfig+0x114>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d02b      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fc4:	d027      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4a2c      	ldr	r2, [pc, #176]	; (800907c <TIM_Base_SetConfig+0x118>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d023      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4a2b      	ldr	r2, [pc, #172]	; (8009080 <TIM_Base_SetConfig+0x11c>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d01f      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4a2a      	ldr	r2, [pc, #168]	; (8009084 <TIM_Base_SetConfig+0x120>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d01b      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4a29      	ldr	r2, [pc, #164]	; (8009088 <TIM_Base_SetConfig+0x124>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d017      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	4a28      	ldr	r2, [pc, #160]	; (800908c <TIM_Base_SetConfig+0x128>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d013      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4a27      	ldr	r2, [pc, #156]	; (8009090 <TIM_Base_SetConfig+0x12c>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d00f      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	4a26      	ldr	r2, [pc, #152]	; (8009094 <TIM_Base_SetConfig+0x130>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d00b      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4a25      	ldr	r2, [pc, #148]	; (8009098 <TIM_Base_SetConfig+0x134>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d007      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	4a24      	ldr	r2, [pc, #144]	; (800909c <TIM_Base_SetConfig+0x138>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d003      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	4a23      	ldr	r2, [pc, #140]	; (80090a0 <TIM_Base_SetConfig+0x13c>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d108      	bne.n	8009028 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800901c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	68fa      	ldr	r2, [r7, #12]
 8009024:	4313      	orrs	r3, r2
 8009026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	695b      	ldr	r3, [r3, #20]
 8009032:	4313      	orrs	r3, r2
 8009034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	689a      	ldr	r2, [r3, #8]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a0a      	ldr	r2, [pc, #40]	; (8009078 <TIM_Base_SetConfig+0x114>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d003      	beq.n	800905c <TIM_Base_SetConfig+0xf8>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4a0c      	ldr	r2, [pc, #48]	; (8009088 <TIM_Base_SetConfig+0x124>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d103      	bne.n	8009064 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	691a      	ldr	r2, [r3, #16]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	615a      	str	r2, [r3, #20]
}
 800906a:	bf00      	nop
 800906c:	3714      	adds	r7, #20
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop
 8009078:	40010000 	.word	0x40010000
 800907c:	40000400 	.word	0x40000400
 8009080:	40000800 	.word	0x40000800
 8009084:	40000c00 	.word	0x40000c00
 8009088:	40010400 	.word	0x40010400
 800908c:	40014000 	.word	0x40014000
 8009090:	40014400 	.word	0x40014400
 8009094:	40014800 	.word	0x40014800
 8009098:	40001800 	.word	0x40001800
 800909c:	40001c00 	.word	0x40001c00
 80090a0:	40002000 	.word	0x40002000

080090a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b087      	sub	sp, #28
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6a1b      	ldr	r3, [r3, #32]
 80090b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	f023 0201 	bic.w	r2, r3, #1
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	699b      	ldr	r3, [r3, #24]
 80090c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80090ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	011b      	lsls	r3, r3, #4
 80090d4:	693a      	ldr	r2, [r7, #16]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	f023 030a 	bic.w	r3, r3, #10
 80090e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80090e2:	697a      	ldr	r2, [r7, #20]
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	693a      	ldr	r2, [r7, #16]
 80090ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	697a      	ldr	r2, [r7, #20]
 80090f4:	621a      	str	r2, [r3, #32]
}
 80090f6:	bf00      	nop
 80090f8:	371c      	adds	r7, #28
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr

08009102 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009102:	b480      	push	{r7}
 8009104:	b087      	sub	sp, #28
 8009106:	af00      	add	r7, sp, #0
 8009108:	60f8      	str	r0, [r7, #12]
 800910a:	60b9      	str	r1, [r7, #8]
 800910c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	6a1b      	ldr	r3, [r3, #32]
 8009112:	f023 0210 	bic.w	r2, r3, #16
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	699b      	ldr	r3, [r3, #24]
 800911e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6a1b      	ldr	r3, [r3, #32]
 8009124:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800912c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	031b      	lsls	r3, r3, #12
 8009132:	697a      	ldr	r2, [r7, #20]
 8009134:	4313      	orrs	r3, r2
 8009136:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800913e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	011b      	lsls	r3, r3, #4
 8009144:	693a      	ldr	r2, [r7, #16]
 8009146:	4313      	orrs	r3, r2
 8009148:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	697a      	ldr	r2, [r7, #20]
 800914e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	693a      	ldr	r2, [r7, #16]
 8009154:	621a      	str	r2, [r3, #32]
}
 8009156:	bf00      	nop
 8009158:	371c      	adds	r7, #28
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr

08009162 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009162:	b480      	push	{r7}
 8009164:	b085      	sub	sp, #20
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
 800916a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009178:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	4313      	orrs	r3, r2
 8009180:	f043 0307 	orr.w	r3, r3, #7
 8009184:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	68fa      	ldr	r2, [r7, #12]
 800918a:	609a      	str	r2, [r3, #8]
}
 800918c:	bf00      	nop
 800918e:	3714      	adds	r7, #20
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009198:	b480      	push	{r7}
 800919a:	b087      	sub	sp, #28
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	607a      	str	r2, [r7, #4]
 80091a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	021a      	lsls	r2, r3, #8
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	431a      	orrs	r2, r3
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	4313      	orrs	r3, r2
 80091c0:	697a      	ldr	r2, [r7, #20]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	697a      	ldr	r2, [r7, #20]
 80091ca:	609a      	str	r2, [r3, #8]
}
 80091cc:	bf00      	nop
 80091ce:	371c      	adds	r7, #28
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091d8:	b480      	push	{r7}
 80091da:	b085      	sub	sp, #20
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d101      	bne.n	80091f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091ec:	2302      	movs	r3, #2
 80091ee:	e045      	b.n	800927c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2202      	movs	r2, #2
 80091fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a1c      	ldr	r2, [pc, #112]	; (8009288 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d004      	beq.n	8009224 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a1b      	ldr	r2, [pc, #108]	; (800928c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d108      	bne.n	8009236 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800922a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	4313      	orrs	r3, r2
 8009234:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800923c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	4313      	orrs	r3, r2
 8009246:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800924e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	68ba      	ldr	r2, [r7, #8]
 8009256:	4313      	orrs	r3, r2
 8009258:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68ba      	ldr	r2, [r7, #8]
 8009268:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2201      	movs	r2, #1
 800926e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3714      	adds	r7, #20
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr
 8009288:	40010000 	.word	0x40010000
 800928c:	40010400 	.word	0x40010400

08009290 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009298:	bf00      	nop
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80092ac:	bf00      	nop
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80092c0:	bf00      	nop
 80092c2:	370c      	adds	r7, #12
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d101      	bne.n	80092de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	e040      	b.n	8009360 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d106      	bne.n	80092f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f003 fbde 	bl	800cab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2224      	movs	r2, #36	; 0x24
 80092f8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f022 0201 	bic.w	r2, r2, #1
 8009308:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 f82c 	bl	8009368 <UART_SetConfig>
 8009310:	4603      	mov	r3, r0
 8009312:	2b01      	cmp	r3, #1
 8009314:	d101      	bne.n	800931a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	e022      	b.n	8009360 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931e:	2b00      	cmp	r3, #0
 8009320:	d002      	beq.n	8009328 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 fac4 	bl	80098b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	685a      	ldr	r2, [r3, #4]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009336:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	689a      	ldr	r2, [r3, #8]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009346:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f042 0201 	orr.w	r2, r2, #1
 8009356:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fb4b 	bl	80099f4 <UART_CheckIdleState>
 800935e:	4603      	mov	r3, r0
}
 8009360:	4618      	mov	r0, r3
 8009362:	3708      	adds	r7, #8
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b088      	sub	sp, #32
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009370:	2300      	movs	r3, #0
 8009372:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009374:	2300      	movs	r3, #0
 8009376:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	689a      	ldr	r2, [r3, #8]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	691b      	ldr	r3, [r3, #16]
 8009380:	431a      	orrs	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	695b      	ldr	r3, [r3, #20]
 8009386:	431a      	orrs	r2, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	69db      	ldr	r3, [r3, #28]
 800938c:	4313      	orrs	r3, r2
 800938e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	4bb1      	ldr	r3, [pc, #708]	; (800965c <UART_SetConfig+0x2f4>)
 8009398:	4013      	ands	r3, r2
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	6812      	ldr	r2, [r2, #0]
 800939e:	6939      	ldr	r1, [r7, #16]
 80093a0:	430b      	orrs	r3, r1
 80093a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	68da      	ldr	r2, [r3, #12]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	430a      	orrs	r2, r1
 80093b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	699b      	ldr	r3, [r3, #24]
 80093be:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6a1b      	ldr	r3, [r3, #32]
 80093c4:	693a      	ldr	r2, [r7, #16]
 80093c6:	4313      	orrs	r3, r2
 80093c8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	693a      	ldr	r2, [r7, #16]
 80093da:	430a      	orrs	r2, r1
 80093dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a9f      	ldr	r2, [pc, #636]	; (8009660 <UART_SetConfig+0x2f8>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d121      	bne.n	800942c <UART_SetConfig+0xc4>
 80093e8:	4b9e      	ldr	r3, [pc, #632]	; (8009664 <UART_SetConfig+0x2fc>)
 80093ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093ee:	f003 0303 	and.w	r3, r3, #3
 80093f2:	2b03      	cmp	r3, #3
 80093f4:	d816      	bhi.n	8009424 <UART_SetConfig+0xbc>
 80093f6:	a201      	add	r2, pc, #4	; (adr r2, 80093fc <UART_SetConfig+0x94>)
 80093f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fc:	0800940d 	.word	0x0800940d
 8009400:	08009419 	.word	0x08009419
 8009404:	08009413 	.word	0x08009413
 8009408:	0800941f 	.word	0x0800941f
 800940c:	2301      	movs	r3, #1
 800940e:	77fb      	strb	r3, [r7, #31]
 8009410:	e151      	b.n	80096b6 <UART_SetConfig+0x34e>
 8009412:	2302      	movs	r3, #2
 8009414:	77fb      	strb	r3, [r7, #31]
 8009416:	e14e      	b.n	80096b6 <UART_SetConfig+0x34e>
 8009418:	2304      	movs	r3, #4
 800941a:	77fb      	strb	r3, [r7, #31]
 800941c:	e14b      	b.n	80096b6 <UART_SetConfig+0x34e>
 800941e:	2308      	movs	r3, #8
 8009420:	77fb      	strb	r3, [r7, #31]
 8009422:	e148      	b.n	80096b6 <UART_SetConfig+0x34e>
 8009424:	2310      	movs	r3, #16
 8009426:	77fb      	strb	r3, [r7, #31]
 8009428:	bf00      	nop
 800942a:	e144      	b.n	80096b6 <UART_SetConfig+0x34e>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a8d      	ldr	r2, [pc, #564]	; (8009668 <UART_SetConfig+0x300>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d134      	bne.n	80094a0 <UART_SetConfig+0x138>
 8009436:	4b8b      	ldr	r3, [pc, #556]	; (8009664 <UART_SetConfig+0x2fc>)
 8009438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800943c:	f003 030c 	and.w	r3, r3, #12
 8009440:	2b0c      	cmp	r3, #12
 8009442:	d829      	bhi.n	8009498 <UART_SetConfig+0x130>
 8009444:	a201      	add	r2, pc, #4	; (adr r2, 800944c <UART_SetConfig+0xe4>)
 8009446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944a:	bf00      	nop
 800944c:	08009481 	.word	0x08009481
 8009450:	08009499 	.word	0x08009499
 8009454:	08009499 	.word	0x08009499
 8009458:	08009499 	.word	0x08009499
 800945c:	0800948d 	.word	0x0800948d
 8009460:	08009499 	.word	0x08009499
 8009464:	08009499 	.word	0x08009499
 8009468:	08009499 	.word	0x08009499
 800946c:	08009487 	.word	0x08009487
 8009470:	08009499 	.word	0x08009499
 8009474:	08009499 	.word	0x08009499
 8009478:	08009499 	.word	0x08009499
 800947c:	08009493 	.word	0x08009493
 8009480:	2300      	movs	r3, #0
 8009482:	77fb      	strb	r3, [r7, #31]
 8009484:	e117      	b.n	80096b6 <UART_SetConfig+0x34e>
 8009486:	2302      	movs	r3, #2
 8009488:	77fb      	strb	r3, [r7, #31]
 800948a:	e114      	b.n	80096b6 <UART_SetConfig+0x34e>
 800948c:	2304      	movs	r3, #4
 800948e:	77fb      	strb	r3, [r7, #31]
 8009490:	e111      	b.n	80096b6 <UART_SetConfig+0x34e>
 8009492:	2308      	movs	r3, #8
 8009494:	77fb      	strb	r3, [r7, #31]
 8009496:	e10e      	b.n	80096b6 <UART_SetConfig+0x34e>
 8009498:	2310      	movs	r3, #16
 800949a:	77fb      	strb	r3, [r7, #31]
 800949c:	bf00      	nop
 800949e:	e10a      	b.n	80096b6 <UART_SetConfig+0x34e>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a71      	ldr	r2, [pc, #452]	; (800966c <UART_SetConfig+0x304>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d120      	bne.n	80094ec <UART_SetConfig+0x184>
 80094aa:	4b6e      	ldr	r3, [pc, #440]	; (8009664 <UART_SetConfig+0x2fc>)
 80094ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80094b4:	2b10      	cmp	r3, #16
 80094b6:	d00f      	beq.n	80094d8 <UART_SetConfig+0x170>
 80094b8:	2b10      	cmp	r3, #16
 80094ba:	d802      	bhi.n	80094c2 <UART_SetConfig+0x15a>
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d005      	beq.n	80094cc <UART_SetConfig+0x164>
 80094c0:	e010      	b.n	80094e4 <UART_SetConfig+0x17c>
 80094c2:	2b20      	cmp	r3, #32
 80094c4:	d005      	beq.n	80094d2 <UART_SetConfig+0x16a>
 80094c6:	2b30      	cmp	r3, #48	; 0x30
 80094c8:	d009      	beq.n	80094de <UART_SetConfig+0x176>
 80094ca:	e00b      	b.n	80094e4 <UART_SetConfig+0x17c>
 80094cc:	2300      	movs	r3, #0
 80094ce:	77fb      	strb	r3, [r7, #31]
 80094d0:	e0f1      	b.n	80096b6 <UART_SetConfig+0x34e>
 80094d2:	2302      	movs	r3, #2
 80094d4:	77fb      	strb	r3, [r7, #31]
 80094d6:	e0ee      	b.n	80096b6 <UART_SetConfig+0x34e>
 80094d8:	2304      	movs	r3, #4
 80094da:	77fb      	strb	r3, [r7, #31]
 80094dc:	e0eb      	b.n	80096b6 <UART_SetConfig+0x34e>
 80094de:	2308      	movs	r3, #8
 80094e0:	77fb      	strb	r3, [r7, #31]
 80094e2:	e0e8      	b.n	80096b6 <UART_SetConfig+0x34e>
 80094e4:	2310      	movs	r3, #16
 80094e6:	77fb      	strb	r3, [r7, #31]
 80094e8:	bf00      	nop
 80094ea:	e0e4      	b.n	80096b6 <UART_SetConfig+0x34e>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a5f      	ldr	r2, [pc, #380]	; (8009670 <UART_SetConfig+0x308>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d120      	bne.n	8009538 <UART_SetConfig+0x1d0>
 80094f6:	4b5b      	ldr	r3, [pc, #364]	; (8009664 <UART_SetConfig+0x2fc>)
 80094f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009500:	2b40      	cmp	r3, #64	; 0x40
 8009502:	d00f      	beq.n	8009524 <UART_SetConfig+0x1bc>
 8009504:	2b40      	cmp	r3, #64	; 0x40
 8009506:	d802      	bhi.n	800950e <UART_SetConfig+0x1a6>
 8009508:	2b00      	cmp	r3, #0
 800950a:	d005      	beq.n	8009518 <UART_SetConfig+0x1b0>
 800950c:	e010      	b.n	8009530 <UART_SetConfig+0x1c8>
 800950e:	2b80      	cmp	r3, #128	; 0x80
 8009510:	d005      	beq.n	800951e <UART_SetConfig+0x1b6>
 8009512:	2bc0      	cmp	r3, #192	; 0xc0
 8009514:	d009      	beq.n	800952a <UART_SetConfig+0x1c2>
 8009516:	e00b      	b.n	8009530 <UART_SetConfig+0x1c8>
 8009518:	2300      	movs	r3, #0
 800951a:	77fb      	strb	r3, [r7, #31]
 800951c:	e0cb      	b.n	80096b6 <UART_SetConfig+0x34e>
 800951e:	2302      	movs	r3, #2
 8009520:	77fb      	strb	r3, [r7, #31]
 8009522:	e0c8      	b.n	80096b6 <UART_SetConfig+0x34e>
 8009524:	2304      	movs	r3, #4
 8009526:	77fb      	strb	r3, [r7, #31]
 8009528:	e0c5      	b.n	80096b6 <UART_SetConfig+0x34e>
 800952a:	2308      	movs	r3, #8
 800952c:	77fb      	strb	r3, [r7, #31]
 800952e:	e0c2      	b.n	80096b6 <UART_SetConfig+0x34e>
 8009530:	2310      	movs	r3, #16
 8009532:	77fb      	strb	r3, [r7, #31]
 8009534:	bf00      	nop
 8009536:	e0be      	b.n	80096b6 <UART_SetConfig+0x34e>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a4d      	ldr	r2, [pc, #308]	; (8009674 <UART_SetConfig+0x30c>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d124      	bne.n	800958c <UART_SetConfig+0x224>
 8009542:	4b48      	ldr	r3, [pc, #288]	; (8009664 <UART_SetConfig+0x2fc>)
 8009544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009548:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800954c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009550:	d012      	beq.n	8009578 <UART_SetConfig+0x210>
 8009552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009556:	d802      	bhi.n	800955e <UART_SetConfig+0x1f6>
 8009558:	2b00      	cmp	r3, #0
 800955a:	d007      	beq.n	800956c <UART_SetConfig+0x204>
 800955c:	e012      	b.n	8009584 <UART_SetConfig+0x21c>
 800955e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009562:	d006      	beq.n	8009572 <UART_SetConfig+0x20a>
 8009564:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009568:	d009      	beq.n	800957e <UART_SetConfig+0x216>
 800956a:	e00b      	b.n	8009584 <UART_SetConfig+0x21c>
 800956c:	2300      	movs	r3, #0
 800956e:	77fb      	strb	r3, [r7, #31]
 8009570:	e0a1      	b.n	80096b6 <UART_SetConfig+0x34e>
 8009572:	2302      	movs	r3, #2
 8009574:	77fb      	strb	r3, [r7, #31]
 8009576:	e09e      	b.n	80096b6 <UART_SetConfig+0x34e>
 8009578:	2304      	movs	r3, #4
 800957a:	77fb      	strb	r3, [r7, #31]
 800957c:	e09b      	b.n	80096b6 <UART_SetConfig+0x34e>
 800957e:	2308      	movs	r3, #8
 8009580:	77fb      	strb	r3, [r7, #31]
 8009582:	e098      	b.n	80096b6 <UART_SetConfig+0x34e>
 8009584:	2310      	movs	r3, #16
 8009586:	77fb      	strb	r3, [r7, #31]
 8009588:	bf00      	nop
 800958a:	e094      	b.n	80096b6 <UART_SetConfig+0x34e>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a39      	ldr	r2, [pc, #228]	; (8009678 <UART_SetConfig+0x310>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d124      	bne.n	80095e0 <UART_SetConfig+0x278>
 8009596:	4b33      	ldr	r3, [pc, #204]	; (8009664 <UART_SetConfig+0x2fc>)
 8009598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800959c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80095a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095a4:	d012      	beq.n	80095cc <UART_SetConfig+0x264>
 80095a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095aa:	d802      	bhi.n	80095b2 <UART_SetConfig+0x24a>
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d007      	beq.n	80095c0 <UART_SetConfig+0x258>
 80095b0:	e012      	b.n	80095d8 <UART_SetConfig+0x270>
 80095b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095b6:	d006      	beq.n	80095c6 <UART_SetConfig+0x25e>
 80095b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80095bc:	d009      	beq.n	80095d2 <UART_SetConfig+0x26a>
 80095be:	e00b      	b.n	80095d8 <UART_SetConfig+0x270>
 80095c0:	2301      	movs	r3, #1
 80095c2:	77fb      	strb	r3, [r7, #31]
 80095c4:	e077      	b.n	80096b6 <UART_SetConfig+0x34e>
 80095c6:	2302      	movs	r3, #2
 80095c8:	77fb      	strb	r3, [r7, #31]
 80095ca:	e074      	b.n	80096b6 <UART_SetConfig+0x34e>
 80095cc:	2304      	movs	r3, #4
 80095ce:	77fb      	strb	r3, [r7, #31]
 80095d0:	e071      	b.n	80096b6 <UART_SetConfig+0x34e>
 80095d2:	2308      	movs	r3, #8
 80095d4:	77fb      	strb	r3, [r7, #31]
 80095d6:	e06e      	b.n	80096b6 <UART_SetConfig+0x34e>
 80095d8:	2310      	movs	r3, #16
 80095da:	77fb      	strb	r3, [r7, #31]
 80095dc:	bf00      	nop
 80095de:	e06a      	b.n	80096b6 <UART_SetConfig+0x34e>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a25      	ldr	r2, [pc, #148]	; (800967c <UART_SetConfig+0x314>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d124      	bne.n	8009634 <UART_SetConfig+0x2cc>
 80095ea:	4b1e      	ldr	r3, [pc, #120]	; (8009664 <UART_SetConfig+0x2fc>)
 80095ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095f0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80095f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095f8:	d012      	beq.n	8009620 <UART_SetConfig+0x2b8>
 80095fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095fe:	d802      	bhi.n	8009606 <UART_SetConfig+0x29e>
 8009600:	2b00      	cmp	r3, #0
 8009602:	d007      	beq.n	8009614 <UART_SetConfig+0x2ac>
 8009604:	e012      	b.n	800962c <UART_SetConfig+0x2c4>
 8009606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800960a:	d006      	beq.n	800961a <UART_SetConfig+0x2b2>
 800960c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009610:	d009      	beq.n	8009626 <UART_SetConfig+0x2be>
 8009612:	e00b      	b.n	800962c <UART_SetConfig+0x2c4>
 8009614:	2300      	movs	r3, #0
 8009616:	77fb      	strb	r3, [r7, #31]
 8009618:	e04d      	b.n	80096b6 <UART_SetConfig+0x34e>
 800961a:	2302      	movs	r3, #2
 800961c:	77fb      	strb	r3, [r7, #31]
 800961e:	e04a      	b.n	80096b6 <UART_SetConfig+0x34e>
 8009620:	2304      	movs	r3, #4
 8009622:	77fb      	strb	r3, [r7, #31]
 8009624:	e047      	b.n	80096b6 <UART_SetConfig+0x34e>
 8009626:	2308      	movs	r3, #8
 8009628:	77fb      	strb	r3, [r7, #31]
 800962a:	e044      	b.n	80096b6 <UART_SetConfig+0x34e>
 800962c:	2310      	movs	r3, #16
 800962e:	77fb      	strb	r3, [r7, #31]
 8009630:	bf00      	nop
 8009632:	e040      	b.n	80096b6 <UART_SetConfig+0x34e>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a11      	ldr	r2, [pc, #68]	; (8009680 <UART_SetConfig+0x318>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d139      	bne.n	80096b2 <UART_SetConfig+0x34a>
 800963e:	4b09      	ldr	r3, [pc, #36]	; (8009664 <UART_SetConfig+0x2fc>)
 8009640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009644:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009648:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800964c:	d027      	beq.n	800969e <UART_SetConfig+0x336>
 800964e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009652:	d817      	bhi.n	8009684 <UART_SetConfig+0x31c>
 8009654:	2b00      	cmp	r3, #0
 8009656:	d01c      	beq.n	8009692 <UART_SetConfig+0x32a>
 8009658:	e027      	b.n	80096aa <UART_SetConfig+0x342>
 800965a:	bf00      	nop
 800965c:	efff69f3 	.word	0xefff69f3
 8009660:	40011000 	.word	0x40011000
 8009664:	40023800 	.word	0x40023800
 8009668:	40004400 	.word	0x40004400
 800966c:	40004800 	.word	0x40004800
 8009670:	40004c00 	.word	0x40004c00
 8009674:	40005000 	.word	0x40005000
 8009678:	40011400 	.word	0x40011400
 800967c:	40007800 	.word	0x40007800
 8009680:	40007c00 	.word	0x40007c00
 8009684:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009688:	d006      	beq.n	8009698 <UART_SetConfig+0x330>
 800968a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800968e:	d009      	beq.n	80096a4 <UART_SetConfig+0x33c>
 8009690:	e00b      	b.n	80096aa <UART_SetConfig+0x342>
 8009692:	2300      	movs	r3, #0
 8009694:	77fb      	strb	r3, [r7, #31]
 8009696:	e00e      	b.n	80096b6 <UART_SetConfig+0x34e>
 8009698:	2302      	movs	r3, #2
 800969a:	77fb      	strb	r3, [r7, #31]
 800969c:	e00b      	b.n	80096b6 <UART_SetConfig+0x34e>
 800969e:	2304      	movs	r3, #4
 80096a0:	77fb      	strb	r3, [r7, #31]
 80096a2:	e008      	b.n	80096b6 <UART_SetConfig+0x34e>
 80096a4:	2308      	movs	r3, #8
 80096a6:	77fb      	strb	r3, [r7, #31]
 80096a8:	e005      	b.n	80096b6 <UART_SetConfig+0x34e>
 80096aa:	2310      	movs	r3, #16
 80096ac:	77fb      	strb	r3, [r7, #31]
 80096ae:	bf00      	nop
 80096b0:	e001      	b.n	80096b6 <UART_SetConfig+0x34e>
 80096b2:	2310      	movs	r3, #16
 80096b4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	69db      	ldr	r3, [r3, #28]
 80096ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096be:	d17c      	bne.n	80097ba <UART_SetConfig+0x452>
  {
    switch (clocksource)
 80096c0:	7ffb      	ldrb	r3, [r7, #31]
 80096c2:	2b08      	cmp	r3, #8
 80096c4:	d859      	bhi.n	800977a <UART_SetConfig+0x412>
 80096c6:	a201      	add	r2, pc, #4	; (adr r2, 80096cc <UART_SetConfig+0x364>)
 80096c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096cc:	080096f1 	.word	0x080096f1
 80096d0:	0800970f 	.word	0x0800970f
 80096d4:	0800972d 	.word	0x0800972d
 80096d8:	0800977b 	.word	0x0800977b
 80096dc:	08009745 	.word	0x08009745
 80096e0:	0800977b 	.word	0x0800977b
 80096e4:	0800977b 	.word	0x0800977b
 80096e8:	0800977b 	.word	0x0800977b
 80096ec:	08009763 	.word	0x08009763
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80096f0:	f7fd fb82 	bl	8006df8 <HAL_RCC_GetPCLK1Freq>
 80096f4:	4603      	mov	r3, r0
 80096f6:	005a      	lsls	r2, r3, #1
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	085b      	lsrs	r3, r3, #1
 80096fe:	441a      	add	r2, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	fbb2 f3f3 	udiv	r3, r2, r3
 8009708:	b29b      	uxth	r3, r3
 800970a:	61bb      	str	r3, [r7, #24]
        break;
 800970c:	e038      	b.n	8009780 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800970e:	f7fd fb87 	bl	8006e20 <HAL_RCC_GetPCLK2Freq>
 8009712:	4603      	mov	r3, r0
 8009714:	005a      	lsls	r2, r3, #1
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	085b      	lsrs	r3, r3, #1
 800971c:	441a      	add	r2, r3
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	fbb2 f3f3 	udiv	r3, r2, r3
 8009726:	b29b      	uxth	r3, r3
 8009728:	61bb      	str	r3, [r7, #24]
        break;
 800972a:	e029      	b.n	8009780 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	085a      	lsrs	r2, r3, #1
 8009732:	4b5d      	ldr	r3, [pc, #372]	; (80098a8 <UART_SetConfig+0x540>)
 8009734:	4413      	add	r3, r2
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	6852      	ldr	r2, [r2, #4]
 800973a:	fbb3 f3f2 	udiv	r3, r3, r2
 800973e:	b29b      	uxth	r3, r3
 8009740:	61bb      	str	r3, [r7, #24]
        break;
 8009742:	e01d      	b.n	8009780 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009744:	f7fd fa9a 	bl	8006c7c <HAL_RCC_GetSysClockFreq>
 8009748:	4603      	mov	r3, r0
 800974a:	005a      	lsls	r2, r3, #1
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	085b      	lsrs	r3, r3, #1
 8009752:	441a      	add	r2, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	fbb2 f3f3 	udiv	r3, r2, r3
 800975c:	b29b      	uxth	r3, r3
 800975e:	61bb      	str	r3, [r7, #24]
        break;
 8009760:	e00e      	b.n	8009780 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	085b      	lsrs	r3, r3, #1
 8009768:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	fbb2 f3f3 	udiv	r3, r2, r3
 8009774:	b29b      	uxth	r3, r3
 8009776:	61bb      	str	r3, [r7, #24]
        break;
 8009778:	e002      	b.n	8009780 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	75fb      	strb	r3, [r7, #23]
        break;
 800977e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	2b0f      	cmp	r3, #15
 8009784:	d916      	bls.n	80097b4 <UART_SetConfig+0x44c>
 8009786:	69bb      	ldr	r3, [r7, #24]
 8009788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800978c:	d212      	bcs.n	80097b4 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	b29b      	uxth	r3, r3
 8009792:	f023 030f 	bic.w	r3, r3, #15
 8009796:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009798:	69bb      	ldr	r3, [r7, #24]
 800979a:	085b      	lsrs	r3, r3, #1
 800979c:	b29b      	uxth	r3, r3
 800979e:	f003 0307 	and.w	r3, r3, #7
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	89fb      	ldrh	r3, [r7, #14]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	89fa      	ldrh	r2, [r7, #14]
 80097b0:	60da      	str	r2, [r3, #12]
 80097b2:	e06e      	b.n	8009892 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	75fb      	strb	r3, [r7, #23]
 80097b8:	e06b      	b.n	8009892 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 80097ba:	7ffb      	ldrb	r3, [r7, #31]
 80097bc:	2b08      	cmp	r3, #8
 80097be:	d857      	bhi.n	8009870 <UART_SetConfig+0x508>
 80097c0:	a201      	add	r2, pc, #4	; (adr r2, 80097c8 <UART_SetConfig+0x460>)
 80097c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c6:	bf00      	nop
 80097c8:	080097ed 	.word	0x080097ed
 80097cc:	08009809 	.word	0x08009809
 80097d0:	08009825 	.word	0x08009825
 80097d4:	08009871 	.word	0x08009871
 80097d8:	0800983d 	.word	0x0800983d
 80097dc:	08009871 	.word	0x08009871
 80097e0:	08009871 	.word	0x08009871
 80097e4:	08009871 	.word	0x08009871
 80097e8:	08009859 	.word	0x08009859
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80097ec:	f7fd fb04 	bl	8006df8 <HAL_RCC_GetPCLK1Freq>
 80097f0:	4602      	mov	r2, r0
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	085b      	lsrs	r3, r3, #1
 80097f8:	441a      	add	r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009802:	b29b      	uxth	r3, r3
 8009804:	61bb      	str	r3, [r7, #24]
        break;
 8009806:	e036      	b.n	8009876 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8009808:	f7fd fb0a 	bl	8006e20 <HAL_RCC_GetPCLK2Freq>
 800980c:	4602      	mov	r2, r0
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	085b      	lsrs	r3, r3, #1
 8009814:	441a      	add	r2, r3
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	fbb2 f3f3 	udiv	r3, r2, r3
 800981e:	b29b      	uxth	r3, r3
 8009820:	61bb      	str	r3, [r7, #24]
        break;
 8009822:	e028      	b.n	8009876 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	085a      	lsrs	r2, r3, #1
 800982a:	4b20      	ldr	r3, [pc, #128]	; (80098ac <UART_SetConfig+0x544>)
 800982c:	4413      	add	r3, r2
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	6852      	ldr	r2, [r2, #4]
 8009832:	fbb3 f3f2 	udiv	r3, r3, r2
 8009836:	b29b      	uxth	r3, r3
 8009838:	61bb      	str	r3, [r7, #24]
        break;
 800983a:	e01c      	b.n	8009876 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800983c:	f7fd fa1e 	bl	8006c7c <HAL_RCC_GetSysClockFreq>
 8009840:	4602      	mov	r2, r0
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	085b      	lsrs	r3, r3, #1
 8009848:	441a      	add	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009852:	b29b      	uxth	r3, r3
 8009854:	61bb      	str	r3, [r7, #24]
        break;
 8009856:	e00e      	b.n	8009876 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	085b      	lsrs	r3, r3, #1
 800985e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	fbb2 f3f3 	udiv	r3, r2, r3
 800986a:	b29b      	uxth	r3, r3
 800986c:	61bb      	str	r3, [r7, #24]
        break;
 800986e:	e002      	b.n	8009876 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8009870:	2301      	movs	r3, #1
 8009872:	75fb      	strb	r3, [r7, #23]
        break;
 8009874:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	2b0f      	cmp	r3, #15
 800987a:	d908      	bls.n	800988e <UART_SetConfig+0x526>
 800987c:	69bb      	ldr	r3, [r7, #24]
 800987e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009882:	d204      	bcs.n	800988e <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	69ba      	ldr	r2, [r7, #24]
 800988a:	60da      	str	r2, [r3, #12]
 800988c:	e001      	b.n	8009892 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800988e:	2301      	movs	r3, #1
 8009890:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2200      	movs	r2, #0
 800989c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800989e:	7dfb      	ldrb	r3, [r7, #23]
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3720      	adds	r7, #32
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	01e84800 	.word	0x01e84800
 80098ac:	00f42400 	.word	0x00f42400

080098b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098bc:	f003 0301 	and.w	r3, r3, #1
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00a      	beq.n	80098da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	430a      	orrs	r2, r1
 80098d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098de:	f003 0302 	and.w	r3, r3, #2
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00a      	beq.n	80098fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	430a      	orrs	r2, r1
 80098fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009900:	f003 0304 	and.w	r3, r3, #4
 8009904:	2b00      	cmp	r3, #0
 8009906:	d00a      	beq.n	800991e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	430a      	orrs	r2, r1
 800991c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009922:	f003 0308 	and.w	r3, r3, #8
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00a      	beq.n	8009940 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	430a      	orrs	r2, r1
 800993e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009944:	f003 0310 	and.w	r3, r3, #16
 8009948:	2b00      	cmp	r3, #0
 800994a:	d00a      	beq.n	8009962 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	430a      	orrs	r2, r1
 8009960:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009966:	f003 0320 	and.w	r3, r3, #32
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00a      	beq.n	8009984 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	430a      	orrs	r2, r1
 8009982:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800998c:	2b00      	cmp	r3, #0
 800998e:	d01a      	beq.n	80099c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	430a      	orrs	r2, r1
 80099a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099ae:	d10a      	bne.n	80099c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	430a      	orrs	r2, r1
 80099c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d00a      	beq.n	80099e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	430a      	orrs	r2, r1
 80099e6:	605a      	str	r2, [r3, #4]
  }
}
 80099e8:	bf00      	nop
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b086      	sub	sp, #24
 80099f8:	af02      	add	r7, sp, #8
 80099fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009a02:	f7f9 fb1d 	bl	8003040 <HAL_GetTick>
 8009a06:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f003 0308 	and.w	r3, r3, #8
 8009a12:	2b08      	cmp	r3, #8
 8009a14:	d10e      	bne.n	8009a34 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a1a:	9300      	str	r3, [sp, #0]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 f814 	bl	8009a52 <UART_WaitOnFlagUntilTimeout>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d001      	beq.n	8009a34 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a30:	2303      	movs	r3, #3
 8009a32:	e00a      	b.n	8009a4a <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2220      	movs	r2, #32
 8009a38:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2220      	movs	r2, #32
 8009a3e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3710      	adds	r7, #16
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b084      	sub	sp, #16
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	60f8      	str	r0, [r7, #12]
 8009a5a:	60b9      	str	r1, [r7, #8]
 8009a5c:	603b      	str	r3, [r7, #0]
 8009a5e:	4613      	mov	r3, r2
 8009a60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a62:	e02a      	b.n	8009aba <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a64:	69bb      	ldr	r3, [r7, #24]
 8009a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a6a:	d026      	beq.n	8009aba <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a6c:	f7f9 fae8 	bl	8003040 <HAL_GetTick>
 8009a70:	4602      	mov	r2, r0
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	1ad3      	subs	r3, r2, r3
 8009a76:	69ba      	ldr	r2, [r7, #24]
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d302      	bcc.n	8009a82 <UART_WaitOnFlagUntilTimeout+0x30>
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d11b      	bne.n	8009aba <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009a90:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	689a      	ldr	r2, [r3, #8]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f022 0201 	bic.w	r2, r2, #1
 8009aa0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2220      	movs	r2, #32
 8009aa6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2220      	movs	r2, #32
 8009aac:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8009ab6:	2303      	movs	r3, #3
 8009ab8:	e00f      	b.n	8009ada <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	69da      	ldr	r2, [r3, #28]
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	4013      	ands	r3, r2
 8009ac4:	68ba      	ldr	r2, [r7, #8]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	bf0c      	ite	eq
 8009aca:	2301      	moveq	r3, #1
 8009acc:	2300      	movne	r3, #0
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	79fb      	ldrb	r3, [r7, #7]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d0c5      	beq.n	8009a64 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
	...

08009ae4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b085      	sub	sp, #20
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8009aee:	2300      	movs	r3, #0
 8009af0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8009af2:	2300      	movs	r3, #0
 8009af4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d027      	beq.n	8009b4e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009b04:	68fa      	ldr	r2, [r7, #12]
 8009b06:	4b2f      	ldr	r3, [pc, #188]	; (8009bc4 <FMC_SDRAM_Init+0xe0>)
 8009b08:	4013      	ands	r3, r2
 8009b0a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009b14:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8009b1a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8009b20:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8009b26:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8009b2c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8009b32:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8009b38:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8009b3e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	4313      	orrs	r3, r2
 8009b44:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	601a      	str	r2, [r3, #0]
 8009b4c:	e032      	b.n	8009bb4 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009b5a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009b64:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8009b6a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009b78:	68ba      	ldr	r2, [r7, #8]
 8009b7a:	4b12      	ldr	r3, [pc, #72]	; (8009bc4 <FMC_SDRAM_Init+0xe0>)
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009b88:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8009b8e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8009b94:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8009b9a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8009ba0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009ba2:	68ba      	ldr	r2, [r7, #8]
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	68fa      	ldr	r2, [r7, #12]
 8009bac:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	68ba      	ldr	r2, [r7, #8]
 8009bb2:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8009bb4:	2300      	movs	r3, #0
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3714      	adds	r7, #20
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	ffff8000 	.word	0xffff8000

08009bc8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b087      	sub	sp, #28
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	60b9      	str	r1, [r7, #8]
 8009bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d02e      	beq.n	8009c40 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009bee:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009bfe:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	3b01      	subs	r3, #1
 8009c06:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8009c08:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	68db      	ldr	r3, [r3, #12]
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8009c12:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	691b      	ldr	r3, [r3, #16]
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8009c1c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	695b      	ldr	r3, [r3, #20]
 8009c22:	3b01      	subs	r3, #1
 8009c24:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8009c26:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	699b      	ldr	r3, [r3, #24]
 8009c2c:	3b01      	subs	r3, #1
 8009c2e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009c30:	4313      	orrs	r3, r2
 8009c32:	697a      	ldr	r2, [r7, #20]
 8009c34:	4313      	orrs	r3, r2
 8009c36:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	697a      	ldr	r2, [r7, #20]
 8009c3c:	609a      	str	r2, [r3, #8]
 8009c3e:	e039      	b.n	8009cb4 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8009c46:	697a      	ldr	r2, [r7, #20]
 8009c48:	4b1e      	ldr	r3, [pc, #120]	; (8009cc4 <FMC_SDRAM_Timing_Init+0xfc>)
 8009c4a:	4013      	ands	r3, r2
 8009c4c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	3b01      	subs	r3, #1
 8009c54:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	695b      	ldr	r3, [r3, #20]
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	697a      	ldr	r2, [r7, #20]
 8009c62:	4313      	orrs	r3, r2
 8009c64:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009c72:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	3b01      	subs	r3, #1
 8009c80:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009c82:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	3b01      	subs	r3, #1
 8009c8a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8009c8c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	691b      	ldr	r3, [r3, #16]
 8009c92:	3b01      	subs	r3, #1
 8009c94:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8009c96:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	699b      	ldr	r3, [r3, #24]
 8009c9c:	3b01      	subs	r3, #1
 8009c9e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	693a      	ldr	r2, [r7, #16]
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	697a      	ldr	r2, [r7, #20]
 8009cac:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	693a      	ldr	r2, [r7, #16]
 8009cb2:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8009cb4:	2300      	movs	r3, #0
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	371c      	adds	r7, #28
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop
 8009cc4:	ff0f0fff 	.word	0xff0f0fff

08009cc8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b087      	sub	sp, #28
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009ce0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	3b01      	subs	r3, #1
 8009ce8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8009cea:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	68db      	ldr	r3, [r3, #12]
 8009cf0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8009cf6:	697a      	ldr	r2, [r7, #20]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	371c      	adds	r7, #28
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr

08009d0a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009d0a:	b480      	push	{r7}
 8009d0c:	b083      	sub	sp, #12
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
 8009d12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	695a      	ldr	r2, [r3, #20]
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	005b      	lsls	r3, r3, #1
 8009d1c:	431a      	orrs	r2, r3
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8009d22:	2300      	movs	r3, #0
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	370c      	adds	r7, #12
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009d30:	b084      	sub	sp, #16
 8009d32:	b480      	push	{r7}
 8009d34:	b085      	sub	sp, #20
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
 8009d3a:	f107 001c 	add.w	r0, r7, #28
 8009d3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009d42:	2300      	movs	r3, #0
 8009d44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009d46:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009d48:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009d4a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009d4e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009d52:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009d56:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009d5a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	685a      	ldr	r2, [r3, #4]
 8009d66:	4b07      	ldr	r3, [pc, #28]	; (8009d84 <SDMMC_Init+0x54>)
 8009d68:	4013      	ands	r3, r2
 8009d6a:	68fa      	ldr	r2, [r7, #12]
 8009d6c:	431a      	orrs	r2, r3
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3714      	adds	r7, #20
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	b004      	add	sp, #16
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	ffff8100 	.word	0xffff8100

08009d88 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	370c      	adds	r7, #12
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr

08009da2 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8009da2:	b480      	push	{r7}
 8009da4:	b083      	sub	sp, #12
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2203      	movs	r2, #3
 8009dae:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 8009db0:	2300      	movs	r3, #0
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	370c      	adds	r7, #12
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr

08009dbe <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8009dbe:	b480      	push	{r7}
 8009dc0:	b083      	sub	sp, #12
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f003 0303 	and.w	r3, r3, #3
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	370c      	adds	r7, #12
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr
	...

08009ddc <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b085      	sub	sp, #20
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009de6:	2300      	movs	r3, #0
 8009de8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009dfa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009e00:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009e06:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	68da      	ldr	r2, [r3, #12]
 8009e12:	4b06      	ldr	r3, [pc, #24]	; (8009e2c <SDMMC_SendCommand+0x50>)
 8009e14:	4013      	ands	r3, r2
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	431a      	orrs	r2, r3
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3714      	adds	r7, #20
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr
 8009e2c:	fffff000 	.word	0xfffff000

08009e30 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	b2db      	uxtb	r3, r3
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	370c      	adds	r7, #12
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr

08009e4a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009e4a:	b480      	push	{r7}
 8009e4c:	b085      	sub	sp, #20
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
 8009e52:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 8009e54:	2300      	movs	r3, #0
 8009e56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	3314      	adds	r3, #20
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	4413      	add	r3, r2
 8009e62:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
}  
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3714      	adds	r7, #20
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	685a      	ldr	r2, [r3, #4]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009e9a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009ea0:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009ea6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	431a      	orrs	r2, r3
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009ebe:	2300      	movs	r3, #0

}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3714      	adds	r7, #20
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b088      	sub	sp, #32
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009ede:	2310      	movs	r3, #16
 8009ee0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ee2:	2340      	movs	r3, #64	; 0x40
 8009ee4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009eea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009eee:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ef0:	f107 0308 	add.w	r3, r7, #8
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f7ff ff70 	bl	8009ddc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f00:	2110      	movs	r1, #16
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 f98c 	bl	800a220 <SDMMC_GetCmdResp1>
 8009f08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f0a:	69fb      	ldr	r3, [r7, #28]
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3720      	adds	r7, #32
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b08a      	sub	sp, #40	; 0x28
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009f20:	2300      	movs	r3, #0
 8009f22:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009f28:	2307      	movs	r3, #7
 8009f2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f2c:	2340      	movs	r3, #64	; 0x40
 8009f2e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f30:	2300      	movs	r3, #0
 8009f32:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f38:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f3a:	f107 0310 	add.w	r3, r7, #16
 8009f3e:	4619      	mov	r1, r3
 8009f40:	68f8      	ldr	r0, [r7, #12]
 8009f42:	f7ff ff4b 	bl	8009ddc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f4a:	2107      	movs	r1, #7
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f000 f967 	bl	800a220 <SDMMC_GetCmdResp1>
 8009f52:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3728      	adds	r7, #40	; 0x28
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b088      	sub	sp, #32
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009f66:	2300      	movs	r3, #0
 8009f68:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009f72:	2300      	movs	r3, #0
 8009f74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f76:	2300      	movs	r3, #0
 8009f78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f7e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f80:	f107 0308 	add.w	r3, r7, #8
 8009f84:	4619      	mov	r1, r3
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f7ff ff28 	bl	8009ddc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 f91d 	bl	800a1cc <SDMMC_GetCmdError>
 8009f92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f94:	69fb      	ldr	r3, [r7, #28]
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3720      	adds	r7, #32
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b088      	sub	sp, #32
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009faa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009fae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009fb0:	2308      	movs	r3, #8
 8009fb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009fb4:	2340      	movs	r3, #64	; 0x40
 8009fb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fc0:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009fc2:	f107 0308 	add.w	r3, r7, #8
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f7ff ff07 	bl	8009ddc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 faee 	bl	800a5b0 <SDMMC_GetCmdResp7>
 8009fd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fd6:	69fb      	ldr	r3, [r7, #28]
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3720      	adds	r7, #32
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b088      	sub	sp, #32
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009fea:	2300      	movs	r3, #0
 8009fec:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009ff2:	2337      	movs	r3, #55	; 0x37
 8009ff4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ff6:	2340      	movs	r3, #64	; 0x40
 8009ff8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a002:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a004:	f107 0308 	add.w	r3, r7, #8
 800a008:	4619      	mov	r1, r3
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f7ff fee6 	bl	8009ddc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a010:	f241 3288 	movw	r2, #5000	; 0x1388
 800a014:	2137      	movs	r1, #55	; 0x37
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 f902 	bl	800a220 <SDMMC_GetCmdResp1>
 800a01c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a01e:	69fb      	ldr	r3, [r7, #28]
}
 800a020:	4618      	mov	r0, r3
 800a022:	3720      	adds	r7, #32
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b088      	sub	sp, #32
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a032:	2300      	movs	r3, #0
 800a034:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800a036:	683a      	ldr	r2, [r7, #0]
 800a038:	4b0d      	ldr	r3, [pc, #52]	; (800a070 <SDMMC_CmdAppOperCommand+0x48>)
 800a03a:	4313      	orrs	r3, r2
 800a03c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a03e:	2329      	movs	r3, #41	; 0x29
 800a040:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a042:	2340      	movs	r3, #64	; 0x40
 800a044:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a046:	2300      	movs	r3, #0
 800a048:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a04a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a04e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a050:	f107 0308 	add.w	r3, r7, #8
 800a054:	4619      	mov	r1, r3
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f7ff fec0 	bl	8009ddc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 fa05 	bl	800a46c <SDMMC_GetCmdResp3>
 800a062:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a064:	69fb      	ldr	r3, [r7, #28]
}
 800a066:	4618      	mov	r0, r3
 800a068:	3720      	adds	r7, #32
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	80100000 	.word	0x80100000

0800a074 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b088      	sub	sp, #32
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a07e:	2300      	movs	r3, #0
 800a080:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a086:	2306      	movs	r3, #6
 800a088:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a08a:	2340      	movs	r3, #64	; 0x40
 800a08c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a08e:	2300      	movs	r3, #0
 800a090:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a096:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a098:	f107 0308 	add.w	r3, r7, #8
 800a09c:	4619      	mov	r1, r3
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f7ff fe9c 	bl	8009ddc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a0a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0a8:	2106      	movs	r1, #6
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 f8b8 	bl	800a220 <SDMMC_GetCmdResp1>
 800a0b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0b2:	69fb      	ldr	r3, [r7, #28]
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3720      	adds	r7, #32
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b088      	sub	sp, #32
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a0cc:	2333      	movs	r3, #51	; 0x33
 800a0ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a0d0:	2340      	movs	r3, #64	; 0x40
 800a0d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a0d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0dc:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a0de:	f107 0308 	add.w	r3, r7, #8
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f7ff fe79 	bl	8009ddc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a0ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0ee:	2133      	movs	r1, #51	; 0x33
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 f895 	bl	800a220 <SDMMC_GetCmdResp1>
 800a0f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0f8:	69fb      	ldr	r3, [r7, #28]
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3720      	adds	r7, #32
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b088      	sub	sp, #32
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a10a:	2300      	movs	r3, #0
 800a10c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 800a10e:	2300      	movs	r3, #0
 800a110:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a112:	2302      	movs	r3, #2
 800a114:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a116:	23c0      	movs	r3, #192	; 0xc0
 800a118:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a11a:	2300      	movs	r3, #0
 800a11c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a11e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a122:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a124:	f107 0308 	add.w	r3, r7, #8
 800a128:	4619      	mov	r1, r3
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f7ff fe56 	bl	8009ddc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f000 f95b 	bl	800a3ec <SDMMC_GetCmdResp2>
 800a136:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a138:	69fb      	ldr	r3, [r7, #28]
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3720      	adds	r7, #32
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b088      	sub	sp, #32
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
 800a14a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a14c:	2300      	movs	r3, #0
 800a14e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a154:	2309      	movs	r3, #9
 800a156:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a158:	23c0      	movs	r3, #192	; 0xc0
 800a15a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a15c:	2300      	movs	r3, #0
 800a15e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a164:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a166:	f107 0308 	add.w	r3, r7, #8
 800a16a:	4619      	mov	r1, r3
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f7ff fe35 	bl	8009ddc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 f93a 	bl	800a3ec <SDMMC_GetCmdResp2>
 800a178:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a17a:	69fb      	ldr	r3, [r7, #28]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3720      	adds	r7, #32
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b088      	sub	sp, #32
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a18e:	2300      	movs	r3, #0
 800a190:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 800a192:	2300      	movs	r3, #0
 800a194:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a196:	2303      	movs	r3, #3
 800a198:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a19a:	2340      	movs	r3, #64	; 0x40
 800a19c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a1a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1a6:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a1a8:	f107 0308 	add.w	r3, r7, #8
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f7ff fe14 	bl	8009ddc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a1b4:	683a      	ldr	r2, [r7, #0]
 800a1b6:	2103      	movs	r1, #3
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 f98b 	bl	800a4d4 <SDMMC_GetCmdResp6>
 800a1be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1c0:	69fb      	ldr	r3, [r7, #28]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3720      	adds	r7, #32
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
	...

0800a1cc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a1cc:	b490      	push	{r4, r7}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800a1d4:	4b10      	ldr	r3, [pc, #64]	; (800a218 <SDMMC_GetCmdError+0x4c>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a10      	ldr	r2, [pc, #64]	; (800a21c <SDMMC_GetCmdError+0x50>)
 800a1da:	fba2 2303 	umull	r2, r3, r2, r3
 800a1de:	0a5b      	lsrs	r3, r3, #9
 800a1e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1e4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800a1e8:	4623      	mov	r3, r4
 800a1ea:	1e5c      	subs	r4, r3, #1
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d102      	bne.n	800a1f6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1f4:	e00a      	b.n	800a20c <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d0f2      	beq.n	800a1e8 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a208:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3708      	adds	r7, #8
 800a210:	46bd      	mov	sp, r7
 800a212:	bc90      	pop	{r4, r7}
 800a214:	4770      	bx	lr
 800a216:	bf00      	nop
 800a218:	200000ac 	.word	0x200000ac
 800a21c:	10624dd3 	.word	0x10624dd3

0800a220 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a220:	b590      	push	{r4, r7, lr}
 800a222:	b087      	sub	sp, #28
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	460b      	mov	r3, r1
 800a22a:	607a      	str	r2, [r7, #4]
 800a22c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800a22e:	4b6c      	ldr	r3, [pc, #432]	; (800a3e0 <SDMMC_GetCmdResp1+0x1c0>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a6c      	ldr	r2, [pc, #432]	; (800a3e4 <SDMMC_GetCmdResp1+0x1c4>)
 800a234:	fba2 2303 	umull	r2, r3, r2, r3
 800a238:	0a5b      	lsrs	r3, r3, #9
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800a240:	4623      	mov	r3, r4
 800a242:	1e5c      	subs	r4, r3, #1
 800a244:	2b00      	cmp	r3, #0
 800a246:	d102      	bne.n	800a24e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a248:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a24c:	e0c3      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a252:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a256:	2b00      	cmp	r3, #0
 800a258:	d0f2      	beq.n	800a240 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a25e:	f003 0304 	and.w	r3, r3, #4
 800a262:	2b00      	cmp	r3, #0
 800a264:	d004      	beq.n	800a270 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2204      	movs	r2, #4
 800a26a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a26c:	2304      	movs	r3, #4
 800a26e:	e0b2      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a274:	f003 0301 	and.w	r3, r3, #1
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d004      	beq.n	800a286 <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2201      	movs	r2, #1
 800a280:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a282:	2301      	movs	r3, #1
 800a284:	e0a7      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	f7ff fdd2 	bl	8009e30 <SDMMC_GetCommandResponse>
 800a28c:	4603      	mov	r3, r0
 800a28e:	461a      	mov	r2, r3
 800a290:	7afb      	ldrb	r3, [r7, #11]
 800a292:	4293      	cmp	r3, r2
 800a294:	d001      	beq.n	800a29a <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a296:	2301      	movs	r3, #1
 800a298:	e09d      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a2a0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a2a2:	2100      	movs	r1, #0
 800a2a4:	68f8      	ldr	r0, [r7, #12]
 800a2a6:	f7ff fdd0 	bl	8009e4a <SDMMC_GetResponse>
 800a2aa:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a2ac:	697a      	ldr	r2, [r7, #20]
 800a2ae:	4b4e      	ldr	r3, [pc, #312]	; (800a3e8 <SDMMC_GetCmdResp1+0x1c8>)
 800a2b0:	4013      	ands	r3, r2
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d101      	bne.n	800a2ba <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	e08d      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	da02      	bge.n	800a2c6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a2c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a2c4:	e087      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d001      	beq.n	800a2d4 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a2d0:	2340      	movs	r3, #64	; 0x40
 800a2d2:	e080      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d001      	beq.n	800a2e2 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a2de:	2380      	movs	r3, #128	; 0x80
 800a2e0:	e079      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d002      	beq.n	800a2f2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a2ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2f0:	e071      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d002      	beq.n	800a302 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a2fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a300:	e069      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d002      	beq.n	800a312 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a30c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a310:	e061      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d002      	beq.n	800a322 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a31c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a320:	e059      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d002      	beq.n	800a332 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a32c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a330:	e051      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d002      	beq.n	800a342 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a33c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a340:	e049      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d002      	beq.n	800a352 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a34c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a350:	e041      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d002      	beq.n	800a362 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800a35c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a360:	e039      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d002      	beq.n	800a372 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a36c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a370:	e031      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d002      	beq.n	800a382 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a37c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a380:	e029      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d002      	beq.n	800a392 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a38c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a390:	e021      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d002      	beq.n	800a3a2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a39c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a3a0:	e019      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d002      	beq.n	800a3b2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a3ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a3b0:	e011      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d002      	beq.n	800a3c2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a3bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a3c0:	e009      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	f003 0308 	and.w	r3, r3, #8
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d002      	beq.n	800a3d2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a3cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a3d0:	e001      	b.n	800a3d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a3d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	371c      	adds	r7, #28
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd90      	pop	{r4, r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	200000ac 	.word	0x200000ac
 800a3e4:	10624dd3 	.word	0x10624dd3
 800a3e8:	fdffe008 	.word	0xfdffe008

0800a3ec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a3ec:	b490      	push	{r4, r7}
 800a3ee:	b082      	sub	sp, #8
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800a3f4:	4b1b      	ldr	r3, [pc, #108]	; (800a464 <SDMMC_GetCmdResp2+0x78>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a1b      	ldr	r2, [pc, #108]	; (800a468 <SDMMC_GetCmdResp2+0x7c>)
 800a3fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a3fe:	0a5b      	lsrs	r3, r3, #9
 800a400:	f241 3288 	movw	r2, #5000	; 0x1388
 800a404:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800a408:	4623      	mov	r3, r4
 800a40a:	1e5c      	subs	r4, r3, #1
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d102      	bne.n	800a416 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a410:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a414:	e020      	b.n	800a458 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a41a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d0f2      	beq.n	800a408 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a426:	f003 0304 	and.w	r3, r3, #4
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d004      	beq.n	800a438 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2204      	movs	r2, #4
 800a432:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a434:	2304      	movs	r3, #4
 800a436:	e00f      	b.n	800a458 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a43c:	f003 0301 	and.w	r3, r3, #1
 800a440:	2b00      	cmp	r3, #0
 800a442:	d004      	beq.n	800a44e <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2201      	movs	r2, #1
 800a448:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a44a:	2301      	movs	r3, #1
 800a44c:	e004      	b.n	800a458 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a454:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a456:	2300      	movs	r3, #0
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3708      	adds	r7, #8
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bc90      	pop	{r4, r7}
 800a460:	4770      	bx	lr
 800a462:	bf00      	nop
 800a464:	200000ac 	.word	0x200000ac
 800a468:	10624dd3 	.word	0x10624dd3

0800a46c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a46c:	b490      	push	{r4, r7}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800a474:	4b15      	ldr	r3, [pc, #84]	; (800a4cc <SDMMC_GetCmdResp3+0x60>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a15      	ldr	r2, [pc, #84]	; (800a4d0 <SDMMC_GetCmdResp3+0x64>)
 800a47a:	fba2 2303 	umull	r2, r3, r2, r3
 800a47e:	0a5b      	lsrs	r3, r3, #9
 800a480:	f241 3288 	movw	r2, #5000	; 0x1388
 800a484:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800a488:	4623      	mov	r3, r4
 800a48a:	1e5c      	subs	r4, r3, #1
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d102      	bne.n	800a496 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a490:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a494:	e015      	b.n	800a4c2 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a49a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d0f2      	beq.n	800a488 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4a6:	f003 0304 	and.w	r3, r3, #4
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d004      	beq.n	800a4b8 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2204      	movs	r2, #4
 800a4b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a4b4:	2304      	movs	r3, #4
 800a4b6:	e004      	b.n	800a4c2 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a4be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3708      	adds	r7, #8
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bc90      	pop	{r4, r7}
 800a4ca:	4770      	bx	lr
 800a4cc:	200000ac 	.word	0x200000ac
 800a4d0:	10624dd3 	.word	0x10624dd3

0800a4d4 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a4d4:	b590      	push	{r4, r7, lr}
 800a4d6:	b087      	sub	sp, #28
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	460b      	mov	r3, r1
 800a4de:	607a      	str	r2, [r7, #4]
 800a4e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800a4e2:	4b31      	ldr	r3, [pc, #196]	; (800a5a8 <SDMMC_GetCmdResp6+0xd4>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a31      	ldr	r2, [pc, #196]	; (800a5ac <SDMMC_GetCmdResp6+0xd8>)
 800a4e8:	fba2 2303 	umull	r2, r3, r2, r3
 800a4ec:	0a5b      	lsrs	r3, r3, #9
 800a4ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4f2:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800a4f6:	4623      	mov	r3, r4
 800a4f8:	1e5c      	subs	r4, r3, #1
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d102      	bne.n	800a504 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a4fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a502:	e04c      	b.n	800a59e <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a508:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d0f2      	beq.n	800a4f6 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a514:	f003 0304 	and.w	r3, r3, #4
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d004      	beq.n	800a526 <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2204      	movs	r2, #4
 800a520:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a522:	2304      	movs	r3, #4
 800a524:	e03b      	b.n	800a59e <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a52a:	f003 0301 	and.w	r3, r3, #1
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d004      	beq.n	800a53c <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2201      	movs	r2, #1
 800a536:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a538:	2301      	movs	r3, #1
 800a53a:	e030      	b.n	800a59e <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a53c:	68f8      	ldr	r0, [r7, #12]
 800a53e:	f7ff fc77 	bl	8009e30 <SDMMC_GetCommandResponse>
 800a542:	4603      	mov	r3, r0
 800a544:	461a      	mov	r2, r3
 800a546:	7afb      	ldrb	r3, [r7, #11]
 800a548:	4293      	cmp	r3, r2
 800a54a:	d001      	beq.n	800a550 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a54c:	2301      	movs	r3, #1
 800a54e:	e026      	b.n	800a59e <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a556:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a558:	2100      	movs	r1, #0
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	f7ff fc75 	bl	8009e4a <SDMMC_GetResponse>
 800a560:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d106      	bne.n	800a57a <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	0c1b      	lsrs	r3, r3, #16
 800a570:	b29a      	uxth	r2, r3
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a576:	2300      	movs	r3, #0
 800a578:	e011      	b.n	800a59e <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a580:	2b00      	cmp	r3, #0
 800a582:	d002      	beq.n	800a58a <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a584:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a588:	e009      	b.n	800a59e <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a590:	2b00      	cmp	r3, #0
 800a592:	d002      	beq.n	800a59a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a598:	e001      	b.n	800a59e <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a59a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	371c      	adds	r7, #28
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd90      	pop	{r4, r7, pc}
 800a5a6:	bf00      	nop
 800a5a8:	200000ac 	.word	0x200000ac
 800a5ac:	10624dd3 	.word	0x10624dd3

0800a5b0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a5b0:	b490      	push	{r4, r7}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800a5b8:	4b18      	ldr	r3, [pc, #96]	; (800a61c <SDMMC_GetCmdResp7+0x6c>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a18      	ldr	r2, [pc, #96]	; (800a620 <SDMMC_GetCmdResp7+0x70>)
 800a5be:	fba2 2303 	umull	r2, r3, r2, r3
 800a5c2:	0a5b      	lsrs	r3, r3, #9
 800a5c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5c8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800a5cc:	4623      	mov	r3, r4
 800a5ce:	1e5c      	subs	r4, r3, #1
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d102      	bne.n	800a5da <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a5d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a5d8:	e01a      	b.n	800a610 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5de:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d0f2      	beq.n	800a5cc <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ea:	f003 0304 	and.w	r3, r3, #4
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d004      	beq.n	800a5fc <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2240      	movs	r2, #64	; 0x40
 800a5f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5f8:	2304      	movs	r3, #4
 800a5fa:	e009      	b.n	800a610 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a604:	2b00      	cmp	r3, #0
 800a606:	d002      	beq.n	800a60e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2240      	movs	r2, #64	; 0x40
 800a60c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a60e:	2300      	movs	r3, #0
  
}
 800a610:	4618      	mov	r0, r3
 800a612:	3708      	adds	r7, #8
 800a614:	46bd      	mov	sp, r7
 800a616:	bc90      	pop	{r4, r7}
 800a618:	4770      	bx	lr
 800a61a:	bf00      	nop
 800a61c:	200000ac 	.word	0x200000ac
 800a620:	10624dd3 	.word	0x10624dd3

0800a624 <Init_Display>:

//
//  }

void Init_Display(void)
{
 800a624:	b598      	push	{r3, r4, r7, lr}
 800a626:	af00      	add	r7, sp, #0
	BSP_LCD_Init();
 800a628:	f7f6 fff6 	bl	8001618 <BSP_LCD_Init>

	/* Initialize TouchScreen in Interrupts Mode */
	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800a62c:	f7f7 f864 	bl	80016f8 <BSP_LCD_GetXSize>
 800a630:	4603      	mov	r3, r0
 800a632:	b29c      	uxth	r4, r3
 800a634:	f7f7 f874 	bl	8001720 <BSP_LCD_GetYSize>
 800a638:	4603      	mov	r3, r0
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	4619      	mov	r1, r3
 800a63e:	4620      	mov	r0, r4
 800a640:	f7f8 fa4c 	bl	8002adc <BSP_TS_Init>

	BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FB_START_ADDRESS);
 800a644:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800a648:	2001      	movs	r0, #1
 800a64a:	f7f7 f87d 	bl	8001748 <BSP_LCD_LayerDefaultInit>

	/* Set LCD Foreground Layer  */
	BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 800a64e:	2001      	movs	r0, #1
 800a650:	f7f7 f8da 	bl	8001808 <BSP_LCD_SelectLayer>

	/* Enable LCD Display */
	BSP_LCD_DisplayOn();
 800a654:	f7f7 fe74 	bl	8002340 <BSP_LCD_DisplayOn>


	/* Clear the LCD */
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800a658:	f04f 30ff 	mov.w	r0, #4294967295
 800a65c:	f7f7 f8fc 	bl	8001858 <BSP_LCD_SetBackColor>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800a660:	f04f 30ff 	mov.w	r0, #4294967295
 800a664:	f7f7 f92c 	bl	80018c0 <BSP_LCD_Clear>


	/* Set the LCD Text Color */
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 800a668:	4802      	ldr	r0, [pc, #8]	; (800a674 <Init_Display+0x50>)
 800a66a:	f7f7 f8dd 	bl	8001828 <BSP_LCD_SetTextColor>

	/* Display LCD messages */
	//BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"KiCAD Team Bitch !", CENTER_MODE);
	//BSP_LCD_DisplayStringAt(0, 35, (uint8_t *)"Drivers examples", CENTER_MODE);
}
 800a66e:	bf00      	nop
 800a670:	bd98      	pop	{r3, r4, r7, pc}
 800a672:	bf00      	nop
 800a674:	ff000080 	.word	0xff000080

0800a678 <Display_Render>:


void Display_Render(void)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	af00      	add	r7, sp, #0
	/* Clear the LCD */
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800a67c:	f04f 30ff 	mov.w	r0, #4294967295
 800a680:	f7f7 f8ea 	bl	8001858 <BSP_LCD_SetBackColor>
	//BSP_LCD_Clear(LCD_COLOR_WHITE);

	/* Set the LCD Text Color */
	BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 800a684:	480c      	ldr	r0, [pc, #48]	; (800a6b8 <Display_Render+0x40>)
 800a686:	f7f7 f8cf 	bl	8001828 <BSP_LCD_SetTextColor>

	/* Main Analyzer Title */
	BSP_LCD_SetFont(&Font16);
 800a68a:	480c      	ldr	r0, [pc, #48]	; (800a6bc <Display_Render+0x44>)
 800a68c:	f7f7 f8fe 	bl	800188c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"CPE Lyon : Raw Signal !", CENTER_MODE);
 800a690:	2301      	movs	r3, #1
 800a692:	4a0b      	ldr	r2, [pc, #44]	; (800a6c0 <Display_Render+0x48>)
 800a694:	210a      	movs	r1, #10
 800a696:	2000      	movs	r0, #0
 800a698:	f7f7 f97e 	bl	8001998 <BSP_LCD_DisplayStringAt>

	/* Plot Background */
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800a69c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800a6a0:	f7f7 f8c2 	bl	8001828 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(PLOT_X, PLOT_Y, PLOT_WIDTH, PLOT_HEIGHT);
 800a6a4:	2396      	movs	r3, #150	; 0x96
 800a6a6:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800a6aa:	2128      	movs	r1, #40	; 0x28
 800a6ac:	2014      	movs	r0, #20
 800a6ae:	f7f7 fd2d 	bl	800210c <BSP_LCD_FillRect>

	//Plot_Signal((uint8_t*)signal_test_buffer, SIGNAL_BUFF);
}
 800a6b2:	bf00      	nop
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	ffffa500 	.word	0xffffa500
 800a6bc:	20000030 	.word	0x20000030
 800a6c0:	0800d6fc 	.word	0x0800d6fc

0800a6c4 <Draw_GUI>:

void Draw_GUI(void)
{
 800a6c4:	b5b0      	push	{r4, r5, r7, lr}
 800a6c6:	b082      	sub	sp, #8
 800a6c8:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800a6ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ce:	f7f7 f8ab 	bl	8001828 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(GUI_X, GUI_Y, GUI_WIDTH, GUI_HEIGHT);
 800a6d2:	2350      	movs	r3, #80	; 0x50
 800a6d4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800a6d8:	21c3      	movs	r1, #195	; 0xc3
 800a6da:	2014      	movs	r0, #20
 800a6dc:	f7f7 fd16 	bl	800210c <BSP_LCD_FillRect>

	for(int i = 0; i < NUMBER_OF_BUTTON ; i++)
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	607b      	str	r3, [r7, #4]
 800a6e4:	e08f      	b.n	800a806 <Draw_GUI+0x142>
	{
		BSP_LCD_SetTextColor(button_list[i].color);
 800a6e6:	4957      	ldr	r1, [pc, #348]	; (800a844 <Draw_GUI+0x180>)
 800a6e8:	687a      	ldr	r2, [r7, #4]
 800a6ea:	4613      	mov	r3, r2
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	4413      	add	r3, r2
 800a6f0:	009b      	lsls	r3, r3, #2
 800a6f2:	440b      	add	r3, r1
 800a6f4:	330c      	adds	r3, #12
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7f7 f895 	bl	8001828 <BSP_LCD_SetTextColor>
		if(button_list[i].is_active == 0)
 800a6fe:	4951      	ldr	r1, [pc, #324]	; (800a844 <Draw_GUI+0x180>)
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	4613      	mov	r3, r2
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	4413      	add	r3, r2
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	440b      	add	r3, r1
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d128      	bne.n	800a764 <Draw_GUI+0xa0>
		{
			BSP_LCD_DrawRect(button_list[i].x_pos, button_list[i].y_pos, button_list[i].width, button_list[i].height);
 800a712:	494c      	ldr	r1, [pc, #304]	; (800a844 <Draw_GUI+0x180>)
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	4613      	mov	r3, r2
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	4413      	add	r3, r2
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	440b      	add	r3, r1
 800a720:	3302      	adds	r3, #2
 800a722:	8818      	ldrh	r0, [r3, #0]
 800a724:	4947      	ldr	r1, [pc, #284]	; (800a844 <Draw_GUI+0x180>)
 800a726:	687a      	ldr	r2, [r7, #4]
 800a728:	4613      	mov	r3, r2
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	4413      	add	r3, r2
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	440b      	add	r3, r1
 800a732:	3304      	adds	r3, #4
 800a734:	881c      	ldrh	r4, [r3, #0]
 800a736:	4943      	ldr	r1, [pc, #268]	; (800a844 <Draw_GUI+0x180>)
 800a738:	687a      	ldr	r2, [r7, #4]
 800a73a:	4613      	mov	r3, r2
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	4413      	add	r3, r2
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	440b      	add	r3, r1
 800a744:	3306      	adds	r3, #6
 800a746:	881d      	ldrh	r5, [r3, #0]
 800a748:	493e      	ldr	r1, [pc, #248]	; (800a844 <Draw_GUI+0x180>)
 800a74a:	687a      	ldr	r2, [r7, #4]
 800a74c:	4613      	mov	r3, r2
 800a74e:	009b      	lsls	r3, r3, #2
 800a750:	4413      	add	r3, r2
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	440b      	add	r3, r1
 800a756:	3308      	adds	r3, #8
 800a758:	881b      	ldrh	r3, [r3, #0]
 800a75a:	462a      	mov	r2, r5
 800a75c:	4621      	mov	r1, r4
 800a75e:	f7f7 fb6b 	bl	8001e38 <BSP_LCD_DrawRect>
 800a762:	e027      	b.n	800a7b4 <Draw_GUI+0xf0>
		}
		else
		{
			BSP_LCD_FillRect(button_list[i].x_pos, button_list[i].y_pos, button_list[i].width, button_list[i].height);
 800a764:	4937      	ldr	r1, [pc, #220]	; (800a844 <Draw_GUI+0x180>)
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	4613      	mov	r3, r2
 800a76a:	009b      	lsls	r3, r3, #2
 800a76c:	4413      	add	r3, r2
 800a76e:	009b      	lsls	r3, r3, #2
 800a770:	440b      	add	r3, r1
 800a772:	3302      	adds	r3, #2
 800a774:	8818      	ldrh	r0, [r3, #0]
 800a776:	4933      	ldr	r1, [pc, #204]	; (800a844 <Draw_GUI+0x180>)
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	4613      	mov	r3, r2
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	4413      	add	r3, r2
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	440b      	add	r3, r1
 800a784:	3304      	adds	r3, #4
 800a786:	881c      	ldrh	r4, [r3, #0]
 800a788:	492e      	ldr	r1, [pc, #184]	; (800a844 <Draw_GUI+0x180>)
 800a78a:	687a      	ldr	r2, [r7, #4]
 800a78c:	4613      	mov	r3, r2
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	4413      	add	r3, r2
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	440b      	add	r3, r1
 800a796:	3306      	adds	r3, #6
 800a798:	881d      	ldrh	r5, [r3, #0]
 800a79a:	492a      	ldr	r1, [pc, #168]	; (800a844 <Draw_GUI+0x180>)
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	4613      	mov	r3, r2
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	4413      	add	r3, r2
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	440b      	add	r3, r1
 800a7a8:	3308      	adds	r3, #8
 800a7aa:	881b      	ldrh	r3, [r3, #0]
 800a7ac:	462a      	mov	r2, r5
 800a7ae:	4621      	mov	r1, r4
 800a7b0:	f7f7 fcac 	bl	800210c <BSP_LCD_FillRect>
		}
		BSP_LCD_SetFont(&Font8);
 800a7b4:	4824      	ldr	r0, [pc, #144]	; (800a848 <Draw_GUI+0x184>)
 800a7b6:	f7f7 f869 	bl	800188c <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(button_list[i].x_pos + 15, button_list[i].y_pos + 15, button_list[i].text, LEFT_MODE);
 800a7ba:	4922      	ldr	r1, [pc, #136]	; (800a844 <Draw_GUI+0x180>)
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	4613      	mov	r3, r2
 800a7c0:	009b      	lsls	r3, r3, #2
 800a7c2:	4413      	add	r3, r2
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	440b      	add	r3, r1
 800a7c8:	3302      	adds	r3, #2
 800a7ca:	881b      	ldrh	r3, [r3, #0]
 800a7cc:	330f      	adds	r3, #15
 800a7ce:	b298      	uxth	r0, r3
 800a7d0:	491c      	ldr	r1, [pc, #112]	; (800a844 <Draw_GUI+0x180>)
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	4613      	mov	r3, r2
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	4413      	add	r3, r2
 800a7da:	009b      	lsls	r3, r3, #2
 800a7dc:	440b      	add	r3, r1
 800a7de:	3304      	adds	r3, #4
 800a7e0:	881b      	ldrh	r3, [r3, #0]
 800a7e2:	330f      	adds	r3, #15
 800a7e4:	b29c      	uxth	r4, r3
 800a7e6:	4917      	ldr	r1, [pc, #92]	; (800a844 <Draw_GUI+0x180>)
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	4613      	mov	r3, r2
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	4413      	add	r3, r2
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	440b      	add	r3, r1
 800a7f4:	3310      	adds	r3, #16
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	2303      	movs	r3, #3
 800a7fa:	4621      	mov	r1, r4
 800a7fc:	f7f7 f8cc 	bl	8001998 <BSP_LCD_DisplayStringAt>
	for(int i = 0; i < NUMBER_OF_BUTTON ; i++)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	3301      	adds	r3, #1
 800a804:	607b      	str	r3, [r7, #4]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2b02      	cmp	r3, #2
 800a80a:	f77f af6c 	ble.w	800a6e6 <Draw_GUI+0x22>
	}

	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTCYAN);
 800a80e:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 800a812:	f7f7 f809 	bl	8001828 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(DETEC_CNT_X, DETEC_CNT_Y, DETEC_CNT_WIDTH, DETEC_CNT_HEIGHT);
 800a816:	231e      	movs	r3, #30
 800a818:	2264      	movs	r2, #100	; 0x64
 800a81a:	21f0      	movs	r1, #240	; 0xf0
 800a81c:	2014      	movs	r0, #20
 800a81e:	f7f7 fc75 	bl	800210c <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800a822:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800a826:	f7f6 ffff 	bl	8001828 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font8);
 800a82a:	4807      	ldr	r0, [pc, #28]	; (800a848 <Draw_GUI+0x184>)
 800a82c:	f7f7 f82e 	bl	800188c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(DETEC_CNT_X + 10, DETEC_CNT_Y + 10, detection_label, LEFT_MODE);
 800a830:	2303      	movs	r3, #3
 800a832:	4a06      	ldr	r2, [pc, #24]	; (800a84c <Draw_GUI+0x188>)
 800a834:	21fa      	movs	r1, #250	; 0xfa
 800a836:	201e      	movs	r0, #30
 800a838:	f7f7 f8ae 	bl	8001998 <BSP_LCD_DisplayStringAt>

}
 800a83c:	bf00      	nop
 800a83e:	3708      	adds	r7, #8
 800a840:	46bd      	mov	sp, r7
 800a842:	bdb0      	pop	{r4, r5, r7, pc}
 800a844:	2000004c 	.word	0x2000004c
 800a848:	20000038 	.word	0x20000038
 800a84c:	20000088 	.word	0x20000088

0800a850 <Plot_Signal>:

void Plot_Signal(uint8_t *buffer, uint16_t nbr_pts)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b086      	sub	sp, #24
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	460b      	mov	r3, r1
 800a85a:	807b      	strh	r3, [r7, #2]
	float pts1 = 0;
 800a85c:	f04f 0300 	mov.w	r3, #0
 800a860:	613b      	str	r3, [r7, #16]
	float time_step = 0;
 800a862:	f04f 0300 	mov.w	r3, #0
 800a866:	60fb      	str	r3, [r7, #12]

	time_step = 1;
 800a868:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800a86c:	60fb      	str	r3, [r7, #12]

	/* Clear Last Signal */
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800a86e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800a872:	f7f6 ffd9 	bl	8001828 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(PLOT_X, PLOT_Y, PLOT_WIDTH, PLOT_HEIGHT);
 800a876:	2396      	movs	r3, #150	; 0x96
 800a878:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800a87c:	2128      	movs	r1, #40	; 0x28
 800a87e:	2014      	movs	r0, #20
 800a880:	f7f7 fc44 	bl	800210c <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);
 800a884:	482e      	ldr	r0, [pc, #184]	; (800a940 <Plot_Signal+0xf0>)
 800a886:	f7f6 ffcf 	bl	8001828 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(PLOT_X - 5, PLOT_Y - 5, PLOT_WIDTH + 10, PLOT_HEIGHT + 10);
 800a88a:	23a0      	movs	r3, #160	; 0xa0
 800a88c:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800a890:	2123      	movs	r1, #35	; 0x23
 800a892:	200f      	movs	r0, #15
 800a894:	f7f7 fc3a 	bl	800210c <BSP_LCD_FillRect>

	BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800a898:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 800a89c:	f7f6 ffc4 	bl	8001828 <BSP_LCD_SetTextColor>

	for(uint16_t i = 0 ; i < nbr_pts ; i++)
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	82fb      	strh	r3, [r7, #22]
 800a8a4:	e044      	b.n	800a930 <Plot_Signal+0xe0>
	{
		pts1 = buffer[i];
 800a8a6:	8afb      	ldrh	r3, [r7, #22]
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	4413      	add	r3, r2
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	ee07 3a90 	vmov	s15, r3
 800a8b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8b6:	edc7 7a04 	vstr	s15, [r7, #16]
		pts1 = (pts1 / 0xFF);
 800a8ba:	ed97 7a04 	vldr	s14, [r7, #16]
 800a8be:	eddf 6a21 	vldr	s13, [pc, #132]	; 800a944 <Plot_Signal+0xf4>
 800a8c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a8c6:	edc7 7a04 	vstr	s15, [r7, #16]
		pts1 = (1 - pts1);
 800a8ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8ce:	edd7 7a04 	vldr	s15, [r7, #16]
 800a8d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8d6:	edc7 7a04 	vstr	s15, [r7, #16]

		pts1 = PLOT_Y + pts1 * PLOT_HEIGHT;
 800a8da:	edd7 7a04 	vldr	s15, [r7, #16]
 800a8de:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800a948 <Plot_Signal+0xf8>
 800a8e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a8e6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800a94c <Plot_Signal+0xfc>
 800a8ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a8ee:	edc7 7a04 	vstr	s15, [r7, #16]

		BSP_LCD_DrawPixel(PLOT_X + (uint16_t)(time_step * i), (uint16_t)(pts1), LCD_COLOR_YELLOW);
 800a8f2:	8afb      	ldrh	r3, [r7, #22]
 800a8f4:	ee07 3a90 	vmov	s15, r3
 800a8f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a8fc:	edd7 7a03 	vldr	s15, [r7, #12]
 800a900:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a904:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a908:	ee17 3a90 	vmov	r3, s15
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	3314      	adds	r3, #20
 800a910:	b29b      	uxth	r3, r3
 800a912:	edd7 7a04 	vldr	s15, [r7, #16]
 800a916:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a91a:	ee17 2a90 	vmov	r2, s15
 800a91e:	b291      	uxth	r1, r2
 800a920:	f06f 02ff 	mvn.w	r2, #255	; 0xff
 800a924:	4618      	mov	r0, r3
 800a926:	f7f7 fba9 	bl	800207c <BSP_LCD_DrawPixel>
	for(uint16_t i = 0 ; i < nbr_pts ; i++)
 800a92a:	8afb      	ldrh	r3, [r7, #22]
 800a92c:	3301      	adds	r3, #1
 800a92e:	82fb      	strh	r3, [r7, #22]
 800a930:	8afa      	ldrh	r2, [r7, #22]
 800a932:	887b      	ldrh	r3, [r7, #2]
 800a934:	429a      	cmp	r2, r3
 800a936:	d3b6      	bcc.n	800a8a6 <Plot_Signal+0x56>

	}


}
 800a938:	bf00      	nop
 800a93a:	3718      	adds	r7, #24
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}
 800a940:	ff404040 	.word	0xff404040
 800a944:	437f0000 	.word	0x437f0000
 800a948:	43160000 	.word	0x43160000
 800a94c:	42200000 	.word	0x42200000

0800a950 <Plot_Threshold>:

void Plot_Threshold(float th_ratio)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	ed87 0a01 	vstr	s0, [r7, #4]

	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800a95a:	4819      	ldr	r0, [pc, #100]	; (800a9c0 <Plot_Threshold+0x70>)
 800a95c:	f7f6 ff64 	bl	8001828 <BSP_LCD_SetTextColor>

	BSP_LCD_DrawLine(PLOT_X, (uint16_t)(PLOT_Y + (1- th_ratio) * PLOT_HEIGHT), PLOT_X + PLOT_WIDTH, (uint16_t)(PLOT_Y + (1- th_ratio) * PLOT_HEIGHT));
 800a960:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a964:	edd7 7a01 	vldr	s15, [r7, #4]
 800a968:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a96c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800a9c4 <Plot_Threshold+0x74>
 800a970:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a974:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800a9c8 <Plot_Threshold+0x78>
 800a978:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a97c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a980:	ee17 3a90 	vmov	r3, s15
 800a984:	b299      	uxth	r1, r3
 800a986:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a98a:	edd7 7a01 	vldr	s15, [r7, #4]
 800a98e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a992:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800a9c4 <Plot_Threshold+0x74>
 800a996:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a99a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800a9c8 <Plot_Threshold+0x78>
 800a99e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a9a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9a6:	ee17 3a90 	vmov	r3, s15
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800a9b0:	2014      	movs	r0, #20
 800a9b2:	f7f7 f975 	bl	8001ca0 <BSP_LCD_DrawLine>
}
 800a9b6:	bf00      	nop
 800a9b8:	3708      	adds	r7, #8
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	ffff0000 	.word	0xffff0000
 800a9c4:	43160000 	.word	0x43160000
 800a9c8:	42200000 	.word	0x42200000

0800a9cc <Draw_Signal_Marker>:

void Draw_Signal_Marker(SIGNAL_STATE signal_state)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	71fb      	strb	r3, [r7, #7]
	if(signal_state == SIGNAL_HERE)
 800a9d6:	79fb      	ldrb	r3, [r7, #7]
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d103      	bne.n	800a9e4 <Draw_Signal_Marker+0x18>
	{
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800a9dc:	4807      	ldr	r0, [pc, #28]	; (800a9fc <Draw_Signal_Marker+0x30>)
 800a9de:	f7f6 ff23 	bl	8001828 <BSP_LCD_SetTextColor>
 800a9e2:	e002      	b.n	800a9ea <Draw_Signal_Marker+0x1e>
	}
	else
	{
		BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800a9e4:	4806      	ldr	r0, [pc, #24]	; (800aa00 <Draw_Signal_Marker+0x34>)
 800a9e6:	f7f6 ff1f 	bl	8001828 <BSP_LCD_SetTextColor>
	}

	BSP_LCD_FillCircle(15, 15, 10);
 800a9ea:	220a      	movs	r2, #10
 800a9ec:	210f      	movs	r1, #15
 800a9ee:	200f      	movs	r0, #15
 800a9f0:	f7f7 fc06 	bl	8002200 <BSP_LCD_FillCircle>

}
 800a9f4:	bf00      	nop
 800a9f6:	3708      	adds	r7, #8
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}
 800a9fc:	ffff0000 	.word	0xffff0000
 800aa00:	ff0000ff 	.word	0xff0000ff

0800aa04 <Draw_Sampling_Target_Marker>:

void Draw_Sampling_Target_Marker()
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
 800aa08:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
 800aa0c:	f7f6 ff0c 	bl	8001828 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(40, 15, 10);
 800aa10:	220a      	movs	r2, #10
 800aa12:	210f      	movs	r1, #15
 800aa14:	2028      	movs	r0, #40	; 0x28
 800aa16:	f7f7 fbf3 	bl	8002200 <BSP_LCD_FillCircle>
}
 800aa1a:	bf00      	nop
 800aa1c:	bd80      	pop	{r7, pc}
	...

0800aa20 <Update_Signal_Labal_Cnt>:

void Update_Signal_Labal_Cnt(uint16_t cnt)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	4603      	mov	r3, r0
 800aa28:	80fb      	strh	r3, [r7, #6]
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800aa2a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa2e:	f7f6 fefb 	bl	8001828 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(DETEC_CNT_X, DETEC_CNT_Y, DETEC_CNT_WIDTH, DETEC_CNT_HEIGHT);
 800aa32:	231e      	movs	r3, #30
 800aa34:	2264      	movs	r2, #100	; 0x64
 800aa36:	21f0      	movs	r1, #240	; 0xf0
 800aa38:	2014      	movs	r0, #20
 800aa3a:	f7f7 fb67 	bl	800210c <BSP_LCD_FillRect>

	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTCYAN);
 800aa3e:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 800aa42:	f7f6 fef1 	bl	8001828 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(DETEC_CNT_X, DETEC_CNT_Y, DETEC_CNT_WIDTH, DETEC_CNT_HEIGHT);
 800aa46:	231e      	movs	r3, #30
 800aa48:	2264      	movs	r2, #100	; 0x64
 800aa4a:	21f0      	movs	r1, #240	; 0xf0
 800aa4c:	2014      	movs	r0, #20
 800aa4e:	f7f7 fb5d 	bl	800210c <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800aa52:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800aa56:	f7f6 fee7 	bl	8001828 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font8);
 800aa5a:	4809      	ldr	r0, [pc, #36]	; (800aa80 <Update_Signal_Labal_Cnt+0x60>)
 800aa5c:	f7f6 ff16 	bl	800188c <BSP_LCD_SetFont>

	sprintf(detection_label, "Signals : %d", cnt);
 800aa60:	88fb      	ldrh	r3, [r7, #6]
 800aa62:	461a      	mov	r2, r3
 800aa64:	4907      	ldr	r1, [pc, #28]	; (800aa84 <Update_Signal_Labal_Cnt+0x64>)
 800aa66:	4808      	ldr	r0, [pc, #32]	; (800aa88 <Update_Signal_Labal_Cnt+0x68>)
 800aa68:	f002 fa14 	bl	800ce94 <siprintf>
	BSP_LCD_DisplayStringAt(DETEC_CNT_X + 10, DETEC_CNT_Y + 10, detection_label, LEFT_MODE);
 800aa6c:	2303      	movs	r3, #3
 800aa6e:	4a06      	ldr	r2, [pc, #24]	; (800aa88 <Update_Signal_Labal_Cnt+0x68>)
 800aa70:	21fa      	movs	r1, #250	; 0xfa
 800aa72:	201e      	movs	r0, #30
 800aa74:	f7f6 ff90 	bl	8001998 <BSP_LCD_DisplayStringAt>
}
 800aa78:	bf00      	nop
 800aa7a:	3708      	adds	r7, #8
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	20000038 	.word	0x20000038
 800aa84:	0800d714 	.word	0x0800d714
 800aa88:	20000088 	.word	0x20000088

0800aa8c <active_button>:

void active_button(uint8_t index)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b085      	sub	sp, #20
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	4603      	mov	r3, r0
 800aa94:	71fb      	strb	r3, [r7, #7]
	for(int j = 0 ; j < NUMBER_OF_BUTTON ; j++)
 800aa96:	2300      	movs	r3, #0
 800aa98:	60fb      	str	r3, [r7, #12]
 800aa9a:	e01d      	b.n	800aad8 <active_button+0x4c>
	{
		if(j != index)
 800aa9c:	79fb      	ldrb	r3, [r7, #7]
 800aa9e:	68fa      	ldr	r2, [r7, #12]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d009      	beq.n	800aab8 <active_button+0x2c>
		{
			button_list[j].is_active = 0;
 800aaa4:	4911      	ldr	r1, [pc, #68]	; (800aaec <active_button+0x60>)
 800aaa6:	68fa      	ldr	r2, [r7, #12]
 800aaa8:	4613      	mov	r3, r2
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	4413      	add	r3, r2
 800aaae:	009b      	lsls	r3, r3, #2
 800aab0:	440b      	add	r3, r1
 800aab2:	2200      	movs	r2, #0
 800aab4:	701a      	strb	r2, [r3, #0]
 800aab6:	e00c      	b.n	800aad2 <active_button+0x46>
		}
		else{
			button_list[j].is_active = 1;
 800aab8:	490c      	ldr	r1, [pc, #48]	; (800aaec <active_button+0x60>)
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	4613      	mov	r3, r2
 800aabe:	009b      	lsls	r3, r3, #2
 800aac0:	4413      	add	r3, r2
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	440b      	add	r3, r1
 800aac6:	2201      	movs	r2, #1
 800aac8:	701a      	strb	r2, [r3, #0]
			plot_id = j;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	b2da      	uxtb	r2, r3
 800aace:	4b08      	ldr	r3, [pc, #32]	; (800aaf0 <active_button+0x64>)
 800aad0:	701a      	strb	r2, [r3, #0]
	for(int j = 0 ; j < NUMBER_OF_BUTTON ; j++)
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	3301      	adds	r3, #1
 800aad6:	60fb      	str	r3, [r7, #12]
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2b02      	cmp	r3, #2
 800aadc:	ddde      	ble.n	800aa9c <active_button+0x10>
		}
	}
}
 800aade:	bf00      	nop
 800aae0:	3714      	adds	r7, #20
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr
 800aaea:	bf00      	nop
 800aaec:	2000004c 	.word	0x2000004c
 800aaf0:	20000350 	.word	0x20000350

0800aaf4 <TouchScreen_Polling>:

void TouchScreen_Polling(void)
{
 800aaf4:	b590      	push	{r4, r7, lr}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
	static uint8_t t = 0;
	uint16_t x = 0;
 800aafa:	2300      	movs	r3, #0
 800aafc:	807b      	strh	r3, [r7, #2]
	uint16_t y = 0;
 800aafe:	2300      	movs	r3, #0
 800ab00:	803b      	strh	r3, [r7, #0]

	BSP_TS_GetState(&TS_State);
 800ab02:	4833      	ldr	r0, [pc, #204]	; (800abd0 <TouchScreen_Polling+0xdc>)
 800ab04:	f7f8 f82a 	bl	8002b5c <BSP_TS_GetState>

	if(TS_State.touchDetected)
 800ab08:	4b31      	ldr	r3, [pc, #196]	; (800abd0 <TouchScreen_Polling+0xdc>)
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d05b      	beq.n	800abc8 <TouchScreen_Polling+0xd4>
	{
		x = TS_State.touchX[0];
 800ab10:	4b2f      	ldr	r3, [pc, #188]	; (800abd0 <TouchScreen_Polling+0xdc>)
 800ab12:	885b      	ldrh	r3, [r3, #2]
 800ab14:	807b      	strh	r3, [r7, #2]
		y = TS_State.touchY[0];
 800ab16:	4b2e      	ldr	r3, [pc, #184]	; (800abd0 <TouchScreen_Polling+0xdc>)
 800ab18:	899b      	ldrh	r3, [r3, #12]
 800ab1a:	803b      	strh	r3, [r7, #0]

		for(int i = 0; i < NUMBER_OF_BUTTON ; i++)
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	607b      	str	r3, [r7, #4]
 800ab20:	e04f      	b.n	800abc2 <TouchScreen_Polling+0xce>
		{
			if(x > button_list[i].x_pos && x < (button_list[i].x_pos + button_list[i].width))
 800ab22:	492c      	ldr	r1, [pc, #176]	; (800abd4 <TouchScreen_Polling+0xe0>)
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	4613      	mov	r3, r2
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	4413      	add	r3, r2
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	440b      	add	r3, r1
 800ab30:	3302      	adds	r3, #2
 800ab32:	881b      	ldrh	r3, [r3, #0]
 800ab34:	887a      	ldrh	r2, [r7, #2]
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d940      	bls.n	800abbc <TouchScreen_Polling+0xc8>
 800ab3a:	8879      	ldrh	r1, [r7, #2]
 800ab3c:	4825      	ldr	r0, [pc, #148]	; (800abd4 <TouchScreen_Polling+0xe0>)
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	4613      	mov	r3, r2
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	4413      	add	r3, r2
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	4403      	add	r3, r0
 800ab4a:	3302      	adds	r3, #2
 800ab4c:	881b      	ldrh	r3, [r3, #0]
 800ab4e:	461c      	mov	r4, r3
 800ab50:	4820      	ldr	r0, [pc, #128]	; (800abd4 <TouchScreen_Polling+0xe0>)
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	4613      	mov	r3, r2
 800ab56:	009b      	lsls	r3, r3, #2
 800ab58:	4413      	add	r3, r2
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	4403      	add	r3, r0
 800ab5e:	3306      	adds	r3, #6
 800ab60:	881b      	ldrh	r3, [r3, #0]
 800ab62:	4423      	add	r3, r4
 800ab64:	4299      	cmp	r1, r3
 800ab66:	da29      	bge.n	800abbc <TouchScreen_Polling+0xc8>
			{
				if(y > button_list[i].y_pos && y < (button_list[i].y_pos + button_list[i].height))
 800ab68:	491a      	ldr	r1, [pc, #104]	; (800abd4 <TouchScreen_Polling+0xe0>)
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	4613      	mov	r3, r2
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	4413      	add	r3, r2
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	440b      	add	r3, r1
 800ab76:	3304      	adds	r3, #4
 800ab78:	881b      	ldrh	r3, [r3, #0]
 800ab7a:	883a      	ldrh	r2, [r7, #0]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d91d      	bls.n	800abbc <TouchScreen_Polling+0xc8>
 800ab80:	8839      	ldrh	r1, [r7, #0]
 800ab82:	4814      	ldr	r0, [pc, #80]	; (800abd4 <TouchScreen_Polling+0xe0>)
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	4613      	mov	r3, r2
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	4413      	add	r3, r2
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	4403      	add	r3, r0
 800ab90:	3304      	adds	r3, #4
 800ab92:	881b      	ldrh	r3, [r3, #0]
 800ab94:	461c      	mov	r4, r3
 800ab96:	480f      	ldr	r0, [pc, #60]	; (800abd4 <TouchScreen_Polling+0xe0>)
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	4613      	mov	r3, r2
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	4413      	add	r3, r2
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	4403      	add	r3, r0
 800aba4:	3308      	adds	r3, #8
 800aba6:	881b      	ldrh	r3, [r3, #0]
 800aba8:	4423      	add	r3, r4
 800abaa:	4299      	cmp	r1, r3
 800abac:	da06      	bge.n	800abbc <TouchScreen_Polling+0xc8>
				{
					active_button(i);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7ff ff6a 	bl	800aa8c <active_button>
					Draw_GUI();
 800abb8:	f7ff fd84 	bl	800a6c4 <Draw_GUI>
		for(int i = 0; i < NUMBER_OF_BUTTON ; i++)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	3301      	adds	r3, #1
 800abc0:	607b      	str	r3, [r7, #4]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2b02      	cmp	r3, #2
 800abc6:	ddac      	ble.n	800ab22 <TouchScreen_Polling+0x2e>
			}
		}


	}
}
 800abc8:	bf00      	nop
 800abca:	370c      	adds	r7, #12
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd90      	pop	{r4, r7, pc}
 800abd0:	20000324 	.word	0x20000324
 800abd4:	2000004c 	.word	0x2000004c

0800abd8 <get_current_plot_ID>:

PLOT_ID get_current_plot_ID()
{
 800abd8:	b480      	push	{r7}
 800abda:	af00      	add	r7, sp, #0
	return plot_id;
 800abdc:	4b03      	ldr	r3, [pc, #12]	; (800abec <get_current_plot_ID+0x14>)
 800abde:	781b      	ldrb	r3, [r3, #0]
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr
 800abea:	bf00      	nop
 800abec:	20000350 	.word	0x20000350

0800abf0 <SCB_EnableICache>:
{
 800abf0:	b480      	push	{r7}
 800abf2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800abf4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800abf8:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800abfc:	4b0b      	ldr	r3, [pc, #44]	; (800ac2c <SCB_EnableICache+0x3c>)
 800abfe:	2200      	movs	r2, #0
 800ac00:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800ac04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ac08:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800ac0c:	4b07      	ldr	r3, [pc, #28]	; (800ac2c <SCB_EnableICache+0x3c>)
 800ac0e:	695b      	ldr	r3, [r3, #20]
 800ac10:	4a06      	ldr	r2, [pc, #24]	; (800ac2c <SCB_EnableICache+0x3c>)
 800ac12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac16:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800ac18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ac1c:	f3bf 8f6f 	isb	sy
}
 800ac20:	bf00      	nop
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr
 800ac2a:	bf00      	nop
 800ac2c:	e000ed00 	.word	0xe000ed00

0800ac30 <SCB_EnableDCache>:
{
 800ac30:	b480      	push	{r7}
 800ac32:	b085      	sub	sp, #20
 800ac34:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800ac36:	4b1d      	ldr	r3, [pc, #116]	; (800acac <SCB_EnableDCache+0x7c>)
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800ac3e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800ac42:	4b1a      	ldr	r3, [pc, #104]	; (800acac <SCB_EnableDCache+0x7c>)
 800ac44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac48:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	0b5b      	lsrs	r3, r3, #13
 800ac4e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ac52:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	08db      	lsrs	r3, r3, #3
 800ac58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac5c:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	015a      	lsls	r2, r3, #5
 800ac62:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800ac66:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800ac68:	68ba      	ldr	r2, [r7, #8]
 800ac6a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800ac6c:	490f      	ldr	r1, [pc, #60]	; (800acac <SCB_EnableDCache+0x7c>)
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	1e5a      	subs	r2, r3, #1
 800ac78:	60ba      	str	r2, [r7, #8]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d1ef      	bne.n	800ac5e <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	1e5a      	subs	r2, r3, #1
 800ac82:	60fa      	str	r2, [r7, #12]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d1e5      	bne.n	800ac54 <SCB_EnableDCache+0x24>
 800ac88:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800ac8c:	4b07      	ldr	r3, [pc, #28]	; (800acac <SCB_EnableDCache+0x7c>)
 800ac8e:	695b      	ldr	r3, [r3, #20]
 800ac90:	4a06      	ldr	r2, [pc, #24]	; (800acac <SCB_EnableDCache+0x7c>)
 800ac92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac96:	6153      	str	r3, [r2, #20]
 800ac98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ac9c:	f3bf 8f6f 	isb	sy
}
 800aca0:	bf00      	nop
 800aca2:	3714      	adds	r7, #20
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr
 800acac:	e000ed00 	.word	0xe000ed00

0800acb0 <HAL_TIM_PeriodElapsedCallback>:
	HAL_TIM_Base_Start_IT(&htim7);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM7)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a0b      	ldr	r2, [pc, #44]	; (800acec <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d010      	beq.n	800ace4 <HAL_TIM_PeriodElapsedCallback+0x34>
	{



	}
	else if(htim->Instance==TIM3)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4a0a      	ldr	r2, [pc, #40]	; (800acf0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d10b      	bne.n	800ace4 <HAL_TIM_PeriodElapsedCallback+0x34>
	{
		TouchScreen_Polling();
 800accc:	f7ff ff12 	bl	800aaf4 <TouchScreen_Polling>
		if(calibration_time < CALIBRATION_TIME)
 800acd0:	4b08      	ldr	r3, [pc, #32]	; (800acf4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800acd2:	881b      	ldrh	r3, [r3, #0]
 800acd4:	2b31      	cmp	r3, #49	; 0x31
 800acd6:	d805      	bhi.n	800ace4 <HAL_TIM_PeriodElapsedCallback+0x34>
		{
			calibration_time++;
 800acd8:	4b06      	ldr	r3, [pc, #24]	; (800acf4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800acda:	881b      	ldrh	r3, [r3, #0]
 800acdc:	3301      	adds	r3, #1
 800acde:	b29a      	uxth	r2, r3
 800ace0:	4b04      	ldr	r3, [pc, #16]	; (800acf4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800ace2:	801a      	strh	r2, [r3, #0]
		}
	}
}
 800ace4:	bf00      	nop
 800ace6:	3708      	adds	r7, #8
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}
 800acec:	40001400 	.word	0x40001400
 800acf0:	40000400 	.word	0x40000400
 800acf4:	20000352 	.word	0x20000352

0800acf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800acfc:	f7ff ff78 	bl	800abf0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800ad00:	f7ff ff96 	bl	800ac30 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ad04:	f7f8 f94a 	bl	8002f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ad08:	f000 f88e 	bl	800ae28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ad0c:	f000 fc9c 	bl	800b648 <MX_GPIO_Init>
  MX_DMA_Init();
 800ad10:	f000 fc2c 	bl	800b56c <MX_DMA_Init>
  MX_DCMI_Init();
 800ad14:	f000 f98a 	bl	800b02c <MX_DCMI_Init>
  MX_DMA2D_Init();
 800ad18:	f000 f9bc 	bl	800b094 <MX_DMA2D_Init>
  MX_FMC_Init();
 800ad1c:	f000 fc44 	bl	800b5a8 <MX_FMC_Init>
  MX_LTDC_Init();
 800ad20:	f000 f9ea 	bl	800b0f8 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800ad24:	f000 fa6a 	bl	800b1fc <MX_QUADSPI_Init>
  MX_RTC_Init();
 800ad28:	f000 fa94 	bl	800b254 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 800ad2c:	f000 fb3a 	bl	800b3a4 <MX_SDMMC1_SD_Init>
  MX_USART1_UART_Init();
 800ad30:	f000 fbec 	bl	800b50c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800ad34:	f000 f926 	bl	800af84 <MX_ADC1_Init>
  MX_TIM7_Init();
 800ad38:	f000 fbb2 	bl	800b4a0 <MX_TIM7_Init>
  MX_TIM3_Init();
 800ad3c:	f000 fb62 	bl	800b404 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  Init_Display();
 800ad40:	f7ff fc70 	bl	800a624 <Init_Display>
  /* Draw Bitmap */
  //BSP_LCD_DrawBitmap((BSP_LCD_GetXSize() - 80) / 2, 65, (uint8_t *)stlogo);

  Display_Render();
 800ad44:	f7ff fc98 	bl	800a678 <Display_Render>
  Draw_GUI();
 800ad48:	f7ff fcbc 	bl	800a6c4 <Draw_GUI>



  Init_Sampling(&hadc1);
 800ad4c:	4832      	ldr	r0, [pc, #200]	; (800ae18 <main+0x120>)
 800ad4e:	f000 ff9d 	bl	800bc8c <Init_Sampling>

  //declencher_acquisition();

  /* Periodic Check of touchscreen) */
  HAL_TIM_Base_Start_IT(&htim3);
 800ad52:	4832      	ldr	r0, [pc, #200]	; (800ae1c <main+0x124>)
 800ad54:	f7fd feda 	bl	8008b0c <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(calibration_time < CALIBRATION_TIME)
 800ad58:	4b31      	ldr	r3, [pc, #196]	; (800ae20 <main+0x128>)
 800ad5a:	881b      	ldrh	r3, [r3, #0]
 800ad5c:	2b31      	cmp	r3, #49	; 0x31
 800ad5e:	d803      	bhi.n	800ad68 <main+0x70>
	{
		signal_handler_process(CALIBRATION_STATE);
 800ad60:	2000      	movs	r0, #0
 800ad62:	f000 ffa7 	bl	800bcb4 <signal_handler_process>
 800ad66:	e00f      	b.n	800ad88 <main+0x90>
	}
	else if(calibration_time == CALIBRATION_TIME)
 800ad68:	4b2d      	ldr	r3, [pc, #180]	; (800ae20 <main+0x128>)
 800ad6a:	881b      	ldrh	r3, [r3, #0]
 800ad6c:	2b32      	cmp	r3, #50	; 0x32
 800ad6e:	d108      	bne.n	800ad82 <main+0x8a>
	{
		signal_handler_process(INIT_REF);
 800ad70:	2001      	movs	r0, #1
 800ad72:	f000 ff9f 	bl	800bcb4 <signal_handler_process>
		Draw_Sampling_Target_Marker();
 800ad76:	f7ff fe45 	bl	800aa04 <Draw_Sampling_Target_Marker>
		calibration_time = CALIBRATION_TIME + 1;
 800ad7a:	4b29      	ldr	r3, [pc, #164]	; (800ae20 <main+0x128>)
 800ad7c:	2233      	movs	r2, #51	; 0x33
 800ad7e:	801a      	strh	r2, [r3, #0]
 800ad80:	e002      	b.n	800ad88 <main+0x90>
	}
	else
	{
		signal_handler_process(IDLE);
 800ad82:	2002      	movs	r0, #2
 800ad84:	f000 ff96 	bl	800bcb4 <signal_handler_process>
	}


	if(can_display() == 1)
 800ad88:	f001 fa78 	bl	800c27c <can_display>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	d13e      	bne.n	800ae10 <main+0x118>
	{
		//Plot_Signal( (corr_func + (corr_max_abs-200)), 400);
		switch(get_current_plot_ID())
 800ad92:	f7ff ff21 	bl	800abd8 <get_current_plot_ID>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d00d      	beq.n	800adb8 <main+0xc0>
 800ad9c:	2b02      	cmp	r3, #2
 800ad9e:	d015      	beq.n	800adcc <main+0xd4>
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d121      	bne.n	800ade8 <main+0xf0>
		{
			case INPUT_PLOT:
				Plot_Signal( get_signal_data(INPUT) , DISPLAY_BUFF_SIZE);
 800ada4:	2000      	movs	r0, #0
 800ada6:	f001 fa99 	bl	800c2dc <get_signal_data>
 800adaa:	4603      	mov	r3, r0
 800adac:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800adb0:	4618      	mov	r0, r3
 800adb2:	f7ff fd4d 	bl	800a850 <Plot_Signal>
				break;
 800adb6:	e017      	b.n	800ade8 <main+0xf0>
			case REF_PLOT:
				Plot_Signal( get_signal_data(REF) , DISPLAY_BUFF_SIZE);
 800adb8:	2001      	movs	r0, #1
 800adba:	f001 fa8f 	bl	800c2dc <get_signal_data>
 800adbe:	4603      	mov	r3, r0
 800adc0:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800adc4:	4618      	mov	r0, r3
 800adc6:	f7ff fd43 	bl	800a850 <Plot_Signal>
				break;
 800adca:	e00d      	b.n	800ade8 <main+0xf0>
			case CORR_PLOT:
				Plot_Signal( get_signal_data(CORR) , DISPLAY_BUFF_SIZE);
 800adcc:	2002      	movs	r0, #2
 800adce:	f001 fa85 	bl	800c2dc <get_signal_data>
 800add2:	4603      	mov	r3, r0
 800add4:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800add8:	4618      	mov	r0, r3
 800adda:	f7ff fd39 	bl	800a850 <Plot_Signal>
				Plot_Threshold(THRESHOLD_RATIO);
 800adde:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800ae24 <main+0x12c>
 800ade2:	f7ff fdb5 	bl	800a950 <Plot_Threshold>
				break;
 800ade6:	bf00      	nop
		}

		if(is_signal_here())
 800ade8:	f001 fa60 	bl	800c2ac <is_signal_here>
 800adec:	4603      	mov	r3, r0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d009      	beq.n	800ae06 <main+0x10e>
		{
			Draw_Signal_Marker(SIGNAL_HERE);
 800adf2:	2001      	movs	r0, #1
 800adf4:	f7ff fdea 	bl	800a9cc <Draw_Signal_Marker>
			Update_Signal_Labal_Cnt(getSignalCnt());
 800adf8:	f001 fa64 	bl	800c2c4 <getSignalCnt>
 800adfc:	4603      	mov	r3, r0
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7ff fe0e 	bl	800aa20 <Update_Signal_Labal_Cnt>
 800ae04:	e002      	b.n	800ae0c <main+0x114>
		}
		else
		{
			Draw_Signal_Marker(NO_SIGNAL);
 800ae06:	2000      	movs	r0, #0
 800ae08:	f7ff fde0 	bl	800a9cc <Draw_Signal_Marker>
		}

		disable_signal_display();
 800ae0c:	f001 fa42 	bl	800c294 <disable_signal_display>
	}

	HAL_Delay(20);
 800ae10:	2014      	movs	r0, #20
 800ae12:	f7f8 f921 	bl	8003058 <HAL_Delay>
	if(calibration_time < CALIBRATION_TIME)
 800ae16:	e79f      	b.n	800ad58 <main+0x60>
 800ae18:	200005bc 	.word	0x200005bc
 800ae1c:	200004d4 	.word	0x200004d4
 800ae20:	20000352 	.word	0x20000352
 800ae24:	3f666666 	.word	0x3f666666

0800ae28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b0b4      	sub	sp, #208	; 0xd0
 800ae2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ae2e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800ae32:	2230      	movs	r2, #48	; 0x30
 800ae34:	2100      	movs	r1, #0
 800ae36:	4618      	mov	r0, r3
 800ae38:	f002 f824 	bl	800ce84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ae3c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ae40:	2200      	movs	r2, #0
 800ae42:	601a      	str	r2, [r3, #0]
 800ae44:	605a      	str	r2, [r3, #4]
 800ae46:	609a      	str	r2, [r3, #8]
 800ae48:	60da      	str	r2, [r3, #12]
 800ae4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ae4c:	f107 0308 	add.w	r3, r7, #8
 800ae50:	2284      	movs	r2, #132	; 0x84
 800ae52:	2100      	movs	r1, #0
 800ae54:	4618      	mov	r0, r3
 800ae56:	f002 f815 	bl	800ce84 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800ae5a:	f7fb fa87 	bl	800636c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800ae5e:	4b46      	ldr	r3, [pc, #280]	; (800af78 <SystemClock_Config+0x150>)
 800ae60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae62:	4a45      	ldr	r2, [pc, #276]	; (800af78 <SystemClock_Config+0x150>)
 800ae64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae68:	6413      	str	r3, [r2, #64]	; 0x40
 800ae6a:	4b43      	ldr	r3, [pc, #268]	; (800af78 <SystemClock_Config+0x150>)
 800ae6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae72:	607b      	str	r3, [r7, #4]
 800ae74:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ae76:	4b41      	ldr	r3, [pc, #260]	; (800af7c <SystemClock_Config+0x154>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4a40      	ldr	r2, [pc, #256]	; (800af7c <SystemClock_Config+0x154>)
 800ae7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ae80:	6013      	str	r3, [r2, #0]
 800ae82:	4b3e      	ldr	r3, [pc, #248]	; (800af7c <SystemClock_Config+0x154>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ae8a:	603b      	str	r3, [r7, #0]
 800ae8c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800ae8e:	2309      	movs	r3, #9
 800ae90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800ae94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ae98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800aea2:	2302      	movs	r3, #2
 800aea4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800aea8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800aeac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800aeb0:	2319      	movs	r3, #25
 800aeb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800aeb6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800aeba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800aebe:	2302      	movs	r3, #2
 800aec0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800aec4:	2309      	movs	r3, #9
 800aec6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800aeca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800aece:	4618      	mov	r0, r3
 800aed0:	f7fb fb7c 	bl	80065cc <HAL_RCC_OscConfig>
 800aed4:	4603      	mov	r3, r0
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d001      	beq.n	800aede <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800aeda:	f000 fea1 	bl	800bc20 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800aede:	f7fb fa55 	bl	800638c <HAL_PWREx_EnableOverDrive>
 800aee2:	4603      	mov	r3, r0
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d001      	beq.n	800aeec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800aee8:	f000 fe9a 	bl	800bc20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800aeec:	230f      	movs	r3, #15
 800aeee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800aef2:	2302      	movs	r3, #2
 800aef4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800aef8:	2300      	movs	r3, #0
 800aefa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800aefe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800af02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800af06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800af0e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800af12:	2106      	movs	r1, #6
 800af14:	4618      	mov	r0, r3
 800af16:	f7fb fdc9 	bl	8006aac <HAL_RCC_ClockConfig>
 800af1a:	4603      	mov	r3, r0
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d001      	beq.n	800af24 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800af20:	f000 fe7e 	bl	800bc20 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 800af24:	4b16      	ldr	r3, [pc, #88]	; (800af80 <SystemClock_Config+0x158>)
 800af26:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800af28:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800af2c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800af2e:	2305      	movs	r3, #5
 800af30:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800af32:	2302      	movs	r3, #2
 800af34:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800af36:	2303      	movs	r3, #3
 800af38:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800af3a:	2301      	movs	r3, #1
 800af3c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800af3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800af42:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800af44:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af48:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800af4a:	2300      	movs	r3, #0
 800af4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800af4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800af52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800af56:	2300      	movs	r3, #0
 800af58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800af5c:	f107 0308 	add.w	r3, r7, #8
 800af60:	4618      	mov	r0, r3
 800af62:	f7fb ff71 	bl	8006e48 <HAL_RCCEx_PeriphCLKConfig>
 800af66:	4603      	mov	r3, r0
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d001      	beq.n	800af70 <SystemClock_Config+0x148>
  {
    Error_Handler();
 800af6c:	f000 fe58 	bl	800bc20 <Error_Handler>
  }
}
 800af70:	bf00      	nop
 800af72:	37d0      	adds	r7, #208	; 0xd0
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}
 800af78:	40023800 	.word	0x40023800
 800af7c:	40007000 	.word	0x40007000
 800af80:	00a00068 	.word	0x00a00068

0800af84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800af8a:	463b      	mov	r3, r7
 800af8c:	2200      	movs	r2, #0
 800af8e:	601a      	str	r2, [r3, #0]
 800af90:	605a      	str	r2, [r3, #4]
 800af92:	609a      	str	r2, [r3, #8]
 800af94:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800af96:	4b22      	ldr	r3, [pc, #136]	; (800b020 <MX_ADC1_Init+0x9c>)
 800af98:	4a22      	ldr	r2, [pc, #136]	; (800b024 <MX_ADC1_Init+0xa0>)
 800af9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800af9c:	4b20      	ldr	r3, [pc, #128]	; (800b020 <MX_ADC1_Init+0x9c>)
 800af9e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800afa2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800afa4:	4b1e      	ldr	r3, [pc, #120]	; (800b020 <MX_ADC1_Init+0x9c>)
 800afa6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800afaa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800afac:	4b1c      	ldr	r3, [pc, #112]	; (800b020 <MX_ADC1_Init+0x9c>)
 800afae:	2200      	movs	r2, #0
 800afb0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800afb2:	4b1b      	ldr	r3, [pc, #108]	; (800b020 <MX_ADC1_Init+0x9c>)
 800afb4:	2201      	movs	r2, #1
 800afb6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800afb8:	4b19      	ldr	r3, [pc, #100]	; (800b020 <MX_ADC1_Init+0x9c>)
 800afba:	2200      	movs	r2, #0
 800afbc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800afc0:	4b17      	ldr	r3, [pc, #92]	; (800b020 <MX_ADC1_Init+0x9c>)
 800afc2:	2200      	movs	r2, #0
 800afc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800afc6:	4b16      	ldr	r3, [pc, #88]	; (800b020 <MX_ADC1_Init+0x9c>)
 800afc8:	4a17      	ldr	r2, [pc, #92]	; (800b028 <MX_ADC1_Init+0xa4>)
 800afca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800afcc:	4b14      	ldr	r3, [pc, #80]	; (800b020 <MX_ADC1_Init+0x9c>)
 800afce:	2200      	movs	r2, #0
 800afd0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800afd2:	4b13      	ldr	r3, [pc, #76]	; (800b020 <MX_ADC1_Init+0x9c>)
 800afd4:	2201      	movs	r2, #1
 800afd6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800afd8:	4b11      	ldr	r3, [pc, #68]	; (800b020 <MX_ADC1_Init+0x9c>)
 800afda:	2201      	movs	r2, #1
 800afdc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800afe0:	4b0f      	ldr	r3, [pc, #60]	; (800b020 <MX_ADC1_Init+0x9c>)
 800afe2:	2200      	movs	r2, #0
 800afe4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800afe6:	480e      	ldr	r0, [pc, #56]	; (800b020 <MX_ADC1_Init+0x9c>)
 800afe8:	f7f8 f858 	bl	800309c <HAL_ADC_Init>
 800afec:	4603      	mov	r3, r0
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d001      	beq.n	800aff6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800aff2:	f000 fe15 	bl	800bc20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800aff6:	2300      	movs	r3, #0
 800aff8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800affa:	2301      	movs	r3, #1
 800affc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800affe:	2306      	movs	r3, #6
 800b000:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b002:	463b      	mov	r3, r7
 800b004:	4619      	mov	r1, r3
 800b006:	4806      	ldr	r0, [pc, #24]	; (800b020 <MX_ADC1_Init+0x9c>)
 800b008:	f7f8 fb9a 	bl	8003740 <HAL_ADC_ConfigChannel>
 800b00c:	4603      	mov	r3, r0
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d001      	beq.n	800b016 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800b012:	f000 fe05 	bl	800bc20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800b016:	bf00      	nop
 800b018:	3710      	adds	r7, #16
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	200005bc 	.word	0x200005bc
 800b024:	40012000 	.word	0x40012000
 800b028:	0f000001 	.word	0x0f000001

0800b02c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800b030:	4b16      	ldr	r3, [pc, #88]	; (800b08c <MX_DCMI_Init+0x60>)
 800b032:	4a17      	ldr	r2, [pc, #92]	; (800b090 <MX_DCMI_Init+0x64>)
 800b034:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800b036:	4b15      	ldr	r3, [pc, #84]	; (800b08c <MX_DCMI_Init+0x60>)
 800b038:	2200      	movs	r2, #0
 800b03a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800b03c:	4b13      	ldr	r3, [pc, #76]	; (800b08c <MX_DCMI_Init+0x60>)
 800b03e:	2200      	movs	r2, #0
 800b040:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800b042:	4b12      	ldr	r3, [pc, #72]	; (800b08c <MX_DCMI_Init+0x60>)
 800b044:	2200      	movs	r2, #0
 800b046:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800b048:	4b10      	ldr	r3, [pc, #64]	; (800b08c <MX_DCMI_Init+0x60>)
 800b04a:	2200      	movs	r2, #0
 800b04c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800b04e:	4b0f      	ldr	r3, [pc, #60]	; (800b08c <MX_DCMI_Init+0x60>)
 800b050:	2200      	movs	r2, #0
 800b052:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800b054:	4b0d      	ldr	r3, [pc, #52]	; (800b08c <MX_DCMI_Init+0x60>)
 800b056:	2200      	movs	r2, #0
 800b058:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800b05a:	4b0c      	ldr	r3, [pc, #48]	; (800b08c <MX_DCMI_Init+0x60>)
 800b05c:	2200      	movs	r2, #0
 800b05e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800b060:	4b0a      	ldr	r3, [pc, #40]	; (800b08c <MX_DCMI_Init+0x60>)
 800b062:	2200      	movs	r2, #0
 800b064:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800b066:	4b09      	ldr	r3, [pc, #36]	; (800b08c <MX_DCMI_Init+0x60>)
 800b068:	2200      	movs	r2, #0
 800b06a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800b06c:	4b07      	ldr	r3, [pc, #28]	; (800b08c <MX_DCMI_Init+0x60>)
 800b06e:	2200      	movs	r2, #0
 800b070:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800b072:	4b06      	ldr	r3, [pc, #24]	; (800b08c <MX_DCMI_Init+0x60>)
 800b074:	2200      	movs	r2, #0
 800b076:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800b078:	4804      	ldr	r0, [pc, #16]	; (800b08c <MX_DCMI_Init+0x60>)
 800b07a:	f7f8 ff2d 	bl	8003ed8 <HAL_DCMI_Init>
 800b07e:	4603      	mov	r3, r0
 800b080:	2b00      	cmp	r3, #0
 800b082:	d001      	beq.n	800b088 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 800b084:	f000 fdcc 	bl	800bc20 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800b088:	bf00      	nop
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	20000604 	.word	0x20000604
 800b090:	50050000 	.word	0x50050000

0800b094 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800b098:	4b15      	ldr	r3, [pc, #84]	; (800b0f0 <MX_DMA2D_Init+0x5c>)
 800b09a:	4a16      	ldr	r2, [pc, #88]	; (800b0f4 <MX_DMA2D_Init+0x60>)
 800b09c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800b09e:	4b14      	ldr	r3, [pc, #80]	; (800b0f0 <MX_DMA2D_Init+0x5c>)
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800b0a4:	4b12      	ldr	r3, [pc, #72]	; (800b0f0 <MX_DMA2D_Init+0x5c>)
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800b0aa:	4b11      	ldr	r3, [pc, #68]	; (800b0f0 <MX_DMA2D_Init+0x5c>)
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800b0b0:	4b0f      	ldr	r3, [pc, #60]	; (800b0f0 <MX_DMA2D_Init+0x5c>)
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800b0b6:	4b0e      	ldr	r3, [pc, #56]	; (800b0f0 <MX_DMA2D_Init+0x5c>)
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800b0bc:	4b0c      	ldr	r3, [pc, #48]	; (800b0f0 <MX_DMA2D_Init+0x5c>)
 800b0be:	2200      	movs	r2, #0
 800b0c0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800b0c2:	4b0b      	ldr	r3, [pc, #44]	; (800b0f0 <MX_DMA2D_Init+0x5c>)
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800b0c8:	4809      	ldr	r0, [pc, #36]	; (800b0f0 <MX_DMA2D_Init+0x5c>)
 800b0ca:	f7f9 fb4b 	bl	8004764 <HAL_DMA2D_Init>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d001      	beq.n	800b0d8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800b0d4:	f000 fda4 	bl	800bc20 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800b0d8:	2101      	movs	r1, #1
 800b0da:	4805      	ldr	r0, [pc, #20]	; (800b0f0 <MX_DMA2D_Init+0x5c>)
 800b0dc:	f7f9 fdb0 	bl	8004c40 <HAL_DMA2D_ConfigLayer>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d001      	beq.n	800b0ea <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800b0e6:	f000 fd9b 	bl	800bc20 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800b0ea:	bf00      	nop
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	20000754 	.word	0x20000754
 800b0f4:	4002b000 	.word	0x4002b000

0800b0f8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b08e      	sub	sp, #56	; 0x38
 800b0fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800b0fe:	1d3b      	adds	r3, r7, #4
 800b100:	2234      	movs	r2, #52	; 0x34
 800b102:	2100      	movs	r1, #0
 800b104:	4618      	mov	r0, r3
 800b106:	f001 febd 	bl	800ce84 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800b10a:	4b3a      	ldr	r3, [pc, #232]	; (800b1f4 <MX_LTDC_Init+0xfc>)
 800b10c:	4a3a      	ldr	r2, [pc, #232]	; (800b1f8 <MX_LTDC_Init+0x100>)
 800b10e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800b110:	4b38      	ldr	r3, [pc, #224]	; (800b1f4 <MX_LTDC_Init+0xfc>)
 800b112:	2200      	movs	r2, #0
 800b114:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800b116:	4b37      	ldr	r3, [pc, #220]	; (800b1f4 <MX_LTDC_Init+0xfc>)
 800b118:	2200      	movs	r2, #0
 800b11a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800b11c:	4b35      	ldr	r3, [pc, #212]	; (800b1f4 <MX_LTDC_Init+0xfc>)
 800b11e:	2200      	movs	r2, #0
 800b120:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800b122:	4b34      	ldr	r3, [pc, #208]	; (800b1f4 <MX_LTDC_Init+0xfc>)
 800b124:	2200      	movs	r2, #0
 800b126:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800b128:	4b32      	ldr	r3, [pc, #200]	; (800b1f4 <MX_LTDC_Init+0xfc>)
 800b12a:	2228      	movs	r2, #40	; 0x28
 800b12c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800b12e:	4b31      	ldr	r3, [pc, #196]	; (800b1f4 <MX_LTDC_Init+0xfc>)
 800b130:	2209      	movs	r2, #9
 800b132:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800b134:	4b2f      	ldr	r3, [pc, #188]	; (800b1f4 <MX_LTDC_Init+0xfc>)
 800b136:	2235      	movs	r2, #53	; 0x35
 800b138:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800b13a:	4b2e      	ldr	r3, [pc, #184]	; (800b1f4 <MX_LTDC_Init+0xfc>)
 800b13c:	220b      	movs	r2, #11
 800b13e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800b140:	4b2c      	ldr	r3, [pc, #176]	; (800b1f4 <MX_LTDC_Init+0xfc>)
 800b142:	f240 2215 	movw	r2, #533	; 0x215
 800b146:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800b148:	4b2a      	ldr	r3, [pc, #168]	; (800b1f4 <MX_LTDC_Init+0xfc>)
 800b14a:	f240 121b 	movw	r2, #283	; 0x11b
 800b14e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800b150:	4b28      	ldr	r3, [pc, #160]	; (800b1f4 <MX_LTDC_Init+0xfc>)
 800b152:	f240 2235 	movw	r2, #565	; 0x235
 800b156:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800b158:	4b26      	ldr	r3, [pc, #152]	; (800b1f4 <MX_LTDC_Init+0xfc>)
 800b15a:	f240 121d 	movw	r2, #285	; 0x11d
 800b15e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800b160:	4b24      	ldr	r3, [pc, #144]	; (800b1f4 <MX_LTDC_Init+0xfc>)
 800b162:	2200      	movs	r2, #0
 800b164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800b168:	4b22      	ldr	r3, [pc, #136]	; (800b1f4 <MX_LTDC_Init+0xfc>)
 800b16a:	2200      	movs	r2, #0
 800b16c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800b170:	4b20      	ldr	r3, [pc, #128]	; (800b1f4 <MX_LTDC_Init+0xfc>)
 800b172:	2200      	movs	r2, #0
 800b174:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800b178:	481e      	ldr	r0, [pc, #120]	; (800b1f4 <MX_LTDC_Init+0xfc>)
 800b17a:	f7fa fd7f 	bl	8005c7c <HAL_LTDC_Init>
 800b17e:	4603      	mov	r3, r0
 800b180:	2b00      	cmp	r3, #0
 800b182:	d001      	beq.n	800b188 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800b184:	f000 fd4c 	bl	800bc20 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800b188:	2300      	movs	r3, #0
 800b18a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800b18c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800b190:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800b192:	2300      	movs	r3, #0
 800b194:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800b196:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b19a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800b19c:	2302      	movs	r3, #2
 800b19e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800b1a0:	23ff      	movs	r3, #255	; 0xff
 800b1a2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800b1a8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b1ac:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800b1ae:	2307      	movs	r3, #7
 800b1b0:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800b1b2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800b1b6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800b1b8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800b1bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800b1be:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b1c2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800b1d6:	1d3b      	adds	r3, r7, #4
 800b1d8:	2200      	movs	r2, #0
 800b1da:	4619      	mov	r1, r3
 800b1dc:	4805      	ldr	r0, [pc, #20]	; (800b1f4 <MX_LTDC_Init+0xfc>)
 800b1de:	f7fa fedf 	bl	8005fa0 <HAL_LTDC_ConfigLayer>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d001      	beq.n	800b1ec <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800b1e8:	f000 fd1a 	bl	800bc20 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800b1ec:	bf00      	nop
 800b1ee:	3738      	adds	r7, #56	; 0x38
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}
 800b1f4:	20000514 	.word	0x20000514
 800b1f8:	40016800 	.word	0x40016800

0800b1fc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800b200:	4b12      	ldr	r3, [pc, #72]	; (800b24c <MX_QUADSPI_Init+0x50>)
 800b202:	4a13      	ldr	r2, [pc, #76]	; (800b250 <MX_QUADSPI_Init+0x54>)
 800b204:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800b206:	4b11      	ldr	r3, [pc, #68]	; (800b24c <MX_QUADSPI_Init+0x50>)
 800b208:	22ff      	movs	r2, #255	; 0xff
 800b20a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800b20c:	4b0f      	ldr	r3, [pc, #60]	; (800b24c <MX_QUADSPI_Init+0x50>)
 800b20e:	2201      	movs	r2, #1
 800b210:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800b212:	4b0e      	ldr	r3, [pc, #56]	; (800b24c <MX_QUADSPI_Init+0x50>)
 800b214:	2200      	movs	r2, #0
 800b216:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800b218:	4b0c      	ldr	r3, [pc, #48]	; (800b24c <MX_QUADSPI_Init+0x50>)
 800b21a:	2201      	movs	r2, #1
 800b21c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800b21e:	4b0b      	ldr	r3, [pc, #44]	; (800b24c <MX_QUADSPI_Init+0x50>)
 800b220:	2200      	movs	r2, #0
 800b222:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800b224:	4b09      	ldr	r3, [pc, #36]	; (800b24c <MX_QUADSPI_Init+0x50>)
 800b226:	2200      	movs	r2, #0
 800b228:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800b22a:	4b08      	ldr	r3, [pc, #32]	; (800b24c <MX_QUADSPI_Init+0x50>)
 800b22c:	2200      	movs	r2, #0
 800b22e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800b230:	4b06      	ldr	r3, [pc, #24]	; (800b24c <MX_QUADSPI_Init+0x50>)
 800b232:	2200      	movs	r2, #0
 800b234:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800b236:	4805      	ldr	r0, [pc, #20]	; (800b24c <MX_QUADSPI_Init+0x50>)
 800b238:	f7fb f8f8 	bl	800642c <HAL_QSPI_Init>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d001      	beq.n	800b246 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800b242:	f000 fced 	bl	800bc20 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800b246:	bf00      	nop
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	20000808 	.word	0x20000808
 800b250:	a0001000 	.word	0xa0001000

0800b254 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b092      	sub	sp, #72	; 0x48
 800b258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800b25a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b25e:	2200      	movs	r2, #0
 800b260:	601a      	str	r2, [r3, #0]
 800b262:	605a      	str	r2, [r3, #4]
 800b264:	609a      	str	r2, [r3, #8]
 800b266:	60da      	str	r2, [r3, #12]
 800b268:	611a      	str	r2, [r3, #16]
 800b26a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 800b26c:	2300      	movs	r3, #0
 800b26e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 800b270:	463b      	mov	r3, r7
 800b272:	222c      	movs	r2, #44	; 0x2c
 800b274:	2100      	movs	r1, #0
 800b276:	4618      	mov	r0, r3
 800b278:	f001 fe04 	bl	800ce84 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800b27c:	4b47      	ldr	r3, [pc, #284]	; (800b39c <MX_RTC_Init+0x148>)
 800b27e:	4a48      	ldr	r2, [pc, #288]	; (800b3a0 <MX_RTC_Init+0x14c>)
 800b280:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800b282:	4b46      	ldr	r3, [pc, #280]	; (800b39c <MX_RTC_Init+0x148>)
 800b284:	2200      	movs	r2, #0
 800b286:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800b288:	4b44      	ldr	r3, [pc, #272]	; (800b39c <MX_RTC_Init+0x148>)
 800b28a:	227f      	movs	r2, #127	; 0x7f
 800b28c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800b28e:	4b43      	ldr	r3, [pc, #268]	; (800b39c <MX_RTC_Init+0x148>)
 800b290:	22ff      	movs	r2, #255	; 0xff
 800b292:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800b294:	4b41      	ldr	r3, [pc, #260]	; (800b39c <MX_RTC_Init+0x148>)
 800b296:	2200      	movs	r2, #0
 800b298:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800b29a:	4b40      	ldr	r3, [pc, #256]	; (800b39c <MX_RTC_Init+0x148>)
 800b29c:	2200      	movs	r2, #0
 800b29e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800b2a0:	4b3e      	ldr	r3, [pc, #248]	; (800b39c <MX_RTC_Init+0x148>)
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800b2a6:	483d      	ldr	r0, [pc, #244]	; (800b39c <MX_RTC_Init+0x148>)
 800b2a8:	f7fc f9bc 	bl	8007624 <HAL_RTC_Init>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d001      	beq.n	800b2b6 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800b2b2:	f000 fcb5 	bl	800bc20 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800b2d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	4830      	ldr	r0, [pc, #192]	; (800b39c <MX_RTC_Init+0x148>)
 800b2da:	f7fc fa1f 	bl	800771c <HAL_RTC_SetTime>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d001      	beq.n	800b2e8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 800b2e4:	f000 fc9c 	bl	800bc20 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800b300:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b304:	2201      	movs	r2, #1
 800b306:	4619      	mov	r1, r3
 800b308:	4824      	ldr	r0, [pc, #144]	; (800b39c <MX_RTC_Init+0x148>)
 800b30a:	f7fc fac5 	bl	8007898 <HAL_RTC_SetDate>
 800b30e:	4603      	mov	r3, r0
 800b310:	2b00      	cmp	r3, #0
 800b312:	d001      	beq.n	800b318 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 800b314:	f000 fc84 	bl	800bc20 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800b318:	2300      	movs	r3, #0
 800b31a:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800b31c:	2300      	movs	r3, #0
 800b31e:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800b320:	2300      	movs	r3, #0
 800b322:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800b324:	2300      	movs	r3, #0
 800b326:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800b328:	2300      	movs	r3, #0
 800b32a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800b32c:	2300      	movs	r3, #0
 800b32e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800b330:	2300      	movs	r3, #0
 800b332:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800b334:	2300      	movs	r3, #0
 800b336:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800b338:	2300      	movs	r3, #0
 800b33a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 800b33c:	2301      	movs	r3, #1
 800b33e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800b342:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b346:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800b348:	463b      	mov	r3, r7
 800b34a:	2201      	movs	r2, #1
 800b34c:	4619      	mov	r1, r3
 800b34e:	4813      	ldr	r0, [pc, #76]	; (800b39c <MX_RTC_Init+0x148>)
 800b350:	f7fc fb4a 	bl	80079e8 <HAL_RTC_SetAlarm>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d001      	beq.n	800b35e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800b35a:	f000 fc61 	bl	800bc20 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 800b35e:	2301      	movs	r3, #1
 800b360:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 800b364:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b368:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800b36a:	463b      	mov	r3, r7
 800b36c:	2201      	movs	r2, #1
 800b36e:	4619      	mov	r1, r3
 800b370:	480a      	ldr	r0, [pc, #40]	; (800b39c <MX_RTC_Init+0x148>)
 800b372:	f7fc fb39 	bl	80079e8 <HAL_RTC_SetAlarm>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d001      	beq.n	800b380 <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 800b37c:	f000 fc50 	bl	800bc20 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800b380:	2202      	movs	r2, #2
 800b382:	2100      	movs	r1, #0
 800b384:	4805      	ldr	r0, [pc, #20]	; (800b39c <MX_RTC_Init+0x148>)
 800b386:	f7fc fcb9 	bl	8007cfc <HAL_RTCEx_SetTimeStamp>
 800b38a:	4603      	mov	r3, r0
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d001      	beq.n	800b394 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 800b390:	f000 fc46 	bl	800bc20 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800b394:	bf00      	nop
 800b396:	3748      	adds	r7, #72	; 0x48
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}
 800b39c:	20000734 	.word	0x20000734
 800b3a0:	40002800 	.word	0x40002800

0800b3a4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800b3a8:	4b14      	ldr	r3, [pc, #80]	; (800b3fc <MX_SDMMC1_SD_Init+0x58>)
 800b3aa:	4a15      	ldr	r2, [pc, #84]	; (800b400 <MX_SDMMC1_SD_Init+0x5c>)
 800b3ac:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800b3ae:	4b13      	ldr	r3, [pc, #76]	; (800b3fc <MX_SDMMC1_SD_Init+0x58>)
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800b3b4:	4b11      	ldr	r3, [pc, #68]	; (800b3fc <MX_SDMMC1_SD_Init+0x58>)
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b3ba:	4b10      	ldr	r3, [pc, #64]	; (800b3fc <MX_SDMMC1_SD_Init+0x58>)
 800b3bc:	2200      	movs	r2, #0
 800b3be:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800b3c0:	4b0e      	ldr	r3, [pc, #56]	; (800b3fc <MX_SDMMC1_SD_Init+0x58>)
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b3c6:	4b0d      	ldr	r3, [pc, #52]	; (800b3fc <MX_SDMMC1_SD_Init+0x58>)
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800b3cc:	4b0b      	ldr	r3, [pc, #44]	; (800b3fc <MX_SDMMC1_SD_Init+0x58>)
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800b3d2:	480a      	ldr	r0, [pc, #40]	; (800b3fc <MX_SDMMC1_SD_Init+0x58>)
 800b3d4:	f7fc fce8 	bl	8007da8 <HAL_SD_Init>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d001      	beq.n	800b3e2 <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 800b3de:	f000 fc1f 	bl	800bc20 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800b3e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b3e6:	4805      	ldr	r0, [pc, #20]	; (800b3fc <MX_SDMMC1_SD_Init+0x58>)
 800b3e8:	f7fc ff95 	bl	8008316 <HAL_SD_ConfigWideBusOperation>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d001      	beq.n	800b3f6 <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 800b3f2:	f000 fc15 	bl	800bc20 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800b3f6:	bf00      	nop
 800b3f8:	bd80      	pop	{r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	20000450 	.word	0x20000450
 800b400:	40012c00 	.word	0x40012c00

0800b404 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b088      	sub	sp, #32
 800b408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b40a:	f107 0310 	add.w	r3, r7, #16
 800b40e:	2200      	movs	r2, #0
 800b410:	601a      	str	r2, [r3, #0]
 800b412:	605a      	str	r2, [r3, #4]
 800b414:	609a      	str	r2, [r3, #8]
 800b416:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b418:	1d3b      	adds	r3, r7, #4
 800b41a:	2200      	movs	r2, #0
 800b41c:	601a      	str	r2, [r3, #0]
 800b41e:	605a      	str	r2, [r3, #4]
 800b420:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800b422:	4b1d      	ldr	r3, [pc, #116]	; (800b498 <MX_TIM3_Init+0x94>)
 800b424:	4a1d      	ldr	r2, [pc, #116]	; (800b49c <MX_TIM3_Init+0x98>)
 800b426:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 199;//499;
 800b428:	4b1b      	ldr	r3, [pc, #108]	; (800b498 <MX_TIM3_Init+0x94>)
 800b42a:	22c7      	movs	r2, #199	; 0xc7
 800b42c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b42e:	4b1a      	ldr	r3, [pc, #104]	; (800b498 <MX_TIM3_Init+0x94>)
 800b430:	2200      	movs	r2, #0
 800b432:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800b434:	4b18      	ldr	r3, [pc, #96]	; (800b498 <MX_TIM3_Init+0x94>)
 800b436:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800b43a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b43c:	4b16      	ldr	r3, [pc, #88]	; (800b498 <MX_TIM3_Init+0x94>)
 800b43e:	2200      	movs	r2, #0
 800b440:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b442:	4b15      	ldr	r3, [pc, #84]	; (800b498 <MX_TIM3_Init+0x94>)
 800b444:	2200      	movs	r2, #0
 800b446:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800b448:	4813      	ldr	r0, [pc, #76]	; (800b498 <MX_TIM3_Init+0x94>)
 800b44a:	f7fd fb33 	bl	8008ab4 <HAL_TIM_Base_Init>
 800b44e:	4603      	mov	r3, r0
 800b450:	2b00      	cmp	r3, #0
 800b452:	d001      	beq.n	800b458 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800b454:	f000 fbe4 	bl	800bc20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b45c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800b45e:	f107 0310 	add.w	r3, r7, #16
 800b462:	4619      	mov	r1, r3
 800b464:	480c      	ldr	r0, [pc, #48]	; (800b498 <MX_TIM3_Init+0x94>)
 800b466:	f7fd fc9b 	bl	8008da0 <HAL_TIM_ConfigClockSource>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d001      	beq.n	800b474 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800b470:	f000 fbd6 	bl	800bc20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b474:	2300      	movs	r3, #0
 800b476:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b478:	2300      	movs	r3, #0
 800b47a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b47c:	1d3b      	adds	r3, r7, #4
 800b47e:	4619      	mov	r1, r3
 800b480:	4805      	ldr	r0, [pc, #20]	; (800b498 <MX_TIM3_Init+0x94>)
 800b482:	f7fd fea9 	bl	80091d8 <HAL_TIMEx_MasterConfigSynchronization>
 800b486:	4603      	mov	r3, r0
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d001      	beq.n	800b490 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800b48c:	f000 fbc8 	bl	800bc20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800b490:	bf00      	nop
 800b492:	3720      	adds	r7, #32
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}
 800b498:	200004d4 	.word	0x200004d4
 800b49c:	40000400 	.word	0x40000400

0800b4a0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b084      	sub	sp, #16
 800b4a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b4a6:	1d3b      	adds	r3, r7, #4
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	601a      	str	r2, [r3, #0]
 800b4ac:	605a      	str	r2, [r3, #4]
 800b4ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800b4b0:	4b14      	ldr	r3, [pc, #80]	; (800b504 <MX_TIM7_Init+0x64>)
 800b4b2:	4a15      	ldr	r2, [pc, #84]	; (800b508 <MX_TIM7_Init+0x68>)
 800b4b4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800b4b6:	4b13      	ldr	r3, [pc, #76]	; (800b504 <MX_TIM7_Init+0x64>)
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b4bc:	4b11      	ldr	r3, [pc, #68]	; (800b504 <MX_TIM7_Init+0x64>)
 800b4be:	2200      	movs	r2, #0
 800b4c0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4165;
 800b4c2:	4b10      	ldr	r3, [pc, #64]	; (800b504 <MX_TIM7_Init+0x64>)
 800b4c4:	f241 0245 	movw	r2, #4165	; 0x1045
 800b4c8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800b4ca:	4b0e      	ldr	r3, [pc, #56]	; (800b504 <MX_TIM7_Init+0x64>)
 800b4cc:	2280      	movs	r2, #128	; 0x80
 800b4ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800b4d0:	480c      	ldr	r0, [pc, #48]	; (800b504 <MX_TIM7_Init+0x64>)
 800b4d2:	f7fd faef 	bl	8008ab4 <HAL_TIM_Base_Init>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d001      	beq.n	800b4e0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800b4dc:	f000 fba0 	bl	800bc20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800b4e8:	1d3b      	adds	r3, r7, #4
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	4805      	ldr	r0, [pc, #20]	; (800b504 <MX_TIM7_Init+0x64>)
 800b4ee:	f7fd fe73 	bl	80091d8 <HAL_TIMEx_MasterConfigSynchronization>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d001      	beq.n	800b4fc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800b4f8:	f000 fb92 	bl	800bc20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800b4fc:	bf00      	nop
 800b4fe:	3710      	adds	r7, #16
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}
 800b504:	200007c8 	.word	0x200007c8
 800b508:	40001400 	.word	0x40001400

0800b50c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800b510:	4b14      	ldr	r3, [pc, #80]	; (800b564 <MX_USART1_UART_Init+0x58>)
 800b512:	4a15      	ldr	r2, [pc, #84]	; (800b568 <MX_USART1_UART_Init+0x5c>)
 800b514:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800b516:	4b13      	ldr	r3, [pc, #76]	; (800b564 <MX_USART1_UART_Init+0x58>)
 800b518:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b51c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b51e:	4b11      	ldr	r3, [pc, #68]	; (800b564 <MX_USART1_UART_Init+0x58>)
 800b520:	2200      	movs	r2, #0
 800b522:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b524:	4b0f      	ldr	r3, [pc, #60]	; (800b564 <MX_USART1_UART_Init+0x58>)
 800b526:	2200      	movs	r2, #0
 800b528:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b52a:	4b0e      	ldr	r3, [pc, #56]	; (800b564 <MX_USART1_UART_Init+0x58>)
 800b52c:	2200      	movs	r2, #0
 800b52e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b530:	4b0c      	ldr	r3, [pc, #48]	; (800b564 <MX_USART1_UART_Init+0x58>)
 800b532:	220c      	movs	r2, #12
 800b534:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b536:	4b0b      	ldr	r3, [pc, #44]	; (800b564 <MX_USART1_UART_Init+0x58>)
 800b538:	2200      	movs	r2, #0
 800b53a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b53c:	4b09      	ldr	r3, [pc, #36]	; (800b564 <MX_USART1_UART_Init+0x58>)
 800b53e:	2200      	movs	r2, #0
 800b540:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b542:	4b08      	ldr	r3, [pc, #32]	; (800b564 <MX_USART1_UART_Init+0x58>)
 800b544:	2200      	movs	r2, #0
 800b546:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b548:	4b06      	ldr	r3, [pc, #24]	; (800b564 <MX_USART1_UART_Init+0x58>)
 800b54a:	2200      	movs	r2, #0
 800b54c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b54e:	4805      	ldr	r0, [pc, #20]	; (800b564 <MX_USART1_UART_Init+0x58>)
 800b550:	f7fd febc 	bl	80092cc <HAL_UART_Init>
 800b554:	4603      	mov	r3, r0
 800b556:	2b00      	cmp	r3, #0
 800b558:	d001      	beq.n	800b55e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800b55a:	f000 fb61 	bl	800bc20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800b55e:	bf00      	nop
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop
 800b564:	20000654 	.word	0x20000654
 800b568:	40011000 	.word	0x40011000

0800b56c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b082      	sub	sp, #8
 800b570:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800b572:	4b0c      	ldr	r3, [pc, #48]	; (800b5a4 <MX_DMA_Init+0x38>)
 800b574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b576:	4a0b      	ldr	r2, [pc, #44]	; (800b5a4 <MX_DMA_Init+0x38>)
 800b578:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b57c:	6313      	str	r3, [r2, #48]	; 0x30
 800b57e:	4b09      	ldr	r3, [pc, #36]	; (800b5a4 <MX_DMA_Init+0x38>)
 800b580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b586:	607b      	str	r3, [r7, #4]
 800b588:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800b58a:	2200      	movs	r2, #0
 800b58c:	2100      	movs	r1, #0
 800b58e:	203c      	movs	r0, #60	; 0x3c
 800b590:	f7f8 fc6b 	bl	8003e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800b594:	203c      	movs	r0, #60	; 0x3c
 800b596:	f7f8 fc84 	bl	8003ea2 <HAL_NVIC_EnableIRQ>

}
 800b59a:	bf00      	nop
 800b59c:	3708      	adds	r7, #8
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	40023800 	.word	0x40023800

0800b5a8 <MX_FMC_Init>:
/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b088      	sub	sp, #32
 800b5ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800b5ae:	1d3b      	adds	r3, r7, #4
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	601a      	str	r2, [r3, #0]
 800b5b4:	605a      	str	r2, [r3, #4]
 800b5b6:	609a      	str	r2, [r3, #8]
 800b5b8:	60da      	str	r2, [r3, #12]
 800b5ba:	611a      	str	r2, [r3, #16]
 800b5bc:	615a      	str	r2, [r3, #20]
 800b5be:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800b5c0:	4b1f      	ldr	r3, [pc, #124]	; (800b640 <MX_FMC_Init+0x98>)
 800b5c2:	4a20      	ldr	r2, [pc, #128]	; (800b644 <MX_FMC_Init+0x9c>)
 800b5c4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800b5c6:	4b1e      	ldr	r3, [pc, #120]	; (800b640 <MX_FMC_Init+0x98>)
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800b5cc:	4b1c      	ldr	r3, [pc, #112]	; (800b640 <MX_FMC_Init+0x98>)
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800b5d2:	4b1b      	ldr	r3, [pc, #108]	; (800b640 <MX_FMC_Init+0x98>)
 800b5d4:	2204      	movs	r2, #4
 800b5d6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800b5d8:	4b19      	ldr	r3, [pc, #100]	; (800b640 <MX_FMC_Init+0x98>)
 800b5da:	2210      	movs	r2, #16
 800b5dc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800b5de:	4b18      	ldr	r3, [pc, #96]	; (800b640 <MX_FMC_Init+0x98>)
 800b5e0:	2240      	movs	r2, #64	; 0x40
 800b5e2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800b5e4:	4b16      	ldr	r3, [pc, #88]	; (800b640 <MX_FMC_Init+0x98>)
 800b5e6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800b5ea:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800b5ec:	4b14      	ldr	r3, [pc, #80]	; (800b640 <MX_FMC_Init+0x98>)
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800b5f2:	4b13      	ldr	r3, [pc, #76]	; (800b640 <MX_FMC_Init+0x98>)
 800b5f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b5f8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800b5fa:	4b11      	ldr	r3, [pc, #68]	; (800b640 <MX_FMC_Init+0x98>)
 800b5fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b600:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800b602:	4b0f      	ldr	r3, [pc, #60]	; (800b640 <MX_FMC_Init+0x98>)
 800b604:	2200      	movs	r2, #0
 800b606:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800b608:	2302      	movs	r3, #2
 800b60a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800b60c:	2307      	movs	r3, #7
 800b60e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800b610:	2304      	movs	r3, #4
 800b612:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800b614:	2307      	movs	r3, #7
 800b616:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800b618:	2303      	movs	r3, #3
 800b61a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800b61c:	2302      	movs	r3, #2
 800b61e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800b620:	2302      	movs	r3, #2
 800b622:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800b624:	1d3b      	adds	r3, r7, #4
 800b626:	4619      	mov	r1, r3
 800b628:	4805      	ldr	r0, [pc, #20]	; (800b640 <MX_FMC_Init+0x98>)
 800b62a:	f7fd f9c4 	bl	80089b6 <HAL_SDRAM_Init>
 800b62e:	4603      	mov	r3, r0
 800b630:	2b00      	cmp	r3, #0
 800b632:	d001      	beq.n	800b638 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800b634:	f000 faf4 	bl	800bc20 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800b638:	bf00      	nop
 800b63a:	3720      	adds	r7, #32
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	20000794 	.word	0x20000794
 800b644:	a0000140 	.word	0xa0000140

0800b648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b090      	sub	sp, #64	; 0x40
 800b64c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b64e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b652:	2200      	movs	r2, #0
 800b654:	601a      	str	r2, [r3, #0]
 800b656:	605a      	str	r2, [r3, #4]
 800b658:	609a      	str	r2, [r3, #8]
 800b65a:	60da      	str	r2, [r3, #12]
 800b65c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800b65e:	4bad      	ldr	r3, [pc, #692]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b662:	4aac      	ldr	r2, [pc, #688]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b664:	f043 0310 	orr.w	r3, r3, #16
 800b668:	6313      	str	r3, [r2, #48]	; 0x30
 800b66a:	4baa      	ldr	r3, [pc, #680]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b66c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b66e:	f003 0310 	and.w	r3, r3, #16
 800b672:	62bb      	str	r3, [r7, #40]	; 0x28
 800b674:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800b676:	4ba7      	ldr	r3, [pc, #668]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b67a:	4aa6      	ldr	r2, [pc, #664]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b67c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b680:	6313      	str	r3, [r2, #48]	; 0x30
 800b682:	4ba4      	ldr	r3, [pc, #656]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b68a:	627b      	str	r3, [r7, #36]	; 0x24
 800b68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b68e:	4ba1      	ldr	r3, [pc, #644]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b692:	4aa0      	ldr	r2, [pc, #640]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b694:	f043 0302 	orr.w	r3, r3, #2
 800b698:	6313      	str	r3, [r2, #48]	; 0x30
 800b69a:	4b9e      	ldr	r3, [pc, #632]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b69c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b69e:	f003 0302 	and.w	r3, r3, #2
 800b6a2:	623b      	str	r3, [r7, #32]
 800b6a4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b6a6:	4b9b      	ldr	r3, [pc, #620]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b6a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6aa:	4a9a      	ldr	r2, [pc, #616]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b6ac:	f043 0308 	orr.w	r3, r3, #8
 800b6b0:	6313      	str	r3, [r2, #48]	; 0x30
 800b6b2:	4b98      	ldr	r3, [pc, #608]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b6b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6b6:	f003 0308 	and.w	r3, r3, #8
 800b6ba:	61fb      	str	r3, [r7, #28]
 800b6bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b6be:	4b95      	ldr	r3, [pc, #596]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6c2:	4a94      	ldr	r2, [pc, #592]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b6c4:	f043 0304 	orr.w	r3, r3, #4
 800b6c8:	6313      	str	r3, [r2, #48]	; 0x30
 800b6ca:	4b92      	ldr	r3, [pc, #584]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b6cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ce:	f003 0304 	and.w	r3, r3, #4
 800b6d2:	61bb      	str	r3, [r7, #24]
 800b6d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b6d6:	4b8f      	ldr	r3, [pc, #572]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b6d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6da:	4a8e      	ldr	r2, [pc, #568]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b6dc:	f043 0301 	orr.w	r3, r3, #1
 800b6e0:	6313      	str	r3, [r2, #48]	; 0x30
 800b6e2:	4b8c      	ldr	r3, [pc, #560]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b6e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6e6:	f003 0301 	and.w	r3, r3, #1
 800b6ea:	617b      	str	r3, [r7, #20]
 800b6ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800b6ee:	4b89      	ldr	r3, [pc, #548]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b6f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6f2:	4a88      	ldr	r2, [pc, #544]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b6f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b6f8:	6313      	str	r3, [r2, #48]	; 0x30
 800b6fa:	4b86      	ldr	r3, [pc, #536]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b6fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b702:	613b      	str	r3, [r7, #16]
 800b704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800b706:	4b83      	ldr	r3, [pc, #524]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b70a:	4a82      	ldr	r2, [pc, #520]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b70c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b710:	6313      	str	r3, [r2, #48]	; 0x30
 800b712:	4b80      	ldr	r3, [pc, #512]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b71a:	60fb      	str	r3, [r7, #12]
 800b71c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800b71e:	4b7d      	ldr	r3, [pc, #500]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b722:	4a7c      	ldr	r2, [pc, #496]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b724:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b728:	6313      	str	r3, [r2, #48]	; 0x30
 800b72a:	4b7a      	ldr	r3, [pc, #488]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b72c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b72e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b732:	60bb      	str	r3, [r7, #8]
 800b734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800b736:	4b77      	ldr	r3, [pc, #476]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b73a:	4a76      	ldr	r2, [pc, #472]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b73c:	f043 0320 	orr.w	r3, r3, #32
 800b740:	6313      	str	r3, [r2, #48]	; 0x30
 800b742:	4b74      	ldr	r3, [pc, #464]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b746:	f003 0320 	and.w	r3, r3, #32
 800b74a:	607b      	str	r3, [r7, #4]
 800b74c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b74e:	4b71      	ldr	r3, [pc, #452]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b752:	4a70      	ldr	r2, [pc, #448]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b758:	6313      	str	r3, [r2, #48]	; 0x30
 800b75a:	4b6e      	ldr	r3, [pc, #440]	; (800b914 <MX_GPIO_Init+0x2cc>)
 800b75c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b75e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b762:	603b      	str	r3, [r7, #0]
 800b764:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800b766:	2201      	movs	r2, #1
 800b768:	2120      	movs	r1, #32
 800b76a:	486b      	ldr	r0, [pc, #428]	; (800b918 <MX_GPIO_Init+0x2d0>)
 800b76c:	f7f9 fd40 	bl	80051f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800b770:	2200      	movs	r2, #0
 800b772:	210c      	movs	r1, #12
 800b774:	4869      	ldr	r0, [pc, #420]	; (800b91c <MX_GPIO_Init+0x2d4>)
 800b776:	f7f9 fd3b 	bl	80051f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800b77a:	2201      	movs	r2, #1
 800b77c:	2108      	movs	r1, #8
 800b77e:	4868      	ldr	r0, [pc, #416]	; (800b920 <MX_GPIO_Init+0x2d8>)
 800b780:	f7f9 fd36 	bl	80051f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800b784:	2201      	movs	r2, #1
 800b786:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b78a:	4864      	ldr	r0, [pc, #400]	; (800b91c <MX_GPIO_Init+0x2d4>)
 800b78c:	f7f9 fd30 	bl	80051f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800b790:	2200      	movs	r2, #0
 800b792:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b796:	4863      	ldr	r0, [pc, #396]	; (800b924 <MX_GPIO_Init+0x2dc>)
 800b798:	f7f9 fd2a 	bl	80051f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800b79c:	2200      	movs	r2, #0
 800b79e:	21c8      	movs	r1, #200	; 0xc8
 800b7a0:	4861      	ldr	r0, [pc, #388]	; (800b928 <MX_GPIO_Init+0x2e0>)
 800b7a2:	f7f9 fd25 	bl	80051f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800b7a6:	2308      	movs	r3, #8
 800b7a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800b7b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	485c      	ldr	r0, [pc, #368]	; (800b92c <MX_GPIO_Init+0x2e4>)
 800b7ba:	f7f9 fb6f 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800b7be:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800b7c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7c4:	2302      	movs	r3, #2
 800b7c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b7cc:	2303      	movs	r3, #3
 800b7ce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b7d0:	230b      	movs	r3, #11
 800b7d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b7d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b7d8:	4619      	mov	r1, r3
 800b7da:	4853      	ldr	r0, [pc, #332]	; (800b928 <MX_GPIO_Init+0x2e0>)
 800b7dc:	f7f9 fb5e 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800b7e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b7e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b7e6:	2312      	movs	r3, #18
 800b7e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800b7f2:	2304      	movs	r3, #4
 800b7f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b7f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	484c      	ldr	r0, [pc, #304]	; (800b930 <MX_GPIO_Init+0x2e8>)
 800b7fe:	f7f9 fb4d 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 800b802:	f643 4323 	movw	r3, #15395	; 0x3c23
 800b806:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b808:	2302      	movs	r3, #2
 800b80a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b80c:	2300      	movs	r3, #0
 800b80e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b810:	2303      	movs	r3, #3
 800b812:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800b814:	230a      	movs	r3, #10
 800b816:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b818:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b81c:	4619      	mov	r1, r3
 800b81e:	4844      	ldr	r0, [pc, #272]	; (800b930 <MX_GPIO_Init+0x2e8>)
 800b820:	f7f9 fb3c 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800b824:	2380      	movs	r3, #128	; 0x80
 800b826:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b828:	2302      	movs	r3, #2
 800b82a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b82c:	2300      	movs	r3, #0
 800b82e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b830:	2300      	movs	r3, #0
 800b832:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800b834:	2308      	movs	r3, #8
 800b836:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800b838:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b83c:	4619      	mov	r1, r3
 800b83e:	4836      	ldr	r0, [pc, #216]	; (800b918 <MX_GPIO_Init+0x2d0>)
 800b840:	f7f9 fb2c 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800b844:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b848:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b84a:	2302      	movs	r3, #2
 800b84c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b84e:	2300      	movs	r3, #0
 800b850:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b852:	2300      	movs	r3, #0
 800b854:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b856:	2301      	movs	r3, #1
 800b858:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800b85a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b85e:	4619      	mov	r1, r3
 800b860:	4834      	ldr	r0, [pc, #208]	; (800b934 <MX_GPIO_Init+0x2ec>)
 800b862:	f7f9 fb1b 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800b866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b86a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b86c:	2300      	movs	r3, #0
 800b86e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b870:	2300      	movs	r3, #0
 800b872:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800b874:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b878:	4619      	mov	r1, r3
 800b87a:	482f      	ldr	r0, [pc, #188]	; (800b938 <MX_GPIO_Init+0x2f0>)
 800b87c:	f7f9 fb0e 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800b880:	2340      	movs	r3, #64	; 0x40
 800b882:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800b884:	4b2d      	ldr	r3, [pc, #180]	; (800b93c <MX_GPIO_Init+0x2f4>)
 800b886:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b888:	2300      	movs	r3, #0
 800b88a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800b88c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b890:	4619      	mov	r1, r3
 800b892:	4821      	ldr	r0, [pc, #132]	; (800b918 <MX_GPIO_Init+0x2d0>)
 800b894:	f7f9 fb02 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800b898:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b89c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b89e:	2302      	movs	r3, #2
 800b8a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8a6:	2303      	movs	r3, #3
 800b8a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b8aa:	230a      	movs	r3, #10
 800b8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	481f      	ldr	r0, [pc, #124]	; (800b934 <MX_GPIO_Init+0x2ec>)
 800b8b6:	f7f9 faf1 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800b8ba:	23f0      	movs	r3, #240	; 0xf0
 800b8bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8be:	2302      	movs	r3, #2
 800b8c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800b8ca:	230a      	movs	r3, #10
 800b8cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800b8ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	4811      	ldr	r0, [pc, #68]	; (800b91c <MX_GPIO_Init+0x2d4>)
 800b8d6:	f7f9 fae1 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800b8da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8e0:	2302      	movs	r3, #2
 800b8e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800b8ec:	230a      	movs	r3, #10
 800b8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800b8f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	480c      	ldr	r0, [pc, #48]	; (800b928 <MX_GPIO_Init+0x2e0>)
 800b8f8:	f7f9 fad0 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800b8fc:	2320      	movs	r3, #32
 800b8fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b900:	2301      	movs	r3, #1
 800b902:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b904:	2300      	movs	r3, #0
 800b906:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b908:	2300      	movs	r3, #0
 800b90a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800b90c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b910:	4619      	mov	r1, r3
 800b912:	e015      	b.n	800b940 <MX_GPIO_Init+0x2f8>
 800b914:	40023800 	.word	0x40023800
 800b918:	40020c00 	.word	0x40020c00
 800b91c:	40022000 	.word	0x40022000
 800b920:	40022800 	.word	0x40022800
 800b924:	40021c00 	.word	0x40021c00
 800b928:	40021800 	.word	0x40021800
 800b92c:	40021000 	.word	0x40021000
 800b930:	40020400 	.word	0x40020400
 800b934:	40020000 	.word	0x40020000
 800b938:	40022400 	.word	0x40022400
 800b93c:	10120000 	.word	0x10120000
 800b940:	48ad      	ldr	r0, [pc, #692]	; (800bbf8 <MX_GPIO_Init+0x5b0>)
 800b942:	f7f9 faab 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800b946:	f241 030c 	movw	r3, #4108	; 0x100c
 800b94a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b94c:	2301      	movs	r3, #1
 800b94e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b950:	2300      	movs	r3, #0
 800b952:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b954:	2300      	movs	r3, #0
 800b956:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800b958:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b95c:	4619      	mov	r1, r3
 800b95e:	48a7      	ldr	r0, [pc, #668]	; (800bbfc <MX_GPIO_Init+0x5b4>)
 800b960:	f7f9 fa9c 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800b964:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b968:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b96a:	2300      	movs	r3, #0
 800b96c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b96e:	2300      	movs	r3, #0
 800b970:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800b972:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b976:	4619      	mov	r1, r3
 800b978:	48a1      	ldr	r0, [pc, #644]	; (800bc00 <MX_GPIO_Init+0x5b8>)
 800b97a:	f7f9 fa8f 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800b97e:	2308      	movs	r3, #8
 800b980:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b982:	2301      	movs	r3, #1
 800b984:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b986:	2300      	movs	r3, #0
 800b988:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b98a:	2300      	movs	r3, #0
 800b98c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800b98e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b992:	4619      	mov	r1, r3
 800b994:	489b      	ldr	r0, [pc, #620]	; (800bc04 <MX_GPIO_Init+0x5bc>)
 800b996:	f7f9 fa81 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800b99a:	2310      	movs	r3, #16
 800b99c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800b9a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	4892      	ldr	r0, [pc, #584]	; (800bbf8 <MX_GPIO_Init+0x5b0>)
 800b9ae:	f7f9 fa75 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800b9b2:	f248 0304 	movw	r3, #32772	; 0x8004
 800b9b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800b9c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	4890      	ldr	r0, [pc, #576]	; (800bc08 <MX_GPIO_Init+0x5c0>)
 800b9c8:	f7f9 fa68 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800b9cc:	2302      	movs	r3, #2
 800b9ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b9d0:	2302      	movs	r3, #2
 800b9d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b9dc:	2305      	movs	r3, #5
 800b9de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800b9e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	4885      	ldr	r0, [pc, #532]	; (800bbfc <MX_GPIO_Init+0x5b4>)
 800b9e8:	f7f9 fa58 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800b9ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b9f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800b9fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ba02:	4619      	mov	r1, r3
 800ba04:	4880      	ldr	r0, [pc, #512]	; (800bc08 <MX_GPIO_Init+0x5c0>)
 800ba06:	f7f9 fa49 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba0e:	2302      	movs	r3, #2
 800ba10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba12:	2300      	movs	r3, #0
 800ba14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ba16:	2300      	movs	r3, #0
 800ba18:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800ba1a:	2302      	movs	r3, #2
 800ba1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800ba1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ba22:	4619      	mov	r1, r3
 800ba24:	4875      	ldr	r0, [pc, #468]	; (800bbfc <MX_GPIO_Init+0x5b4>)
 800ba26:	f7f9 fa39 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800ba2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba30:	2302      	movs	r3, #2
 800ba32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba34:	2300      	movs	r3, #0
 800ba36:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800ba40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ba44:	4619      	mov	r1, r3
 800ba46:	4871      	ldr	r0, [pc, #452]	; (800bc0c <MX_GPIO_Init+0x5c4>)
 800ba48:	f7f9 fa28 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800ba4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ba50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800ba52:	4b6f      	ldr	r3, [pc, #444]	; (800bc10 <MX_GPIO_Init+0x5c8>)
 800ba54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba56:	2300      	movs	r3, #0
 800ba58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800ba5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ba5e:	4619      	mov	r1, r3
 800ba60:	4866      	ldr	r0, [pc, #408]	; (800bbfc <MX_GPIO_Init+0x5b4>)
 800ba62:	f7f9 fa1b 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800ba66:	23c0      	movs	r3, #192	; 0xc0
 800ba68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba6a:	2302      	movs	r3, #2
 800ba6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba72:	2303      	movs	r3, #3
 800ba74:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800ba76:	2308      	movs	r3, #8
 800ba78:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ba7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ba7e:	4619      	mov	r1, r3
 800ba80:	485f      	ldr	r0, [pc, #380]	; (800bc00 <MX_GPIO_Init+0x5b8>)
 800ba82:	f7f9 fa0b 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800ba86:	2310      	movs	r3, #16
 800ba88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba8a:	2302      	movs	r3, #2
 800ba8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba92:	2303      	movs	r3, #3
 800ba94:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800ba96:	230a      	movs	r3, #10
 800ba98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800ba9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ba9e:	4619      	mov	r1, r3
 800baa0:	4859      	ldr	r0, [pc, #356]	; (800bc08 <MX_GPIO_Init+0x5c0>)
 800baa2:	f7f9 f9fb 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800baa6:	23c8      	movs	r3, #200	; 0xc8
 800baa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800baaa:	2301      	movs	r3, #1
 800baac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800baae:	2300      	movs	r3, #0
 800bab0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bab2:	2300      	movs	r3, #0
 800bab4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800bab6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800baba:	4619      	mov	r1, r3
 800babc:	4855      	ldr	r0, [pc, #340]	; (800bc14 <MX_GPIO_Init+0x5cc>)
 800babe:	f7f9 f9ed 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin 
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 800bac2:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800bac6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bac8:	2303      	movs	r3, #3
 800baca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bacc:	2300      	movs	r3, #0
 800bace:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800bad0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bad4:	4619      	mov	r1, r3
 800bad6:	4850      	ldr	r0, [pc, #320]	; (800bc18 <MX_GPIO_Init+0x5d0>)
 800bad8:	f7f9 f9e0 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800badc:	2305      	movs	r3, #5
 800bade:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bae0:	2302      	movs	r3, #2
 800bae2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bae4:	2300      	movs	r3, #0
 800bae6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bae8:	2303      	movs	r3, #3
 800baea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800baec:	230a      	movs	r3, #10
 800baee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800baf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800baf4:	4619      	mov	r1, r3
 800baf6:	4842      	ldr	r0, [pc, #264]	; (800bc00 <MX_GPIO_Init+0x5b8>)
 800baf8:	f7f9 f9d0 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800bafc:	2332      	movs	r3, #50	; 0x32
 800bafe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb00:	2302      	movs	r3, #2
 800bb02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb04:	2300      	movs	r3, #0
 800bb06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bb08:	2303      	movs	r3, #3
 800bb0a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bb0c:	230b      	movs	r3, #11
 800bb0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bb10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb14:	4619      	mov	r1, r3
 800bb16:	483a      	ldr	r0, [pc, #232]	; (800bc00 <MX_GPIO_Init+0x5b8>)
 800bb18:	f7f9 f9c0 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800bb1c:	2304      	movs	r3, #4
 800bb1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bb20:	2300      	movs	r3, #0
 800bb22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb24:	2300      	movs	r3, #0
 800bb26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800bb28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	4839      	ldr	r0, [pc, #228]	; (800bc14 <MX_GPIO_Init+0x5cc>)
 800bb30:	f7f9 f9b4 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800bb34:	2386      	movs	r3, #134	; 0x86
 800bb36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb38:	2302      	movs	r3, #2
 800bb3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bb40:	2303      	movs	r3, #3
 800bb42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bb44:	230b      	movs	r3, #11
 800bb46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb4c:	4619      	mov	r1, r3
 800bb4e:	482f      	ldr	r0, [pc, #188]	; (800bc0c <MX_GPIO_Init+0x5c4>)
 800bb50:	f7f9 f9a4 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800bb54:	2301      	movs	r3, #1
 800bb56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bb58:	2303      	movs	r3, #3
 800bb5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb64:	4619      	mov	r1, r3
 800bb66:	4829      	ldr	r0, [pc, #164]	; (800bc0c <MX_GPIO_Init+0x5c4>)
 800bb68:	f7f9 f998 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800bb6c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800bb70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800bb72:	2312      	movs	r3, #18
 800bb74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bb76:	2301      	movs	r3, #1
 800bb78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bb7a:	2303      	movs	r3, #3
 800bb7c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800bb7e:	2304      	movs	r3, #4
 800bb80:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800bb82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb86:	4619      	mov	r1, r3
 800bb88:	481f      	ldr	r0, [pc, #124]	; (800bc08 <MX_GPIO_Init+0x5c0>)
 800bb8a:	f7f9 f987 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800bb8e:	2328      	movs	r3, #40	; 0x28
 800bb90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb92:	2302      	movs	r3, #2
 800bb94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb96:	2300      	movs	r3, #0
 800bb98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bb9a:	2303      	movs	r3, #3
 800bb9c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800bb9e:	230a      	movs	r3, #10
 800bba0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bba2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bba6:	4619      	mov	r1, r3
 800bba8:	4818      	ldr	r0, [pc, #96]	; (800bc0c <MX_GPIO_Init+0x5c4>)
 800bbaa:	f7f9 f977 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800bbae:	2340      	movs	r3, #64	; 0x40
 800bbb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bbb2:	2302      	movs	r3, #2
 800bbb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800bbbe:	2309      	movs	r3, #9
 800bbc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800bbc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	480f      	ldr	r0, [pc, #60]	; (800bc08 <MX_GPIO_Init+0x5c0>)
 800bbca:	f7f9 f967 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800bbce:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800bbd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bbd4:	2302      	movs	r3, #2
 800bbd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800bbe0:	2305      	movs	r3, #5
 800bbe2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bbe4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bbe8:	4619      	mov	r1, r3
 800bbea:	480c      	ldr	r0, [pc, #48]	; (800bc1c <MX_GPIO_Init+0x5d4>)
 800bbec:	f7f9 f956 	bl	8004e9c <HAL_GPIO_Init>

}
 800bbf0:	bf00      	nop
 800bbf2:	3740      	adds	r7, #64	; 0x40
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	40020c00 	.word	0x40020c00
 800bbfc:	40022000 	.word	0x40022000
 800bc00:	40020800 	.word	0x40020800
 800bc04:	40022800 	.word	0x40022800
 800bc08:	40021c00 	.word	0x40021c00
 800bc0c:	40020000 	.word	0x40020000
 800bc10:	10120000 	.word	0x10120000
 800bc14:	40021800 	.word	0x40021800
 800bc18:	40021400 	.word	0x40021400
 800bc1c:	40020400 	.word	0x40020400

0800bc20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800bc20:	b480      	push	{r7}
 800bc22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800bc24:	bf00      	nop
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr
	...

0800bc30 <HAL_ADC_ConvCpltCallback>:
			INTERRUPT HANDLERS
##########################################################################
*/

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b085      	sub	sp, #20
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
	is_ready = 1;
 800bc38:	4b10      	ldr	r3, [pc, #64]	; (800bc7c <HAL_ADC_ConvCpltCallback+0x4c>)
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	701a      	strb	r2, [r3, #0]
	if(is_busy == 0)
 800bc3e:	4b10      	ldr	r3, [pc, #64]	; (800bc80 <HAL_ADC_ConvCpltCallback+0x50>)
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d114      	bne.n	800bc70 <HAL_ADC_ConvCpltCallback+0x40>
	{
		for(uint16_t i = 0 ; i < SAMPLES_NBR ; i++)
 800bc46:	2300      	movs	r3, #0
 800bc48:	81fb      	strh	r3, [r7, #14]
 800bc4a:	e00a      	b.n	800bc62 <HAL_ADC_ConvCpltCallback+0x32>
		{
			tampon_buff[i] = sampling_buff[i];
 800bc4c:	89fa      	ldrh	r2, [r7, #14]
 800bc4e:	89fb      	ldrh	r3, [r7, #14]
 800bc50:	490c      	ldr	r1, [pc, #48]	; (800bc84 <HAL_ADC_ConvCpltCallback+0x54>)
 800bc52:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800bc56:	490c      	ldr	r1, [pc, #48]	; (800bc88 <HAL_ADC_ConvCpltCallback+0x58>)
 800bc58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(uint16_t i = 0 ; i < SAMPLES_NBR ; i++)
 800bc5c:	89fb      	ldrh	r3, [r7, #14]
 800bc5e:	3301      	adds	r3, #1
 800bc60:	81fb      	strh	r3, [r7, #14]
 800bc62:	89fb      	ldrh	r3, [r7, #14]
 800bc64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc68:	d3f0      	bcc.n	800bc4c <HAL_ADC_ConvCpltCallback+0x1c>
		}
		is_busy = 1;
 800bc6a:	4b05      	ldr	r3, [pc, #20]	; (800bc80 <HAL_ADC_ConvCpltCallback+0x50>)
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	701a      	strb	r2, [r3, #0]
	}
}
 800bc70:	bf00      	nop
 800bc72:	3714      	adds	r7, #20
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr
 800bc7c:	20000355 	.word	0x20000355
 800bc80:	20000354 	.word	0x20000354
 800bc84:	2000105c 	.word	0x2000105c
 800bc88:	20002860 	.word	0x20002860

0800bc8c <Init_Sampling>:
			CORE FUNCTIONS
##########################################################################
*/

void Init_Sampling(ADC_HandleTypeDef * hadc1)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b082      	sub	sp, #8
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
//	signals_pck->corr_max = 0;
//	signals_pck->ref_sampled = 0;
//	signals_pck->result_ready = 0;
//	signals_pck->sample_corr_max = 0;

	HAL_ADC_Start(hadc1);
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f7f7 fa45 	bl	8003124 <HAL_ADC_Start>
	HAL_ADC_Start_DMA(hadc1, sampling_buff, SAMPLES_NBR);
 800bc9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bc9e:	4904      	ldr	r1, [pc, #16]	; (800bcb0 <Init_Sampling+0x24>)
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f7f7 fc41 	bl	8003528 <HAL_ADC_Start_DMA>

}
 800bca6:	bf00      	nop
 800bca8:	3708      	adds	r7, #8
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}
 800bcae:	bf00      	nop
 800bcb0:	2000105c 	.word	0x2000105c

0800bcb4 <signal_handler_process>:

void signal_handler_process(FSM_SH_STATE fsm_state)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b082      	sub	sp, #8
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	4603      	mov	r3, r0
 800bcbc:	71fb      	strb	r3, [r7, #7]
	if(fsm_state == CALIBRATION_STATE)
 800bcbe:	79fb      	ldrb	r3, [r7, #7]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d109      	bne.n	800bcd8 <signal_handler_process+0x24>
	{
		if(is_ready == 1)
 800bcc4:	4b0f      	ldr	r3, [pc, #60]	; (800bd04 <signal_handler_process+0x50>)
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	d117      	bne.n	800bcfc <signal_handler_process+0x48>
		{
			target_sampling();
 800bccc:	f000 f81e 	bl	800bd0c <target_sampling>
			//display_ready = 1;
			is_ready = 0;
 800bcd0:	4b0c      	ldr	r3, [pc, #48]	; (800bd04 <signal_handler_process+0x50>)
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	701a      	strb	r2, [r3, #0]
			display_ready = 1;
			is_ready = 0;
		}
	}

}
 800bcd6:	e011      	b.n	800bcfc <signal_handler_process+0x48>
	else if(fsm_state == INIT_REF)
 800bcd8:	79fb      	ldrb	r3, [r7, #7]
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	d102      	bne.n	800bce4 <signal_handler_process+0x30>
		analyse_target();
 800bcde:	f000 f85d 	bl	800bd9c <analyse_target>
}
 800bce2:	e00b      	b.n	800bcfc <signal_handler_process+0x48>
		if(is_ready == 1)
 800bce4:	4b07      	ldr	r3, [pc, #28]	; (800bd04 <signal_handler_process+0x50>)
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	d107      	bne.n	800bcfc <signal_handler_process+0x48>
			signals_analyse();
 800bcec:	f000 f86a 	bl	800bdc4 <signals_analyse>
			display_ready = 1;
 800bcf0:	4b05      	ldr	r3, [pc, #20]	; (800bd08 <signal_handler_process+0x54>)
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	701a      	strb	r2, [r3, #0]
			is_ready = 0;
 800bcf6:	4b03      	ldr	r3, [pc, #12]	; (800bd04 <signal_handler_process+0x50>)
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	701a      	strb	r2, [r3, #0]
}
 800bcfc:	bf00      	nop
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}
 800bd04:	20000355 	.word	0x20000355
 800bd08:	2000035c 	.word	0x2000035c

0800bd0c <target_sampling>:

void target_sampling()
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
	/* Copy DMA Buffer Content */
	for(int i = 0 ; i < SAMPLES_NBR ; i++)
 800bd12:	2300      	movs	r3, #0
 800bd14:	607b      	str	r3, [r7, #4]
 800bd16:	e016      	b.n	800bd46 <target_sampling+0x3a>
	{
		ref_signal[i] = tampon_buff[i];
 800bd18:	4a19      	ldr	r2, [pc, #100]	; (800bd80 <target_sampling+0x74>)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd20:	b2d9      	uxtb	r1, r3
 800bd22:	4a18      	ldr	r2, [pc, #96]	; (800bd84 <target_sampling+0x78>)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	4413      	add	r3, r2
 800bd28:	460a      	mov	r2, r1
 800bd2a:	701a      	strb	r2, [r3, #0]
		raw_signal[i] = tampon_buff[i];
 800bd2c:	4a14      	ldr	r2, [pc, #80]	; (800bd80 <target_sampling+0x74>)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd34:	b2d9      	uxtb	r1, r3
 800bd36:	4a14      	ldr	r2, [pc, #80]	; (800bd88 <target_sampling+0x7c>)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	4413      	add	r3, r2
 800bd3c:	460a      	mov	r2, r1
 800bd3e:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < SAMPLES_NBR ; i++)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	3301      	adds	r3, #1
 800bd44:	607b      	str	r3, [r7, #4]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd4c:	dbe4      	blt.n	800bd18 <target_sampling+0xc>
	}

	is_busy = 0;
 800bd4e:	4b0f      	ldr	r3, [pc, #60]	; (800bd8c <target_sampling+0x80>)
 800bd50:	2200      	movs	r2, #0
 800bd52:	701a      	strb	r2, [r3, #0]

	/* Correlation */
	xcorr(ref_signal, ref_signal);
 800bd54:	490b      	ldr	r1, [pc, #44]	; (800bd84 <target_sampling+0x78>)
 800bd56:	480b      	ldr	r0, [pc, #44]	; (800bd84 <target_sampling+0x78>)
 800bd58:	f000 f8a2 	bl	800bea0 <xcorr>
	ref_samples++;
 800bd5c:	4b0c      	ldr	r3, [pc, #48]	; (800bd90 <target_sampling+0x84>)
 800bd5e:	881b      	ldrh	r3, [r3, #0]
 800bd60:	3301      	adds	r3, #1
 800bd62:	b29a      	uxth	r2, r3
 800bd64:	4b0a      	ldr	r3, [pc, #40]	; (800bd90 <target_sampling+0x84>)
 800bd66:	801a      	strh	r2, [r3, #0]
	ref_threshold += corr_max;
 800bd68:	4b0a      	ldr	r3, [pc, #40]	; (800bd94 <target_sampling+0x88>)
 800bd6a:	881a      	ldrh	r2, [r3, #0]
 800bd6c:	4b0a      	ldr	r3, [pc, #40]	; (800bd98 <target_sampling+0x8c>)
 800bd6e:	881b      	ldrh	r3, [r3, #0]
 800bd70:	4413      	add	r3, r2
 800bd72:	b29a      	uxth	r2, r3
 800bd74:	4b07      	ldr	r3, [pc, #28]	; (800bd94 <target_sampling+0x88>)
 800bd76:	801a      	strh	r2, [r3, #0]

}
 800bd78:	bf00      	nop
 800bd7a:	3708      	adds	r7, #8
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}
 800bd80:	20002860 	.word	0x20002860
 800bd84:	20002060 	.word	0x20002060
 800bd88:	20002460 	.word	0x20002460
 800bd8c:	20000354 	.word	0x20000354
 800bd90:	20000356 	.word	0x20000356
 800bd94:	200000a8 	.word	0x200000a8
 800bd98:	20000854 	.word	0x20000854

0800bd9c <analyse_target>:

void analyse_target()
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	af00      	add	r7, sp, #0
	ref_threshold = ref_threshold / ref_samples;
 800bda0:	4b06      	ldr	r3, [pc, #24]	; (800bdbc <analyse_target+0x20>)
 800bda2:	881a      	ldrh	r2, [r3, #0]
 800bda4:	4b06      	ldr	r3, [pc, #24]	; (800bdc0 <analyse_target+0x24>)
 800bda6:	881b      	ldrh	r3, [r3, #0]
 800bda8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdac:	b29a      	uxth	r2, r3
 800bdae:	4b03      	ldr	r3, [pc, #12]	; (800bdbc <analyse_target+0x20>)
 800bdb0:	801a      	strh	r2, [r3, #0]
}
 800bdb2:	bf00      	nop
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr
 800bdbc:	200000a8 	.word	0x200000a8
 800bdc0:	20000356 	.word	0x20000356

0800bdc4 <signals_analyse>:

void signals_analyse()
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b082      	sub	sp, #8
 800bdc8:	af00      	add	r7, sp, #0


	for(int i = 0 ; i < SAMPLES_NBR ; i++)
 800bdca:	2300      	movs	r3, #0
 800bdcc:	607b      	str	r3, [r7, #4]
 800bdce:	e00c      	b.n	800bdea <signals_analyse+0x26>
	{
		raw_signal[i] = tampon_buff[i];//sampling_buff[i];
 800bdd0:	4a0e      	ldr	r2, [pc, #56]	; (800be0c <signals_analyse+0x48>)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdd8:	b2d9      	uxtb	r1, r3
 800bdda:	4a0d      	ldr	r2, [pc, #52]	; (800be10 <signals_analyse+0x4c>)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	4413      	add	r3, r2
 800bde0:	460a      	mov	r2, r1
 800bde2:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < SAMPLES_NBR ; i++)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	3301      	adds	r3, #1
 800bde8:	607b      	str	r3, [r7, #4]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdf0:	dbee      	blt.n	800bdd0 <signals_analyse+0xc>
	}

	is_busy = 0;
 800bdf2:	4b08      	ldr	r3, [pc, #32]	; (800be14 <signals_analyse+0x50>)
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	701a      	strb	r2, [r3, #0]

	xcorr(ref_signal, raw_signal);
 800bdf8:	4905      	ldr	r1, [pc, #20]	; (800be10 <signals_analyse+0x4c>)
 800bdfa:	4807      	ldr	r0, [pc, #28]	; (800be18 <signals_analyse+0x54>)
 800bdfc:	f000 f850 	bl	800bea0 <xcorr>
	search_signal();
 800be00:	f000 f80e 	bl	800be20 <search_signal>

}
 800be04:	bf00      	nop
 800be06:	3708      	adds	r7, #8
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}
 800be0c:	20002860 	.word	0x20002860
 800be10:	20002460 	.word	0x20002460
 800be14:	20000354 	.word	0x20000354
 800be18:	20002060 	.word	0x20002060
 800be1c:	00000000 	.word	0x00000000

0800be20 <search_signal>:

void search_signal()
{
 800be20:	b590      	push	{r4, r7, lr}
 800be22:	b083      	sub	sp, #12
 800be24:	af00      	add	r7, sp, #0
	uint16_t th = (THRESHOLD_RATIO * ref_threshold);
 800be26:	4b1a      	ldr	r3, [pc, #104]	; (800be90 <search_signal+0x70>)
 800be28:	881b      	ldrh	r3, [r3, #0]
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7f4 fb92 	bl	8000554 <__aeabi_i2d>
 800be30:	a315      	add	r3, pc, #84	; (adr r3, 800be88 <search_signal+0x68>)
 800be32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be36:	f7f4 fbf7 	bl	8000628 <__aeabi_dmul>
 800be3a:	4603      	mov	r3, r0
 800be3c:	460c      	mov	r4, r1
 800be3e:	4618      	mov	r0, r3
 800be40:	4621      	mov	r1, r4
 800be42:	f7f4 fe03 	bl	8000a4c <__aeabi_d2uiz>
 800be46:	4603      	mov	r3, r0
 800be48:	80fb      	strh	r3, [r7, #6]
	if(signal_detected == 0)
 800be4a:	4b12      	ldr	r3, [pc, #72]	; (800be94 <search_signal+0x74>)
 800be4c:	781b      	ldrb	r3, [r3, #0]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d10e      	bne.n	800be70 <search_signal+0x50>
	{
		if(corr_max >= th)
 800be52:	4b11      	ldr	r3, [pc, #68]	; (800be98 <search_signal+0x78>)
 800be54:	881b      	ldrh	r3, [r3, #0]
 800be56:	88fa      	ldrh	r2, [r7, #6]
 800be58:	429a      	cmp	r2, r3
 800be5a:	d811      	bhi.n	800be80 <search_signal+0x60>
		{
			signal_counter++;
 800be5c:	4b0f      	ldr	r3, [pc, #60]	; (800be9c <search_signal+0x7c>)
 800be5e:	881b      	ldrh	r3, [r3, #0]
 800be60:	3301      	adds	r3, #1
 800be62:	b29a      	uxth	r2, r3
 800be64:	4b0d      	ldr	r3, [pc, #52]	; (800be9c <search_signal+0x7c>)
 800be66:	801a      	strh	r2, [r3, #0]
			signal_detected = 1;
 800be68:	4b0a      	ldr	r3, [pc, #40]	; (800be94 <search_signal+0x74>)
 800be6a:	2201      	movs	r2, #1
 800be6c:	701a      	strb	r2, [r3, #0]
		if(corr_max < th)
		{
			signal_detected = 0;
		}
	}
}
 800be6e:	e007      	b.n	800be80 <search_signal+0x60>
		if(corr_max < th)
 800be70:	4b09      	ldr	r3, [pc, #36]	; (800be98 <search_signal+0x78>)
 800be72:	881b      	ldrh	r3, [r3, #0]
 800be74:	88fa      	ldrh	r2, [r7, #6]
 800be76:	429a      	cmp	r2, r3
 800be78:	d902      	bls.n	800be80 <search_signal+0x60>
			signal_detected = 0;
 800be7a:	4b06      	ldr	r3, [pc, #24]	; (800be94 <search_signal+0x74>)
 800be7c:	2200      	movs	r2, #0
 800be7e:	701a      	strb	r2, [r3, #0]
}
 800be80:	bf00      	nop
 800be82:	370c      	adds	r7, #12
 800be84:	46bd      	mov	sp, r7
 800be86:	bd90      	pop	{r4, r7, pc}
 800be88:	cccccccd 	.word	0xcccccccd
 800be8c:	3feccccc 	.word	0x3feccccc
 800be90:	200000a8 	.word	0x200000a8
 800be94:	20000358 	.word	0x20000358
 800be98:	20000854 	.word	0x20000854
 800be9c:	2000035a 	.word	0x2000035a

0800bea0 <xcorr>:

void xcorr(uint8_t* ref_signal, uint8_t* comp_signal)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
	crosscorrelation(ref_signal, comp_signal, 0, SAMPLES_NBR + SAMPLES_NBR -1);
 800beaa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800beae:	2200      	movs	r2, #0
 800beb0:	6839      	ldr	r1, [r7, #0]
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f000 f804 	bl	800bec0 <crosscorrelation>
	//sample_corr_max = 512;
}
 800beb8:	bf00      	nop
 800beba:	3708      	adds	r7, #8
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <crosscorrelation>:

void crosscorrelation(uint8_t* target, uint8_t* input_signal , uint16_t min_w, uint16_t max_w)
{
 800bec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bec2:	b091      	sub	sp, #68	; 0x44
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	60f8      	str	r0, [r7, #12]
 800bec8:	60b9      	str	r1, [r7, #8]
 800beca:	4611      	mov	r1, r2
 800becc:	461a      	mov	r2, r3
 800bece:	460b      	mov	r3, r1
 800bed0:	80fb      	strh	r3, [r7, #6]
 800bed2:	4613      	mov	r3, r2
 800bed4:	80bb      	strh	r3, [r7, #4]
 800bed6:	466b      	mov	r3, sp
 800bed8:	461e      	mov	r6, r3
	uint16_t i,j;
	int p = SAMPLES_NBR + SAMPLES_NBR -1;
 800beda:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800bede:	62fb      	str	r3, [r7, #44]	; 0x2c


	float x_signal[p];
 800bee0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bee2:	1e43      	subs	r3, r0, #1
 800bee4:	62bb      	str	r3, [r7, #40]	; 0x28
 800bee6:	4603      	mov	r3, r0
 800bee8:	4619      	mov	r1, r3
 800beea:	f04f 0200 	mov.w	r2, #0
 800beee:	f04f 0300 	mov.w	r3, #0
 800bef2:	f04f 0400 	mov.w	r4, #0
 800bef6:	0154      	lsls	r4, r2, #5
 800bef8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800befc:	014b      	lsls	r3, r1, #5
 800befe:	4603      	mov	r3, r0
 800bf00:	4619      	mov	r1, r3
 800bf02:	f04f 0200 	mov.w	r2, #0
 800bf06:	f04f 0300 	mov.w	r3, #0
 800bf0a:	f04f 0400 	mov.w	r4, #0
 800bf0e:	0154      	lsls	r4, r2, #5
 800bf10:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bf14:	014b      	lsls	r3, r1, #5
 800bf16:	4603      	mov	r3, r0
 800bf18:	009b      	lsls	r3, r3, #2
 800bf1a:	3303      	adds	r3, #3
 800bf1c:	3307      	adds	r3, #7
 800bf1e:	08db      	lsrs	r3, r3, #3
 800bf20:	00db      	lsls	r3, r3, #3
 800bf22:	ebad 0d03 	sub.w	sp, sp, r3
 800bf26:	466b      	mov	r3, sp
 800bf28:	3303      	adds	r3, #3
 800bf2a:	089b      	lsrs	r3, r3, #2
 800bf2c:	009b      	lsls	r3, r3, #2
 800bf2e:	627b      	str	r3, [r7, #36]	; 0x24
	float target_signal[p];
 800bf30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf32:	1e43      	subs	r3, r0, #1
 800bf34:	623b      	str	r3, [r7, #32]
 800bf36:	4603      	mov	r3, r0
 800bf38:	4619      	mov	r1, r3
 800bf3a:	f04f 0200 	mov.w	r2, #0
 800bf3e:	f04f 0300 	mov.w	r3, #0
 800bf42:	f04f 0400 	mov.w	r4, #0
 800bf46:	0154      	lsls	r4, r2, #5
 800bf48:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bf4c:	014b      	lsls	r3, r1, #5
 800bf4e:	4603      	mov	r3, r0
 800bf50:	4619      	mov	r1, r3
 800bf52:	f04f 0200 	mov.w	r2, #0
 800bf56:	f04f 0300 	mov.w	r3, #0
 800bf5a:	f04f 0400 	mov.w	r4, #0
 800bf5e:	0154      	lsls	r4, r2, #5
 800bf60:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bf64:	014b      	lsls	r3, r1, #5
 800bf66:	4603      	mov	r3, r0
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	3303      	adds	r3, #3
 800bf6c:	3307      	adds	r3, #7
 800bf6e:	08db      	lsrs	r3, r3, #3
 800bf70:	00db      	lsls	r3, r3, #3
 800bf72:	ebad 0d03 	sub.w	sp, sp, r3
 800bf76:	466b      	mov	r3, sp
 800bf78:	3303      	adds	r3, #3
 800bf7a:	089b      	lsrs	r3, r3, #2
 800bf7c:	009b      	lsls	r3, r3, #2
 800bf7e:	61fb      	str	r3, [r7, #28]
	uint32_t x_norm = 0;
 800bf80:	2300      	movs	r3, #0
 800bf82:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t target_norm = 0;
 800bf84:	2300      	movs	r3, #0
 800bf86:	63bb      	str	r3, [r7, #56]	; 0x38

	float correlation[p];
 800bf88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf8a:	1e43      	subs	r3, r0, #1
 800bf8c:	61bb      	str	r3, [r7, #24]
 800bf8e:	4603      	mov	r3, r0
 800bf90:	4619      	mov	r1, r3
 800bf92:	f04f 0200 	mov.w	r2, #0
 800bf96:	f04f 0300 	mov.w	r3, #0
 800bf9a:	f04f 0400 	mov.w	r4, #0
 800bf9e:	0154      	lsls	r4, r2, #5
 800bfa0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bfa4:	014b      	lsls	r3, r1, #5
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	f04f 0200 	mov.w	r2, #0
 800bfae:	f04f 0300 	mov.w	r3, #0
 800bfb2:	f04f 0400 	mov.w	r4, #0
 800bfb6:	0154      	lsls	r4, r2, #5
 800bfb8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bfbc:	014b      	lsls	r3, r1, #5
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	3303      	adds	r3, #3
 800bfc4:	3307      	adds	r3, #7
 800bfc6:	08db      	lsrs	r3, r3, #3
 800bfc8:	00db      	lsls	r3, r3, #3
 800bfca:	ebad 0d03 	sub.w	sp, sp, r3
 800bfce:	466b      	mov	r3, sp
 800bfd0:	3303      	adds	r3, #3
 800bfd2:	089b      	lsrs	r3, r3, #2
 800bfd4:	009b      	lsls	r3, r3, #2
 800bfd6:	617b      	str	r3, [r7, #20]
	uint32_t shift = 0;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	63fb      	str	r3, [r7, #60]	; 0x3c
	sample_corr_max = (uint16_t)( (p/2));*/


	/* Reverse Signal Array to perform correlation x(n-l) */
	/* and remove offset for each signals */
	for(j=0 ; j < p; j++)
 800bfdc:	2300      	movs	r3, #0
 800bfde:	867b      	strh	r3, [r7, #50]	; 0x32
 800bfe0:	e06f      	b.n	800c0c2 <crosscorrelation+0x202>
	{

		/* Supress Offsets */
		if(j < SAMPLES_NBR)
 800bfe2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bfe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfe8:	d25a      	bcs.n	800c0a0 <crosscorrelation+0x1e0>
		{
			/* Suppress X Signal Offset */

			x_signal[j] = (float)(( input_signal[j] - 0x7F))/0x7F;
 800bfea:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bfec:	68ba      	ldr	r2, [r7, #8]
 800bfee:	4413      	add	r3, r2
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	3b7f      	subs	r3, #127	; 0x7f
 800bff4:	ee07 3a90 	vmov	s15, r3
 800bff8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bffc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bffe:	eddf 6a9a 	vldr	s13, [pc, #616]	; 800c268 <crosscorrelation+0x3a8>
 800c002:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c008:	009b      	lsls	r3, r3, #2
 800c00a:	4413      	add	r3, r2
 800c00c:	edc3 7a00 	vstr	s15, [r3]
			x_norm += x_signal[j] * x_signal[j];
 800c010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c012:	ee07 3a90 	vmov	s15, r3
 800c016:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c01a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c01c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	4413      	add	r3, r2
 800c022:	edd3 6a00 	vldr	s13, [r3]
 800c026:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	4413      	add	r3, r2
 800c02e:	edd3 7a00 	vldr	s15, [r3]
 800c032:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c03a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c03e:	ee17 3a90 	vmov	r3, s15
 800c042:	637b      	str	r3, [r7, #52]	; 0x34

			/* Suppress Ref Signal Offset */
			target_signal[j] = (float)((target[j] - 0x7F))/0x7F;
 800c044:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c046:	68fa      	ldr	r2, [r7, #12]
 800c048:	4413      	add	r3, r2
 800c04a:	781b      	ldrb	r3, [r3, #0]
 800c04c:	3b7f      	subs	r3, #127	; 0x7f
 800c04e:	ee07 3a90 	vmov	s15, r3
 800c052:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c056:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c058:	eddf 6a83 	vldr	s13, [pc, #524]	; 800c268 <crosscorrelation+0x3a8>
 800c05c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c060:	69fa      	ldr	r2, [r7, #28]
 800c062:	009b      	lsls	r3, r3, #2
 800c064:	4413      	add	r3, r2
 800c066:	edc3 7a00 	vstr	s15, [r3]
			target_norm += target_signal[j] * target_signal[j];
 800c06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c06c:	ee07 3a90 	vmov	s15, r3
 800c070:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c074:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c076:	69fa      	ldr	r2, [r7, #28]
 800c078:	009b      	lsls	r3, r3, #2
 800c07a:	4413      	add	r3, r2
 800c07c:	edd3 6a00 	vldr	s13, [r3]
 800c080:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c082:	69fa      	ldr	r2, [r7, #28]
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	4413      	add	r3, r2
 800c088:	edd3 7a00 	vldr	s15, [r3]
 800c08c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c090:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c098:	ee17 3a90 	vmov	r3, s15
 800c09c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c09e:	e00d      	b.n	800c0bc <crosscorrelation+0x1fc>
		}
		else
		{
			x_signal[j] = 0;
 800c0a0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c0a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0a4:	009b      	lsls	r3, r3, #2
 800c0a6:	4413      	add	r3, r2
 800c0a8:	f04f 0200 	mov.w	r2, #0
 800c0ac:	601a      	str	r2, [r3, #0]
			target_signal[j] = 0;
 800c0ae:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c0b0:	69fa      	ldr	r2, [r7, #28]
 800c0b2:	009b      	lsls	r3, r3, #2
 800c0b4:	4413      	add	r3, r2
 800c0b6:	f04f 0200 	mov.w	r2, #0
 800c0ba:	601a      	str	r2, [r3, #0]
	for(j=0 ; j < p; j++)
 800c0bc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c0be:	3301      	adds	r3, #1
 800c0c0:	867b      	strh	r3, [r7, #50]	; 0x32
 800c0c2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c0c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	dc8b      	bgt.n	800bfe2 <crosscorrelation+0x122>
		}
	}

	correlation[0]=0;
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	f04f 0200 	mov.w	r2, #0
 800c0d0:	601a      	str	r2, [r3, #0]


	/* Perform all correlation(n) calculs */
	corr_max = correlation[0];
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	edd3 7a00 	vldr	s15, [r3]
 800c0d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0dc:	ee17 3a90 	vmov	r3, s15
 800c0e0:	b29a      	uxth	r2, r3
 800c0e2:	4b62      	ldr	r3, [pc, #392]	; (800c26c <crosscorrelation+0x3ac>)
 800c0e4:	801a      	strh	r2, [r3, #0]

	for(i = 0 ; i < p ; i++)
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	863b      	strh	r3, [r7, #48]	; 0x30
 800c0ea:	e0aa      	b.n	800c242 <crosscorrelation+0x382>
	{
		correlation[i] = 0;
 800c0ec:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c0ee:	697a      	ldr	r2, [r7, #20]
 800c0f0:	009b      	lsls	r3, r3, #2
 800c0f2:	4413      	add	r3, r2
 800c0f4:	f04f 0200 	mov.w	r2, #0
 800c0f8:	601a      	str	r2, [r3, #0]
		/* Compute correlation(n) */
		for(j = 0 ; j < p ; j++)
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	867b      	strh	r3, [r7, #50]	; 0x32
 800c0fe:	e02b      	b.n	800c158 <crosscorrelation+0x298>
		{
			correlation[i] += x_signal[j] * target_signal[(p-1) - ((shift + j + i) % p)];
 800c100:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c102:	697a      	ldr	r2, [r7, #20]
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	4413      	add	r3, r2
 800c108:	ed93 7a00 	vldr	s14, [r3]
 800c10c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c10e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	4413      	add	r3, r2
 800c114:	edd3 6a00 	vldr	s13, [r3]
 800c118:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c11a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800c11c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c11e:	441a      	add	r2, r3
 800c120:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c122:	4413      	add	r3, r2
 800c124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c126:	fbb3 f0f2 	udiv	r0, r3, r2
 800c12a:	fb02 f200 	mul.w	r2, r2, r0
 800c12e:	1a9b      	subs	r3, r3, r2
 800c130:	1acb      	subs	r3, r1, r3
 800c132:	3b01      	subs	r3, #1
 800c134:	69fa      	ldr	r2, [r7, #28]
 800c136:	009b      	lsls	r3, r3, #2
 800c138:	4413      	add	r3, r2
 800c13a:	edd3 7a00 	vldr	s15, [r3]
 800c13e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c142:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c144:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c148:	697a      	ldr	r2, [r7, #20]
 800c14a:	009b      	lsls	r3, r3, #2
 800c14c:	4413      	add	r3, r2
 800c14e:	edc3 7a00 	vstr	s15, [r3]
		for(j = 0 ; j < p ; j++)
 800c152:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c154:	3301      	adds	r3, #1
 800c156:	867b      	strh	r3, [r7, #50]	; 0x32
 800c158:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c15a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c15c:	429a      	cmp	r2, r3
 800c15e:	dccf      	bgt.n	800c100 <crosscorrelation+0x240>
		}

		correlation[i] =  ((float)(abs(correlation[i])));
 800c160:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c162:	697a      	ldr	r2, [r7, #20]
 800c164:	009b      	lsls	r3, r3, #2
 800c166:	4413      	add	r3, r2
 800c168:	edd3 7a00 	vldr	s15, [r3]
 800c16c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c170:	ee17 3a90 	vmov	r3, s15
 800c174:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800c178:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800c17c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c17e:	ee07 2a90 	vmov	s15, r2
 800c182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c186:	697a      	ldr	r2, [r7, #20]
 800c188:	009b      	lsls	r3, r3, #2
 800c18a:	4413      	add	r3, r2
 800c18c:	edc3 7a00 	vstr	s15, [r3]

		if(correlation[i] > corr_max)
 800c190:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c192:	697a      	ldr	r2, [r7, #20]
 800c194:	009b      	lsls	r3, r3, #2
 800c196:	4413      	add	r3, r2
 800c198:	ed93 7a00 	vldr	s14, [r3]
 800c19c:	4b33      	ldr	r3, [pc, #204]	; (800c26c <crosscorrelation+0x3ac>)
 800c19e:	881b      	ldrh	r3, [r3, #0]
 800c1a0:	ee07 3a90 	vmov	s15, r3
 800c1a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c1a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c1ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1b0:	dd0f      	ble.n	800c1d2 <crosscorrelation+0x312>
		{
			corr_max = correlation[i];
 800c1b2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c1b4:	697a      	ldr	r2, [r7, #20]
 800c1b6:	009b      	lsls	r3, r3, #2
 800c1b8:	4413      	add	r3, r2
 800c1ba:	edd3 7a00 	vldr	s15, [r3]
 800c1be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1c2:	ee17 3a90 	vmov	r3, s15
 800c1c6:	b29a      	uxth	r2, r3
 800c1c8:	4b28      	ldr	r3, [pc, #160]	; (800c26c <crosscorrelation+0x3ac>)
 800c1ca:	801a      	strh	r2, [r3, #0]
			sample_corr_max = i;
 800c1cc:	4a28      	ldr	r2, [pc, #160]	; (800c270 <crosscorrelation+0x3b0>)
 800c1ce:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c1d0:	8013      	strh	r3, [r2, #0]
		}

		shift++;
 800c1d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1d4:	3301      	adds	r3, #1
 800c1d6:	63fb      	str	r3, [r7, #60]	; 0x3c


		corr_func[i] =  (uint8_t)( (correlation[i] * THRESHOLD_RATIO * 0xFF) / ref_threshold);
 800c1d8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c1da:	697a      	ldr	r2, [r7, #20]
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	4413      	add	r3, r2
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7f4 f9c8 	bl	8000578 <__aeabi_f2d>
 800c1e8:	a31b      	add	r3, pc, #108	; (adr r3, 800c258 <crosscorrelation+0x398>)
 800c1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ee:	f7f4 fa1b 	bl	8000628 <__aeabi_dmul>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	460c      	mov	r4, r1
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	4621      	mov	r1, r4
 800c1fa:	a319      	add	r3, pc, #100	; (adr r3, 800c260 <crosscorrelation+0x3a0>)
 800c1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c200:	f7f4 fa12 	bl	8000628 <__aeabi_dmul>
 800c204:	4603      	mov	r3, r0
 800c206:	460c      	mov	r4, r1
 800c208:	4625      	mov	r5, r4
 800c20a:	461c      	mov	r4, r3
 800c20c:	4b19      	ldr	r3, [pc, #100]	; (800c274 <crosscorrelation+0x3b4>)
 800c20e:	881b      	ldrh	r3, [r3, #0]
 800c210:	4618      	mov	r0, r3
 800c212:	f7f4 f99f 	bl	8000554 <__aeabi_i2d>
 800c216:	4602      	mov	r2, r0
 800c218:	460b      	mov	r3, r1
 800c21a:	4620      	mov	r0, r4
 800c21c:	4629      	mov	r1, r5
 800c21e:	f7f4 fb2d 	bl	800087c <__aeabi_ddiv>
 800c222:	4603      	mov	r3, r0
 800c224:	460c      	mov	r4, r1
 800c226:	461a      	mov	r2, r3
 800c228:	4623      	mov	r3, r4
 800c22a:	8e3c      	ldrh	r4, [r7, #48]	; 0x30
 800c22c:	4610      	mov	r0, r2
 800c22e:	4619      	mov	r1, r3
 800c230:	f7f4 fc0c 	bl	8000a4c <__aeabi_d2uiz>
 800c234:	4603      	mov	r3, r0
 800c236:	b2da      	uxtb	r2, r3
 800c238:	4b0f      	ldr	r3, [pc, #60]	; (800c278 <crosscorrelation+0x3b8>)
 800c23a:	551a      	strb	r2, [r3, r4]
	for(i = 0 ; i < p ; i++)
 800c23c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c23e:	3301      	adds	r3, #1
 800c240:	863b      	strh	r3, [r7, #48]	; 0x30
 800c242:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c244:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c246:	429a      	cmp	r2, r3
 800c248:	f73f af50 	bgt.w	800c0ec <crosscorrelation+0x22c>
 800c24c:	46b5      	mov	sp, r6

	}
}
 800c24e:	bf00      	nop
 800c250:	3744      	adds	r7, #68	; 0x44
 800c252:	46bd      	mov	sp, r7
 800c254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c256:	bf00      	nop
 800c258:	cccccccd 	.word	0xcccccccd
 800c25c:	3feccccc 	.word	0x3feccccc
 800c260:	00000000 	.word	0x00000000
 800c264:	406fe000 	.word	0x406fe000
 800c268:	42fe0000 	.word	0x42fe0000
 800c26c:	20000854 	.word	0x20000854
 800c270:	20000858 	.word	0x20000858
 800c274:	200000a8 	.word	0x200000a8
 800c278:	2000085c 	.word	0x2000085c

0800c27c <can_display>:

uint8_t can_display()
{
 800c27c:	b480      	push	{r7}
 800c27e:	af00      	add	r7, sp, #0
	return display_ready;
 800c280:	4b03      	ldr	r3, [pc, #12]	; (800c290 <can_display+0x14>)
 800c282:	781b      	ldrb	r3, [r3, #0]
}
 800c284:	4618      	mov	r0, r3
 800c286:	46bd      	mov	sp, r7
 800c288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28c:	4770      	bx	lr
 800c28e:	bf00      	nop
 800c290:	2000035c 	.word	0x2000035c

0800c294 <disable_signal_display>:

void disable_signal_display()
{
 800c294:	b480      	push	{r7}
 800c296:	af00      	add	r7, sp, #0
	display_ready = 0;
 800c298:	4b03      	ldr	r3, [pc, #12]	; (800c2a8 <disable_signal_display+0x14>)
 800c29a:	2200      	movs	r2, #0
 800c29c:	701a      	strb	r2, [r3, #0]
}
 800c29e:	bf00      	nop
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a6:	4770      	bx	lr
 800c2a8:	2000035c 	.word	0x2000035c

0800c2ac <is_signal_here>:
{
	return THRESHOLD_RATIO * ref_threshold;
}

uint8_t is_signal_here()
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	af00      	add	r7, sp, #0
	return signal_detected;
 800c2b0:	4b03      	ldr	r3, [pc, #12]	; (800c2c0 <is_signal_here+0x14>)
 800c2b2:	781b      	ldrb	r3, [r3, #0]
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2bc:	4770      	bx	lr
 800c2be:	bf00      	nop
 800c2c0:	20000358 	.word	0x20000358

0800c2c4 <getSignalCnt>:

uint16_t getSignalCnt()
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	af00      	add	r7, sp, #0
	return signal_counter;
 800c2c8:	4b03      	ldr	r3, [pc, #12]	; (800c2d8 <getSignalCnt+0x14>)
 800c2ca:	881b      	ldrh	r3, [r3, #0]
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d4:	4770      	bx	lr
 800c2d6:	bf00      	nop
 800c2d8:	2000035a 	.word	0x2000035a

0800c2dc <get_signal_data>:

uint8_t* get_signal_data(SIGNAL_ID id)
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b085      	sub	sp, #20
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	71fb      	strb	r3, [r7, #7]
	uint8_t* ret = 0;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	60fb      	str	r3, [r7, #12]

	switch(id)
 800c2ea:	79fb      	ldrb	r3, [r7, #7]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d002      	beq.n	800c2f6 <get_signal_data+0x1a>
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	d003      	beq.n	800c2fc <get_signal_data+0x20>
 800c2f4:	e005      	b.n	800c302 <get_signal_data+0x26>
	{
	case INPUT:
		ret = raw_signal;
 800c2f6:	4b0a      	ldr	r3, [pc, #40]	; (800c320 <get_signal_data+0x44>)
 800c2f8:	60fb      	str	r3, [r7, #12]
		break;
 800c2fa:	e009      	b.n	800c310 <get_signal_data+0x34>
	case REF:
		ret = ref_signal;
 800c2fc:	4b09      	ldr	r3, [pc, #36]	; (800c324 <get_signal_data+0x48>)
 800c2fe:	60fb      	str	r3, [r7, #12]
		break;
 800c300:	e006      	b.n	800c310 <get_signal_data+0x34>
	default:
		ret = (corr_func + sample_corr_max - 200);
 800c302:	4b09      	ldr	r3, [pc, #36]	; (800c328 <get_signal_data+0x4c>)
 800c304:	881b      	ldrh	r3, [r3, #0]
 800c306:	3bc8      	subs	r3, #200	; 0xc8
 800c308:	4a08      	ldr	r2, [pc, #32]	; (800c32c <get_signal_data+0x50>)
 800c30a:	4413      	add	r3, r2
 800c30c:	60fb      	str	r3, [r7, #12]
		//ret = (corr_func + (sample_corr_max - 200));
		break;
 800c30e:	bf00      	nop
	}

	return ret;
 800c310:	68fb      	ldr	r3, [r7, #12]
}
 800c312:	4618      	mov	r0, r3
 800c314:	3714      	adds	r7, #20
 800c316:	46bd      	mov	sp, r7
 800c318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31c:	4770      	bx	lr
 800c31e:	bf00      	nop
 800c320:	20002460 	.word	0x20002460
 800c324:	20002060 	.word	0x20002060
 800c328:	20000858 	.word	0x20000858
 800c32c:	2000085c 	.word	0x2000085c

0800c330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c330:	b480      	push	{r7}
 800c332:	b083      	sub	sp, #12
 800c334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800c336:	4b0f      	ldr	r3, [pc, #60]	; (800c374 <HAL_MspInit+0x44>)
 800c338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c33a:	4a0e      	ldr	r2, [pc, #56]	; (800c374 <HAL_MspInit+0x44>)
 800c33c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c340:	6413      	str	r3, [r2, #64]	; 0x40
 800c342:	4b0c      	ldr	r3, [pc, #48]	; (800c374 <HAL_MspInit+0x44>)
 800c344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c34a:	607b      	str	r3, [r7, #4]
 800c34c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c34e:	4b09      	ldr	r3, [pc, #36]	; (800c374 <HAL_MspInit+0x44>)
 800c350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c352:	4a08      	ldr	r2, [pc, #32]	; (800c374 <HAL_MspInit+0x44>)
 800c354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c358:	6453      	str	r3, [r2, #68]	; 0x44
 800c35a:	4b06      	ldr	r3, [pc, #24]	; (800c374 <HAL_MspInit+0x44>)
 800c35c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c35e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c362:	603b      	str	r3, [r7, #0]
 800c364:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c366:	bf00      	nop
 800c368:	370c      	adds	r7, #12
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr
 800c372:	bf00      	nop
 800c374:	40023800 	.word	0x40023800

0800c378 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b08a      	sub	sp, #40	; 0x28
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c380:	f107 0314 	add.w	r3, r7, #20
 800c384:	2200      	movs	r2, #0
 800c386:	601a      	str	r2, [r3, #0]
 800c388:	605a      	str	r2, [r3, #4]
 800c38a:	609a      	str	r2, [r3, #8]
 800c38c:	60da      	str	r2, [r3, #12]
 800c38e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4a31      	ldr	r2, [pc, #196]	; (800c45c <HAL_ADC_MspInit+0xe4>)
 800c396:	4293      	cmp	r3, r2
 800c398:	d15c      	bne.n	800c454 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800c39a:	4b31      	ldr	r3, [pc, #196]	; (800c460 <HAL_ADC_MspInit+0xe8>)
 800c39c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c39e:	4a30      	ldr	r2, [pc, #192]	; (800c460 <HAL_ADC_MspInit+0xe8>)
 800c3a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3a4:	6453      	str	r3, [r2, #68]	; 0x44
 800c3a6:	4b2e      	ldr	r3, [pc, #184]	; (800c460 <HAL_ADC_MspInit+0xe8>)
 800c3a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3ae:	613b      	str	r3, [r7, #16]
 800c3b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c3b2:	4b2b      	ldr	r3, [pc, #172]	; (800c460 <HAL_ADC_MspInit+0xe8>)
 800c3b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3b6:	4a2a      	ldr	r2, [pc, #168]	; (800c460 <HAL_ADC_MspInit+0xe8>)
 800c3b8:	f043 0301 	orr.w	r3, r3, #1
 800c3bc:	6313      	str	r3, [r2, #48]	; 0x30
 800c3be:	4b28      	ldr	r3, [pc, #160]	; (800c460 <HAL_ADC_MspInit+0xe8>)
 800c3c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3c2:	f003 0301 	and.w	r3, r3, #1
 800c3c6:	60fb      	str	r3, [r7, #12]
 800c3c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0/WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c3ce:	2303      	movs	r3, #3
 800c3d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c3d6:	f107 0314 	add.w	r3, r7, #20
 800c3da:	4619      	mov	r1, r3
 800c3dc:	4821      	ldr	r0, [pc, #132]	; (800c464 <HAL_ADC_MspInit+0xec>)
 800c3de:	f7f8 fd5d 	bl	8004e9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 800c3e2:	4b21      	ldr	r3, [pc, #132]	; (800c468 <HAL_ADC_MspInit+0xf0>)
 800c3e4:	4a21      	ldr	r2, [pc, #132]	; (800c46c <HAL_ADC_MspInit+0xf4>)
 800c3e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800c3e8:	4b1f      	ldr	r3, [pc, #124]	; (800c468 <HAL_ADC_MspInit+0xf0>)
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c3ee:	4b1e      	ldr	r3, [pc, #120]	; (800c468 <HAL_ADC_MspInit+0xf0>)
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800c3f4:	4b1c      	ldr	r3, [pc, #112]	; (800c468 <HAL_ADC_MspInit+0xf0>)
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800c3fa:	4b1b      	ldr	r3, [pc, #108]	; (800c468 <HAL_ADC_MspInit+0xf0>)
 800c3fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c400:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c402:	4b19      	ldr	r3, [pc, #100]	; (800c468 <HAL_ADC_MspInit+0xf0>)
 800c404:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c408:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c40a:	4b17      	ldr	r3, [pc, #92]	; (800c468 <HAL_ADC_MspInit+0xf0>)
 800c40c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c410:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800c412:	4b15      	ldr	r3, [pc, #84]	; (800c468 <HAL_ADC_MspInit+0xf0>)
 800c414:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c418:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800c41a:	4b13      	ldr	r3, [pc, #76]	; (800c468 <HAL_ADC_MspInit+0xf0>)
 800c41c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c420:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c422:	4b11      	ldr	r3, [pc, #68]	; (800c468 <HAL_ADC_MspInit+0xf0>)
 800c424:	2200      	movs	r2, #0
 800c426:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800c428:	480f      	ldr	r0, [pc, #60]	; (800c468 <HAL_ADC_MspInit+0xf0>)
 800c42a:	f7f7 fdc7 	bl	8003fbc <HAL_DMA_Init>
 800c42e:	4603      	mov	r3, r0
 800c430:	2b00      	cmp	r3, #0
 800c432:	d001      	beq.n	800c438 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 800c434:	f7ff fbf4 	bl	800bc20 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	4a0b      	ldr	r2, [pc, #44]	; (800c468 <HAL_ADC_MspInit+0xf0>)
 800c43c:	639a      	str	r2, [r3, #56]	; 0x38
 800c43e:	4a0a      	ldr	r2, [pc, #40]	; (800c468 <HAL_ADC_MspInit+0xf0>)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800c444:	2200      	movs	r2, #0
 800c446:	2100      	movs	r1, #0
 800c448:	2012      	movs	r0, #18
 800c44a:	f7f7 fd0e 	bl	8003e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800c44e:	2012      	movs	r0, #18
 800c450:	f7f7 fd27 	bl	8003ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800c454:	bf00      	nop
 800c456:	3728      	adds	r7, #40	; 0x28
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}
 800c45c:	40012000 	.word	0x40012000
 800c460:	40023800 	.word	0x40023800
 800c464:	40020000 	.word	0x40020000
 800c468:	200006d4 	.word	0x200006d4
 800c46c:	40026470 	.word	0x40026470

0800c470 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b08e      	sub	sp, #56	; 0x38
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c47c:	2200      	movs	r2, #0
 800c47e:	601a      	str	r2, [r3, #0]
 800c480:	605a      	str	r2, [r3, #4]
 800c482:	609a      	str	r2, [r3, #8]
 800c484:	60da      	str	r2, [r3, #12]
 800c486:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4a50      	ldr	r2, [pc, #320]	; (800c5d0 <HAL_DCMI_MspInit+0x160>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	f040 809a 	bne.w	800c5c8 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800c494:	4b4f      	ldr	r3, [pc, #316]	; (800c5d4 <HAL_DCMI_MspInit+0x164>)
 800c496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c498:	4a4e      	ldr	r2, [pc, #312]	; (800c5d4 <HAL_DCMI_MspInit+0x164>)
 800c49a:	f043 0301 	orr.w	r3, r3, #1
 800c49e:	6353      	str	r3, [r2, #52]	; 0x34
 800c4a0:	4b4c      	ldr	r3, [pc, #304]	; (800c5d4 <HAL_DCMI_MspInit+0x164>)
 800c4a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4a4:	f003 0301 	and.w	r3, r3, #1
 800c4a8:	623b      	str	r3, [r7, #32]
 800c4aa:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800c4ac:	4b49      	ldr	r3, [pc, #292]	; (800c5d4 <HAL_DCMI_MspInit+0x164>)
 800c4ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4b0:	4a48      	ldr	r2, [pc, #288]	; (800c5d4 <HAL_DCMI_MspInit+0x164>)
 800c4b2:	f043 0310 	orr.w	r3, r3, #16
 800c4b6:	6313      	str	r3, [r2, #48]	; 0x30
 800c4b8:	4b46      	ldr	r3, [pc, #280]	; (800c5d4 <HAL_DCMI_MspInit+0x164>)
 800c4ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4bc:	f003 0310 	and.w	r3, r3, #16
 800c4c0:	61fb      	str	r3, [r7, #28]
 800c4c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c4c4:	4b43      	ldr	r3, [pc, #268]	; (800c5d4 <HAL_DCMI_MspInit+0x164>)
 800c4c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4c8:	4a42      	ldr	r2, [pc, #264]	; (800c5d4 <HAL_DCMI_MspInit+0x164>)
 800c4ca:	f043 0308 	orr.w	r3, r3, #8
 800c4ce:	6313      	str	r3, [r2, #48]	; 0x30
 800c4d0:	4b40      	ldr	r3, [pc, #256]	; (800c5d4 <HAL_DCMI_MspInit+0x164>)
 800c4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4d4:	f003 0308 	and.w	r3, r3, #8
 800c4d8:	61bb      	str	r3, [r7, #24]
 800c4da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c4dc:	4b3d      	ldr	r3, [pc, #244]	; (800c5d4 <HAL_DCMI_MspInit+0x164>)
 800c4de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4e0:	4a3c      	ldr	r2, [pc, #240]	; (800c5d4 <HAL_DCMI_MspInit+0x164>)
 800c4e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4e6:	6313      	str	r3, [r2, #48]	; 0x30
 800c4e8:	4b3a      	ldr	r3, [pc, #232]	; (800c5d4 <HAL_DCMI_MspInit+0x164>)
 800c4ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4f0:	617b      	str	r3, [r7, #20]
 800c4f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800c4f4:	4b37      	ldr	r3, [pc, #220]	; (800c5d4 <HAL_DCMI_MspInit+0x164>)
 800c4f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4f8:	4a36      	ldr	r2, [pc, #216]	; (800c5d4 <HAL_DCMI_MspInit+0x164>)
 800c4fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4fe:	6313      	str	r3, [r2, #48]	; 0x30
 800c500:	4b34      	ldr	r3, [pc, #208]	; (800c5d4 <HAL_DCMI_MspInit+0x164>)
 800c502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c508:	613b      	str	r3, [r7, #16]
 800c50a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c50c:	4b31      	ldr	r3, [pc, #196]	; (800c5d4 <HAL_DCMI_MspInit+0x164>)
 800c50e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c510:	4a30      	ldr	r2, [pc, #192]	; (800c5d4 <HAL_DCMI_MspInit+0x164>)
 800c512:	f043 0301 	orr.w	r3, r3, #1
 800c516:	6313      	str	r3, [r2, #48]	; 0x30
 800c518:	4b2e      	ldr	r3, [pc, #184]	; (800c5d4 <HAL_DCMI_MspInit+0x164>)
 800c51a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c51c:	f003 0301 	and.w	r3, r3, #1
 800c520:	60fb      	str	r3, [r7, #12]
 800c522:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800c524:	2360      	movs	r3, #96	; 0x60
 800c526:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c528:	2302      	movs	r3, #2
 800c52a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c52c:	2300      	movs	r3, #0
 800c52e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c530:	2300      	movs	r3, #0
 800c532:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800c534:	230d      	movs	r3, #13
 800c536:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800c538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c53c:	4619      	mov	r1, r3
 800c53e:	4826      	ldr	r0, [pc, #152]	; (800c5d8 <HAL_DCMI_MspInit+0x168>)
 800c540:	f7f8 fcac 	bl	8004e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800c544:	2308      	movs	r3, #8
 800c546:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c548:	2302      	movs	r3, #2
 800c54a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c54c:	2300      	movs	r3, #0
 800c54e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c550:	2300      	movs	r3, #0
 800c552:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800c554:	230d      	movs	r3, #13
 800c556:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800c558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c55c:	4619      	mov	r1, r3
 800c55e:	481f      	ldr	r0, [pc, #124]	; (800c5dc <HAL_DCMI_MspInit+0x16c>)
 800c560:	f7f8 fc9c 	bl	8004e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800c564:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c568:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c56a:	2302      	movs	r3, #2
 800c56c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c56e:	2300      	movs	r3, #0
 800c570:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c572:	2300      	movs	r3, #0
 800c574:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800c576:	230d      	movs	r3, #13
 800c578:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800c57a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c57e:	4619      	mov	r1, r3
 800c580:	4817      	ldr	r0, [pc, #92]	; (800c5e0 <HAL_DCMI_MspInit+0x170>)
 800c582:	f7f8 fc8b 	bl	8004e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 800c586:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800c58a:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c58c:	2302      	movs	r3, #2
 800c58e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c590:	2300      	movs	r3, #0
 800c592:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c594:	2300      	movs	r3, #0
 800c596:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800c598:	230d      	movs	r3, #13
 800c59a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800c59c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	4810      	ldr	r0, [pc, #64]	; (800c5e4 <HAL_DCMI_MspInit+0x174>)
 800c5a4:	f7f8 fc7a 	bl	8004e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800c5a8:	2350      	movs	r3, #80	; 0x50
 800c5aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c5ac:	2302      	movs	r3, #2
 800c5ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800c5b8:	230d      	movs	r3, #13
 800c5ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c5bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	4809      	ldr	r0, [pc, #36]	; (800c5e8 <HAL_DCMI_MspInit+0x178>)
 800c5c4:	f7f8 fc6a 	bl	8004e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800c5c8:	bf00      	nop
 800c5ca:	3738      	adds	r7, #56	; 0x38
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}
 800c5d0:	50050000 	.word	0x50050000
 800c5d4:	40023800 	.word	0x40023800
 800c5d8:	40021000 	.word	0x40021000
 800c5dc:	40020c00 	.word	0x40020c00
 800c5e0:	40021800 	.word	0x40021800
 800c5e4:	40021c00 	.word	0x40021c00
 800c5e8:	40020000 	.word	0x40020000

0800c5ec <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b084      	sub	sp, #16
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	4a0d      	ldr	r2, [pc, #52]	; (800c630 <HAL_DMA2D_MspInit+0x44>)
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	d113      	bne.n	800c626 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800c5fe:	4b0d      	ldr	r3, [pc, #52]	; (800c634 <HAL_DMA2D_MspInit+0x48>)
 800c600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c602:	4a0c      	ldr	r2, [pc, #48]	; (800c634 <HAL_DMA2D_MspInit+0x48>)
 800c604:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c608:	6313      	str	r3, [r2, #48]	; 0x30
 800c60a:	4b0a      	ldr	r3, [pc, #40]	; (800c634 <HAL_DMA2D_MspInit+0x48>)
 800c60c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c60e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c612:	60fb      	str	r3, [r7, #12]
 800c614:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800c616:	2200      	movs	r2, #0
 800c618:	2100      	movs	r1, #0
 800c61a:	205a      	movs	r0, #90	; 0x5a
 800c61c:	f7f7 fc25 	bl	8003e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800c620:	205a      	movs	r0, #90	; 0x5a
 800c622:	f7f7 fc3e 	bl	8003ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800c626:	bf00      	nop
 800c628:	3710      	adds	r7, #16
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
 800c62e:	bf00      	nop
 800c630:	4002b000 	.word	0x4002b000
 800c634:	40023800 	.word	0x40023800

0800c638 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b08e      	sub	sp, #56	; 0x38
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c644:	2200      	movs	r2, #0
 800c646:	601a      	str	r2, [r3, #0]
 800c648:	605a      	str	r2, [r3, #4]
 800c64a:	609a      	str	r2, [r3, #8]
 800c64c:	60da      	str	r2, [r3, #12]
 800c64e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	4a55      	ldr	r2, [pc, #340]	; (800c7ac <HAL_LTDC_MspInit+0x174>)
 800c656:	4293      	cmp	r3, r2
 800c658:	f040 80a3 	bne.w	800c7a2 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800c65c:	4b54      	ldr	r3, [pc, #336]	; (800c7b0 <HAL_LTDC_MspInit+0x178>)
 800c65e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c660:	4a53      	ldr	r2, [pc, #332]	; (800c7b0 <HAL_LTDC_MspInit+0x178>)
 800c662:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c666:	6453      	str	r3, [r2, #68]	; 0x44
 800c668:	4b51      	ldr	r3, [pc, #324]	; (800c7b0 <HAL_LTDC_MspInit+0x178>)
 800c66a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c66c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c670:	623b      	str	r3, [r7, #32]
 800c672:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800c674:	4b4e      	ldr	r3, [pc, #312]	; (800c7b0 <HAL_LTDC_MspInit+0x178>)
 800c676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c678:	4a4d      	ldr	r2, [pc, #308]	; (800c7b0 <HAL_LTDC_MspInit+0x178>)
 800c67a:	f043 0310 	orr.w	r3, r3, #16
 800c67e:	6313      	str	r3, [r2, #48]	; 0x30
 800c680:	4b4b      	ldr	r3, [pc, #300]	; (800c7b0 <HAL_LTDC_MspInit+0x178>)
 800c682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c684:	f003 0310 	and.w	r3, r3, #16
 800c688:	61fb      	str	r3, [r7, #28]
 800c68a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c68c:	4b48      	ldr	r3, [pc, #288]	; (800c7b0 <HAL_LTDC_MspInit+0x178>)
 800c68e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c690:	4a47      	ldr	r2, [pc, #284]	; (800c7b0 <HAL_LTDC_MspInit+0x178>)
 800c692:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c696:	6313      	str	r3, [r2, #48]	; 0x30
 800c698:	4b45      	ldr	r3, [pc, #276]	; (800c7b0 <HAL_LTDC_MspInit+0x178>)
 800c69a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c69c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c6a0:	61bb      	str	r3, [r7, #24]
 800c6a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800c6a4:	4b42      	ldr	r3, [pc, #264]	; (800c7b0 <HAL_LTDC_MspInit+0x178>)
 800c6a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6a8:	4a41      	ldr	r2, [pc, #260]	; (800c7b0 <HAL_LTDC_MspInit+0x178>)
 800c6aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c6ae:	6313      	str	r3, [r2, #48]	; 0x30
 800c6b0:	4b3f      	ldr	r3, [pc, #252]	; (800c7b0 <HAL_LTDC_MspInit+0x178>)
 800c6b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c6b8:	617b      	str	r3, [r7, #20]
 800c6ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c6bc:	4b3c      	ldr	r3, [pc, #240]	; (800c7b0 <HAL_LTDC_MspInit+0x178>)
 800c6be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6c0:	4a3b      	ldr	r2, [pc, #236]	; (800c7b0 <HAL_LTDC_MspInit+0x178>)
 800c6c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6c6:	6313      	str	r3, [r2, #48]	; 0x30
 800c6c8:	4b39      	ldr	r3, [pc, #228]	; (800c7b0 <HAL_LTDC_MspInit+0x178>)
 800c6ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6d0:	613b      	str	r3, [r7, #16]
 800c6d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800c6d4:	4b36      	ldr	r3, [pc, #216]	; (800c7b0 <HAL_LTDC_MspInit+0x178>)
 800c6d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6d8:	4a35      	ldr	r2, [pc, #212]	; (800c7b0 <HAL_LTDC_MspInit+0x178>)
 800c6da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c6de:	6313      	str	r3, [r2, #48]	; 0x30
 800c6e0:	4b33      	ldr	r3, [pc, #204]	; (800c7b0 <HAL_LTDC_MspInit+0x178>)
 800c6e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6e8:	60fb      	str	r3, [r7, #12]
 800c6ea:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800c6ec:	2310      	movs	r3, #16
 800c6ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6f0:	2302      	movs	r3, #2
 800c6f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c6fc:	230e      	movs	r3, #14
 800c6fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800c700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c704:	4619      	mov	r1, r3
 800c706:	482b      	ldr	r0, [pc, #172]	; (800c7b4 <HAL_LTDC_MspInit+0x17c>)
 800c708:	f7f8 fbc8 	bl	8004e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800c70c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800c710:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c712:	2302      	movs	r3, #2
 800c714:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c716:	2300      	movs	r3, #0
 800c718:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c71a:	2300      	movs	r3, #0
 800c71c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c71e:	230e      	movs	r3, #14
 800c720:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800c722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c726:	4619      	mov	r1, r3
 800c728:	4823      	ldr	r0, [pc, #140]	; (800c7b8 <HAL_LTDC_MspInit+0x180>)
 800c72a:	f7f8 fbb7 	bl	8004e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 800c72e:	23f7      	movs	r3, #247	; 0xf7
 800c730:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c732:	2302      	movs	r3, #2
 800c734:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c736:	2300      	movs	r3, #0
 800c738:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c73a:	2300      	movs	r3, #0
 800c73c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c73e:	230e      	movs	r3, #14
 800c740:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800c742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c746:	4619      	mov	r1, r3
 800c748:	481c      	ldr	r0, [pc, #112]	; (800c7bc <HAL_LTDC_MspInit+0x184>)
 800c74a:	f7f8 fba7 	bl	8004e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800c74e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c752:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c754:	2302      	movs	r3, #2
 800c756:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c758:	2300      	movs	r3, #0
 800c75a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c75c:	2300      	movs	r3, #0
 800c75e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800c760:	2309      	movs	r3, #9
 800c762:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800c764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c768:	4619      	mov	r1, r3
 800c76a:	4815      	ldr	r0, [pc, #84]	; (800c7c0 <HAL_LTDC_MspInit+0x188>)
 800c76c:	f7f8 fb96 	bl	8004e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800c770:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800c774:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c776:	2302      	movs	r3, #2
 800c778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c77a:	2300      	movs	r3, #0
 800c77c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c77e:	2300      	movs	r3, #0
 800c780:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c782:	230e      	movs	r3, #14
 800c784:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800c786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c78a:	4619      	mov	r1, r3
 800c78c:	480d      	ldr	r0, [pc, #52]	; (800c7c4 <HAL_LTDC_MspInit+0x18c>)
 800c78e:	f7f8 fb85 	bl	8004e9c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800c792:	2200      	movs	r2, #0
 800c794:	2100      	movs	r1, #0
 800c796:	2058      	movs	r0, #88	; 0x58
 800c798:	f7f7 fb67 	bl	8003e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800c79c:	2058      	movs	r0, #88	; 0x58
 800c79e:	f7f7 fb80 	bl	8003ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800c7a2:	bf00      	nop
 800c7a4:	3738      	adds	r7, #56	; 0x38
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	40016800 	.word	0x40016800
 800c7b0:	40023800 	.word	0x40023800
 800c7b4:	40021000 	.word	0x40021000
 800c7b8:	40022400 	.word	0x40022400
 800c7bc:	40022800 	.word	0x40022800
 800c7c0:	40021800 	.word	0x40021800
 800c7c4:	40022000 	.word	0x40022000

0800c7c8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b08c      	sub	sp, #48	; 0x30
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c7d0:	f107 031c 	add.w	r3, r7, #28
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	601a      	str	r2, [r3, #0]
 800c7d8:	605a      	str	r2, [r3, #4]
 800c7da:	609a      	str	r2, [r3, #8]
 800c7dc:	60da      	str	r2, [r3, #12]
 800c7de:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	4a3b      	ldr	r2, [pc, #236]	; (800c8d4 <HAL_QSPI_MspInit+0x10c>)
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d170      	bne.n	800c8cc <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800c7ea:	4b3b      	ldr	r3, [pc, #236]	; (800c8d8 <HAL_QSPI_MspInit+0x110>)
 800c7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ee:	4a3a      	ldr	r2, [pc, #232]	; (800c8d8 <HAL_QSPI_MspInit+0x110>)
 800c7f0:	f043 0302 	orr.w	r3, r3, #2
 800c7f4:	6393      	str	r3, [r2, #56]	; 0x38
 800c7f6:	4b38      	ldr	r3, [pc, #224]	; (800c8d8 <HAL_QSPI_MspInit+0x110>)
 800c7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7fa:	f003 0302 	and.w	r3, r3, #2
 800c7fe:	61bb      	str	r3, [r7, #24]
 800c800:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800c802:	4b35      	ldr	r3, [pc, #212]	; (800c8d8 <HAL_QSPI_MspInit+0x110>)
 800c804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c806:	4a34      	ldr	r2, [pc, #208]	; (800c8d8 <HAL_QSPI_MspInit+0x110>)
 800c808:	f043 0310 	orr.w	r3, r3, #16
 800c80c:	6313      	str	r3, [r2, #48]	; 0x30
 800c80e:	4b32      	ldr	r3, [pc, #200]	; (800c8d8 <HAL_QSPI_MspInit+0x110>)
 800c810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c812:	f003 0310 	and.w	r3, r3, #16
 800c816:	617b      	str	r3, [r7, #20]
 800c818:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c81a:	4b2f      	ldr	r3, [pc, #188]	; (800c8d8 <HAL_QSPI_MspInit+0x110>)
 800c81c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c81e:	4a2e      	ldr	r2, [pc, #184]	; (800c8d8 <HAL_QSPI_MspInit+0x110>)
 800c820:	f043 0302 	orr.w	r3, r3, #2
 800c824:	6313      	str	r3, [r2, #48]	; 0x30
 800c826:	4b2c      	ldr	r3, [pc, #176]	; (800c8d8 <HAL_QSPI_MspInit+0x110>)
 800c828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c82a:	f003 0302 	and.w	r3, r3, #2
 800c82e:	613b      	str	r3, [r7, #16]
 800c830:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c832:	4b29      	ldr	r3, [pc, #164]	; (800c8d8 <HAL_QSPI_MspInit+0x110>)
 800c834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c836:	4a28      	ldr	r2, [pc, #160]	; (800c8d8 <HAL_QSPI_MspInit+0x110>)
 800c838:	f043 0308 	orr.w	r3, r3, #8
 800c83c:	6313      	str	r3, [r2, #48]	; 0x30
 800c83e:	4b26      	ldr	r3, [pc, #152]	; (800c8d8 <HAL_QSPI_MspInit+0x110>)
 800c840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c842:	f003 0308 	and.w	r3, r3, #8
 800c846:	60fb      	str	r3, [r7, #12]
 800c848:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800c84a:	2304      	movs	r3, #4
 800c84c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c84e:	2302      	movs	r3, #2
 800c850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c852:	2300      	movs	r3, #0
 800c854:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c856:	2303      	movs	r3, #3
 800c858:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800c85a:	2309      	movs	r3, #9
 800c85c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800c85e:	f107 031c 	add.w	r3, r7, #28
 800c862:	4619      	mov	r1, r3
 800c864:	481d      	ldr	r0, [pc, #116]	; (800c8dc <HAL_QSPI_MspInit+0x114>)
 800c866:	f7f8 fb19 	bl	8004e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800c86a:	2340      	movs	r3, #64	; 0x40
 800c86c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c86e:	2302      	movs	r3, #2
 800c870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c872:	2300      	movs	r3, #0
 800c874:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c876:	2303      	movs	r3, #3
 800c878:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800c87a:	230a      	movs	r3, #10
 800c87c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800c87e:	f107 031c 	add.w	r3, r7, #28
 800c882:	4619      	mov	r1, r3
 800c884:	4816      	ldr	r0, [pc, #88]	; (800c8e0 <HAL_QSPI_MspInit+0x118>)
 800c886:	f7f8 fb09 	bl	8004e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c88a:	2304      	movs	r3, #4
 800c88c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c88e:	2302      	movs	r3, #2
 800c890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c892:	2300      	movs	r3, #0
 800c894:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c896:	2303      	movs	r3, #3
 800c898:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800c89a:	2309      	movs	r3, #9
 800c89c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c89e:	f107 031c 	add.w	r3, r7, #28
 800c8a2:	4619      	mov	r1, r3
 800c8a4:	480e      	ldr	r0, [pc, #56]	; (800c8e0 <HAL_QSPI_MspInit+0x118>)
 800c8a6:	f7f8 faf9 	bl	8004e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800c8aa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c8ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c8b0:	2302      	movs	r3, #2
 800c8b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c8b8:	2303      	movs	r3, #3
 800c8ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800c8bc:	2309      	movs	r3, #9
 800c8be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c8c0:	f107 031c 	add.w	r3, r7, #28
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	4807      	ldr	r0, [pc, #28]	; (800c8e4 <HAL_QSPI_MspInit+0x11c>)
 800c8c8:	f7f8 fae8 	bl	8004e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800c8cc:	bf00      	nop
 800c8ce:	3730      	adds	r7, #48	; 0x30
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}
 800c8d4:	a0001000 	.word	0xa0001000
 800c8d8:	40023800 	.word	0x40023800
 800c8dc:	40021000 	.word	0x40021000
 800c8e0:	40020400 	.word	0x40020400
 800c8e4:	40020c00 	.word	0x40020c00

0800c8e8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b083      	sub	sp, #12
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a07      	ldr	r2, [pc, #28]	; (800c914 <HAL_RTC_MspInit+0x2c>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d105      	bne.n	800c906 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800c8fa:	4b07      	ldr	r3, [pc, #28]	; (800c918 <HAL_RTC_MspInit+0x30>)
 800c8fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8fe:	4a06      	ldr	r2, [pc, #24]	; (800c918 <HAL_RTC_MspInit+0x30>)
 800c900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c904:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800c906:	bf00      	nop
 800c908:	370c      	adds	r7, #12
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop
 800c914:	40002800 	.word	0x40002800
 800c918:	40023800 	.word	0x40023800

0800c91c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b08a      	sub	sp, #40	; 0x28
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c924:	f107 0314 	add.w	r3, r7, #20
 800c928:	2200      	movs	r2, #0
 800c92a:	601a      	str	r2, [r3, #0]
 800c92c:	605a      	str	r2, [r3, #4]
 800c92e:	609a      	str	r2, [r3, #8]
 800c930:	60da      	str	r2, [r3, #12]
 800c932:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	4a25      	ldr	r2, [pc, #148]	; (800c9d0 <HAL_SD_MspInit+0xb4>)
 800c93a:	4293      	cmp	r3, r2
 800c93c:	d144      	bne.n	800c9c8 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800c93e:	4b25      	ldr	r3, [pc, #148]	; (800c9d4 <HAL_SD_MspInit+0xb8>)
 800c940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c942:	4a24      	ldr	r2, [pc, #144]	; (800c9d4 <HAL_SD_MspInit+0xb8>)
 800c944:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c948:	6453      	str	r3, [r2, #68]	; 0x44
 800c94a:	4b22      	ldr	r3, [pc, #136]	; (800c9d4 <HAL_SD_MspInit+0xb8>)
 800c94c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c94e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c952:	613b      	str	r3, [r7, #16]
 800c954:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c956:	4b1f      	ldr	r3, [pc, #124]	; (800c9d4 <HAL_SD_MspInit+0xb8>)
 800c958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c95a:	4a1e      	ldr	r2, [pc, #120]	; (800c9d4 <HAL_SD_MspInit+0xb8>)
 800c95c:	f043 0304 	orr.w	r3, r3, #4
 800c960:	6313      	str	r3, [r2, #48]	; 0x30
 800c962:	4b1c      	ldr	r3, [pc, #112]	; (800c9d4 <HAL_SD_MspInit+0xb8>)
 800c964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c966:	f003 0304 	and.w	r3, r3, #4
 800c96a:	60fb      	str	r3, [r7, #12]
 800c96c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c96e:	4b19      	ldr	r3, [pc, #100]	; (800c9d4 <HAL_SD_MspInit+0xb8>)
 800c970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c972:	4a18      	ldr	r2, [pc, #96]	; (800c9d4 <HAL_SD_MspInit+0xb8>)
 800c974:	f043 0308 	orr.w	r3, r3, #8
 800c978:	6313      	str	r3, [r2, #48]	; 0x30
 800c97a:	4b16      	ldr	r3, [pc, #88]	; (800c9d4 <HAL_SD_MspInit+0xb8>)
 800c97c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c97e:	f003 0308 	and.w	r3, r3, #8
 800c982:	60bb      	str	r3, [r7, #8]
 800c984:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 800c986:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800c98a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c98c:	2302      	movs	r3, #2
 800c98e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c990:	2300      	movs	r3, #0
 800c992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c994:	2303      	movs	r3, #3
 800c996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800c998:	230c      	movs	r3, #12
 800c99a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c99c:	f107 0314 	add.w	r3, r7, #20
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	480d      	ldr	r0, [pc, #52]	; (800c9d8 <HAL_SD_MspInit+0xbc>)
 800c9a4:	f7f8 fa7a 	bl	8004e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800c9a8:	2304      	movs	r3, #4
 800c9aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9ac:	2302      	movs	r3, #2
 800c9ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c9b4:	2303      	movs	r3, #3
 800c9b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800c9b8:	230c      	movs	r3, #12
 800c9ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800c9bc:	f107 0314 	add.w	r3, r7, #20
 800c9c0:	4619      	mov	r1, r3
 800c9c2:	4806      	ldr	r0, [pc, #24]	; (800c9dc <HAL_SD_MspInit+0xc0>)
 800c9c4:	f7f8 fa6a 	bl	8004e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800c9c8:	bf00      	nop
 800c9ca:	3728      	adds	r7, #40	; 0x28
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	40012c00 	.word	0x40012c00
 800c9d4:	40023800 	.word	0x40023800
 800c9d8:	40020800 	.word	0x40020800
 800c9dc:	40020c00 	.word	0x40020c00

0800c9e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b08a      	sub	sp, #40	; 0x28
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c9e8:	f107 0314 	add.w	r3, r7, #20
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	601a      	str	r2, [r3, #0]
 800c9f0:	605a      	str	r2, [r3, #4]
 800c9f2:	609a      	str	r2, [r3, #8]
 800c9f4:	60da      	str	r2, [r3, #12]
 800c9f6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	4a28      	ldr	r2, [pc, #160]	; (800caa0 <HAL_TIM_Base_MspInit+0xc0>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d130      	bne.n	800ca64 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ca02:	4b28      	ldr	r3, [pc, #160]	; (800caa4 <HAL_TIM_Base_MspInit+0xc4>)
 800ca04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca06:	4a27      	ldr	r2, [pc, #156]	; (800caa4 <HAL_TIM_Base_MspInit+0xc4>)
 800ca08:	f043 0302 	orr.w	r3, r3, #2
 800ca0c:	6413      	str	r3, [r2, #64]	; 0x40
 800ca0e:	4b25      	ldr	r3, [pc, #148]	; (800caa4 <HAL_TIM_Base_MspInit+0xc4>)
 800ca10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca12:	f003 0302 	and.w	r3, r3, #2
 800ca16:	613b      	str	r3, [r7, #16]
 800ca18:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ca1a:	4b22      	ldr	r3, [pc, #136]	; (800caa4 <HAL_TIM_Base_MspInit+0xc4>)
 800ca1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca1e:	4a21      	ldr	r2, [pc, #132]	; (800caa4 <HAL_TIM_Base_MspInit+0xc4>)
 800ca20:	f043 0302 	orr.w	r3, r3, #2
 800ca24:	6313      	str	r3, [r2, #48]	; 0x30
 800ca26:	4b1f      	ldr	r3, [pc, #124]	; (800caa4 <HAL_TIM_Base_MspInit+0xc4>)
 800ca28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca2a:	f003 0302 	and.w	r3, r3, #2
 800ca2e:	60fb      	str	r3, [r7, #12]
 800ca30:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800ca32:	2310      	movs	r3, #16
 800ca34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca36:	2302      	movs	r3, #2
 800ca38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800ca42:	2302      	movs	r3, #2
 800ca44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800ca46:	f107 0314 	add.w	r3, r7, #20
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	4816      	ldr	r0, [pc, #88]	; (800caa8 <HAL_TIM_Base_MspInit+0xc8>)
 800ca4e:	f7f8 fa25 	bl	8004e9c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800ca52:	2200      	movs	r2, #0
 800ca54:	2100      	movs	r1, #0
 800ca56:	201d      	movs	r0, #29
 800ca58:	f7f7 fa07 	bl	8003e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800ca5c:	201d      	movs	r0, #29
 800ca5e:	f7f7 fa20 	bl	8003ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800ca62:	e018      	b.n	800ca96 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM7)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	4a10      	ldr	r2, [pc, #64]	; (800caac <HAL_TIM_Base_MspInit+0xcc>)
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	d113      	bne.n	800ca96 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800ca6e:	4b0d      	ldr	r3, [pc, #52]	; (800caa4 <HAL_TIM_Base_MspInit+0xc4>)
 800ca70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca72:	4a0c      	ldr	r2, [pc, #48]	; (800caa4 <HAL_TIM_Base_MspInit+0xc4>)
 800ca74:	f043 0320 	orr.w	r3, r3, #32
 800ca78:	6413      	str	r3, [r2, #64]	; 0x40
 800ca7a:	4b0a      	ldr	r3, [pc, #40]	; (800caa4 <HAL_TIM_Base_MspInit+0xc4>)
 800ca7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca7e:	f003 0320 	and.w	r3, r3, #32
 800ca82:	60bb      	str	r3, [r7, #8]
 800ca84:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800ca86:	2200      	movs	r2, #0
 800ca88:	2100      	movs	r1, #0
 800ca8a:	2037      	movs	r0, #55	; 0x37
 800ca8c:	f7f7 f9ed 	bl	8003e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800ca90:	2037      	movs	r0, #55	; 0x37
 800ca92:	f7f7 fa06 	bl	8003ea2 <HAL_NVIC_EnableIRQ>
}
 800ca96:	bf00      	nop
 800ca98:	3728      	adds	r7, #40	; 0x28
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}
 800ca9e:	bf00      	nop
 800caa0:	40000400 	.word	0x40000400
 800caa4:	40023800 	.word	0x40023800
 800caa8:	40020400 	.word	0x40020400
 800caac:	40001400 	.word	0x40001400

0800cab0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b08a      	sub	sp, #40	; 0x28
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cab8:	f107 0314 	add.w	r3, r7, #20
 800cabc:	2200      	movs	r2, #0
 800cabe:	601a      	str	r2, [r3, #0]
 800cac0:	605a      	str	r2, [r3, #4]
 800cac2:	609a      	str	r2, [r3, #8]
 800cac4:	60da      	str	r2, [r3, #12]
 800cac6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	4a25      	ldr	r2, [pc, #148]	; (800cb64 <HAL_UART_MspInit+0xb4>)
 800cace:	4293      	cmp	r3, r2
 800cad0:	d144      	bne.n	800cb5c <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800cad2:	4b25      	ldr	r3, [pc, #148]	; (800cb68 <HAL_UART_MspInit+0xb8>)
 800cad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cad6:	4a24      	ldr	r2, [pc, #144]	; (800cb68 <HAL_UART_MspInit+0xb8>)
 800cad8:	f043 0310 	orr.w	r3, r3, #16
 800cadc:	6453      	str	r3, [r2, #68]	; 0x44
 800cade:	4b22      	ldr	r3, [pc, #136]	; (800cb68 <HAL_UART_MspInit+0xb8>)
 800cae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cae2:	f003 0310 	and.w	r3, r3, #16
 800cae6:	613b      	str	r3, [r7, #16]
 800cae8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800caea:	4b1f      	ldr	r3, [pc, #124]	; (800cb68 <HAL_UART_MspInit+0xb8>)
 800caec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caee:	4a1e      	ldr	r2, [pc, #120]	; (800cb68 <HAL_UART_MspInit+0xb8>)
 800caf0:	f043 0302 	orr.w	r3, r3, #2
 800caf4:	6313      	str	r3, [r2, #48]	; 0x30
 800caf6:	4b1c      	ldr	r3, [pc, #112]	; (800cb68 <HAL_UART_MspInit+0xb8>)
 800caf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cafa:	f003 0302 	and.w	r3, r3, #2
 800cafe:	60fb      	str	r3, [r7, #12]
 800cb00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cb02:	4b19      	ldr	r3, [pc, #100]	; (800cb68 <HAL_UART_MspInit+0xb8>)
 800cb04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb06:	4a18      	ldr	r2, [pc, #96]	; (800cb68 <HAL_UART_MspInit+0xb8>)
 800cb08:	f043 0301 	orr.w	r3, r3, #1
 800cb0c:	6313      	str	r3, [r2, #48]	; 0x30
 800cb0e:	4b16      	ldr	r3, [pc, #88]	; (800cb68 <HAL_UART_MspInit+0xb8>)
 800cb10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb12:	f003 0301 	and.w	r3, r3, #1
 800cb16:	60bb      	str	r3, [r7, #8]
 800cb18:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800cb1a:	2380      	movs	r3, #128	; 0x80
 800cb1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb1e:	2302      	movs	r3, #2
 800cb20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb22:	2300      	movs	r3, #0
 800cb24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cb26:	2300      	movs	r3, #0
 800cb28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800cb2a:	2307      	movs	r3, #7
 800cb2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800cb2e:	f107 0314 	add.w	r3, r7, #20
 800cb32:	4619      	mov	r1, r3
 800cb34:	480d      	ldr	r0, [pc, #52]	; (800cb6c <HAL_UART_MspInit+0xbc>)
 800cb36:	f7f8 f9b1 	bl	8004e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800cb3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb40:	2302      	movs	r3, #2
 800cb42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb44:	2300      	movs	r3, #0
 800cb46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800cb4c:	2307      	movs	r3, #7
 800cb4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800cb50:	f107 0314 	add.w	r3, r7, #20
 800cb54:	4619      	mov	r1, r3
 800cb56:	4806      	ldr	r0, [pc, #24]	; (800cb70 <HAL_UART_MspInit+0xc0>)
 800cb58:	f7f8 f9a0 	bl	8004e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800cb5c:	bf00      	nop
 800cb5e:	3728      	adds	r7, #40	; 0x28
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	40011000 	.word	0x40011000
 800cb68:	40023800 	.word	0x40023800
 800cb6c:	40020400 	.word	0x40020400
 800cb70:	40020000 	.word	0x40020000

0800cb74 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b086      	sub	sp, #24
 800cb78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800cb7a:	1d3b      	adds	r3, r7, #4
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	601a      	str	r2, [r3, #0]
 800cb80:	605a      	str	r2, [r3, #4]
 800cb82:	609a      	str	r2, [r3, #8]
 800cb84:	60da      	str	r2, [r3, #12]
 800cb86:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800cb88:	4b3a      	ldr	r3, [pc, #232]	; (800cc74 <HAL_FMC_MspInit+0x100>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d16d      	bne.n	800cc6c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800cb90:	4b38      	ldr	r3, [pc, #224]	; (800cc74 <HAL_FMC_MspInit+0x100>)
 800cb92:	2201      	movs	r2, #1
 800cb94:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800cb96:	4b38      	ldr	r3, [pc, #224]	; (800cc78 <HAL_FMC_MspInit+0x104>)
 800cb98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb9a:	4a37      	ldr	r2, [pc, #220]	; (800cc78 <HAL_FMC_MspInit+0x104>)
 800cb9c:	f043 0301 	orr.w	r3, r3, #1
 800cba0:	6393      	str	r3, [r2, #56]	; 0x38
 800cba2:	4b35      	ldr	r3, [pc, #212]	; (800cc78 <HAL_FMC_MspInit+0x104>)
 800cba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cba6:	f003 0301 	and.w	r3, r3, #1
 800cbaa:	603b      	str	r3, [r7, #0]
 800cbac:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800cbae:	f64f 7383 	movw	r3, #65411	; 0xff83
 800cbb2:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbb4:	2302      	movs	r3, #2
 800cbb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cbbc:	2303      	movs	r3, #3
 800cbbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800cbc0:	230c      	movs	r3, #12
 800cbc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800cbc4:	1d3b      	adds	r3, r7, #4
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	482c      	ldr	r0, [pc, #176]	; (800cc7c <HAL_FMC_MspInit+0x108>)
 800cbca:	f7f8 f967 	bl	8004e9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800cbce:	f248 1333 	movw	r3, #33075	; 0x8133
 800cbd2:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbd4:	2302      	movs	r3, #2
 800cbd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cbdc:	2303      	movs	r3, #3
 800cbde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800cbe0:	230c      	movs	r3, #12
 800cbe2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800cbe4:	1d3b      	adds	r3, r7, #4
 800cbe6:	4619      	mov	r1, r3
 800cbe8:	4825      	ldr	r0, [pc, #148]	; (800cc80 <HAL_FMC_MspInit+0x10c>)
 800cbea:	f7f8 f957 	bl	8004e9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800cbee:	f24c 7303 	movw	r3, #50947	; 0xc703
 800cbf2:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbf4:	2302      	movs	r3, #2
 800cbf6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cbfc:	2303      	movs	r3, #3
 800cbfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800cc00:	230c      	movs	r3, #12
 800cc02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cc04:	1d3b      	adds	r3, r7, #4
 800cc06:	4619      	mov	r1, r3
 800cc08:	481e      	ldr	r0, [pc, #120]	; (800cc84 <HAL_FMC_MspInit+0x110>)
 800cc0a:	f7f8 f947 	bl	8004e9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800cc0e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800cc12:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc14:	2302      	movs	r3, #2
 800cc16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc1c:	2303      	movs	r3, #3
 800cc1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800cc20:	230c      	movs	r3, #12
 800cc22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800cc24:	1d3b      	adds	r3, r7, #4
 800cc26:	4619      	mov	r1, r3
 800cc28:	4817      	ldr	r0, [pc, #92]	; (800cc88 <HAL_FMC_MspInit+0x114>)
 800cc2a:	f7f8 f937 	bl	8004e9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800cc2e:	2328      	movs	r3, #40	; 0x28
 800cc30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc32:	2302      	movs	r3, #2
 800cc34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc36:	2300      	movs	r3, #0
 800cc38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc3a:	2303      	movs	r3, #3
 800cc3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800cc3e:	230c      	movs	r3, #12
 800cc40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800cc42:	1d3b      	adds	r3, r7, #4
 800cc44:	4619      	mov	r1, r3
 800cc46:	4811      	ldr	r0, [pc, #68]	; (800cc8c <HAL_FMC_MspInit+0x118>)
 800cc48:	f7f8 f928 	bl	8004e9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800cc4c:	2308      	movs	r3, #8
 800cc4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc50:	2302      	movs	r3, #2
 800cc52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc54:	2300      	movs	r3, #0
 800cc56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc58:	2303      	movs	r3, #3
 800cc5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800cc5c:	230c      	movs	r3, #12
 800cc5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800cc60:	1d3b      	adds	r3, r7, #4
 800cc62:	4619      	mov	r1, r3
 800cc64:	480a      	ldr	r0, [pc, #40]	; (800cc90 <HAL_FMC_MspInit+0x11c>)
 800cc66:	f7f8 f919 	bl	8004e9c <HAL_GPIO_Init>
 800cc6a:	e000      	b.n	800cc6e <HAL_FMC_MspInit+0xfa>
    return;
 800cc6c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800cc6e:	3718      	adds	r7, #24
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}
 800cc74:	20000360 	.word	0x20000360
 800cc78:	40023800 	.word	0x40023800
 800cc7c:	40021000 	.word	0x40021000
 800cc80:	40021800 	.word	0x40021800
 800cc84:	40020c00 	.word	0x40020c00
 800cc88:	40021400 	.word	0x40021400
 800cc8c:	40021c00 	.word	0x40021c00
 800cc90:	40020800 	.word	0x40020800

0800cc94 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b082      	sub	sp, #8
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800cc9c:	f7ff ff6a 	bl	800cb74 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800cca0:	bf00      	nop
 800cca2:	3708      	adds	r7, #8
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}

0800cca8 <SysTick_Handler>:
extern DMA2D_HandleTypeDef hdma2d;
extern LTDC_HandleTypeDef hltdc;
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim7;
/* USER CODE BEGIN EV */
void SysTick_Handler(void) {
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	af00      	add	r7, sp, #0
    HAL_IncTick();
 800ccac:	f7f6 f9b4 	bl	8003018 <HAL_IncTick>
}
 800ccb0:	bf00      	nop
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ccb8:	bf00      	nop
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc0:	4770      	bx	lr

0800ccc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ccc2:	b480      	push	{r7}
 800ccc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ccc6:	e7fe      	b.n	800ccc6 <HardFault_Handler+0x4>

0800ccc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800cccc:	e7fe      	b.n	800cccc <MemManage_Handler+0x4>

0800ccce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ccce:	b480      	push	{r7}
 800ccd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ccd2:	e7fe      	b.n	800ccd2 <BusFault_Handler+0x4>

0800ccd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ccd8:	e7fe      	b.n	800ccd8 <UsageFault_Handler+0x4>

0800ccda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ccda:	b480      	push	{r7}
 800ccdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ccde:	bf00      	nop
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr

0800cce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800cce8:	b480      	push	{r7}
 800ccea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ccec:	bf00      	nop
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf4:	4770      	bx	lr

0800ccf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ccf6:	b480      	push	{r7}
 800ccf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ccfa:	bf00      	nop
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd02:	4770      	bx	lr

0800cd04 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800cd08:	4802      	ldr	r0, [pc, #8]	; (800cd14 <ADC_IRQHandler+0x10>)
 800cd0a:	f7f6 facb 	bl	80032a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800cd0e:	bf00      	nop
 800cd10:	bd80      	pop	{r7, pc}
 800cd12:	bf00      	nop
 800cd14:	200005bc 	.word	0x200005bc

0800cd18 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800cd1c:	4802      	ldr	r0, [pc, #8]	; (800cd28 <TIM3_IRQHandler+0x10>)
 800cd1e:	f7fb ff1f 	bl	8008b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800cd22:	bf00      	nop
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop
 800cd28:	200004d4 	.word	0x200004d4

0800cd2c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800cd30:	4802      	ldr	r0, [pc, #8]	; (800cd3c <TIM7_IRQHandler+0x10>)
 800cd32:	f7fb ff15 	bl	8008b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800cd36:	bf00      	nop
 800cd38:	bd80      	pop	{r7, pc}
 800cd3a:	bf00      	nop
 800cd3c:	200007c8 	.word	0x200007c8

0800cd40 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800cd44:	4802      	ldr	r0, [pc, #8]	; (800cd50 <DMA2_Stream4_IRQHandler+0x10>)
 800cd46:	f7f7 faa5 	bl	8004294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800cd4a:	bf00      	nop
 800cd4c:	bd80      	pop	{r7, pc}
 800cd4e:	bf00      	nop
 800cd50:	200006d4 	.word	0x200006d4

0800cd54 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800cd58:	4802      	ldr	r0, [pc, #8]	; (800cd64 <LTDC_IRQHandler+0x10>)
 800cd5a:	f7f9 f85f 	bl	8005e1c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800cd5e:	bf00      	nop
 800cd60:	bd80      	pop	{r7, pc}
 800cd62:	bf00      	nop
 800cd64:	20000514 	.word	0x20000514

0800cd68 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800cd6c:	4802      	ldr	r0, [pc, #8]	; (800cd78 <DMA2D_IRQHandler+0x10>)
 800cd6e:	f7f7 fe57 	bl	8004a20 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800cd72:	bf00      	nop
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	20000754 	.word	0x20000754

0800cd7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800cd80:	4b15      	ldr	r3, [pc, #84]	; (800cdd8 <SystemInit+0x5c>)
 800cd82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd86:	4a14      	ldr	r2, [pc, #80]	; (800cdd8 <SystemInit+0x5c>)
 800cd88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cd8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800cd90:	4b12      	ldr	r3, [pc, #72]	; (800cddc <SystemInit+0x60>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4a11      	ldr	r2, [pc, #68]	; (800cddc <SystemInit+0x60>)
 800cd96:	f043 0301 	orr.w	r3, r3, #1
 800cd9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800cd9c:	4b0f      	ldr	r3, [pc, #60]	; (800cddc <SystemInit+0x60>)
 800cd9e:	2200      	movs	r2, #0
 800cda0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800cda2:	4b0e      	ldr	r3, [pc, #56]	; (800cddc <SystemInit+0x60>)
 800cda4:	681a      	ldr	r2, [r3, #0]
 800cda6:	490d      	ldr	r1, [pc, #52]	; (800cddc <SystemInit+0x60>)
 800cda8:	4b0d      	ldr	r3, [pc, #52]	; (800cde0 <SystemInit+0x64>)
 800cdaa:	4013      	ands	r3, r2
 800cdac:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800cdae:	4b0b      	ldr	r3, [pc, #44]	; (800cddc <SystemInit+0x60>)
 800cdb0:	4a0c      	ldr	r2, [pc, #48]	; (800cde4 <SystemInit+0x68>)
 800cdb2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800cdb4:	4b09      	ldr	r3, [pc, #36]	; (800cddc <SystemInit+0x60>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	4a08      	ldr	r2, [pc, #32]	; (800cddc <SystemInit+0x60>)
 800cdba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cdbe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800cdc0:	4b06      	ldr	r3, [pc, #24]	; (800cddc <SystemInit+0x60>)
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800cdc6:	4b04      	ldr	r3, [pc, #16]	; (800cdd8 <SystemInit+0x5c>)
 800cdc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cdcc:	609a      	str	r2, [r3, #8]
#endif
}
 800cdce:	bf00      	nop
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd6:	4770      	bx	lr
 800cdd8:	e000ed00 	.word	0xe000ed00
 800cddc:	40023800 	.word	0x40023800
 800cde0:	fef6ffff 	.word	0xfef6ffff
 800cde4:	24003010 	.word	0x24003010

0800cde8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800cde8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ce20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800cdec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800cdee:	e003      	b.n	800cdf8 <LoopCopyDataInit>

0800cdf0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800cdf0:	4b0c      	ldr	r3, [pc, #48]	; (800ce24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800cdf2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800cdf4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800cdf6:	3104      	adds	r1, #4

0800cdf8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800cdf8:	480b      	ldr	r0, [pc, #44]	; (800ce28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800cdfa:	4b0c      	ldr	r3, [pc, #48]	; (800ce2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800cdfc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800cdfe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ce00:	d3f6      	bcc.n	800cdf0 <CopyDataInit>
  ldr  r2, =_sbss
 800ce02:	4a0b      	ldr	r2, [pc, #44]	; (800ce30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ce04:	e002      	b.n	800ce0c <LoopFillZerobss>

0800ce06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ce06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ce08:	f842 3b04 	str.w	r3, [r2], #4

0800ce0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ce0c:	4b09      	ldr	r3, [pc, #36]	; (800ce34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ce0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ce10:	d3f9      	bcc.n	800ce06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800ce12:	f7ff ffb3 	bl	800cd7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ce16:	f000 f811 	bl	800ce3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ce1a:	f7fd ff6d 	bl	800acf8 <main>
  bx  lr    
 800ce1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800ce20:	2004ffff 	.word	0x2004ffff
  ldr  r3, =_sidata
 800ce24:	08010118 	.word	0x08010118
  ldr  r0, =_sdata
 800ce28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ce2c:	20000114 	.word	0x20000114
  ldr  r2, =_sbss
 800ce30:	20000114 	.word	0x20000114
  ldr  r3, = _ebss
 800ce34:	20003864 	.word	0x20003864

0800ce38 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ce38:	e7fe      	b.n	800ce38 <CAN1_RX0_IRQHandler>
	...

0800ce3c <__libc_init_array>:
 800ce3c:	b570      	push	{r4, r5, r6, lr}
 800ce3e:	4e0d      	ldr	r6, [pc, #52]	; (800ce74 <__libc_init_array+0x38>)
 800ce40:	4c0d      	ldr	r4, [pc, #52]	; (800ce78 <__libc_init_array+0x3c>)
 800ce42:	1ba4      	subs	r4, r4, r6
 800ce44:	10a4      	asrs	r4, r4, #2
 800ce46:	2500      	movs	r5, #0
 800ce48:	42a5      	cmp	r5, r4
 800ce4a:	d109      	bne.n	800ce60 <__libc_init_array+0x24>
 800ce4c:	4e0b      	ldr	r6, [pc, #44]	; (800ce7c <__libc_init_array+0x40>)
 800ce4e:	4c0c      	ldr	r4, [pc, #48]	; (800ce80 <__libc_init_array+0x44>)
 800ce50:	f000 fc34 	bl	800d6bc <_init>
 800ce54:	1ba4      	subs	r4, r4, r6
 800ce56:	10a4      	asrs	r4, r4, #2
 800ce58:	2500      	movs	r5, #0
 800ce5a:	42a5      	cmp	r5, r4
 800ce5c:	d105      	bne.n	800ce6a <__libc_init_array+0x2e>
 800ce5e:	bd70      	pop	{r4, r5, r6, pc}
 800ce60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ce64:	4798      	blx	r3
 800ce66:	3501      	adds	r5, #1
 800ce68:	e7ee      	b.n	800ce48 <__libc_init_array+0xc>
 800ce6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ce6e:	4798      	blx	r3
 800ce70:	3501      	adds	r5, #1
 800ce72:	e7f2      	b.n	800ce5a <__libc_init_array+0x1e>
 800ce74:	08010110 	.word	0x08010110
 800ce78:	08010110 	.word	0x08010110
 800ce7c:	08010110 	.word	0x08010110
 800ce80:	08010114 	.word	0x08010114

0800ce84 <memset>:
 800ce84:	4402      	add	r2, r0
 800ce86:	4603      	mov	r3, r0
 800ce88:	4293      	cmp	r3, r2
 800ce8a:	d100      	bne.n	800ce8e <memset+0xa>
 800ce8c:	4770      	bx	lr
 800ce8e:	f803 1b01 	strb.w	r1, [r3], #1
 800ce92:	e7f9      	b.n	800ce88 <memset+0x4>

0800ce94 <siprintf>:
 800ce94:	b40e      	push	{r1, r2, r3}
 800ce96:	b500      	push	{lr}
 800ce98:	b09c      	sub	sp, #112	; 0x70
 800ce9a:	ab1d      	add	r3, sp, #116	; 0x74
 800ce9c:	9002      	str	r0, [sp, #8]
 800ce9e:	9006      	str	r0, [sp, #24]
 800cea0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cea4:	4809      	ldr	r0, [pc, #36]	; (800cecc <siprintf+0x38>)
 800cea6:	9107      	str	r1, [sp, #28]
 800cea8:	9104      	str	r1, [sp, #16]
 800ceaa:	4909      	ldr	r1, [pc, #36]	; (800ced0 <siprintf+0x3c>)
 800ceac:	f853 2b04 	ldr.w	r2, [r3], #4
 800ceb0:	9105      	str	r1, [sp, #20]
 800ceb2:	6800      	ldr	r0, [r0, #0]
 800ceb4:	9301      	str	r3, [sp, #4]
 800ceb6:	a902      	add	r1, sp, #8
 800ceb8:	f000 f866 	bl	800cf88 <_svfiprintf_r>
 800cebc:	9b02      	ldr	r3, [sp, #8]
 800cebe:	2200      	movs	r2, #0
 800cec0:	701a      	strb	r2, [r3, #0]
 800cec2:	b01c      	add	sp, #112	; 0x70
 800cec4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cec8:	b003      	add	sp, #12
 800ceca:	4770      	bx	lr
 800cecc:	200000b0 	.word	0x200000b0
 800ced0:	ffff0208 	.word	0xffff0208

0800ced4 <__ssputs_r>:
 800ced4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ced8:	688e      	ldr	r6, [r1, #8]
 800ceda:	429e      	cmp	r6, r3
 800cedc:	4682      	mov	sl, r0
 800cede:	460c      	mov	r4, r1
 800cee0:	4690      	mov	r8, r2
 800cee2:	4699      	mov	r9, r3
 800cee4:	d837      	bhi.n	800cf56 <__ssputs_r+0x82>
 800cee6:	898a      	ldrh	r2, [r1, #12]
 800cee8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ceec:	d031      	beq.n	800cf52 <__ssputs_r+0x7e>
 800ceee:	6825      	ldr	r5, [r4, #0]
 800cef0:	6909      	ldr	r1, [r1, #16]
 800cef2:	1a6f      	subs	r7, r5, r1
 800cef4:	6965      	ldr	r5, [r4, #20]
 800cef6:	2302      	movs	r3, #2
 800cef8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cefc:	fb95 f5f3 	sdiv	r5, r5, r3
 800cf00:	f109 0301 	add.w	r3, r9, #1
 800cf04:	443b      	add	r3, r7
 800cf06:	429d      	cmp	r5, r3
 800cf08:	bf38      	it	cc
 800cf0a:	461d      	movcc	r5, r3
 800cf0c:	0553      	lsls	r3, r2, #21
 800cf0e:	d530      	bpl.n	800cf72 <__ssputs_r+0x9e>
 800cf10:	4629      	mov	r1, r5
 800cf12:	f000 fb2b 	bl	800d56c <_malloc_r>
 800cf16:	4606      	mov	r6, r0
 800cf18:	b950      	cbnz	r0, 800cf30 <__ssputs_r+0x5c>
 800cf1a:	230c      	movs	r3, #12
 800cf1c:	f8ca 3000 	str.w	r3, [sl]
 800cf20:	89a3      	ldrh	r3, [r4, #12]
 800cf22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf26:	81a3      	strh	r3, [r4, #12]
 800cf28:	f04f 30ff 	mov.w	r0, #4294967295
 800cf2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf30:	463a      	mov	r2, r7
 800cf32:	6921      	ldr	r1, [r4, #16]
 800cf34:	f000 faa8 	bl	800d488 <memcpy>
 800cf38:	89a3      	ldrh	r3, [r4, #12]
 800cf3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cf3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf42:	81a3      	strh	r3, [r4, #12]
 800cf44:	6126      	str	r6, [r4, #16]
 800cf46:	6165      	str	r5, [r4, #20]
 800cf48:	443e      	add	r6, r7
 800cf4a:	1bed      	subs	r5, r5, r7
 800cf4c:	6026      	str	r6, [r4, #0]
 800cf4e:	60a5      	str	r5, [r4, #8]
 800cf50:	464e      	mov	r6, r9
 800cf52:	454e      	cmp	r6, r9
 800cf54:	d900      	bls.n	800cf58 <__ssputs_r+0x84>
 800cf56:	464e      	mov	r6, r9
 800cf58:	4632      	mov	r2, r6
 800cf5a:	4641      	mov	r1, r8
 800cf5c:	6820      	ldr	r0, [r4, #0]
 800cf5e:	f000 fa9e 	bl	800d49e <memmove>
 800cf62:	68a3      	ldr	r3, [r4, #8]
 800cf64:	1b9b      	subs	r3, r3, r6
 800cf66:	60a3      	str	r3, [r4, #8]
 800cf68:	6823      	ldr	r3, [r4, #0]
 800cf6a:	441e      	add	r6, r3
 800cf6c:	6026      	str	r6, [r4, #0]
 800cf6e:	2000      	movs	r0, #0
 800cf70:	e7dc      	b.n	800cf2c <__ssputs_r+0x58>
 800cf72:	462a      	mov	r2, r5
 800cf74:	f000 fb54 	bl	800d620 <_realloc_r>
 800cf78:	4606      	mov	r6, r0
 800cf7a:	2800      	cmp	r0, #0
 800cf7c:	d1e2      	bne.n	800cf44 <__ssputs_r+0x70>
 800cf7e:	6921      	ldr	r1, [r4, #16]
 800cf80:	4650      	mov	r0, sl
 800cf82:	f000 faa5 	bl	800d4d0 <_free_r>
 800cf86:	e7c8      	b.n	800cf1a <__ssputs_r+0x46>

0800cf88 <_svfiprintf_r>:
 800cf88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf8c:	461d      	mov	r5, r3
 800cf8e:	898b      	ldrh	r3, [r1, #12]
 800cf90:	061f      	lsls	r7, r3, #24
 800cf92:	b09d      	sub	sp, #116	; 0x74
 800cf94:	4680      	mov	r8, r0
 800cf96:	460c      	mov	r4, r1
 800cf98:	4616      	mov	r6, r2
 800cf9a:	d50f      	bpl.n	800cfbc <_svfiprintf_r+0x34>
 800cf9c:	690b      	ldr	r3, [r1, #16]
 800cf9e:	b96b      	cbnz	r3, 800cfbc <_svfiprintf_r+0x34>
 800cfa0:	2140      	movs	r1, #64	; 0x40
 800cfa2:	f000 fae3 	bl	800d56c <_malloc_r>
 800cfa6:	6020      	str	r0, [r4, #0]
 800cfa8:	6120      	str	r0, [r4, #16]
 800cfaa:	b928      	cbnz	r0, 800cfb8 <_svfiprintf_r+0x30>
 800cfac:	230c      	movs	r3, #12
 800cfae:	f8c8 3000 	str.w	r3, [r8]
 800cfb2:	f04f 30ff 	mov.w	r0, #4294967295
 800cfb6:	e0c8      	b.n	800d14a <_svfiprintf_r+0x1c2>
 800cfb8:	2340      	movs	r3, #64	; 0x40
 800cfba:	6163      	str	r3, [r4, #20]
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	9309      	str	r3, [sp, #36]	; 0x24
 800cfc0:	2320      	movs	r3, #32
 800cfc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cfc6:	2330      	movs	r3, #48	; 0x30
 800cfc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfcc:	9503      	str	r5, [sp, #12]
 800cfce:	f04f 0b01 	mov.w	fp, #1
 800cfd2:	4637      	mov	r7, r6
 800cfd4:	463d      	mov	r5, r7
 800cfd6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cfda:	b10b      	cbz	r3, 800cfe0 <_svfiprintf_r+0x58>
 800cfdc:	2b25      	cmp	r3, #37	; 0x25
 800cfde:	d13e      	bne.n	800d05e <_svfiprintf_r+0xd6>
 800cfe0:	ebb7 0a06 	subs.w	sl, r7, r6
 800cfe4:	d00b      	beq.n	800cffe <_svfiprintf_r+0x76>
 800cfe6:	4653      	mov	r3, sl
 800cfe8:	4632      	mov	r2, r6
 800cfea:	4621      	mov	r1, r4
 800cfec:	4640      	mov	r0, r8
 800cfee:	f7ff ff71 	bl	800ced4 <__ssputs_r>
 800cff2:	3001      	adds	r0, #1
 800cff4:	f000 80a4 	beq.w	800d140 <_svfiprintf_r+0x1b8>
 800cff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cffa:	4453      	add	r3, sl
 800cffc:	9309      	str	r3, [sp, #36]	; 0x24
 800cffe:	783b      	ldrb	r3, [r7, #0]
 800d000:	2b00      	cmp	r3, #0
 800d002:	f000 809d 	beq.w	800d140 <_svfiprintf_r+0x1b8>
 800d006:	2300      	movs	r3, #0
 800d008:	f04f 32ff 	mov.w	r2, #4294967295
 800d00c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d010:	9304      	str	r3, [sp, #16]
 800d012:	9307      	str	r3, [sp, #28]
 800d014:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d018:	931a      	str	r3, [sp, #104]	; 0x68
 800d01a:	462f      	mov	r7, r5
 800d01c:	2205      	movs	r2, #5
 800d01e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d022:	4850      	ldr	r0, [pc, #320]	; (800d164 <_svfiprintf_r+0x1dc>)
 800d024:	f7f3 f8f4 	bl	8000210 <memchr>
 800d028:	9b04      	ldr	r3, [sp, #16]
 800d02a:	b9d0      	cbnz	r0, 800d062 <_svfiprintf_r+0xda>
 800d02c:	06d9      	lsls	r1, r3, #27
 800d02e:	bf44      	itt	mi
 800d030:	2220      	movmi	r2, #32
 800d032:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d036:	071a      	lsls	r2, r3, #28
 800d038:	bf44      	itt	mi
 800d03a:	222b      	movmi	r2, #43	; 0x2b
 800d03c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d040:	782a      	ldrb	r2, [r5, #0]
 800d042:	2a2a      	cmp	r2, #42	; 0x2a
 800d044:	d015      	beq.n	800d072 <_svfiprintf_r+0xea>
 800d046:	9a07      	ldr	r2, [sp, #28]
 800d048:	462f      	mov	r7, r5
 800d04a:	2000      	movs	r0, #0
 800d04c:	250a      	movs	r5, #10
 800d04e:	4639      	mov	r1, r7
 800d050:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d054:	3b30      	subs	r3, #48	; 0x30
 800d056:	2b09      	cmp	r3, #9
 800d058:	d94d      	bls.n	800d0f6 <_svfiprintf_r+0x16e>
 800d05a:	b1b8      	cbz	r0, 800d08c <_svfiprintf_r+0x104>
 800d05c:	e00f      	b.n	800d07e <_svfiprintf_r+0xf6>
 800d05e:	462f      	mov	r7, r5
 800d060:	e7b8      	b.n	800cfd4 <_svfiprintf_r+0x4c>
 800d062:	4a40      	ldr	r2, [pc, #256]	; (800d164 <_svfiprintf_r+0x1dc>)
 800d064:	1a80      	subs	r0, r0, r2
 800d066:	fa0b f000 	lsl.w	r0, fp, r0
 800d06a:	4318      	orrs	r0, r3
 800d06c:	9004      	str	r0, [sp, #16]
 800d06e:	463d      	mov	r5, r7
 800d070:	e7d3      	b.n	800d01a <_svfiprintf_r+0x92>
 800d072:	9a03      	ldr	r2, [sp, #12]
 800d074:	1d11      	adds	r1, r2, #4
 800d076:	6812      	ldr	r2, [r2, #0]
 800d078:	9103      	str	r1, [sp, #12]
 800d07a:	2a00      	cmp	r2, #0
 800d07c:	db01      	blt.n	800d082 <_svfiprintf_r+0xfa>
 800d07e:	9207      	str	r2, [sp, #28]
 800d080:	e004      	b.n	800d08c <_svfiprintf_r+0x104>
 800d082:	4252      	negs	r2, r2
 800d084:	f043 0302 	orr.w	r3, r3, #2
 800d088:	9207      	str	r2, [sp, #28]
 800d08a:	9304      	str	r3, [sp, #16]
 800d08c:	783b      	ldrb	r3, [r7, #0]
 800d08e:	2b2e      	cmp	r3, #46	; 0x2e
 800d090:	d10c      	bne.n	800d0ac <_svfiprintf_r+0x124>
 800d092:	787b      	ldrb	r3, [r7, #1]
 800d094:	2b2a      	cmp	r3, #42	; 0x2a
 800d096:	d133      	bne.n	800d100 <_svfiprintf_r+0x178>
 800d098:	9b03      	ldr	r3, [sp, #12]
 800d09a:	1d1a      	adds	r2, r3, #4
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	9203      	str	r2, [sp, #12]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	bfb8      	it	lt
 800d0a4:	f04f 33ff 	movlt.w	r3, #4294967295
 800d0a8:	3702      	adds	r7, #2
 800d0aa:	9305      	str	r3, [sp, #20]
 800d0ac:	4d2e      	ldr	r5, [pc, #184]	; (800d168 <_svfiprintf_r+0x1e0>)
 800d0ae:	7839      	ldrb	r1, [r7, #0]
 800d0b0:	2203      	movs	r2, #3
 800d0b2:	4628      	mov	r0, r5
 800d0b4:	f7f3 f8ac 	bl	8000210 <memchr>
 800d0b8:	b138      	cbz	r0, 800d0ca <_svfiprintf_r+0x142>
 800d0ba:	2340      	movs	r3, #64	; 0x40
 800d0bc:	1b40      	subs	r0, r0, r5
 800d0be:	fa03 f000 	lsl.w	r0, r3, r0
 800d0c2:	9b04      	ldr	r3, [sp, #16]
 800d0c4:	4303      	orrs	r3, r0
 800d0c6:	3701      	adds	r7, #1
 800d0c8:	9304      	str	r3, [sp, #16]
 800d0ca:	7839      	ldrb	r1, [r7, #0]
 800d0cc:	4827      	ldr	r0, [pc, #156]	; (800d16c <_svfiprintf_r+0x1e4>)
 800d0ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0d2:	2206      	movs	r2, #6
 800d0d4:	1c7e      	adds	r6, r7, #1
 800d0d6:	f7f3 f89b 	bl	8000210 <memchr>
 800d0da:	2800      	cmp	r0, #0
 800d0dc:	d038      	beq.n	800d150 <_svfiprintf_r+0x1c8>
 800d0de:	4b24      	ldr	r3, [pc, #144]	; (800d170 <_svfiprintf_r+0x1e8>)
 800d0e0:	bb13      	cbnz	r3, 800d128 <_svfiprintf_r+0x1a0>
 800d0e2:	9b03      	ldr	r3, [sp, #12]
 800d0e4:	3307      	adds	r3, #7
 800d0e6:	f023 0307 	bic.w	r3, r3, #7
 800d0ea:	3308      	adds	r3, #8
 800d0ec:	9303      	str	r3, [sp, #12]
 800d0ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0f0:	444b      	add	r3, r9
 800d0f2:	9309      	str	r3, [sp, #36]	; 0x24
 800d0f4:	e76d      	b.n	800cfd2 <_svfiprintf_r+0x4a>
 800d0f6:	fb05 3202 	mla	r2, r5, r2, r3
 800d0fa:	2001      	movs	r0, #1
 800d0fc:	460f      	mov	r7, r1
 800d0fe:	e7a6      	b.n	800d04e <_svfiprintf_r+0xc6>
 800d100:	2300      	movs	r3, #0
 800d102:	3701      	adds	r7, #1
 800d104:	9305      	str	r3, [sp, #20]
 800d106:	4619      	mov	r1, r3
 800d108:	250a      	movs	r5, #10
 800d10a:	4638      	mov	r0, r7
 800d10c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d110:	3a30      	subs	r2, #48	; 0x30
 800d112:	2a09      	cmp	r2, #9
 800d114:	d903      	bls.n	800d11e <_svfiprintf_r+0x196>
 800d116:	2b00      	cmp	r3, #0
 800d118:	d0c8      	beq.n	800d0ac <_svfiprintf_r+0x124>
 800d11a:	9105      	str	r1, [sp, #20]
 800d11c:	e7c6      	b.n	800d0ac <_svfiprintf_r+0x124>
 800d11e:	fb05 2101 	mla	r1, r5, r1, r2
 800d122:	2301      	movs	r3, #1
 800d124:	4607      	mov	r7, r0
 800d126:	e7f0      	b.n	800d10a <_svfiprintf_r+0x182>
 800d128:	ab03      	add	r3, sp, #12
 800d12a:	9300      	str	r3, [sp, #0]
 800d12c:	4622      	mov	r2, r4
 800d12e:	4b11      	ldr	r3, [pc, #68]	; (800d174 <_svfiprintf_r+0x1ec>)
 800d130:	a904      	add	r1, sp, #16
 800d132:	4640      	mov	r0, r8
 800d134:	f3af 8000 	nop.w
 800d138:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d13c:	4681      	mov	r9, r0
 800d13e:	d1d6      	bne.n	800d0ee <_svfiprintf_r+0x166>
 800d140:	89a3      	ldrh	r3, [r4, #12]
 800d142:	065b      	lsls	r3, r3, #25
 800d144:	f53f af35 	bmi.w	800cfb2 <_svfiprintf_r+0x2a>
 800d148:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d14a:	b01d      	add	sp, #116	; 0x74
 800d14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d150:	ab03      	add	r3, sp, #12
 800d152:	9300      	str	r3, [sp, #0]
 800d154:	4622      	mov	r2, r4
 800d156:	4b07      	ldr	r3, [pc, #28]	; (800d174 <_svfiprintf_r+0x1ec>)
 800d158:	a904      	add	r1, sp, #16
 800d15a:	4640      	mov	r0, r8
 800d15c:	f000 f882 	bl	800d264 <_printf_i>
 800d160:	e7ea      	b.n	800d138 <_svfiprintf_r+0x1b0>
 800d162:	bf00      	nop
 800d164:	080100d4 	.word	0x080100d4
 800d168:	080100da 	.word	0x080100da
 800d16c:	080100de 	.word	0x080100de
 800d170:	00000000 	.word	0x00000000
 800d174:	0800ced5 	.word	0x0800ced5

0800d178 <_printf_common>:
 800d178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d17c:	4691      	mov	r9, r2
 800d17e:	461f      	mov	r7, r3
 800d180:	688a      	ldr	r2, [r1, #8]
 800d182:	690b      	ldr	r3, [r1, #16]
 800d184:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d188:	4293      	cmp	r3, r2
 800d18a:	bfb8      	it	lt
 800d18c:	4613      	movlt	r3, r2
 800d18e:	f8c9 3000 	str.w	r3, [r9]
 800d192:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d196:	4606      	mov	r6, r0
 800d198:	460c      	mov	r4, r1
 800d19a:	b112      	cbz	r2, 800d1a2 <_printf_common+0x2a>
 800d19c:	3301      	adds	r3, #1
 800d19e:	f8c9 3000 	str.w	r3, [r9]
 800d1a2:	6823      	ldr	r3, [r4, #0]
 800d1a4:	0699      	lsls	r1, r3, #26
 800d1a6:	bf42      	ittt	mi
 800d1a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d1ac:	3302      	addmi	r3, #2
 800d1ae:	f8c9 3000 	strmi.w	r3, [r9]
 800d1b2:	6825      	ldr	r5, [r4, #0]
 800d1b4:	f015 0506 	ands.w	r5, r5, #6
 800d1b8:	d107      	bne.n	800d1ca <_printf_common+0x52>
 800d1ba:	f104 0a19 	add.w	sl, r4, #25
 800d1be:	68e3      	ldr	r3, [r4, #12]
 800d1c0:	f8d9 2000 	ldr.w	r2, [r9]
 800d1c4:	1a9b      	subs	r3, r3, r2
 800d1c6:	42ab      	cmp	r3, r5
 800d1c8:	dc28      	bgt.n	800d21c <_printf_common+0xa4>
 800d1ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d1ce:	6822      	ldr	r2, [r4, #0]
 800d1d0:	3300      	adds	r3, #0
 800d1d2:	bf18      	it	ne
 800d1d4:	2301      	movne	r3, #1
 800d1d6:	0692      	lsls	r2, r2, #26
 800d1d8:	d42d      	bmi.n	800d236 <_printf_common+0xbe>
 800d1da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d1de:	4639      	mov	r1, r7
 800d1e0:	4630      	mov	r0, r6
 800d1e2:	47c0      	blx	r8
 800d1e4:	3001      	adds	r0, #1
 800d1e6:	d020      	beq.n	800d22a <_printf_common+0xb2>
 800d1e8:	6823      	ldr	r3, [r4, #0]
 800d1ea:	68e5      	ldr	r5, [r4, #12]
 800d1ec:	f8d9 2000 	ldr.w	r2, [r9]
 800d1f0:	f003 0306 	and.w	r3, r3, #6
 800d1f4:	2b04      	cmp	r3, #4
 800d1f6:	bf08      	it	eq
 800d1f8:	1aad      	subeq	r5, r5, r2
 800d1fa:	68a3      	ldr	r3, [r4, #8]
 800d1fc:	6922      	ldr	r2, [r4, #16]
 800d1fe:	bf0c      	ite	eq
 800d200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d204:	2500      	movne	r5, #0
 800d206:	4293      	cmp	r3, r2
 800d208:	bfc4      	itt	gt
 800d20a:	1a9b      	subgt	r3, r3, r2
 800d20c:	18ed      	addgt	r5, r5, r3
 800d20e:	f04f 0900 	mov.w	r9, #0
 800d212:	341a      	adds	r4, #26
 800d214:	454d      	cmp	r5, r9
 800d216:	d11a      	bne.n	800d24e <_printf_common+0xd6>
 800d218:	2000      	movs	r0, #0
 800d21a:	e008      	b.n	800d22e <_printf_common+0xb6>
 800d21c:	2301      	movs	r3, #1
 800d21e:	4652      	mov	r2, sl
 800d220:	4639      	mov	r1, r7
 800d222:	4630      	mov	r0, r6
 800d224:	47c0      	blx	r8
 800d226:	3001      	adds	r0, #1
 800d228:	d103      	bne.n	800d232 <_printf_common+0xba>
 800d22a:	f04f 30ff 	mov.w	r0, #4294967295
 800d22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d232:	3501      	adds	r5, #1
 800d234:	e7c3      	b.n	800d1be <_printf_common+0x46>
 800d236:	18e1      	adds	r1, r4, r3
 800d238:	1c5a      	adds	r2, r3, #1
 800d23a:	2030      	movs	r0, #48	; 0x30
 800d23c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d240:	4422      	add	r2, r4
 800d242:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d246:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d24a:	3302      	adds	r3, #2
 800d24c:	e7c5      	b.n	800d1da <_printf_common+0x62>
 800d24e:	2301      	movs	r3, #1
 800d250:	4622      	mov	r2, r4
 800d252:	4639      	mov	r1, r7
 800d254:	4630      	mov	r0, r6
 800d256:	47c0      	blx	r8
 800d258:	3001      	adds	r0, #1
 800d25a:	d0e6      	beq.n	800d22a <_printf_common+0xb2>
 800d25c:	f109 0901 	add.w	r9, r9, #1
 800d260:	e7d8      	b.n	800d214 <_printf_common+0x9c>
	...

0800d264 <_printf_i>:
 800d264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d268:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d26c:	460c      	mov	r4, r1
 800d26e:	7e09      	ldrb	r1, [r1, #24]
 800d270:	b085      	sub	sp, #20
 800d272:	296e      	cmp	r1, #110	; 0x6e
 800d274:	4617      	mov	r7, r2
 800d276:	4606      	mov	r6, r0
 800d278:	4698      	mov	r8, r3
 800d27a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d27c:	f000 80b3 	beq.w	800d3e6 <_printf_i+0x182>
 800d280:	d822      	bhi.n	800d2c8 <_printf_i+0x64>
 800d282:	2963      	cmp	r1, #99	; 0x63
 800d284:	d036      	beq.n	800d2f4 <_printf_i+0x90>
 800d286:	d80a      	bhi.n	800d29e <_printf_i+0x3a>
 800d288:	2900      	cmp	r1, #0
 800d28a:	f000 80b9 	beq.w	800d400 <_printf_i+0x19c>
 800d28e:	2958      	cmp	r1, #88	; 0x58
 800d290:	f000 8083 	beq.w	800d39a <_printf_i+0x136>
 800d294:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d298:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d29c:	e032      	b.n	800d304 <_printf_i+0xa0>
 800d29e:	2964      	cmp	r1, #100	; 0x64
 800d2a0:	d001      	beq.n	800d2a6 <_printf_i+0x42>
 800d2a2:	2969      	cmp	r1, #105	; 0x69
 800d2a4:	d1f6      	bne.n	800d294 <_printf_i+0x30>
 800d2a6:	6820      	ldr	r0, [r4, #0]
 800d2a8:	6813      	ldr	r3, [r2, #0]
 800d2aa:	0605      	lsls	r5, r0, #24
 800d2ac:	f103 0104 	add.w	r1, r3, #4
 800d2b0:	d52a      	bpl.n	800d308 <_printf_i+0xa4>
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	6011      	str	r1, [r2, #0]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	da03      	bge.n	800d2c2 <_printf_i+0x5e>
 800d2ba:	222d      	movs	r2, #45	; 0x2d
 800d2bc:	425b      	negs	r3, r3
 800d2be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d2c2:	486f      	ldr	r0, [pc, #444]	; (800d480 <_printf_i+0x21c>)
 800d2c4:	220a      	movs	r2, #10
 800d2c6:	e039      	b.n	800d33c <_printf_i+0xd8>
 800d2c8:	2973      	cmp	r1, #115	; 0x73
 800d2ca:	f000 809d 	beq.w	800d408 <_printf_i+0x1a4>
 800d2ce:	d808      	bhi.n	800d2e2 <_printf_i+0x7e>
 800d2d0:	296f      	cmp	r1, #111	; 0x6f
 800d2d2:	d020      	beq.n	800d316 <_printf_i+0xb2>
 800d2d4:	2970      	cmp	r1, #112	; 0x70
 800d2d6:	d1dd      	bne.n	800d294 <_printf_i+0x30>
 800d2d8:	6823      	ldr	r3, [r4, #0]
 800d2da:	f043 0320 	orr.w	r3, r3, #32
 800d2de:	6023      	str	r3, [r4, #0]
 800d2e0:	e003      	b.n	800d2ea <_printf_i+0x86>
 800d2e2:	2975      	cmp	r1, #117	; 0x75
 800d2e4:	d017      	beq.n	800d316 <_printf_i+0xb2>
 800d2e6:	2978      	cmp	r1, #120	; 0x78
 800d2e8:	d1d4      	bne.n	800d294 <_printf_i+0x30>
 800d2ea:	2378      	movs	r3, #120	; 0x78
 800d2ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d2f0:	4864      	ldr	r0, [pc, #400]	; (800d484 <_printf_i+0x220>)
 800d2f2:	e055      	b.n	800d3a0 <_printf_i+0x13c>
 800d2f4:	6813      	ldr	r3, [r2, #0]
 800d2f6:	1d19      	adds	r1, r3, #4
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	6011      	str	r1, [r2, #0]
 800d2fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d300:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d304:	2301      	movs	r3, #1
 800d306:	e08c      	b.n	800d422 <_printf_i+0x1be>
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	6011      	str	r1, [r2, #0]
 800d30c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d310:	bf18      	it	ne
 800d312:	b21b      	sxthne	r3, r3
 800d314:	e7cf      	b.n	800d2b6 <_printf_i+0x52>
 800d316:	6813      	ldr	r3, [r2, #0]
 800d318:	6825      	ldr	r5, [r4, #0]
 800d31a:	1d18      	adds	r0, r3, #4
 800d31c:	6010      	str	r0, [r2, #0]
 800d31e:	0628      	lsls	r0, r5, #24
 800d320:	d501      	bpl.n	800d326 <_printf_i+0xc2>
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	e002      	b.n	800d32c <_printf_i+0xc8>
 800d326:	0668      	lsls	r0, r5, #25
 800d328:	d5fb      	bpl.n	800d322 <_printf_i+0xbe>
 800d32a:	881b      	ldrh	r3, [r3, #0]
 800d32c:	4854      	ldr	r0, [pc, #336]	; (800d480 <_printf_i+0x21c>)
 800d32e:	296f      	cmp	r1, #111	; 0x6f
 800d330:	bf14      	ite	ne
 800d332:	220a      	movne	r2, #10
 800d334:	2208      	moveq	r2, #8
 800d336:	2100      	movs	r1, #0
 800d338:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d33c:	6865      	ldr	r5, [r4, #4]
 800d33e:	60a5      	str	r5, [r4, #8]
 800d340:	2d00      	cmp	r5, #0
 800d342:	f2c0 8095 	blt.w	800d470 <_printf_i+0x20c>
 800d346:	6821      	ldr	r1, [r4, #0]
 800d348:	f021 0104 	bic.w	r1, r1, #4
 800d34c:	6021      	str	r1, [r4, #0]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d13d      	bne.n	800d3ce <_printf_i+0x16a>
 800d352:	2d00      	cmp	r5, #0
 800d354:	f040 808e 	bne.w	800d474 <_printf_i+0x210>
 800d358:	4665      	mov	r5, ip
 800d35a:	2a08      	cmp	r2, #8
 800d35c:	d10b      	bne.n	800d376 <_printf_i+0x112>
 800d35e:	6823      	ldr	r3, [r4, #0]
 800d360:	07db      	lsls	r3, r3, #31
 800d362:	d508      	bpl.n	800d376 <_printf_i+0x112>
 800d364:	6923      	ldr	r3, [r4, #16]
 800d366:	6862      	ldr	r2, [r4, #4]
 800d368:	429a      	cmp	r2, r3
 800d36a:	bfde      	ittt	le
 800d36c:	2330      	movle	r3, #48	; 0x30
 800d36e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d372:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d376:	ebac 0305 	sub.w	r3, ip, r5
 800d37a:	6123      	str	r3, [r4, #16]
 800d37c:	f8cd 8000 	str.w	r8, [sp]
 800d380:	463b      	mov	r3, r7
 800d382:	aa03      	add	r2, sp, #12
 800d384:	4621      	mov	r1, r4
 800d386:	4630      	mov	r0, r6
 800d388:	f7ff fef6 	bl	800d178 <_printf_common>
 800d38c:	3001      	adds	r0, #1
 800d38e:	d14d      	bne.n	800d42c <_printf_i+0x1c8>
 800d390:	f04f 30ff 	mov.w	r0, #4294967295
 800d394:	b005      	add	sp, #20
 800d396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d39a:	4839      	ldr	r0, [pc, #228]	; (800d480 <_printf_i+0x21c>)
 800d39c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d3a0:	6813      	ldr	r3, [r2, #0]
 800d3a2:	6821      	ldr	r1, [r4, #0]
 800d3a4:	1d1d      	adds	r5, r3, #4
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	6015      	str	r5, [r2, #0]
 800d3aa:	060a      	lsls	r2, r1, #24
 800d3ac:	d50b      	bpl.n	800d3c6 <_printf_i+0x162>
 800d3ae:	07ca      	lsls	r2, r1, #31
 800d3b0:	bf44      	itt	mi
 800d3b2:	f041 0120 	orrmi.w	r1, r1, #32
 800d3b6:	6021      	strmi	r1, [r4, #0]
 800d3b8:	b91b      	cbnz	r3, 800d3c2 <_printf_i+0x15e>
 800d3ba:	6822      	ldr	r2, [r4, #0]
 800d3bc:	f022 0220 	bic.w	r2, r2, #32
 800d3c0:	6022      	str	r2, [r4, #0]
 800d3c2:	2210      	movs	r2, #16
 800d3c4:	e7b7      	b.n	800d336 <_printf_i+0xd2>
 800d3c6:	064d      	lsls	r5, r1, #25
 800d3c8:	bf48      	it	mi
 800d3ca:	b29b      	uxthmi	r3, r3
 800d3cc:	e7ef      	b.n	800d3ae <_printf_i+0x14a>
 800d3ce:	4665      	mov	r5, ip
 800d3d0:	fbb3 f1f2 	udiv	r1, r3, r2
 800d3d4:	fb02 3311 	mls	r3, r2, r1, r3
 800d3d8:	5cc3      	ldrb	r3, [r0, r3]
 800d3da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d3de:	460b      	mov	r3, r1
 800d3e0:	2900      	cmp	r1, #0
 800d3e2:	d1f5      	bne.n	800d3d0 <_printf_i+0x16c>
 800d3e4:	e7b9      	b.n	800d35a <_printf_i+0xf6>
 800d3e6:	6813      	ldr	r3, [r2, #0]
 800d3e8:	6825      	ldr	r5, [r4, #0]
 800d3ea:	6961      	ldr	r1, [r4, #20]
 800d3ec:	1d18      	adds	r0, r3, #4
 800d3ee:	6010      	str	r0, [r2, #0]
 800d3f0:	0628      	lsls	r0, r5, #24
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	d501      	bpl.n	800d3fa <_printf_i+0x196>
 800d3f6:	6019      	str	r1, [r3, #0]
 800d3f8:	e002      	b.n	800d400 <_printf_i+0x19c>
 800d3fa:	066a      	lsls	r2, r5, #25
 800d3fc:	d5fb      	bpl.n	800d3f6 <_printf_i+0x192>
 800d3fe:	8019      	strh	r1, [r3, #0]
 800d400:	2300      	movs	r3, #0
 800d402:	6123      	str	r3, [r4, #16]
 800d404:	4665      	mov	r5, ip
 800d406:	e7b9      	b.n	800d37c <_printf_i+0x118>
 800d408:	6813      	ldr	r3, [r2, #0]
 800d40a:	1d19      	adds	r1, r3, #4
 800d40c:	6011      	str	r1, [r2, #0]
 800d40e:	681d      	ldr	r5, [r3, #0]
 800d410:	6862      	ldr	r2, [r4, #4]
 800d412:	2100      	movs	r1, #0
 800d414:	4628      	mov	r0, r5
 800d416:	f7f2 fefb 	bl	8000210 <memchr>
 800d41a:	b108      	cbz	r0, 800d420 <_printf_i+0x1bc>
 800d41c:	1b40      	subs	r0, r0, r5
 800d41e:	6060      	str	r0, [r4, #4]
 800d420:	6863      	ldr	r3, [r4, #4]
 800d422:	6123      	str	r3, [r4, #16]
 800d424:	2300      	movs	r3, #0
 800d426:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d42a:	e7a7      	b.n	800d37c <_printf_i+0x118>
 800d42c:	6923      	ldr	r3, [r4, #16]
 800d42e:	462a      	mov	r2, r5
 800d430:	4639      	mov	r1, r7
 800d432:	4630      	mov	r0, r6
 800d434:	47c0      	blx	r8
 800d436:	3001      	adds	r0, #1
 800d438:	d0aa      	beq.n	800d390 <_printf_i+0x12c>
 800d43a:	6823      	ldr	r3, [r4, #0]
 800d43c:	079b      	lsls	r3, r3, #30
 800d43e:	d413      	bmi.n	800d468 <_printf_i+0x204>
 800d440:	68e0      	ldr	r0, [r4, #12]
 800d442:	9b03      	ldr	r3, [sp, #12]
 800d444:	4298      	cmp	r0, r3
 800d446:	bfb8      	it	lt
 800d448:	4618      	movlt	r0, r3
 800d44a:	e7a3      	b.n	800d394 <_printf_i+0x130>
 800d44c:	2301      	movs	r3, #1
 800d44e:	464a      	mov	r2, r9
 800d450:	4639      	mov	r1, r7
 800d452:	4630      	mov	r0, r6
 800d454:	47c0      	blx	r8
 800d456:	3001      	adds	r0, #1
 800d458:	d09a      	beq.n	800d390 <_printf_i+0x12c>
 800d45a:	3501      	adds	r5, #1
 800d45c:	68e3      	ldr	r3, [r4, #12]
 800d45e:	9a03      	ldr	r2, [sp, #12]
 800d460:	1a9b      	subs	r3, r3, r2
 800d462:	42ab      	cmp	r3, r5
 800d464:	dcf2      	bgt.n	800d44c <_printf_i+0x1e8>
 800d466:	e7eb      	b.n	800d440 <_printf_i+0x1dc>
 800d468:	2500      	movs	r5, #0
 800d46a:	f104 0919 	add.w	r9, r4, #25
 800d46e:	e7f5      	b.n	800d45c <_printf_i+0x1f8>
 800d470:	2b00      	cmp	r3, #0
 800d472:	d1ac      	bne.n	800d3ce <_printf_i+0x16a>
 800d474:	7803      	ldrb	r3, [r0, #0]
 800d476:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d47a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d47e:	e76c      	b.n	800d35a <_printf_i+0xf6>
 800d480:	080100e5 	.word	0x080100e5
 800d484:	080100f6 	.word	0x080100f6

0800d488 <memcpy>:
 800d488:	b510      	push	{r4, lr}
 800d48a:	1e43      	subs	r3, r0, #1
 800d48c:	440a      	add	r2, r1
 800d48e:	4291      	cmp	r1, r2
 800d490:	d100      	bne.n	800d494 <memcpy+0xc>
 800d492:	bd10      	pop	{r4, pc}
 800d494:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d498:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d49c:	e7f7      	b.n	800d48e <memcpy+0x6>

0800d49e <memmove>:
 800d49e:	4288      	cmp	r0, r1
 800d4a0:	b510      	push	{r4, lr}
 800d4a2:	eb01 0302 	add.w	r3, r1, r2
 800d4a6:	d807      	bhi.n	800d4b8 <memmove+0x1a>
 800d4a8:	1e42      	subs	r2, r0, #1
 800d4aa:	4299      	cmp	r1, r3
 800d4ac:	d00a      	beq.n	800d4c4 <memmove+0x26>
 800d4ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4b2:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d4b6:	e7f8      	b.n	800d4aa <memmove+0xc>
 800d4b8:	4283      	cmp	r3, r0
 800d4ba:	d9f5      	bls.n	800d4a8 <memmove+0xa>
 800d4bc:	1881      	adds	r1, r0, r2
 800d4be:	1ad2      	subs	r2, r2, r3
 800d4c0:	42d3      	cmn	r3, r2
 800d4c2:	d100      	bne.n	800d4c6 <memmove+0x28>
 800d4c4:	bd10      	pop	{r4, pc}
 800d4c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d4ca:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d4ce:	e7f7      	b.n	800d4c0 <memmove+0x22>

0800d4d0 <_free_r>:
 800d4d0:	b538      	push	{r3, r4, r5, lr}
 800d4d2:	4605      	mov	r5, r0
 800d4d4:	2900      	cmp	r1, #0
 800d4d6:	d045      	beq.n	800d564 <_free_r+0x94>
 800d4d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4dc:	1f0c      	subs	r4, r1, #4
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	bfb8      	it	lt
 800d4e2:	18e4      	addlt	r4, r4, r3
 800d4e4:	f000 f8d2 	bl	800d68c <__malloc_lock>
 800d4e8:	4a1f      	ldr	r2, [pc, #124]	; (800d568 <_free_r+0x98>)
 800d4ea:	6813      	ldr	r3, [r2, #0]
 800d4ec:	4610      	mov	r0, r2
 800d4ee:	b933      	cbnz	r3, 800d4fe <_free_r+0x2e>
 800d4f0:	6063      	str	r3, [r4, #4]
 800d4f2:	6014      	str	r4, [r2, #0]
 800d4f4:	4628      	mov	r0, r5
 800d4f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4fa:	f000 b8c8 	b.w	800d68e <__malloc_unlock>
 800d4fe:	42a3      	cmp	r3, r4
 800d500:	d90c      	bls.n	800d51c <_free_r+0x4c>
 800d502:	6821      	ldr	r1, [r4, #0]
 800d504:	1862      	adds	r2, r4, r1
 800d506:	4293      	cmp	r3, r2
 800d508:	bf04      	itt	eq
 800d50a:	681a      	ldreq	r2, [r3, #0]
 800d50c:	685b      	ldreq	r3, [r3, #4]
 800d50e:	6063      	str	r3, [r4, #4]
 800d510:	bf04      	itt	eq
 800d512:	1852      	addeq	r2, r2, r1
 800d514:	6022      	streq	r2, [r4, #0]
 800d516:	6004      	str	r4, [r0, #0]
 800d518:	e7ec      	b.n	800d4f4 <_free_r+0x24>
 800d51a:	4613      	mov	r3, r2
 800d51c:	685a      	ldr	r2, [r3, #4]
 800d51e:	b10a      	cbz	r2, 800d524 <_free_r+0x54>
 800d520:	42a2      	cmp	r2, r4
 800d522:	d9fa      	bls.n	800d51a <_free_r+0x4a>
 800d524:	6819      	ldr	r1, [r3, #0]
 800d526:	1858      	adds	r0, r3, r1
 800d528:	42a0      	cmp	r0, r4
 800d52a:	d10b      	bne.n	800d544 <_free_r+0x74>
 800d52c:	6820      	ldr	r0, [r4, #0]
 800d52e:	4401      	add	r1, r0
 800d530:	1858      	adds	r0, r3, r1
 800d532:	4282      	cmp	r2, r0
 800d534:	6019      	str	r1, [r3, #0]
 800d536:	d1dd      	bne.n	800d4f4 <_free_r+0x24>
 800d538:	6810      	ldr	r0, [r2, #0]
 800d53a:	6852      	ldr	r2, [r2, #4]
 800d53c:	605a      	str	r2, [r3, #4]
 800d53e:	4401      	add	r1, r0
 800d540:	6019      	str	r1, [r3, #0]
 800d542:	e7d7      	b.n	800d4f4 <_free_r+0x24>
 800d544:	d902      	bls.n	800d54c <_free_r+0x7c>
 800d546:	230c      	movs	r3, #12
 800d548:	602b      	str	r3, [r5, #0]
 800d54a:	e7d3      	b.n	800d4f4 <_free_r+0x24>
 800d54c:	6820      	ldr	r0, [r4, #0]
 800d54e:	1821      	adds	r1, r4, r0
 800d550:	428a      	cmp	r2, r1
 800d552:	bf04      	itt	eq
 800d554:	6811      	ldreq	r1, [r2, #0]
 800d556:	6852      	ldreq	r2, [r2, #4]
 800d558:	6062      	str	r2, [r4, #4]
 800d55a:	bf04      	itt	eq
 800d55c:	1809      	addeq	r1, r1, r0
 800d55e:	6021      	streq	r1, [r4, #0]
 800d560:	605c      	str	r4, [r3, #4]
 800d562:	e7c7      	b.n	800d4f4 <_free_r+0x24>
 800d564:	bd38      	pop	{r3, r4, r5, pc}
 800d566:	bf00      	nop
 800d568:	20000364 	.word	0x20000364

0800d56c <_malloc_r>:
 800d56c:	b570      	push	{r4, r5, r6, lr}
 800d56e:	1ccd      	adds	r5, r1, #3
 800d570:	f025 0503 	bic.w	r5, r5, #3
 800d574:	3508      	adds	r5, #8
 800d576:	2d0c      	cmp	r5, #12
 800d578:	bf38      	it	cc
 800d57a:	250c      	movcc	r5, #12
 800d57c:	2d00      	cmp	r5, #0
 800d57e:	4606      	mov	r6, r0
 800d580:	db01      	blt.n	800d586 <_malloc_r+0x1a>
 800d582:	42a9      	cmp	r1, r5
 800d584:	d903      	bls.n	800d58e <_malloc_r+0x22>
 800d586:	230c      	movs	r3, #12
 800d588:	6033      	str	r3, [r6, #0]
 800d58a:	2000      	movs	r0, #0
 800d58c:	bd70      	pop	{r4, r5, r6, pc}
 800d58e:	f000 f87d 	bl	800d68c <__malloc_lock>
 800d592:	4a21      	ldr	r2, [pc, #132]	; (800d618 <_malloc_r+0xac>)
 800d594:	6814      	ldr	r4, [r2, #0]
 800d596:	4621      	mov	r1, r4
 800d598:	b991      	cbnz	r1, 800d5c0 <_malloc_r+0x54>
 800d59a:	4c20      	ldr	r4, [pc, #128]	; (800d61c <_malloc_r+0xb0>)
 800d59c:	6823      	ldr	r3, [r4, #0]
 800d59e:	b91b      	cbnz	r3, 800d5a8 <_malloc_r+0x3c>
 800d5a0:	4630      	mov	r0, r6
 800d5a2:	f000 f863 	bl	800d66c <_sbrk_r>
 800d5a6:	6020      	str	r0, [r4, #0]
 800d5a8:	4629      	mov	r1, r5
 800d5aa:	4630      	mov	r0, r6
 800d5ac:	f000 f85e 	bl	800d66c <_sbrk_r>
 800d5b0:	1c43      	adds	r3, r0, #1
 800d5b2:	d124      	bne.n	800d5fe <_malloc_r+0x92>
 800d5b4:	230c      	movs	r3, #12
 800d5b6:	6033      	str	r3, [r6, #0]
 800d5b8:	4630      	mov	r0, r6
 800d5ba:	f000 f868 	bl	800d68e <__malloc_unlock>
 800d5be:	e7e4      	b.n	800d58a <_malloc_r+0x1e>
 800d5c0:	680b      	ldr	r3, [r1, #0]
 800d5c2:	1b5b      	subs	r3, r3, r5
 800d5c4:	d418      	bmi.n	800d5f8 <_malloc_r+0x8c>
 800d5c6:	2b0b      	cmp	r3, #11
 800d5c8:	d90f      	bls.n	800d5ea <_malloc_r+0x7e>
 800d5ca:	600b      	str	r3, [r1, #0]
 800d5cc:	50cd      	str	r5, [r1, r3]
 800d5ce:	18cc      	adds	r4, r1, r3
 800d5d0:	4630      	mov	r0, r6
 800d5d2:	f000 f85c 	bl	800d68e <__malloc_unlock>
 800d5d6:	f104 000b 	add.w	r0, r4, #11
 800d5da:	1d23      	adds	r3, r4, #4
 800d5dc:	f020 0007 	bic.w	r0, r0, #7
 800d5e0:	1ac3      	subs	r3, r0, r3
 800d5e2:	d0d3      	beq.n	800d58c <_malloc_r+0x20>
 800d5e4:	425a      	negs	r2, r3
 800d5e6:	50e2      	str	r2, [r4, r3]
 800d5e8:	e7d0      	b.n	800d58c <_malloc_r+0x20>
 800d5ea:	428c      	cmp	r4, r1
 800d5ec:	684b      	ldr	r3, [r1, #4]
 800d5ee:	bf16      	itet	ne
 800d5f0:	6063      	strne	r3, [r4, #4]
 800d5f2:	6013      	streq	r3, [r2, #0]
 800d5f4:	460c      	movne	r4, r1
 800d5f6:	e7eb      	b.n	800d5d0 <_malloc_r+0x64>
 800d5f8:	460c      	mov	r4, r1
 800d5fa:	6849      	ldr	r1, [r1, #4]
 800d5fc:	e7cc      	b.n	800d598 <_malloc_r+0x2c>
 800d5fe:	1cc4      	adds	r4, r0, #3
 800d600:	f024 0403 	bic.w	r4, r4, #3
 800d604:	42a0      	cmp	r0, r4
 800d606:	d005      	beq.n	800d614 <_malloc_r+0xa8>
 800d608:	1a21      	subs	r1, r4, r0
 800d60a:	4630      	mov	r0, r6
 800d60c:	f000 f82e 	bl	800d66c <_sbrk_r>
 800d610:	3001      	adds	r0, #1
 800d612:	d0cf      	beq.n	800d5b4 <_malloc_r+0x48>
 800d614:	6025      	str	r5, [r4, #0]
 800d616:	e7db      	b.n	800d5d0 <_malloc_r+0x64>
 800d618:	20000364 	.word	0x20000364
 800d61c:	20000368 	.word	0x20000368

0800d620 <_realloc_r>:
 800d620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d622:	4607      	mov	r7, r0
 800d624:	4614      	mov	r4, r2
 800d626:	460e      	mov	r6, r1
 800d628:	b921      	cbnz	r1, 800d634 <_realloc_r+0x14>
 800d62a:	4611      	mov	r1, r2
 800d62c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d630:	f7ff bf9c 	b.w	800d56c <_malloc_r>
 800d634:	b922      	cbnz	r2, 800d640 <_realloc_r+0x20>
 800d636:	f7ff ff4b 	bl	800d4d0 <_free_r>
 800d63a:	4625      	mov	r5, r4
 800d63c:	4628      	mov	r0, r5
 800d63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d640:	f000 f826 	bl	800d690 <_malloc_usable_size_r>
 800d644:	42a0      	cmp	r0, r4
 800d646:	d20f      	bcs.n	800d668 <_realloc_r+0x48>
 800d648:	4621      	mov	r1, r4
 800d64a:	4638      	mov	r0, r7
 800d64c:	f7ff ff8e 	bl	800d56c <_malloc_r>
 800d650:	4605      	mov	r5, r0
 800d652:	2800      	cmp	r0, #0
 800d654:	d0f2      	beq.n	800d63c <_realloc_r+0x1c>
 800d656:	4631      	mov	r1, r6
 800d658:	4622      	mov	r2, r4
 800d65a:	f7ff ff15 	bl	800d488 <memcpy>
 800d65e:	4631      	mov	r1, r6
 800d660:	4638      	mov	r0, r7
 800d662:	f7ff ff35 	bl	800d4d0 <_free_r>
 800d666:	e7e9      	b.n	800d63c <_realloc_r+0x1c>
 800d668:	4635      	mov	r5, r6
 800d66a:	e7e7      	b.n	800d63c <_realloc_r+0x1c>

0800d66c <_sbrk_r>:
 800d66c:	b538      	push	{r3, r4, r5, lr}
 800d66e:	4c06      	ldr	r4, [pc, #24]	; (800d688 <_sbrk_r+0x1c>)
 800d670:	2300      	movs	r3, #0
 800d672:	4605      	mov	r5, r0
 800d674:	4608      	mov	r0, r1
 800d676:	6023      	str	r3, [r4, #0]
 800d678:	f000 f812 	bl	800d6a0 <_sbrk>
 800d67c:	1c43      	adds	r3, r0, #1
 800d67e:	d102      	bne.n	800d686 <_sbrk_r+0x1a>
 800d680:	6823      	ldr	r3, [r4, #0]
 800d682:	b103      	cbz	r3, 800d686 <_sbrk_r+0x1a>
 800d684:	602b      	str	r3, [r5, #0]
 800d686:	bd38      	pop	{r3, r4, r5, pc}
 800d688:	20003860 	.word	0x20003860

0800d68c <__malloc_lock>:
 800d68c:	4770      	bx	lr

0800d68e <__malloc_unlock>:
 800d68e:	4770      	bx	lr

0800d690 <_malloc_usable_size_r>:
 800d690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d694:	1f18      	subs	r0, r3, #4
 800d696:	2b00      	cmp	r3, #0
 800d698:	bfbc      	itt	lt
 800d69a:	580b      	ldrlt	r3, [r1, r0]
 800d69c:	18c0      	addlt	r0, r0, r3
 800d69e:	4770      	bx	lr

0800d6a0 <_sbrk>:
 800d6a0:	4b04      	ldr	r3, [pc, #16]	; (800d6b4 <_sbrk+0x14>)
 800d6a2:	6819      	ldr	r1, [r3, #0]
 800d6a4:	4602      	mov	r2, r0
 800d6a6:	b909      	cbnz	r1, 800d6ac <_sbrk+0xc>
 800d6a8:	4903      	ldr	r1, [pc, #12]	; (800d6b8 <_sbrk+0x18>)
 800d6aa:	6019      	str	r1, [r3, #0]
 800d6ac:	6818      	ldr	r0, [r3, #0]
 800d6ae:	4402      	add	r2, r0
 800d6b0:	601a      	str	r2, [r3, #0]
 800d6b2:	4770      	bx	lr
 800d6b4:	2000036c 	.word	0x2000036c
 800d6b8:	20003868 	.word	0x20003868

0800d6bc <_init>:
 800d6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6be:	bf00      	nop
 800d6c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6c2:	bc08      	pop	{r3}
 800d6c4:	469e      	mov	lr, r3
 800d6c6:	4770      	bx	lr

0800d6c8 <_fini>:
 800d6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ca:	bf00      	nop
 800d6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6ce:	bc08      	pop	{r3}
 800d6d0:	469e      	mov	lr, r3
 800d6d2:	4770      	bx	lr
