
Signal_Detector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004490  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001af8  08004658  08004658  00014658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006150  08006150  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08006150  08006150  00016150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006158  08006158  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006158  08006158  00016158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800615c  0800615c  0001615c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08006160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a4c  20000018  08006178  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a64  08006178  00020a64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016305  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000247f  00000000  00000000  0003634d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e40  00000000  00000000  000387d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d18  00000000  00000000  00039610  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003bd6  00000000  00000000  0003a328  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000de04  00000000  00000000  0003defe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00116fdf  00000000  00000000  0004bd02  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00162ce1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a0c  00000000  00000000  00162d5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000018 	.word	0x20000018
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004640 	.word	0x08004640

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000001c 	.word	0x2000001c
 8000204:	08004640 	.word	0x08004640

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800050c:	4b31      	ldr	r3, [pc, #196]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800050e:	2228      	movs	r2, #40	; 0x28
 8000510:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8000512:	4b30      	ldr	r3, [pc, #192]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000514:	2209      	movs	r2, #9
 8000516:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8000518:	4b2e      	ldr	r3, [pc, #184]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800051a:	2235      	movs	r2, #53	; 0x35
 800051c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800051e:	4b2d      	ldr	r3, [pc, #180]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000520:	220b      	movs	r2, #11
 8000522:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8000524:	4b2b      	ldr	r3, [pc, #172]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000526:	f240 121b 	movw	r2, #283	; 0x11b
 800052a:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800052c:	4b29      	ldr	r3, [pc, #164]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800052e:	f240 2215 	movw	r2, #533	; 0x215
 8000532:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8000534:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000536:	f240 121d 	movw	r2, #285	; 0x11d
 800053a:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800053c:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800053e:	f240 2235 	movw	r2, #565	; 0x235
 8000542:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8000544:	2100      	movs	r1, #0
 8000546:	4823      	ldr	r0, [pc, #140]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000548:	f000 fba2 	bl	8000c90 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800054c:	4b21      	ldr	r3, [pc, #132]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800054e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000552:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000556:	f44f 7288 	mov.w	r2, #272	; 0x110
 800055a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800055c:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800055e:	2200      	movs	r2, #0
 8000560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8000564:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000566:	2200      	movs	r2, #0
 8000568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 800056c:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800056e:	2200      	movs	r2, #0
 8000570:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000574:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000576:	2200      	movs	r2, #0
 8000578:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800057a:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000586:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <BSP_LCD_Init+0xcc>)
 800058e:	4a12      	ldr	r2, [pc, #72]	; (80005d8 <BSP_LCD_Init+0xd0>)
 8000590:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8000592:	4810      	ldr	r0, [pc, #64]	; (80005d4 <BSP_LCD_Init+0xcc>)
 8000594:	f002 f8d0 	bl	8002738 <HAL_LTDC_GetState>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d103      	bne.n	80005a6 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800059e:	2100      	movs	r1, #0
 80005a0:	480c      	ldr	r0, [pc, #48]	; (80005d4 <BSP_LCD_Init+0xcc>)
 80005a2:	f000 fa9b 	bl	8000adc <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80005a6:	480b      	ldr	r0, [pc, #44]	; (80005d4 <BSP_LCD_Init+0xcc>)
 80005a8:	f001 fef6 	bl	8002398 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b2:	480a      	ldr	r0, [pc, #40]	; (80005dc <BSP_LCD_Init+0xd4>)
 80005b4:	f001 fed6 	bl	8002364 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	2108      	movs	r1, #8
 80005bc:	4808      	ldr	r0, [pc, #32]	; (80005e0 <BSP_LCD_Init+0xd8>)
 80005be:	f001 fed1 	bl	8002364 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80005c2:	f000 fc85 	bl	8000ed0 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80005c6:	4807      	ldr	r0, [pc, #28]	; (80005e4 <BSP_LCD_Init+0xdc>)
 80005c8:	f000 f8d8 	bl	800077c <BSP_LCD_SetFont>
  
  return LCD_OK;
 80005cc:	2300      	movs	r3, #0
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200001a4 	.word	0x200001a4
 80005d8:	40016800 	.word	0x40016800
 80005dc:	40022000 	.word	0x40022000
 80005e0:	40022800 	.word	0x40022800
 80005e4:	20000000 	.word	0x20000000

080005e8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <BSP_LCD_GetXSize+0x20>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a06      	ldr	r2, [pc, #24]	; (800060c <BSP_LCD_GetXSize+0x24>)
 80005f2:	2134      	movs	r1, #52	; 0x34
 80005f4:	fb01 f303 	mul.w	r3, r1, r3
 80005f8:	4413      	add	r3, r2
 80005fa:	3360      	adds	r3, #96	; 0x60
 80005fc:	681b      	ldr	r3, [r3, #0]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	20000074 	.word	0x20000074
 800060c:	200001a4 	.word	0x200001a4

08000610 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <BSP_LCD_GetYSize+0x20>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a06      	ldr	r2, [pc, #24]	; (8000634 <BSP_LCD_GetYSize+0x24>)
 800061a:	2134      	movs	r1, #52	; 0x34
 800061c:	fb01 f303 	mul.w	r3, r1, r3
 8000620:	4413      	add	r3, r2
 8000622:	3364      	adds	r3, #100	; 0x64
 8000624:	681b      	ldr	r3, [r3, #0]
}
 8000626:	4618      	mov	r0, r3
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	20000074 	.word	0x20000074
 8000634:	200001a4 	.word	0x200001a4

08000638 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8000638:	b580      	push	{r7, lr}
 800063a:	b090      	sub	sp, #64	; 0x40
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	6039      	str	r1, [r7, #0]
 8000642:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8000648:	f7ff ffce 	bl	80005e8 <BSP_LCD_GetXSize>
 800064c:	4603      	mov	r3, r0
 800064e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000654:	f7ff ffdc 	bl	8000610 <BSP_LCD_GetYSize>
 8000658:	4603      	mov	r3, r0
 800065a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8000664:	23ff      	movs	r3, #255	; 0xff
 8000666:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800067e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000684:	2307      	movs	r3, #7
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8000688:	f7ff ffae 	bl	80005e8 <BSP_LCD_GetXSize>
 800068c:	4603      	mov	r3, r0
 800068e:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8000690:	f7ff ffbe 	bl	8000610 <BSP_LCD_GetYSize>
 8000694:	4603      	mov	r3, r0
 8000696:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8000698:	88fa      	ldrh	r2, [r7, #6]
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	4619      	mov	r1, r3
 80006a0:	4812      	ldr	r0, [pc, #72]	; (80006ec <BSP_LCD_LayerDefaultInit+0xb4>)
 80006a2:	f002 f80b 	bl	80026bc <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80006a6:	88fa      	ldrh	r2, [r7, #6]
 80006a8:	4911      	ldr	r1, [pc, #68]	; (80006f0 <BSP_LCD_LayerDefaultInit+0xb8>)
 80006aa:	4613      	mov	r3, r2
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	4413      	add	r3, r2
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	440b      	add	r3, r1
 80006b4:	3304      	adds	r3, #4
 80006b6:	f04f 32ff 	mov.w	r2, #4294967295
 80006ba:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80006bc:	88fa      	ldrh	r2, [r7, #6]
 80006be:	490c      	ldr	r1, [pc, #48]	; (80006f0 <BSP_LCD_LayerDefaultInit+0xb8>)
 80006c0:	4613      	mov	r3, r2
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	4413      	add	r3, r2
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	440b      	add	r3, r1
 80006ca:	3308      	adds	r3, #8
 80006cc:	4a09      	ldr	r2, [pc, #36]	; (80006f4 <BSP_LCD_LayerDefaultInit+0xbc>)
 80006ce:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80006d0:	88fa      	ldrh	r2, [r7, #6]
 80006d2:	4907      	ldr	r1, [pc, #28]	; (80006f0 <BSP_LCD_LayerDefaultInit+0xb8>)
 80006d4:	4613      	mov	r3, r2
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	4413      	add	r3, r2
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	440b      	add	r3, r1
 80006de:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80006e2:	601a      	str	r2, [r3, #0]
}
 80006e4:	bf00      	nop
 80006e6:	3740      	adds	r7, #64	; 0x40
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200001a4 	.word	0x200001a4
 80006f0:	20000078 	.word	0x20000078
 80006f4:	20000000 	.word	0x20000000

080006f8 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8000700:	4a04      	ldr	r2, [pc, #16]	; (8000714 <BSP_LCD_SelectLayer+0x1c>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6013      	str	r3, [r2, #0]
} 
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	20000074 	.word	0x20000074

08000718 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <BSP_LCD_SetTextColor+0x28>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4907      	ldr	r1, [pc, #28]	; (8000744 <BSP_LCD_SetTextColor+0x2c>)
 8000726:	4613      	mov	r3, r2
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	4413      	add	r3, r2
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	440b      	add	r3, r1
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	601a      	str	r2, [r3, #0]
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	20000074 	.word	0x20000074
 8000744:	20000078 	.word	0x20000078

08000748 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <BSP_LCD_SetBackColor+0x2c>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4908      	ldr	r1, [pc, #32]	; (8000778 <BSP_LCD_SetBackColor+0x30>)
 8000756:	4613      	mov	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	440b      	add	r3, r1
 8000760:	3304      	adds	r3, #4
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	601a      	str	r2, [r3, #0]
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	20000074 	.word	0x20000074
 8000778:	20000078 	.word	0x20000078

0800077c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <BSP_LCD_SetFont+0x2c>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4908      	ldr	r1, [pc, #32]	; (80007ac <BSP_LCD_SetFont+0x30>)
 800078a:	4613      	mov	r3, r2
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	4413      	add	r3, r2
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	440b      	add	r3, r1
 8000794:	3308      	adds	r3, #8
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	601a      	str	r2, [r3, #0]
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	20000074 	.word	0x20000074
 80007ac:	20000078 	.word	0x20000078

080007b0 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80007b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af02      	add	r7, sp, #8
 80007b6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <BSP_LCD_Clear+0x48>)
 80007ba:	681c      	ldr	r4, [r3, #0]
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <BSP_LCD_Clear+0x48>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <BSP_LCD_Clear+0x4c>)
 80007c2:	2134      	movs	r1, #52	; 0x34
 80007c4:	fb01 f303 	mul.w	r3, r1, r3
 80007c8:	4413      	add	r3, r2
 80007ca:	335c      	adds	r3, #92	; 0x5c
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	461d      	mov	r5, r3
 80007d0:	f7ff ff0a 	bl	80005e8 <BSP_LCD_GetXSize>
 80007d4:	4606      	mov	r6, r0
 80007d6:	f7ff ff1b 	bl	8000610 <BSP_LCD_GetYSize>
 80007da:	4602      	mov	r2, r0
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	9301      	str	r3, [sp, #4]
 80007e0:	2300      	movs	r3, #0
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	4613      	mov	r3, r2
 80007e6:	4632      	mov	r2, r6
 80007e8:	4629      	mov	r1, r5
 80007ea:	4620      	mov	r0, r4
 80007ec:	f000 fb24 	bl	8000e38 <LL_FillBuffer>
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007f8:	20000074 	.word	0x20000074
 80007fc:	200001a4 	.word	0x200001a4

08000800 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	80fb      	strh	r3, [r7, #6]
 800080a:	460b      	mov	r3, r1
 800080c:	80bb      	strh	r3, [r7, #4]
 800080e:	4613      	mov	r3, r2
 8000810:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000812:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <BSP_LCD_DisplayChar+0x80>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	491b      	ldr	r1, [pc, #108]	; (8000884 <BSP_LCD_DisplayChar+0x84>)
 8000818:	4613      	mov	r3, r2
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	4413      	add	r3, r2
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	440b      	add	r3, r1
 8000822:	3308      	adds	r3, #8
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	6819      	ldr	r1, [r3, #0]
 8000828:	78fb      	ldrb	r3, [r7, #3]
 800082a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <BSP_LCD_DisplayChar+0x80>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	4c14      	ldr	r4, [pc, #80]	; (8000884 <BSP_LCD_DisplayChar+0x84>)
 8000834:	4613      	mov	r3, r2
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	4413      	add	r3, r2
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4423      	add	r3, r4
 800083e:	3308      	adds	r3, #8
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000844:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000848:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <BSP_LCD_DisplayChar+0x80>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4c0d      	ldr	r4, [pc, #52]	; (8000884 <BSP_LCD_DisplayChar+0x84>)
 800084e:	4613      	mov	r3, r2
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	4413      	add	r3, r2
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	4423      	add	r3, r4
 8000858:	3308      	adds	r3, #8
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	889b      	ldrh	r3, [r3, #4]
 800085e:	3307      	adds	r3, #7
 8000860:	2b00      	cmp	r3, #0
 8000862:	da00      	bge.n	8000866 <BSP_LCD_DisplayChar+0x66>
 8000864:	3307      	adds	r3, #7
 8000866:	10db      	asrs	r3, r3, #3
 8000868:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800086c:	18ca      	adds	r2, r1, r3
 800086e:	88b9      	ldrh	r1, [r7, #4]
 8000870:	88fb      	ldrh	r3, [r7, #6]
 8000872:	4618      	mov	r0, r3
 8000874:	f000 fa28 	bl	8000cc8 <DrawChar>
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	bd90      	pop	{r4, r7, pc}
 8000880:	20000074 	.word	0x20000074
 8000884:	20000078 	.word	0x20000078

08000888 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8000888:	b5b0      	push	{r4, r5, r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0
 800088e:	60ba      	str	r2, [r7, #8]
 8000890:	461a      	mov	r2, r3
 8000892:	4603      	mov	r3, r0
 8000894:	81fb      	strh	r3, [r7, #14]
 8000896:	460b      	mov	r3, r1
 8000898:	81bb      	strh	r3, [r7, #12]
 800089a:	4613      	mov	r3, r2
 800089c:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800089e:	2301      	movs	r3, #1
 80008a0:	83fb      	strh	r3, [r7, #30]
 80008a2:	2300      	movs	r3, #0
 80008a4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80008b2:	e002      	b.n	80008ba <BSP_LCD_DisplayStringAt+0x32>
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	3301      	adds	r3, #1
 80008b8:	61bb      	str	r3, [r7, #24]
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	1c5a      	adds	r2, r3, #1
 80008be:	617a      	str	r2, [r7, #20]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d1f6      	bne.n	80008b4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80008c6:	f7ff fe8f 	bl	80005e8 <BSP_LCD_GetXSize>
 80008ca:	4b4f      	ldr	r3, [pc, #316]	; (8000a08 <BSP_LCD_DisplayStringAt+0x180>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	494f      	ldr	r1, [pc, #316]	; (8000a0c <BSP_LCD_DisplayStringAt+0x184>)
 80008d0:	4613      	mov	r3, r2
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	4413      	add	r3, r2
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	440b      	add	r3, r1
 80008da:	3308      	adds	r3, #8
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	889b      	ldrh	r3, [r3, #4]
 80008e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80008e4:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	d01c      	beq.n	8000926 <BSP_LCD_DisplayStringAt+0x9e>
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	d017      	beq.n	8000920 <BSP_LCD_DisplayStringAt+0x98>
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d12e      	bne.n	8000952 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	69bb      	ldr	r3, [r7, #24]
 80008f8:	1ad1      	subs	r1, r2, r3
 80008fa:	4b43      	ldr	r3, [pc, #268]	; (8000a08 <BSP_LCD_DisplayStringAt+0x180>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	4843      	ldr	r0, [pc, #268]	; (8000a0c <BSP_LCD_DisplayStringAt+0x184>)
 8000900:	4613      	mov	r3, r2
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	4413      	add	r3, r2
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	4403      	add	r3, r0
 800090a:	3308      	adds	r3, #8
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	889b      	ldrh	r3, [r3, #4]
 8000910:	fb03 f301 	mul.w	r3, r3, r1
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	b29a      	uxth	r2, r3
 8000918:	89fb      	ldrh	r3, [r7, #14]
 800091a:	4413      	add	r3, r2
 800091c:	83fb      	strh	r3, [r7, #30]
      break;
 800091e:	e01b      	b.n	8000958 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8000920:	89fb      	ldrh	r3, [r7, #14]
 8000922:	83fb      	strh	r3, [r7, #30]
      break;
 8000924:	e018      	b.n	8000958 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	b299      	uxth	r1, r3
 800092e:	4b36      	ldr	r3, [pc, #216]	; (8000a08 <BSP_LCD_DisplayStringAt+0x180>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	4836      	ldr	r0, [pc, #216]	; (8000a0c <BSP_LCD_DisplayStringAt+0x184>)
 8000934:	4613      	mov	r3, r2
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	4413      	add	r3, r2
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	4403      	add	r3, r0
 800093e:	3308      	adds	r3, #8
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	889b      	ldrh	r3, [r3, #4]
 8000944:	fb11 f303 	smulbb	r3, r1, r3
 8000948:	b29a      	uxth	r2, r3
 800094a:	89fb      	ldrh	r3, [r7, #14]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	83fb      	strh	r3, [r7, #30]
      break;
 8000950:	e002      	b.n	8000958 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 8000952:	89fb      	ldrh	r3, [r7, #14]
 8000954:	83fb      	strh	r3, [r7, #30]
      break;
 8000956:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8000958:	8bfb      	ldrh	r3, [r7, #30]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d003      	beq.n	8000966 <BSP_LCD_DisplayStringAt+0xde>
 800095e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000962:	2b00      	cmp	r3, #0
 8000964:	da1d      	bge.n	80009a2 <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8000966:	2301      	movs	r3, #1
 8000968:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800096a:	e01a      	b.n	80009a2 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	781a      	ldrb	r2, [r3, #0]
 8000970:	89b9      	ldrh	r1, [r7, #12]
 8000972:	8bfb      	ldrh	r3, [r7, #30]
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff43 	bl	8000800 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800097a:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <BSP_LCD_DisplayStringAt+0x180>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	4923      	ldr	r1, [pc, #140]	; (8000a0c <BSP_LCD_DisplayStringAt+0x184>)
 8000980:	4613      	mov	r3, r2
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	4413      	add	r3, r2
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	440b      	add	r3, r1
 800098a:	3308      	adds	r3, #8
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	889a      	ldrh	r2, [r3, #4]
 8000990:	8bfb      	ldrh	r3, [r7, #30]
 8000992:	4413      	add	r3, r2
 8000994:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	3301      	adds	r3, #1
 800099a:	60bb      	str	r3, [r7, #8]
    i++;
 800099c:	8bbb      	ldrh	r3, [r7, #28]
 800099e:	3301      	adds	r3, #1
 80009a0:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	bf14      	ite	ne
 80009aa:	2301      	movne	r3, #1
 80009ac:	2300      	moveq	r3, #0
 80009ae:	b2dc      	uxtb	r4, r3
 80009b0:	f7ff fe1a 	bl	80005e8 <BSP_LCD_GetXSize>
 80009b4:	4605      	mov	r5, r0
 80009b6:	8bb9      	ldrh	r1, [r7, #28]
 80009b8:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <BSP_LCD_DisplayStringAt+0x180>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4813      	ldr	r0, [pc, #76]	; (8000a0c <BSP_LCD_DisplayStringAt+0x184>)
 80009be:	4613      	mov	r3, r2
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	4413      	add	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	4403      	add	r3, r0
 80009c8:	3308      	adds	r3, #8
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	889b      	ldrh	r3, [r3, #4]
 80009ce:	fb03 f301 	mul.w	r3, r3, r1
 80009d2:	1aeb      	subs	r3, r5, r3
 80009d4:	b299      	uxth	r1, r3
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <BSP_LCD_DisplayStringAt+0x180>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	480c      	ldr	r0, [pc, #48]	; (8000a0c <BSP_LCD_DisplayStringAt+0x184>)
 80009dc:	4613      	mov	r3, r2
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	4413      	add	r3, r2
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	4403      	add	r3, r0
 80009e6:	3308      	adds	r3, #8
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	889b      	ldrh	r3, [r3, #4]
 80009ec:	4299      	cmp	r1, r3
 80009ee:	bf2c      	ite	cs
 80009f0:	2301      	movcs	r3, #1
 80009f2:	2300      	movcc	r3, #0
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	4023      	ands	r3, r4
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d1b6      	bne.n	800096c <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 80009fe:	bf00      	nop
 8000a00:	3720      	adds	r7, #32
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bdb0      	pop	{r4, r5, r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000074 	.word	0x20000074
 8000a0c:	20000078 	.word	0x20000078

08000a10 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8000a10:	b5b0      	push	{r4, r5, r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	603a      	str	r2, [r7, #0]
 8000a1a:	80fb      	strh	r3, [r7, #6]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000a20:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <BSP_LCD_DrawPixel+0x88>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a1d      	ldr	r2, [pc, #116]	; (8000a9c <BSP_LCD_DrawPixel+0x8c>)
 8000a26:	2134      	movs	r1, #52	; 0x34
 8000a28:	fb01 f303 	mul.w	r3, r1, r3
 8000a2c:	4413      	add	r3, r2
 8000a2e:	3348      	adds	r3, #72	; 0x48
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b02      	cmp	r3, #2
 8000a34:	d116      	bne.n	8000a64 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <BSP_LCD_DrawPixel+0x88>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a18      	ldr	r2, [pc, #96]	; (8000a9c <BSP_LCD_DrawPixel+0x8c>)
 8000a3c:	2134      	movs	r1, #52	; 0x34
 8000a3e:	fb01 f303 	mul.w	r3, r1, r3
 8000a42:	4413      	add	r3, r2
 8000a44:	335c      	adds	r3, #92	; 0x5c
 8000a46:	681c      	ldr	r4, [r3, #0]
 8000a48:	88bd      	ldrh	r5, [r7, #4]
 8000a4a:	f7ff fdcd 	bl	80005e8 <BSP_LCD_GetXSize>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	fb03 f205 	mul.w	r2, r3, r5
 8000a54:	88fb      	ldrh	r3, [r7, #6]
 8000a56:	4413      	add	r3, r2
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	4423      	add	r3, r4
 8000a5c:	683a      	ldr	r2, [r7, #0]
 8000a5e:	b292      	uxth	r2, r2
 8000a60:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8000a62:	e015      	b.n	8000a90 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <BSP_LCD_DrawPixel+0x88>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0c      	ldr	r2, [pc, #48]	; (8000a9c <BSP_LCD_DrawPixel+0x8c>)
 8000a6a:	2134      	movs	r1, #52	; 0x34
 8000a6c:	fb01 f303 	mul.w	r3, r1, r3
 8000a70:	4413      	add	r3, r2
 8000a72:	335c      	adds	r3, #92	; 0x5c
 8000a74:	681c      	ldr	r4, [r3, #0]
 8000a76:	88bd      	ldrh	r5, [r7, #4]
 8000a78:	f7ff fdb6 	bl	80005e8 <BSP_LCD_GetXSize>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	fb03 f205 	mul.w	r2, r3, r5
 8000a82:	88fb      	ldrh	r3, [r7, #6]
 8000a84:	4413      	add	r3, r2
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	4423      	add	r3, r4
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	6013      	str	r3, [r2, #0]
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bdb0      	pop	{r4, r5, r7, pc}
 8000a98:	20000074 	.word	0x20000074
 8000a9c:	200001a4 	.word	0x200001a4

08000aa0 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <BSP_LCD_DisplayOn+0x30>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	699a      	ldr	r2, [r3, #24]
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <BSP_LCD_DisplayOn+0x30>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f042 0201 	orr.w	r2, r2, #1
 8000ab2:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aba:	4806      	ldr	r0, [pc, #24]	; (8000ad4 <BSP_LCD_DisplayOn+0x34>)
 8000abc:	f001 fc52 	bl	8002364 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2108      	movs	r1, #8
 8000ac4:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <BSP_LCD_DisplayOn+0x38>)
 8000ac6:	f001 fc4d 	bl	8002364 <HAL_GPIO_WritePin>
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200001a4 	.word	0x200001a4
 8000ad4:	40022000 	.word	0x40022000
 8000ad8:	40022800 	.word	0x40022800

08000adc <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b090      	sub	sp, #64	; 0x40
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000ae6:	4b64      	ldr	r3, [pc, #400]	; (8000c78 <BSP_LCD_MspInit+0x19c>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	4a63      	ldr	r2, [pc, #396]	; (8000c78 <BSP_LCD_MspInit+0x19c>)
 8000aec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000af0:	6453      	str	r3, [r2, #68]	; 0x44
 8000af2:	4b61      	ldr	r3, [pc, #388]	; (8000c78 <BSP_LCD_MspInit+0x19c>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
 8000afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8000afe:	4b5e      	ldr	r3, [pc, #376]	; (8000c78 <BSP_LCD_MspInit+0x19c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a5d      	ldr	r2, [pc, #372]	; (8000c78 <BSP_LCD_MspInit+0x19c>)
 8000b04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b5b      	ldr	r3, [pc, #364]	; (8000c78 <BSP_LCD_MspInit+0x19c>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
 8000b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b16:	4b58      	ldr	r3, [pc, #352]	; (8000c78 <BSP_LCD_MspInit+0x19c>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a57      	ldr	r2, [pc, #348]	; (8000c78 <BSP_LCD_MspInit+0x19c>)
 8000b1c:	f043 0310 	orr.w	r3, r3, #16
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b55      	ldr	r3, [pc, #340]	; (8000c78 <BSP_LCD_MspInit+0x19c>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0310 	and.w	r3, r3, #16
 8000b2a:	623b      	str	r3, [r7, #32]
 8000b2c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b2e:	4b52      	ldr	r3, [pc, #328]	; (8000c78 <BSP_LCD_MspInit+0x19c>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a51      	ldr	r2, [pc, #324]	; (8000c78 <BSP_LCD_MspInit+0x19c>)
 8000b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b4f      	ldr	r3, [pc, #316]	; (8000c78 <BSP_LCD_MspInit+0x19c>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b42:	61fb      	str	r3, [r7, #28]
 8000b44:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b46:	4b4c      	ldr	r3, [pc, #304]	; (8000c78 <BSP_LCD_MspInit+0x19c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a4b      	ldr	r2, [pc, #300]	; (8000c78 <BSP_LCD_MspInit+0x19c>)
 8000b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b49      	ldr	r3, [pc, #292]	; (8000c78 <BSP_LCD_MspInit+0x19c>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b5a:	61bb      	str	r3, [r7, #24]
 8000b5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b5e:	4b46      	ldr	r3, [pc, #280]	; (8000c78 <BSP_LCD_MspInit+0x19c>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a45      	ldr	r2, [pc, #276]	; (8000c78 <BSP_LCD_MspInit+0x19c>)
 8000b64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b43      	ldr	r3, [pc, #268]	; (8000c78 <BSP_LCD_MspInit+0x19c>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000b76:	4b40      	ldr	r3, [pc, #256]	; (8000c78 <BSP_LCD_MspInit+0x19c>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a3f      	ldr	r2, [pc, #252]	; (8000c78 <BSP_LCD_MspInit+0x19c>)
 8000b7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b3d      	ldr	r3, [pc, #244]	; (8000c78 <BSP_LCD_MspInit+0x19c>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8000b8e:	4b3a      	ldr	r3, [pc, #232]	; (8000c78 <BSP_LCD_MspInit+0x19c>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a39      	ldr	r2, [pc, #228]	; (8000c78 <BSP_LCD_MspInit+0x19c>)
 8000b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b37      	ldr	r3, [pc, #220]	; (8000c78 <BSP_LCD_MspInit+0x19c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8000ba6:	4b34      	ldr	r3, [pc, #208]	; (8000c78 <BSP_LCD_MspInit+0x19c>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a33      	ldr	r2, [pc, #204]	; (8000c78 <BSP_LCD_MspInit+0x19c>)
 8000bac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b31      	ldr	r3, [pc, #196]	; (8000c78 <BSP_LCD_MspInit+0x19c>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8000bbe:	2310      	movs	r3, #16
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8000bce:	230e      	movs	r3, #14
 8000bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000bd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4828      	ldr	r0, [pc, #160]	; (8000c7c <BSP_LCD_MspInit+0x1a0>)
 8000bda:	f001 fa19 	bl	8002010 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8000bde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8000be8:	2309      	movs	r3, #9
 8000bea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8000bec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4823      	ldr	r0, [pc, #140]	; (8000c80 <BSP_LCD_MspInit+0x1a4>)
 8000bf4:	f001 fa0c 	bl	8002010 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8000bf8:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8000c02:	230e      	movs	r3, #14
 8000c04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8000c06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	481d      	ldr	r0, [pc, #116]	; (8000c84 <BSP_LCD_MspInit+0x1a8>)
 8000c0e:	f001 f9ff 	bl	8002010 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8000c12:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8000c1c:	230e      	movs	r3, #14
 8000c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8000c20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c24:	4619      	mov	r1, r3
 8000c26:	4818      	ldr	r0, [pc, #96]	; (8000c88 <BSP_LCD_MspInit+0x1ac>)
 8000c28:	f001 f9f2 	bl	8002010 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8000c2c:	23f7      	movs	r3, #247	; 0xf7
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000c30:	2302      	movs	r3, #2
 8000c32:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8000c34:	230e      	movs	r3, #14
 8000c36:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8000c38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4813      	ldr	r0, [pc, #76]	; (8000c8c <BSP_LCD_MspInit+0x1b0>)
 8000c40:	f001 f9e6 	bl	8002010 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8000c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8000c4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c52:	4619      	mov	r1, r3
 8000c54:	480b      	ldr	r0, [pc, #44]	; (8000c84 <BSP_LCD_MspInit+0x1a8>)
 8000c56:	f001 f9db 	bl	8002010 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8000c5a:	2308      	movs	r3, #8
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8000c62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c66:	4619      	mov	r1, r3
 8000c68:	4808      	ldr	r0, [pc, #32]	; (8000c8c <BSP_LCD_MspInit+0x1b0>)
 8000c6a:	f001 f9d1 	bl	8002010 <HAL_GPIO_Init>
}
 8000c6e:	bf00      	nop
 8000c70:	3740      	adds	r7, #64	; 0x40
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	40021800 	.word	0x40021800
 8000c84:	40022000 	.word	0x40022000
 8000c88:	40022400 	.word	0x40022400
 8000c8c:	40022800 	.word	0x40022800

08000c90 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <BSP_LCD_ClockConfig+0x34>)
 8000c9c:	2208      	movs	r2, #8
 8000c9e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <BSP_LCD_ClockConfig+0x34>)
 8000ca2:	22c0      	movs	r2, #192	; 0xc0
 8000ca4:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8000ca6:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <BSP_LCD_ClockConfig+0x34>)
 8000ca8:	2205      	movs	r2, #5
 8000caa:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <BSP_LCD_ClockConfig+0x34>)
 8000cae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8000cb4:	4803      	ldr	r0, [pc, #12]	; (8000cc4 <BSP_LCD_ClockConfig+0x34>)
 8000cb6:	f002 fb51 	bl	800335c <HAL_RCCEx_PeriphCLKConfig>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000090 	.word	0x20000090

08000cc8 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	603a      	str	r2, [r7, #0]
 8000cd2:	80fb      	strh	r3, [r7, #6]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8000ce0:	4b53      	ldr	r3, [pc, #332]	; (8000e30 <DrawChar+0x168>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4953      	ldr	r1, [pc, #332]	; (8000e34 <DrawChar+0x16c>)
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	4413      	add	r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	440b      	add	r3, r1
 8000cf0:	3308      	adds	r3, #8
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	88db      	ldrh	r3, [r3, #6]
 8000cf6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8000cf8:	4b4d      	ldr	r3, [pc, #308]	; (8000e30 <DrawChar+0x168>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	494d      	ldr	r1, [pc, #308]	; (8000e34 <DrawChar+0x16c>)
 8000cfe:	4613      	mov	r3, r2
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	4413      	add	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	440b      	add	r3, r1
 8000d08:	3308      	adds	r3, #8
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	889b      	ldrh	r3, [r3, #4]
 8000d0e:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8000d10:	8a3b      	ldrh	r3, [r7, #16]
 8000d12:	3307      	adds	r3, #7
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	da00      	bge.n	8000d1a <DrawChar+0x52>
 8000d18:	3307      	adds	r3, #7
 8000d1a:	10db      	asrs	r3, r3, #3
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	00db      	lsls	r3, r3, #3
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	8a3b      	ldrh	r3, [r7, #16]
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
 8000d2e:	e076      	b.n	8000e1e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8000d30:	8a3b      	ldrh	r3, [r7, #16]
 8000d32:	3307      	adds	r3, #7
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	da00      	bge.n	8000d3a <DrawChar+0x72>
 8000d38:	3307      	adds	r3, #7
 8000d3a:	10db      	asrs	r3, r3, #3
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	fb03 f302 	mul.w	r3, r3, r2
 8000d44:	683a      	ldr	r2, [r7, #0]
 8000d46:	4413      	add	r3, r2
 8000d48:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8000d4a:	8a3b      	ldrh	r3, [r7, #16]
 8000d4c:	3307      	adds	r3, #7
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	da00      	bge.n	8000d54 <DrawChar+0x8c>
 8000d52:	3307      	adds	r3, #7
 8000d54:	10db      	asrs	r3, r3, #3
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d002      	beq.n	8000d60 <DrawChar+0x98>
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d004      	beq.n	8000d68 <DrawChar+0xa0>
 8000d5e:	e00c      	b.n	8000d7a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	617b      	str	r3, [r7, #20]
      break;
 8000d66:	e016      	b.n	8000d96 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	021b      	lsls	r3, r3, #8
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	3201      	adds	r2, #1
 8000d72:	7812      	ldrb	r2, [r2, #0]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	617b      	str	r3, [r7, #20]
      break;
 8000d78:	e00d      	b.n	8000d96 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	041a      	lsls	r2, r3, #16
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	3301      	adds	r3, #1
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	021b      	lsls	r3, r3, #8
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	3202      	adds	r2, #2
 8000d8e:	7812      	ldrb	r2, [r2, #0]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	617b      	str	r3, [r7, #20]
      break;
 8000d94:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	61bb      	str	r3, [r7, #24]
 8000d9a:	e036      	b.n	8000e0a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8000d9c:	8a3a      	ldrh	r2, [r7, #16]
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	1ad2      	subs	r2, r2, r3
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	4413      	add	r3, r2
 8000da6:	3b01      	subs	r3, #1
 8000da8:	2201      	movs	r2, #1
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	461a      	mov	r2, r3
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	4013      	ands	r3, r2
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d012      	beq.n	8000dde <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	88fb      	ldrh	r3, [r7, #6]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	b298      	uxth	r0, r3
 8000dc2:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <DrawChar+0x168>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	491b      	ldr	r1, [pc, #108]	; (8000e34 <DrawChar+0x16c>)
 8000dc8:	4613      	mov	r3, r2
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	4413      	add	r3, r2
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	440b      	add	r3, r1
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	88bb      	ldrh	r3, [r7, #4]
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f7ff fe1a 	bl	8000a10 <BSP_LCD_DrawPixel>
 8000ddc:	e012      	b.n	8000e04 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	88fb      	ldrh	r3, [r7, #6]
 8000de4:	4413      	add	r3, r2
 8000de6:	b298      	uxth	r0, r3
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <DrawChar+0x168>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4911      	ldr	r1, [pc, #68]	; (8000e34 <DrawChar+0x16c>)
 8000dee:	4613      	mov	r3, r2
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	4413      	add	r3, r2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	440b      	add	r3, r1
 8000df8:	3304      	adds	r3, #4
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	88bb      	ldrh	r3, [r7, #4]
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f7ff fe06 	bl	8000a10 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	3301      	adds	r3, #1
 8000e08:	61bb      	str	r3, [r7, #24]
 8000e0a:	8a3b      	ldrh	r3, [r7, #16]
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d3c4      	bcc.n	8000d9c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8000e12:	88bb      	ldrh	r3, [r7, #4]
 8000e14:	3301      	adds	r3, #1
 8000e16:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	61fb      	str	r3, [r7, #28]
 8000e1e:	8a7b      	ldrh	r3, [r7, #18]
 8000e20:	69fa      	ldr	r2, [r7, #28]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d384      	bcc.n	8000d30 <DrawChar+0x68>
  }
}
 8000e26:	bf00      	nop
 8000e28:	3720      	adds	r7, #32
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000074 	.word	0x20000074
 8000e34:	20000078 	.word	0x20000078

08000e38 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af02      	add	r7, sp, #8
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
 8000e44:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8000e46:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <LL_FillBuffer+0x88>)
 8000e48:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e4c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000e4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ec4 <LL_FillBuffer+0x8c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a1d      	ldr	r2, [pc, #116]	; (8000ec8 <LL_FillBuffer+0x90>)
 8000e54:	2134      	movs	r1, #52	; 0x34
 8000e56:	fb01 f303 	mul.w	r3, r1, r3
 8000e5a:	4413      	add	r3, r2
 8000e5c:	3348      	adds	r3, #72	; 0x48
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d103      	bne.n	8000e6c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8000e64:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <LL_FillBuffer+0x88>)
 8000e66:	2202      	movs	r2, #2
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	e002      	b.n	8000e72 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <LL_FillBuffer+0x88>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8000e72:	4a13      	ldr	r2, [pc, #76]	; (8000ec0 <LL_FillBuffer+0x88>)
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <LL_FillBuffer+0x88>)
 8000e7a:	4a14      	ldr	r2, [pc, #80]	; (8000ecc <LL_FillBuffer+0x94>)
 8000e7c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8000e7e:	4810      	ldr	r0, [pc, #64]	; (8000ec0 <LL_FillBuffer+0x88>)
 8000e80:	f000 fd2a 	bl	80018d8 <HAL_DMA2D_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d115      	bne.n	8000eb6 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8000e8a:	68f9      	ldr	r1, [r7, #12]
 8000e8c:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <LL_FillBuffer+0x88>)
 8000e8e:	f000 ff91 	bl	8001db4 <HAL_DMA2D_ConfigLayer>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d10e      	bne.n	8000eb6 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8000e98:	68ba      	ldr	r2, [r7, #8]
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69f9      	ldr	r1, [r7, #28]
 8000ea2:	4807      	ldr	r0, [pc, #28]	; (8000ec0 <LL_FillBuffer+0x88>)
 8000ea4:	f000 fd62 	bl	800196c <HAL_DMA2D_Start>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d103      	bne.n	8000eb6 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8000eae:	210a      	movs	r1, #10
 8000eb0:	4803      	ldr	r0, [pc, #12]	; (8000ec0 <LL_FillBuffer+0x88>)
 8000eb2:	f000 fd86 	bl	80019c2 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000034 	.word	0x20000034
 8000ec4:	20000074 	.word	0x20000074
 8000ec8:	200001a4 	.word	0x200001a4
 8000ecc:	4002b000 	.word	0x4002b000

08000ed0 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8000ed4:	4b29      	ldr	r3, [pc, #164]	; (8000f7c <BSP_SDRAM_Init+0xac>)
 8000ed6:	4a2a      	ldr	r2, [pc, #168]	; (8000f80 <BSP_SDRAM_Init+0xb0>)
 8000ed8:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8000eda:	4b2a      	ldr	r3, [pc, #168]	; (8000f84 <BSP_SDRAM_Init+0xb4>)
 8000edc:	2202      	movs	r2, #2
 8000ede:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8000ee0:	4b28      	ldr	r3, [pc, #160]	; (8000f84 <BSP_SDRAM_Init+0xb4>)
 8000ee2:	2207      	movs	r2, #7
 8000ee4:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8000ee6:	4b27      	ldr	r3, [pc, #156]	; (8000f84 <BSP_SDRAM_Init+0xb4>)
 8000ee8:	2204      	movs	r2, #4
 8000eea:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8000eec:	4b25      	ldr	r3, [pc, #148]	; (8000f84 <BSP_SDRAM_Init+0xb4>)
 8000eee:	2207      	movs	r2, #7
 8000ef0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8000ef2:	4b24      	ldr	r3, [pc, #144]	; (8000f84 <BSP_SDRAM_Init+0xb4>)
 8000ef4:	2202      	movs	r2, #2
 8000ef6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8000ef8:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <BSP_SDRAM_Init+0xb4>)
 8000efa:	2202      	movs	r2, #2
 8000efc:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8000efe:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <BSP_SDRAM_Init+0xb4>)
 8000f00:	2202      	movs	r2, #2
 8000f02:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8000f04:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <BSP_SDRAM_Init+0xac>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000f0a:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <BSP_SDRAM_Init+0xac>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f10:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <BSP_SDRAM_Init+0xac>)
 8000f12:	2204      	movs	r2, #4
 8000f14:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8000f16:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <BSP_SDRAM_Init+0xac>)
 8000f18:	2210      	movs	r2, #16
 8000f1a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f1c:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <BSP_SDRAM_Init+0xac>)
 8000f1e:	2240      	movs	r2, #64	; 0x40
 8000f20:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8000f22:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <BSP_SDRAM_Init+0xac>)
 8000f24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f28:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <BSP_SDRAM_Init+0xac>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <BSP_SDRAM_Init+0xac>)
 8000f32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f36:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8000f38:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <BSP_SDRAM_Init+0xac>)
 8000f3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f3e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <BSP_SDRAM_Init+0xac>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8000f46:	2100      	movs	r1, #0
 8000f48:	480c      	ldr	r0, [pc, #48]	; (8000f7c <BSP_SDRAM_Init+0xac>)
 8000f4a:	f000 f87f 	bl	800104c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8000f4e:	490d      	ldr	r1, [pc, #52]	; (8000f84 <BSP_SDRAM_Init+0xb4>)
 8000f50:	480a      	ldr	r0, [pc, #40]	; (8000f7c <BSP_SDRAM_Init+0xac>)
 8000f52:	f002 fdf1 	bl	8003b38 <HAL_SDRAM_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <BSP_SDRAM_Init+0xb8>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	701a      	strb	r2, [r3, #0]
 8000f62:	e002      	b.n	8000f6a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <BSP_SDRAM_Init+0xb8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8000f6a:	f240 6003 	movw	r0, #1539	; 0x603
 8000f6e:	f000 f80d 	bl	8000f8c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8000f72:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <BSP_SDRAM_Init+0xb8>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	2000024c 	.word	0x2000024c
 8000f80:	a0000140 	.word	0xa0000140
 8000f84:	20000114 	.word	0x20000114
 8000f88:	20000008 	.word	0x20000008

08000f8c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8000f98:	4b2a      	ldr	r3, [pc, #168]	; (8001044 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000f9e:	4b29      	ldr	r3, [pc, #164]	; (8001044 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000fa0:	2210      	movs	r2, #16
 8000fa2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8000fa4:	4b27      	ldr	r3, [pc, #156]	; (8001044 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000faa:	4b26      	ldr	r3, [pc, #152]	; (8001044 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000fb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fb4:	4923      	ldr	r1, [pc, #140]	; (8001044 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000fb6:	4824      	ldr	r0, [pc, #144]	; (8001048 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8000fb8:	f002 fdf2 	bl	8003ba0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f000 f99b 	bl	80012f8 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8000fc2:	4b20      	ldr	r3, [pc, #128]	; (8001044 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000fc8:	4b1e      	ldr	r3, [pc, #120]	; (8001044 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000fca:	2210      	movs	r2, #16
 8000fcc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8000fce:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8000fda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fde:	4919      	ldr	r1, [pc, #100]	; (8001044 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000fe0:	4819      	ldr	r0, [pc, #100]	; (8001048 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8000fe2:	f002 fddd 	bl	8003ba0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000fe6:	4b17      	ldr	r3, [pc, #92]	; (8001044 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000fe8:	2203      	movs	r2, #3
 8000fea:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000fec:	4b15      	ldr	r3, [pc, #84]	; (8001044 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000fee:	2210      	movs	r2, #16
 8000ff0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8000ff2:	4b14      	ldr	r3, [pc, #80]	; (8001044 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000ff4:	2208      	movs	r2, #8
 8000ff6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000ffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001002:	4910      	ldr	r1, [pc, #64]	; (8001044 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001004:	4810      	ldr	r0, [pc, #64]	; (8001048 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001006:	f002 fdcb 	bl	8003ba0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800100a:	f44f 7308 	mov.w	r3, #544	; 0x220
 800100e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001012:	2204      	movs	r2, #4
 8001014:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001018:	2210      	movs	r2, #16
 800101a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800101c:	4b09      	ldr	r3, [pc, #36]	; (8001044 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800101e:	2201      	movs	r2, #1
 8001020:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4a07      	ldr	r2, [pc, #28]	; (8001044 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001026:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001028:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800102c:	4905      	ldr	r1, [pc, #20]	; (8001044 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800102e:	4806      	ldr	r0, [pc, #24]	; (8001048 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001030:	f002 fdb6 	bl	8003ba0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001034:	6879      	ldr	r1, [r7, #4]
 8001036:	4804      	ldr	r0, [pc, #16]	; (8001048 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001038:	f002 fddd 	bl	8003bf6 <HAL_SDRAM_ProgramRefreshRate>
}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000130 	.word	0x20000130
 8001048:	2000024c 	.word	0x2000024c

0800104c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 800104c:	b580      	push	{r7, lr}
 800104e:	b090      	sub	sp, #64	; 0x40
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001056:	4b70      	ldr	r3, [pc, #448]	; (8001218 <BSP_SDRAM_MspInit+0x1cc>)
 8001058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800105a:	4a6f      	ldr	r2, [pc, #444]	; (8001218 <BSP_SDRAM_MspInit+0x1cc>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6393      	str	r3, [r2, #56]	; 0x38
 8001062:	4b6d      	ldr	r3, [pc, #436]	; (8001218 <BSP_SDRAM_MspInit+0x1cc>)
 8001064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
 800106c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800106e:	4b6a      	ldr	r3, [pc, #424]	; (8001218 <BSP_SDRAM_MspInit+0x1cc>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a69      	ldr	r2, [pc, #420]	; (8001218 <BSP_SDRAM_MspInit+0x1cc>)
 8001074:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b67      	ldr	r3, [pc, #412]	; (8001218 <BSP_SDRAM_MspInit+0x1cc>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
 8001084:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001086:	4b64      	ldr	r3, [pc, #400]	; (8001218 <BSP_SDRAM_MspInit+0x1cc>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a63      	ldr	r2, [pc, #396]	; (8001218 <BSP_SDRAM_MspInit+0x1cc>)
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b61      	ldr	r3, [pc, #388]	; (8001218 <BSP_SDRAM_MspInit+0x1cc>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	623b      	str	r3, [r7, #32]
 800109c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800109e:	4b5e      	ldr	r3, [pc, #376]	; (8001218 <BSP_SDRAM_MspInit+0x1cc>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a5d      	ldr	r2, [pc, #372]	; (8001218 <BSP_SDRAM_MspInit+0x1cc>)
 80010a4:	f043 0308 	orr.w	r3, r3, #8
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b5b      	ldr	r3, [pc, #364]	; (8001218 <BSP_SDRAM_MspInit+0x1cc>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0308 	and.w	r3, r3, #8
 80010b2:	61fb      	str	r3, [r7, #28]
 80010b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010b6:	4b58      	ldr	r3, [pc, #352]	; (8001218 <BSP_SDRAM_MspInit+0x1cc>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a57      	ldr	r2, [pc, #348]	; (8001218 <BSP_SDRAM_MspInit+0x1cc>)
 80010bc:	f043 0310 	orr.w	r3, r3, #16
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b55      	ldr	r3, [pc, #340]	; (8001218 <BSP_SDRAM_MspInit+0x1cc>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0310 	and.w	r3, r3, #16
 80010ca:	61bb      	str	r3, [r7, #24]
 80010cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ce:	4b52      	ldr	r3, [pc, #328]	; (8001218 <BSP_SDRAM_MspInit+0x1cc>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a51      	ldr	r2, [pc, #324]	; (8001218 <BSP_SDRAM_MspInit+0x1cc>)
 80010d4:	f043 0320 	orr.w	r3, r3, #32
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b4f      	ldr	r3, [pc, #316]	; (8001218 <BSP_SDRAM_MspInit+0x1cc>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0320 	and.w	r3, r3, #32
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010e6:	4b4c      	ldr	r3, [pc, #304]	; (8001218 <BSP_SDRAM_MspInit+0x1cc>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a4b      	ldr	r2, [pc, #300]	; (8001218 <BSP_SDRAM_MspInit+0x1cc>)
 80010ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b49      	ldr	r3, [pc, #292]	; (8001218 <BSP_SDRAM_MspInit+0x1cc>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010fe:	4b46      	ldr	r3, [pc, #280]	; (8001218 <BSP_SDRAM_MspInit+0x1cc>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a45      	ldr	r2, [pc, #276]	; (8001218 <BSP_SDRAM_MspInit+0x1cc>)
 8001104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b43      	ldr	r3, [pc, #268]	; (8001218 <BSP_SDRAM_MspInit+0x1cc>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800111a:	2301      	movs	r3, #1
 800111c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800111e:	2302      	movs	r3, #2
 8001120:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001122:	230c      	movs	r3, #12
 8001124:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8001126:	2308      	movs	r3, #8
 8001128:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800112a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800112e:	4619      	mov	r1, r3
 8001130:	483a      	ldr	r0, [pc, #232]	; (800121c <BSP_SDRAM_MspInit+0x1d0>)
 8001132:	f000 ff6d 	bl	8002010 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8001136:	f24c 7303 	movw	r3, #50947	; 0xc703
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800113c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001140:	4619      	mov	r1, r3
 8001142:	4837      	ldr	r0, [pc, #220]	; (8001220 <BSP_SDRAM_MspInit+0x1d4>)
 8001144:	f000 ff64 	bl	8002010 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001148:	f64f 7383 	movw	r3, #65411	; 0xff83
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800114e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001152:	4619      	mov	r1, r3
 8001154:	4833      	ldr	r0, [pc, #204]	; (8001224 <BSP_SDRAM_MspInit+0x1d8>)
 8001156:	f000 ff5b 	bl	8002010 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800115a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001160:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001164:	4619      	mov	r1, r3
 8001166:	4830      	ldr	r0, [pc, #192]	; (8001228 <BSP_SDRAM_MspInit+0x1dc>)
 8001168:	f000 ff52 	bl	8002010 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800116c:	f248 1333 	movw	r3, #33075	; 0x8133
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001172:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001176:	4619      	mov	r1, r3
 8001178:	482c      	ldr	r0, [pc, #176]	; (800122c <BSP_SDRAM_MspInit+0x1e0>)
 800117a:	f000 ff49 	bl	8002010 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800117e:	2328      	movs	r3, #40	; 0x28
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001182:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001186:	4619      	mov	r1, r3
 8001188:	4829      	ldr	r0, [pc, #164]	; (8001230 <BSP_SDRAM_MspInit+0x1e4>)
 800118a:	f000 ff41 	bl	8002010 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800118e:	4b29      	ldr	r3, [pc, #164]	; (8001234 <BSP_SDRAM_MspInit+0x1e8>)
 8001190:	2200      	movs	r2, #0
 8001192:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001194:	4b27      	ldr	r3, [pc, #156]	; (8001234 <BSP_SDRAM_MspInit+0x1e8>)
 8001196:	2280      	movs	r2, #128	; 0x80
 8001198:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800119a:	4b26      	ldr	r3, [pc, #152]	; (8001234 <BSP_SDRAM_MspInit+0x1e8>)
 800119c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011a0:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80011a2:	4b24      	ldr	r3, [pc, #144]	; (8001234 <BSP_SDRAM_MspInit+0x1e8>)
 80011a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011a8:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011aa:	4b22      	ldr	r3, [pc, #136]	; (8001234 <BSP_SDRAM_MspInit+0x1e8>)
 80011ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011b0:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80011b2:	4b20      	ldr	r3, [pc, #128]	; (8001234 <BSP_SDRAM_MspInit+0x1e8>)
 80011b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011b8:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80011ba:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <BSP_SDRAM_MspInit+0x1e8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80011c0:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <BSP_SDRAM_MspInit+0x1e8>)
 80011c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011c6:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80011c8:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <BSP_SDRAM_MspInit+0x1e8>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80011ce:	4b19      	ldr	r3, [pc, #100]	; (8001234 <BSP_SDRAM_MspInit+0x1e8>)
 80011d0:	2203      	movs	r2, #3
 80011d2:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80011d4:	4b17      	ldr	r3, [pc, #92]	; (8001234 <BSP_SDRAM_MspInit+0x1e8>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80011da:	4b16      	ldr	r3, [pc, #88]	; (8001234 <BSP_SDRAM_MspInit+0x1e8>)
 80011dc:	2200      	movs	r2, #0
 80011de:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <BSP_SDRAM_MspInit+0x1e8>)
 80011e2:	4a15      	ldr	r2, [pc, #84]	; (8001238 <BSP_SDRAM_MspInit+0x1ec>)
 80011e4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a12      	ldr	r2, [pc, #72]	; (8001234 <BSP_SDRAM_MspInit+0x1e8>)
 80011ea:	631a      	str	r2, [r3, #48]	; 0x30
 80011ec:	4a11      	ldr	r2, [pc, #68]	; (8001234 <BSP_SDRAM_MspInit+0x1e8>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80011f2:	4810      	ldr	r0, [pc, #64]	; (8001234 <BSP_SDRAM_MspInit+0x1e8>)
 80011f4:	f000 fa62 	bl	80016bc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80011f8:	480e      	ldr	r0, [pc, #56]	; (8001234 <BSP_SDRAM_MspInit+0x1e8>)
 80011fa:	f000 f9b1 	bl	8001560 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	210f      	movs	r1, #15
 8001202:	2038      	movs	r0, #56	; 0x38
 8001204:	f000 f975 	bl	80014f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001208:	2038      	movs	r0, #56	; 0x38
 800120a:	f000 f98e 	bl	800152a <HAL_NVIC_EnableIRQ>
}
 800120e:	bf00      	nop
 8001210:	3740      	adds	r7, #64	; 0x40
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800
 800121c:	40020800 	.word	0x40020800
 8001220:	40020c00 	.word	0x40020c00
 8001224:	40021000 	.word	0x40021000
 8001228:	40021400 	.word	0x40021400
 800122c:	40021800 	.word	0x40021800
 8001230:	40021c00 	.word	0x40021c00
 8001234:	20000140 	.word	0x20000140
 8001238:	40026410 	.word	0x40026410

0800123c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001240:	2003      	movs	r0, #3
 8001242:	f000 f94b 	bl	80014dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001246:	2000      	movs	r0, #0
 8001248:	f000 f806 	bl	8001258 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800124c:	f002 ff76 	bl	800413c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <HAL_InitTick+0x54>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_InitTick+0x58>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	4619      	mov	r1, r3
 800126a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001272:	fbb2 f3f3 	udiv	r3, r2, r3
 8001276:	4618      	mov	r0, r3
 8001278:	f000 f965 	bl	8001546 <HAL_SYSTICK_Config>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e00e      	b.n	80012a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b0f      	cmp	r3, #15
 800128a:	d80a      	bhi.n	80012a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800128c:	2200      	movs	r2, #0
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	f04f 30ff 	mov.w	r0, #4294967295
 8001294:	f000 f92d 	bl	80014f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001298:	4a06      	ldr	r2, [pc, #24]	; (80012b4 <HAL_InitTick+0x5c>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	e000      	b.n	80012a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000014 	.word	0x20000014
 80012b0:	20000010 	.word	0x20000010
 80012b4:	2000000c 	.word	0x2000000c

080012b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <HAL_IncTick+0x20>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_IncTick+0x24>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4413      	add	r3, r2
 80012c8:	4a04      	ldr	r2, [pc, #16]	; (80012dc <HAL_IncTick+0x24>)
 80012ca:	6013      	str	r3, [r2, #0]
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000010 	.word	0x20000010
 80012dc:	20000280 	.word	0x20000280

080012e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return uwTick;
 80012e4:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <HAL_GetTick+0x14>)
 80012e6:	681b      	ldr	r3, [r3, #0]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20000280 	.word	0x20000280

080012f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001300:	f7ff ffee 	bl	80012e0 <HAL_GetTick>
 8001304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001310:	d005      	beq.n	800131e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_Delay+0x40>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	461a      	mov	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4413      	add	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800131e:	bf00      	nop
 8001320:	f7ff ffde 	bl	80012e0 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	429a      	cmp	r2, r3
 800132e:	d8f7      	bhi.n	8001320 <HAL_Delay+0x28>
  {
  }
}
 8001330:	bf00      	nop
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000010 	.word	0x20000010

0800133c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <__NVIC_SetPriorityGrouping+0x40>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001358:	4013      	ands	r3, r2
 800135a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 8001366:	4313      	orrs	r3, r2
 8001368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136a:	4a04      	ldr	r2, [pc, #16]	; (800137c <__NVIC_SetPriorityGrouping+0x40>)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	60d3      	str	r3, [r2, #12]
}
 8001370:	bf00      	nop
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00
 8001380:	05fa0000 	.word	0x05fa0000

08001384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <__NVIC_GetPriorityGrouping+0x18>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	f003 0307 	and.w	r3, r3, #7
}
 8001392:	4618      	mov	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	db0b      	blt.n	80013ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	f003 021f 	and.w	r2, r3, #31
 80013b8:	4907      	ldr	r1, [pc, #28]	; (80013d8 <__NVIC_EnableIRQ+0x38>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	095b      	lsrs	r3, r3, #5
 80013c0:	2001      	movs	r0, #1
 80013c2:	fa00 f202 	lsl.w	r2, r0, r2
 80013c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000e100 	.word	0xe000e100

080013dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	6039      	str	r1, [r7, #0]
 80013e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	db0a      	blt.n	8001406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	490c      	ldr	r1, [pc, #48]	; (8001428 <__NVIC_SetPriority+0x4c>)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	0112      	lsls	r2, r2, #4
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	440b      	add	r3, r1
 8001400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001404:	e00a      	b.n	800141c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4908      	ldr	r1, [pc, #32]	; (800142c <__NVIC_SetPriority+0x50>)
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	3b04      	subs	r3, #4
 8001414:	0112      	lsls	r2, r2, #4
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	440b      	add	r3, r1
 800141a:	761a      	strb	r2, [r3, #24]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000e100 	.word	0xe000e100
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001430:	b480      	push	{r7}
 8001432:	b089      	sub	sp, #36	; 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f1c3 0307 	rsb	r3, r3, #7
 800144a:	2b04      	cmp	r3, #4
 800144c:	bf28      	it	cs
 800144e:	2304      	movcs	r3, #4
 8001450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3304      	adds	r3, #4
 8001456:	2b06      	cmp	r3, #6
 8001458:	d902      	bls.n	8001460 <NVIC_EncodePriority+0x30>
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3b03      	subs	r3, #3
 800145e:	e000      	b.n	8001462 <NVIC_EncodePriority+0x32>
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	f04f 32ff 	mov.w	r2, #4294967295
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43da      	mvns	r2, r3
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	401a      	ands	r2, r3
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001478:	f04f 31ff 	mov.w	r1, #4294967295
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	fa01 f303 	lsl.w	r3, r1, r3
 8001482:	43d9      	mvns	r1, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	4313      	orrs	r3, r2
         );
}
 800148a:	4618      	mov	r0, r3
 800148c:	3724      	adds	r7, #36	; 0x24
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a8:	d301      	bcc.n	80014ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014aa:	2301      	movs	r3, #1
 80014ac:	e00f      	b.n	80014ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ae:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <SysTick_Config+0x40>)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014b6:	210f      	movs	r1, #15
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295
 80014bc:	f7ff ff8e 	bl	80013dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <SysTick_Config+0x40>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c6:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <SysTick_Config+0x40>)
 80014c8:	2207      	movs	r2, #7
 80014ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	e000e010 	.word	0xe000e010

080014dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ff29 	bl	800133c <__NVIC_SetPriorityGrouping>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b086      	sub	sp, #24
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
 80014fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001504:	f7ff ff3e 	bl	8001384 <__NVIC_GetPriorityGrouping>
 8001508:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	68b9      	ldr	r1, [r7, #8]
 800150e:	6978      	ldr	r0, [r7, #20]
 8001510:	f7ff ff8e 	bl	8001430 <NVIC_EncodePriority>
 8001514:	4602      	mov	r2, r0
 8001516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151a:	4611      	mov	r1, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff5d 	bl	80013dc <__NVIC_SetPriority>
}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff31 	bl	80013a0 <__NVIC_EnableIRQ>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ffa2 	bl	8001498 <SysTick_Config>
 8001554:	4603      	mov	r3, r0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800156c:	f7ff feb8 	bl	80012e0 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e099      	b.n	80016b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2202      	movs	r2, #2
 8001588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0201 	bic.w	r2, r2, #1
 800159a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800159c:	e00f      	b.n	80015be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800159e:	f7ff fe9f 	bl	80012e0 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b05      	cmp	r3, #5
 80015aa:	d908      	bls.n	80015be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2220      	movs	r2, #32
 80015b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2203      	movs	r2, #3
 80015b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e078      	b.n	80016b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1e8      	bne.n	800159e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	4b38      	ldr	r3, [pc, #224]	; (80016b8 <HAL_DMA_Init+0x158>)
 80015d8:	4013      	ands	r3, r2
 80015da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001602:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	4313      	orrs	r3, r2
 800160e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001614:	2b04      	cmp	r3, #4
 8001616:	d107      	bne.n	8001628 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001620:	4313      	orrs	r3, r2
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	4313      	orrs	r3, r2
 8001626:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	f023 0307 	bic.w	r3, r3, #7
 800163e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	4313      	orrs	r3, r2
 8001648:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	2b04      	cmp	r3, #4
 8001650:	d117      	bne.n	8001682 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	4313      	orrs	r3, r2
 800165a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	2b00      	cmp	r3, #0
 8001662:	d00e      	beq.n	8001682 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 f8bd 	bl	80017e4 <DMA_CheckFifoParam>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d008      	beq.n	8001682 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2240      	movs	r2, #64	; 0x40
 8001674:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800167e:	2301      	movs	r3, #1
 8001680:	e016      	b.n	80016b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 f874 	bl	8001778 <DMA_CalcBaseAndBitshift>
 8001690:	4603      	mov	r3, r0
 8001692:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001698:	223f      	movs	r2, #63	; 0x3f
 800169a:	409a      	lsls	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	f010803f 	.word	0xf010803f

080016bc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e050      	b.n	8001770 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d101      	bne.n	80016de <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80016da:	2302      	movs	r3, #2
 80016dc:	e048      	b.n	8001770 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0201 	bic.w	r2, r2, #1
 80016ec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2200      	movs	r2, #0
 80016fc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2221      	movs	r2, #33	; 0x21
 800171c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f82a 	bl	8001778 <DMA_CalcBaseAndBitshift>
 8001724:	4603      	mov	r3, r0
 8001726:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800172c:	223f      	movs	r2, #63	; 0x3f
 800172e:	409a      	lsls	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	3b10      	subs	r3, #16
 8001788:	4a13      	ldr	r2, [pc, #76]	; (80017d8 <DMA_CalcBaseAndBitshift+0x60>)
 800178a:	fba2 2303 	umull	r2, r3, r2, r3
 800178e:	091b      	lsrs	r3, r3, #4
 8001790:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001792:	4a12      	ldr	r2, [pc, #72]	; (80017dc <DMA_CalcBaseAndBitshift+0x64>)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4413      	add	r3, r2
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	d908      	bls.n	80017b8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <DMA_CalcBaseAndBitshift+0x68>)
 80017ae:	4013      	ands	r3, r2
 80017b0:	1d1a      	adds	r2, r3, #4
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	659a      	str	r2, [r3, #88]	; 0x58
 80017b6:	e006      	b.n	80017c6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	461a      	mov	r2, r3
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <DMA_CalcBaseAndBitshift+0x68>)
 80017c0:	4013      	ands	r3, r2
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	aaaaaaab 	.word	0xaaaaaaab
 80017dc:	08006138 	.word	0x08006138
 80017e0:	fffffc00 	.word	0xfffffc00

080017e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017ec:	2300      	movs	r3, #0
 80017ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d11f      	bne.n	800183e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	2b03      	cmp	r3, #3
 8001802:	d855      	bhi.n	80018b0 <DMA_CheckFifoParam+0xcc>
 8001804:	a201      	add	r2, pc, #4	; (adr r2, 800180c <DMA_CheckFifoParam+0x28>)
 8001806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180a:	bf00      	nop
 800180c:	0800181d 	.word	0x0800181d
 8001810:	0800182f 	.word	0x0800182f
 8001814:	0800181d 	.word	0x0800181d
 8001818:	080018b1 	.word	0x080018b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001820:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d045      	beq.n	80018b4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800182c:	e042      	b.n	80018b4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001832:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001836:	d13f      	bne.n	80018b8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800183c:	e03c      	b.n	80018b8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001846:	d121      	bne.n	800188c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2b03      	cmp	r3, #3
 800184c:	d836      	bhi.n	80018bc <DMA_CheckFifoParam+0xd8>
 800184e:	a201      	add	r2, pc, #4	; (adr r2, 8001854 <DMA_CheckFifoParam+0x70>)
 8001850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001854:	08001865 	.word	0x08001865
 8001858:	0800186b 	.word	0x0800186b
 800185c:	08001865 	.word	0x08001865
 8001860:	0800187d 	.word	0x0800187d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	73fb      	strb	r3, [r7, #15]
      break;
 8001868:	e02f      	b.n	80018ca <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d024      	beq.n	80018c0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800187a:	e021      	b.n	80018c0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001880:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001884:	d11e      	bne.n	80018c4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800188a:	e01b      	b.n	80018c4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	2b02      	cmp	r3, #2
 8001890:	d902      	bls.n	8001898 <DMA_CheckFifoParam+0xb4>
 8001892:	2b03      	cmp	r3, #3
 8001894:	d003      	beq.n	800189e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001896:	e018      	b.n	80018ca <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	73fb      	strb	r3, [r7, #15]
      break;
 800189c:	e015      	b.n	80018ca <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00e      	beq.n	80018c8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	73fb      	strb	r3, [r7, #15]
      break;
 80018ae:	e00b      	b.n	80018c8 <DMA_CheckFifoParam+0xe4>
      break;
 80018b0:	bf00      	nop
 80018b2:	e00a      	b.n	80018ca <DMA_CheckFifoParam+0xe6>
      break;
 80018b4:	bf00      	nop
 80018b6:	e008      	b.n	80018ca <DMA_CheckFifoParam+0xe6>
      break;
 80018b8:	bf00      	nop
 80018ba:	e006      	b.n	80018ca <DMA_CheckFifoParam+0xe6>
      break;
 80018bc:	bf00      	nop
 80018be:	e004      	b.n	80018ca <DMA_CheckFifoParam+0xe6>
      break;
 80018c0:	bf00      	nop
 80018c2:	e002      	b.n	80018ca <DMA_CheckFifoParam+0xe6>
      break;   
 80018c4:	bf00      	nop
 80018c6:	e000      	b.n	80018ca <DMA_CheckFifoParam+0xe6>
      break;
 80018c8:	bf00      	nop
    }
  } 
  
  return status; 
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e039      	b.n	800195e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d106      	bne.n	8001904 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f002 fc40 	bl	8004184 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2202      	movs	r2, #2
 8001908:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	430a      	orrs	r2, r1
 8001920:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001928:	f023 0107 	bic.w	r1, r3, #7
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <HAL_DMA2D_Init+0x90>)
 8001940:	4013      	ands	r3, r2
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	68d1      	ldr	r1, [r2, #12]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6812      	ldr	r2, [r2, #0]
 800194a:	430b      	orrs	r3, r1
 800194c:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	ffffc000 	.word	0xffffc000

0800196c <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af02      	add	r7, sp, #8
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
 8001978:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001980:	2b01      	cmp	r3, #1
 8001982:	d101      	bne.n	8001988 <HAL_DMA2D_Start+0x1c>
 8001984:	2302      	movs	r3, #2
 8001986:	e018      	b.n	80019ba <HAL_DMA2D_Start+0x4e>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2202      	movs	r2, #2
 8001994:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	68b9      	ldr	r1, [r7, #8]
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f000 fa98 	bl	8001ed8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0201 	orr.w	r2, r2, #1
 80019b6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b086      	sub	sp, #24
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d056      	beq.n	8001a8c <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80019de:	f7ff fc7f 	bl	80012e0 <HAL_GetTick>
 80019e2:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80019e4:	e04b      	b.n	8001a7e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d023      	beq.n	8001a40 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f003 0320 	and.w	r3, r3, #32
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d005      	beq.n	8001a0e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a06:	f043 0202 	orr.w	r2, r3, #2
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a1c:	f043 0201 	orr.w	r2, r3, #1
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2221      	movs	r2, #33	; 0x21
 8001a2a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2204      	movs	r2, #4
 8001a30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e0a5      	b.n	8001b8c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a46:	d01a      	beq.n	8001a7e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001a48:	f7ff fc4a 	bl	80012e0 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d302      	bcc.n	8001a5e <HAL_DMA2D_PollForTransfer+0x9c>
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10f      	bne.n	8001a7e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a62:	f043 0220 	orr.w	r2, r3, #32
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e086      	b.n	8001b8c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0ac      	beq.n	80019e6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	f003 0320 	and.w	r3, r3, #32
 8001a96:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	f003 0320 	and.w	r3, r3, #32
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d061      	beq.n	8001b72 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001aae:	f7ff fc17 	bl	80012e0 <HAL_GetTick>
 8001ab2:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001ab4:	e056      	b.n	8001b64 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d02e      	beq.n	8001b26 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d005      	beq.n	8001ade <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad6:	f043 0204 	orr.w	r2, r3, #4
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f003 0320 	and.w	r3, r3, #32
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d005      	beq.n	8001af4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aec:	f043 0202 	orr.w	r2, r3, #2
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d005      	beq.n	8001b0a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b02:	f043 0201 	orr.w	r2, r3, #1
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2229      	movs	r2, #41	; 0x29
 8001b10:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2204      	movs	r2, #4
 8001b16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e032      	b.n	8001b8c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b2c:	d01a      	beq.n	8001b64 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001b2e:	f7ff fbd7 	bl	80012e0 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d302      	bcc.n	8001b44 <HAL_DMA2D_PollForTransfer+0x182>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d10f      	bne.n	8001b64 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b48:	f043 0220 	orr.w	r2, r3, #32
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2203      	movs	r2, #3
 8001b54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e013      	b.n	8001b8c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 0310 	and.w	r3, r3, #16
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0a1      	beq.n	8001ab6 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2212      	movs	r2, #18
 8001b78:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d026      	beq.n	8001c04 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d021      	beq.n	8001c04 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bce:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd4:	f043 0201 	orr.w	r2, r3, #1
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2201      	movs	r2, #1
 8001be2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2204      	movs	r2, #4
 8001be8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 0320 	and.w	r3, r3, #32
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d026      	beq.n	8001c5c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d021      	beq.n	8001c5c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c26:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c34:	f043 0202 	orr.w	r2, r3, #2
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2204      	movs	r2, #4
 8001c40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d026      	beq.n	8001cb4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d021      	beq.n	8001cb4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c7e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2208      	movs	r2, #8
 8001c86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c8c:	f043 0204 	orr.w	r2, r3, #4
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2204      	movs	r2, #4
 8001c98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d013      	beq.n	8001ce6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d00e      	beq.n	8001ce6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cd6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2204      	movs	r2, #4
 8001cde:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f853 	bl	8001d8c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d024      	beq.n	8001d3a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d01f      	beq.n	8001d3a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d08:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d01f      	beq.n	8001d84 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d01a      	beq.n	8001d84 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d5c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2210      	movs	r2, #16
 8001d64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f80e 	bl	8001da0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001d84:	bf00      	nop
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d101      	bne.n	8001dd4 <HAL_DMA2D_ConfigLayer+0x20>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e079      	b.n	8001ec8 <HAL_DMA2D_ConfigLayer+0x114>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2202      	movs	r2, #2
 8001de0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	011b      	lsls	r3, r3, #4
 8001de8:	3318      	adds	r3, #24
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	041b      	lsls	r3, r3, #16
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001dfe:	4b35      	ldr	r3, [pc, #212]	; (8001ed4 <HAL_DMA2D_ConfigLayer+0x120>)
 8001e00:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b0a      	cmp	r3, #10
 8001e08:	d003      	beq.n	8001e12 <HAL_DMA2D_ConfigLayer+0x5e>
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b09      	cmp	r3, #9
 8001e10:	d107      	bne.n	8001e22 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	e005      	b.n	8001e2e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	061b      	lsls	r3, r3, #24
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d120      	bne.n	8001e76 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	ea02 0103 	and.w	r1, r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	6812      	ldr	r2, [r2, #0]
 8001e54:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b0a      	cmp	r3, #10
 8001e5c:	d003      	beq.n	8001e66 <HAL_DMA2D_ConfigLayer+0xb2>
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b09      	cmp	r3, #9
 8001e64:	d127      	bne.n	8001eb6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001e72:	629a      	str	r2, [r3, #40]	; 0x28
 8001e74:	e01f      	b.n	8001eb6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	69da      	ldr	r2, [r3, #28]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	ea02 0103 	and.w	r1, r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	6812      	ldr	r2, [r2, #0]
 8001e96:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b0a      	cmp	r3, #10
 8001e9e:	d003      	beq.n	8001ea8 <HAL_DMA2D_ConfigLayer+0xf4>
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b09      	cmp	r3, #9
 8001ea6:	d106      	bne.n	8001eb6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001eb4:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	371c      	adds	r7, #28
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	ff03000f 	.word	0xff03000f

08001ed8 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b08b      	sub	sp, #44	; 0x2c
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
 8001ee4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eec:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	041a      	lsls	r2, r3, #16
 8001ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001f10:	d174      	bne.n	8001ffc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001f18:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001f20:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001f28:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d108      	bne.n	8001f4a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	6a3b      	ldr	r3, [r7, #32]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
 8001f48:	e053      	b.n	8001ff2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d106      	bne.n	8001f60 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5e:	e048      	b.n	8001ff2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d111      	bne.n	8001f8c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	0cdb      	lsrs	r3, r3, #19
 8001f6c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	0a9b      	lsrs	r3, r3, #10
 8001f72:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	08db      	lsrs	r3, r3, #3
 8001f78:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	015a      	lsls	r2, r3, #5
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	02db      	lsls	r3, r3, #11
 8001f82:	4313      	orrs	r3, r2
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
 8001f8a:	e032      	b.n	8001ff2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b03      	cmp	r3, #3
 8001f92:	d117      	bne.n	8001fc4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8001f94:	6a3b      	ldr	r3, [r7, #32]
 8001f96:	0fdb      	lsrs	r3, r3, #31
 8001f98:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	0cdb      	lsrs	r3, r3, #19
 8001f9e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	0adb      	lsrs	r3, r3, #11
 8001fa4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	08db      	lsrs	r3, r3, #3
 8001faa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	015a      	lsls	r2, r3, #5
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	029b      	lsls	r3, r3, #10
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	03db      	lsls	r3, r3, #15
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc2:	e016      	b.n	8001ff2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8001fc4:	6a3b      	ldr	r3, [r7, #32]
 8001fc6:	0f1b      	lsrs	r3, r3, #28
 8001fc8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	0d1b      	lsrs	r3, r3, #20
 8001fce:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	0b1b      	lsrs	r3, r3, #12
 8001fd4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	091b      	lsrs	r3, r3, #4
 8001fda:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	011a      	lsls	r2, r3, #4
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	021b      	lsls	r3, r3, #8
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	6a3b      	ldr	r3, [r7, #32]
 8001fe8:	031b      	lsls	r3, r3, #12
 8001fea:	4313      	orrs	r3, r2
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8001ffa:	e003      	b.n	8002004 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68ba      	ldr	r2, [r7, #8]
 8002002:	60da      	str	r2, [r3, #12]
}
 8002004:	bf00      	nop
 8002006:	372c      	adds	r7, #44	; 0x2c
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002010:	b480      	push	{r7}
 8002012:	b089      	sub	sp, #36	; 0x24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002026:	2300      	movs	r3, #0
 8002028:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
 800202e:	e175      	b.n	800231c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002030:	2201      	movs	r2, #1
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	4013      	ands	r3, r2
 8002042:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	429a      	cmp	r2, r3
 800204a:	f040 8164 	bne.w	8002316 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d003      	beq.n	800205e <HAL_GPIO_Init+0x4e>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b12      	cmp	r3, #18
 800205c:	d123      	bne.n	80020a6 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	08da      	lsrs	r2, r3, #3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3208      	adds	r2, #8
 8002066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	220f      	movs	r2, #15
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	691a      	ldr	r2, [r3, #16]
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	08da      	lsrs	r2, r3, #3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3208      	adds	r2, #8
 80020a0:	69b9      	ldr	r1, [r7, #24]
 80020a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	2203      	movs	r2, #3
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4013      	ands	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 0203 	and.w	r2, r3, #3
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d00b      	beq.n	80020fa <HAL_GPIO_Init+0xea>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d007      	beq.n	80020fa <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020ee:	2b11      	cmp	r3, #17
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b12      	cmp	r3, #18
 80020f8:	d130      	bne.n	800215c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	2203      	movs	r2, #3
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4013      	ands	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002130:	2201      	movs	r2, #1
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	091b      	lsrs	r3, r3, #4
 8002146:	f003 0201 	and.w	r2, r3, #1
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	2203      	movs	r2, #3
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 80be 	beq.w	8002316 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800219a:	4b65      	ldr	r3, [pc, #404]	; (8002330 <HAL_GPIO_Init+0x320>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	4a64      	ldr	r2, [pc, #400]	; (8002330 <HAL_GPIO_Init+0x320>)
 80021a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a4:	6453      	str	r3, [r2, #68]	; 0x44
 80021a6:	4b62      	ldr	r3, [pc, #392]	; (8002330 <HAL_GPIO_Init+0x320>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80021b2:	4a60      	ldr	r2, [pc, #384]	; (8002334 <HAL_GPIO_Init+0x324>)
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	089b      	lsrs	r3, r3, #2
 80021b8:	3302      	adds	r3, #2
 80021ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021be:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	220f      	movs	r2, #15
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a57      	ldr	r2, [pc, #348]	; (8002338 <HAL_GPIO_Init+0x328>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d037      	beq.n	800224e <HAL_GPIO_Init+0x23e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a56      	ldr	r2, [pc, #344]	; (800233c <HAL_GPIO_Init+0x32c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d031      	beq.n	800224a <HAL_GPIO_Init+0x23a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a55      	ldr	r2, [pc, #340]	; (8002340 <HAL_GPIO_Init+0x330>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d02b      	beq.n	8002246 <HAL_GPIO_Init+0x236>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a54      	ldr	r2, [pc, #336]	; (8002344 <HAL_GPIO_Init+0x334>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d025      	beq.n	8002242 <HAL_GPIO_Init+0x232>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a53      	ldr	r2, [pc, #332]	; (8002348 <HAL_GPIO_Init+0x338>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d01f      	beq.n	800223e <HAL_GPIO_Init+0x22e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a52      	ldr	r2, [pc, #328]	; (800234c <HAL_GPIO_Init+0x33c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d019      	beq.n	800223a <HAL_GPIO_Init+0x22a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a51      	ldr	r2, [pc, #324]	; (8002350 <HAL_GPIO_Init+0x340>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d013      	beq.n	8002236 <HAL_GPIO_Init+0x226>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a50      	ldr	r2, [pc, #320]	; (8002354 <HAL_GPIO_Init+0x344>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d00d      	beq.n	8002232 <HAL_GPIO_Init+0x222>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a4f      	ldr	r2, [pc, #316]	; (8002358 <HAL_GPIO_Init+0x348>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d007      	beq.n	800222e <HAL_GPIO_Init+0x21e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a4e      	ldr	r2, [pc, #312]	; (800235c <HAL_GPIO_Init+0x34c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d101      	bne.n	800222a <HAL_GPIO_Init+0x21a>
 8002226:	2309      	movs	r3, #9
 8002228:	e012      	b.n	8002250 <HAL_GPIO_Init+0x240>
 800222a:	230a      	movs	r3, #10
 800222c:	e010      	b.n	8002250 <HAL_GPIO_Init+0x240>
 800222e:	2308      	movs	r3, #8
 8002230:	e00e      	b.n	8002250 <HAL_GPIO_Init+0x240>
 8002232:	2307      	movs	r3, #7
 8002234:	e00c      	b.n	8002250 <HAL_GPIO_Init+0x240>
 8002236:	2306      	movs	r3, #6
 8002238:	e00a      	b.n	8002250 <HAL_GPIO_Init+0x240>
 800223a:	2305      	movs	r3, #5
 800223c:	e008      	b.n	8002250 <HAL_GPIO_Init+0x240>
 800223e:	2304      	movs	r3, #4
 8002240:	e006      	b.n	8002250 <HAL_GPIO_Init+0x240>
 8002242:	2303      	movs	r3, #3
 8002244:	e004      	b.n	8002250 <HAL_GPIO_Init+0x240>
 8002246:	2302      	movs	r3, #2
 8002248:	e002      	b.n	8002250 <HAL_GPIO_Init+0x240>
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <HAL_GPIO_Init+0x240>
 800224e:	2300      	movs	r3, #0
 8002250:	69fa      	ldr	r2, [r7, #28]
 8002252:	f002 0203 	and.w	r2, r2, #3
 8002256:	0092      	lsls	r2, r2, #2
 8002258:	4093      	lsls	r3, r2
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4313      	orrs	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002260:	4934      	ldr	r1, [pc, #208]	; (8002334 <HAL_GPIO_Init+0x324>)
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	089b      	lsrs	r3, r3, #2
 8002266:	3302      	adds	r3, #2
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800226e:	4b3c      	ldr	r3, [pc, #240]	; (8002360 <HAL_GPIO_Init+0x350>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002292:	4a33      	ldr	r2, [pc, #204]	; (8002360 <HAL_GPIO_Init+0x350>)
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002298:	4b31      	ldr	r3, [pc, #196]	; (8002360 <HAL_GPIO_Init+0x350>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022bc:	4a28      	ldr	r2, [pc, #160]	; (8002360 <HAL_GPIO_Init+0x350>)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022c2:	4b27      	ldr	r3, [pc, #156]	; (8002360 <HAL_GPIO_Init+0x350>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022e6:	4a1e      	ldr	r2, [pc, #120]	; (8002360 <HAL_GPIO_Init+0x350>)
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022ec:	4b1c      	ldr	r3, [pc, #112]	; (8002360 <HAL_GPIO_Init+0x350>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002310:	4a13      	ldr	r2, [pc, #76]	; (8002360 <HAL_GPIO_Init+0x350>)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3301      	adds	r3, #1
 800231a:	61fb      	str	r3, [r7, #28]
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	2b0f      	cmp	r3, #15
 8002320:	f67f ae86 	bls.w	8002030 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002324:	bf00      	nop
 8002326:	3724      	adds	r7, #36	; 0x24
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	40023800 	.word	0x40023800
 8002334:	40013800 	.word	0x40013800
 8002338:	40020000 	.word	0x40020000
 800233c:	40020400 	.word	0x40020400
 8002340:	40020800 	.word	0x40020800
 8002344:	40020c00 	.word	0x40020c00
 8002348:	40021000 	.word	0x40021000
 800234c:	40021400 	.word	0x40021400
 8002350:	40021800 	.word	0x40021800
 8002354:	40021c00 	.word	0x40021c00
 8002358:	40022000 	.word	0x40022000
 800235c:	40022400 	.word	0x40022400
 8002360:	40013c00 	.word	0x40013c00

08002364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	807b      	strh	r3, [r7, #2]
 8002370:	4613      	mov	r3, r2
 8002372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002374:	787b      	ldrb	r3, [r7, #1]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800237a:	887a      	ldrh	r2, [r7, #2]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002380:	e003      	b.n	800238a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002382:	887b      	ldrh	r3, [r7, #2]
 8002384:	041a      	lsls	r2, r3, #16
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	619a      	str	r2, [r3, #24]
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
	...

08002398 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e0bf      	b.n	800252a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d106      	bne.n	80023c4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f001 ff06 	bl	80041d0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	699a      	ldr	r2, [r3, #24]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80023da:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6999      	ldr	r1, [r3, #24]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80023f0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6899      	ldr	r1, [r3, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	4b4a      	ldr	r3, [pc, #296]	; (8002534 <HAL_LTDC_Init+0x19c>)
 800240c:	400b      	ands	r3, r1
 800240e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	041b      	lsls	r3, r3, #16
 8002416:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6899      	ldr	r1, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699a      	ldr	r2, [r3, #24]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68d9      	ldr	r1, [r3, #12]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	4b3e      	ldr	r3, [pc, #248]	; (8002534 <HAL_LTDC_Init+0x19c>)
 800243a:	400b      	ands	r3, r1
 800243c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	041b      	lsls	r3, r3, #16
 8002444:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68d9      	ldr	r1, [r3, #12]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a1a      	ldr	r2, [r3, #32]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6919      	ldr	r1, [r3, #16]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	4b33      	ldr	r3, [pc, #204]	; (8002534 <HAL_LTDC_Init+0x19c>)
 8002468:	400b      	ands	r3, r1
 800246a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	041b      	lsls	r3, r3, #16
 8002472:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6919      	ldr	r1, [r3, #16]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	431a      	orrs	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6959      	ldr	r1, [r3, #20]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4b27      	ldr	r3, [pc, #156]	; (8002534 <HAL_LTDC_Init+0x19c>)
 8002496:	400b      	ands	r3, r1
 8002498:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249e:	041b      	lsls	r3, r3, #16
 80024a0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6959      	ldr	r1, [r3, #20]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024be:	021b      	lsls	r3, r3, #8
 80024c0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80024c8:	041b      	lsls	r3, r3, #16
 80024ca:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80024da:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0206 	orr.w	r2, r2, #6
 8002506:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699a      	ldr	r2, [r3, #24]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	f000f800 	.word	0xf000f800

08002538 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002546:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	2b00      	cmp	r3, #0
 8002558:	d023      	beq.n	80025a2 <HAL_LTDC_IRQHandler+0x6a>
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d01e      	beq.n	80025a2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0204 	bic.w	r2, r2, #4
 8002572:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2204      	movs	r2, #4
 800257a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002582:	f043 0201 	orr.w	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2204      	movs	r2, #4
 8002590:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 f86f 	bl	8002680 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d023      	beq.n	80025f4 <HAL_LTDC_IRQHandler+0xbc>
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d01e      	beq.n	80025f4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0202 	bic.w	r2, r2, #2
 80025c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2202      	movs	r2, #2
 80025cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80025d4:	f043 0202 	orr.w	r2, r3, #2
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2204      	movs	r2, #4
 80025e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f846 	bl	8002680 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d01b      	beq.n	8002636 <HAL_LTDC_IRQHandler+0xfe>
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	d016      	beq.n	8002636 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0201 	bic.w	r2, r2, #1
 8002616:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2201      	movs	r2, #1
 800261e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f82f 	bl	8002694 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	d01b      	beq.n	8002678 <HAL_LTDC_IRQHandler+0x140>
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d016      	beq.n	8002678 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0208 	bic.w	r2, r2, #8
 8002658:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2208      	movs	r2, #8
 8002660:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f818 	bl	80026a8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8002678:	bf00      	nop
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80026bc:	b5b0      	push	{r4, r5, r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d101      	bne.n	80026d6 <HAL_LTDC_ConfigLayer+0x1a>
 80026d2:	2302      	movs	r3, #2
 80026d4:	e02c      	b.n	8002730 <HAL_LTDC_ConfigLayer+0x74>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2202      	movs	r2, #2
 80026e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2134      	movs	r1, #52	; 0x34
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	4413      	add	r3, r2
 80026f2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	4614      	mov	r4, r2
 80026fa:	461d      	mov	r5, r3
 80026fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002708:	682b      	ldr	r3, [r5, #0]
 800270a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	68b9      	ldr	r1, [r7, #8]
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 f81f 	bl	8002754 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2201      	movs	r2, #1
 800271c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bdb0      	pop	{r4, r5, r7, pc}

08002738 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002746:	b2db      	uxtb	r3, r3
}
 8002748:	4618      	mov	r0, r3
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002754:	b480      	push	{r7}
 8002756:	b089      	sub	sp, #36	; 0x24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	0c1b      	lsrs	r3, r3, #16
 800276c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002770:	4413      	add	r3, r2
 8002772:	041b      	lsls	r3, r3, #16
 8002774:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	01db      	lsls	r3, r3, #7
 8002780:	4413      	add	r3, r2
 8002782:	3384      	adds	r3, #132	; 0x84
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	4611      	mov	r1, r2
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	01d2      	lsls	r2, r2, #7
 8002790:	440a      	add	r2, r1
 8002792:	3284      	adds	r2, #132	; 0x84
 8002794:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002798:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	0c1b      	lsrs	r3, r3, #16
 80027a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027aa:	4413      	add	r3, r2
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4619      	mov	r1, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	01db      	lsls	r3, r3, #7
 80027b8:	440b      	add	r3, r1
 80027ba:	3384      	adds	r3, #132	; 0x84
 80027bc:	4619      	mov	r1, r3
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	68da      	ldr	r2, [r3, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027d2:	4413      	add	r3, r2
 80027d4:	041b      	lsls	r3, r3, #16
 80027d6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	461a      	mov	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	01db      	lsls	r3, r3, #7
 80027e2:	4413      	add	r3, r2
 80027e4:	3384      	adds	r3, #132	; 0x84
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	4611      	mov	r1, r2
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	01d2      	lsls	r2, r2, #7
 80027f2:	440a      	add	r2, r1
 80027f4:	3284      	adds	r2, #132	; 0x84
 80027f6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80027fa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800280a:	4413      	add	r3, r2
 800280c:	1c5a      	adds	r2, r3, #1
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4619      	mov	r1, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	01db      	lsls	r3, r3, #7
 8002818:	440b      	add	r3, r1
 800281a:	3384      	adds	r3, #132	; 0x84
 800281c:	4619      	mov	r1, r3
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	4313      	orrs	r3, r2
 8002822:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	01db      	lsls	r3, r3, #7
 800282e:	4413      	add	r3, r2
 8002830:	3384      	adds	r3, #132	; 0x84
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	4611      	mov	r1, r2
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	01d2      	lsls	r2, r2, #7
 800283e:	440a      	add	r2, r1
 8002840:	3284      	adds	r2, #132	; 0x84
 8002842:	f023 0307 	bic.w	r3, r3, #7
 8002846:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	461a      	mov	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	01db      	lsls	r3, r3, #7
 8002852:	4413      	add	r3, r2
 8002854:	3384      	adds	r3, #132	; 0x84
 8002856:	461a      	mov	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800286e:	041b      	lsls	r3, r3, #16
 8002870:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	061b      	lsls	r3, r3, #24
 8002878:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	01db      	lsls	r3, r3, #7
 8002884:	4413      	add	r3, r2
 8002886:	3384      	adds	r3, #132	; 0x84
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	01db      	lsls	r3, r3, #7
 8002894:	4413      	add	r3, r2
 8002896:	3384      	adds	r3, #132	; 0x84
 8002898:	461a      	mov	r2, r3
 800289a:	2300      	movs	r3, #0
 800289c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028a4:	461a      	mov	r2, r3
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	431a      	orrs	r2, r3
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	431a      	orrs	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4619      	mov	r1, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	01db      	lsls	r3, r3, #7
 80028b8:	440b      	add	r3, r1
 80028ba:	3384      	adds	r3, #132	; 0x84
 80028bc:	4619      	mov	r1, r3
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	461a      	mov	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	01db      	lsls	r3, r3, #7
 80028ce:	4413      	add	r3, r2
 80028d0:	3384      	adds	r3, #132	; 0x84
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	6812      	ldr	r2, [r2, #0]
 80028d8:	4611      	mov	r1, r2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	01d2      	lsls	r2, r2, #7
 80028de:	440a      	add	r2, r1
 80028e0:	3284      	adds	r2, #132	; 0x84
 80028e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028e6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	461a      	mov	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	01db      	lsls	r3, r3, #7
 80028f2:	4413      	add	r3, r2
 80028f4:	3384      	adds	r3, #132	; 0x84
 80028f6:	461a      	mov	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	01db      	lsls	r3, r3, #7
 8002908:	4413      	add	r3, r2
 800290a:	3384      	adds	r3, #132	; 0x84
 800290c:	69da      	ldr	r2, [r3, #28]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4619      	mov	r1, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	01db      	lsls	r3, r3, #7
 8002918:	440b      	add	r3, r1
 800291a:	3384      	adds	r3, #132	; 0x84
 800291c:	4619      	mov	r1, r3
 800291e:	4b58      	ldr	r3, [pc, #352]	; (8002a80 <LTDC_SetConfig+0x32c>)
 8002920:	4013      	ands	r3, r2
 8002922:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	69da      	ldr	r2, [r3, #28]
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	68f9      	ldr	r1, [r7, #12]
 800292e:	6809      	ldr	r1, [r1, #0]
 8002930:	4608      	mov	r0, r1
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	01c9      	lsls	r1, r1, #7
 8002936:	4401      	add	r1, r0
 8002938:	3184      	adds	r1, #132	; 0x84
 800293a:	4313      	orrs	r3, r2
 800293c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	461a      	mov	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	01db      	lsls	r3, r3, #7
 8002948:	4413      	add	r3, r2
 800294a:	3384      	adds	r3, #132	; 0x84
 800294c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	461a      	mov	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	01db      	lsls	r3, r3, #7
 8002958:	4413      	add	r3, r2
 800295a:	3384      	adds	r3, #132	; 0x84
 800295c:	461a      	mov	r2, r3
 800295e:	2300      	movs	r3, #0
 8002960:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	01db      	lsls	r3, r3, #7
 800296c:	4413      	add	r3, r2
 800296e:	3384      	adds	r3, #132	; 0x84
 8002970:	461a      	mov	r2, r3
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d102      	bne.n	8002986 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8002980:	2304      	movs	r3, #4
 8002982:	61fb      	str	r3, [r7, #28]
 8002984:	e01b      	b.n	80029be <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d102      	bne.n	8002994 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800298e:	2303      	movs	r3, #3
 8002990:	61fb      	str	r3, [r7, #28]
 8002992:	e014      	b.n	80029be <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	2b04      	cmp	r3, #4
 800299a:	d00b      	beq.n	80029b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d007      	beq.n	80029b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80029a8:	2b03      	cmp	r3, #3
 80029aa:	d003      	beq.n	80029b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80029b0:	2b07      	cmp	r3, #7
 80029b2:	d102      	bne.n	80029ba <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80029b4:	2302      	movs	r3, #2
 80029b6:	61fb      	str	r3, [r7, #28]
 80029b8:	e001      	b.n	80029be <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80029ba:	2301      	movs	r3, #1
 80029bc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	461a      	mov	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	01db      	lsls	r3, r3, #7
 80029c8:	4413      	add	r3, r2
 80029ca:	3384      	adds	r3, #132	; 0x84
 80029cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	6812      	ldr	r2, [r2, #0]
 80029d2:	4611      	mov	r1, r2
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	01d2      	lsls	r2, r2, #7
 80029d8:	440a      	add	r2, r1
 80029da:	3284      	adds	r2, #132	; 0x84
 80029dc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80029e0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e6:	69fa      	ldr	r2, [r7, #28]
 80029e8:	fb02 f303 	mul.w	r3, r2, r3
 80029ec:	041a      	lsls	r2, r3, #16
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	6859      	ldr	r1, [r3, #4]
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	1acb      	subs	r3, r1, r3
 80029f8:	69f9      	ldr	r1, [r7, #28]
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	3303      	adds	r3, #3
 8002a00:	68f9      	ldr	r1, [r7, #12]
 8002a02:	6809      	ldr	r1, [r1, #0]
 8002a04:	4608      	mov	r0, r1
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	01c9      	lsls	r1, r1, #7
 8002a0a:	4401      	add	r1, r0
 8002a0c:	3184      	adds	r1, #132	; 0x84
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	01db      	lsls	r3, r3, #7
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3384      	adds	r3, #132	; 0x84
 8002a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4619      	mov	r1, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	01db      	lsls	r3, r3, #7
 8002a2c:	440b      	add	r3, r1
 8002a2e:	3384      	adds	r3, #132	; 0x84
 8002a30:	4619      	mov	r1, r3
 8002a32:	4b14      	ldr	r3, [pc, #80]	; (8002a84 <LTDC_SetConfig+0x330>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	01db      	lsls	r3, r3, #7
 8002a42:	4413      	add	r3, r2
 8002a44:	3384      	adds	r3, #132	; 0x84
 8002a46:	461a      	mov	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	461a      	mov	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	01db      	lsls	r3, r3, #7
 8002a58:	4413      	add	r3, r2
 8002a5a:	3384      	adds	r3, #132	; 0x84
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	6812      	ldr	r2, [r2, #0]
 8002a62:	4611      	mov	r1, r2
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	01d2      	lsls	r2, r2, #7
 8002a68:	440a      	add	r2, r1
 8002a6a:	3284      	adds	r2, #132	; 0x84
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6013      	str	r3, [r2, #0]
}
 8002a72:	bf00      	nop
 8002a74:	3724      	adds	r7, #36	; 0x24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	fffff8f8 	.word	0xfffff8f8
 8002a84:	fffff800 	.word	0xfffff800

08002a88 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a04      	ldr	r2, [pc, #16]	; (8002aa4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a96:	6013      	str	r3, [r2, #0]
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40007000 	.word	0x40007000

08002aa8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ab2:	4b23      	ldr	r3, [pc, #140]	; (8002b40 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	4a22      	ldr	r2, [pc, #136]	; (8002b40 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002abc:	6413      	str	r3, [r2, #64]	; 0x40
 8002abe:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac6:	603b      	str	r3, [r7, #0]
 8002ac8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002aca:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a1d      	ldr	r2, [pc, #116]	; (8002b44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ad6:	f7fe fc03 	bl	80012e0 <HAL_GetTick>
 8002ada:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002adc:	e009      	b.n	8002af2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ade:	f7fe fbff 	bl	80012e0 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002aec:	d901      	bls.n	8002af2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e022      	b.n	8002b38 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002af2:	4b14      	ldr	r3, [pc, #80]	; (8002b44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002afe:	d1ee      	bne.n	8002ade <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b00:	4b10      	ldr	r3, [pc, #64]	; (8002b44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a0f      	ldr	r2, [pc, #60]	; (8002b44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b0a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b0c:	f7fe fbe8 	bl	80012e0 <HAL_GetTick>
 8002b10:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b12:	e009      	b.n	8002b28 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b14:	f7fe fbe4 	bl	80012e0 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b22:	d901      	bls.n	8002b28 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e007      	b.n	8002b38 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b28:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b34:	d1ee      	bne.n	8002b14 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40023800 	.word	0x40023800
 8002b44:	40007000 	.word	0x40007000

08002b48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8002b50:	2300      	movs	r3, #0
 8002b52:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e25c      	b.n	8003018 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 8087 	beq.w	8002c7a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b6c:	4b96      	ldr	r3, [pc, #600]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 030c 	and.w	r3, r3, #12
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d00c      	beq.n	8002b92 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b78:	4b93      	ldr	r3, [pc, #588]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 030c 	and.w	r3, r3, #12
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d112      	bne.n	8002baa <HAL_RCC_OscConfig+0x62>
 8002b84:	4b90      	ldr	r3, [pc, #576]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b90:	d10b      	bne.n	8002baa <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b92:	4b8d      	ldr	r3, [pc, #564]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d06c      	beq.n	8002c78 <HAL_RCC_OscConfig+0x130>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d168      	bne.n	8002c78 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e236      	b.n	8003018 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb2:	d106      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x7a>
 8002bb4:	4b84      	ldr	r3, [pc, #528]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a83      	ldr	r2, [pc, #524]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	e02e      	b.n	8002c20 <HAL_RCC_OscConfig+0xd8>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10c      	bne.n	8002be4 <HAL_RCC_OscConfig+0x9c>
 8002bca:	4b7f      	ldr	r3, [pc, #508]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a7e      	ldr	r2, [pc, #504]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002bd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	4b7c      	ldr	r3, [pc, #496]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a7b      	ldr	r2, [pc, #492]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002bdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	e01d      	b.n	8002c20 <HAL_RCC_OscConfig+0xd8>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bec:	d10c      	bne.n	8002c08 <HAL_RCC_OscConfig+0xc0>
 8002bee:	4b76      	ldr	r3, [pc, #472]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a75      	ldr	r2, [pc, #468]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	4b73      	ldr	r3, [pc, #460]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a72      	ldr	r2, [pc, #456]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	e00b      	b.n	8002c20 <HAL_RCC_OscConfig+0xd8>
 8002c08:	4b6f      	ldr	r3, [pc, #444]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a6e      	ldr	r2, [pc, #440]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	4b6c      	ldr	r3, [pc, #432]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a6b      	ldr	r2, [pc, #428]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d013      	beq.n	8002c50 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c28:	f7fe fb5a 	bl	80012e0 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c30:	f7fe fb56 	bl	80012e0 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b64      	cmp	r3, #100	; 0x64
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e1ea      	b.n	8003018 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c42:	4b61      	ldr	r3, [pc, #388]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0f0      	beq.n	8002c30 <HAL_RCC_OscConfig+0xe8>
 8002c4e:	e014      	b.n	8002c7a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7fe fb46 	bl	80012e0 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c58:	f7fe fb42 	bl	80012e0 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b64      	cmp	r3, #100	; 0x64
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e1d6      	b.n	8003018 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c6a:	4b57      	ldr	r3, [pc, #348]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x110>
 8002c76:	e000      	b.n	8002c7a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d069      	beq.n	8002d5a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c86:	4b50      	ldr	r3, [pc, #320]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00b      	beq.n	8002caa <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c92:	4b4d      	ldr	r3, [pc, #308]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 030c 	and.w	r3, r3, #12
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d11c      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x190>
 8002c9e:	4b4a      	ldr	r3, [pc, #296]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d116      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002caa:	4b47      	ldr	r3, [pc, #284]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d005      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x17a>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d001      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e1aa      	b.n	8003018 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc2:	4b41      	ldr	r3, [pc, #260]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	493d      	ldr	r1, [pc, #244]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd6:	e040      	b.n	8002d5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d023      	beq.n	8002d28 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce0:	4b39      	ldr	r3, [pc, #228]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a38      	ldr	r2, [pc, #224]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cec:	f7fe faf8 	bl	80012e0 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf4:	f7fe faf4 	bl	80012e0 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e188      	b.n	8003018 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d06:	4b30      	ldr	r3, [pc, #192]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d12:	4b2d      	ldr	r3, [pc, #180]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4929      	ldr	r1, [pc, #164]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	600b      	str	r3, [r1, #0]
 8002d26:	e018      	b.n	8002d5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d28:	4b27      	ldr	r3, [pc, #156]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a26      	ldr	r2, [pc, #152]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002d2e:	f023 0301 	bic.w	r3, r3, #1
 8002d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d34:	f7fe fad4 	bl	80012e0 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d3c:	f7fe fad0 	bl	80012e0 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e164      	b.n	8003018 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d4e:	4b1e      	ldr	r3, [pc, #120]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d038      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d019      	beq.n	8002da2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d6e:	4b16      	ldr	r3, [pc, #88]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d72:	4a15      	ldr	r2, [pc, #84]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7a:	f7fe fab1 	bl	80012e0 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d82:	f7fe faad 	bl	80012e0 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e141      	b.n	8003018 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d94:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0f0      	beq.n	8002d82 <HAL_RCC_OscConfig+0x23a>
 8002da0:	e01a      	b.n	8002dd8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002da2:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da6:	4a08      	ldr	r2, [pc, #32]	; (8002dc8 <HAL_RCC_OscConfig+0x280>)
 8002da8:	f023 0301 	bic.w	r3, r3, #1
 8002dac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dae:	f7fe fa97 	bl	80012e0 <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db4:	e00a      	b.n	8002dcc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db6:	f7fe fa93 	bl	80012e0 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d903      	bls.n	8002dcc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e127      	b.n	8003018 <HAL_RCC_OscConfig+0x4d0>
 8002dc8:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dcc:	4b94      	ldr	r3, [pc, #592]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1ee      	bne.n	8002db6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 80a4 	beq.w	8002f2e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002de6:	4b8e      	ldr	r3, [pc, #568]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10d      	bne.n	8002e0e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df2:	4b8b      	ldr	r3, [pc, #556]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	4a8a      	ldr	r2, [pc, #552]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dfe:	4b88      	ldr	r3, [pc, #544]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e0e:	4b85      	ldr	r3, [pc, #532]	; (8003024 <HAL_RCC_OscConfig+0x4dc>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d118      	bne.n	8002e4c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e1a:	4b82      	ldr	r3, [pc, #520]	; (8003024 <HAL_RCC_OscConfig+0x4dc>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a81      	ldr	r2, [pc, #516]	; (8003024 <HAL_RCC_OscConfig+0x4dc>)
 8002e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e26:	f7fe fa5b 	bl	80012e0 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e2e:	f7fe fa57 	bl	80012e0 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b64      	cmp	r3, #100	; 0x64
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e0eb      	b.n	8003018 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e40:	4b78      	ldr	r3, [pc, #480]	; (8003024 <HAL_RCC_OscConfig+0x4dc>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0f0      	beq.n	8002e2e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d106      	bne.n	8002e62 <HAL_RCC_OscConfig+0x31a>
 8002e54:	4b72      	ldr	r3, [pc, #456]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e58:	4a71      	ldr	r2, [pc, #452]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e60:	e02d      	b.n	8002ebe <HAL_RCC_OscConfig+0x376>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10c      	bne.n	8002e84 <HAL_RCC_OscConfig+0x33c>
 8002e6a:	4b6d      	ldr	r3, [pc, #436]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6e:	4a6c      	ldr	r2, [pc, #432]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002e70:	f023 0301 	bic.w	r3, r3, #1
 8002e74:	6713      	str	r3, [r2, #112]	; 0x70
 8002e76:	4b6a      	ldr	r3, [pc, #424]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7a:	4a69      	ldr	r2, [pc, #420]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002e7c:	f023 0304 	bic.w	r3, r3, #4
 8002e80:	6713      	str	r3, [r2, #112]	; 0x70
 8002e82:	e01c      	b.n	8002ebe <HAL_RCC_OscConfig+0x376>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	2b05      	cmp	r3, #5
 8002e8a:	d10c      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x35e>
 8002e8c:	4b64      	ldr	r3, [pc, #400]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e90:	4a63      	ldr	r2, [pc, #396]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002e92:	f043 0304 	orr.w	r3, r3, #4
 8002e96:	6713      	str	r3, [r2, #112]	; 0x70
 8002e98:	4b61      	ldr	r3, [pc, #388]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9c:	4a60      	ldr	r2, [pc, #384]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea4:	e00b      	b.n	8002ebe <HAL_RCC_OscConfig+0x376>
 8002ea6:	4b5e      	ldr	r3, [pc, #376]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eaa:	4a5d      	ldr	r2, [pc, #372]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002eac:	f023 0301 	bic.w	r3, r3, #1
 8002eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb2:	4b5b      	ldr	r3, [pc, #364]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb6:	4a5a      	ldr	r2, [pc, #360]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002eb8:	f023 0304 	bic.w	r3, r3, #4
 8002ebc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d015      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec6:	f7fe fa0b 	bl	80012e0 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ecc:	e00a      	b.n	8002ee4 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ece:	f7fe fa07 	bl	80012e0 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e099      	b.n	8003018 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee4:	4b4e      	ldr	r3, [pc, #312]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0ee      	beq.n	8002ece <HAL_RCC_OscConfig+0x386>
 8002ef0:	e014      	b.n	8002f1c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef2:	f7fe f9f5 	bl	80012e0 <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef8:	e00a      	b.n	8002f10 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002efa:	f7fe f9f1 	bl	80012e0 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e083      	b.n	8003018 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f10:	4b43      	ldr	r3, [pc, #268]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1ee      	bne.n	8002efa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f1c:	7dfb      	ldrb	r3, [r7, #23]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d105      	bne.n	8002f2e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f22:	4b3f      	ldr	r3, [pc, #252]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	4a3e      	ldr	r2, [pc, #248]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d06f      	beq.n	8003016 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f36:	4b3a      	ldr	r3, [pc, #232]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d067      	beq.n	8003012 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d149      	bne.n	8002fde <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f4a:	4b35      	ldr	r3, [pc, #212]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a34      	ldr	r2, [pc, #208]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002f50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f56:	f7fe f9c3 	bl	80012e0 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f5e:	f7fe f9bf 	bl	80012e0 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e053      	b.n	8003018 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f70:	4b2b      	ldr	r3, [pc, #172]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1f0      	bne.n	8002f5e <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69da      	ldr	r2, [r3, #28]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	019b      	lsls	r3, r3, #6
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f92:	085b      	lsrs	r3, r3, #1
 8002f94:	3b01      	subs	r3, #1
 8002f96:	041b      	lsls	r3, r3, #16
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9e:	061b      	lsls	r3, r3, #24
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	4a1f      	ldr	r2, [pc, #124]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002fa4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002fa8:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002faa:	4b1d      	ldr	r3, [pc, #116]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a1c      	ldr	r2, [pc, #112]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002fb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb6:	f7fe f993 	bl	80012e0 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fbe:	f7fe f98f 	bl	80012e0 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e023      	b.n	8003018 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd0:	4b13      	ldr	r3, [pc, #76]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0f0      	beq.n	8002fbe <HAL_RCC_OscConfig+0x476>
 8002fdc:	e01b      	b.n	8003016 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fde:	4b10      	ldr	r3, [pc, #64]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a0f      	ldr	r2, [pc, #60]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8002fe4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fea:	f7fe f979 	bl	80012e0 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff2:	f7fe f975 	bl	80012e0 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e009      	b.n	8003018 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003004:	4b06      	ldr	r3, [pc, #24]	; (8003020 <HAL_RCC_OscConfig+0x4d8>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1f0      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x4aa>
 8003010:	e001      	b.n	8003016 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40023800 	.word	0x40023800
 8003024:	40007000 	.word	0x40007000

08003028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003032:	2300      	movs	r3, #0
 8003034:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e0ce      	b.n	80031de <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003040:	4b69      	ldr	r3, [pc, #420]	; (80031e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d910      	bls.n	8003070 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304e:	4b66      	ldr	r3, [pc, #408]	; (80031e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f023 020f 	bic.w	r2, r3, #15
 8003056:	4964      	ldr	r1, [pc, #400]	; (80031e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	4313      	orrs	r3, r2
 800305c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800305e:	4b62      	ldr	r3, [pc, #392]	; (80031e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d001      	beq.n	8003070 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e0b6      	b.n	80031de <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d020      	beq.n	80030be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	d005      	beq.n	8003094 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003088:	4b58      	ldr	r3, [pc, #352]	; (80031ec <HAL_RCC_ClockConfig+0x1c4>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	4a57      	ldr	r2, [pc, #348]	; (80031ec <HAL_RCC_ClockConfig+0x1c4>)
 800308e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003092:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0308 	and.w	r3, r3, #8
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030a0:	4b52      	ldr	r3, [pc, #328]	; (80031ec <HAL_RCC_ClockConfig+0x1c4>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	4a51      	ldr	r2, [pc, #324]	; (80031ec <HAL_RCC_ClockConfig+0x1c4>)
 80030a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ac:	4b4f      	ldr	r3, [pc, #316]	; (80031ec <HAL_RCC_ClockConfig+0x1c4>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	494c      	ldr	r1, [pc, #304]	; (80031ec <HAL_RCC_ClockConfig+0x1c4>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d040      	beq.n	800314c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d107      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d2:	4b46      	ldr	r3, [pc, #280]	; (80031ec <HAL_RCC_ClockConfig+0x1c4>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d115      	bne.n	800310a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e07d      	b.n	80031de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d107      	bne.n	80030fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ea:	4b40      	ldr	r3, [pc, #256]	; (80031ec <HAL_RCC_ClockConfig+0x1c4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d109      	bne.n	800310a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e071      	b.n	80031de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fa:	4b3c      	ldr	r3, [pc, #240]	; (80031ec <HAL_RCC_ClockConfig+0x1c4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e069      	b.n	80031de <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800310a:	4b38      	ldr	r3, [pc, #224]	; (80031ec <HAL_RCC_ClockConfig+0x1c4>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f023 0203 	bic.w	r2, r3, #3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	4935      	ldr	r1, [pc, #212]	; (80031ec <HAL_RCC_ClockConfig+0x1c4>)
 8003118:	4313      	orrs	r3, r2
 800311a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800311c:	f7fe f8e0 	bl	80012e0 <HAL_GetTick>
 8003120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003122:	e00a      	b.n	800313a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003124:	f7fe f8dc 	bl	80012e0 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003132:	4293      	cmp	r3, r2
 8003134:	d901      	bls.n	800313a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e051      	b.n	80031de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313a:	4b2c      	ldr	r3, [pc, #176]	; (80031ec <HAL_RCC_ClockConfig+0x1c4>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 020c 	and.w	r2, r3, #12
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	429a      	cmp	r2, r3
 800314a:	d1eb      	bne.n	8003124 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800314c:	4b26      	ldr	r3, [pc, #152]	; (80031e8 <HAL_RCC_ClockConfig+0x1c0>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 030f 	and.w	r3, r3, #15
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d210      	bcs.n	800317c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315a:	4b23      	ldr	r3, [pc, #140]	; (80031e8 <HAL_RCC_ClockConfig+0x1c0>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f023 020f 	bic.w	r2, r3, #15
 8003162:	4921      	ldr	r1, [pc, #132]	; (80031e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	4313      	orrs	r3, r2
 8003168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800316a:	4b1f      	ldr	r3, [pc, #124]	; (80031e8 <HAL_RCC_ClockConfig+0x1c0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d001      	beq.n	800317c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e030      	b.n	80031de <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d008      	beq.n	800319a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003188:	4b18      	ldr	r3, [pc, #96]	; (80031ec <HAL_RCC_ClockConfig+0x1c4>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	4915      	ldr	r1, [pc, #84]	; (80031ec <HAL_RCC_ClockConfig+0x1c4>)
 8003196:	4313      	orrs	r3, r2
 8003198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d009      	beq.n	80031ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031a6:	4b11      	ldr	r3, [pc, #68]	; (80031ec <HAL_RCC_ClockConfig+0x1c4>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	490d      	ldr	r1, [pc, #52]	; (80031ec <HAL_RCC_ClockConfig+0x1c4>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031ba:	f000 f81d 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 80031be:	4601      	mov	r1, r0
 80031c0:	4b0a      	ldr	r3, [pc, #40]	; (80031ec <HAL_RCC_ClockConfig+0x1c4>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	091b      	lsrs	r3, r3, #4
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	4a09      	ldr	r2, [pc, #36]	; (80031f0 <HAL_RCC_ClockConfig+0x1c8>)
 80031cc:	5cd3      	ldrb	r3, [r2, r3]
 80031ce:	fa21 f303 	lsr.w	r3, r1, r3
 80031d2:	4a08      	ldr	r2, [pc, #32]	; (80031f4 <HAL_RCC_ClockConfig+0x1cc>)
 80031d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80031d6:	2000      	movs	r0, #0
 80031d8:	f7fe f83e 	bl	8001258 <HAL_InitTick>

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40023c00 	.word	0x40023c00
 80031ec:	40023800 	.word	0x40023800
 80031f0:	08006140 	.word	0x08006140
 80031f4:	20000014 	.word	0x20000014

080031f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80031fe:	2300      	movs	r3, #0
 8003200:	607b      	str	r3, [r7, #4]
 8003202:	2300      	movs	r3, #0
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	2300      	movs	r3, #0
 8003208:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800320e:	4b50      	ldr	r3, [pc, #320]	; (8003350 <HAL_RCC_GetSysClockFreq+0x158>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 030c 	and.w	r3, r3, #12
 8003216:	2b04      	cmp	r3, #4
 8003218:	d007      	beq.n	800322a <HAL_RCC_GetSysClockFreq+0x32>
 800321a:	2b08      	cmp	r3, #8
 800321c:	d008      	beq.n	8003230 <HAL_RCC_GetSysClockFreq+0x38>
 800321e:	2b00      	cmp	r3, #0
 8003220:	f040 808d 	bne.w	800333e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003224:	4b4b      	ldr	r3, [pc, #300]	; (8003354 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003226:	60bb      	str	r3, [r7, #8]
       break;
 8003228:	e08c      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800322a:	4b4b      	ldr	r3, [pc, #300]	; (8003358 <HAL_RCC_GetSysClockFreq+0x160>)
 800322c:	60bb      	str	r3, [r7, #8]
      break;
 800322e:	e089      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003230:	4b47      	ldr	r3, [pc, #284]	; (8003350 <HAL_RCC_GetSysClockFreq+0x158>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003238:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800323a:	4b45      	ldr	r3, [pc, #276]	; (8003350 <HAL_RCC_GetSysClockFreq+0x158>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d023      	beq.n	800328e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003246:	4b42      	ldr	r3, [pc, #264]	; (8003350 <HAL_RCC_GetSysClockFreq+0x158>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	099b      	lsrs	r3, r3, #6
 800324c:	f04f 0400 	mov.w	r4, #0
 8003250:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003254:	f04f 0200 	mov.w	r2, #0
 8003258:	ea03 0501 	and.w	r5, r3, r1
 800325c:	ea04 0602 	and.w	r6, r4, r2
 8003260:	4a3d      	ldr	r2, [pc, #244]	; (8003358 <HAL_RCC_GetSysClockFreq+0x160>)
 8003262:	fb02 f106 	mul.w	r1, r2, r6
 8003266:	2200      	movs	r2, #0
 8003268:	fb02 f205 	mul.w	r2, r2, r5
 800326c:	440a      	add	r2, r1
 800326e:	493a      	ldr	r1, [pc, #232]	; (8003358 <HAL_RCC_GetSysClockFreq+0x160>)
 8003270:	fba5 0101 	umull	r0, r1, r5, r1
 8003274:	1853      	adds	r3, r2, r1
 8003276:	4619      	mov	r1, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f04f 0400 	mov.w	r4, #0
 800327e:	461a      	mov	r2, r3
 8003280:	4623      	mov	r3, r4
 8003282:	f7fc ffc1 	bl	8000208 <__aeabi_uldivmod>
 8003286:	4603      	mov	r3, r0
 8003288:	460c      	mov	r4, r1
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	e049      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800328e:	4b30      	ldr	r3, [pc, #192]	; (8003350 <HAL_RCC_GetSysClockFreq+0x158>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	099b      	lsrs	r3, r3, #6
 8003294:	f04f 0400 	mov.w	r4, #0
 8003298:	f240 11ff 	movw	r1, #511	; 0x1ff
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	ea03 0501 	and.w	r5, r3, r1
 80032a4:	ea04 0602 	and.w	r6, r4, r2
 80032a8:	4629      	mov	r1, r5
 80032aa:	4632      	mov	r2, r6
 80032ac:	f04f 0300 	mov.w	r3, #0
 80032b0:	f04f 0400 	mov.w	r4, #0
 80032b4:	0154      	lsls	r4, r2, #5
 80032b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032ba:	014b      	lsls	r3, r1, #5
 80032bc:	4619      	mov	r1, r3
 80032be:	4622      	mov	r2, r4
 80032c0:	1b49      	subs	r1, r1, r5
 80032c2:	eb62 0206 	sbc.w	r2, r2, r6
 80032c6:	f04f 0300 	mov.w	r3, #0
 80032ca:	f04f 0400 	mov.w	r4, #0
 80032ce:	0194      	lsls	r4, r2, #6
 80032d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80032d4:	018b      	lsls	r3, r1, #6
 80032d6:	1a5b      	subs	r3, r3, r1
 80032d8:	eb64 0402 	sbc.w	r4, r4, r2
 80032dc:	f04f 0100 	mov.w	r1, #0
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	00e2      	lsls	r2, r4, #3
 80032e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80032ea:	00d9      	lsls	r1, r3, #3
 80032ec:	460b      	mov	r3, r1
 80032ee:	4614      	mov	r4, r2
 80032f0:	195b      	adds	r3, r3, r5
 80032f2:	eb44 0406 	adc.w	r4, r4, r6
 80032f6:	f04f 0100 	mov.w	r1, #0
 80032fa:	f04f 0200 	mov.w	r2, #0
 80032fe:	02a2      	lsls	r2, r4, #10
 8003300:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003304:	0299      	lsls	r1, r3, #10
 8003306:	460b      	mov	r3, r1
 8003308:	4614      	mov	r4, r2
 800330a:	4618      	mov	r0, r3
 800330c:	4621      	mov	r1, r4
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f04f 0400 	mov.w	r4, #0
 8003314:	461a      	mov	r2, r3
 8003316:	4623      	mov	r3, r4
 8003318:	f7fc ff76 	bl	8000208 <__aeabi_uldivmod>
 800331c:	4603      	mov	r3, r0
 800331e:	460c      	mov	r4, r1
 8003320:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003322:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <HAL_RCC_GetSysClockFreq+0x158>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	0c1b      	lsrs	r3, r3, #16
 8003328:	f003 0303 	and.w	r3, r3, #3
 800332c:	3301      	adds	r3, #1
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	fbb2 f3f3 	udiv	r3, r2, r3
 800333a:	60bb      	str	r3, [r7, #8]
      break;
 800333c:	e002      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800333e:	4b05      	ldr	r3, [pc, #20]	; (8003354 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003340:	60bb      	str	r3, [r7, #8]
      break;
 8003342:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003344:	68bb      	ldr	r3, [r7, #8]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800334e:	bf00      	nop
 8003350:	40023800 	.word	0x40023800
 8003354:	00f42400 	.word	0x00f42400
 8003358:	017d7840 	.word	0x017d7840

0800335c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003374:	2300      	movs	r3, #0
 8003376:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	d012      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003384:	4b69      	ldr	r3, [pc, #420]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	4a68      	ldr	r2, [pc, #416]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800338a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800338e:	6093      	str	r3, [r2, #8]
 8003390:	4b66      	ldr	r3, [pc, #408]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003398:	4964      	ldr	r1, [pc, #400]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800339a:	4313      	orrs	r3, r2
 800339c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80033a6:	2301      	movs	r3, #1
 80033a8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d017      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033b6:	4b5d      	ldr	r3, [pc, #372]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c4:	4959      	ldr	r1, [pc, #356]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033d4:	d101      	bne.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80033d6:	2301      	movs	r3, #1
 80033d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80033e2:	2301      	movs	r3, #1
 80033e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d017      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033f2:	4b4e      	ldr	r3, [pc, #312]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	494a      	ldr	r1, [pc, #296]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003402:	4313      	orrs	r3, r2
 8003404:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003410:	d101      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003412:	2301      	movs	r3, #1
 8003414:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800341e:	2301      	movs	r3, #1
 8003420:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800342e:	2301      	movs	r3, #1
 8003430:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0320 	and.w	r3, r3, #32
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 808b 	beq.w	8003556 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003440:	4b3a      	ldr	r3, [pc, #232]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	4a39      	ldr	r2, [pc, #228]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800344a:	6413      	str	r3, [r2, #64]	; 0x40
 800344c:	4b37      	ldr	r3, [pc, #220]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003458:	4b35      	ldr	r3, [pc, #212]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a34      	ldr	r2, [pc, #208]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800345e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003462:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003464:	f7fd ff3c 	bl	80012e0 <HAL_GetTick>
 8003468:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800346a:	e008      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346c:	f7fd ff38 	bl	80012e0 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b64      	cmp	r3, #100	; 0x64
 8003478:	d901      	bls.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e355      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800347e:	4b2c      	ldr	r3, [pc, #176]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0f0      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800348a:	4b28      	ldr	r3, [pc, #160]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003492:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d035      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d02e      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034a8:	4b20      	ldr	r3, [pc, #128]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034b2:	4b1e      	ldr	r3, [pc, #120]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b6:	4a1d      	ldr	r2, [pc, #116]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034bc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034be:	4b1b      	ldr	r3, [pc, #108]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c2:	4a1a      	ldr	r2, [pc, #104]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80034ca:	4a18      	ldr	r2, [pc, #96]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80034d0:	4b16      	ldr	r3, [pc, #88]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d114      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034dc:	f7fd ff00 	bl	80012e0 <HAL_GetTick>
 80034e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e2:	e00a      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e4:	f7fd fefc 	bl	80012e0 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d901      	bls.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e317      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fa:	4b0c      	ldr	r3, [pc, #48]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0ee      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003512:	d111      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003514:	4b05      	ldr	r3, [pc, #20]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003520:	4b04      	ldr	r3, [pc, #16]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003522:	400b      	ands	r3, r1
 8003524:	4901      	ldr	r1, [pc, #4]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003526:	4313      	orrs	r3, r2
 8003528:	608b      	str	r3, [r1, #8]
 800352a:	e00b      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800352c:	40023800 	.word	0x40023800
 8003530:	40007000 	.word	0x40007000
 8003534:	0ffffcff 	.word	0x0ffffcff
 8003538:	4bb0      	ldr	r3, [pc, #704]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	4aaf      	ldr	r2, [pc, #700]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800353e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003542:	6093      	str	r3, [r2, #8]
 8003544:	4bad      	ldr	r3, [pc, #692]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003546:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003550:	49aa      	ldr	r1, [pc, #680]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003552:	4313      	orrs	r3, r2
 8003554:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0310 	and.w	r3, r3, #16
 800355e:	2b00      	cmp	r3, #0
 8003560:	d010      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003562:	4ba6      	ldr	r3, [pc, #664]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003568:	4aa4      	ldr	r2, [pc, #656]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800356a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800356e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003572:	4ba2      	ldr	r3, [pc, #648]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003574:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357c:	499f      	ldr	r1, [pc, #636]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003590:	4b9a      	ldr	r3, [pc, #616]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003596:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800359e:	4997      	ldr	r1, [pc, #604]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035b2:	4b92      	ldr	r3, [pc, #584]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035c0:	498e      	ldr	r1, [pc, #568]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035d4:	4b89      	ldr	r3, [pc, #548]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035e2:	4986      	ldr	r1, [pc, #536]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035f6:	4b81      	ldr	r3, [pc, #516]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003604:	497d      	ldr	r1, [pc, #500]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003606:	4313      	orrs	r3, r2
 8003608:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00a      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003618:	4b78      	ldr	r3, [pc, #480]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800361a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361e:	f023 0203 	bic.w	r2, r3, #3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003626:	4975      	ldr	r1, [pc, #468]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800363a:	4b70      	ldr	r3, [pc, #448]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800363c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003640:	f023 020c 	bic.w	r2, r3, #12
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003648:	496c      	ldr	r1, [pc, #432]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800365c:	4b67      	ldr	r3, [pc, #412]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003662:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800366a:	4964      	ldr	r1, [pc, #400]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800366c:	4313      	orrs	r3, r2
 800366e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800367e:	4b5f      	ldr	r3, [pc, #380]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003684:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800368c:	495b      	ldr	r1, [pc, #364]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00a      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036a0:	4b56      	ldr	r3, [pc, #344]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ae:	4953      	ldr	r1, [pc, #332]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80036c2:	4b4e      	ldr	r3, [pc, #312]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d0:	494a      	ldr	r1, [pc, #296]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00a      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80036e4:	4b45      	ldr	r3, [pc, #276]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f2:	4942      	ldr	r1, [pc, #264]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003706:	4b3d      	ldr	r3, [pc, #244]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003714:	4939      	ldr	r1, [pc, #228]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003716:	4313      	orrs	r3, r2
 8003718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00a      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003728:	4b34      	ldr	r3, [pc, #208]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800372a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003736:	4931      	ldr	r1, [pc, #196]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d011      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800374a:	4b2c      	ldr	r3, [pc, #176]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800374c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003750:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003758:	4928      	ldr	r1, [pc, #160]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800375a:	4313      	orrs	r3, r2
 800375c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003764:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003768:	d101      	bne.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800376a:	2301      	movs	r3, #1
 800376c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800377a:	2301      	movs	r3, #1
 800377c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00a      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800378a:	4b1c      	ldr	r3, [pc, #112]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800378c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003790:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003798:	4918      	ldr	r1, [pc, #96]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00b      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037ac:	4b13      	ldr	r3, [pc, #76]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037bc:	490f      	ldr	r1, [pc, #60]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d005      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037d2:	f040 80d8 	bne.w	8003986 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80037d6:	4b09      	ldr	r3, [pc, #36]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a08      	ldr	r2, [pc, #32]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80037dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037e2:	f7fd fd7d 	bl	80012e0 <HAL_GetTick>
 80037e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037e8:	e00a      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037ea:	f7fd fd79 	bl	80012e0 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b64      	cmp	r3, #100	; 0x64
 80037f6:	d903      	bls.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e196      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80037fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003800:	4b6c      	ldr	r3, [pc, #432]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1ee      	bne.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d021      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800381c:	2b00      	cmp	r3, #0
 800381e:	d11d      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003820:	4b64      	ldr	r3, [pc, #400]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003822:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003826:	0c1b      	lsrs	r3, r3, #16
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800382e:	4b61      	ldr	r3, [pc, #388]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003830:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003834:	0e1b      	lsrs	r3, r3, #24
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	019a      	lsls	r2, r3, #6
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	041b      	lsls	r3, r3, #16
 8003846:	431a      	orrs	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	061b      	lsls	r3, r3, #24
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	071b      	lsls	r3, r3, #28
 8003854:	4957      	ldr	r1, [pc, #348]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d004      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800386c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003870:	d00a      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800387a:	2b00      	cmp	r3, #0
 800387c:	d02e      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003886:	d129      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003888:	4b4a      	ldr	r3, [pc, #296]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800388a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800388e:	0c1b      	lsrs	r3, r3, #16
 8003890:	f003 0303 	and.w	r3, r3, #3
 8003894:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003896:	4b47      	ldr	r3, [pc, #284]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003898:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800389c:	0f1b      	lsrs	r3, r3, #28
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	019a      	lsls	r2, r3, #6
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	041b      	lsls	r3, r3, #16
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	061b      	lsls	r3, r3, #24
 80038b6:	431a      	orrs	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	071b      	lsls	r3, r3, #28
 80038bc:	493d      	ldr	r1, [pc, #244]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80038c4:	4b3b      	ldr	r3, [pc, #236]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80038c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038ca:	f023 021f 	bic.w	r2, r3, #31
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	3b01      	subs	r3, #1
 80038d4:	4937      	ldr	r1, [pc, #220]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d01d      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80038e8:	4b32      	ldr	r3, [pc, #200]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80038ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038ee:	0e1b      	lsrs	r3, r3, #24
 80038f0:	f003 030f 	and.w	r3, r3, #15
 80038f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038f6:	4b2f      	ldr	r3, [pc, #188]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80038f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038fc:	0f1b      	lsrs	r3, r3, #28
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	019a      	lsls	r2, r3, #6
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	041b      	lsls	r3, r3, #16
 8003910:	431a      	orrs	r2, r3
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	061b      	lsls	r3, r3, #24
 8003916:	431a      	orrs	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	071b      	lsls	r3, r3, #28
 800391c:	4925      	ldr	r1, [pc, #148]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d011      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	019a      	lsls	r2, r3, #6
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	041b      	lsls	r3, r3, #16
 800393c:	431a      	orrs	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	061b      	lsls	r3, r3, #24
 8003944:	431a      	orrs	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	071b      	lsls	r3, r3, #28
 800394c:	4919      	ldr	r1, [pc, #100]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800394e:	4313      	orrs	r3, r2
 8003950:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003954:	4b17      	ldr	r3, [pc, #92]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a16      	ldr	r2, [pc, #88]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800395a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800395e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003960:	f7fd fcbe 	bl	80012e0 <HAL_GetTick>
 8003964:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003966:	e008      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003968:	f7fd fcba 	bl	80012e0 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b64      	cmp	r3, #100	; 0x64
 8003974:	d901      	bls.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e0d7      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800397a:	4b0e      	ldr	r3, [pc, #56]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	2b01      	cmp	r3, #1
 800398a:	f040 80cd 	bne.w	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800398e:	4b09      	ldr	r3, [pc, #36]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a08      	ldr	r2, [pc, #32]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003998:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800399a:	f7fd fca1 	bl	80012e0 <HAL_GetTick>
 800399e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039a0:	e00a      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039a2:	f7fd fc9d 	bl	80012e0 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b64      	cmp	r3, #100	; 0x64
 80039ae:	d903      	bls.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e0ba      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80039b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039b8:	4b5e      	ldr	r3, [pc, #376]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039c4:	d0ed      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d02e      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d12a      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80039ee:	4b51      	ldr	r3, [pc, #324]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f4:	0c1b      	lsrs	r3, r3, #16
 80039f6:	f003 0303 	and.w	r3, r3, #3
 80039fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80039fc:	4b4d      	ldr	r3, [pc, #308]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a02:	0f1b      	lsrs	r3, r3, #28
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	019a      	lsls	r2, r3, #6
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	041b      	lsls	r3, r3, #16
 8003a14:	431a      	orrs	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	061b      	lsls	r3, r3, #24
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	071b      	lsls	r3, r3, #28
 8003a22:	4944      	ldr	r1, [pc, #272]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a2a:	4b42      	ldr	r3, [pc, #264]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a30:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	021b      	lsls	r3, r3, #8
 8003a3c:	493d      	ldr	r1, [pc, #244]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d022      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a58:	d11d      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a5a:	4b36      	ldr	r3, [pc, #216]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a60:	0e1b      	lsrs	r3, r3, #24
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a68:	4b32      	ldr	r3, [pc, #200]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6e:	0f1b      	lsrs	r3, r3, #28
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	019a      	lsls	r2, r3, #6
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	041b      	lsls	r3, r3, #16
 8003a82:	431a      	orrs	r2, r3
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	061b      	lsls	r3, r3, #24
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	071b      	lsls	r3, r3, #28
 8003a8e:	4929      	ldr	r1, [pc, #164]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d028      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003aa2:	4b24      	ldr	r3, [pc, #144]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa8:	0e1b      	lsrs	r3, r3, #24
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ab0:	4b20      	ldr	r3, [pc, #128]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab6:	0c1b      	lsrs	r3, r3, #16
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	019a      	lsls	r2, r3, #6
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	041b      	lsls	r3, r3, #16
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	061b      	lsls	r3, r3, #24
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	071b      	lsls	r3, r3, #28
 8003ad6:	4917      	ldr	r1, [pc, #92]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ade:	4b15      	ldr	r3, [pc, #84]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ae4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	4911      	ldr	r1, [pc, #68]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003af4:	4b0f      	ldr	r3, [pc, #60]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a0e      	ldr	r2, [pc, #56]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003afe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b00:	f7fd fbee 	bl	80012e0 <HAL_GetTick>
 8003b04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b08:	f7fd fbea 	bl	80012e0 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b64      	cmp	r3, #100	; 0x64
 8003b14:	d901      	bls.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e007      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b1a:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b26:	d1ef      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3720      	adds	r7, #32
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40023800 	.word	0x40023800

08003b38 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e025      	b.n	8003b98 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d106      	bne.n	8003b66 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 fc8d 	bl	8004480 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2202      	movs	r2, #2
 8003b6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	3304      	adds	r3, #4
 8003b76:	4619      	mov	r1, r3
 8003b78:	4610      	mov	r0, r2
 8003b7a:	f000 f85d 	bl	8003c38 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6818      	ldr	r0, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	461a      	mov	r2, r3
 8003b88:	6839      	ldr	r1, [r7, #0]
 8003b8a:	f000 f8c7 	bl	8003d1c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d101      	bne.n	8003bbc <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e018      	b.n	8003bee <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	68b9      	ldr	r1, [r7, #8]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 f925 	bl	8003e1c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d104      	bne.n	8003be4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2205      	movs	r2, #5
 8003bde:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8003be2:	e003      	b.n	8003bec <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b082      	sub	sp, #8
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d101      	bne.n	8003c10 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e00e      	b.n	8003c2e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6839      	ldr	r1, [r7, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 f91d 	bl	8003e5e <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8003c42:	2300      	movs	r3, #0
 8003c44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8003c46:	2300      	movs	r3, #0
 8003c48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d027      	beq.n	8003ca2 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	4b2f      	ldr	r3, [pc, #188]	; (8003d18 <FMC_SDRAM_Init+0xe0>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003c68:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8003c6e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8003c74:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8003c7a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8003c80:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8003c86:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8003c8c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8003c92:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	e032      	b.n	8003d08 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003cae:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003cb8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8003cbe:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	4b12      	ldr	r3, [pc, #72]	; (8003d18 <FMC_SDRAM_Init+0xe0>)
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003cdc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8003ce2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8003ce8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8003cee:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8003cf4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	ffff8000 	.word	0xffff8000

08003d1c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b087      	sub	sp, #28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d02e      	beq.n	8003d94 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003d42:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003d52:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8003d5c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8003d66:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8003d70:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8003d7a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	3b01      	subs	r3, #1
 8003d82:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003d84:	4313      	orrs	r3, r2
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	609a      	str	r2, [r3, #8]
 8003d92:	e039      	b.n	8003e08 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4b1e      	ldr	r3, [pc, #120]	; (8003e18 <FMC_SDRAM_Timing_Init+0xfc>)
 8003d9e:	4013      	ands	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8003db2:	4313      	orrs	r3, r2
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003dc6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003dd6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8003de0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8003dea:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	3b01      	subs	r3, #1
 8003df2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003df4:	4313      	orrs	r3, r2
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	371c      	adds	r7, #28
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	ff0f0fff 	.word	0xff0f0fff

08003e1c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8003e34:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8003e3e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8003e46:	4313      	orrs	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	371c      	adds	r7, #28
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	695a      	ldr	r2, [r3, #20]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	431a      	orrs	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <SCB_EnableICache>:
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003e88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003e8c:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003e90:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <SCB_EnableICache+0x3c>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003e98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003e9c:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003ea0:	4b07      	ldr	r3, [pc, #28]	; (8003ec0 <SCB_EnableICache+0x3c>)
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	4a06      	ldr	r2, [pc, #24]	; (8003ec0 <SCB_EnableICache+0x3c>)
 8003ea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eaa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003eac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003eb0:	f3bf 8f6f 	isb	sy
}
 8003eb4:	bf00      	nop
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	e000ed00 	.word	0xe000ed00

08003ec4 <SCB_EnableDCache>:
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8003eca:	4b1d      	ldr	r3, [pc, #116]	; (8003f40 <SCB_EnableDCache+0x7c>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003ed2:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8003ed6:	4b1a      	ldr	r3, [pc, #104]	; (8003f40 <SCB_EnableDCache+0x7c>)
 8003ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003edc:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	0b5b      	lsrs	r3, r3, #13
 8003ee2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003ee6:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	08db      	lsrs	r3, r3, #3
 8003eec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ef0:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	015a      	lsls	r2, r3, #5
 8003ef6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003efa:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003f00:	490f      	ldr	r1, [pc, #60]	; (8003f40 <SCB_EnableDCache+0x7c>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	1e5a      	subs	r2, r3, #1
 8003f0c:	60ba      	str	r2, [r7, #8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1ef      	bne.n	8003ef2 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	1e5a      	subs	r2, r3, #1
 8003f16:	60fa      	str	r2, [r7, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1e5      	bne.n	8003ee8 <SCB_EnableDCache+0x24>
 8003f1c:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003f20:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <SCB_EnableDCache+0x7c>)
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	4a06      	ldr	r2, [pc, #24]	; (8003f40 <SCB_EnableDCache+0x7c>)
 8003f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f2a:	6153      	str	r3, [r2, #20]
 8003f2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003f30:	f3bf 8f6f 	isb	sy
}
 8003f34:	bf00      	nop
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	e000ed00 	.word	0xe000ed00

08003f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8003f48:	f7ff ff9c 	bl	8003e84 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8003f4c:	f7ff ffba 	bl	8003ec4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f50:	f7fd f974 	bl	800123c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f54:	f000 f82a 	bl	8003fac <SystemClock_Config>
  MX_USART6_UART_Init();
  MX_FATFS_Init();
  MX_USB_HOST_Init();*/

  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8003f58:	f7fc fad6 	bl	8000508 <BSP_LCD_Init>

  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FB_START_ADDRESS);
 8003f5c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8003f60:	2001      	movs	r0, #1
 8003f62:	f7fc fb69 	bl	8000638 <BSP_LCD_LayerDefaultInit>

  /* Set LCD Foreground Layer  */
    BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8003f66:	2001      	movs	r0, #1
 8003f68:	f7fc fbc6 	bl	80006f8 <BSP_LCD_SelectLayer>

  /* Enable LCD Display */
  BSP_LCD_DisplayOn();
 8003f6c:	f7fc fd98 	bl	8000aa0 <BSP_LCD_DisplayOn>

  /* Clear the LCD */
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8003f70:	f04f 30ff 	mov.w	r0, #4294967295
 8003f74:	f7fc fbe8 	bl	8000748 <BSP_LCD_SetBackColor>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8003f78:	f04f 30ff 	mov.w	r0, #4294967295
 8003f7c:	f7fc fc18 	bl	80007b0 <BSP_LCD_Clear>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8003f80:	4807      	ldr	r0, [pc, #28]	; (8003fa0 <main+0x5c>)
 8003f82:	f7fc fbc9 	bl	8000718 <BSP_LCD_SetTextColor>

  /* Display LCD messages */
  BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"KiCAD Team Bitch !", CENTER_MODE);
 8003f86:	2301      	movs	r3, #1
 8003f88:	4a06      	ldr	r2, [pc, #24]	; (8003fa4 <main+0x60>)
 8003f8a:	210a      	movs	r1, #10
 8003f8c:	2000      	movs	r0, #0
 8003f8e:	f7fc fc7b 	bl	8000888 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 35, (uint8_t *)"Drivers examples", CENTER_MODE);
 8003f92:	2301      	movs	r3, #1
 8003f94:	4a04      	ldr	r2, [pc, #16]	; (8003fa8 <main+0x64>)
 8003f96:	2123      	movs	r1, #35	; 0x23
 8003f98:	2000      	movs	r0, #0
 8003f9a:	f7fc fc75 	bl	8000888 <BSP_LCD_DisplayStringAt>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003f9e:	e7fe      	b.n	8003f9e <main+0x5a>
 8003fa0:	ff000080 	.word	0xff000080
 8003fa4:	08004658 	.word	0x08004658
 8003fa8:	0800466c 	.word	0x0800466c

08003fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b0b4      	sub	sp, #208	; 0xd0
 8003fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003fb2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003fb6:	2230      	movs	r2, #48	; 0x30
 8003fb8:	2100      	movs	r1, #0
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fb38 	bl	8004630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003fc0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	605a      	str	r2, [r3, #4]
 8003fca:	609a      	str	r2, [r3, #8]
 8003fcc:	60da      	str	r2, [r3, #12]
 8003fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003fd0:	f107 0308 	add.w	r3, r7, #8
 8003fd4:	2284      	movs	r2, #132	; 0x84
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 fb29 	bl	8004630 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8003fde:	f7fe fd53 	bl	8002a88 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fe2:	4b4f      	ldr	r3, [pc, #316]	; (8004120 <SystemClock_Config+0x174>)
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	4a4e      	ldr	r2, [pc, #312]	; (8004120 <SystemClock_Config+0x174>)
 8003fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fec:	6413      	str	r3, [r2, #64]	; 0x40
 8003fee:	4b4c      	ldr	r3, [pc, #304]	; (8004120 <SystemClock_Config+0x174>)
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff6:	607b      	str	r3, [r7, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ffa:	4b4a      	ldr	r3, [pc, #296]	; (8004124 <SystemClock_Config+0x178>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a49      	ldr	r2, [pc, #292]	; (8004124 <SystemClock_Config+0x178>)
 8004000:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	4b47      	ldr	r3, [pc, #284]	; (8004124 <SystemClock_Config+0x178>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004012:	2309      	movs	r3, #9
 8004014:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004018:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800401c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004020:	2301      	movs	r3, #1
 8004022:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004026:	2302      	movs	r3, #2
 8004028:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800402c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004030:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8004034:	2319      	movs	r3, #25
 8004036:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800403a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800403e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004042:	2302      	movs	r3, #2
 8004044:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8004048:	2308      	movs	r3, #8
 800404a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800404e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004052:	4618      	mov	r0, r3
 8004054:	f7fe fd78 	bl	8002b48 <HAL_RCC_OscConfig>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800405e:	f000 f865 	bl	800412c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004062:	f7fe fd21 	bl	8002aa8 <HAL_PWREx_EnableOverDrive>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800406c:	f000 f85e 	bl	800412c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004070:	230f      	movs	r3, #15
 8004072:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004076:	2302      	movs	r3, #2
 8004078:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800407c:	2300      	movs	r3, #0
 800407e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004082:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004086:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800408a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800408e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8004092:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004096:	2106      	movs	r1, #6
 8004098:	4618      	mov	r0, r3
 800409a:	f7fe ffc5 	bl	8003028 <HAL_RCC_ClockConfig>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80040a4:	f000 f842 	bl	800412c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 80040a8:	4b1f      	ldr	r3, [pc, #124]	; (8004128 <SystemClock_Config+0x17c>)
 80040aa:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80040ac:	2364      	movs	r3, #100	; 0x64
 80040ae:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80040b0:	2302      	movs	r3, #2
 80040b2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80040b4:	2302      	movs	r3, #2
 80040b6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80040b8:	2302      	movs	r3, #2
 80040ba:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80040bc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80040c0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80040c2:	2305      	movs	r3, #5
 80040c4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80040c6:	2302      	movs	r3, #2
 80040c8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80040ca:	2303      	movs	r3, #3
 80040cc:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80040ce:	2301      	movs	r3, #1
 80040d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80040d2:	2301      	movs	r3, #1
 80040d4:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80040d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040da:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80040dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040e0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80040e2:	2300      	movs	r3, #0
 80040e4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80040e6:	2300      	movs	r3, #0
 80040e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80040ea:	2300      	movs	r3, #0
 80040ec:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80040ee:	2300      	movs	r3, #0
 80040f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80040f2:	2300      	movs	r3, #0
 80040f4:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80040f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80040fe:	2300      	movs	r3, #0
 8004100:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004104:	f107 0308 	add.w	r3, r7, #8
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff f927 	bl	800335c <HAL_RCCEx_PeriphCLKConfig>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 8004114:	f000 f80a 	bl	800412c <Error_Handler>
  }
}
 8004118:	bf00      	nop
 800411a:	37d0      	adds	r7, #208	; 0xd0
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40023800 	.word	0x40023800
 8004124:	40007000 	.word	0x40007000
 8004128:	01b14868 	.word	0x01b14868

0800412c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004130:	bf00      	nop
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
	...

0800413c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004142:	4b0f      	ldr	r3, [pc, #60]	; (8004180 <HAL_MspInit+0x44>)
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	4a0e      	ldr	r2, [pc, #56]	; (8004180 <HAL_MspInit+0x44>)
 8004148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800414c:	6413      	str	r3, [r2, #64]	; 0x40
 800414e:	4b0c      	ldr	r3, [pc, #48]	; (8004180 <HAL_MspInit+0x44>)
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004156:	607b      	str	r3, [r7, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800415a:	4b09      	ldr	r3, [pc, #36]	; (8004180 <HAL_MspInit+0x44>)
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	4a08      	ldr	r2, [pc, #32]	; (8004180 <HAL_MspInit+0x44>)
 8004160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004164:	6453      	str	r3, [r2, #68]	; 0x44
 8004166:	4b06      	ldr	r3, [pc, #24]	; (8004180 <HAL_MspInit+0x44>)
 8004168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	40023800 	.word	0x40023800

08004184 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a0d      	ldr	r2, [pc, #52]	; (80041c8 <HAL_DMA2D_MspInit+0x44>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d113      	bne.n	80041be <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004196:	4b0d      	ldr	r3, [pc, #52]	; (80041cc <HAL_DMA2D_MspInit+0x48>)
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	4a0c      	ldr	r2, [pc, #48]	; (80041cc <HAL_DMA2D_MspInit+0x48>)
 800419c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041a0:	6313      	str	r3, [r2, #48]	; 0x30
 80041a2:	4b0a      	ldr	r3, [pc, #40]	; (80041cc <HAL_DMA2D_MspInit+0x48>)
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80041ae:	2200      	movs	r2, #0
 80041b0:	2100      	movs	r1, #0
 80041b2:	205a      	movs	r0, #90	; 0x5a
 80041b4:	f7fd f99d 	bl	80014f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80041b8:	205a      	movs	r0, #90	; 0x5a
 80041ba:	f7fd f9b6 	bl	800152a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80041be:	bf00      	nop
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	4002b000 	.word	0x4002b000
 80041cc:	40023800 	.word	0x40023800

080041d0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b08e      	sub	sp, #56	; 0x38
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041dc:	2200      	movs	r2, #0
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	605a      	str	r2, [r3, #4]
 80041e2:	609a      	str	r2, [r3, #8]
 80041e4:	60da      	str	r2, [r3, #12]
 80041e6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a55      	ldr	r2, [pc, #340]	; (8004344 <HAL_LTDC_MspInit+0x174>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	f040 80a3 	bne.w	800433a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80041f4:	4b54      	ldr	r3, [pc, #336]	; (8004348 <HAL_LTDC_MspInit+0x178>)
 80041f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f8:	4a53      	ldr	r2, [pc, #332]	; (8004348 <HAL_LTDC_MspInit+0x178>)
 80041fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041fe:	6453      	str	r3, [r2, #68]	; 0x44
 8004200:	4b51      	ldr	r3, [pc, #324]	; (8004348 <HAL_LTDC_MspInit+0x178>)
 8004202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004204:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004208:	623b      	str	r3, [r7, #32]
 800420a:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800420c:	4b4e      	ldr	r3, [pc, #312]	; (8004348 <HAL_LTDC_MspInit+0x178>)
 800420e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004210:	4a4d      	ldr	r2, [pc, #308]	; (8004348 <HAL_LTDC_MspInit+0x178>)
 8004212:	f043 0310 	orr.w	r3, r3, #16
 8004216:	6313      	str	r3, [r2, #48]	; 0x30
 8004218:	4b4b      	ldr	r3, [pc, #300]	; (8004348 <HAL_LTDC_MspInit+0x178>)
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	f003 0310 	and.w	r3, r3, #16
 8004220:	61fb      	str	r3, [r7, #28]
 8004222:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004224:	4b48      	ldr	r3, [pc, #288]	; (8004348 <HAL_LTDC_MspInit+0x178>)
 8004226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004228:	4a47      	ldr	r2, [pc, #284]	; (8004348 <HAL_LTDC_MspInit+0x178>)
 800422a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800422e:	6313      	str	r3, [r2, #48]	; 0x30
 8004230:	4b45      	ldr	r3, [pc, #276]	; (8004348 <HAL_LTDC_MspInit+0x178>)
 8004232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004234:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004238:	61bb      	str	r3, [r7, #24]
 800423a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800423c:	4b42      	ldr	r3, [pc, #264]	; (8004348 <HAL_LTDC_MspInit+0x178>)
 800423e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004240:	4a41      	ldr	r2, [pc, #260]	; (8004348 <HAL_LTDC_MspInit+0x178>)
 8004242:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004246:	6313      	str	r3, [r2, #48]	; 0x30
 8004248:	4b3f      	ldr	r3, [pc, #252]	; (8004348 <HAL_LTDC_MspInit+0x178>)
 800424a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004250:	617b      	str	r3, [r7, #20]
 8004252:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004254:	4b3c      	ldr	r3, [pc, #240]	; (8004348 <HAL_LTDC_MspInit+0x178>)
 8004256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004258:	4a3b      	ldr	r2, [pc, #236]	; (8004348 <HAL_LTDC_MspInit+0x178>)
 800425a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800425e:	6313      	str	r3, [r2, #48]	; 0x30
 8004260:	4b39      	ldr	r3, [pc, #228]	; (8004348 <HAL_LTDC_MspInit+0x178>)
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004268:	613b      	str	r3, [r7, #16]
 800426a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800426c:	4b36      	ldr	r3, [pc, #216]	; (8004348 <HAL_LTDC_MspInit+0x178>)
 800426e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004270:	4a35      	ldr	r2, [pc, #212]	; (8004348 <HAL_LTDC_MspInit+0x178>)
 8004272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004276:	6313      	str	r3, [r2, #48]	; 0x30
 8004278:	4b33      	ldr	r3, [pc, #204]	; (8004348 <HAL_LTDC_MspInit+0x178>)
 800427a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8004284:	2310      	movs	r3, #16
 8004286:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004288:	2302      	movs	r3, #2
 800428a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800428c:	2300      	movs	r3, #0
 800428e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004290:	2300      	movs	r3, #0
 8004292:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004294:	230e      	movs	r3, #14
 8004296:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8004298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800429c:	4619      	mov	r1, r3
 800429e:	482b      	ldr	r0, [pc, #172]	; (800434c <HAL_LTDC_MspInit+0x17c>)
 80042a0:	f7fd feb6 	bl	8002010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 80042a4:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042aa:	2302      	movs	r3, #2
 80042ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ae:	2300      	movs	r3, #0
 80042b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042b2:	2300      	movs	r3, #0
 80042b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80042b6:	230e      	movs	r3, #14
 80042b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80042ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042be:	4619      	mov	r1, r3
 80042c0:	4823      	ldr	r0, [pc, #140]	; (8004350 <HAL_LTDC_MspInit+0x180>)
 80042c2:	f7fd fea5 	bl	8002010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 80042c6:	23f7      	movs	r3, #247	; 0xf7
 80042c8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ca:	2302      	movs	r3, #2
 80042cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ce:	2300      	movs	r3, #0
 80042d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042d2:	2300      	movs	r3, #0
 80042d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80042d6:	230e      	movs	r3, #14
 80042d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80042da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042de:	4619      	mov	r1, r3
 80042e0:	481c      	ldr	r0, [pc, #112]	; (8004354 <HAL_LTDC_MspInit+0x184>)
 80042e2:	f7fd fe95 	bl	8002010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80042e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ec:	2302      	movs	r3, #2
 80042ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f0:	2300      	movs	r3, #0
 80042f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042f4:	2300      	movs	r3, #0
 80042f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80042f8:	2309      	movs	r3, #9
 80042fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80042fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004300:	4619      	mov	r1, r3
 8004302:	4815      	ldr	r0, [pc, #84]	; (8004358 <HAL_LTDC_MspInit+0x188>)
 8004304:	f7fd fe84 	bl	8002010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8004308:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800430c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800430e:	2302      	movs	r3, #2
 8004310:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004312:	2300      	movs	r3, #0
 8004314:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004316:	2300      	movs	r3, #0
 8004318:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800431a:	230e      	movs	r3, #14
 800431c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800431e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004322:	4619      	mov	r1, r3
 8004324:	480d      	ldr	r0, [pc, #52]	; (800435c <HAL_LTDC_MspInit+0x18c>)
 8004326:	f7fd fe73 	bl	8002010 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800432a:	2200      	movs	r2, #0
 800432c:	2100      	movs	r1, #0
 800432e:	2058      	movs	r0, #88	; 0x58
 8004330:	f7fd f8df 	bl	80014f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004334:	2058      	movs	r0, #88	; 0x58
 8004336:	f7fd f8f8 	bl	800152a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800433a:	bf00      	nop
 800433c:	3738      	adds	r7, #56	; 0x38
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	40016800 	.word	0x40016800
 8004348:	40023800 	.word	0x40023800
 800434c:	40021000 	.word	0x40021000
 8004350:	40022400 	.word	0x40022400
 8004354:	40022800 	.word	0x40022800
 8004358:	40021800 	.word	0x40021800
 800435c:	40022000 	.word	0x40022000

08004360 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004366:	1d3b      	adds	r3, r7, #4
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	605a      	str	r2, [r3, #4]
 800436e:	609a      	str	r2, [r3, #8]
 8004370:	60da      	str	r2, [r3, #12]
 8004372:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004374:	4b3a      	ldr	r3, [pc, #232]	; (8004460 <HAL_FMC_MspInit+0x100>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d16d      	bne.n	8004458 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800437c:	4b38      	ldr	r3, [pc, #224]	; (8004460 <HAL_FMC_MspInit+0x100>)
 800437e:	2201      	movs	r2, #1
 8004380:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004382:	4b38      	ldr	r3, [pc, #224]	; (8004464 <HAL_FMC_MspInit+0x104>)
 8004384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004386:	4a37      	ldr	r2, [pc, #220]	; (8004464 <HAL_FMC_MspInit+0x104>)
 8004388:	f043 0301 	orr.w	r3, r3, #1
 800438c:	6393      	str	r3, [r2, #56]	; 0x38
 800438e:	4b35      	ldr	r3, [pc, #212]	; (8004464 <HAL_FMC_MspInit+0x104>)
 8004390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	603b      	str	r3, [r7, #0]
 8004398:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800439a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800439e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a0:	2302      	movs	r3, #2
 80043a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a4:	2300      	movs	r3, #0
 80043a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043a8:	2303      	movs	r3, #3
 80043aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80043ac:	230c      	movs	r3, #12
 80043ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80043b0:	1d3b      	adds	r3, r7, #4
 80043b2:	4619      	mov	r1, r3
 80043b4:	482c      	ldr	r0, [pc, #176]	; (8004468 <HAL_FMC_MspInit+0x108>)
 80043b6:	f7fd fe2b 	bl	8002010 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 80043ba:	f248 1333 	movw	r3, #33075	; 0x8133
 80043be:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c0:	2302      	movs	r3, #2
 80043c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c4:	2300      	movs	r3, #0
 80043c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043c8:	2303      	movs	r3, #3
 80043ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80043cc:	230c      	movs	r3, #12
 80043ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80043d0:	1d3b      	adds	r3, r7, #4
 80043d2:	4619      	mov	r1, r3
 80043d4:	4825      	ldr	r0, [pc, #148]	; (800446c <HAL_FMC_MspInit+0x10c>)
 80043d6:	f7fd fe1b 	bl	8002010 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 80043da:	f24c 7303 	movw	r3, #50947	; 0xc703
 80043de:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e0:	2302      	movs	r3, #2
 80043e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e4:	2300      	movs	r3, #0
 80043e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043e8:	2303      	movs	r3, #3
 80043ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80043ec:	230c      	movs	r3, #12
 80043ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043f0:	1d3b      	adds	r3, r7, #4
 80043f2:	4619      	mov	r1, r3
 80043f4:	481e      	ldr	r0, [pc, #120]	; (8004470 <HAL_FMC_MspInit+0x110>)
 80043f6:	f7fd fe0b 	bl	8002010 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 80043fa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80043fe:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004400:	2302      	movs	r3, #2
 8004402:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004404:	2300      	movs	r3, #0
 8004406:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004408:	2303      	movs	r3, #3
 800440a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800440c:	230c      	movs	r3, #12
 800440e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004410:	1d3b      	adds	r3, r7, #4
 8004412:	4619      	mov	r1, r3
 8004414:	4817      	ldr	r0, [pc, #92]	; (8004474 <HAL_FMC_MspInit+0x114>)
 8004416:	f7fd fdfb 	bl	8002010 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800441a:	2328      	movs	r3, #40	; 0x28
 800441c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800441e:	2302      	movs	r3, #2
 8004420:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004422:	2300      	movs	r3, #0
 8004424:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004426:	2303      	movs	r3, #3
 8004428:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800442a:	230c      	movs	r3, #12
 800442c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800442e:	1d3b      	adds	r3, r7, #4
 8004430:	4619      	mov	r1, r3
 8004432:	4811      	ldr	r0, [pc, #68]	; (8004478 <HAL_FMC_MspInit+0x118>)
 8004434:	f7fd fdec 	bl	8002010 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8004438:	2308      	movs	r3, #8
 800443a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800443c:	2302      	movs	r3, #2
 800443e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004440:	2300      	movs	r3, #0
 8004442:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004444:	2303      	movs	r3, #3
 8004446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004448:	230c      	movs	r3, #12
 800444a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800444c:	1d3b      	adds	r3, r7, #4
 800444e:	4619      	mov	r1, r3
 8004450:	480a      	ldr	r0, [pc, #40]	; (800447c <HAL_FMC_MspInit+0x11c>)
 8004452:	f7fd fddd 	bl	8002010 <HAL_GPIO_Init>
 8004456:	e000      	b.n	800445a <HAL_FMC_MspInit+0xfa>
    return;
 8004458:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800445a:	3718      	adds	r7, #24
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	200001a0 	.word	0x200001a0
 8004464:	40023800 	.word	0x40023800
 8004468:	40021000 	.word	0x40021000
 800446c:	40021800 	.word	0x40021800
 8004470:	40020c00 	.word	0x40020c00
 8004474:	40021400 	.word	0x40021400
 8004478:	40021c00 	.word	0x40021c00
 800447c:	40020800 	.word	0x40020800

08004480 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004488:	f7ff ff6a 	bl	8004360 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800448c:	bf00      	nop
 800448e:	3708      	adds	r7, #8
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <SysTick_Handler>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SysTick_Handler(void) {
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8004498:	f7fc ff0e 	bl	80012b8 <HAL_IncTick>
}
 800449c:	bf00      	nop
 800449e:	bd80      	pop	{r7, pc}

080044a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80044a4:	bf00      	nop
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044ae:	b480      	push	{r7}
 80044b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044b2:	e7fe      	b.n	80044b2 <HardFault_Handler+0x4>

080044b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044b8:	e7fe      	b.n	80044b8 <MemManage_Handler+0x4>

080044ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044ba:	b480      	push	{r7}
 80044bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044be:	e7fe      	b.n	80044be <BusFault_Handler+0x4>

080044c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044c4:	e7fe      	b.n	80044c4 <UsageFault_Handler+0x4>

080044c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044c6:	b480      	push	{r7}
 80044c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044ca:	bf00      	nop
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044d8:	bf00      	nop
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044e2:	b480      	push	{r7}
 80044e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044e6:	bf00      	nop
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  /* USER CODE END OTG_FS_IRQn 0 */
 // HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80044f4:	bf00      	nop
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
	...

08004500 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004504:	4802      	ldr	r0, [pc, #8]	; (8004510 <LTDC_IRQHandler+0x10>)
 8004506:	f7fe f817 	bl	8002538 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800450a:	bf00      	nop
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	2000063c 	.word	0x2000063c

08004514 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004518:	4802      	ldr	r0, [pc, #8]	; (8004524 <DMA2D_IRQHandler+0x10>)
 800451a:	f7fd fb3b 	bl	8001b94 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800451e:	bf00      	nop
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	200008dc 	.word	0x200008dc

08004528 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800452c:	4b15      	ldr	r3, [pc, #84]	; (8004584 <SystemInit+0x5c>)
 800452e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004532:	4a14      	ldr	r2, [pc, #80]	; (8004584 <SystemInit+0x5c>)
 8004534:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004538:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800453c:	4b12      	ldr	r3, [pc, #72]	; (8004588 <SystemInit+0x60>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a11      	ldr	r2, [pc, #68]	; (8004588 <SystemInit+0x60>)
 8004542:	f043 0301 	orr.w	r3, r3, #1
 8004546:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004548:	4b0f      	ldr	r3, [pc, #60]	; (8004588 <SystemInit+0x60>)
 800454a:	2200      	movs	r2, #0
 800454c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800454e:	4b0e      	ldr	r3, [pc, #56]	; (8004588 <SystemInit+0x60>)
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	490d      	ldr	r1, [pc, #52]	; (8004588 <SystemInit+0x60>)
 8004554:	4b0d      	ldr	r3, [pc, #52]	; (800458c <SystemInit+0x64>)
 8004556:	4013      	ands	r3, r2
 8004558:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800455a:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <SystemInit+0x60>)
 800455c:	4a0c      	ldr	r2, [pc, #48]	; (8004590 <SystemInit+0x68>)
 800455e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004560:	4b09      	ldr	r3, [pc, #36]	; (8004588 <SystemInit+0x60>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a08      	ldr	r2, [pc, #32]	; (8004588 <SystemInit+0x60>)
 8004566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800456a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800456c:	4b06      	ldr	r3, [pc, #24]	; (8004588 <SystemInit+0x60>)
 800456e:	2200      	movs	r2, #0
 8004570:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004572:	4b04      	ldr	r3, [pc, #16]	; (8004584 <SystemInit+0x5c>)
 8004574:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004578:	609a      	str	r2, [r3, #8]
#endif
}
 800457a:	bf00      	nop
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	e000ed00 	.word	0xe000ed00
 8004588:	40023800 	.word	0x40023800
 800458c:	fef6ffff 	.word	0xfef6ffff
 8004590:	24003010 	.word	0x24003010

08004594 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004594:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004598:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800459a:	e003      	b.n	80045a4 <LoopCopyDataInit>

0800459c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800459c:	4b0c      	ldr	r3, [pc, #48]	; (80045d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800459e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80045a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80045a2:	3104      	adds	r1, #4

080045a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80045a4:	480b      	ldr	r0, [pc, #44]	; (80045d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80045a6:	4b0c      	ldr	r3, [pc, #48]	; (80045d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80045a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80045aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80045ac:	d3f6      	bcc.n	800459c <CopyDataInit>
  ldr  r2, =_sbss
 80045ae:	4a0b      	ldr	r2, [pc, #44]	; (80045dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80045b0:	e002      	b.n	80045b8 <LoopFillZerobss>

080045b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80045b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80045b4:	f842 3b04 	str.w	r3, [r2], #4

080045b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80045b8:	4b09      	ldr	r3, [pc, #36]	; (80045e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80045ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80045bc:	d3f9      	bcc.n	80045b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80045be:	f7ff ffb3 	bl	8004528 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045c2:	f000 f811 	bl	80045e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045c6:	f7ff fcbd 	bl	8003f44 <main>
  bx  lr    
 80045ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80045cc:	2004ffff 	.word	0x2004ffff
  ldr  r3, =_sidata
 80045d0:	08006160 	.word	0x08006160
  ldr  r0, =_sdata
 80045d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80045d8:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 80045dc:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 80045e0:	20000a64 	.word	0x20000a64

080045e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045e4:	e7fe      	b.n	80045e4 <ADC_IRQHandler>
	...

080045e8 <__libc_init_array>:
 80045e8:	b570      	push	{r4, r5, r6, lr}
 80045ea:	4e0d      	ldr	r6, [pc, #52]	; (8004620 <__libc_init_array+0x38>)
 80045ec:	4c0d      	ldr	r4, [pc, #52]	; (8004624 <__libc_init_array+0x3c>)
 80045ee:	1ba4      	subs	r4, r4, r6
 80045f0:	10a4      	asrs	r4, r4, #2
 80045f2:	2500      	movs	r5, #0
 80045f4:	42a5      	cmp	r5, r4
 80045f6:	d109      	bne.n	800460c <__libc_init_array+0x24>
 80045f8:	4e0b      	ldr	r6, [pc, #44]	; (8004628 <__libc_init_array+0x40>)
 80045fa:	4c0c      	ldr	r4, [pc, #48]	; (800462c <__libc_init_array+0x44>)
 80045fc:	f000 f820 	bl	8004640 <_init>
 8004600:	1ba4      	subs	r4, r4, r6
 8004602:	10a4      	asrs	r4, r4, #2
 8004604:	2500      	movs	r5, #0
 8004606:	42a5      	cmp	r5, r4
 8004608:	d105      	bne.n	8004616 <__libc_init_array+0x2e>
 800460a:	bd70      	pop	{r4, r5, r6, pc}
 800460c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004610:	4798      	blx	r3
 8004612:	3501      	adds	r5, #1
 8004614:	e7ee      	b.n	80045f4 <__libc_init_array+0xc>
 8004616:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800461a:	4798      	blx	r3
 800461c:	3501      	adds	r5, #1
 800461e:	e7f2      	b.n	8004606 <__libc_init_array+0x1e>
 8004620:	08006158 	.word	0x08006158
 8004624:	08006158 	.word	0x08006158
 8004628:	08006158 	.word	0x08006158
 800462c:	0800615c 	.word	0x0800615c

08004630 <memset>:
 8004630:	4402      	add	r2, r0
 8004632:	4603      	mov	r3, r0
 8004634:	4293      	cmp	r3, r2
 8004636:	d100      	bne.n	800463a <memset+0xa>
 8004638:	4770      	bx	lr
 800463a:	f803 1b01 	strb.w	r1, [r3], #1
 800463e:	e7f9      	b.n	8004634 <memset+0x4>

08004640 <_init>:
 8004640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004642:	bf00      	nop
 8004644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004646:	bc08      	pop	{r3}
 8004648:	469e      	mov	lr, r3
 800464a:	4770      	bx	lr

0800464c <_fini>:
 800464c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464e:	bf00      	nop
 8004650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004652:	bc08      	pop	{r3}
 8004654:	469e      	mov	lr, r3
 8004656:	4770      	bx	lr
