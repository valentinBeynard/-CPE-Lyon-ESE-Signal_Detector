
Signal_Detector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7e4  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000029f0  0800b9ac  0800b9ac  0001b9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e39c  0800e39c  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800e39c  0800e39c  0001e39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e3a4  0800e3a4  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3a4  0800e3a4  0001e3a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e3a8  0800e3a8  0001e3a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800e3ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020f0  200000ac  0800e458  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000219c  0800e458  0002219c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025b3f  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004617  00000000  00000000  00045c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002208  00000000  00000000  0004a238  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001fe0  00000000  00000000  0004c440  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b500  00000000  00000000  0004e420  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b738  00000000  00000000  00079920  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010e14b  00000000  00000000  00095058  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a31a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000091c8  00000000  00000000  001a3220  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000ac 	.word	0x200000ac
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800b994 	.word	0x0800b994

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000b0 	.word	0x200000b0
 8000204:	0800b994 	.word	0x0800b994

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000512:	20c8      	movs	r0, #200	; 0xc8
 8000514:	f000 fc32 	bl	8000d7c <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000518:	f000 fa7a 	bl	8000a10 <ft5336_I2C_InitializeIfRequired>
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr

0800053a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	b084      	sub	sp, #16
 800053e:	af00      	add	r7, sp, #0
 8000540:	4603      	mov	r3, r0
 8000542:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800054c:	2300      	movs	r3, #0
 800054e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000550:	f000 fa5e 	bl	8000a10 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000554:	2300      	movs	r3, #0
 8000556:	73fb      	strb	r3, [r7, #15]
 8000558:	e010      	b.n	800057c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800055a:	88fb      	ldrh	r3, [r7, #6]
 800055c:	b2db      	uxtb	r3, r3
 800055e:	21a8      	movs	r1, #168	; 0xa8
 8000560:	4618      	mov	r0, r3
 8000562:	f000 fbed 	bl	8000d40 <TS_IO_Read>
 8000566:	4603      	mov	r3, r0
 8000568:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800056a:	7b7b      	ldrb	r3, [r7, #13]
 800056c:	b2db      	uxtb	r3, r3
 800056e:	2b51      	cmp	r3, #81	; 0x51
 8000570:	d101      	bne.n	8000576 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000572:	2301      	movs	r3, #1
 8000574:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000576:	7bfb      	ldrb	r3, [r7, #15]
 8000578:	3301      	adds	r3, #1
 800057a:	73fb      	strb	r3, [r7, #15]
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	2b02      	cmp	r3, #2
 8000580:	d802      	bhi.n	8000588 <ft5336_ReadID+0x4e>
 8000582:	7bbb      	ldrb	r3, [r7, #14]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d0e8      	beq.n	800055a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000588:	7b7b      	ldrb	r3, [r7, #13]
 800058a:	b2db      	uxtb	r3, r3
 800058c:	b29b      	uxth	r3, r3
}
 800058e:	4618      	mov	r0, r3
 8000590:	3710      	adds	r7, #16
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	b082      	sub	sp, #8
 800059a:	af00      	add	r7, sp, #0
 800059c:	4603      	mov	r3, r0
 800059e:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80005a0:	88fb      	ldrh	r3, [r7, #6]
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fa44 	bl	8000a30 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80005a8:	88fb      	ldrh	r3, [r7, #6]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 f932 	bl	8000814 <ft5336_TS_DisableIT>
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	2102      	movs	r1, #2
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 fbb7 	bl	8000d40 <TS_IO_Read>
 80005d2:	4603      	mov	r3, r0
 80005d4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	f003 030f 	and.w	r3, r3, #15
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	2b05      	cmp	r3, #5
 80005e8:	d901      	bls.n	80005ee <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4b05      	ldr	r3, [pc, #20]	; (8000608 <ft5336_TS_DetectTouch+0x50>)
 80005f4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80005f6:	4b04      	ldr	r3, [pc, #16]	; (8000608 <ft5336_TS_DetectTouch+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	b2db      	uxtb	r3, r3
}
 8000600:	4618      	mov	r0, r3
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	200000c8 	.word	0x200000c8

0800060c <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
 8000618:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800062e:	4b6d      	ldr	r3, [pc, #436]	; (80007e4 <ft5336_TS_GetXY+0x1d8>)
 8000630:	789a      	ldrb	r2, [r3, #2]
 8000632:	4b6c      	ldr	r3, [pc, #432]	; (80007e4 <ft5336_TS_GetXY+0x1d8>)
 8000634:	785b      	ldrb	r3, [r3, #1]
 8000636:	429a      	cmp	r2, r3
 8000638:	f080 80cf 	bcs.w	80007da <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 800063c:	4b69      	ldr	r3, [pc, #420]	; (80007e4 <ft5336_TS_GetXY+0x1d8>)
 800063e:	789b      	ldrb	r3, [r3, #2]
 8000640:	2b09      	cmp	r3, #9
 8000642:	d871      	bhi.n	8000728 <ft5336_TS_GetXY+0x11c>
 8000644:	a201      	add	r2, pc, #4	; (adr r2, 800064c <ft5336_TS_GetXY+0x40>)
 8000646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064a:	bf00      	nop
 800064c:	08000675 	.word	0x08000675
 8000650:	08000687 	.word	0x08000687
 8000654:	08000699 	.word	0x08000699
 8000658:	080006ab 	.word	0x080006ab
 800065c:	080006bd 	.word	0x080006bd
 8000660:	080006cf 	.word	0x080006cf
 8000664:	080006e1 	.word	0x080006e1
 8000668:	080006f3 	.word	0x080006f3
 800066c:	08000705 	.word	0x08000705
 8000670:	08000717 	.word	0x08000717
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000674:	2304      	movs	r3, #4
 8000676:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000678:	2303      	movs	r3, #3
 800067a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 800067c:	2306      	movs	r3, #6
 800067e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000680:	2305      	movs	r3, #5
 8000682:	753b      	strb	r3, [r7, #20]
      break;
 8000684:	e051      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000686:	230a      	movs	r3, #10
 8000688:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800068a:	2309      	movs	r3, #9
 800068c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800068e:	230c      	movs	r3, #12
 8000690:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8000692:	230b      	movs	r3, #11
 8000694:	753b      	strb	r3, [r7, #20]
      break;
 8000696:	e048      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000698:	2310      	movs	r3, #16
 800069a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 800069c:	230f      	movs	r3, #15
 800069e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80006a0:	2312      	movs	r3, #18
 80006a2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80006a4:	2311      	movs	r3, #17
 80006a6:	753b      	strb	r3, [r7, #20]
      break;
 80006a8:	e03f      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80006aa:	2316      	movs	r3, #22
 80006ac:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80006ae:	2315      	movs	r3, #21
 80006b0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80006b2:	2318      	movs	r3, #24
 80006b4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80006b6:	2317      	movs	r3, #23
 80006b8:	753b      	strb	r3, [r7, #20]
      break;
 80006ba:	e036      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80006bc:	231c      	movs	r3, #28
 80006be:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80006c0:	231b      	movs	r3, #27
 80006c2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80006c4:	231e      	movs	r3, #30
 80006c6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80006c8:	231d      	movs	r3, #29
 80006ca:	753b      	strb	r3, [r7, #20]
      break;
 80006cc:	e02d      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80006ce:	2322      	movs	r3, #34	; 0x22
 80006d0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80006d2:	2321      	movs	r3, #33	; 0x21
 80006d4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80006d6:	2324      	movs	r3, #36	; 0x24
 80006d8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80006da:	2323      	movs	r3, #35	; 0x23
 80006dc:	753b      	strb	r3, [r7, #20]
      break;
 80006de:	e024      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80006e0:	2328      	movs	r3, #40	; 0x28
 80006e2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80006e4:	2327      	movs	r3, #39	; 0x27
 80006e6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80006e8:	232a      	movs	r3, #42	; 0x2a
 80006ea:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80006ec:	2329      	movs	r3, #41	; 0x29
 80006ee:	753b      	strb	r3, [r7, #20]
      break;
 80006f0:	e01b      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80006f2:	232e      	movs	r3, #46	; 0x2e
 80006f4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80006f6:	232d      	movs	r3, #45	; 0x2d
 80006f8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80006fa:	2330      	movs	r3, #48	; 0x30
 80006fc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80006fe:	232f      	movs	r3, #47	; 0x2f
 8000700:	753b      	strb	r3, [r7, #20]
      break;
 8000702:	e012      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000704:	2334      	movs	r3, #52	; 0x34
 8000706:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000708:	2333      	movs	r3, #51	; 0x33
 800070a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 800070c:	2336      	movs	r3, #54	; 0x36
 800070e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000710:	2335      	movs	r3, #53	; 0x35
 8000712:	753b      	strb	r3, [r7, #20]
      break;
 8000714:	e009      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000716:	233a      	movs	r3, #58	; 0x3a
 8000718:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800071a:	2339      	movs	r3, #57	; 0x39
 800071c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 800071e:	233c      	movs	r3, #60	; 0x3c
 8000720:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000722:	233b      	movs	r3, #59	; 0x3b
 8000724:	753b      	strb	r3, [r7, #20]
      break;
 8000726:	e000      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000728:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800072a:	89fb      	ldrh	r3, [r7, #14]
 800072c:	b2db      	uxtb	r3, r3
 800072e:	7dfa      	ldrb	r2, [r7, #23]
 8000730:	4611      	mov	r1, r2
 8000732:	4618      	mov	r0, r3
 8000734:	f000 fb04 	bl	8000d40 <TS_IO_Read>
 8000738:	4603      	mov	r3, r0
 800073a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800073c:	7cfb      	ldrb	r3, [r7, #19]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	b29a      	uxth	r2, r3
 8000742:	4b29      	ldr	r3, [pc, #164]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 8000744:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000746:	89fb      	ldrh	r3, [r7, #14]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	7dba      	ldrb	r2, [r7, #22]
 800074c:	4611      	mov	r1, r2
 800074e:	4618      	mov	r0, r3
 8000750:	f000 faf6 	bl	8000d40 <TS_IO_Read>
 8000754:	4603      	mov	r3, r0
 8000756:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000758:	7cfb      	ldrb	r3, [r7, #19]
 800075a:	b2db      	uxtb	r3, r3
 800075c:	021b      	lsls	r3, r3, #8
 800075e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000762:	b21a      	sxth	r2, r3
 8000764:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	b21b      	sxth	r3, r3
 800076a:	4313      	orrs	r3, r2
 800076c:	b21b      	sxth	r3, r3
 800076e:	b29a      	uxth	r2, r3
 8000770:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 8000772:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000774:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 8000776:	881a      	ldrh	r2, [r3, #0]
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800077c:	89fb      	ldrh	r3, [r7, #14]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	7d7a      	ldrb	r2, [r7, #21]
 8000782:	4611      	mov	r1, r2
 8000784:	4618      	mov	r0, r3
 8000786:	f000 fadb 	bl	8000d40 <TS_IO_Read>
 800078a:	4603      	mov	r3, r0
 800078c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800078e:	7cfb      	ldrb	r3, [r7, #19]
 8000790:	b2db      	uxtb	r3, r3
 8000792:	b29a      	uxth	r2, r3
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 8000796:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000798:	89fb      	ldrh	r3, [r7, #14]
 800079a:	b2db      	uxtb	r3, r3
 800079c:	7d3a      	ldrb	r2, [r7, #20]
 800079e:	4611      	mov	r1, r2
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 facd 	bl	8000d40 <TS_IO_Read>
 80007a6:	4603      	mov	r3, r0
 80007a8:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80007aa:	7cfb      	ldrb	r3, [r7, #19]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	021b      	lsls	r3, r3, #8
 80007b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80007b4:	b21a      	sxth	r2, r3
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b21b      	sxth	r3, r3
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 80007c4:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 80007c8:	881a      	ldrh	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80007ce:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <ft5336_TS_GetXY+0x1d8>)
 80007d0:	789b      	ldrb	r3, [r3, #2]
 80007d2:	3301      	adds	r3, #1
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <ft5336_TS_GetXY+0x1d8>)
 80007d8:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200000c8 	.word	0x200000c8
 80007e8:	200000cc 	.word	0x200000cc

080007ec <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80007fa:	2301      	movs	r3, #1
 80007fc:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80007fe:	88fb      	ldrh	r3, [r7, #6]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	7bfa      	ldrb	r2, [r7, #15]
 8000804:	21a4      	movs	r1, #164	; 0xa4
 8000806:	4618      	mov	r0, r3
 8000808:	f000 fa80 	bl	8000d0c <TS_IO_Write>
}
 800080c:	bf00      	nop
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000822:	2300      	movs	r3, #0
 8000824:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	7bfa      	ldrb	r2, [r7, #15]
 800082c:	21a4      	movs	r1, #164	; 0xa4
 800082e:	4618      	mov	r0, r3
 8000830:	f000 fa6c 	bl	8000d0c <TS_IO_Write>
}
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000846:	2300      	movs	r3, #0
}
 8000848:	4618      	mov	r0, r3
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b084      	sub	sp, #16
 800086e:	af00      	add	r7, sp, #0
 8000870:	4603      	mov	r3, r0
 8000872:	6039      	str	r1, [r7, #0]
 8000874:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800087a:	88fb      	ldrh	r3, [r7, #6]
 800087c:	b2db      	uxtb	r3, r3
 800087e:	2101      	movs	r1, #1
 8000880:	4618      	mov	r0, r3
 8000882:	f000 fa5d 	bl	8000d40 <TS_IO_Read>
 8000886:	4603      	mov	r3, r0
 8000888:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	461a      	mov	r2, r3
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	601a      	str	r2, [r3, #0]
}
 8000894:	bf00      	nop
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60b9      	str	r1, [r7, #8]
 80008a4:	607a      	str	r2, [r7, #4]
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	4603      	mov	r3, r0
 80008aa:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80008bc:	4b4d      	ldr	r3, [pc, #308]	; (80009f4 <ft5336_TS_GetTouchInfo+0x158>)
 80008be:	785b      	ldrb	r3, [r3, #1]
 80008c0:	461a      	mov	r2, r3
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	4293      	cmp	r3, r2
 80008c6:	f080 8090 	bcs.w	80009ea <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	2b09      	cmp	r3, #9
 80008ce:	d85d      	bhi.n	800098c <ft5336_TS_GetTouchInfo+0xf0>
 80008d0:	a201      	add	r2, pc, #4	; (adr r2, 80008d8 <ft5336_TS_GetTouchInfo+0x3c>)
 80008d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d6:	bf00      	nop
 80008d8:	08000901 	.word	0x08000901
 80008dc:	0800090f 	.word	0x0800090f
 80008e0:	0800091d 	.word	0x0800091d
 80008e4:	0800092b 	.word	0x0800092b
 80008e8:	08000939 	.word	0x08000939
 80008ec:	08000947 	.word	0x08000947
 80008f0:	08000955 	.word	0x08000955
 80008f4:	08000963 	.word	0x08000963
 80008f8:	08000971 	.word	0x08000971
 80008fc:	0800097f 	.word	0x0800097f
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8000900:	2303      	movs	r3, #3
 8000902:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8000904:	2307      	movs	r3, #7
 8000906:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8000908:	2308      	movs	r3, #8
 800090a:	757b      	strb	r3, [r7, #21]
      break;
 800090c:	e03f      	b.n	800098e <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 800090e:	2309      	movs	r3, #9
 8000910:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8000912:	230d      	movs	r3, #13
 8000914:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8000916:	230e      	movs	r3, #14
 8000918:	757b      	strb	r3, [r7, #21]
      break;
 800091a:	e038      	b.n	800098e <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 800091c:	230f      	movs	r3, #15
 800091e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8000920:	2313      	movs	r3, #19
 8000922:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8000924:	2314      	movs	r3, #20
 8000926:	757b      	strb	r3, [r7, #21]
      break;
 8000928:	e031      	b.n	800098e <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 800092a:	2315      	movs	r3, #21
 800092c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 800092e:	2319      	movs	r3, #25
 8000930:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8000932:	231a      	movs	r3, #26
 8000934:	757b      	strb	r3, [r7, #21]
      break;
 8000936:	e02a      	b.n	800098e <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8000938:	231b      	movs	r3, #27
 800093a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 800093c:	231f      	movs	r3, #31
 800093e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8000940:	2320      	movs	r3, #32
 8000942:	757b      	strb	r3, [r7, #21]
      break;
 8000944:	e023      	b.n	800098e <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8000946:	2321      	movs	r3, #33	; 0x21
 8000948:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 800094a:	2325      	movs	r3, #37	; 0x25
 800094c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 800094e:	2326      	movs	r3, #38	; 0x26
 8000950:	757b      	strb	r3, [r7, #21]
      break;
 8000952:	e01c      	b.n	800098e <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8000954:	2327      	movs	r3, #39	; 0x27
 8000956:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8000958:	232b      	movs	r3, #43	; 0x2b
 800095a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 800095c:	232c      	movs	r3, #44	; 0x2c
 800095e:	757b      	strb	r3, [r7, #21]
      break;
 8000960:	e015      	b.n	800098e <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000962:	232d      	movs	r3, #45	; 0x2d
 8000964:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8000966:	2331      	movs	r3, #49	; 0x31
 8000968:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 800096a:	2332      	movs	r3, #50	; 0x32
 800096c:	757b      	strb	r3, [r7, #21]
      break;
 800096e:	e00e      	b.n	800098e <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8000970:	2333      	movs	r3, #51	; 0x33
 8000972:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8000974:	2337      	movs	r3, #55	; 0x37
 8000976:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8000978:	2338      	movs	r3, #56	; 0x38
 800097a:	757b      	strb	r3, [r7, #21]
      break;
 800097c:	e007      	b.n	800098e <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 800097e:	2339      	movs	r3, #57	; 0x39
 8000980:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8000982:	233d      	movs	r3, #61	; 0x3d
 8000984:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8000986:	233e      	movs	r3, #62	; 0x3e
 8000988:	757b      	strb	r3, [r7, #21]
      break;
 800098a:	e000      	b.n	800098e <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 800098c:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800098e:	89fb      	ldrh	r3, [r7, #14]
 8000990:	b2db      	uxtb	r3, r3
 8000992:	7dfa      	ldrb	r2, [r7, #23]
 8000994:	4611      	mov	r1, r2
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f9d2 	bl	8000d40 <TS_IO_Read>
 800099c:	4603      	mov	r3, r0
 800099e:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80009a0:	7d3b      	ldrb	r3, [r7, #20]
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	119b      	asrs	r3, r3, #6
 80009a6:	f003 0203 	and.w	r2, r3, #3
 80009aa:	6a3b      	ldr	r3, [r7, #32]
 80009ac:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 80009ae:	89fb      	ldrh	r3, [r7, #14]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	7dba      	ldrb	r2, [r7, #22]
 80009b4:	4611      	mov	r1, r2
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 f9c2 	bl	8000d40 <TS_IO_Read>
 80009bc:	4603      	mov	r3, r0
 80009be:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80009c0:	7d3b      	ldrb	r3, [r7, #20]
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	461a      	mov	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80009ca:	89fb      	ldrh	r3, [r7, #14]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	7d7a      	ldrb	r2, [r7, #21]
 80009d0:	4611      	mov	r1, r2
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f9b4 	bl	8000d40 <TS_IO_Read>
 80009d8:	4603      	mov	r3, r0
 80009da:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 80009dc:	7d3b      	ldrb	r3, [r7, #20]
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	111b      	asrs	r3, r3, #4
 80009e2:	f003 0204 	and.w	r2, r3, #4
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 80009ea:	bf00      	nop
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200000c8 	.word	0x200000c8

080009f8 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <ft5336_Get_I2C_InitializedStatus+0x14>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	200000c8 	.word	0x200000c8

08000a10 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000a14:	f7ff fff0 	bl	80009f8 <ft5336_Get_I2C_InitializedStatus>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d104      	bne.n	8000a28 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000a1e:	f000 f96b 	bl	8000cf8 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000a22:	4b02      	ldr	r3, [pc, #8]	; (8000a2c <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	701a      	strb	r2, [r3, #0]
  }
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	200000c8 	.word	0x200000c8

08000a30 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000a3e:	68fb      	ldr	r3, [r7, #12]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	; 0x30
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a51      	ldr	r2, [pc, #324]	; (8000b9c <I2Cx_MspInit+0x150>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d14d      	bne.n	8000af8 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000a5c:	4b50      	ldr	r3, [pc, #320]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a60:	4a4f      	ldr	r2, [pc, #316]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a66:	6313      	str	r3, [r2, #48]	; 0x30
 8000a68:	4b4d      	ldr	r3, [pc, #308]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a70:	61bb      	str	r3, [r7, #24]
 8000a72:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8000a74:	2380      	movs	r3, #128	; 0x80
 8000a76:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000a78:	2312      	movs	r3, #18
 8000a7a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000a80:	2302      	movs	r3, #2
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8000a84:	2304      	movs	r3, #4
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4845      	ldr	r0, [pc, #276]	; (8000ba4 <I2Cx_MspInit+0x158>)
 8000a90:	f003 fb66 	bl	8004160 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000a94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4840      	ldr	r0, [pc, #256]	; (8000ba4 <I2Cx_MspInit+0x158>)
 8000aa2:	f003 fb5d 	bl	8004160 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000aa6:	4b3e      	ldr	r3, [pc, #248]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a3d      	ldr	r2, [pc, #244]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000aac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab2:	4b3b      	ldr	r3, [pc, #236]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8000abe:	4b38      	ldr	r3, [pc, #224]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000ac0:	6a1b      	ldr	r3, [r3, #32]
 8000ac2:	4a37      	ldr	r2, [pc, #220]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000ac4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ac8:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8000aca:	4b35      	ldr	r3, [pc, #212]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000acc:	6a1b      	ldr	r3, [r3, #32]
 8000ace:	4a34      	ldr	r2, [pc, #208]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000ad0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000ad4:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	210f      	movs	r1, #15
 8000ada:	2048      	movs	r0, #72	; 0x48
 8000adc:	f002 fb27 	bl	800312e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8000ae0:	2048      	movs	r0, #72	; 0x48
 8000ae2:	f002 fb40 	bl	8003166 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	210f      	movs	r1, #15
 8000aea:	2049      	movs	r0, #73	; 0x49
 8000aec:	f002 fb1f 	bl	800312e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8000af0:	2049      	movs	r0, #73	; 0x49
 8000af2:	f002 fb38 	bl	8003166 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8000af6:	e04d      	b.n	8000b94 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000af8:	4b29      	ldr	r3, [pc, #164]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afc:	4a28      	ldr	r2, [pc, #160]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000afe:	f043 0302 	orr.w	r3, r3, #2
 8000b02:	6313      	str	r3, [r2, #48]	; 0x30
 8000b04:	4b26      	ldr	r3, [pc, #152]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	f003 0302 	and.w	r3, r3, #2
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8000b10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b14:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000b16:	2312      	movs	r3, #18
 8000b18:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000b22:	2304      	movs	r3, #4
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	481e      	ldr	r0, [pc, #120]	; (8000ba8 <I2Cx_MspInit+0x15c>)
 8000b2e:	f003 fb17 	bl	8004160 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000b32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	481a      	ldr	r0, [pc, #104]	; (8000ba8 <I2Cx_MspInit+0x15c>)
 8000b40:	f003 fb0e 	bl	8004160 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000b44:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	4a15      	ldr	r2, [pc, #84]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000b4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8000b5c:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000b5e:	6a1b      	ldr	r3, [r3, #32]
 8000b60:	4a0f      	ldr	r2, [pc, #60]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000b62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b66:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8000b68:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000b6a:	6a1b      	ldr	r3, [r3, #32]
 8000b6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ba0 <I2Cx_MspInit+0x154>)
 8000b6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000b72:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	210f      	movs	r1, #15
 8000b78:	201f      	movs	r0, #31
 8000b7a:	f002 fad8 	bl	800312e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8000b7e:	201f      	movs	r0, #31
 8000b80:	f002 faf1 	bl	8003166 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8000b84:	2200      	movs	r2, #0
 8000b86:	210f      	movs	r1, #15
 8000b88:	2020      	movs	r0, #32
 8000b8a:	f002 fad0 	bl	800312e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000b8e:	2020      	movs	r0, #32
 8000b90:	f002 fae9 	bl	8003166 <HAL_NVIC_EnableIRQ>
}
 8000b94:	bf00      	nop
 8000b96:	3730      	adds	r7, #48	; 0x30
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	200000d0 	.word	0x200000d0
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40021c00 	.word	0x40021c00
 8000ba8:	40020400 	.word	0x40020400

08000bac <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f003 ff99 	bl	8004aec <HAL_I2C_GetState>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d125      	bne.n	8000c0c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a14      	ldr	r2, [pc, #80]	; (8000c14 <I2Cx_Init+0x68>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d103      	bne.n	8000bd0 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a13      	ldr	r2, [pc, #76]	; (8000c18 <I2Cx_Init+0x6c>)
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	e002      	b.n	8000bd6 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a12      	ldr	r2, [pc, #72]	; (8000c1c <I2Cx_Init+0x70>)
 8000bd4:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a11      	ldr	r2, [pc, #68]	; (8000c20 <I2Cx_Init+0x74>)
 8000bda:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2201      	movs	r2, #1
 8000be6:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f7ff ff23 	bl	8000a4c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f003 fc6e 	bl	80044e8 <HAL_I2C_Init>
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	200000d0 	.word	0x200000d0
 8000c18:	40005c00 	.word	0x40005c00
 8000c1c:	40005400 	.word	0x40005400
 8000c20:	40912732 	.word	0x40912732

08000c24 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af04      	add	r7, sp, #16
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	4608      	mov	r0, r1
 8000c2e:	4611      	mov	r1, r2
 8000c30:	461a      	mov	r2, r3
 8000c32:	4603      	mov	r3, r0
 8000c34:	72fb      	strb	r3, [r7, #11]
 8000c36:	460b      	mov	r3, r1
 8000c38:	813b      	strh	r3, [r7, #8]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000c42:	7afb      	ldrb	r3, [r7, #11]
 8000c44:	b299      	uxth	r1, r3
 8000c46:	88f8      	ldrh	r0, [r7, #6]
 8000c48:	893a      	ldrh	r2, [r7, #8]
 8000c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4e:	9302      	str	r3, [sp, #8]
 8000c50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c52:	9301      	str	r3, [sp, #4]
 8000c54:	6a3b      	ldr	r3, [r7, #32]
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	4603      	mov	r3, r0
 8000c5a:	68f8      	ldr	r0, [r7, #12]
 8000c5c:	f003 fe2c 	bl	80048b8 <HAL_I2C_Mem_Read>
 8000c60:	4603      	mov	r3, r0
 8000c62:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000c64:	7dfb      	ldrb	r3, [r7, #23]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d004      	beq.n	8000c74 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8000c6a:	7afb      	ldrb	r3, [r7, #11]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	68f8      	ldr	r0, [r7, #12]
 8000c70:	f000 f832 	bl	8000cd8 <I2Cx_Error>
  }
  return status;    
 8000c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b08a      	sub	sp, #40	; 0x28
 8000c82:	af04      	add	r7, sp, #16
 8000c84:	60f8      	str	r0, [r7, #12]
 8000c86:	4608      	mov	r0, r1
 8000c88:	4611      	mov	r1, r2
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	72fb      	strb	r3, [r7, #11]
 8000c90:	460b      	mov	r3, r1
 8000c92:	813b      	strh	r3, [r7, #8]
 8000c94:	4613      	mov	r3, r2
 8000c96:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000c9c:	7afb      	ldrb	r3, [r7, #11]
 8000c9e:	b299      	uxth	r1, r3
 8000ca0:	88f8      	ldrh	r0, [r7, #6]
 8000ca2:	893a      	ldrh	r2, [r7, #8]
 8000ca4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca8:	9302      	str	r3, [sp, #8]
 8000caa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000cac:	9301      	str	r3, [sp, #4]
 8000cae:	6a3b      	ldr	r3, [r7, #32]
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	68f8      	ldr	r0, [r7, #12]
 8000cb6:	f003 fceb 	bl	8004690 <HAL_I2C_Mem_Write>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000cbe:	7dfb      	ldrb	r3, [r7, #23]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d004      	beq.n	8000cce <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8000cc4:	7afb      	ldrb	r3, [r7, #11]
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	68f8      	ldr	r0, [r7, #12]
 8000cca:	f000 f805 	bl	8000cd8 <I2Cx_Error>
  }
  return status;
 8000cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f003 fc8f 	bl	8004608 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff ff5e 	bl	8000bac <I2Cx_Init>
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <TS_IO_Init+0x10>)
 8000cfe:	f7ff ff55 	bl	8000bac <I2Cx_Init>
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200000d0 	.word	0x200000d0

08000d0c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af02      	add	r7, sp, #8
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
 8000d16:	460b      	mov	r3, r1
 8000d18:	71bb      	strb	r3, [r7, #6]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8000d1e:	79bb      	ldrb	r3, [r7, #6]
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	79f9      	ldrb	r1, [r7, #7]
 8000d24:	2301      	movs	r3, #1
 8000d26:	9301      	str	r3, [sp, #4]
 8000d28:	1d7b      	adds	r3, r7, #5
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	4803      	ldr	r0, [pc, #12]	; (8000d3c <TS_IO_Write+0x30>)
 8000d30:	f7ff ffa5 	bl	8000c7e <I2Cx_WriteMultiple>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	200000d0 	.word	0x200000d0

08000d40 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af02      	add	r7, sp, #8
 8000d46:	4603      	mov	r3, r0
 8000d48:	460a      	mov	r2, r1
 8000d4a:	71fb      	strb	r3, [r7, #7]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8000d54:	79bb      	ldrb	r3, [r7, #6]
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	79f9      	ldrb	r1, [r7, #7]
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	9301      	str	r3, [sp, #4]
 8000d5e:	f107 030f 	add.w	r3, r7, #15
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	2301      	movs	r3, #1
 8000d66:	4804      	ldr	r0, [pc, #16]	; (8000d78 <TS_IO_Read+0x38>)
 8000d68:	f7ff ff5c 	bl	8000c24 <I2Cx_ReadMultiple>

  return read_value;
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200000d0 	.word	0x200000d0

08000d7c <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f001 fac9 	bl	800231c <HAL_Delay>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
	...

08000d94 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8000d98:	4b31      	ldr	r3, [pc, #196]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000d9a:	2228      	movs	r2, #40	; 0x28
 8000d9c:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8000d9e:	4b30      	ldr	r3, [pc, #192]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000da0:	2209      	movs	r2, #9
 8000da2:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8000da4:	4b2e      	ldr	r3, [pc, #184]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000da6:	2235      	movs	r2, #53	; 0x35
 8000da8:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8000daa:	4b2d      	ldr	r3, [pc, #180]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000dac:	220b      	movs	r2, #11
 8000dae:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8000db0:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000db2:	f240 121b 	movw	r2, #283	; 0x11b
 8000db6:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8000db8:	4b29      	ldr	r3, [pc, #164]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000dba:	f240 2215 	movw	r2, #533	; 0x215
 8000dbe:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8000dc0:	4b27      	ldr	r3, [pc, #156]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000dc2:	f240 121d 	movw	r2, #285	; 0x11d
 8000dc6:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8000dc8:	4b25      	ldr	r3, [pc, #148]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000dca:	f240 2235 	movw	r2, #565	; 0x235
 8000dce:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4823      	ldr	r0, [pc, #140]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000dd4:	f000 fd0e 	bl	80017f4 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8000dd8:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000dda:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000dde:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000de2:	f44f 7288 	mov.w	r2, #272	; 0x110
 8000de6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8000de8:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000e00:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8000e0c:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000e12:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000e1a:	4a12      	ldr	r2, [pc, #72]	; (8000e64 <BSP_LCD_Init+0xd0>)
 8000e1c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8000e1e:	4810      	ldr	r0, [pc, #64]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000e20:	f004 fa5e 	bl	80052e0 <HAL_LTDC_GetState>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d103      	bne.n	8000e32 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	480c      	ldr	r0, [pc, #48]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000e2e:	f000 fc07 	bl	8001640 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8000e32:	480b      	ldr	r0, [pc, #44]	; (8000e60 <BSP_LCD_Init+0xcc>)
 8000e34:	f004 f884 	bl	8004f40 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e3e:	480a      	ldr	r0, [pc, #40]	; (8000e68 <BSP_LCD_Init+0xd4>)
 8000e40:	f003 fb38 	bl	80044b4 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	2108      	movs	r1, #8
 8000e48:	4808      	ldr	r0, [pc, #32]	; (8000e6c <BSP_LCD_Init+0xd8>)
 8000e4a:	f003 fb33 	bl	80044b4 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8000e4e:	f000 fdf1 	bl	8001a34 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8000e52:	4807      	ldr	r0, [pc, #28]	; (8000e70 <BSP_LCD_Init+0xdc>)
 8000e54:	f000 f8d8 	bl	8001008 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200002fc 	.word	0x200002fc
 8000e64:	40016800 	.word	0x40016800
 8000e68:	40022000 	.word	0x40022000
 8000e6c:	40022800 	.word	0x40022800
 8000e70:	20000028 	.word	0x20000028

08000e74 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <BSP_LCD_GetXSize+0x20>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <BSP_LCD_GetXSize+0x24>)
 8000e7e:	2134      	movs	r1, #52	; 0x34
 8000e80:	fb01 f303 	mul.w	r3, r1, r3
 8000e84:	4413      	add	r3, r2
 8000e86:	3360      	adds	r3, #96	; 0x60
 8000e88:	681b      	ldr	r3, [r3, #0]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	2000015c 	.word	0x2000015c
 8000e98:	200002fc 	.word	0x200002fc

08000e9c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <BSP_LCD_GetYSize+0x20>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <BSP_LCD_GetYSize+0x24>)
 8000ea6:	2134      	movs	r1, #52	; 0x34
 8000ea8:	fb01 f303 	mul.w	r3, r1, r3
 8000eac:	4413      	add	r3, r2
 8000eae:	3364      	adds	r3, #100	; 0x64
 8000eb0:	681b      	ldr	r3, [r3, #0]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	2000015c 	.word	0x2000015c
 8000ec0:	200002fc 	.word	0x200002fc

08000ec4 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b090      	sub	sp, #64	; 0x40
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8000ed4:	f7ff ffce 	bl	8000e74 <BSP_LCD_GetXSize>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000ee0:	f7ff ffdc 	bl	8000e9c <BSP_LCD_GetYSize>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8000ef0:	23ff      	movs	r3, #255	; 0xff
 8000ef2:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000f0a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000f10:	2307      	movs	r3, #7
 8000f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8000f14:	f7ff ffae 	bl	8000e74 <BSP_LCD_GetXSize>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8000f1c:	f7ff ffbe 	bl	8000e9c <BSP_LCD_GetYSize>
 8000f20:	4603      	mov	r3, r0
 8000f22:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8000f24:	88fa      	ldrh	r2, [r7, #6]
 8000f26:	f107 030c 	add.w	r3, r7, #12
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4812      	ldr	r0, [pc, #72]	; (8000f78 <BSP_LCD_LayerDefaultInit+0xb4>)
 8000f2e:	f004 f999 	bl	8005264 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000f32:	88fa      	ldrh	r2, [r7, #6]
 8000f34:	4911      	ldr	r1, [pc, #68]	; (8000f7c <BSP_LCD_LayerDefaultInit+0xb8>)
 8000f36:	4613      	mov	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4413      	add	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	440b      	add	r3, r1
 8000f40:	3304      	adds	r3, #4
 8000f42:	f04f 32ff 	mov.w	r2, #4294967295
 8000f46:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000f48:	88fa      	ldrh	r2, [r7, #6]
 8000f4a:	490c      	ldr	r1, [pc, #48]	; (8000f7c <BSP_LCD_LayerDefaultInit+0xb8>)
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	4413      	add	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	440b      	add	r3, r1
 8000f56:	3308      	adds	r3, #8
 8000f58:	4a09      	ldr	r2, [pc, #36]	; (8000f80 <BSP_LCD_LayerDefaultInit+0xbc>)
 8000f5a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8000f5c:	88fa      	ldrh	r2, [r7, #6]
 8000f5e:	4907      	ldr	r1, [pc, #28]	; (8000f7c <BSP_LCD_LayerDefaultInit+0xb8>)
 8000f60:	4613      	mov	r3, r2
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	4413      	add	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	440b      	add	r3, r1
 8000f6a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000f6e:	601a      	str	r2, [r3, #0]
}
 8000f70:	bf00      	nop
 8000f72:	3740      	adds	r7, #64	; 0x40
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200002fc 	.word	0x200002fc
 8000f7c:	20000160 	.word	0x20000160
 8000f80:	20000028 	.word	0x20000028

08000f84 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8000f8c:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <BSP_LCD_SelectLayer+0x1c>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6013      	str	r3, [r2, #0]
} 
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	2000015c 	.word	0x2000015c

08000fa4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8000fac:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <BSP_LCD_SetTextColor+0x28>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4907      	ldr	r1, [pc, #28]	; (8000fd0 <BSP_LCD_SetTextColor+0x2c>)
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	440b      	add	r3, r1
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	601a      	str	r2, [r3, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	2000015c 	.word	0x2000015c
 8000fd0:	20000160 	.word	0x20000160

08000fd4 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <BSP_LCD_SetBackColor+0x2c>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4908      	ldr	r1, [pc, #32]	; (8001004 <BSP_LCD_SetBackColor+0x30>)
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4413      	add	r3, r2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	440b      	add	r3, r1
 8000fec:	3304      	adds	r3, #4
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	601a      	str	r2, [r3, #0]
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	2000015c 	.word	0x2000015c
 8001004:	20000160 	.word	0x20000160

08001008 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <BSP_LCD_SetFont+0x2c>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4908      	ldr	r1, [pc, #32]	; (8001038 <BSP_LCD_SetFont+0x30>)
 8001016:	4613      	mov	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4413      	add	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	440b      	add	r3, r1
 8001020:	3308      	adds	r3, #8
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	601a      	str	r2, [r3, #0]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	2000015c 	.word	0x2000015c
 8001038:	20000160 	.word	0x20000160

0800103c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800103c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800103e:	b085      	sub	sp, #20
 8001040:	af02      	add	r7, sp, #8
 8001042:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <BSP_LCD_Clear+0x48>)
 8001046:	681c      	ldr	r4, [r3, #0]
 8001048:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <BSP_LCD_Clear+0x48>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <BSP_LCD_Clear+0x4c>)
 800104e:	2134      	movs	r1, #52	; 0x34
 8001050:	fb01 f303 	mul.w	r3, r1, r3
 8001054:	4413      	add	r3, r2
 8001056:	335c      	adds	r3, #92	; 0x5c
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	461d      	mov	r5, r3
 800105c:	f7ff ff0a 	bl	8000e74 <BSP_LCD_GetXSize>
 8001060:	4606      	mov	r6, r0
 8001062:	f7ff ff1b 	bl	8000e9c <BSP_LCD_GetYSize>
 8001066:	4602      	mov	r2, r0
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	2300      	movs	r3, #0
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	4613      	mov	r3, r2
 8001072:	4632      	mov	r2, r6
 8001074:	4629      	mov	r1, r5
 8001076:	4620      	mov	r0, r4
 8001078:	f000 fc90 	bl	800199c <LL_FillBuffer>
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001084:	2000015c 	.word	0x2000015c
 8001088:	200002fc 	.word	0x200002fc

0800108c <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	80fb      	strh	r3, [r7, #6]
 8001096:	460b      	mov	r3, r1
 8001098:	80bb      	strh	r3, [r7, #4]
 800109a:	4613      	mov	r3, r2
 800109c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800109e:	4b1b      	ldr	r3, [pc, #108]	; (800110c <BSP_LCD_DisplayChar+0x80>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	491b      	ldr	r1, [pc, #108]	; (8001110 <BSP_LCD_DisplayChar+0x84>)
 80010a4:	4613      	mov	r3, r2
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	4413      	add	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	440b      	add	r3, r1
 80010ae:	3308      	adds	r3, #8
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	6819      	ldr	r1, [r3, #0]
 80010b4:	78fb      	ldrb	r3, [r7, #3]
 80010b6:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <BSP_LCD_DisplayChar+0x80>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4c14      	ldr	r4, [pc, #80]	; (8001110 <BSP_LCD_DisplayChar+0x84>)
 80010c0:	4613      	mov	r3, r2
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4413      	add	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4423      	add	r3, r4
 80010ca:	3308      	adds	r3, #8
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80010d0:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80010d4:	4b0d      	ldr	r3, [pc, #52]	; (800110c <BSP_LCD_DisplayChar+0x80>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4c0d      	ldr	r4, [pc, #52]	; (8001110 <BSP_LCD_DisplayChar+0x84>)
 80010da:	4613      	mov	r3, r2
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	4413      	add	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4423      	add	r3, r4
 80010e4:	3308      	adds	r3, #8
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	889b      	ldrh	r3, [r3, #4]
 80010ea:	3307      	adds	r3, #7
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	da00      	bge.n	80010f2 <BSP_LCD_DisplayChar+0x66>
 80010f0:	3307      	adds	r3, #7
 80010f2:	10db      	asrs	r3, r3, #3
 80010f4:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80010f8:	18ca      	adds	r2, r1, r3
 80010fa:	88b9      	ldrh	r1, [r7, #4]
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 fb94 	bl	800182c <DrawChar>
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	bd90      	pop	{r4, r7, pc}
 800110c:	2000015c 	.word	0x2000015c
 8001110:	20000160 	.word	0x20000160

08001114 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001114:	b5b0      	push	{r4, r5, r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
 800111a:	60ba      	str	r2, [r7, #8]
 800111c:	461a      	mov	r2, r3
 800111e:	4603      	mov	r3, r0
 8001120:	81fb      	strh	r3, [r7, #14]
 8001122:	460b      	mov	r3, r1
 8001124:	81bb      	strh	r3, [r7, #12]
 8001126:	4613      	mov	r3, r2
 8001128:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800112a:	2301      	movs	r3, #1
 800112c:	83fb      	strh	r3, [r7, #30]
 800112e:	2300      	movs	r3, #0
 8001130:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800113e:	e002      	b.n	8001146 <BSP_LCD_DisplayStringAt+0x32>
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	3301      	adds	r3, #1
 8001144:	61bb      	str	r3, [r7, #24]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	1c5a      	adds	r2, r3, #1
 800114a:	617a      	str	r2, [r7, #20]
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1f6      	bne.n	8001140 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001152:	f7ff fe8f 	bl	8000e74 <BSP_LCD_GetXSize>
 8001156:	4b4f      	ldr	r3, [pc, #316]	; (8001294 <BSP_LCD_DisplayStringAt+0x180>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	494f      	ldr	r1, [pc, #316]	; (8001298 <BSP_LCD_DisplayStringAt+0x184>)
 800115c:	4613      	mov	r3, r2
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	3308      	adds	r3, #8
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	889b      	ldrh	r3, [r3, #4]
 800116c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001170:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b02      	cmp	r3, #2
 8001176:	d01c      	beq.n	80011b2 <BSP_LCD_DisplayStringAt+0x9e>
 8001178:	2b03      	cmp	r3, #3
 800117a:	d017      	beq.n	80011ac <BSP_LCD_DisplayStringAt+0x98>
 800117c:	2b01      	cmp	r3, #1
 800117e:	d12e      	bne.n	80011de <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	1ad1      	subs	r1, r2, r3
 8001186:	4b43      	ldr	r3, [pc, #268]	; (8001294 <BSP_LCD_DisplayStringAt+0x180>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4843      	ldr	r0, [pc, #268]	; (8001298 <BSP_LCD_DisplayStringAt+0x184>)
 800118c:	4613      	mov	r3, r2
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	4413      	add	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4403      	add	r3, r0
 8001196:	3308      	adds	r3, #8
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	889b      	ldrh	r3, [r3, #4]
 800119c:	fb03 f301 	mul.w	r3, r3, r1
 80011a0:	085b      	lsrs	r3, r3, #1
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	89fb      	ldrh	r3, [r7, #14]
 80011a6:	4413      	add	r3, r2
 80011a8:	83fb      	strh	r3, [r7, #30]
      break;
 80011aa:	e01b      	b.n	80011e4 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80011ac:	89fb      	ldrh	r3, [r7, #14]
 80011ae:	83fb      	strh	r3, [r7, #30]
      break;
 80011b0:	e018      	b.n	80011e4 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	b299      	uxth	r1, r3
 80011ba:	4b36      	ldr	r3, [pc, #216]	; (8001294 <BSP_LCD_DisplayStringAt+0x180>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4836      	ldr	r0, [pc, #216]	; (8001298 <BSP_LCD_DisplayStringAt+0x184>)
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4403      	add	r3, r0
 80011ca:	3308      	adds	r3, #8
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	889b      	ldrh	r3, [r3, #4]
 80011d0:	fb11 f303 	smulbb	r3, r1, r3
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	89fb      	ldrh	r3, [r7, #14]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	83fb      	strh	r3, [r7, #30]
      break;
 80011dc:	e002      	b.n	80011e4 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 80011de:	89fb      	ldrh	r3, [r7, #14]
 80011e0:	83fb      	strh	r3, [r7, #30]
      break;
 80011e2:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80011e4:	8bfb      	ldrh	r3, [r7, #30]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <BSP_LCD_DisplayStringAt+0xde>
 80011ea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	da1d      	bge.n	800122e <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80011f6:	e01a      	b.n	800122e <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	781a      	ldrb	r2, [r3, #0]
 80011fc:	89b9      	ldrh	r1, [r7, #12]
 80011fe:	8bfb      	ldrh	r3, [r7, #30]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff43 	bl	800108c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8001206:	4b23      	ldr	r3, [pc, #140]	; (8001294 <BSP_LCD_DisplayStringAt+0x180>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	4923      	ldr	r1, [pc, #140]	; (8001298 <BSP_LCD_DisplayStringAt+0x184>)
 800120c:	4613      	mov	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	440b      	add	r3, r1
 8001216:	3308      	adds	r3, #8
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	889a      	ldrh	r2, [r3, #4]
 800121c:	8bfb      	ldrh	r3, [r7, #30]
 800121e:	4413      	add	r3, r2
 8001220:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	3301      	adds	r3, #1
 8001226:	60bb      	str	r3, [r7, #8]
    i++;
 8001228:	8bbb      	ldrh	r3, [r7, #28]
 800122a:	3301      	adds	r3, #1
 800122c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	bf14      	ite	ne
 8001236:	2301      	movne	r3, #1
 8001238:	2300      	moveq	r3, #0
 800123a:	b2dc      	uxtb	r4, r3
 800123c:	f7ff fe1a 	bl	8000e74 <BSP_LCD_GetXSize>
 8001240:	4605      	mov	r5, r0
 8001242:	8bb9      	ldrh	r1, [r7, #28]
 8001244:	4b13      	ldr	r3, [pc, #76]	; (8001294 <BSP_LCD_DisplayStringAt+0x180>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4813      	ldr	r0, [pc, #76]	; (8001298 <BSP_LCD_DisplayStringAt+0x184>)
 800124a:	4613      	mov	r3, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	4413      	add	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4403      	add	r3, r0
 8001254:	3308      	adds	r3, #8
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	889b      	ldrh	r3, [r3, #4]
 800125a:	fb03 f301 	mul.w	r3, r3, r1
 800125e:	1aeb      	subs	r3, r5, r3
 8001260:	b299      	uxth	r1, r3
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <BSP_LCD_DisplayStringAt+0x180>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	480c      	ldr	r0, [pc, #48]	; (8001298 <BSP_LCD_DisplayStringAt+0x184>)
 8001268:	4613      	mov	r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4413      	add	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4403      	add	r3, r0
 8001272:	3308      	adds	r3, #8
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	889b      	ldrh	r3, [r3, #4]
 8001278:	4299      	cmp	r1, r3
 800127a:	bf2c      	ite	cs
 800127c:	2301      	movcs	r3, #1
 800127e:	2300      	movcc	r3, #0
 8001280:	b2db      	uxtb	r3, r3
 8001282:	4023      	ands	r3, r4
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1b6      	bne.n	80011f8 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 800128a:	bf00      	nop
 800128c:	3720      	adds	r7, #32
 800128e:	46bd      	mov	sp, r7
 8001290:	bdb0      	pop	{r4, r5, r7, pc}
 8001292:	bf00      	nop
 8001294:	2000015c 	.word	0x2000015c
 8001298:	20000160 	.word	0x20000160

0800129c <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800129c:	b5b0      	push	{r4, r5, r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]
 80012a6:	460b      	mov	r3, r1
 80012a8:	80bb      	strh	r3, [r7, #4]
 80012aa:	4613      	mov	r3, r2
 80012ac:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80012b2:	4b26      	ldr	r3, [pc, #152]	; (800134c <BSP_LCD_DrawHLine+0xb0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a26      	ldr	r2, [pc, #152]	; (8001350 <BSP_LCD_DrawHLine+0xb4>)
 80012b8:	2134      	movs	r1, #52	; 0x34
 80012ba:	fb01 f303 	mul.w	r3, r1, r3
 80012be:	4413      	add	r3, r2
 80012c0:	3348      	adds	r3, #72	; 0x48
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d114      	bne.n	80012f2 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80012c8:	4b20      	ldr	r3, [pc, #128]	; (800134c <BSP_LCD_DrawHLine+0xb0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a20      	ldr	r2, [pc, #128]	; (8001350 <BSP_LCD_DrawHLine+0xb4>)
 80012ce:	2134      	movs	r1, #52	; 0x34
 80012d0:	fb01 f303 	mul.w	r3, r1, r3
 80012d4:	4413      	add	r3, r2
 80012d6:	335c      	adds	r3, #92	; 0x5c
 80012d8:	681c      	ldr	r4, [r3, #0]
 80012da:	f7ff fdcb 	bl	8000e74 <BSP_LCD_GetXSize>
 80012de:	4602      	mov	r2, r0
 80012e0:	88bb      	ldrh	r3, [r7, #4]
 80012e2:	fb03 f202 	mul.w	r2, r3, r2
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	4413      	add	r3, r2
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	4423      	add	r3, r4
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	e013      	b.n	800131a <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80012f2:	4b16      	ldr	r3, [pc, #88]	; (800134c <BSP_LCD_DrawHLine+0xb0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a16      	ldr	r2, [pc, #88]	; (8001350 <BSP_LCD_DrawHLine+0xb4>)
 80012f8:	2134      	movs	r1, #52	; 0x34
 80012fa:	fb01 f303 	mul.w	r3, r1, r3
 80012fe:	4413      	add	r3, r2
 8001300:	335c      	adds	r3, #92	; 0x5c
 8001302:	681c      	ldr	r4, [r3, #0]
 8001304:	f7ff fdb6 	bl	8000e74 <BSP_LCD_GetXSize>
 8001308:	4602      	mov	r2, r0
 800130a:	88bb      	ldrh	r3, [r7, #4]
 800130c:	fb03 f202 	mul.w	r2, r3, r2
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	4413      	add	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4423      	add	r3, r4
 8001318:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <BSP_LCD_DrawHLine+0xb0>)
 800131c:	6818      	ldr	r0, [r3, #0]
 800131e:	68fc      	ldr	r4, [r7, #12]
 8001320:	887d      	ldrh	r5, [r7, #2]
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <BSP_LCD_DrawHLine+0xb0>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	490b      	ldr	r1, [pc, #44]	; (8001354 <BSP_LCD_DrawHLine+0xb8>)
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	440b      	add	r3, r1
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	2300      	movs	r3, #0
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2301      	movs	r3, #1
 800133c:	462a      	mov	r2, r5
 800133e:	4621      	mov	r1, r4
 8001340:	f000 fb2c 	bl	800199c <LL_FillBuffer>
}
 8001344:	bf00      	nop
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bdb0      	pop	{r4, r5, r7, pc}
 800134c:	2000015c 	.word	0x2000015c
 8001350:	200002fc 	.word	0x200002fc
 8001354:	20000160 	.word	0x20000160

08001358 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135a:	b087      	sub	sp, #28
 800135c:	af02      	add	r7, sp, #8
 800135e:	4603      	mov	r3, r0
 8001360:	80fb      	strh	r3, [r7, #6]
 8001362:	460b      	mov	r3, r1
 8001364:	80bb      	strh	r3, [r7, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800136e:	4b28      	ldr	r3, [pc, #160]	; (8001410 <BSP_LCD_DrawVLine+0xb8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a28      	ldr	r2, [pc, #160]	; (8001414 <BSP_LCD_DrawVLine+0xbc>)
 8001374:	2134      	movs	r1, #52	; 0x34
 8001376:	fb01 f303 	mul.w	r3, r1, r3
 800137a:	4413      	add	r3, r2
 800137c:	3348      	adds	r3, #72	; 0x48
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b02      	cmp	r3, #2
 8001382:	d114      	bne.n	80013ae <BSP_LCD_DrawVLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001384:	4b22      	ldr	r3, [pc, #136]	; (8001410 <BSP_LCD_DrawVLine+0xb8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a22      	ldr	r2, [pc, #136]	; (8001414 <BSP_LCD_DrawVLine+0xbc>)
 800138a:	2134      	movs	r1, #52	; 0x34
 800138c:	fb01 f303 	mul.w	r3, r1, r3
 8001390:	4413      	add	r3, r2
 8001392:	335c      	adds	r3, #92	; 0x5c
 8001394:	681c      	ldr	r4, [r3, #0]
 8001396:	f7ff fd6d 	bl	8000e74 <BSP_LCD_GetXSize>
 800139a:	4602      	mov	r2, r0
 800139c:	88bb      	ldrh	r3, [r7, #4]
 800139e:	fb03 f202 	mul.w	r2, r3, r2
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	4413      	add	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4423      	add	r3, r4
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	e013      	b.n	80013d6 <BSP_LCD_DrawVLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80013ae:	4b18      	ldr	r3, [pc, #96]	; (8001410 <BSP_LCD_DrawVLine+0xb8>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a18      	ldr	r2, [pc, #96]	; (8001414 <BSP_LCD_DrawVLine+0xbc>)
 80013b4:	2134      	movs	r1, #52	; 0x34
 80013b6:	fb01 f303 	mul.w	r3, r1, r3
 80013ba:	4413      	add	r3, r2
 80013bc:	335c      	adds	r3, #92	; 0x5c
 80013be:	681c      	ldr	r4, [r3, #0]
 80013c0:	f7ff fd58 	bl	8000e74 <BSP_LCD_GetXSize>
 80013c4:	4602      	mov	r2, r0
 80013c6:	88bb      	ldrh	r3, [r7, #4]
 80013c8:	fb03 f202 	mul.w	r2, r3, r2
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	4413      	add	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4423      	add	r3, r4
 80013d4:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <BSP_LCD_DrawVLine+0xb8>)
 80013d8:	681c      	ldr	r4, [r3, #0]
 80013da:	68fd      	ldr	r5, [r7, #12]
 80013dc:	887e      	ldrh	r6, [r7, #2]
 80013de:	f7ff fd49 	bl	8000e74 <BSP_LCD_GetXSize>
 80013e2:	4603      	mov	r3, r0
 80013e4:	1e59      	subs	r1, r3, #1
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <BSP_LCD_DrawVLine+0xb8>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	480b      	ldr	r0, [pc, #44]	; (8001418 <BSP_LCD_DrawVLine+0xc0>)
 80013ec:	4613      	mov	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4413      	add	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4403      	add	r3, r0
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	9100      	str	r1, [sp, #0]
 80013fc:	4633      	mov	r3, r6
 80013fe:	2201      	movs	r2, #1
 8001400:	4629      	mov	r1, r5
 8001402:	4620      	mov	r0, r4
 8001404:	f000 faca 	bl	800199c <LL_FillBuffer>
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001410:	2000015c 	.word	0x2000015c
 8001414:	200002fc 	.word	0x200002fc
 8001418:	20000160 	.word	0x20000160

0800141c <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4604      	mov	r4, r0
 8001424:	4608      	mov	r0, r1
 8001426:	4611      	mov	r1, r2
 8001428:	461a      	mov	r2, r3
 800142a:	4623      	mov	r3, r4
 800142c:	80fb      	strh	r3, [r7, #6]
 800142e:	4603      	mov	r3, r0
 8001430:	80bb      	strh	r3, [r7, #4]
 8001432:	460b      	mov	r3, r1
 8001434:	807b      	strh	r3, [r7, #2]
 8001436:	4613      	mov	r3, r2
 8001438:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 800143a:	887a      	ldrh	r2, [r7, #2]
 800143c:	88b9      	ldrh	r1, [r7, #4]
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff2b 	bl	800129c <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8001446:	88ba      	ldrh	r2, [r7, #4]
 8001448:	883b      	ldrh	r3, [r7, #0]
 800144a:	4413      	add	r3, r2
 800144c:	b299      	uxth	r1, r3
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff ff22 	bl	800129c <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8001458:	883a      	ldrh	r2, [r7, #0]
 800145a:	88b9      	ldrh	r1, [r7, #4]
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff ff7a 	bl	8001358 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8001464:	88fa      	ldrh	r2, [r7, #6]
 8001466:	887b      	ldrh	r3, [r7, #2]
 8001468:	4413      	add	r3, r2
 800146a:	b29b      	uxth	r3, r3
 800146c:	883a      	ldrh	r2, [r7, #0]
 800146e:	88b9      	ldrh	r1, [r7, #4]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff71 	bl	8001358 <BSP_LCD_DrawVLine>
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	bd90      	pop	{r4, r7, pc}
	...

08001480 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001480:	b5b0      	push	{r4, r5, r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	603a      	str	r2, [r7, #0]
 800148a:	80fb      	strh	r3, [r7, #6]
 800148c:	460b      	mov	r3, r1
 800148e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001490:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <BSP_LCD_DrawPixel+0x88>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a1d      	ldr	r2, [pc, #116]	; (800150c <BSP_LCD_DrawPixel+0x8c>)
 8001496:	2134      	movs	r1, #52	; 0x34
 8001498:	fb01 f303 	mul.w	r3, r1, r3
 800149c:	4413      	add	r3, r2
 800149e:	3348      	adds	r3, #72	; 0x48
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d116      	bne.n	80014d4 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80014a6:	4b18      	ldr	r3, [pc, #96]	; (8001508 <BSP_LCD_DrawPixel+0x88>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a18      	ldr	r2, [pc, #96]	; (800150c <BSP_LCD_DrawPixel+0x8c>)
 80014ac:	2134      	movs	r1, #52	; 0x34
 80014ae:	fb01 f303 	mul.w	r3, r1, r3
 80014b2:	4413      	add	r3, r2
 80014b4:	335c      	adds	r3, #92	; 0x5c
 80014b6:	681c      	ldr	r4, [r3, #0]
 80014b8:	88bd      	ldrh	r5, [r7, #4]
 80014ba:	f7ff fcdb 	bl	8000e74 <BSP_LCD_GetXSize>
 80014be:	4603      	mov	r3, r0
 80014c0:	fb03 f205 	mul.w	r2, r3, r5
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	4413      	add	r3, r2
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	4423      	add	r3, r4
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	b292      	uxth	r2, r2
 80014d0:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80014d2:	e015      	b.n	8001500 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <BSP_LCD_DrawPixel+0x88>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0c      	ldr	r2, [pc, #48]	; (800150c <BSP_LCD_DrawPixel+0x8c>)
 80014da:	2134      	movs	r1, #52	; 0x34
 80014dc:	fb01 f303 	mul.w	r3, r1, r3
 80014e0:	4413      	add	r3, r2
 80014e2:	335c      	adds	r3, #92	; 0x5c
 80014e4:	681c      	ldr	r4, [r3, #0]
 80014e6:	88bd      	ldrh	r5, [r7, #4]
 80014e8:	f7ff fcc4 	bl	8000e74 <BSP_LCD_GetXSize>
 80014ec:	4603      	mov	r3, r0
 80014ee:	fb03 f205 	mul.w	r2, r3, r5
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	4413      	add	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4423      	add	r3, r4
 80014fa:	461a      	mov	r2, r3
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	6013      	str	r3, [r2, #0]
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bdb0      	pop	{r4, r5, r7, pc}
 8001508:	2000015c 	.word	0x2000015c
 800150c:	200002fc 	.word	0x200002fc

08001510 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af02      	add	r7, sp, #8
 8001518:	4604      	mov	r4, r0
 800151a:	4608      	mov	r0, r1
 800151c:	4611      	mov	r1, r2
 800151e:	461a      	mov	r2, r3
 8001520:	4623      	mov	r3, r4
 8001522:	80fb      	strh	r3, [r7, #6]
 8001524:	4603      	mov	r3, r0
 8001526:	80bb      	strh	r3, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	807b      	strh	r3, [r7, #2]
 800152c:	4613      	mov	r3, r2
 800152e:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001534:	4b30      	ldr	r3, [pc, #192]	; (80015f8 <BSP_LCD_FillRect+0xe8>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4930      	ldr	r1, [pc, #192]	; (80015fc <BSP_LCD_FillRect+0xec>)
 800153a:	4613      	mov	r3, r2
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	4413      	add	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fd2c 	bl	8000fa4 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800154c:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <BSP_LCD_FillRect+0xe8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a2b      	ldr	r2, [pc, #172]	; (8001600 <BSP_LCD_FillRect+0xf0>)
 8001552:	2134      	movs	r1, #52	; 0x34
 8001554:	fb01 f303 	mul.w	r3, r1, r3
 8001558:	4413      	add	r3, r2
 800155a:	3348      	adds	r3, #72	; 0x48
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b02      	cmp	r3, #2
 8001560:	d114      	bne.n	800158c <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001562:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <BSP_LCD_FillRect+0xe8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a26      	ldr	r2, [pc, #152]	; (8001600 <BSP_LCD_FillRect+0xf0>)
 8001568:	2134      	movs	r1, #52	; 0x34
 800156a:	fb01 f303 	mul.w	r3, r1, r3
 800156e:	4413      	add	r3, r2
 8001570:	335c      	adds	r3, #92	; 0x5c
 8001572:	681c      	ldr	r4, [r3, #0]
 8001574:	f7ff fc7e 	bl	8000e74 <BSP_LCD_GetXSize>
 8001578:	4602      	mov	r2, r0
 800157a:	88bb      	ldrh	r3, [r7, #4]
 800157c:	fb03 f202 	mul.w	r2, r3, r2
 8001580:	88fb      	ldrh	r3, [r7, #6]
 8001582:	4413      	add	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4423      	add	r3, r4
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	e013      	b.n	80015b4 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800158c:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <BSP_LCD_FillRect+0xe8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a1b      	ldr	r2, [pc, #108]	; (8001600 <BSP_LCD_FillRect+0xf0>)
 8001592:	2134      	movs	r1, #52	; 0x34
 8001594:	fb01 f303 	mul.w	r3, r1, r3
 8001598:	4413      	add	r3, r2
 800159a:	335c      	adds	r3, #92	; 0x5c
 800159c:	681c      	ldr	r4, [r3, #0]
 800159e:	f7ff fc69 	bl	8000e74 <BSP_LCD_GetXSize>
 80015a2:	4602      	mov	r2, r0
 80015a4:	88bb      	ldrh	r3, [r7, #4]
 80015a6:	fb03 f202 	mul.w	r2, r3, r2
 80015aa:	88fb      	ldrh	r3, [r7, #6]
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4423      	add	r3, r4
 80015b2:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80015b4:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <BSP_LCD_FillRect+0xe8>)
 80015b6:	681c      	ldr	r4, [r3, #0]
 80015b8:	68fd      	ldr	r5, [r7, #12]
 80015ba:	887e      	ldrh	r6, [r7, #2]
 80015bc:	f8b7 8000 	ldrh.w	r8, [r7]
 80015c0:	f7ff fc58 	bl	8000e74 <BSP_LCD_GetXSize>
 80015c4:	4602      	mov	r2, r0
 80015c6:	887b      	ldrh	r3, [r7, #2]
 80015c8:	1ad1      	subs	r1, r2, r3
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <BSP_LCD_FillRect+0xe8>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	480b      	ldr	r0, [pc, #44]	; (80015fc <BSP_LCD_FillRect+0xec>)
 80015d0:	4613      	mov	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4403      	add	r3, r0
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	9301      	str	r3, [sp, #4]
 80015de:	9100      	str	r1, [sp, #0]
 80015e0:	4643      	mov	r3, r8
 80015e2:	4632      	mov	r2, r6
 80015e4:	4629      	mov	r1, r5
 80015e6:	4620      	mov	r0, r4
 80015e8:	f000 f9d8 	bl	800199c <LL_FillBuffer>
}
 80015ec:	bf00      	nop
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015f6:	bf00      	nop
 80015f8:	2000015c 	.word	0x2000015c
 80015fc:	20000160 	.word	0x20000160
 8001600:	200002fc 	.word	0x200002fc

08001604 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8001608:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <BSP_LCD_DisplayOn+0x30>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	699a      	ldr	r2, [r3, #24]
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <BSP_LCD_DisplayOn+0x30>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0201 	orr.w	r2, r2, #1
 8001616:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8001618:	2201      	movs	r2, #1
 800161a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800161e:	4806      	ldr	r0, [pc, #24]	; (8001638 <BSP_LCD_DisplayOn+0x34>)
 8001620:	f002 ff48 	bl	80044b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8001624:	2201      	movs	r2, #1
 8001626:	2108      	movs	r1, #8
 8001628:	4804      	ldr	r0, [pc, #16]	; (800163c <BSP_LCD_DisplayOn+0x38>)
 800162a:	f002 ff43 	bl	80044b4 <HAL_GPIO_WritePin>
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200002fc 	.word	0x200002fc
 8001638:	40022000 	.word	0x40022000
 800163c:	40022800 	.word	0x40022800

08001640 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b090      	sub	sp, #64	; 0x40
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800164a:	4b64      	ldr	r3, [pc, #400]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	4a63      	ldr	r2, [pc, #396]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 8001650:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001654:	6453      	str	r3, [r2, #68]	; 0x44
 8001656:	4b61      	ldr	r3, [pc, #388]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001660:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001662:	4b5e      	ldr	r3, [pc, #376]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a5d      	ldr	r2, [pc, #372]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 8001668:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b5b      	ldr	r3, [pc, #364]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800167a:	4b58      	ldr	r3, [pc, #352]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a57      	ldr	r2, [pc, #348]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 8001680:	f043 0310 	orr.w	r3, r3, #16
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b55      	ldr	r3, [pc, #340]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	623b      	str	r3, [r7, #32]
 8001690:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001692:	4b52      	ldr	r3, [pc, #328]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a51      	ldr	r2, [pc, #324]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 8001698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b4f      	ldr	r3, [pc, #316]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016a6:	61fb      	str	r3, [r7, #28]
 80016a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80016aa:	4b4c      	ldr	r3, [pc, #304]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a4b      	ldr	r2, [pc, #300]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 80016b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b49      	ldr	r3, [pc, #292]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016be:	61bb      	str	r3, [r7, #24]
 80016c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80016c2:	4b46      	ldr	r3, [pc, #280]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a45      	ldr	r2, [pc, #276]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 80016c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b43      	ldr	r3, [pc, #268]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80016da:	4b40      	ldr	r3, [pc, #256]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a3f      	ldr	r2, [pc, #252]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 80016e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b3d      	ldr	r3, [pc, #244]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80016f2:	4b3a      	ldr	r3, [pc, #232]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a39      	ldr	r2, [pc, #228]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 80016f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b37      	ldr	r3, [pc, #220]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800170a:	4b34      	ldr	r3, [pc, #208]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a33      	ldr	r2, [pc, #204]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 8001710:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b31      	ldr	r3, [pc, #196]	; (80017dc <BSP_LCD_MspInit+0x19c>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8001722:	2310      	movs	r3, #16
 8001724:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800172e:	2302      	movs	r3, #2
 8001730:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8001732:	230e      	movs	r3, #14
 8001734:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001736:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800173a:	4619      	mov	r1, r3
 800173c:	4828      	ldr	r0, [pc, #160]	; (80017e0 <BSP_LCD_MspInit+0x1a0>)
 800173e:	f002 fd0f 	bl	8004160 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8001742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800174c:	2309      	movs	r3, #9
 800174e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001754:	4619      	mov	r1, r3
 8001756:	4823      	ldr	r0, [pc, #140]	; (80017e4 <BSP_LCD_MspInit+0x1a4>)
 8001758:	f002 fd02 	bl	8004160 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800175c:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001766:	230e      	movs	r3, #14
 8001768:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800176a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800176e:	4619      	mov	r1, r3
 8001770:	481d      	ldr	r0, [pc, #116]	; (80017e8 <BSP_LCD_MspInit+0x1a8>)
 8001772:	f002 fcf5 	bl	8004160 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8001776:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001780:	230e      	movs	r3, #14
 8001782:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8001784:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001788:	4619      	mov	r1, r3
 800178a:	4818      	ldr	r0, [pc, #96]	; (80017ec <BSP_LCD_MspInit+0x1ac>)
 800178c:	f002 fce8 	bl	8004160 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8001790:	23f7      	movs	r3, #247	; 0xf7
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001794:	2302      	movs	r3, #2
 8001796:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001798:	230e      	movs	r3, #14
 800179a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800179c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a0:	4619      	mov	r1, r3
 80017a2:	4813      	ldr	r0, [pc, #76]	; (80017f0 <BSP_LCD_MspInit+0x1b0>)
 80017a4:	f002 fcdc 	bl	8004160 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80017a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80017ae:	2301      	movs	r3, #1
 80017b0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80017b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b6:	4619      	mov	r1, r3
 80017b8:	480b      	ldr	r0, [pc, #44]	; (80017e8 <BSP_LCD_MspInit+0x1a8>)
 80017ba:	f002 fcd1 	bl	8004160 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80017be:	2308      	movs	r3, #8
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80017c2:	2301      	movs	r3, #1
 80017c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80017c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ca:	4619      	mov	r1, r3
 80017cc:	4808      	ldr	r0, [pc, #32]	; (80017f0 <BSP_LCD_MspInit+0x1b0>)
 80017ce:	f002 fcc7 	bl	8004160 <HAL_GPIO_Init>
}
 80017d2:	bf00      	nop
 80017d4:	3740      	adds	r7, #64	; 0x40
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40021800 	.word	0x40021800
 80017e8:	40022000 	.word	0x40022000
 80017ec:	40022400 	.word	0x40022400
 80017f0:	40022800 	.word	0x40022800

080017f4 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <BSP_LCD_ClockConfig+0x34>)
 8001800:	2208      	movs	r2, #8
 8001802:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <BSP_LCD_ClockConfig+0x34>)
 8001806:	22c0      	movs	r2, #192	; 0xc0
 8001808:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800180a:	4b07      	ldr	r3, [pc, #28]	; (8001828 <BSP_LCD_ClockConfig+0x34>)
 800180c:	2205      	movs	r2, #5
 800180e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <BSP_LCD_ClockConfig+0x34>)
 8001812:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001816:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8001818:	4803      	ldr	r0, [pc, #12]	; (8001828 <BSP_LCD_ClockConfig+0x34>)
 800181a:	f004 fc77 	bl	800610c <HAL_RCCEx_PeriphCLKConfig>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000178 	.word	0x20000178

0800182c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	603a      	str	r2, [r7, #0]
 8001836:	80fb      	strh	r3, [r7, #6]
 8001838:	460b      	mov	r3, r1
 800183a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
 8001840:	2300      	movs	r3, #0
 8001842:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8001844:	4b53      	ldr	r3, [pc, #332]	; (8001994 <DrawChar+0x168>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4953      	ldr	r1, [pc, #332]	; (8001998 <DrawChar+0x16c>)
 800184a:	4613      	mov	r3, r2
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4413      	add	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	440b      	add	r3, r1
 8001854:	3308      	adds	r3, #8
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	88db      	ldrh	r3, [r3, #6]
 800185a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800185c:	4b4d      	ldr	r3, [pc, #308]	; (8001994 <DrawChar+0x168>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	494d      	ldr	r1, [pc, #308]	; (8001998 <DrawChar+0x16c>)
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	440b      	add	r3, r1
 800186c:	3308      	adds	r3, #8
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	889b      	ldrh	r3, [r3, #4]
 8001872:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8001874:	8a3b      	ldrh	r3, [r7, #16]
 8001876:	3307      	adds	r3, #7
 8001878:	2b00      	cmp	r3, #0
 800187a:	da00      	bge.n	800187e <DrawChar+0x52>
 800187c:	3307      	adds	r3, #7
 800187e:	10db      	asrs	r3, r3, #3
 8001880:	b2db      	uxtb	r3, r3
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	b2da      	uxtb	r2, r3
 8001886:	8a3b      	ldrh	r3, [r7, #16]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	e076      	b.n	8001982 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001894:	8a3b      	ldrh	r3, [r7, #16]
 8001896:	3307      	adds	r3, #7
 8001898:	2b00      	cmp	r3, #0
 800189a:	da00      	bge.n	800189e <DrawChar+0x72>
 800189c:	3307      	adds	r3, #7
 800189e:	10db      	asrs	r3, r3, #3
 80018a0:	461a      	mov	r2, r3
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	fb03 f302 	mul.w	r3, r3, r2
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80018ae:	8a3b      	ldrh	r3, [r7, #16]
 80018b0:	3307      	adds	r3, #7
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	da00      	bge.n	80018b8 <DrawChar+0x8c>
 80018b6:	3307      	adds	r3, #7
 80018b8:	10db      	asrs	r3, r3, #3
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d002      	beq.n	80018c4 <DrawChar+0x98>
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d004      	beq.n	80018cc <DrawChar+0xa0>
 80018c2:	e00c      	b.n	80018de <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	617b      	str	r3, [r7, #20]
      break;
 80018ca:	e016      	b.n	80018fa <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	021b      	lsls	r3, r3, #8
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	3201      	adds	r2, #1
 80018d6:	7812      	ldrb	r2, [r2, #0]
 80018d8:	4313      	orrs	r3, r2
 80018da:	617b      	str	r3, [r7, #20]
      break;
 80018dc:	e00d      	b.n	80018fa <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	041a      	lsls	r2, r3, #16
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	3301      	adds	r3, #1
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	021b      	lsls	r3, r3, #8
 80018ec:	4313      	orrs	r3, r2
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	3202      	adds	r2, #2
 80018f2:	7812      	ldrb	r2, [r2, #0]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	617b      	str	r3, [r7, #20]
      break;
 80018f8:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	61bb      	str	r3, [r7, #24]
 80018fe:	e036      	b.n	800196e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8001900:	8a3a      	ldrh	r2, [r7, #16]
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	1ad2      	subs	r2, r2, r3
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	4413      	add	r3, r2
 800190a:	3b01      	subs	r3, #1
 800190c:	2201      	movs	r2, #1
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	461a      	mov	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	4013      	ands	r3, r2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d012      	beq.n	8001942 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	b29a      	uxth	r2, r3
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	4413      	add	r3, r2
 8001924:	b298      	uxth	r0, r3
 8001926:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <DrawChar+0x168>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	491b      	ldr	r1, [pc, #108]	; (8001998 <DrawChar+0x16c>)
 800192c:	4613      	mov	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4413      	add	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	88bb      	ldrh	r3, [r7, #4]
 800193a:	4619      	mov	r1, r3
 800193c:	f7ff fda0 	bl	8001480 <BSP_LCD_DrawPixel>
 8001940:	e012      	b.n	8001968 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	b29a      	uxth	r2, r3
 8001946:	88fb      	ldrh	r3, [r7, #6]
 8001948:	4413      	add	r3, r2
 800194a:	b298      	uxth	r0, r3
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <DrawChar+0x168>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4911      	ldr	r1, [pc, #68]	; (8001998 <DrawChar+0x16c>)
 8001952:	4613      	mov	r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	4413      	add	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	440b      	add	r3, r1
 800195c:	3304      	adds	r3, #4
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	88bb      	ldrh	r3, [r7, #4]
 8001962:	4619      	mov	r1, r3
 8001964:	f7ff fd8c 	bl	8001480 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	3301      	adds	r3, #1
 800196c:	61bb      	str	r3, [r7, #24]
 800196e:	8a3b      	ldrh	r3, [r7, #16]
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	429a      	cmp	r2, r3
 8001974:	d3c4      	bcc.n	8001900 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8001976:	88bb      	ldrh	r3, [r7, #4]
 8001978:	3301      	adds	r3, #1
 800197a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	3301      	adds	r3, #1
 8001980:	61fb      	str	r3, [r7, #28]
 8001982:	8a7b      	ldrh	r3, [r7, #18]
 8001984:	69fa      	ldr	r2, [r7, #28]
 8001986:	429a      	cmp	r2, r3
 8001988:	d384      	bcc.n	8001894 <DrawChar+0x68>
  }
}
 800198a:	bf00      	nop
 800198c:	3720      	adds	r7, #32
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	2000015c 	.word	0x2000015c
 8001998:	20000160 	.word	0x20000160

0800199c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af02      	add	r7, sp, #8
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
 80019a8:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80019aa:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <LL_FillBuffer+0x88>)
 80019ac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80019b0:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80019b2:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <LL_FillBuffer+0x8c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a1d      	ldr	r2, [pc, #116]	; (8001a2c <LL_FillBuffer+0x90>)
 80019b8:	2134      	movs	r1, #52	; 0x34
 80019ba:	fb01 f303 	mul.w	r3, r1, r3
 80019be:	4413      	add	r3, r2
 80019c0:	3348      	adds	r3, #72	; 0x48
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d103      	bne.n	80019d0 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80019c8:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <LL_FillBuffer+0x88>)
 80019ca:	2202      	movs	r2, #2
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	e002      	b.n	80019d6 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80019d0:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <LL_FillBuffer+0x88>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80019d6:	4a13      	ldr	r2, [pc, #76]	; (8001a24 <LL_FillBuffer+0x88>)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <LL_FillBuffer+0x88>)
 80019de:	4a14      	ldr	r2, [pc, #80]	; (8001a30 <LL_FillBuffer+0x94>)
 80019e0:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80019e2:	4810      	ldr	r0, [pc, #64]	; (8001a24 <LL_FillBuffer+0x88>)
 80019e4:	f002 f820 	bl	8003a28 <HAL_DMA2D_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d115      	bne.n	8001a1a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80019ee:	68f9      	ldr	r1, [r7, #12]
 80019f0:	480c      	ldr	r0, [pc, #48]	; (8001a24 <LL_FillBuffer+0x88>)
 80019f2:	f002 fa87 	bl	8003f04 <HAL_DMA2D_ConfigLayer>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d10e      	bne.n	8001a1a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80019fc:	68ba      	ldr	r2, [r7, #8]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69f9      	ldr	r1, [r7, #28]
 8001a06:	4807      	ldr	r0, [pc, #28]	; (8001a24 <LL_FillBuffer+0x88>)
 8001a08:	f002 f858 	bl	8003abc <HAL_DMA2D_Start>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d103      	bne.n	8001a1a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001a12:	210a      	movs	r1, #10
 8001a14:	4803      	ldr	r0, [pc, #12]	; (8001a24 <LL_FillBuffer+0x88>)
 8001a16:	f002 f87c 	bl	8003b12 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001a1a:	bf00      	nop
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	2000011c 	.word	0x2000011c
 8001a28:	2000015c 	.word	0x2000015c
 8001a2c:	200002fc 	.word	0x200002fc
 8001a30:	4002b000 	.word	0x4002b000

08001a34 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001a38:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <BSP_SDRAM_Init+0xac>)
 8001a3a:	4a2a      	ldr	r2, [pc, #168]	; (8001ae4 <BSP_SDRAM_Init+0xb0>)
 8001a3c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8001a3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ae8 <BSP_SDRAM_Init+0xb4>)
 8001a40:	2202      	movs	r2, #2
 8001a42:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8001a44:	4b28      	ldr	r3, [pc, #160]	; (8001ae8 <BSP_SDRAM_Init+0xb4>)
 8001a46:	2207      	movs	r2, #7
 8001a48:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8001a4a:	4b27      	ldr	r3, [pc, #156]	; (8001ae8 <BSP_SDRAM_Init+0xb4>)
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8001a50:	4b25      	ldr	r3, [pc, #148]	; (8001ae8 <BSP_SDRAM_Init+0xb4>)
 8001a52:	2207      	movs	r2, #7
 8001a54:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8001a56:	4b24      	ldr	r3, [pc, #144]	; (8001ae8 <BSP_SDRAM_Init+0xb4>)
 8001a58:	2202      	movs	r2, #2
 8001a5a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8001a5c:	4b22      	ldr	r3, [pc, #136]	; (8001ae8 <BSP_SDRAM_Init+0xb4>)
 8001a5e:	2202      	movs	r2, #2
 8001a60:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8001a62:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <BSP_SDRAM_Init+0xb4>)
 8001a64:	2202      	movs	r2, #2
 8001a66:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8001a68:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <BSP_SDRAM_Init+0xac>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001a6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ae0 <BSP_SDRAM_Init+0xac>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001a74:	4b1a      	ldr	r3, [pc, #104]	; (8001ae0 <BSP_SDRAM_Init+0xac>)
 8001a76:	2204      	movs	r2, #4
 8001a78:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001a7a:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <BSP_SDRAM_Init+0xac>)
 8001a7c:	2210      	movs	r2, #16
 8001a7e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001a80:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <BSP_SDRAM_Init+0xac>)
 8001a82:	2240      	movs	r2, #64	; 0x40
 8001a84:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8001a86:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <BSP_SDRAM_Init+0xac>)
 8001a88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a8c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001a8e:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <BSP_SDRAM_Init+0xac>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <BSP_SDRAM_Init+0xac>)
 8001a96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a9a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001a9c:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <BSP_SDRAM_Init+0xac>)
 8001a9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001aa2:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001aa4:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <BSP_SDRAM_Init+0xac>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001aaa:	2100      	movs	r1, #0
 8001aac:	480c      	ldr	r0, [pc, #48]	; (8001ae0 <BSP_SDRAM_Init+0xac>)
 8001aae:	f000 f87f 	bl	8001bb0 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001ab2:	490d      	ldr	r1, [pc, #52]	; (8001ae8 <BSP_SDRAM_Init+0xb4>)
 8001ab4:	480a      	ldr	r0, [pc, #40]	; (8001ae0 <BSP_SDRAM_Init+0xac>)
 8001ab6:	f006 f8e0 	bl	8007c7a <HAL_SDRAM_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <BSP_SDRAM_Init+0xb8>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	701a      	strb	r2, [r3, #0]
 8001ac6:	e002      	b.n	8001ace <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <BSP_SDRAM_Init+0xb8>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001ace:	f240 6003 	movw	r0, #1539	; 0x603
 8001ad2:	f000 f80d 	bl	8001af0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8001ad6:	4b05      	ldr	r3, [pc, #20]	; (8001aec <BSP_SDRAM_Init+0xb8>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200003a4 	.word	0x200003a4
 8001ae4:	a0000140 	.word	0xa0000140
 8001ae8:	200001fc 	.word	0x200001fc
 8001aec:	20000040 	.word	0x20000040

08001af0 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001afc:	4b2a      	ldr	r3, [pc, #168]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001b02:	4b29      	ldr	r3, [pc, #164]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b04:	2210      	movs	r2, #16
 8001b06:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001b08:	4b27      	ldr	r3, [pc, #156]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001b0e:	4b26      	ldr	r3, [pc, #152]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001b14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b18:	4923      	ldr	r1, [pc, #140]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b1a:	4824      	ldr	r0, [pc, #144]	; (8001bac <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001b1c:	f006 f8e1 	bl	8007ce2 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001b20:	2001      	movs	r0, #1
 8001b22:	f000 fbfb 	bl	800231c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001b26:	4b20      	ldr	r3, [pc, #128]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b28:	2202      	movs	r2, #2
 8001b2a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001b2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b2e:	2210      	movs	r2, #16
 8001b30:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001b32:	4b1d      	ldr	r3, [pc, #116]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001b38:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001b3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b42:	4919      	ldr	r1, [pc, #100]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b44:	4819      	ldr	r0, [pc, #100]	; (8001bac <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001b46:	f006 f8cc 	bl	8007ce2 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001b4a:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001b50:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b52:	2210      	movs	r2, #16
 8001b54:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8001b56:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b58:	2208      	movs	r2, #8
 8001b5a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001b62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b66:	4910      	ldr	r1, [pc, #64]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b68:	4810      	ldr	r0, [pc, #64]	; (8001bac <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001b6a:	f006 f8ba 	bl	8007ce2 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001b6e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001b72:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b76:	2204      	movs	r2, #4
 8001b78:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b7c:	2210      	movs	r2, #16
 8001b7e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4a07      	ldr	r2, [pc, #28]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b8a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001b8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b90:	4905      	ldr	r1, [pc, #20]	; (8001ba8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b92:	4806      	ldr	r0, [pc, #24]	; (8001bac <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001b94:	f006 f8a5 	bl	8007ce2 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	4804      	ldr	r0, [pc, #16]	; (8001bac <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001b9c:	f006 f8cc 	bl	8007d38 <HAL_SDRAM_ProgramRefreshRate>
}
 8001ba0:	bf00      	nop
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000218 	.word	0x20000218
 8001bac:	200003a4 	.word	0x200003a4

08001bb0 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b090      	sub	sp, #64	; 0x40
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001bba:	4b70      	ldr	r3, [pc, #448]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bbe:	4a6f      	ldr	r2, [pc, #444]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6393      	str	r3, [r2, #56]	; 0x38
 8001bc6:	4b6d      	ldr	r3, [pc, #436]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8001bd2:	4b6a      	ldr	r3, [pc, #424]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	4a69      	ldr	r2, [pc, #420]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001bd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4b67      	ldr	r3, [pc, #412]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bea:	4b64      	ldr	r3, [pc, #400]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4a63      	ldr	r2, [pc, #396]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001bf0:	f043 0304 	orr.w	r3, r3, #4
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4b61      	ldr	r3, [pc, #388]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	623b      	str	r3, [r7, #32]
 8001c00:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c02:	4b5e      	ldr	r3, [pc, #376]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a5d      	ldr	r2, [pc, #372]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001c08:	f043 0308 	orr.w	r3, r3, #8
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b5b      	ldr	r3, [pc, #364]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	61fb      	str	r3, [r7, #28]
 8001c18:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c1a:	4b58      	ldr	r3, [pc, #352]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a57      	ldr	r2, [pc, #348]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001c20:	f043 0310 	orr.w	r3, r3, #16
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b55      	ldr	r3, [pc, #340]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0310 	and.w	r3, r3, #16
 8001c2e:	61bb      	str	r3, [r7, #24]
 8001c30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c32:	4b52      	ldr	r3, [pc, #328]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a51      	ldr	r2, [pc, #324]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001c38:	f043 0320 	orr.w	r3, r3, #32
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b4f      	ldr	r3, [pc, #316]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0320 	and.w	r3, r3, #32
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c4a:	4b4c      	ldr	r3, [pc, #304]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a4b      	ldr	r2, [pc, #300]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b49      	ldr	r3, [pc, #292]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c62:	4b46      	ldr	r3, [pc, #280]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a45      	ldr	r2, [pc, #276]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b43      	ldr	r3, [pc, #268]	; (8001d7c <BSP_SDRAM_MspInit+0x1cc>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8001c82:	2302      	movs	r3, #2
 8001c84:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001c86:	230c      	movs	r3, #12
 8001c88:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8001c8a:	2308      	movs	r3, #8
 8001c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8001c8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c92:	4619      	mov	r1, r3
 8001c94:	483a      	ldr	r0, [pc, #232]	; (8001d80 <BSP_SDRAM_MspInit+0x1d0>)
 8001c96:	f002 fa63 	bl	8004160 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8001c9a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001ca0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4837      	ldr	r0, [pc, #220]	; (8001d84 <BSP_SDRAM_MspInit+0x1d4>)
 8001ca8:	f002 fa5a 	bl	8004160 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001cac:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001cb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4833      	ldr	r0, [pc, #204]	; (8001d88 <BSP_SDRAM_MspInit+0x1d8>)
 8001cba:	f002 fa51 	bl	8004160 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001cbe:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001cc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4830      	ldr	r0, [pc, #192]	; (8001d8c <BSP_SDRAM_MspInit+0x1dc>)
 8001ccc:	f002 fa48 	bl	8004160 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8001cd0:	f248 1333 	movw	r3, #33075	; 0x8133
 8001cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001cd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cda:	4619      	mov	r1, r3
 8001cdc:	482c      	ldr	r0, [pc, #176]	; (8001d90 <BSP_SDRAM_MspInit+0x1e0>)
 8001cde:	f002 fa3f 	bl	8004160 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8001ce2:	2328      	movs	r3, #40	; 0x28
 8001ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001ce6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cea:	4619      	mov	r1, r3
 8001cec:	4829      	ldr	r0, [pc, #164]	; (8001d94 <BSP_SDRAM_MspInit+0x1e4>)
 8001cee:	f002 fa37 	bl	8004160 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001cf2:	4b29      	ldr	r3, [pc, #164]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001cf8:	4b27      	ldr	r3, [pc, #156]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001cfa:	2280      	movs	r2, #128	; 0x80
 8001cfc:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001cfe:	4b26      	ldr	r3, [pc, #152]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d04:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8001d06:	4b24      	ldr	r3, [pc, #144]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001d08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d0c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d0e:	4b22      	ldr	r3, [pc, #136]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001d10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d14:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001d16:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001d18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d1c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8001d1e:	4b1e      	ldr	r3, [pc, #120]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001d24:	4b1c      	ldr	r3, [pc, #112]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001d26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d2a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8001d2c:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001d32:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001d34:	2203      	movs	r2, #3
 8001d36:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001d38:	4b17      	ldr	r3, [pc, #92]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001d3e:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001d44:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001d46:	4a15      	ldr	r2, [pc, #84]	; (8001d9c <BSP_SDRAM_MspInit+0x1ec>)
 8001d48:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001d4e:	631a      	str	r2, [r3, #48]	; 0x30
 8001d50:	4a11      	ldr	r2, [pc, #68]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8001d56:	4810      	ldr	r0, [pc, #64]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001d58:	f001 fb40 	bl	80033dc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8001d5c:	480e      	ldr	r0, [pc, #56]	; (8001d98 <BSP_SDRAM_MspInit+0x1e8>)
 8001d5e:	f001 fa8f 	bl	8003280 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	210f      	movs	r1, #15
 8001d66:	2038      	movs	r0, #56	; 0x38
 8001d68:	f001 f9e1 	bl	800312e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001d6c:	2038      	movs	r0, #56	; 0x38
 8001d6e:	f001 f9fa 	bl	8003166 <HAL_NVIC_EnableIRQ>
}
 8001d72:	bf00      	nop
 8001d74:	3740      	adds	r7, #64	; 0x40
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40020800 	.word	0x40020800
 8001d84:	40020c00 	.word	0x40020c00
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40021400 	.word	0x40021400
 8001d90:	40021800 	.word	0x40021800
 8001d94:	40021c00 	.word	0x40021c00
 8001d98:	20000228 	.word	0x20000228
 8001d9c:	40026410 	.word	0x40026410

08001da0 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	460a      	mov	r2, r1
 8001daa:	80fb      	strh	r3, [r7, #6]
 8001dac:	4613      	mov	r3, r2
 8001dae:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8001db4:	4a14      	ldr	r2, [pc, #80]	; (8001e08 <BSP_TS_Init+0x68>)
 8001db6:	88fb      	ldrh	r3, [r7, #6]
 8001db8:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8001dba:	4a14      	ldr	r2, [pc, #80]	; (8001e0c <BSP_TS_Init+0x6c>)
 8001dbc:	88bb      	ldrh	r3, [r7, #4]
 8001dbe:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8001dc0:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <BSP_TS_Init+0x70>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2070      	movs	r0, #112	; 0x70
 8001dc6:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <BSP_TS_Init+0x70>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2070      	movs	r0, #112	; 0x70
 8001dce:	4798      	blx	r3
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b51      	cmp	r3, #81	; 0x51
 8001dd4:	d111      	bne.n	8001dfa <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <BSP_TS_Init+0x74>)
 8001dd8:	4a0d      	ldr	r2, [pc, #52]	; (8001e10 <BSP_TS_Init+0x70>)
 8001dda:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <BSP_TS_Init+0x78>)
 8001dde:	2270      	movs	r2, #112	; 0x70
 8001de0:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8001de2:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <BSP_TS_Init+0x7c>)
 8001de4:	2208      	movs	r2, #8
 8001de6:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8001de8:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <BSP_TS_Init+0x74>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <BSP_TS_Init+0x78>)
 8001df0:	7812      	ldrb	r2, [r2, #0]
 8001df2:	b292      	uxth	r2, r2
 8001df4:	4610      	mov	r0, r2
 8001df6:	4798      	blx	r3
 8001df8:	e001      	b.n	8001dfe <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	2000028c 	.word	0x2000028c
 8001e0c:	2000028e 	.word	0x2000028e
 8001e10:	20000000 	.word	0x20000000
 8001e14:	20000288 	.word	0x20000288
 8001e18:	20000291 	.word	0x20000291
 8001e1c:	20000290 	.word	0x20000290

08001e20 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8001e20:	b590      	push	{r4, r7, lr}
 8001e22:	b097      	sub	sp, #92	; 0x5c
 8001e24:	af02      	add	r7, sp, #8
 8001e26:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8001e3a:	4b97      	ldr	r3, [pc, #604]	; (8002098 <BSP_TS_GetState+0x278>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	4a96      	ldr	r2, [pc, #600]	; (800209c <BSP_TS_GetState+0x27c>)
 8001e42:	7812      	ldrb	r2, [r2, #0]
 8001e44:	b292      	uxth	r2, r2
 8001e46:	4610      	mov	r0, r2
 8001e48:	4798      	blx	r3
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 81a8 	beq.w	80021ac <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e60:	e197      	b.n	8002192 <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8001e62:	4b8d      	ldr	r3, [pc, #564]	; (8002098 <BSP_TS_GetState+0x278>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	4a8c      	ldr	r2, [pc, #560]	; (800209c <BSP_TS_GetState+0x27c>)
 8001e6a:	7812      	ldrb	r2, [r2, #0]
 8001e6c:	b290      	uxth	r0, r2
 8001e6e:	f107 0120 	add.w	r1, r7, #32
 8001e72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e74:	0052      	lsls	r2, r2, #1
 8001e76:	188c      	adds	r4, r1, r2
 8001e78:	f107 0114 	add.w	r1, r7, #20
 8001e7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e7e:	0052      	lsls	r2, r2, #1
 8001e80:	440a      	add	r2, r1
 8001e82:	4621      	mov	r1, r4
 8001e84:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8001e86:	4b86      	ldr	r3, [pc, #536]	; (80020a0 <BSP_TS_GetState+0x280>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d11b      	bne.n	8001ec6 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 8001e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001e96:	4413      	add	r3, r2
 8001e98:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8001e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001ea4:	440b      	add	r3, r1
 8001ea6:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8001eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8001eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001ec0:	440b      	add	r3, r1
 8001ec2:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8001ec6:	4b76      	ldr	r3, [pc, #472]	; (80020a0 <BSP_TS_GetState+0x280>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d010      	beq.n	8001ef4 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 8001ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001eda:	4413      	add	r3, r2
 8001edc:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8001ee0:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001eee:	440b      	add	r3, r1
 8001ef0:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8001ef4:	4b6a      	ldr	r3, [pc, #424]	; (80020a0 <BSP_TS_GetState+0x280>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d010      	beq.n	8001f22 <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 8001f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001f08:	4413      	add	r3, r2
 8001f0a:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8001f0e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001f1c:	440b      	add	r3, r1
 8001f1e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8001f22:	4b5f      	ldr	r3, [pc, #380]	; (80020a0 <BSP_TS_GetState+0x280>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d01b      	beq.n	8001f66 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 8001f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001f36:	4413      	add	r3, r2
 8001f38:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8001f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001f44:	440b      	add	r3, r1
 8001f46:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8001f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001f52:	4413      	add	r3, r2
 8001f54:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8001f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001f60:	440b      	add	r3, r1
 8001f62:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8001f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001f6e:	4413      	add	r3, r2
 8001f70:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001f74:	4619      	mov	r1, r3
 8001f76:	4a4b      	ldr	r2, [pc, #300]	; (80020a4 <BSP_TS_GetState+0x284>)
 8001f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7e:	4299      	cmp	r1, r3
 8001f80:	d90e      	bls.n	8001fa0 <BSP_TS_GetState+0x180>
 8001f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8001f90:	4944      	ldr	r1, [pc, #272]	; (80020a4 <BSP_TS_GetState+0x284>)
 8001f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	e00d      	b.n	8001fbc <BSP_TS_GetState+0x19c>
 8001fa0:	4a40      	ldr	r2, [pc, #256]	; (80020a4 <BSP_TS_GetState+0x284>)
 8001fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001fb2:	440b      	add	r3, r1
 8001fb4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8001fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001fc8:	4413      	add	r3, r2
 8001fca:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4a35      	ldr	r2, [pc, #212]	; (80020a8 <BSP_TS_GetState+0x288>)
 8001fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd8:	4299      	cmp	r1, r3
 8001fda:	d90e      	bls.n	8001ffa <BSP_TS_GetState+0x1da>
 8001fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8001fea:	492f      	ldr	r1, [pc, #188]	; (80020a8 <BSP_TS_GetState+0x288>)
 8001fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	e00d      	b.n	8002016 <BSP_TS_GetState+0x1f6>
 8001ffa:	4a2b      	ldr	r2, [pc, #172]	; (80020a8 <BSP_TS_GetState+0x288>)
 8001ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002002:	b29a      	uxth	r2, r3
 8002004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800200c:	440b      	add	r3, r1
 800200e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	b29b      	uxth	r3, r3
 8002016:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 800201a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800201e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002022:	4413      	add	r3, r2
 8002024:	2b05      	cmp	r3, #5
 8002026:	dd17      	ble.n	8002058 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8002028:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002030:	4413      	add	r3, r2
 8002032:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002036:	4619      	mov	r1, r3
 8002038:	4a1a      	ldr	r2, [pc, #104]	; (80020a4 <BSP_TS_GetState+0x284>)
 800203a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800203c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8002040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002048:	4413      	add	r3, r2
 800204a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800204e:	4619      	mov	r1, r3
 8002050:	4a15      	ldr	r2, [pc, #84]	; (80020a8 <BSP_TS_GetState+0x288>)
 8002052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002054:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8002058:	4b10      	ldr	r3, [pc, #64]	; (800209c <BSP_TS_GetState+0x27c>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b70      	cmp	r3, #112	; 0x70
 800205e:	d125      	bne.n	80020ac <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 8002060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002068:	4413      	add	r3, r2
 800206a:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	4413      	add	r3, r2
 8002076:	460a      	mov	r2, r1
 8002078:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 800207a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002082:	4413      	add	r3, r2
 8002084:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800208c:	3304      	adds	r3, #4
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4413      	add	r3, r2
 8002092:	460a      	mov	r2, r1
 8002094:	809a      	strh	r2, [r3, #4]
 8002096:	e02c      	b.n	80020f2 <BSP_TS_GetState+0x2d2>
 8002098:	20000288 	.word	0x20000288
 800209c:	20000291 	.word	0x20000291
 80020a0:	20000290 	.word	0x20000290
 80020a4:	20000294 	.word	0x20000294
 80020a8:	200002a8 	.word	0x200002a8
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 80020ac:	4b42      	ldr	r3, [pc, #264]	; (80021b8 <BSP_TS_GetState+0x398>)
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	4619      	mov	r1, r3
 80020b2:	4a42      	ldr	r2, [pc, #264]	; (80021bc <BSP_TS_GetState+0x39c>)
 80020b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ba:	fb03 f301 	mul.w	r3, r3, r1
 80020be:	0b1b      	lsrs	r3, r3, #12
 80020c0:	b299      	uxth	r1, r3
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	4413      	add	r3, r2
 80020ca:	460a      	mov	r2, r1
 80020cc:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 80020ce:	4b3c      	ldr	r3, [pc, #240]	; (80021c0 <BSP_TS_GetState+0x3a0>)
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	4619      	mov	r1, r3
 80020d4:	4a3b      	ldr	r2, [pc, #236]	; (80021c4 <BSP_TS_GetState+0x3a4>)
 80020d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020dc:	fb03 f301 	mul.w	r3, r3, r1
 80020e0:	0b1b      	lsrs	r3, r3, #12
 80020e2:	b299      	uxth	r1, r3
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020e8:	3304      	adds	r3, #4
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	460a      	mov	r2, r1
 80020f0:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 80020f2:	4b35      	ldr	r3, [pc, #212]	; (80021c8 <BSP_TS_GetState+0x3a8>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	b298      	uxth	r0, r3
 80020f8:	f107 010c 	add.w	r1, r7, #12
 80020fc:	f107 0210 	add.w	r2, r7, #16
 8002100:	f107 0308 	add.w	r3, r7, #8
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	460b      	mov	r3, r1
 8002108:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800210a:	f7fe fbc7 	bl	800089c <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	b2d9      	uxtb	r1, r3
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002116:	4413      	add	r3, r2
 8002118:	3316      	adds	r3, #22
 800211a:	460a      	mov	r2, r1
 800211c:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	b2d9      	uxtb	r1, r3
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002126:	4413      	add	r3, r2
 8002128:	3320      	adds	r3, #32
 800212a:	460a      	mov	r2, r1
 800212c:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2b03      	cmp	r3, #3
 8002132:	d827      	bhi.n	8002184 <BSP_TS_GetState+0x364>
 8002134:	a201      	add	r2, pc, #4	; (adr r2, 800213c <BSP_TS_GetState+0x31c>)
 8002136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213a:	bf00      	nop
 800213c:	0800214d 	.word	0x0800214d
 8002140:	0800215b 	.word	0x0800215b
 8002144:	08002169 	.word	0x08002169
 8002148:	08002177 	.word	0x08002177
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002150:	4413      	add	r3, r2
 8002152:	331b      	adds	r3, #27
 8002154:	2201      	movs	r2, #1
 8002156:	701a      	strb	r2, [r3, #0]
          break;
 8002158:	e018      	b.n	800218c <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800215e:	4413      	add	r3, r2
 8002160:	331b      	adds	r3, #27
 8002162:	2202      	movs	r2, #2
 8002164:	701a      	strb	r2, [r3, #0]
          break;
 8002166:	e011      	b.n	800218c <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800216c:	4413      	add	r3, r2
 800216e:	331b      	adds	r3, #27
 8002170:	2203      	movs	r2, #3
 8002172:	701a      	strb	r2, [r3, #0]
          break;
 8002174:	e00a      	b.n	800218c <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800217a:	4413      	add	r3, r2
 800217c:	331b      	adds	r3, #27
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]
          break;
 8002182:	e003      	b.n	800218c <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 800218a:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 800218c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800218e:	3301      	adds	r3, #1
 8002190:	64bb      	str	r3, [r7, #72]	; 0x48
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	461a      	mov	r2, r3
 8002198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800219a:	4293      	cmp	r3, r2
 800219c:	f4ff ae61 	bcc.w	8001e62 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f813 	bl	80021cc <BSP_TS_Get_GestureId>
 80021a6:	4603      	mov	r3, r0
 80021a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80021ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3754      	adds	r7, #84	; 0x54
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd90      	pop	{r4, r7, pc}
 80021b8:	2000028c 	.word	0x2000028c
 80021bc:	20000294 	.word	0x20000294
 80021c0:	2000028e 	.word	0x2000028e
 80021c4:	200002a8 	.word	0x200002a8
 80021c8:	20000291 	.word	0x20000291

080021cc <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 80021d8:	2300      	movs	r3, #0
 80021da:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80021dc:	4b1f      	ldr	r3, [pc, #124]	; (800225c <BSP_TS_Get_GestureId+0x90>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	f107 0208 	add.w	r2, r7, #8
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe fb3e 	bl	800086a <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2b18      	cmp	r3, #24
 80021f2:	d01b      	beq.n	800222c <BSP_TS_Get_GestureId+0x60>
 80021f4:	2b18      	cmp	r3, #24
 80021f6:	d806      	bhi.n	8002206 <BSP_TS_Get_GestureId+0x3a>
 80021f8:	2b10      	cmp	r3, #16
 80021fa:	d00f      	beq.n	800221c <BSP_TS_Get_GestureId+0x50>
 80021fc:	2b14      	cmp	r3, #20
 80021fe:	d011      	beq.n	8002224 <BSP_TS_Get_GestureId+0x58>
 8002200:	2b00      	cmp	r3, #0
 8002202:	d007      	beq.n	8002214 <BSP_TS_Get_GestureId+0x48>
 8002204:	e022      	b.n	800224c <BSP_TS_Get_GestureId+0x80>
 8002206:	2b40      	cmp	r3, #64	; 0x40
 8002208:	d018      	beq.n	800223c <BSP_TS_Get_GestureId+0x70>
 800220a:	2b49      	cmp	r3, #73	; 0x49
 800220c:	d01a      	beq.n	8002244 <BSP_TS_Get_GestureId+0x78>
 800220e:	2b1c      	cmp	r3, #28
 8002210:	d010      	beq.n	8002234 <BSP_TS_Get_GestureId+0x68>
 8002212:	e01b      	b.n	800224c <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800221a:	e01a      	b.n	8002252 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002222:	e016      	b.n	8002252 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2202      	movs	r2, #2
 8002228:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800222a:	e012      	b.n	8002252 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2203      	movs	r2, #3
 8002230:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002232:	e00e      	b.n	8002252 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2204      	movs	r2, #4
 8002238:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800223a:	e00a      	b.n	8002252 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2205      	movs	r2, #5
 8002240:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002242:	e006      	b.n	8002252 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2206      	movs	r2, #6
 8002248:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800224a:	e002      	b.n	8002252 <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
      break;
 8002250:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8002252:	7bfb      	ldrb	r3, [r7, #15]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20000291 	.word	0x20000291

08002260 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002264:	2003      	movs	r0, #3
 8002266:	f000 ff57 	bl	8003118 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800226a:	2000      	movs	r0, #0
 800226c:	f000 f806 	bl	800227c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002270:	f008 fdde 	bl	800ae30 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_InitTick+0x54>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <HAL_InitTick+0x58>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	4619      	mov	r1, r3
 800228e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002292:	fbb3 f3f1 	udiv	r3, r3, r1
 8002296:	fbb2 f3f3 	udiv	r3, r2, r3
 800229a:	4618      	mov	r0, r3
 800229c:	f000 ff71 	bl	8003182 <HAL_SYSTICK_Config>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e00e      	b.n	80022c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b0f      	cmp	r3, #15
 80022ae:	d80a      	bhi.n	80022c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b0:	2200      	movs	r2, #0
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	f04f 30ff 	mov.w	r0, #4294967295
 80022b8:	f000 ff39 	bl	800312e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022bc:	4a06      	ldr	r2, [pc, #24]	; (80022d8 <HAL_InitTick+0x5c>)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	e000      	b.n	80022c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	200000a8 	.word	0x200000a8
 80022d4:	20000048 	.word	0x20000048
 80022d8:	20000044 	.word	0x20000044

080022dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <HAL_IncTick+0x20>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	4b06      	ldr	r3, [pc, #24]	; (8002300 <HAL_IncTick+0x24>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4413      	add	r3, r2
 80022ec:	4a04      	ldr	r2, [pc, #16]	; (8002300 <HAL_IncTick+0x24>)
 80022ee:	6013      	str	r3, [r2, #0]
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	20000048 	.word	0x20000048
 8002300:	200003d8 	.word	0x200003d8

08002304 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return uwTick;
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <HAL_GetTick+0x14>)
 800230a:	681b      	ldr	r3, [r3, #0]
}
 800230c:	4618      	mov	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	200003d8 	.word	0x200003d8

0800231c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002324:	f7ff ffee 	bl	8002304 <HAL_GetTick>
 8002328:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002334:	d005      	beq.n	8002342 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002336:	4b09      	ldr	r3, [pc, #36]	; (800235c <HAL_Delay+0x40>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4413      	add	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002342:	bf00      	nop
 8002344:	f7ff ffde 	bl	8002304 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	429a      	cmp	r2, r3
 8002352:	d8f7      	bhi.n	8002344 <HAL_Delay+0x28>
  {
  }
}
 8002354:	bf00      	nop
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000048 	.word	0x20000048

08002360 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e031      	b.n	80023da <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	2b00      	cmp	r3, #0
 800237c:	d109      	bne.n	8002392 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f008 fd7a 	bl	800ae78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f003 0310 	and.w	r3, r3, #16
 800239a:	2b00      	cmp	r3, #0
 800239c:	d116      	bne.n	80023cc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023a2:	4b10      	ldr	r3, [pc, #64]	; (80023e4 <HAL_ADC_Init+0x84>)
 80023a4:	4013      	ands	r3, r2
 80023a6:	f043 0202 	orr.w	r2, r3, #2
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 fc5c 	bl	8002c6c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f023 0303 	bic.w	r3, r3, #3
 80023c2:	f043 0201 	orr.w	r2, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40
 80023ca:	e001      	b.n	80023d0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	ffffeefd 	.word	0xffffeefd

080023e8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d101      	bne.n	8002402 <HAL_ADC_Start+0x1a>
 80023fe:	2302      	movs	r3, #2
 8002400:	e0a0      	b.n	8002544 <HAL_ADC_Start+0x15c>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b01      	cmp	r3, #1
 8002416:	d018      	beq.n	800244a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0201 	orr.w	r2, r2, #1
 8002426:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002428:	4b49      	ldr	r3, [pc, #292]	; (8002550 <HAL_ADC_Start+0x168>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a49      	ldr	r2, [pc, #292]	; (8002554 <HAL_ADC_Start+0x16c>)
 800242e:	fba2 2303 	umull	r2, r3, r2, r3
 8002432:	0c9a      	lsrs	r2, r3, #18
 8002434:	4613      	mov	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	4413      	add	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800243c:	e002      	b.n	8002444 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	3b01      	subs	r3, #1
 8002442:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f9      	bne.n	800243e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b01      	cmp	r3, #1
 8002456:	d174      	bne.n	8002542 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800245c:	4b3e      	ldr	r3, [pc, #248]	; (8002558 <HAL_ADC_Start+0x170>)
 800245e:	4013      	ands	r3, r2
 8002460:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002472:	2b00      	cmp	r3, #0
 8002474:	d007      	beq.n	8002486 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800247e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800248e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002492:	d106      	bne.n	80024a2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002498:	f023 0206 	bic.w	r2, r3, #6
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	645a      	str	r2, [r3, #68]	; 0x44
 80024a0:	e002      	b.n	80024a8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80024b8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80024ba:	4b28      	ldr	r3, [pc, #160]	; (800255c <HAL_ADC_Start+0x174>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 031f 	and.w	r3, r3, #31
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10f      	bne.n	80024e6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d136      	bne.n	8002542 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	e02d      	b.n	8002542 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a1d      	ldr	r2, [pc, #116]	; (8002560 <HAL_ADC_Start+0x178>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d10e      	bne.n	800250e <HAL_ADC_Start+0x126>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d107      	bne.n	800250e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800250c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800250e:	4b13      	ldr	r3, [pc, #76]	; (800255c <HAL_ADC_Start+0x174>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	2b00      	cmp	r3, #0
 8002518:	d113      	bne.n	8002542 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a11      	ldr	r2, [pc, #68]	; (8002564 <HAL_ADC_Start+0x17c>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d10e      	bne.n	8002542 <HAL_ADC_Start+0x15a>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d107      	bne.n	8002542 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002540:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	200000a8 	.word	0x200000a8
 8002554:	431bde83 	.word	0x431bde83
 8002558:	fffff8fe 	.word	0xfffff8fe
 800255c:	40012300 	.word	0x40012300
 8002560:	40012000 	.word	0x40012000
 8002564:	40012200 	.word	0x40012200

08002568 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	2300      	movs	r3, #0
 8002576:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b02      	cmp	r3, #2
 8002584:	bf0c      	ite	eq
 8002586:	2301      	moveq	r3, #1
 8002588:	2300      	movne	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0320 	and.w	r3, r3, #32
 8002598:	2b20      	cmp	r3, #32
 800259a:	bf0c      	ite	eq
 800259c:	2301      	moveq	r3, #1
 800259e:	2300      	movne	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d049      	beq.n	800263e <HAL_ADC_IRQHandler+0xd6>
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d046      	beq.n	800263e <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	f003 0310 	and.w	r3, r3, #16
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d105      	bne.n	80025c8 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d12b      	bne.n	800262e <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d127      	bne.n	800262e <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d006      	beq.n	80025fa <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d119      	bne.n	800262e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0220 	bic.w	r2, r2, #32
 8002608:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d105      	bne.n	800262e <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f043 0201 	orr.w	r2, r3, #1
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f007 fc28 	bl	8009e84 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f06f 0212 	mvn.w	r2, #18
 800263c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b04      	cmp	r3, #4
 800264a:	bf0c      	ite	eq
 800264c:	2301      	moveq	r3, #1
 800264e:	2300      	movne	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265e:	2b80      	cmp	r3, #128	; 0x80
 8002660:	bf0c      	ite	eq
 8002662:	2301      	moveq	r3, #1
 8002664:	2300      	movne	r3, #0
 8002666:	b2db      	uxtb	r3, r3
 8002668:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d057      	beq.n	8002720 <HAL_ADC_IRQHandler+0x1b8>
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d054      	beq.n	8002720 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	2b00      	cmp	r3, #0
 8002680:	d105      	bne.n	800268e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d139      	bne.n	8002710 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d006      	beq.n	80026b8 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d12b      	bne.n	8002710 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d124      	bne.n	8002710 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d11d      	bne.n	8002710 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d119      	bne.n	8002710 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002700:	2b00      	cmp	r3, #0
 8002702:	d105      	bne.n	8002710 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	f043 0201 	orr.w	r2, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 fc27 	bl	8002f64 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f06f 020c 	mvn.w	r2, #12
 800271e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b01      	cmp	r3, #1
 800272c:	bf0c      	ite	eq
 800272e:	2301      	moveq	r3, #1
 8002730:	2300      	movne	r3, #0
 8002732:	b2db      	uxtb	r3, r3
 8002734:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002740:	2b40      	cmp	r3, #64	; 0x40
 8002742:	bf0c      	ite	eq
 8002744:	2301      	moveq	r3, #1
 8002746:	2300      	movne	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d017      	beq.n	8002782 <HAL_ADC_IRQHandler+0x21a>
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d014      	beq.n	8002782 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b01      	cmp	r3, #1
 8002764:	d10d      	bne.n	8002782 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f932 	bl	80029dc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f06f 0201 	mvn.w	r2, #1
 8002780:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0320 	and.w	r3, r3, #32
 800278c:	2b20      	cmp	r3, #32
 800278e:	bf0c      	ite	eq
 8002790:	2301      	moveq	r3, #1
 8002792:	2300      	movne	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027a6:	bf0c      	ite	eq
 80027a8:	2301      	moveq	r3, #1
 80027aa:	2300      	movne	r3, #0
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d015      	beq.n	80027e2 <HAL_ADC_IRQHandler+0x27a>
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d012      	beq.n	80027e2 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c0:	f043 0202 	orr.w	r2, r3, #2
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f06f 0220 	mvn.w	r2, #32
 80027d0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f90c 	bl	80029f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f06f 0220 	mvn.w	r2, #32
 80027e0:	601a      	str	r2, [r3, #0]
  }
}
 80027e2:	bf00      	nop
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002802:	2b01      	cmp	r3, #1
 8002804:	d101      	bne.n	800280a <HAL_ADC_Start_DMA+0x1e>
 8002806:	2302      	movs	r3, #2
 8002808:	e0c7      	b.n	800299a <HAL_ADC_Start_DMA+0x1ae>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b01      	cmp	r3, #1
 800281e:	d018      	beq.n	8002852 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0201 	orr.w	r2, r2, #1
 800282e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002830:	4b5c      	ldr	r3, [pc, #368]	; (80029a4 <HAL_ADC_Start_DMA+0x1b8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a5c      	ldr	r2, [pc, #368]	; (80029a8 <HAL_ADC_Start_DMA+0x1bc>)
 8002836:	fba2 2303 	umull	r2, r3, r2, r3
 800283a:	0c9a      	lsrs	r2, r3, #18
 800283c:	4613      	mov	r3, r2
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	4413      	add	r3, r2
 8002842:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002844:	e002      	b.n	800284c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	3b01      	subs	r3, #1
 800284a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f9      	bne.n	8002846 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b01      	cmp	r3, #1
 800285e:	f040 809b 	bne.w	8002998 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002866:	4b51      	ldr	r3, [pc, #324]	; (80029ac <HAL_ADC_Start_DMA+0x1c0>)
 8002868:	4013      	ands	r3, r2
 800286a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287c:	2b00      	cmp	r3, #0
 800287e:	d007      	beq.n	8002890 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002888:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800289c:	d106      	bne.n	80028ac <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	f023 0206 	bic.w	r2, r3, #6
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	645a      	str	r2, [r3, #68]	; 0x44
 80028aa:	e002      	b.n	80028b2 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028be:	4a3c      	ldr	r2, [pc, #240]	; (80029b0 <HAL_ADC_Start_DMA+0x1c4>)
 80028c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c6:	4a3b      	ldr	r2, [pc, #236]	; (80029b4 <HAL_ADC_Start_DMA+0x1c8>)
 80028c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ce:	4a3a      	ldr	r2, [pc, #232]	; (80029b8 <HAL_ADC_Start_DMA+0x1cc>)
 80028d0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80028da:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80028ea:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028fa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	334c      	adds	r3, #76	; 0x4c
 8002906:	4619      	mov	r1, r3
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f000 fdc4 	bl	8003498 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002910:	4b2a      	ldr	r3, [pc, #168]	; (80029bc <HAL_ADC_Start_DMA+0x1d0>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 031f 	and.w	r3, r3, #31
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10f      	bne.n	800293c <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d136      	bne.n	8002998 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002938:	609a      	str	r2, [r3, #8]
 800293a:	e02d      	b.n	8002998 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a1f      	ldr	r2, [pc, #124]	; (80029c0 <HAL_ADC_Start_DMA+0x1d4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d10e      	bne.n	8002964 <HAL_ADC_Start_DMA+0x178>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d107      	bne.n	8002964 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002962:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002964:	4b15      	ldr	r3, [pc, #84]	; (80029bc <HAL_ADC_Start_DMA+0x1d0>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 0310 	and.w	r3, r3, #16
 800296c:	2b00      	cmp	r3, #0
 800296e:	d113      	bne.n	8002998 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a13      	ldr	r2, [pc, #76]	; (80029c4 <HAL_ADC_Start_DMA+0x1d8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d10e      	bne.n	8002998 <HAL_ADC_Start_DMA+0x1ac>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d107      	bne.n	8002998 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002996:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	200000a8 	.word	0x200000a8
 80029a8:	431bde83 	.word	0x431bde83
 80029ac:	fffff8fe 	.word	0xfffff8fe
 80029b0:	08002e61 	.word	0x08002e61
 80029b4:	08002f1b 	.word	0x08002f1b
 80029b8:	08002f37 	.word	0x08002f37
 80029bc:	40012300 	.word	0x40012300
 80029c0:	40012000 	.word	0x40012000
 80029c4:	40012200 	.word	0x40012200

080029c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x1c>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e115      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x248>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2b09      	cmp	r3, #9
 8002a2e:	d935      	bls.n	8002a9c <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68d9      	ldr	r1, [r3, #12]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4613      	mov	r3, r2
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	4413      	add	r3, r2
 8002a44:	3b1e      	subs	r3, #30
 8002a46:	2207      	movs	r2, #7
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43da      	mvns	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	400a      	ands	r2, r1
 8002a54:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a7f      	ldr	r2, [pc, #508]	; (8002c58 <HAL_ADC_ConfigChannel+0x254>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d10a      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68d9      	ldr	r1, [r3, #12]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	061a      	lsls	r2, r3, #24
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	60da      	str	r2, [r3, #12]
 8002a74:	e035      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68d9      	ldr	r1, [r3, #12]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	4618      	mov	r0, r3
 8002a88:	4603      	mov	r3, r0
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	4403      	add	r3, r0
 8002a8e:	3b1e      	subs	r3, #30
 8002a90:	409a      	lsls	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	e022      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6919      	ldr	r1, [r3, #16]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4613      	mov	r3, r2
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	4413      	add	r3, r2
 8002ab0:	2207      	movs	r2, #7
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43da      	mvns	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	400a      	ands	r2, r1
 8002abe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6919      	ldr	r1, [r3, #16]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	4403      	add	r3, r0
 8002ad8:	409a      	lsls	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b06      	cmp	r3, #6
 8002ae8:	d824      	bhi.n	8002b34 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	3b05      	subs	r3, #5
 8002afc:	221f      	movs	r2, #31
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43da      	mvns	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	400a      	ands	r2, r1
 8002b0a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	4618      	mov	r0, r3
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	3b05      	subs	r3, #5
 8002b26:	fa00 f203 	lsl.w	r2, r0, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	635a      	str	r2, [r3, #52]	; 0x34
 8002b32:	e04c      	b.n	8002bce <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b0c      	cmp	r3, #12
 8002b3a:	d824      	bhi.n	8002b86 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3b23      	subs	r3, #35	; 0x23
 8002b4e:	221f      	movs	r2, #31
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43da      	mvns	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	400a      	ands	r2, r1
 8002b5c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	3b23      	subs	r3, #35	; 0x23
 8002b78:	fa00 f203 	lsl.w	r2, r0, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	631a      	str	r2, [r3, #48]	; 0x30
 8002b84:	e023      	b.n	8002bce <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	3b41      	subs	r3, #65	; 0x41
 8002b98:	221f      	movs	r2, #31
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	43da      	mvns	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	400a      	ands	r2, r1
 8002ba6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3b41      	subs	r3, #65	; 0x41
 8002bc2:	fa00 f203 	lsl.w	r2, r0, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a22      	ldr	r2, [pc, #136]	; (8002c5c <HAL_ADC_ConfigChannel+0x258>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d109      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x1e8>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b12      	cmp	r3, #18
 8002bde:	d105      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002be0:	4b1f      	ldr	r3, [pc, #124]	; (8002c60 <HAL_ADC_ConfigChannel+0x25c>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	4a1e      	ldr	r2, [pc, #120]	; (8002c60 <HAL_ADC_ConfigChannel+0x25c>)
 8002be6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bea:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a1a      	ldr	r2, [pc, #104]	; (8002c5c <HAL_ADC_ConfigChannel+0x258>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d125      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x23e>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a17      	ldr	r2, [pc, #92]	; (8002c58 <HAL_ADC_ConfigChannel+0x254>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d003      	beq.n	8002c08 <HAL_ADC_ConfigChannel+0x204>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b11      	cmp	r3, #17
 8002c06:	d11c      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002c08:	4b15      	ldr	r3, [pc, #84]	; (8002c60 <HAL_ADC_ConfigChannel+0x25c>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	4a14      	ldr	r2, [pc, #80]	; (8002c60 <HAL_ADC_ConfigChannel+0x25c>)
 8002c0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c12:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a0f      	ldr	r2, [pc, #60]	; (8002c58 <HAL_ADC_ConfigChannel+0x254>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d111      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002c1e:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <HAL_ADC_ConfigChannel+0x260>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a11      	ldr	r2, [pc, #68]	; (8002c68 <HAL_ADC_ConfigChannel+0x264>)
 8002c24:	fba2 2303 	umull	r2, r3, r2, r3
 8002c28:	0c9a      	lsrs	r2, r3, #18
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002c34:	e002      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f9      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	10000012 	.word	0x10000012
 8002c5c:	40012000 	.word	0x40012000
 8002c60:	40012300 	.word	0x40012300
 8002c64:	200000a8 	.word	0x200000a8
 8002c68:	431bde83 	.word	0x431bde83

08002c6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002c74:	4b78      	ldr	r3, [pc, #480]	; (8002e58 <ADC_Init+0x1ec>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	4a77      	ldr	r2, [pc, #476]	; (8002e58 <ADC_Init+0x1ec>)
 8002c7a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002c7e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002c80:	4b75      	ldr	r3, [pc, #468]	; (8002e58 <ADC_Init+0x1ec>)
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	4973      	ldr	r1, [pc, #460]	; (8002e58 <ADC_Init+0x1ec>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6859      	ldr	r1, [r3, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	021a      	lsls	r2, r3, #8
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002cc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6859      	ldr	r1, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ce2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6899      	ldr	r1, [r3, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfa:	4a58      	ldr	r2, [pc, #352]	; (8002e5c <ADC_Init+0x1f0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d022      	beq.n	8002d46 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6899      	ldr	r1, [r3, #8]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6899      	ldr	r1, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	e00f      	b.n	8002d66 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d64:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0202 	bic.w	r2, r2, #2
 8002d74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6899      	ldr	r1, [r3, #8]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	005a      	lsls	r2, r3, #1
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d01b      	beq.n	8002dcc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002da2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002db2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6859      	ldr	r1, [r3, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	035a      	lsls	r2, r3, #13
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	e007      	b.n	8002ddc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dda:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002dea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	051a      	lsls	r2, r3, #20
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6899      	ldr	r1, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e1e:	025a      	lsls	r2, r3, #9
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6899      	ldr	r1, [r3, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	029a      	lsls	r2, r3, #10
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	609a      	str	r2, [r3, #8]
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	40012300 	.word	0x40012300
 8002e5c:	0f000001 	.word	0x0f000001

08002e60 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d13c      	bne.n	8002ef4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d12b      	bne.n	8002eec <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d127      	bne.n	8002eec <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d006      	beq.n	8002eb8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d119      	bne.n	8002eec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0220 	bic.w	r2, r2, #32
 8002ec6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d105      	bne.n	8002eec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	f043 0201 	orr.w	r2, r3, #1
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f006 ffc9 	bl	8009e84 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ef2:	e00e      	b.n	8002f12 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	f003 0310 	and.w	r3, r3, #16
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f7ff fd75 	bl	80029f0 <HAL_ADC_ErrorCallback>
}
 8002f06:	e004      	b.n	8002f12 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	4798      	blx	r3
}
 8002f12:	bf00      	nop
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b084      	sub	sp, #16
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f26:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f7ff fd4d 	bl	80029c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f2e:	bf00      	nop
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b084      	sub	sp, #16
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f42:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2240      	movs	r2, #64	; 0x40
 8002f48:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4e:	f043 0204 	orr.w	r2, r3, #4
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f7ff fd4a 	bl	80029f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f5c:	bf00      	nop
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f88:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <__NVIC_SetPriorityGrouping+0x40>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f94:	4013      	ands	r3, r2
 8002f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002fa0:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <__NVIC_SetPriorityGrouping+0x44>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fa6:	4a04      	ldr	r2, [pc, #16]	; (8002fb8 <__NVIC_SetPriorityGrouping+0x40>)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	60d3      	str	r3, [r2, #12]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	e000ed00 	.word	0xe000ed00
 8002fbc:	05fa0000 	.word	0x05fa0000

08002fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc4:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	0a1b      	lsrs	r3, r3, #8
 8002fca:	f003 0307 	and.w	r3, r3, #7
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	db0b      	blt.n	8003006 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	f003 021f 	and.w	r2, r3, #31
 8002ff4:	4907      	ldr	r1, [pc, #28]	; (8003014 <__NVIC_EnableIRQ+0x38>)
 8002ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8003002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	e000e100 	.word	0xe000e100

08003018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	6039      	str	r1, [r7, #0]
 8003022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003028:	2b00      	cmp	r3, #0
 800302a:	db0a      	blt.n	8003042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	b2da      	uxtb	r2, r3
 8003030:	490c      	ldr	r1, [pc, #48]	; (8003064 <__NVIC_SetPriority+0x4c>)
 8003032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003036:	0112      	lsls	r2, r2, #4
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	440b      	add	r3, r1
 800303c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003040:	e00a      	b.n	8003058 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	b2da      	uxtb	r2, r3
 8003046:	4908      	ldr	r1, [pc, #32]	; (8003068 <__NVIC_SetPriority+0x50>)
 8003048:	79fb      	ldrb	r3, [r7, #7]
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	3b04      	subs	r3, #4
 8003050:	0112      	lsls	r2, r2, #4
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	440b      	add	r3, r1
 8003056:	761a      	strb	r2, [r3, #24]
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	e000e100 	.word	0xe000e100
 8003068:	e000ed00 	.word	0xe000ed00

0800306c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800306c:	b480      	push	{r7}
 800306e:	b089      	sub	sp, #36	; 0x24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f1c3 0307 	rsb	r3, r3, #7
 8003086:	2b04      	cmp	r3, #4
 8003088:	bf28      	it	cs
 800308a:	2304      	movcs	r3, #4
 800308c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	3304      	adds	r3, #4
 8003092:	2b06      	cmp	r3, #6
 8003094:	d902      	bls.n	800309c <NVIC_EncodePriority+0x30>
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3b03      	subs	r3, #3
 800309a:	e000      	b.n	800309e <NVIC_EncodePriority+0x32>
 800309c:	2300      	movs	r3, #0
 800309e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a0:	f04f 32ff 	mov.w	r2, #4294967295
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43da      	mvns	r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	401a      	ands	r2, r3
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b4:	f04f 31ff 	mov.w	r1, #4294967295
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	fa01 f303 	lsl.w	r3, r1, r3
 80030be:	43d9      	mvns	r1, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c4:	4313      	orrs	r3, r2
         );
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3724      	adds	r7, #36	; 0x24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
	...

080030d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3b01      	subs	r3, #1
 80030e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030e4:	d301      	bcc.n	80030ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030e6:	2301      	movs	r3, #1
 80030e8:	e00f      	b.n	800310a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ea:	4a0a      	ldr	r2, [pc, #40]	; (8003114 <SysTick_Config+0x40>)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030f2:	210f      	movs	r1, #15
 80030f4:	f04f 30ff 	mov.w	r0, #4294967295
 80030f8:	f7ff ff8e 	bl	8003018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030fc:	4b05      	ldr	r3, [pc, #20]	; (8003114 <SysTick_Config+0x40>)
 80030fe:	2200      	movs	r2, #0
 8003100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003102:	4b04      	ldr	r3, [pc, #16]	; (8003114 <SysTick_Config+0x40>)
 8003104:	2207      	movs	r2, #7
 8003106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	e000e010 	.word	0xe000e010

08003118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff ff29 	bl	8002f78 <__NVIC_SetPriorityGrouping>
}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800312e:	b580      	push	{r7, lr}
 8003130:	b086      	sub	sp, #24
 8003132:	af00      	add	r7, sp, #0
 8003134:	4603      	mov	r3, r0
 8003136:	60b9      	str	r1, [r7, #8]
 8003138:	607a      	str	r2, [r7, #4]
 800313a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003140:	f7ff ff3e 	bl	8002fc0 <__NVIC_GetPriorityGrouping>
 8003144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	68b9      	ldr	r1, [r7, #8]
 800314a:	6978      	ldr	r0, [r7, #20]
 800314c:	f7ff ff8e 	bl	800306c <NVIC_EncodePriority>
 8003150:	4602      	mov	r2, r0
 8003152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003156:	4611      	mov	r1, r2
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff ff5d 	bl	8003018 <__NVIC_SetPriority>
}
 800315e:	bf00      	nop
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b082      	sub	sp, #8
 800316a:	af00      	add	r7, sp, #0
 800316c:	4603      	mov	r3, r0
 800316e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff ff31 	bl	8002fdc <__NVIC_EnableIRQ>
}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b082      	sub	sp, #8
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7ff ffa2 	bl	80030d4 <SysTick_Config>
 8003190:	4603      	mov	r3, r0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e062      	b.n	8003274 <HAL_DCMI_Init+0xd8>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d102      	bne.n	80031c0 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else  
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f007 fed8 	bl	800af70 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6819      	ldr	r1, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	4b2a      	ldr	r3, [pc, #168]	; (800327c <HAL_DCMI_Init+0xe0>)
 80031d4:	400b      	ands	r3, r1
 80031d6:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6819      	ldr	r1, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80031ec:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80031f8:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003204:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8003210:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003216:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800321c:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	601a      	str	r2, [r3, #0]
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b10      	cmp	r3, #16
 800322c:	d112      	bne.n	8003254 <HAL_DCMI_Init+0xb8>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	7f1b      	ldrb	r3, [r3, #28]
 8003232:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	7f5b      	ldrb	r3, [r3, #29]
 8003238:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 800323a:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	7f9b      	ldrb	r3, [r3, #30]
 8003240:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8003242:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	7fdb      	ldrb	r3, [r3, #31]
 800324a:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8003250:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8003252:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 021e 	orr.w	r2, r2, #30
 8003262:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	ffe0f007 	.word	0xffe0f007

08003280 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800328c:	f7ff f83a 	bl	8002304 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e099      	b.n	80033d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0201 	bic.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032bc:	e00f      	b.n	80032de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032be:	f7ff f821 	bl	8002304 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b05      	cmp	r3, #5
 80032ca:	d908      	bls.n	80032de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2220      	movs	r2, #32
 80032d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2203      	movs	r2, #3
 80032d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e078      	b.n	80033d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1e8      	bne.n	80032be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	4b38      	ldr	r3, [pc, #224]	; (80033d8 <HAL_DMA_Init+0x158>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800330a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003316:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003322:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	4313      	orrs	r3, r2
 800332e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	2b04      	cmp	r3, #4
 8003336:	d107      	bne.n	8003348 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003340:	4313      	orrs	r3, r2
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	4313      	orrs	r3, r2
 8003346:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f023 0307 	bic.w	r3, r3, #7
 800335e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	697a      	ldr	r2, [r7, #20]
 8003366:	4313      	orrs	r3, r2
 8003368:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	2b04      	cmp	r3, #4
 8003370:	d117      	bne.n	80033a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00e      	beq.n	80033a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 fad5 	bl	8003934 <DMA_CheckFifoParam>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2240      	movs	r2, #64	; 0x40
 8003394:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800339e:	2301      	movs	r3, #1
 80033a0:	e016      	b.n	80033d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 fa8c 	bl	80038c8 <DMA_CalcBaseAndBitshift>
 80033b0:	4603      	mov	r3, r0
 80033b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b8:	223f      	movs	r2, #63	; 0x3f
 80033ba:	409a      	lsls	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3718      	adds	r7, #24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	f010803f 	.word	0xf010803f

080033dc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e050      	b.n	8003490 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d101      	bne.n	80033fe <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80033fa:	2302      	movs	r3, #2
 80033fc:	e048      	b.n	8003490 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0201 	bic.w	r2, r2, #1
 800340c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2200      	movs	r2, #0
 800341c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2200      	movs	r2, #0
 8003424:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2200      	movs	r2, #0
 800342c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2200      	movs	r2, #0
 8003434:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2221      	movs	r2, #33	; 0x21
 800343c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 fa42 	bl	80038c8 <DMA_CalcBaseAndBitshift>
 8003444:	4603      	mov	r3, r0
 8003446:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344c:	223f      	movs	r2, #63	; 0x3f
 800344e:	409a      	lsls	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
 80034a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <HAL_DMA_Start_IT+0x26>
 80034ba:	2302      	movs	r3, #2
 80034bc:	e048      	b.n	8003550 <HAL_DMA_Start_IT+0xb8>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d137      	bne.n	8003542 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2202      	movs	r2, #2
 80034d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	68b9      	ldr	r1, [r7, #8]
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 f9c0 	bl	800386c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f0:	223f      	movs	r2, #63	; 0x3f
 80034f2:	409a      	lsls	r2, r3
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0216 	orr.w	r2, r2, #22
 8003506:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695a      	ldr	r2, [r3, #20]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003516:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	2b00      	cmp	r3, #0
 800351e:	d007      	beq.n	8003530 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0208 	orr.w	r2, r2, #8
 800352e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0201 	orr.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	e005      	b.n	800354e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800354a:	2302      	movs	r3, #2
 800354c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800354e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3718      	adds	r7, #24
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003560:	2300      	movs	r3, #0
 8003562:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003564:	4b92      	ldr	r3, [pc, #584]	; (80037b0 <HAL_DMA_IRQHandler+0x258>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a92      	ldr	r2, [pc, #584]	; (80037b4 <HAL_DMA_IRQHandler+0x25c>)
 800356a:	fba2 2303 	umull	r2, r3, r2, r3
 800356e:	0a9b      	lsrs	r3, r3, #10
 8003570:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003576:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003582:	2208      	movs	r2, #8
 8003584:	409a      	lsls	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	4013      	ands	r3, r2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d01a      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d013      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0204 	bic.w	r2, r2, #4
 80035aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b0:	2208      	movs	r2, #8
 80035b2:	409a      	lsls	r2, r3
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035bc:	f043 0201 	orr.w	r2, r3, #1
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c8:	2201      	movs	r2, #1
 80035ca:	409a      	lsls	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4013      	ands	r3, r2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d012      	beq.n	80035fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00b      	beq.n	80035fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e6:	2201      	movs	r2, #1
 80035e8:	409a      	lsls	r2, r3
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f2:	f043 0202 	orr.w	r2, r3, #2
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fe:	2204      	movs	r2, #4
 8003600:	409a      	lsls	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4013      	ands	r3, r2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d012      	beq.n	8003630 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00b      	beq.n	8003630 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361c:	2204      	movs	r2, #4
 800361e:	409a      	lsls	r2, r3
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003628:	f043 0204 	orr.w	r2, r3, #4
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003634:	2210      	movs	r2, #16
 8003636:	409a      	lsls	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4013      	ands	r3, r2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d043      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	2b00      	cmp	r3, #0
 800364c:	d03c      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003652:	2210      	movs	r2, #16
 8003654:	409a      	lsls	r2, r3
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d018      	beq.n	800369a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d108      	bne.n	8003688 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	2b00      	cmp	r3, #0
 800367c:	d024      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	4798      	blx	r3
 8003686:	e01f      	b.n	80036c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800368c:	2b00      	cmp	r3, #0
 800368e:	d01b      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	4798      	blx	r3
 8003698:	e016      	b.n	80036c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d107      	bne.n	80036b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0208 	bic.w	r2, r2, #8
 80036b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036cc:	2220      	movs	r2, #32
 80036ce:	409a      	lsls	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 808e 	beq.w	80037f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0310 	and.w	r3, r3, #16
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 8086 	beq.w	80037f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ee:	2220      	movs	r2, #32
 80036f0:	409a      	lsls	r2, r3
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b05      	cmp	r3, #5
 8003700:	d136      	bne.n	8003770 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0216 	bic.w	r2, r2, #22
 8003710:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695a      	ldr	r2, [r3, #20]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003720:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	d103      	bne.n	8003732 <HAL_DMA_IRQHandler+0x1da>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800372e:	2b00      	cmp	r3, #0
 8003730:	d007      	beq.n	8003742 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0208 	bic.w	r2, r2, #8
 8003740:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003746:	223f      	movs	r2, #63	; 0x3f
 8003748:	409a      	lsls	r2, r3
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003762:	2b00      	cmp	r3, #0
 8003764:	d07d      	beq.n	8003862 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	4798      	blx	r3
        }
        return;
 800376e:	e078      	b.n	8003862 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d01c      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d108      	bne.n	800379e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003790:	2b00      	cmp	r3, #0
 8003792:	d030      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	4798      	blx	r3
 800379c:	e02b      	b.n	80037f6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d027      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	4798      	blx	r3
 80037ae:	e022      	b.n	80037f6 <HAL_DMA_IRQHandler+0x29e>
 80037b0:	200000a8 	.word	0x200000a8
 80037b4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10f      	bne.n	80037e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0210 	bic.w	r2, r2, #16
 80037d4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d032      	beq.n	8003864 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d022      	beq.n	8003850 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2205      	movs	r2, #5
 800380e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0201 	bic.w	r2, r2, #1
 8003820:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	3301      	adds	r3, #1
 8003826:	60bb      	str	r3, [r7, #8]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	429a      	cmp	r2, r3
 800382c:	d307      	bcc.n	800383e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1f2      	bne.n	8003822 <HAL_DMA_IRQHandler+0x2ca>
 800383c:	e000      	b.n	8003840 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800383e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	4798      	blx	r3
 8003860:	e000      	b.n	8003864 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003862:	bf00      	nop
    }
  }
}
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop

0800386c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003888:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b40      	cmp	r3, #64	; 0x40
 8003898:	d108      	bne.n	80038ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80038aa:	e007      	b.n	80038bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	60da      	str	r2, [r3, #12]
}
 80038bc:	bf00      	nop
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	3b10      	subs	r3, #16
 80038d8:	4a13      	ldr	r2, [pc, #76]	; (8003928 <DMA_CalcBaseAndBitshift+0x60>)
 80038da:	fba2 2303 	umull	r2, r3, r2, r3
 80038de:	091b      	lsrs	r3, r3, #4
 80038e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038e2:	4a12      	ldr	r2, [pc, #72]	; (800392c <DMA_CalcBaseAndBitshift+0x64>)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4413      	add	r3, r2
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	461a      	mov	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2b03      	cmp	r3, #3
 80038f4:	d908      	bls.n	8003908 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <DMA_CalcBaseAndBitshift+0x68>)
 80038fe:	4013      	ands	r3, r2
 8003900:	1d1a      	adds	r2, r3, #4
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	659a      	str	r2, [r3, #88]	; 0x58
 8003906:	e006      	b.n	8003916 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	4b08      	ldr	r3, [pc, #32]	; (8003930 <DMA_CalcBaseAndBitshift+0x68>)
 8003910:	4013      	ands	r3, r2
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800391a:	4618      	mov	r0, r3
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	aaaaaaab 	.word	0xaaaaaaab
 800392c:	0800e37c 	.word	0x0800e37c
 8003930:	fffffc00 	.word	0xfffffc00

08003934 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800393c:	2300      	movs	r3, #0
 800393e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003944:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d11f      	bne.n	800398e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b03      	cmp	r3, #3
 8003952:	d855      	bhi.n	8003a00 <DMA_CheckFifoParam+0xcc>
 8003954:	a201      	add	r2, pc, #4	; (adr r2, 800395c <DMA_CheckFifoParam+0x28>)
 8003956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395a:	bf00      	nop
 800395c:	0800396d 	.word	0x0800396d
 8003960:	0800397f 	.word	0x0800397f
 8003964:	0800396d 	.word	0x0800396d
 8003968:	08003a01 	.word	0x08003a01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d045      	beq.n	8003a04 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800397c:	e042      	b.n	8003a04 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003982:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003986:	d13f      	bne.n	8003a08 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800398c:	e03c      	b.n	8003a08 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003996:	d121      	bne.n	80039dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b03      	cmp	r3, #3
 800399c:	d836      	bhi.n	8003a0c <DMA_CheckFifoParam+0xd8>
 800399e:	a201      	add	r2, pc, #4	; (adr r2, 80039a4 <DMA_CheckFifoParam+0x70>)
 80039a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a4:	080039b5 	.word	0x080039b5
 80039a8:	080039bb 	.word	0x080039bb
 80039ac:	080039b5 	.word	0x080039b5
 80039b0:	080039cd 	.word	0x080039cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	73fb      	strb	r3, [r7, #15]
      break;
 80039b8:	e02f      	b.n	8003a1a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d024      	beq.n	8003a10 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ca:	e021      	b.n	8003a10 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039d4:	d11e      	bne.n	8003a14 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039da:	e01b      	b.n	8003a14 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d902      	bls.n	80039e8 <DMA_CheckFifoParam+0xb4>
 80039e2:	2b03      	cmp	r3, #3
 80039e4:	d003      	beq.n	80039ee <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039e6:	e018      	b.n	8003a1a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	73fb      	strb	r3, [r7, #15]
      break;
 80039ec:	e015      	b.n	8003a1a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00e      	beq.n	8003a18 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	73fb      	strb	r3, [r7, #15]
      break;
 80039fe:	e00b      	b.n	8003a18 <DMA_CheckFifoParam+0xe4>
      break;
 8003a00:	bf00      	nop
 8003a02:	e00a      	b.n	8003a1a <DMA_CheckFifoParam+0xe6>
      break;
 8003a04:	bf00      	nop
 8003a06:	e008      	b.n	8003a1a <DMA_CheckFifoParam+0xe6>
      break;
 8003a08:	bf00      	nop
 8003a0a:	e006      	b.n	8003a1a <DMA_CheckFifoParam+0xe6>
      break;
 8003a0c:	bf00      	nop
 8003a0e:	e004      	b.n	8003a1a <DMA_CheckFifoParam+0xe6>
      break;
 8003a10:	bf00      	nop
 8003a12:	e002      	b.n	8003a1a <DMA_CheckFifoParam+0xe6>
      break;   
 8003a14:	bf00      	nop
 8003a16:	e000      	b.n	8003a1a <DMA_CheckFifoParam+0xe6>
      break;
 8003a18:	bf00      	nop
    }
  } 
  
  return status; 
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3714      	adds	r7, #20
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e039      	b.n	8003aae <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d106      	bne.n	8003a54 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f007 fb4c 	bl	800b0ec <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a78:	f023 0107 	bic.w	r1, r3, #7
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a8e:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <HAL_DMA2D_Init+0x90>)
 8003a90:	4013      	ands	r3, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	68d1      	ldr	r1, [r2, #12]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6812      	ldr	r2, [r2, #0]
 8003a9a:	430b      	orrs	r3, r1
 8003a9c:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	ffffc000 	.word	0xffffc000

08003abc <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_DMA2D_Start+0x1c>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e018      	b.n	8003b0a <HAL_DMA2D_Start+0x4e>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	68b9      	ldr	r1, [r7, #8]
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 fa98 	bl	8004028 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0201 	orr.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b086      	sub	sp, #24
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
 8003b1a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d056      	beq.n	8003bdc <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003b2e:	f7fe fbe9 	bl	8002304 <HAL_GetTick>
 8003b32:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003b34:	e04b      	b.n	8003bce <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d023      	beq.n	8003b90 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d005      	beq.n	8003b5e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b56:	f043 0202 	orr.w	r2, r3, #2
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d005      	beq.n	8003b74 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6c:	f043 0201 	orr.w	r2, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2221      	movs	r2, #33	; 0x21
 8003b7a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2204      	movs	r2, #4
 8003b80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e0a5      	b.n	8003cdc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b96:	d01a      	beq.n	8003bce <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003b98:	f7fe fbb4 	bl	8002304 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d302      	bcc.n	8003bae <HAL_DMA2D_PollForTransfer+0x9c>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10f      	bne.n	8003bce <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb2:	f043 0220 	orr.w	r2, r3, #32
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2203      	movs	r2, #3
 8003bbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e086      	b.n	8003cdc <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0ac      	beq.n	8003b36 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d061      	beq.n	8003cc2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bfe:	f7fe fb81 	bl	8002304 <HAL_GetTick>
 8003c02:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003c04:	e056      	b.n	8003cb4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d02e      	beq.n	8003c76 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d005      	beq.n	8003c2e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c26:	f043 0204 	orr.w	r2, r3, #4
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f003 0320 	and.w	r3, r3, #32
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3c:	f043 0202 	orr.w	r2, r3, #2
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d005      	beq.n	8003c5a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c52:	f043 0201 	orr.w	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2229      	movs	r2, #41	; 0x29
 8003c60:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2204      	movs	r2, #4
 8003c66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e032      	b.n	8003cdc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7c:	d01a      	beq.n	8003cb4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003c7e:	f7fe fb41 	bl	8002304 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d302      	bcc.n	8003c94 <HAL_DMA2D_PollForTransfer+0x182>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10f      	bne.n	8003cb4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c98:	f043 0220 	orr.w	r2, r3, #32
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2203      	movs	r2, #3
 8003ca4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e013      	b.n	8003cdc <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f003 0310 	and.w	r3, r3, #16
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0a1      	beq.n	8003c06 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2212      	movs	r2, #18
 8003cc8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d026      	beq.n	8003d54 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d021      	beq.n	8003d54 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d1e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d24:	f043 0201 	orr.w	r2, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2201      	movs	r2, #1
 8003d32:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2204      	movs	r2, #4
 8003d38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f003 0320 	and.w	r3, r3, #32
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d026      	beq.n	8003dac <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d021      	beq.n	8003dac <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d76:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d84:	f043 0202 	orr.w	r2, r3, #2
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2204      	movs	r2, #4
 8003d90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d026      	beq.n	8003e04 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d021      	beq.n	8003e04 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dce:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2208      	movs	r2, #8
 8003dd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ddc:	f043 0204 	orr.w	r2, r3, #4
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2204      	movs	r2, #4
 8003de8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d013      	beq.n	8003e36 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00e      	beq.n	8003e36 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e26:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f853 	bl	8003edc <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d024      	beq.n	8003e8a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d01f      	beq.n	8003e8a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e58:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f003 0310 	and.w	r3, r3, #16
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d01f      	beq.n	8003ed4 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d01a      	beq.n	8003ed4 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003eac:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2210      	movs	r2, #16
 8003eb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f80e 	bl	8003ef0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003ed4:	bf00      	nop
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d101      	bne.n	8003f24 <HAL_DMA2D_ConfigLayer+0x20>
 8003f20:	2302      	movs	r3, #2
 8003f22:	e079      	b.n	8004018 <HAL_DMA2D_ConfigLayer+0x114>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	3318      	adds	r3, #24
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	041b      	lsls	r3, r3, #16
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003f4e:	4b35      	ldr	r3, [pc, #212]	; (8004024 <HAL_DMA2D_ConfigLayer+0x120>)
 8003f50:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b0a      	cmp	r3, #10
 8003f58:	d003      	beq.n	8003f62 <HAL_DMA2D_ConfigLayer+0x5e>
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b09      	cmp	r3, #9
 8003f60:	d107      	bne.n	8003f72 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	e005      	b.n	8003f7e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	061b      	lsls	r3, r3, #24
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d120      	bne.n	8003fc6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	ea02 0103 	and.w	r1, r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2b0a      	cmp	r3, #10
 8003fac:	d003      	beq.n	8003fb6 <HAL_DMA2D_ConfigLayer+0xb2>
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b09      	cmp	r3, #9
 8003fb4:	d127      	bne.n	8004006 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003fc2:	629a      	str	r2, [r3, #40]	; 0x28
 8003fc4:	e01f      	b.n	8004006 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	69da      	ldr	r2, [r3, #28]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	ea02 0103 	and.w	r1, r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	6812      	ldr	r2, [r2, #0]
 8003fe6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	2b0a      	cmp	r3, #10
 8003fee:	d003      	beq.n	8003ff8 <HAL_DMA2D_ConfigLayer+0xf4>
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	2b09      	cmp	r3, #9
 8003ff6:	d106      	bne.n	8004006 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004004:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	371c      	adds	r7, #28
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	ff03000f 	.word	0xff03000f

08004028 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004028:	b480      	push	{r7}
 800402a:	b08b      	sub	sp, #44	; 0x2c
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	041a      	lsls	r2, r3, #16
 8004044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004046:	431a      	orrs	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004060:	d174      	bne.n	800414c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004068:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004070:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004078:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	b2db      	uxtb	r3, r3
 800407e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d108      	bne.n	800409a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	431a      	orrs	r2, r3
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	4313      	orrs	r3, r2
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	627b      	str	r3, [r7, #36]	; 0x24
 8004098:	e053      	b.n	8004142 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d106      	bne.n	80040b0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24
 80040ae:	e048      	b.n	8004142 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d111      	bne.n	80040dc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	0cdb      	lsrs	r3, r3, #19
 80040bc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	0a9b      	lsrs	r3, r3, #10
 80040c2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	08db      	lsrs	r3, r3, #3
 80040c8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	02db      	lsls	r3, r3, #11
 80040d2:	4313      	orrs	r3, r2
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	627b      	str	r3, [r7, #36]	; 0x24
 80040da:	e032      	b.n	8004142 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	2b03      	cmp	r3, #3
 80040e2:	d117      	bne.n	8004114 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	0fdb      	lsrs	r3, r3, #31
 80040e8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	0cdb      	lsrs	r3, r3, #19
 80040ee:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	0adb      	lsrs	r3, r3, #11
 80040f4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	08db      	lsrs	r3, r3, #3
 80040fa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	015a      	lsls	r2, r3, #5
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	029b      	lsls	r3, r3, #10
 8004104:	431a      	orrs	r2, r3
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	03db      	lsls	r3, r3, #15
 800410a:	4313      	orrs	r3, r2
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	4313      	orrs	r3, r2
 8004110:	627b      	str	r3, [r7, #36]	; 0x24
 8004112:	e016      	b.n	8004142 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	0f1b      	lsrs	r3, r3, #28
 8004118:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	0d1b      	lsrs	r3, r3, #20
 800411e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	0b1b      	lsrs	r3, r3, #12
 8004124:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	091b      	lsrs	r3, r3, #4
 800412a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	011a      	lsls	r2, r3, #4
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	021b      	lsls	r3, r3, #8
 8004134:	431a      	orrs	r2, r3
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	031b      	lsls	r3, r3, #12
 800413a:	4313      	orrs	r3, r2
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	4313      	orrs	r3, r2
 8004140:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004148:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800414a:	e003      	b.n	8004154 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	60da      	str	r2, [r3, #12]
}
 8004154:	bf00      	nop
 8004156:	372c      	adds	r7, #44	; 0x2c
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004160:	b480      	push	{r7}
 8004162:	b089      	sub	sp, #36	; 0x24
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800416a:	2300      	movs	r3, #0
 800416c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004172:	2300      	movs	r3, #0
 8004174:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004176:	2300      	movs	r3, #0
 8004178:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800417a:	2300      	movs	r3, #0
 800417c:	61fb      	str	r3, [r7, #28]
 800417e:	e175      	b.n	800446c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004180:	2201      	movs	r2, #1
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	4013      	ands	r3, r2
 8004192:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	429a      	cmp	r2, r3
 800419a:	f040 8164 	bne.w	8004466 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d003      	beq.n	80041ae <HAL_GPIO_Init+0x4e>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2b12      	cmp	r3, #18
 80041ac:	d123      	bne.n	80041f6 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	08da      	lsrs	r2, r3, #3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3208      	adds	r2, #8
 80041b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	220f      	movs	r2, #15
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ca:	43db      	mvns	r3, r3
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	4013      	ands	r3, r2
 80041d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	691a      	ldr	r2, [r3, #16]
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	08da      	lsrs	r2, r3, #3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3208      	adds	r2, #8
 80041f0:	69b9      	ldr	r1, [r7, #24]
 80041f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	2203      	movs	r2, #3
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
 8004206:	43db      	mvns	r3, r3
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	4013      	ands	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f003 0203 	and.w	r2, r3, #3
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	4313      	orrs	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d00b      	beq.n	800424a <HAL_GPIO_Init+0xea>
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2b02      	cmp	r3, #2
 8004238:	d007      	beq.n	800424a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800423e:	2b11      	cmp	r3, #17
 8004240:	d003      	beq.n	800424a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2b12      	cmp	r3, #18
 8004248:	d130      	bne.n	80042ac <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	2203      	movs	r2, #3
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	43db      	mvns	r3, r3
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	4013      	ands	r3, r2
 8004260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	4313      	orrs	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004280:	2201      	movs	r2, #1
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	43db      	mvns	r3, r3
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4013      	ands	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	091b      	lsrs	r3, r3, #4
 8004296:	f003 0201 	and.w	r2, r3, #1
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	2203      	movs	r2, #3
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	43db      	mvns	r3, r3
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	4013      	ands	r3, r2
 80042c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 80be 	beq.w	8004466 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042ea:	4b65      	ldr	r3, [pc, #404]	; (8004480 <HAL_GPIO_Init+0x320>)
 80042ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ee:	4a64      	ldr	r2, [pc, #400]	; (8004480 <HAL_GPIO_Init+0x320>)
 80042f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042f4:	6453      	str	r3, [r2, #68]	; 0x44
 80042f6:	4b62      	ldr	r3, [pc, #392]	; (8004480 <HAL_GPIO_Init+0x320>)
 80042f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004302:	4a60      	ldr	r2, [pc, #384]	; (8004484 <HAL_GPIO_Init+0x324>)
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	089b      	lsrs	r3, r3, #2
 8004308:	3302      	adds	r3, #2
 800430a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800430e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	220f      	movs	r2, #15
 800431a:	fa02 f303 	lsl.w	r3, r2, r3
 800431e:	43db      	mvns	r3, r3
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	4013      	ands	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a57      	ldr	r2, [pc, #348]	; (8004488 <HAL_GPIO_Init+0x328>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d037      	beq.n	800439e <HAL_GPIO_Init+0x23e>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a56      	ldr	r2, [pc, #344]	; (800448c <HAL_GPIO_Init+0x32c>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d031      	beq.n	800439a <HAL_GPIO_Init+0x23a>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a55      	ldr	r2, [pc, #340]	; (8004490 <HAL_GPIO_Init+0x330>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d02b      	beq.n	8004396 <HAL_GPIO_Init+0x236>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a54      	ldr	r2, [pc, #336]	; (8004494 <HAL_GPIO_Init+0x334>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d025      	beq.n	8004392 <HAL_GPIO_Init+0x232>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a53      	ldr	r2, [pc, #332]	; (8004498 <HAL_GPIO_Init+0x338>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d01f      	beq.n	800438e <HAL_GPIO_Init+0x22e>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a52      	ldr	r2, [pc, #328]	; (800449c <HAL_GPIO_Init+0x33c>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d019      	beq.n	800438a <HAL_GPIO_Init+0x22a>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a51      	ldr	r2, [pc, #324]	; (80044a0 <HAL_GPIO_Init+0x340>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d013      	beq.n	8004386 <HAL_GPIO_Init+0x226>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a50      	ldr	r2, [pc, #320]	; (80044a4 <HAL_GPIO_Init+0x344>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d00d      	beq.n	8004382 <HAL_GPIO_Init+0x222>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a4f      	ldr	r2, [pc, #316]	; (80044a8 <HAL_GPIO_Init+0x348>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d007      	beq.n	800437e <HAL_GPIO_Init+0x21e>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a4e      	ldr	r2, [pc, #312]	; (80044ac <HAL_GPIO_Init+0x34c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d101      	bne.n	800437a <HAL_GPIO_Init+0x21a>
 8004376:	2309      	movs	r3, #9
 8004378:	e012      	b.n	80043a0 <HAL_GPIO_Init+0x240>
 800437a:	230a      	movs	r3, #10
 800437c:	e010      	b.n	80043a0 <HAL_GPIO_Init+0x240>
 800437e:	2308      	movs	r3, #8
 8004380:	e00e      	b.n	80043a0 <HAL_GPIO_Init+0x240>
 8004382:	2307      	movs	r3, #7
 8004384:	e00c      	b.n	80043a0 <HAL_GPIO_Init+0x240>
 8004386:	2306      	movs	r3, #6
 8004388:	e00a      	b.n	80043a0 <HAL_GPIO_Init+0x240>
 800438a:	2305      	movs	r3, #5
 800438c:	e008      	b.n	80043a0 <HAL_GPIO_Init+0x240>
 800438e:	2304      	movs	r3, #4
 8004390:	e006      	b.n	80043a0 <HAL_GPIO_Init+0x240>
 8004392:	2303      	movs	r3, #3
 8004394:	e004      	b.n	80043a0 <HAL_GPIO_Init+0x240>
 8004396:	2302      	movs	r3, #2
 8004398:	e002      	b.n	80043a0 <HAL_GPIO_Init+0x240>
 800439a:	2301      	movs	r3, #1
 800439c:	e000      	b.n	80043a0 <HAL_GPIO_Init+0x240>
 800439e:	2300      	movs	r3, #0
 80043a0:	69fa      	ldr	r2, [r7, #28]
 80043a2:	f002 0203 	and.w	r2, r2, #3
 80043a6:	0092      	lsls	r2, r2, #2
 80043a8:	4093      	lsls	r3, r2
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80043b0:	4934      	ldr	r1, [pc, #208]	; (8004484 <HAL_GPIO_Init+0x324>)
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	089b      	lsrs	r3, r3, #2
 80043b6:	3302      	adds	r3, #2
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043be:	4b3c      	ldr	r3, [pc, #240]	; (80044b0 <HAL_GPIO_Init+0x350>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	43db      	mvns	r3, r3
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	4013      	ands	r3, r2
 80043cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	4313      	orrs	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043e2:	4a33      	ldr	r2, [pc, #204]	; (80044b0 <HAL_GPIO_Init+0x350>)
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80043e8:	4b31      	ldr	r3, [pc, #196]	; (80044b0 <HAL_GPIO_Init+0x350>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	43db      	mvns	r3, r3
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4013      	ands	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800440c:	4a28      	ldr	r2, [pc, #160]	; (80044b0 <HAL_GPIO_Init+0x350>)
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004412:	4b27      	ldr	r3, [pc, #156]	; (80044b0 <HAL_GPIO_Init+0x350>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	43db      	mvns	r3, r3
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	4013      	ands	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004436:	4a1e      	ldr	r2, [pc, #120]	; (80044b0 <HAL_GPIO_Init+0x350>)
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800443c:	4b1c      	ldr	r3, [pc, #112]	; (80044b0 <HAL_GPIO_Init+0x350>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	43db      	mvns	r3, r3
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	4013      	ands	r3, r2
 800444a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d003      	beq.n	8004460 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	4313      	orrs	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004460:	4a13      	ldr	r2, [pc, #76]	; (80044b0 <HAL_GPIO_Init+0x350>)
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	3301      	adds	r3, #1
 800446a:	61fb      	str	r3, [r7, #28]
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	2b0f      	cmp	r3, #15
 8004470:	f67f ae86 	bls.w	8004180 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004474:	bf00      	nop
 8004476:	3724      	adds	r7, #36	; 0x24
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	40023800 	.word	0x40023800
 8004484:	40013800 	.word	0x40013800
 8004488:	40020000 	.word	0x40020000
 800448c:	40020400 	.word	0x40020400
 8004490:	40020800 	.word	0x40020800
 8004494:	40020c00 	.word	0x40020c00
 8004498:	40021000 	.word	0x40021000
 800449c:	40021400 	.word	0x40021400
 80044a0:	40021800 	.word	0x40021800
 80044a4:	40021c00 	.word	0x40021c00
 80044a8:	40022000 	.word	0x40022000
 80044ac:	40022400 	.word	0x40022400
 80044b0:	40013c00 	.word	0x40013c00

080044b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	460b      	mov	r3, r1
 80044be:	807b      	strh	r3, [r7, #2]
 80044c0:	4613      	mov	r3, r2
 80044c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044c4:	787b      	ldrb	r3, [r7, #1]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044ca:	887a      	ldrh	r2, [r7, #2]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80044d0:	e003      	b.n	80044da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80044d2:	887b      	ldrh	r3, [r7, #2]
 80044d4:	041a      	lsls	r2, r3, #16
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	619a      	str	r2, [r3, #24]
}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
	...

080044e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e07f      	b.n	80045fa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d106      	bne.n	8004514 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f8a9 	bl	8004666 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2224      	movs	r2, #36	; 0x24
 8004518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0201 	bic.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004538:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004548:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d107      	bne.n	8004562 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800455e:	609a      	str	r2, [r3, #8]
 8004560:	e006      	b.n	8004570 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800456e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	2b02      	cmp	r3, #2
 8004576:	d104      	bne.n	8004582 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004580:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6859      	ldr	r1, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	4b1d      	ldr	r3, [pc, #116]	; (8004604 <HAL_I2C_Init+0x11c>)
 800458e:	430b      	orrs	r3, r1
 8004590:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68da      	ldr	r2, [r3, #12]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691a      	ldr	r2, [r3, #16]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	ea42 0103 	orr.w	r1, r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	021a      	lsls	r2, r3, #8
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	69d9      	ldr	r1, [r3, #28]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1a      	ldr	r2, [r3, #32]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0201 	orr.w	r2, r2, #1
 80045da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	02008000 	.word	0x02008000

08004608 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e021      	b.n	800465e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2224      	movs	r2, #36	; 0x24
 800461e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0201 	bic.w	r2, r2, #1
 8004630:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f821 	bl	800467a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004666:	b480      	push	{r7}
 8004668:	b083      	sub	sp, #12
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800466e:	bf00      	nop
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800467a:	b480      	push	{r7}
 800467c:	b083      	sub	sp, #12
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
	...

08004690 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af02      	add	r7, sp, #8
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	4608      	mov	r0, r1
 800469a:	4611      	mov	r1, r2
 800469c:	461a      	mov	r2, r3
 800469e:	4603      	mov	r3, r0
 80046a0:	817b      	strh	r3, [r7, #10]
 80046a2:	460b      	mov	r3, r1
 80046a4:	813b      	strh	r3, [r7, #8]
 80046a6:	4613      	mov	r3, r2
 80046a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b20      	cmp	r3, #32
 80046b4:	f040 80f9 	bne.w	80048aa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <HAL_I2C_Mem_Write+0x34>
 80046be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d105      	bne.n	80046d0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0ed      	b.n	80048ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <HAL_I2C_Mem_Write+0x4e>
 80046da:	2302      	movs	r3, #2
 80046dc:	e0e6      	b.n	80048ac <HAL_I2C_Mem_Write+0x21c>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046e6:	f7fd fe0d 	bl	8002304 <HAL_GetTick>
 80046ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	2319      	movs	r3, #25
 80046f2:	2201      	movs	r2, #1
 80046f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 fad1 	bl	8004ca0 <I2C_WaitOnFlagUntilTimeout>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e0d1      	b.n	80048ac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2221      	movs	r2, #33	; 0x21
 800470c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2240      	movs	r2, #64	; 0x40
 8004714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6a3a      	ldr	r2, [r7, #32]
 8004722:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004728:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004730:	88f8      	ldrh	r0, [r7, #6]
 8004732:	893a      	ldrh	r2, [r7, #8]
 8004734:	8979      	ldrh	r1, [r7, #10]
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	9301      	str	r3, [sp, #4]
 800473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	4603      	mov	r3, r0
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 f9e1 	bl	8004b08 <I2C_RequestMemoryWrite>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d005      	beq.n	8004758 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e0a9      	b.n	80048ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800475c:	b29b      	uxth	r3, r3
 800475e:	2bff      	cmp	r3, #255	; 0xff
 8004760:	d90e      	bls.n	8004780 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	22ff      	movs	r2, #255	; 0xff
 8004766:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800476c:	b2da      	uxtb	r2, r3
 800476e:	8979      	ldrh	r1, [r7, #10]
 8004770:	2300      	movs	r3, #0
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f000 fbb3 	bl	8004ee4 <I2C_TransferConfig>
 800477e:	e00f      	b.n	80047a0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004784:	b29a      	uxth	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478e:	b2da      	uxtb	r2, r3
 8004790:	8979      	ldrh	r1, [r7, #10]
 8004792:	2300      	movs	r3, #0
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 fba2 	bl	8004ee4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 fabb 	bl	8004d20 <I2C_WaitOnTXISFlagUntilTimeout>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e07b      	b.n	80048ac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	781a      	ldrb	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	1c5a      	adds	r2, r3, #1
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	3b01      	subs	r3, #1
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047dc:	3b01      	subs	r3, #1
 80047de:	b29a      	uxth	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d034      	beq.n	8004858 <HAL_I2C_Mem_Write+0x1c8>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d130      	bne.n	8004858 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fc:	2200      	movs	r2, #0
 80047fe:	2180      	movs	r1, #128	; 0x80
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 fa4d 	bl	8004ca0 <I2C_WaitOnFlagUntilTimeout>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e04d      	b.n	80048ac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004814:	b29b      	uxth	r3, r3
 8004816:	2bff      	cmp	r3, #255	; 0xff
 8004818:	d90e      	bls.n	8004838 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	22ff      	movs	r2, #255	; 0xff
 800481e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004824:	b2da      	uxtb	r2, r3
 8004826:	8979      	ldrh	r1, [r7, #10]
 8004828:	2300      	movs	r3, #0
 800482a:	9300      	str	r3, [sp, #0]
 800482c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 fb57 	bl	8004ee4 <I2C_TransferConfig>
 8004836:	e00f      	b.n	8004858 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004846:	b2da      	uxtb	r2, r3
 8004848:	8979      	ldrh	r1, [r7, #10]
 800484a:	2300      	movs	r3, #0
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 fb46 	bl	8004ee4 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485c:	b29b      	uxth	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d19e      	bne.n	80047a0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 fa9a 	bl	8004da0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e01a      	b.n	80048ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2220      	movs	r2, #32
 800487c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6859      	ldr	r1, [r3, #4]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <HAL_I2C_Mem_Write+0x224>)
 800488a:	400b      	ands	r3, r1
 800488c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2220      	movs	r2, #32
 8004892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	e000      	b.n	80048ac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80048aa:	2302      	movs	r3, #2
  }
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3718      	adds	r7, #24
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	fe00e800 	.word	0xfe00e800

080048b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b088      	sub	sp, #32
 80048bc:	af02      	add	r7, sp, #8
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	4608      	mov	r0, r1
 80048c2:	4611      	mov	r1, r2
 80048c4:	461a      	mov	r2, r3
 80048c6:	4603      	mov	r3, r0
 80048c8:	817b      	strh	r3, [r7, #10]
 80048ca:	460b      	mov	r3, r1
 80048cc:	813b      	strh	r3, [r7, #8]
 80048ce:	4613      	mov	r3, r2
 80048d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b20      	cmp	r3, #32
 80048dc:	f040 80fd 	bne.w	8004ada <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <HAL_I2C_Mem_Read+0x34>
 80048e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d105      	bne.n	80048f8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e0f1      	b.n	8004adc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d101      	bne.n	8004906 <HAL_I2C_Mem_Read+0x4e>
 8004902:	2302      	movs	r3, #2
 8004904:	e0ea      	b.n	8004adc <HAL_I2C_Mem_Read+0x224>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800490e:	f7fd fcf9 	bl	8002304 <HAL_GetTick>
 8004912:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	2319      	movs	r3, #25
 800491a:	2201      	movs	r2, #1
 800491c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f9bd 	bl	8004ca0 <I2C_WaitOnFlagUntilTimeout>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e0d5      	b.n	8004adc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2222      	movs	r2, #34	; 0x22
 8004934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2240      	movs	r2, #64	; 0x40
 800493c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6a3a      	ldr	r2, [r7, #32]
 800494a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004950:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004958:	88f8      	ldrh	r0, [r7, #6]
 800495a:	893a      	ldrh	r2, [r7, #8]
 800495c:	8979      	ldrh	r1, [r7, #10]
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	9301      	str	r3, [sp, #4]
 8004962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	4603      	mov	r3, r0
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 f921 	bl	8004bb0 <I2C_RequestMemoryRead>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d005      	beq.n	8004980 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e0ad      	b.n	8004adc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004984:	b29b      	uxth	r3, r3
 8004986:	2bff      	cmp	r3, #255	; 0xff
 8004988:	d90e      	bls.n	80049a8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	22ff      	movs	r2, #255	; 0xff
 800498e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004994:	b2da      	uxtb	r2, r3
 8004996:	8979      	ldrh	r1, [r7, #10]
 8004998:	4b52      	ldr	r3, [pc, #328]	; (8004ae4 <HAL_I2C_Mem_Read+0x22c>)
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 fa9f 	bl	8004ee4 <I2C_TransferConfig>
 80049a6:	e00f      	b.n	80049c8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	8979      	ldrh	r1, [r7, #10]
 80049ba:	4b4a      	ldr	r3, [pc, #296]	; (8004ae4 <HAL_I2C_Mem_Read+0x22c>)
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 fa8e 	bl	8004ee4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ce:	2200      	movs	r2, #0
 80049d0:	2104      	movs	r1, #4
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f000 f964 	bl	8004ca0 <I2C_WaitOnFlagUntilTimeout>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e07c      	b.n	8004adc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	b2d2      	uxtb	r2, r2
 80049ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049fe:	3b01      	subs	r3, #1
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d034      	beq.n	8004a88 <HAL_I2C_Mem_Read+0x1d0>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d130      	bne.n	8004a88 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	2180      	movs	r1, #128	; 0x80
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 f935 	bl	8004ca0 <I2C_WaitOnFlagUntilTimeout>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e04d      	b.n	8004adc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2bff      	cmp	r3, #255	; 0xff
 8004a48:	d90e      	bls.n	8004a68 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	22ff      	movs	r2, #255	; 0xff
 8004a4e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	8979      	ldrh	r1, [r7, #10]
 8004a58:	2300      	movs	r3, #0
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 fa3f 	bl	8004ee4 <I2C_TransferConfig>
 8004a66:	e00f      	b.n	8004a88 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a76:	b2da      	uxtb	r2, r3
 8004a78:	8979      	ldrh	r1, [r7, #10]
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 fa2e 	bl	8004ee4 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d19a      	bne.n	80049c8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f000 f982 	bl	8004da0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e01a      	b.n	8004adc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	6859      	ldr	r1, [r3, #4]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <HAL_I2C_Mem_Read+0x230>)
 8004aba:	400b      	ands	r3, r1
 8004abc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	e000      	b.n	8004adc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004ada:	2302      	movs	r3, #2
  }
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3718      	adds	r7, #24
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	80002400 	.word	0x80002400
 8004ae8:	fe00e800 	.word	0xfe00e800

08004aec <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004afa:	b2db      	uxtb	r3, r3
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af02      	add	r7, sp, #8
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	4608      	mov	r0, r1
 8004b12:	4611      	mov	r1, r2
 8004b14:	461a      	mov	r2, r3
 8004b16:	4603      	mov	r3, r0
 8004b18:	817b      	strh	r3, [r7, #10]
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	813b      	strh	r3, [r7, #8]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004b22:	88fb      	ldrh	r3, [r7, #6]
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	8979      	ldrh	r1, [r7, #10]
 8004b28:	4b20      	ldr	r3, [pc, #128]	; (8004bac <I2C_RequestMemoryWrite+0xa4>)
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 f9d7 	bl	8004ee4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b36:	69fa      	ldr	r2, [r7, #28]
 8004b38:	69b9      	ldr	r1, [r7, #24]
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 f8f0 	bl	8004d20 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e02c      	b.n	8004ba4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d105      	bne.n	8004b5c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b50:	893b      	ldrh	r3, [r7, #8]
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	629a      	str	r2, [r3, #40]	; 0x28
 8004b5a:	e015      	b.n	8004b88 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004b5c:	893b      	ldrh	r3, [r7, #8]
 8004b5e:	0a1b      	lsrs	r3, r3, #8
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b6a:	69fa      	ldr	r2, [r7, #28]
 8004b6c:	69b9      	ldr	r1, [r7, #24]
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 f8d6 	bl	8004d20 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e012      	b.n	8004ba4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b7e:	893b      	ldrh	r3, [r7, #8]
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	2180      	movs	r1, #128	; 0x80
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 f884 	bl	8004ca0 <I2C_WaitOnFlagUntilTimeout>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e000      	b.n	8004ba4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	80002000 	.word	0x80002000

08004bb0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af02      	add	r7, sp, #8
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	4608      	mov	r0, r1
 8004bba:	4611      	mov	r1, r2
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	817b      	strh	r3, [r7, #10]
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	813b      	strh	r3, [r7, #8]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004bca:	88fb      	ldrh	r3, [r7, #6]
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	8979      	ldrh	r1, [r7, #10]
 8004bd0:	4b20      	ldr	r3, [pc, #128]	; (8004c54 <I2C_RequestMemoryRead+0xa4>)
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f000 f984 	bl	8004ee4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bdc:	69fa      	ldr	r2, [r7, #28]
 8004bde:	69b9      	ldr	r1, [r7, #24]
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 f89d 	bl	8004d20 <I2C_WaitOnTXISFlagUntilTimeout>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d001      	beq.n	8004bf0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e02c      	b.n	8004c4a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bf0:	88fb      	ldrh	r3, [r7, #6]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d105      	bne.n	8004c02 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004bf6:	893b      	ldrh	r3, [r7, #8]
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	629a      	str	r2, [r3, #40]	; 0x28
 8004c00:	e015      	b.n	8004c2e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004c02:	893b      	ldrh	r3, [r7, #8]
 8004c04:	0a1b      	lsrs	r3, r3, #8
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c10:	69fa      	ldr	r2, [r7, #28]
 8004c12:	69b9      	ldr	r1, [r7, #24]
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 f883 	bl	8004d20 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e012      	b.n	8004c4a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c24:	893b      	ldrh	r3, [r7, #8]
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	2200      	movs	r2, #0
 8004c36:	2140      	movs	r1, #64	; 0x40
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 f831 	bl	8004ca0 <I2C_WaitOnFlagUntilTimeout>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e000      	b.n	8004c4a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	80002000 	.word	0x80002000

08004c58 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d103      	bne.n	8004c76 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2200      	movs	r2, #0
 8004c74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d007      	beq.n	8004c94 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699a      	ldr	r2, [r3, #24]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0201 	orr.w	r2, r2, #1
 8004c92:	619a      	str	r2, [r3, #24]
  }
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	603b      	str	r3, [r7, #0]
 8004cac:	4613      	mov	r3, r2
 8004cae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cb0:	e022      	b.n	8004cf8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb8:	d01e      	beq.n	8004cf8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cba:	f7fd fb23 	bl	8002304 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d302      	bcc.n	8004cd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d113      	bne.n	8004cf8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd4:	f043 0220 	orr.w	r2, r3, #32
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e00f      	b.n	8004d18 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	699a      	ldr	r2, [r3, #24]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	4013      	ands	r3, r2
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	bf0c      	ite	eq
 8004d08:	2301      	moveq	r3, #1
 8004d0a:	2300      	movne	r3, #0
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	461a      	mov	r2, r3
 8004d10:	79fb      	ldrb	r3, [r7, #7]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d0cd      	beq.n	8004cb2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d2c:	e02c      	b.n	8004d88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	68b9      	ldr	r1, [r7, #8]
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f000 f870 	bl	8004e18 <I2C_IsAcknowledgeFailed>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e02a      	b.n	8004d98 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d48:	d01e      	beq.n	8004d88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d4a:	f7fd fadb 	bl	8002304 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d302      	bcc.n	8004d60 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d113      	bne.n	8004d88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d64:	f043 0220 	orr.w	r2, r3, #32
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e007      	b.n	8004d98 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d1cb      	bne.n	8004d2e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dac:	e028      	b.n	8004e00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	68b9      	ldr	r1, [r7, #8]
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 f830 	bl	8004e18 <I2C_IsAcknowledgeFailed>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e026      	b.n	8004e10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc2:	f7fd fa9f 	bl	8002304 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d302      	bcc.n	8004dd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d113      	bne.n	8004e00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ddc:	f043 0220 	orr.w	r2, r3, #32
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2220      	movs	r2, #32
 8004de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e007      	b.n	8004e10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	f003 0320 	and.w	r3, r3, #32
 8004e0a:	2b20      	cmp	r3, #32
 8004e0c:	d1cf      	bne.n	8004dae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	f003 0310 	and.w	r3, r3, #16
 8004e2e:	2b10      	cmp	r3, #16
 8004e30:	d151      	bne.n	8004ed6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e32:	e022      	b.n	8004e7a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3a:	d01e      	beq.n	8004e7a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e3c:	f7fd fa62 	bl	8002304 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d302      	bcc.n	8004e52 <I2C_IsAcknowledgeFailed+0x3a>
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d113      	bne.n	8004e7a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e56:	f043 0220 	orr.w	r2, r3, #32
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2220      	movs	r2, #32
 8004e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e02e      	b.n	8004ed8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	f003 0320 	and.w	r3, r3, #32
 8004e84:	2b20      	cmp	r3, #32
 8004e86:	d1d5      	bne.n	8004e34 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2210      	movs	r2, #16
 8004e8e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2220      	movs	r2, #32
 8004e96:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f7ff fedd 	bl	8004c58 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6859      	ldr	r1, [r3, #4]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	4b0d      	ldr	r3, [pc, #52]	; (8004ee0 <I2C_IsAcknowledgeFailed+0xc8>)
 8004eaa:	400b      	ands	r3, r1
 8004eac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb2:	f043 0204 	orr.w	r2, r3, #4
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e000      	b.n	8004ed8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	fe00e800 	.word	0xfe00e800

08004ee4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	607b      	str	r3, [r7, #4]
 8004eee:	460b      	mov	r3, r1
 8004ef0:	817b      	strh	r3, [r7, #10]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	0d5b      	lsrs	r3, r3, #21
 8004f00:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004f04:	4b0d      	ldr	r3, [pc, #52]	; (8004f3c <I2C_TransferConfig+0x58>)
 8004f06:	430b      	orrs	r3, r1
 8004f08:	43db      	mvns	r3, r3
 8004f0a:	ea02 0103 	and.w	r1, r2, r3
 8004f0e:	897b      	ldrh	r3, [r7, #10]
 8004f10:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f14:	7a7b      	ldrb	r3, [r7, #9]
 8004f16:	041b      	lsls	r3, r3, #16
 8004f18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	431a      	orrs	r2, r3
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	431a      	orrs	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004f2e:	bf00      	nop
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	03ff63ff 	.word	0x03ff63ff

08004f40 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e0bf      	b.n	80050d2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d106      	bne.n	8004f6c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f006 f8e6 	bl	800b138 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699a      	ldr	r2, [r3, #24]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004f82:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6999      	ldr	r1, [r3, #24]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f98:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6899      	ldr	r1, [r3, #8]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	4b4a      	ldr	r3, [pc, #296]	; (80050dc <HAL_LTDC_Init+0x19c>)
 8004fb4:	400b      	ands	r3, r1
 8004fb6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	041b      	lsls	r3, r3, #16
 8004fbe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6899      	ldr	r1, [r3, #8]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699a      	ldr	r2, [r3, #24]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68d9      	ldr	r1, [r3, #12]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	4b3e      	ldr	r3, [pc, #248]	; (80050dc <HAL_LTDC_Init+0x19c>)
 8004fe2:	400b      	ands	r3, r1
 8004fe4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	041b      	lsls	r3, r3, #16
 8004fec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68d9      	ldr	r1, [r3, #12]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a1a      	ldr	r2, [r3, #32]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6919      	ldr	r1, [r3, #16]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	4b33      	ldr	r3, [pc, #204]	; (80050dc <HAL_LTDC_Init+0x19c>)
 8005010:	400b      	ands	r3, r1
 8005012:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	041b      	lsls	r3, r3, #16
 800501a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6919      	ldr	r1, [r3, #16]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	431a      	orrs	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6959      	ldr	r1, [r3, #20]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	4b27      	ldr	r3, [pc, #156]	; (80050dc <HAL_LTDC_Init+0x19c>)
 800503e:	400b      	ands	r3, r1
 8005040:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005046:	041b      	lsls	r3, r3, #16
 8005048:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6959      	ldr	r1, [r3, #20]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005066:	021b      	lsls	r3, r3, #8
 8005068:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005070:	041b      	lsls	r3, r3, #16
 8005072:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005082:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005096:	431a      	orrs	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0206 	orr.w	r2, r2, #6
 80050ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	699a      	ldr	r2, [r3, #24]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0201 	orr.w	r2, r2, #1
 80050be:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	f000f800 	.word	0xf000f800

080050e0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f003 0304 	and.w	r3, r3, #4
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d023      	beq.n	800514a <HAL_LTDC_IRQHandler+0x6a>
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	d01e      	beq.n	800514a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 0204 	bic.w	r2, r2, #4
 800511a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2204      	movs	r2, #4
 8005122:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800512a:	f043 0201 	orr.w	r2, r3, #1
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2204      	movs	r2, #4
 8005138:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f86f 	bl	8005228 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d023      	beq.n	800519c <HAL_LTDC_IRQHandler+0xbc>
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d01e      	beq.n	800519c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0202 	bic.w	r2, r2, #2
 800516c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2202      	movs	r2, #2
 8005174:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800517c:	f043 0202 	orr.w	r2, r3, #2
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2204      	movs	r2, #4
 800518a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f846 	bl	8005228 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d01b      	beq.n	80051de <HAL_LTDC_IRQHandler+0xfe>
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d016      	beq.n	80051de <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 0201 	bic.w	r2, r2, #1
 80051be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2201      	movs	r2, #1
 80051c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f82f 	bl	800523c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f003 0308 	and.w	r3, r3, #8
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d01b      	beq.n	8005220 <HAL_LTDC_IRQHandler+0x140>
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f003 0308 	and.w	r3, r3, #8
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d016      	beq.n	8005220 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0208 	bic.w	r2, r2, #8
 8005200:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2208      	movs	r2, #8
 8005208:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f818 	bl	8005250 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005220:	bf00      	nop
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005264:	b5b0      	push	{r4, r5, r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005276:	2b01      	cmp	r3, #1
 8005278:	d101      	bne.n	800527e <HAL_LTDC_ConfigLayer+0x1a>
 800527a:	2302      	movs	r3, #2
 800527c:	e02c      	b.n	80052d8 <HAL_LTDC_ConfigLayer+0x74>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2202      	movs	r2, #2
 800528a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2134      	movs	r1, #52	; 0x34
 8005294:	fb01 f303 	mul.w	r3, r1, r3
 8005298:	4413      	add	r3, r2
 800529a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	4614      	mov	r4, r2
 80052a2:	461d      	mov	r5, r3
 80052a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052b0:	682b      	ldr	r3, [r5, #0]
 80052b2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	68b9      	ldr	r1, [r7, #8]
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f000 f81f 	bl	80052fc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2201      	movs	r2, #1
 80052c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bdb0      	pop	{r4, r5, r7, pc}

080052e0 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80052ee:	b2db      	uxtb	r3, r3
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b089      	sub	sp, #36	; 0x24
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	0c1b      	lsrs	r3, r3, #16
 8005314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005318:	4413      	add	r3, r2
 800531a:	041b      	lsls	r3, r3, #16
 800531c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	461a      	mov	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	01db      	lsls	r3, r3, #7
 8005328:	4413      	add	r3, r2
 800532a:	3384      	adds	r3, #132	; 0x84
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	6812      	ldr	r2, [r2, #0]
 8005332:	4611      	mov	r1, r2
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	01d2      	lsls	r2, r2, #7
 8005338:	440a      	add	r2, r1
 800533a:	3284      	adds	r2, #132	; 0x84
 800533c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005340:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	0c1b      	lsrs	r3, r3, #16
 800534e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005352:	4413      	add	r3, r2
 8005354:	1c5a      	adds	r2, r3, #1
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4619      	mov	r1, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	01db      	lsls	r3, r3, #7
 8005360:	440b      	add	r3, r1
 8005362:	3384      	adds	r3, #132	; 0x84
 8005364:	4619      	mov	r1, r3
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	4313      	orrs	r3, r2
 800536a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	68da      	ldr	r2, [r3, #12]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800537a:	4413      	add	r3, r2
 800537c:	041b      	lsls	r3, r3, #16
 800537e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	461a      	mov	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	01db      	lsls	r3, r3, #7
 800538a:	4413      	add	r3, r2
 800538c:	3384      	adds	r3, #132	; 0x84
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	6812      	ldr	r2, [r2, #0]
 8005394:	4611      	mov	r1, r2
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	01d2      	lsls	r2, r2, #7
 800539a:	440a      	add	r2, r1
 800539c:	3284      	adds	r2, #132	; 0x84
 800539e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80053a2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053b2:	4413      	add	r3, r2
 80053b4:	1c5a      	adds	r2, r3, #1
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4619      	mov	r1, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	01db      	lsls	r3, r3, #7
 80053c0:	440b      	add	r3, r1
 80053c2:	3384      	adds	r3, #132	; 0x84
 80053c4:	4619      	mov	r1, r3
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	461a      	mov	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	01db      	lsls	r3, r3, #7
 80053d6:	4413      	add	r3, r2
 80053d8:	3384      	adds	r3, #132	; 0x84
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	6812      	ldr	r2, [r2, #0]
 80053e0:	4611      	mov	r1, r2
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	01d2      	lsls	r2, r2, #7
 80053e6:	440a      	add	r2, r1
 80053e8:	3284      	adds	r2, #132	; 0x84
 80053ea:	f023 0307 	bic.w	r3, r3, #7
 80053ee:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	461a      	mov	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	01db      	lsls	r3, r3, #7
 80053fa:	4413      	add	r3, r2
 80053fc:	3384      	adds	r3, #132	; 0x84
 80053fe:	461a      	mov	r2, r3
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800540c:	021b      	lsls	r3, r3, #8
 800540e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005416:	041b      	lsls	r3, r3, #16
 8005418:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	061b      	lsls	r3, r3, #24
 8005420:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	461a      	mov	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	01db      	lsls	r3, r3, #7
 800542c:	4413      	add	r3, r2
 800542e:	3384      	adds	r3, #132	; 0x84
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	01db      	lsls	r3, r3, #7
 800543c:	4413      	add	r3, r2
 800543e:	3384      	adds	r3, #132	; 0x84
 8005440:	461a      	mov	r2, r3
 8005442:	2300      	movs	r3, #0
 8005444:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800544c:	461a      	mov	r2, r3
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	431a      	orrs	r2, r3
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	431a      	orrs	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4619      	mov	r1, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	01db      	lsls	r3, r3, #7
 8005460:	440b      	add	r3, r1
 8005462:	3384      	adds	r3, #132	; 0x84
 8005464:	4619      	mov	r1, r3
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	4313      	orrs	r3, r2
 800546a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	461a      	mov	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	01db      	lsls	r3, r3, #7
 8005476:	4413      	add	r3, r2
 8005478:	3384      	adds	r3, #132	; 0x84
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	6812      	ldr	r2, [r2, #0]
 8005480:	4611      	mov	r1, r2
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	01d2      	lsls	r2, r2, #7
 8005486:	440a      	add	r2, r1
 8005488:	3284      	adds	r2, #132	; 0x84
 800548a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800548e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	461a      	mov	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	01db      	lsls	r3, r3, #7
 800549a:	4413      	add	r3, r2
 800549c:	3384      	adds	r3, #132	; 0x84
 800549e:	461a      	mov	r2, r3
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	461a      	mov	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	01db      	lsls	r3, r3, #7
 80054b0:	4413      	add	r3, r2
 80054b2:	3384      	adds	r3, #132	; 0x84
 80054b4:	69da      	ldr	r2, [r3, #28]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4619      	mov	r1, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	01db      	lsls	r3, r3, #7
 80054c0:	440b      	add	r3, r1
 80054c2:	3384      	adds	r3, #132	; 0x84
 80054c4:	4619      	mov	r1, r3
 80054c6:	4b58      	ldr	r3, [pc, #352]	; (8005628 <LTDC_SetConfig+0x32c>)
 80054c8:	4013      	ands	r3, r2
 80054ca:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	69da      	ldr	r2, [r3, #28]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	68f9      	ldr	r1, [r7, #12]
 80054d6:	6809      	ldr	r1, [r1, #0]
 80054d8:	4608      	mov	r0, r1
 80054da:	6879      	ldr	r1, [r7, #4]
 80054dc:	01c9      	lsls	r1, r1, #7
 80054de:	4401      	add	r1, r0
 80054e0:	3184      	adds	r1, #132	; 0x84
 80054e2:	4313      	orrs	r3, r2
 80054e4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	461a      	mov	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	01db      	lsls	r3, r3, #7
 80054f0:	4413      	add	r3, r2
 80054f2:	3384      	adds	r3, #132	; 0x84
 80054f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	461a      	mov	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	01db      	lsls	r3, r3, #7
 8005500:	4413      	add	r3, r2
 8005502:	3384      	adds	r3, #132	; 0x84
 8005504:	461a      	mov	r2, r3
 8005506:	2300      	movs	r3, #0
 8005508:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	01db      	lsls	r3, r3, #7
 8005514:	4413      	add	r3, r2
 8005516:	3384      	adds	r3, #132	; 0x84
 8005518:	461a      	mov	r2, r3
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d102      	bne.n	800552e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005528:	2304      	movs	r3, #4
 800552a:	61fb      	str	r3, [r7, #28]
 800552c:	e01b      	b.n	8005566 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d102      	bne.n	800553c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005536:	2303      	movs	r3, #3
 8005538:	61fb      	str	r3, [r7, #28]
 800553a:	e014      	b.n	8005566 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	2b04      	cmp	r3, #4
 8005542:	d00b      	beq.n	800555c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005548:	2b02      	cmp	r3, #2
 800554a:	d007      	beq.n	800555c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005550:	2b03      	cmp	r3, #3
 8005552:	d003      	beq.n	800555c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005558:	2b07      	cmp	r3, #7
 800555a:	d102      	bne.n	8005562 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800555c:	2302      	movs	r3, #2
 800555e:	61fb      	str	r3, [r7, #28]
 8005560:	e001      	b.n	8005566 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005562:	2301      	movs	r3, #1
 8005564:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	461a      	mov	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	01db      	lsls	r3, r3, #7
 8005570:	4413      	add	r3, r2
 8005572:	3384      	adds	r3, #132	; 0x84
 8005574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	6812      	ldr	r2, [r2, #0]
 800557a:	4611      	mov	r1, r2
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	01d2      	lsls	r2, r2, #7
 8005580:	440a      	add	r2, r1
 8005582:	3284      	adds	r2, #132	; 0x84
 8005584:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005588:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558e:	69fa      	ldr	r2, [r7, #28]
 8005590:	fb02 f303 	mul.w	r3, r2, r3
 8005594:	041a      	lsls	r2, r3, #16
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	6859      	ldr	r1, [r3, #4]
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	1acb      	subs	r3, r1, r3
 80055a0:	69f9      	ldr	r1, [r7, #28]
 80055a2:	fb01 f303 	mul.w	r3, r1, r3
 80055a6:	3303      	adds	r3, #3
 80055a8:	68f9      	ldr	r1, [r7, #12]
 80055aa:	6809      	ldr	r1, [r1, #0]
 80055ac:	4608      	mov	r0, r1
 80055ae:	6879      	ldr	r1, [r7, #4]
 80055b0:	01c9      	lsls	r1, r1, #7
 80055b2:	4401      	add	r1, r0
 80055b4:	3184      	adds	r1, #132	; 0x84
 80055b6:	4313      	orrs	r3, r2
 80055b8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	461a      	mov	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	01db      	lsls	r3, r3, #7
 80055c4:	4413      	add	r3, r2
 80055c6:	3384      	adds	r3, #132	; 0x84
 80055c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4619      	mov	r1, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	01db      	lsls	r3, r3, #7
 80055d4:	440b      	add	r3, r1
 80055d6:	3384      	adds	r3, #132	; 0x84
 80055d8:	4619      	mov	r1, r3
 80055da:	4b14      	ldr	r3, [pc, #80]	; (800562c <LTDC_SetConfig+0x330>)
 80055dc:	4013      	ands	r3, r2
 80055de:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	461a      	mov	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	01db      	lsls	r3, r3, #7
 80055ea:	4413      	add	r3, r2
 80055ec:	3384      	adds	r3, #132	; 0x84
 80055ee:	461a      	mov	r2, r3
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	01db      	lsls	r3, r3, #7
 8005600:	4413      	add	r3, r2
 8005602:	3384      	adds	r3, #132	; 0x84
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	6812      	ldr	r2, [r2, #0]
 800560a:	4611      	mov	r1, r2
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	01d2      	lsls	r2, r2, #7
 8005610:	440a      	add	r2, r1
 8005612:	3284      	adds	r2, #132	; 0x84
 8005614:	f043 0301 	orr.w	r3, r3, #1
 8005618:	6013      	str	r3, [r2, #0]
}
 800561a:	bf00      	nop
 800561c:	3724      	adds	r7, #36	; 0x24
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	fffff8f8 	.word	0xfffff8f8
 800562c:	fffff800 	.word	0xfffff800

08005630 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005630:	b480      	push	{r7}
 8005632:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005634:	4b05      	ldr	r3, [pc, #20]	; (800564c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a04      	ldr	r2, [pc, #16]	; (800564c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800563a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800563e:	6013      	str	r3, [r2, #0]
}
 8005640:	bf00      	nop
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	40007000 	.word	0x40007000

08005650 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005656:	2300      	movs	r3, #0
 8005658:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800565a:	4b23      	ldr	r3, [pc, #140]	; (80056e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800565c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565e:	4a22      	ldr	r2, [pc, #136]	; (80056e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005664:	6413      	str	r3, [r2, #64]	; 0x40
 8005666:	4b20      	ldr	r3, [pc, #128]	; (80056e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800566e:	603b      	str	r3, [r7, #0]
 8005670:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005672:	4b1e      	ldr	r3, [pc, #120]	; (80056ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a1d      	ldr	r2, [pc, #116]	; (80056ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8005678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800567c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800567e:	f7fc fe41 	bl	8002304 <HAL_GetTick>
 8005682:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005684:	e009      	b.n	800569a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005686:	f7fc fe3d 	bl	8002304 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005694:	d901      	bls.n	800569a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e022      	b.n	80056e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800569a:	4b14      	ldr	r3, [pc, #80]	; (80056ec <HAL_PWREx_EnableOverDrive+0x9c>)
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a6:	d1ee      	bne.n	8005686 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80056a8:	4b10      	ldr	r3, [pc, #64]	; (80056ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a0f      	ldr	r2, [pc, #60]	; (80056ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80056ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056b4:	f7fc fe26 	bl	8002304 <HAL_GetTick>
 80056b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80056ba:	e009      	b.n	80056d0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80056bc:	f7fc fe22 	bl	8002304 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056ca:	d901      	bls.n	80056d0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e007      	b.n	80056e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80056d0:	4b06      	ldr	r3, [pc, #24]	; (80056ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056dc:	d1ee      	bne.n	80056bc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3708      	adds	r7, #8
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	40023800 	.word	0x40023800
 80056ec:	40007000 	.word	0x40007000

080056f0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af02      	add	r7, sp, #8
 80056f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80056fc:	f7fc fe02 	bl	8002304 <HAL_GetTick>
 8005700:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e073      	b.n	80057f4 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_QSPI_Init+0x2c>
 8005718:	2302      	movs	r3, #2
 800571a:	e06b      	b.n	80057f4 <HAL_QSPI_Init+0x104>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10b      	bne.n	8005748 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f005 fdc5 	bl	800b2c8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 800573e:	f241 3188 	movw	r1, #5000	; 0x1388
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f85e 	bl	8005804 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	3b01      	subs	r3, #1
 8005758:	021a      	lsls	r2, r3, #8
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	2200      	movs	r2, #0
 800576c:	2120      	movs	r1, #32
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f856 	bl	8005820 <QSPI_WaitFlagStateUntilTimeout>
 8005774:	4603      	mov	r3, r0
 8005776:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8005778:	7bfb      	ldrb	r3, [r7, #15]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d135      	bne.n	80057ea <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	4b1d      	ldr	r3, [pc, #116]	; (80057fc <HAL_QSPI_Init+0x10c>)
 8005786:	4013      	ands	r3, r2
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	6852      	ldr	r2, [r2, #4]
 800578c:	0611      	lsls	r1, r2, #24
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	68d2      	ldr	r2, [r2, #12]
 8005792:	4311      	orrs	r1, r2
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	69d2      	ldr	r2, [r2, #28]
 8005798:	4311      	orrs	r1, r2
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	6a12      	ldr	r2, [r2, #32]
 800579e:	4311      	orrs	r1, r2
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6812      	ldr	r2, [r2, #0]
 80057a4:	430b      	orrs	r3, r1
 80057a6:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	4b14      	ldr	r3, [pc, #80]	; (8005800 <HAL_QSPI_Init+0x110>)
 80057b0:	4013      	ands	r3, r2
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	6912      	ldr	r2, [r2, #16]
 80057b6:	0411      	lsls	r1, r2, #16
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	6952      	ldr	r2, [r2, #20]
 80057bc:	4311      	orrs	r1, r2
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	6992      	ldr	r2, [r2, #24]
 80057c2:	4311      	orrs	r1, r2
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6812      	ldr	r2, [r2, #0]
 80057c8:	430b      	orrs	r3, r1
 80057ca:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f042 0201 	orr.w	r2, r2, #1
 80057da:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80057f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	00ffff2f 	.word	0x00ffff2f
 8005800:	ffe0f8fe 	.word	0xffe0f8fe

08005804 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	603b      	str	r3, [r7, #0]
 800582c:	4613      	mov	r3, r2
 800582e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005830:	e01a      	b.n	8005868 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005838:	d016      	beq.n	8005868 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d007      	beq.n	8005850 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005840:	f7fc fd60 	bl	8002304 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	429a      	cmp	r2, r3
 800584e:	d20b      	bcs.n	8005868 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2204      	movs	r2, #4
 8005854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800585c:	f043 0201 	orr.w	r2, r3, #1
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e00e      	b.n	8005886 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	689a      	ldr	r2, [r3, #8]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	4013      	ands	r3, r2
 8005872:	2b00      	cmp	r3, #0
 8005874:	bf14      	ite	ne
 8005876:	2301      	movne	r3, #1
 8005878:	2300      	moveq	r3, #0
 800587a:	b2db      	uxtb	r3, r3
 800587c:	461a      	mov	r2, r3
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	429a      	cmp	r2, r3
 8005882:	d1d6      	bne.n	8005832 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
	...

08005890 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8005898:	2300      	movs	r3, #0
 800589a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e25c      	b.n	8005d60 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f000 8087 	beq.w	80059c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80058b4:	4b96      	ldr	r3, [pc, #600]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f003 030c 	and.w	r3, r3, #12
 80058bc:	2b04      	cmp	r3, #4
 80058be:	d00c      	beq.n	80058da <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058c0:	4b93      	ldr	r3, [pc, #588]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f003 030c 	and.w	r3, r3, #12
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d112      	bne.n	80058f2 <HAL_RCC_OscConfig+0x62>
 80058cc:	4b90      	ldr	r3, [pc, #576]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058d8:	d10b      	bne.n	80058f2 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058da:	4b8d      	ldr	r3, [pc, #564]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d06c      	beq.n	80059c0 <HAL_RCC_OscConfig+0x130>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d168      	bne.n	80059c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e236      	b.n	8005d60 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058fa:	d106      	bne.n	800590a <HAL_RCC_OscConfig+0x7a>
 80058fc:	4b84      	ldr	r3, [pc, #528]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a83      	ldr	r2, [pc, #524]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 8005902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005906:	6013      	str	r3, [r2, #0]
 8005908:	e02e      	b.n	8005968 <HAL_RCC_OscConfig+0xd8>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10c      	bne.n	800592c <HAL_RCC_OscConfig+0x9c>
 8005912:	4b7f      	ldr	r3, [pc, #508]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a7e      	ldr	r2, [pc, #504]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 8005918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800591c:	6013      	str	r3, [r2, #0]
 800591e:	4b7c      	ldr	r3, [pc, #496]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a7b      	ldr	r2, [pc, #492]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 8005924:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005928:	6013      	str	r3, [r2, #0]
 800592a:	e01d      	b.n	8005968 <HAL_RCC_OscConfig+0xd8>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005934:	d10c      	bne.n	8005950 <HAL_RCC_OscConfig+0xc0>
 8005936:	4b76      	ldr	r3, [pc, #472]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a75      	ldr	r2, [pc, #468]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 800593c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005940:	6013      	str	r3, [r2, #0]
 8005942:	4b73      	ldr	r3, [pc, #460]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a72      	ldr	r2, [pc, #456]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 8005948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	e00b      	b.n	8005968 <HAL_RCC_OscConfig+0xd8>
 8005950:	4b6f      	ldr	r3, [pc, #444]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a6e      	ldr	r2, [pc, #440]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 8005956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800595a:	6013      	str	r3, [r2, #0]
 800595c:	4b6c      	ldr	r3, [pc, #432]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a6b      	ldr	r2, [pc, #428]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 8005962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d013      	beq.n	8005998 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005970:	f7fc fcc8 	bl	8002304 <HAL_GetTick>
 8005974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005976:	e008      	b.n	800598a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005978:	f7fc fcc4 	bl	8002304 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	2b64      	cmp	r3, #100	; 0x64
 8005984:	d901      	bls.n	800598a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e1ea      	b.n	8005d60 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800598a:	4b61      	ldr	r3, [pc, #388]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0f0      	beq.n	8005978 <HAL_RCC_OscConfig+0xe8>
 8005996:	e014      	b.n	80059c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005998:	f7fc fcb4 	bl	8002304 <HAL_GetTick>
 800599c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800599e:	e008      	b.n	80059b2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059a0:	f7fc fcb0 	bl	8002304 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b64      	cmp	r3, #100	; 0x64
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e1d6      	b.n	8005d60 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059b2:	4b57      	ldr	r3, [pc, #348]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1f0      	bne.n	80059a0 <HAL_RCC_OscConfig+0x110>
 80059be:	e000      	b.n	80059c2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d069      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80059ce:	4b50      	ldr	r3, [pc, #320]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 030c 	and.w	r3, r3, #12
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00b      	beq.n	80059f2 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059da:	4b4d      	ldr	r3, [pc, #308]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f003 030c 	and.w	r3, r3, #12
 80059e2:	2b08      	cmp	r3, #8
 80059e4:	d11c      	bne.n	8005a20 <HAL_RCC_OscConfig+0x190>
 80059e6:	4b4a      	ldr	r3, [pc, #296]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d116      	bne.n	8005a20 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059f2:	4b47      	ldr	r3, [pc, #284]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d005      	beq.n	8005a0a <HAL_RCC_OscConfig+0x17a>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d001      	beq.n	8005a0a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e1aa      	b.n	8005d60 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a0a:	4b41      	ldr	r3, [pc, #260]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	493d      	ldr	r1, [pc, #244]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a1e:	e040      	b.n	8005aa2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d023      	beq.n	8005a70 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a28:	4b39      	ldr	r3, [pc, #228]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a38      	ldr	r2, [pc, #224]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 8005a2e:	f043 0301 	orr.w	r3, r3, #1
 8005a32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a34:	f7fc fc66 	bl	8002304 <HAL_GetTick>
 8005a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a3a:	e008      	b.n	8005a4e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a3c:	f7fc fc62 	bl	8002304 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e188      	b.n	8005d60 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a4e:	4b30      	ldr	r3, [pc, #192]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d0f0      	beq.n	8005a3c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a5a:	4b2d      	ldr	r3, [pc, #180]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	4929      	ldr	r1, [pc, #164]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	600b      	str	r3, [r1, #0]
 8005a6e:	e018      	b.n	8005aa2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a70:	4b27      	ldr	r3, [pc, #156]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a26      	ldr	r2, [pc, #152]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 8005a76:	f023 0301 	bic.w	r3, r3, #1
 8005a7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a7c:	f7fc fc42 	bl	8002304 <HAL_GetTick>
 8005a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a82:	e008      	b.n	8005a96 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a84:	f7fc fc3e 	bl	8002304 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e164      	b.n	8005d60 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a96:	4b1e      	ldr	r3, [pc, #120]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1f0      	bne.n	8005a84 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0308 	and.w	r3, r3, #8
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d038      	beq.n	8005b20 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d019      	beq.n	8005aea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ab6:	4b16      	ldr	r3, [pc, #88]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 8005ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aba:	4a15      	ldr	r2, [pc, #84]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 8005abc:	f043 0301 	orr.w	r3, r3, #1
 8005ac0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ac2:	f7fc fc1f 	bl	8002304 <HAL_GetTick>
 8005ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ac8:	e008      	b.n	8005adc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005aca:	f7fc fc1b 	bl	8002304 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d901      	bls.n	8005adc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e141      	b.n	8005d60 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005adc:	4b0c      	ldr	r3, [pc, #48]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 8005ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0f0      	beq.n	8005aca <HAL_RCC_OscConfig+0x23a>
 8005ae8:	e01a      	b.n	8005b20 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005aea:	4b09      	ldr	r3, [pc, #36]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 8005aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aee:	4a08      	ldr	r2, [pc, #32]	; (8005b10 <HAL_RCC_OscConfig+0x280>)
 8005af0:	f023 0301 	bic.w	r3, r3, #1
 8005af4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af6:	f7fc fc05 	bl	8002304 <HAL_GetTick>
 8005afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005afc:	e00a      	b.n	8005b14 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005afe:	f7fc fc01 	bl	8002304 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d903      	bls.n	8005b14 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e127      	b.n	8005d60 <HAL_RCC_OscConfig+0x4d0>
 8005b10:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b14:	4b94      	ldr	r3, [pc, #592]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1ee      	bne.n	8005afe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0304 	and.w	r3, r3, #4
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 80a4 	beq.w	8005c76 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b2e:	4b8e      	ldr	r3, [pc, #568]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10d      	bne.n	8005b56 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b3a:	4b8b      	ldr	r3, [pc, #556]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	4a8a      	ldr	r2, [pc, #552]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b44:	6413      	str	r3, [r2, #64]	; 0x40
 8005b46:	4b88      	ldr	r3, [pc, #544]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b4e:	60fb      	str	r3, [r7, #12]
 8005b50:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005b52:	2301      	movs	r3, #1
 8005b54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b56:	4b85      	ldr	r3, [pc, #532]	; (8005d6c <HAL_RCC_OscConfig+0x4dc>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d118      	bne.n	8005b94 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005b62:	4b82      	ldr	r3, [pc, #520]	; (8005d6c <HAL_RCC_OscConfig+0x4dc>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a81      	ldr	r2, [pc, #516]	; (8005d6c <HAL_RCC_OscConfig+0x4dc>)
 8005b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b6e:	f7fc fbc9 	bl	8002304 <HAL_GetTick>
 8005b72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b74:	e008      	b.n	8005b88 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005b76:	f7fc fbc5 	bl	8002304 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	2b64      	cmp	r3, #100	; 0x64
 8005b82:	d901      	bls.n	8005b88 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e0eb      	b.n	8005d60 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b88:	4b78      	ldr	r3, [pc, #480]	; (8005d6c <HAL_RCC_OscConfig+0x4dc>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d0f0      	beq.n	8005b76 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d106      	bne.n	8005baa <HAL_RCC_OscConfig+0x31a>
 8005b9c:	4b72      	ldr	r3, [pc, #456]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba0:	4a71      	ldr	r2, [pc, #452]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005ba2:	f043 0301 	orr.w	r3, r3, #1
 8005ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ba8:	e02d      	b.n	8005c06 <HAL_RCC_OscConfig+0x376>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10c      	bne.n	8005bcc <HAL_RCC_OscConfig+0x33c>
 8005bb2:	4b6d      	ldr	r3, [pc, #436]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb6:	4a6c      	ldr	r2, [pc, #432]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005bb8:	f023 0301 	bic.w	r3, r3, #1
 8005bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8005bbe:	4b6a      	ldr	r3, [pc, #424]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc2:	4a69      	ldr	r2, [pc, #420]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005bc4:	f023 0304 	bic.w	r3, r3, #4
 8005bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8005bca:	e01c      	b.n	8005c06 <HAL_RCC_OscConfig+0x376>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	2b05      	cmp	r3, #5
 8005bd2:	d10c      	bne.n	8005bee <HAL_RCC_OscConfig+0x35e>
 8005bd4:	4b64      	ldr	r3, [pc, #400]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd8:	4a63      	ldr	r2, [pc, #396]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005bda:	f043 0304 	orr.w	r3, r3, #4
 8005bde:	6713      	str	r3, [r2, #112]	; 0x70
 8005be0:	4b61      	ldr	r3, [pc, #388]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be4:	4a60      	ldr	r2, [pc, #384]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005be6:	f043 0301 	orr.w	r3, r3, #1
 8005bea:	6713      	str	r3, [r2, #112]	; 0x70
 8005bec:	e00b      	b.n	8005c06 <HAL_RCC_OscConfig+0x376>
 8005bee:	4b5e      	ldr	r3, [pc, #376]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf2:	4a5d      	ldr	r2, [pc, #372]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005bf4:	f023 0301 	bic.w	r3, r3, #1
 8005bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8005bfa:	4b5b      	ldr	r3, [pc, #364]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfe:	4a5a      	ldr	r2, [pc, #360]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005c00:	f023 0304 	bic.w	r3, r3, #4
 8005c04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d015      	beq.n	8005c3a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c0e:	f7fc fb79 	bl	8002304 <HAL_GetTick>
 8005c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c14:	e00a      	b.n	8005c2c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c16:	f7fc fb75 	bl	8002304 <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d901      	bls.n	8005c2c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e099      	b.n	8005d60 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c2c:	4b4e      	ldr	r3, [pc, #312]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d0ee      	beq.n	8005c16 <HAL_RCC_OscConfig+0x386>
 8005c38:	e014      	b.n	8005c64 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c3a:	f7fc fb63 	bl	8002304 <HAL_GetTick>
 8005c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c40:	e00a      	b.n	8005c58 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c42:	f7fc fb5f 	bl	8002304 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d901      	bls.n	8005c58 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e083      	b.n	8005d60 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c58:	4b43      	ldr	r3, [pc, #268]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1ee      	bne.n	8005c42 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c64:	7dfb      	ldrb	r3, [r7, #23]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d105      	bne.n	8005c76 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c6a:	4b3f      	ldr	r3, [pc, #252]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	4a3e      	ldr	r2, [pc, #248]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005c70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d06f      	beq.n	8005d5e <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c7e:	4b3a      	ldr	r3, [pc, #232]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f003 030c 	and.w	r3, r3, #12
 8005c86:	2b08      	cmp	r3, #8
 8005c88:	d067      	beq.n	8005d5a <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d149      	bne.n	8005d26 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c92:	4b35      	ldr	r3, [pc, #212]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a34      	ldr	r2, [pc, #208]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005c98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c9e:	f7fc fb31 	bl	8002304 <HAL_GetTick>
 8005ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ca4:	e008      	b.n	8005cb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ca6:	f7fc fb2d 	bl	8002304 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d901      	bls.n	8005cb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e053      	b.n	8005d60 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cb8:	4b2b      	ldr	r3, [pc, #172]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1f0      	bne.n	8005ca6 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	69da      	ldr	r2, [r3, #28]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd2:	019b      	lsls	r3, r3, #6
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cda:	085b      	lsrs	r3, r3, #1
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	041b      	lsls	r3, r3, #16
 8005ce0:	431a      	orrs	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce6:	061b      	lsls	r3, r3, #24
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	4a1f      	ldr	r2, [pc, #124]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005cec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cf0:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cf2:	4b1d      	ldr	r3, [pc, #116]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a1c      	ldr	r2, [pc, #112]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005cf8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cfe:	f7fc fb01 	bl	8002304 <HAL_GetTick>
 8005d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d04:	e008      	b.n	8005d18 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d06:	f7fc fafd 	bl	8002304 <HAL_GetTick>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d901      	bls.n	8005d18 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e023      	b.n	8005d60 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d18:	4b13      	ldr	r3, [pc, #76]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d0f0      	beq.n	8005d06 <HAL_RCC_OscConfig+0x476>
 8005d24:	e01b      	b.n	8005d5e <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d26:	4b10      	ldr	r3, [pc, #64]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a0f      	ldr	r2, [pc, #60]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005d2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d32:	f7fc fae7 	bl	8002304 <HAL_GetTick>
 8005d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d38:	e008      	b.n	8005d4c <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d3a:	f7fc fae3 	bl	8002304 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d901      	bls.n	8005d4c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e009      	b.n	8005d60 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d4c:	4b06      	ldr	r3, [pc, #24]	; (8005d68 <HAL_RCC_OscConfig+0x4d8>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1f0      	bne.n	8005d3a <HAL_RCC_OscConfig+0x4aa>
 8005d58:	e001      	b.n	8005d5e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e000      	b.n	8005d60 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3718      	adds	r7, #24
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	40023800 	.word	0x40023800
 8005d6c:	40007000 	.word	0x40007000

08005d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d101      	bne.n	8005d88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e0ce      	b.n	8005f26 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d88:	4b69      	ldr	r3, [pc, #420]	; (8005f30 <HAL_RCC_ClockConfig+0x1c0>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 030f 	and.w	r3, r3, #15
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d910      	bls.n	8005db8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d96:	4b66      	ldr	r3, [pc, #408]	; (8005f30 <HAL_RCC_ClockConfig+0x1c0>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f023 020f 	bic.w	r2, r3, #15
 8005d9e:	4964      	ldr	r1, [pc, #400]	; (8005f30 <HAL_RCC_ClockConfig+0x1c0>)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005da6:	4b62      	ldr	r3, [pc, #392]	; (8005f30 <HAL_RCC_ClockConfig+0x1c0>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 030f 	and.w	r3, r3, #15
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d001      	beq.n	8005db8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e0b6      	b.n	8005f26 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0302 	and.w	r3, r3, #2
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d020      	beq.n	8005e06 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0304 	and.w	r3, r3, #4
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d005      	beq.n	8005ddc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005dd0:	4b58      	ldr	r3, [pc, #352]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	4a57      	ldr	r2, [pc, #348]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005dd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005dda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0308 	and.w	r3, r3, #8
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d005      	beq.n	8005df4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005de8:	4b52      	ldr	r3, [pc, #328]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	4a51      	ldr	r2, [pc, #324]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005dee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005df2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005df4:	4b4f      	ldr	r3, [pc, #316]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	494c      	ldr	r1, [pc, #304]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d040      	beq.n	8005e94 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d107      	bne.n	8005e2a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e1a:	4b46      	ldr	r3, [pc, #280]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d115      	bne.n	8005e52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e07d      	b.n	8005f26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d107      	bne.n	8005e42 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e32:	4b40      	ldr	r3, [pc, #256]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d109      	bne.n	8005e52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e071      	b.n	8005f26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e42:	4b3c      	ldr	r3, [pc, #240]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e069      	b.n	8005f26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e52:	4b38      	ldr	r3, [pc, #224]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f023 0203 	bic.w	r2, r3, #3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	4935      	ldr	r1, [pc, #212]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e64:	f7fc fa4e 	bl	8002304 <HAL_GetTick>
 8005e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e6a:	e00a      	b.n	8005e82 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e6c:	f7fc fa4a 	bl	8002304 <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d901      	bls.n	8005e82 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e051      	b.n	8005f26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e82:	4b2c      	ldr	r3, [pc, #176]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f003 020c 	and.w	r2, r3, #12
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d1eb      	bne.n	8005e6c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e94:	4b26      	ldr	r3, [pc, #152]	; (8005f30 <HAL_RCC_ClockConfig+0x1c0>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 030f 	and.w	r3, r3, #15
 8005e9c:	683a      	ldr	r2, [r7, #0]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d210      	bcs.n	8005ec4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ea2:	4b23      	ldr	r3, [pc, #140]	; (8005f30 <HAL_RCC_ClockConfig+0x1c0>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f023 020f 	bic.w	r2, r3, #15
 8005eaa:	4921      	ldr	r1, [pc, #132]	; (8005f30 <HAL_RCC_ClockConfig+0x1c0>)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eb2:	4b1f      	ldr	r3, [pc, #124]	; (8005f30 <HAL_RCC_ClockConfig+0x1c0>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 030f 	and.w	r3, r3, #15
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d001      	beq.n	8005ec4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e030      	b.n	8005f26 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0304 	and.w	r3, r3, #4
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d008      	beq.n	8005ee2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ed0:	4b18      	ldr	r3, [pc, #96]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	4915      	ldr	r1, [pc, #84]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0308 	and.w	r3, r3, #8
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d009      	beq.n	8005f02 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005eee:	4b11      	ldr	r3, [pc, #68]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	00db      	lsls	r3, r3, #3
 8005efc:	490d      	ldr	r1, [pc, #52]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f02:	f000 f81d 	bl	8005f40 <HAL_RCC_GetSysClockFreq>
 8005f06:	4601      	mov	r1, r0
 8005f08:	4b0a      	ldr	r3, [pc, #40]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	091b      	lsrs	r3, r3, #4
 8005f0e:	f003 030f 	and.w	r3, r3, #15
 8005f12:	4a09      	ldr	r2, [pc, #36]	; (8005f38 <HAL_RCC_ClockConfig+0x1c8>)
 8005f14:	5cd3      	ldrb	r3, [r2, r3]
 8005f16:	fa21 f303 	lsr.w	r3, r1, r3
 8005f1a:	4a08      	ldr	r2, [pc, #32]	; (8005f3c <HAL_RCC_ClockConfig+0x1cc>)
 8005f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005f1e:	2000      	movs	r0, #0
 8005f20:	f7fc f9ac 	bl	800227c <HAL_InitTick>

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	40023c00 	.word	0x40023c00
 8005f34:	40023800 	.word	0x40023800
 8005f38:	0800e384 	.word	0x0800e384
 8005f3c:	200000a8 	.word	0x200000a8

08005f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005f46:	2300      	movs	r3, #0
 8005f48:	607b      	str	r3, [r7, #4]
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	60fb      	str	r3, [r7, #12]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005f52:	2300      	movs	r3, #0
 8005f54:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f56:	4b50      	ldr	r3, [pc, #320]	; (8006098 <HAL_RCC_GetSysClockFreq+0x158>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f003 030c 	and.w	r3, r3, #12
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	d007      	beq.n	8005f72 <HAL_RCC_GetSysClockFreq+0x32>
 8005f62:	2b08      	cmp	r3, #8
 8005f64:	d008      	beq.n	8005f78 <HAL_RCC_GetSysClockFreq+0x38>
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f040 808d 	bne.w	8006086 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f6c:	4b4b      	ldr	r3, [pc, #300]	; (800609c <HAL_RCC_GetSysClockFreq+0x15c>)
 8005f6e:	60bb      	str	r3, [r7, #8]
       break;
 8005f70:	e08c      	b.n	800608c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f72:	4b4b      	ldr	r3, [pc, #300]	; (80060a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005f74:	60bb      	str	r3, [r7, #8]
      break;
 8005f76:	e089      	b.n	800608c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f78:	4b47      	ldr	r3, [pc, #284]	; (8006098 <HAL_RCC_GetSysClockFreq+0x158>)
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f80:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005f82:	4b45      	ldr	r3, [pc, #276]	; (8006098 <HAL_RCC_GetSysClockFreq+0x158>)
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d023      	beq.n	8005fd6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f8e:	4b42      	ldr	r3, [pc, #264]	; (8006098 <HAL_RCC_GetSysClockFreq+0x158>)
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	099b      	lsrs	r3, r3, #6
 8005f94:	f04f 0400 	mov.w	r4, #0
 8005f98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005f9c:	f04f 0200 	mov.w	r2, #0
 8005fa0:	ea03 0501 	and.w	r5, r3, r1
 8005fa4:	ea04 0602 	and.w	r6, r4, r2
 8005fa8:	4a3d      	ldr	r2, [pc, #244]	; (80060a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005faa:	fb02 f106 	mul.w	r1, r2, r6
 8005fae:	2200      	movs	r2, #0
 8005fb0:	fb02 f205 	mul.w	r2, r2, r5
 8005fb4:	440a      	add	r2, r1
 8005fb6:	493a      	ldr	r1, [pc, #232]	; (80060a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005fb8:	fba5 0101 	umull	r0, r1, r5, r1
 8005fbc:	1853      	adds	r3, r2, r1
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f04f 0400 	mov.w	r4, #0
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	4623      	mov	r3, r4
 8005fca:	f7fa f91d 	bl	8000208 <__aeabi_uldivmod>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	460c      	mov	r4, r1
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	e049      	b.n	800606a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fd6:	4b30      	ldr	r3, [pc, #192]	; (8006098 <HAL_RCC_GetSysClockFreq+0x158>)
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	099b      	lsrs	r3, r3, #6
 8005fdc:	f04f 0400 	mov.w	r4, #0
 8005fe0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005fe4:	f04f 0200 	mov.w	r2, #0
 8005fe8:	ea03 0501 	and.w	r5, r3, r1
 8005fec:	ea04 0602 	and.w	r6, r4, r2
 8005ff0:	4629      	mov	r1, r5
 8005ff2:	4632      	mov	r2, r6
 8005ff4:	f04f 0300 	mov.w	r3, #0
 8005ff8:	f04f 0400 	mov.w	r4, #0
 8005ffc:	0154      	lsls	r4, r2, #5
 8005ffe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006002:	014b      	lsls	r3, r1, #5
 8006004:	4619      	mov	r1, r3
 8006006:	4622      	mov	r2, r4
 8006008:	1b49      	subs	r1, r1, r5
 800600a:	eb62 0206 	sbc.w	r2, r2, r6
 800600e:	f04f 0300 	mov.w	r3, #0
 8006012:	f04f 0400 	mov.w	r4, #0
 8006016:	0194      	lsls	r4, r2, #6
 8006018:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800601c:	018b      	lsls	r3, r1, #6
 800601e:	1a5b      	subs	r3, r3, r1
 8006020:	eb64 0402 	sbc.w	r4, r4, r2
 8006024:	f04f 0100 	mov.w	r1, #0
 8006028:	f04f 0200 	mov.w	r2, #0
 800602c:	00e2      	lsls	r2, r4, #3
 800602e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006032:	00d9      	lsls	r1, r3, #3
 8006034:	460b      	mov	r3, r1
 8006036:	4614      	mov	r4, r2
 8006038:	195b      	adds	r3, r3, r5
 800603a:	eb44 0406 	adc.w	r4, r4, r6
 800603e:	f04f 0100 	mov.w	r1, #0
 8006042:	f04f 0200 	mov.w	r2, #0
 8006046:	02a2      	lsls	r2, r4, #10
 8006048:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800604c:	0299      	lsls	r1, r3, #10
 800604e:	460b      	mov	r3, r1
 8006050:	4614      	mov	r4, r2
 8006052:	4618      	mov	r0, r3
 8006054:	4621      	mov	r1, r4
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f04f 0400 	mov.w	r4, #0
 800605c:	461a      	mov	r2, r3
 800605e:	4623      	mov	r3, r4
 8006060:	f7fa f8d2 	bl	8000208 <__aeabi_uldivmod>
 8006064:	4603      	mov	r3, r0
 8006066:	460c      	mov	r4, r1
 8006068:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800606a:	4b0b      	ldr	r3, [pc, #44]	; (8006098 <HAL_RCC_GetSysClockFreq+0x158>)
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	0c1b      	lsrs	r3, r3, #16
 8006070:	f003 0303 	and.w	r3, r3, #3
 8006074:	3301      	adds	r3, #1
 8006076:	005b      	lsls	r3, r3, #1
 8006078:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006082:	60bb      	str	r3, [r7, #8]
      break;
 8006084:	e002      	b.n	800608c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006086:	4b05      	ldr	r3, [pc, #20]	; (800609c <HAL_RCC_GetSysClockFreq+0x15c>)
 8006088:	60bb      	str	r3, [r7, #8]
      break;
 800608a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800608c:	68bb      	ldr	r3, [r7, #8]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3714      	adds	r7, #20
 8006092:	46bd      	mov	sp, r7
 8006094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006096:	bf00      	nop
 8006098:	40023800 	.word	0x40023800
 800609c:	00f42400 	.word	0x00f42400
 80060a0:	017d7840 	.word	0x017d7840

080060a4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060a4:	b480      	push	{r7}
 80060a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060a8:	4b03      	ldr	r3, [pc, #12]	; (80060b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80060aa:	681b      	ldr	r3, [r3, #0]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	200000a8 	.word	0x200000a8

080060bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80060c0:	f7ff fff0 	bl	80060a4 <HAL_RCC_GetHCLKFreq>
 80060c4:	4601      	mov	r1, r0
 80060c6:	4b05      	ldr	r3, [pc, #20]	; (80060dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	0a9b      	lsrs	r3, r3, #10
 80060cc:	f003 0307 	and.w	r3, r3, #7
 80060d0:	4a03      	ldr	r2, [pc, #12]	; (80060e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060d2:	5cd3      	ldrb	r3, [r2, r3]
 80060d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80060d8:	4618      	mov	r0, r3
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	40023800 	.word	0x40023800
 80060e0:	0800e394 	.word	0x0800e394

080060e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80060e8:	f7ff ffdc 	bl	80060a4 <HAL_RCC_GetHCLKFreq>
 80060ec:	4601      	mov	r1, r0
 80060ee:	4b05      	ldr	r3, [pc, #20]	; (8006104 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	0b5b      	lsrs	r3, r3, #13
 80060f4:	f003 0307 	and.w	r3, r3, #7
 80060f8:	4a03      	ldr	r2, [pc, #12]	; (8006108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060fa:	5cd3      	ldrb	r3, [r2, r3]
 80060fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006100:	4618      	mov	r0, r3
 8006102:	bd80      	pop	{r7, pc}
 8006104:	40023800 	.word	0x40023800
 8006108:	0800e394 	.word	0x0800e394

0800610c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b088      	sub	sp, #32
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006114:	2300      	movs	r3, #0
 8006116:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006118:	2300      	movs	r3, #0
 800611a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800611c:	2300      	movs	r3, #0
 800611e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006120:	2300      	movs	r3, #0
 8006122:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006124:	2300      	movs	r3, #0
 8006126:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	2b00      	cmp	r3, #0
 8006132:	d012      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006134:	4b69      	ldr	r3, [pc, #420]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	4a68      	ldr	r2, [pc, #416]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800613a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800613e:	6093      	str	r3, [r2, #8]
 8006140:	4b66      	ldr	r3, [pc, #408]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006148:	4964      	ldr	r1, [pc, #400]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800614a:	4313      	orrs	r3, r2
 800614c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006156:	2301      	movs	r3, #1
 8006158:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d017      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006166:	4b5d      	ldr	r3, [pc, #372]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800616c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006174:	4959      	ldr	r1, [pc, #356]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006176:	4313      	orrs	r3, r2
 8006178:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006180:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006184:	d101      	bne.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006186:	2301      	movs	r3, #1
 8006188:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006192:	2301      	movs	r3, #1
 8006194:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d017      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80061a2:	4b4e      	ldr	r3, [pc, #312]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b0:	494a      	ldr	r1, [pc, #296]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061c0:	d101      	bne.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80061c2:	2301      	movs	r3, #1
 80061c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80061ce:	2301      	movs	r3, #1
 80061d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80061de:	2301      	movs	r3, #1
 80061e0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0320 	and.w	r3, r3, #32
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 808b 	beq.w	8006306 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80061f0:	4b3a      	ldr	r3, [pc, #232]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f4:	4a39      	ldr	r2, [pc, #228]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061fa:	6413      	str	r3, [r2, #64]	; 0x40
 80061fc:	4b37      	ldr	r3, [pc, #220]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006204:	60bb      	str	r3, [r7, #8]
 8006206:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006208:	4b35      	ldr	r3, [pc, #212]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a34      	ldr	r2, [pc, #208]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800620e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006212:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006214:	f7fc f876 	bl	8002304 <HAL_GetTick>
 8006218:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800621a:	e008      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800621c:	f7fc f872 	bl	8002304 <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b64      	cmp	r3, #100	; 0x64
 8006228:	d901      	bls.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e355      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800622e:	4b2c      	ldr	r3, [pc, #176]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006236:	2b00      	cmp	r3, #0
 8006238:	d0f0      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800623a:	4b28      	ldr	r3, [pc, #160]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800623c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006242:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d035      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	429a      	cmp	r2, r3
 8006256:	d02e      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006258:	4b20      	ldr	r3, [pc, #128]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800625a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800625c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006260:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006262:	4b1e      	ldr	r3, [pc, #120]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006266:	4a1d      	ldr	r2, [pc, #116]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800626c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800626e:	4b1b      	ldr	r3, [pc, #108]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006272:	4a1a      	ldr	r2, [pc, #104]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006278:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800627a:	4a18      	ldr	r2, [pc, #96]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006280:	4b16      	ldr	r3, [pc, #88]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	2b01      	cmp	r3, #1
 800628a:	d114      	bne.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800628c:	f7fc f83a 	bl	8002304 <HAL_GetTick>
 8006290:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006292:	e00a      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006294:	f7fc f836 	bl	8002304 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	f241 3288 	movw	r2, #5000	; 0x1388
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d901      	bls.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e317      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062aa:	4b0c      	ldr	r3, [pc, #48]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d0ee      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062c2:	d111      	bne.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80062c4:	4b05      	ldr	r3, [pc, #20]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80062d0:	4b04      	ldr	r3, [pc, #16]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80062d2:	400b      	ands	r3, r1
 80062d4:	4901      	ldr	r1, [pc, #4]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	608b      	str	r3, [r1, #8]
 80062da:	e00b      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80062dc:	40023800 	.word	0x40023800
 80062e0:	40007000 	.word	0x40007000
 80062e4:	0ffffcff 	.word	0x0ffffcff
 80062e8:	4bb0      	ldr	r3, [pc, #704]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	4aaf      	ldr	r2, [pc, #700]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80062f2:	6093      	str	r3, [r2, #8]
 80062f4:	4bad      	ldr	r3, [pc, #692]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006300:	49aa      	ldr	r1, [pc, #680]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006302:	4313      	orrs	r3, r2
 8006304:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0310 	and.w	r3, r3, #16
 800630e:	2b00      	cmp	r3, #0
 8006310:	d010      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006312:	4ba6      	ldr	r3, [pc, #664]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006318:	4aa4      	ldr	r2, [pc, #656]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800631a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800631e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006322:	4ba2      	ldr	r3, [pc, #648]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006324:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632c:	499f      	ldr	r1, [pc, #636]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800632e:	4313      	orrs	r3, r2
 8006330:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00a      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006340:	4b9a      	ldr	r3, [pc, #616]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006346:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800634e:	4997      	ldr	r1, [pc, #604]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006350:	4313      	orrs	r3, r2
 8006352:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00a      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006362:	4b92      	ldr	r3, [pc, #584]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006368:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006370:	498e      	ldr	r1, [pc, #568]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006372:	4313      	orrs	r3, r2
 8006374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00a      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006384:	4b89      	ldr	r3, [pc, #548]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800638a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006392:	4986      	ldr	r1, [pc, #536]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006394:	4313      	orrs	r3, r2
 8006396:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00a      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063a6:	4b81      	ldr	r3, [pc, #516]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b4:	497d      	ldr	r1, [pc, #500]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00a      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063c8:	4b78      	ldr	r3, [pc, #480]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ce:	f023 0203 	bic.w	r2, r3, #3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d6:	4975      	ldr	r1, [pc, #468]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00a      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063ea:	4b70      	ldr	r3, [pc, #448]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f0:	f023 020c 	bic.w	r2, r3, #12
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063f8:	496c      	ldr	r1, [pc, #432]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00a      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800640c:	4b67      	ldr	r3, [pc, #412]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800640e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006412:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800641a:	4964      	ldr	r1, [pc, #400]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800641c:	4313      	orrs	r3, r2
 800641e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00a      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800642e:	4b5f      	ldr	r3, [pc, #380]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006434:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800643c:	495b      	ldr	r1, [pc, #364]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800643e:	4313      	orrs	r3, r2
 8006440:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00a      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006450:	4b56      	ldr	r3, [pc, #344]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006456:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800645e:	4953      	ldr	r1, [pc, #332]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006460:	4313      	orrs	r3, r2
 8006462:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00a      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006472:	4b4e      	ldr	r3, [pc, #312]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006478:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006480:	494a      	ldr	r1, [pc, #296]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006482:	4313      	orrs	r3, r2
 8006484:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00a      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006494:	4b45      	ldr	r3, [pc, #276]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800649a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a2:	4942      	ldr	r1, [pc, #264]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064a4:	4313      	orrs	r3, r2
 80064a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00a      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80064b6:	4b3d      	ldr	r3, [pc, #244]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c4:	4939      	ldr	r1, [pc, #228]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00a      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80064d8:	4b34      	ldr	r3, [pc, #208]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064e6:	4931      	ldr	r1, [pc, #196]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d011      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80064fa:	4b2c      	ldr	r3, [pc, #176]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006500:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006508:	4928      	ldr	r1, [pc, #160]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800650a:	4313      	orrs	r3, r2
 800650c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006514:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006518:	d101      	bne.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800651a:	2301      	movs	r3, #1
 800651c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0308 	and.w	r3, r3, #8
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800652a:	2301      	movs	r3, #1
 800652c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00a      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800653a:	4b1c      	ldr	r3, [pc, #112]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800653c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006540:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006548:	4918      	ldr	r1, [pc, #96]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800654a:	4313      	orrs	r3, r2
 800654c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00b      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800655c:	4b13      	ldr	r3, [pc, #76]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800655e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006562:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800656c:	490f      	ldr	r1, [pc, #60]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800656e:	4313      	orrs	r3, r2
 8006570:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d005      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006582:	f040 80d8 	bne.w	8006736 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006586:	4b09      	ldr	r3, [pc, #36]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a08      	ldr	r2, [pc, #32]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800658c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006590:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006592:	f7fb feb7 	bl	8002304 <HAL_GetTick>
 8006596:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006598:	e00a      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800659a:	f7fb feb3 	bl	8002304 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	2b64      	cmp	r3, #100	; 0x64
 80065a6:	d903      	bls.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e196      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80065ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065b0:	4b6c      	ldr	r3, [pc, #432]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1ee      	bne.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d021      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x500>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d11d      	bne.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80065d0:	4b64      	ldr	r3, [pc, #400]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80065d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065d6:	0c1b      	lsrs	r3, r3, #16
 80065d8:	f003 0303 	and.w	r3, r3, #3
 80065dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80065de:	4b61      	ldr	r3, [pc, #388]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80065e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065e4:	0e1b      	lsrs	r3, r3, #24
 80065e6:	f003 030f 	and.w	r3, r3, #15
 80065ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	019a      	lsls	r2, r3, #6
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	041b      	lsls	r3, r3, #16
 80065f6:	431a      	orrs	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	061b      	lsls	r3, r3, #24
 80065fc:	431a      	orrs	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	071b      	lsls	r3, r3, #28
 8006604:	4957      	ldr	r1, [pc, #348]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006606:	4313      	orrs	r3, r2
 8006608:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d004      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800661c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006620:	d00a      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800662a:	2b00      	cmp	r3, #0
 800662c:	d02e      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006632:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006636:	d129      	bne.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006638:	4b4a      	ldr	r3, [pc, #296]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800663a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800663e:	0c1b      	lsrs	r3, r3, #16
 8006640:	f003 0303 	and.w	r3, r3, #3
 8006644:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006646:	4b47      	ldr	r3, [pc, #284]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800664c:	0f1b      	lsrs	r3, r3, #28
 800664e:	f003 0307 	and.w	r3, r3, #7
 8006652:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	019a      	lsls	r2, r3, #6
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	041b      	lsls	r3, r3, #16
 800665e:	431a      	orrs	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	061b      	lsls	r3, r3, #24
 8006666:	431a      	orrs	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	071b      	lsls	r3, r3, #28
 800666c:	493d      	ldr	r1, [pc, #244]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800666e:	4313      	orrs	r3, r2
 8006670:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006674:	4b3b      	ldr	r3, [pc, #236]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006676:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800667a:	f023 021f 	bic.w	r2, r3, #31
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006682:	3b01      	subs	r3, #1
 8006684:	4937      	ldr	r1, [pc, #220]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006686:	4313      	orrs	r3, r2
 8006688:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006694:	2b00      	cmp	r3, #0
 8006696:	d01d      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006698:	4b32      	ldr	r3, [pc, #200]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800669a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800669e:	0e1b      	lsrs	r3, r3, #24
 80066a0:	f003 030f 	and.w	r3, r3, #15
 80066a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80066a6:	4b2f      	ldr	r3, [pc, #188]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066ac:	0f1b      	lsrs	r3, r3, #28
 80066ae:	f003 0307 	and.w	r3, r3, #7
 80066b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	019a      	lsls	r2, r3, #6
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	041b      	lsls	r3, r3, #16
 80066c0:	431a      	orrs	r2, r3
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	061b      	lsls	r3, r3, #24
 80066c6:	431a      	orrs	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	071b      	lsls	r3, r3, #28
 80066cc:	4925      	ldr	r1, [pc, #148]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d011      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	019a      	lsls	r2, r3, #6
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	041b      	lsls	r3, r3, #16
 80066ec:	431a      	orrs	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	061b      	lsls	r3, r3, #24
 80066f4:	431a      	orrs	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	071b      	lsls	r3, r3, #28
 80066fc:	4919      	ldr	r1, [pc, #100]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006704:	4b17      	ldr	r3, [pc, #92]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a16      	ldr	r2, [pc, #88]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800670a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800670e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006710:	f7fb fdf8 	bl	8002304 <HAL_GetTick>
 8006714:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006716:	e008      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006718:	f7fb fdf4 	bl	8002304 <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	2b64      	cmp	r3, #100	; 0x64
 8006724:	d901      	bls.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e0d7      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800672a:	4b0e      	ldr	r3, [pc, #56]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0f0      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	2b01      	cmp	r3, #1
 800673a:	f040 80cd 	bne.w	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800673e:	4b09      	ldr	r3, [pc, #36]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a08      	ldr	r2, [pc, #32]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006748:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800674a:	f7fb fddb 	bl	8002304 <HAL_GetTick>
 800674e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006750:	e00a      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006752:	f7fb fdd7 	bl	8002304 <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	2b64      	cmp	r3, #100	; 0x64
 800675e:	d903      	bls.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e0ba      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006764:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006768:	4b5e      	ldr	r3, [pc, #376]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006770:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006774:	d0ed      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d003      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006786:	2b00      	cmp	r3, #0
 8006788:	d009      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006792:	2b00      	cmp	r3, #0
 8006794:	d02e      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679a:	2b00      	cmp	r3, #0
 800679c:	d12a      	bne.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800679e:	4b51      	ldr	r3, [pc, #324]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a4:	0c1b      	lsrs	r3, r3, #16
 80067a6:	f003 0303 	and.w	r3, r3, #3
 80067aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80067ac:	4b4d      	ldr	r3, [pc, #308]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b2:	0f1b      	lsrs	r3, r3, #28
 80067b4:	f003 0307 	and.w	r3, r3, #7
 80067b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	019a      	lsls	r2, r3, #6
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	041b      	lsls	r3, r3, #16
 80067c4:	431a      	orrs	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	061b      	lsls	r3, r3, #24
 80067cc:	431a      	orrs	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	071b      	lsls	r3, r3, #28
 80067d2:	4944      	ldr	r1, [pc, #272]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80067da:	4b42      	ldr	r3, [pc, #264]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e8:	3b01      	subs	r3, #1
 80067ea:	021b      	lsls	r3, r3, #8
 80067ec:	493d      	ldr	r1, [pc, #244]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d022      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006804:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006808:	d11d      	bne.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800680a:	4b36      	ldr	r3, [pc, #216]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800680c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006810:	0e1b      	lsrs	r3, r3, #24
 8006812:	f003 030f 	and.w	r3, r3, #15
 8006816:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006818:	4b32      	ldr	r3, [pc, #200]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800681a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800681e:	0f1b      	lsrs	r3, r3, #28
 8006820:	f003 0307 	and.w	r3, r3, #7
 8006824:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	019a      	lsls	r2, r3, #6
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a1b      	ldr	r3, [r3, #32]
 8006830:	041b      	lsls	r3, r3, #16
 8006832:	431a      	orrs	r2, r3
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	061b      	lsls	r3, r3, #24
 8006838:	431a      	orrs	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	071b      	lsls	r3, r3, #28
 800683e:	4929      	ldr	r1, [pc, #164]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006840:	4313      	orrs	r3, r2
 8006842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0308 	and.w	r3, r3, #8
 800684e:	2b00      	cmp	r3, #0
 8006850:	d028      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006852:	4b24      	ldr	r3, [pc, #144]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006858:	0e1b      	lsrs	r3, r3, #24
 800685a:	f003 030f 	and.w	r3, r3, #15
 800685e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006860:	4b20      	ldr	r3, [pc, #128]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006866:	0c1b      	lsrs	r3, r3, #16
 8006868:	f003 0303 	and.w	r3, r3, #3
 800686c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	019a      	lsls	r2, r3, #6
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	041b      	lsls	r3, r3, #16
 8006878:	431a      	orrs	r2, r3
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	061b      	lsls	r3, r3, #24
 800687e:	431a      	orrs	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	69db      	ldr	r3, [r3, #28]
 8006884:	071b      	lsls	r3, r3, #28
 8006886:	4917      	ldr	r1, [pc, #92]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006888:	4313      	orrs	r3, r2
 800688a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800688e:	4b15      	ldr	r3, [pc, #84]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006894:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689c:	4911      	ldr	r1, [pc, #68]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80068a4:	4b0f      	ldr	r3, [pc, #60]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a0e      	ldr	r2, [pc, #56]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80068aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068b0:	f7fb fd28 	bl	8002304 <HAL_GetTick>
 80068b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80068b6:	e008      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80068b8:	f7fb fd24 	bl	8002304 <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	2b64      	cmp	r3, #100	; 0x64
 80068c4:	d901      	bls.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e007      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80068ca:	4b06      	ldr	r3, [pc, #24]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068d6:	d1ef      	bne.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3720      	adds	r7, #32
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	40023800 	.word	0x40023800

080068e8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d101      	bne.n	80068fa <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e06b      	b.n	80069d2 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	7f5b      	ldrb	r3, [r3, #29]
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	d105      	bne.n	8006910 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f004 fd6c 	bl	800b3e8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2202      	movs	r2, #2
 8006914:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	22ca      	movs	r2, #202	; 0xca
 800691c:	625a      	str	r2, [r3, #36]	; 0x24
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2253      	movs	r2, #83	; 0x53
 8006924:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fb00 	bl	8006f2c <RTC_EnterInitMode>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d008      	beq.n	8006944 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	22ff      	movs	r2, #255	; 0xff
 8006938:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2204      	movs	r2, #4
 800693e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e046      	b.n	80069d2 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6899      	ldr	r1, [r3, #8]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	4b23      	ldr	r3, [pc, #140]	; (80069dc <HAL_RTC_Init+0xf4>)
 8006950:	400b      	ands	r3, r1
 8006952:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6899      	ldr	r1, [r3, #8]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	431a      	orrs	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	695b      	ldr	r3, [r3, #20]
 8006968:	431a      	orrs	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	68d2      	ldr	r2, [r2, #12]
 800697a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6919      	ldr	r1, [r3, #16]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	041a      	lsls	r2, r3, #16
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	430a      	orrs	r2, r1
 800698e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68da      	ldr	r2, [r3, #12]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800699e:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f022 0208 	bic.w	r2, r2, #8
 80069ae:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	699a      	ldr	r2, [r3, #24]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	430a      	orrs	r2, r1
 80069c0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	22ff      	movs	r2, #255	; 0xff
 80069c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2201      	movs	r2, #1
 80069ce:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80069d0:	2300      	movs	r3, #0
  }
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	ff8fffbf 	.word	0xff8fffbf

080069e0 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80069e0:	b590      	push	{r4, r7, lr}
 80069e2:	b087      	sub	sp, #28
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80069ec:	2300      	movs	r3, #0
 80069ee:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	7f1b      	ldrb	r3, [r3, #28]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d101      	bne.n	80069fc <HAL_RTC_SetTime+0x1c>
 80069f8:	2302      	movs	r3, #2
 80069fa:	e0a8      	b.n	8006b4e <HAL_RTC_SetTime+0x16e>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2201      	movs	r2, #1
 8006a00:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2202      	movs	r2, #2
 8006a06:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d126      	bne.n	8006a5c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d102      	bne.n	8006a22 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	4618      	mov	r0, r3
 8006a28:	f000 faac 	bl	8006f84 <RTC_ByteToBcd2>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	785b      	ldrb	r3, [r3, #1]
 8006a34:	4618      	mov	r0, r3
 8006a36:	f000 faa5 	bl	8006f84 <RTC_ByteToBcd2>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006a3e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	789b      	ldrb	r3, [r3, #2]
 8006a44:	4618      	mov	r0, r3
 8006a46:	f000 fa9d 	bl	8006f84 <RTC_ByteToBcd2>
 8006a4a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8006a4c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	7b1b      	ldrb	r3, [r3, #12]
 8006a54:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006a56:	4313      	orrs	r3, r2
 8006a58:	617b      	str	r3, [r7, #20]
 8006a5a:	e018      	b.n	8006a8e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d102      	bne.n	8006a70 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	785b      	ldrb	r3, [r3, #1]
 8006a7a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006a7c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8006a82:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	7b1b      	ldrb	r3, [r3, #12]
 8006a88:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	22ca      	movs	r2, #202	; 0xca
 8006a94:	625a      	str	r2, [r3, #36]	; 0x24
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2253      	movs	r2, #83	; 0x53
 8006a9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f000 fa44 	bl	8006f2c <RTC_EnterInitMode>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00b      	beq.n	8006ac2 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	22ff      	movs	r2, #255	; 0xff
 8006ab0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2204      	movs	r2, #4
 8006ab6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2200      	movs	r2, #0
 8006abc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e045      	b.n	8006b4e <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	6979      	ldr	r1, [r7, #20]
 8006ac8:	4b23      	ldr	r3, [pc, #140]	; (8006b58 <HAL_RTC_SetTime+0x178>)
 8006aca:	400b      	ands	r3, r1
 8006acc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689a      	ldr	r2, [r3, #8]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006adc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	6899      	ldr	r1, [r3, #8]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	691a      	ldr	r2, [r3, #16]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	431a      	orrs	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68da      	ldr	r2, [r3, #12]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b04:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f003 0320 	and.w	r3, r3, #32
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d111      	bne.n	8006b38 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 f9e1 	bl	8006edc <HAL_RTC_WaitForSynchro>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00b      	beq.n	8006b38 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	22ff      	movs	r2, #255	; 0xff
 8006b26:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2204      	movs	r2, #4
 8006b2c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e00a      	b.n	8006b4e <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	22ff      	movs	r2, #255	; 0xff
 8006b3e:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2201      	movs	r2, #1
 8006b44:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
  }
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	371c      	adds	r7, #28
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd90      	pop	{r4, r7, pc}
 8006b56:	bf00      	nop
 8006b58:	007f7f7f 	.word	0x007f7f7f

08006b5c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006b5c:	b590      	push	{r4, r7, lr}
 8006b5e:	b087      	sub	sp, #28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	7f1b      	ldrb	r3, [r3, #28]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d101      	bne.n	8006b78 <HAL_RTC_SetDate+0x1c>
 8006b74:	2302      	movs	r3, #2
 8006b76:	e092      	b.n	8006c9e <HAL_RTC_SetDate+0x142>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2202      	movs	r2, #2
 8006b82:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10e      	bne.n	8006ba8 <HAL_RTC_SetDate+0x4c>
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	785b      	ldrb	r3, [r3, #1]
 8006b8e:	f003 0310 	and.w	r3, r3, #16
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d008      	beq.n	8006ba8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	785b      	ldrb	r3, [r3, #1]
 8006b9a:	f023 0310 	bic.w	r3, r3, #16
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	330a      	adds	r3, #10
 8006ba2:	b2da      	uxtb	r2, r3
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d11c      	bne.n	8006be8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	78db      	ldrb	r3, [r3, #3]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f000 f9e6 	bl	8006f84 <RTC_ByteToBcd2>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	785b      	ldrb	r3, [r3, #1]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f000 f9df 	bl	8006f84 <RTC_ByteToBcd2>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006bca:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	789b      	ldrb	r3, [r3, #2]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 f9d7 	bl	8006f84 <RTC_ByteToBcd2>
 8006bd6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8006bd8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006be2:	4313      	orrs	r3, r2
 8006be4:	617b      	str	r3, [r7, #20]
 8006be6:	e00e      	b.n	8006c06 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	78db      	ldrb	r3, [r3, #3]
 8006bec:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	785b      	ldrb	r3, [r3, #1]
 8006bf2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006bf4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8006bfa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006c02:	4313      	orrs	r3, r2
 8006c04:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	22ca      	movs	r2, #202	; 0xca
 8006c0c:	625a      	str	r2, [r3, #36]	; 0x24
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2253      	movs	r2, #83	; 0x53
 8006c14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f000 f988 	bl	8006f2c <RTC_EnterInitMode>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00b      	beq.n	8006c3a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	22ff      	movs	r2, #255	; 0xff
 8006c28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2204      	movs	r2, #4
 8006c2e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e031      	b.n	8006c9e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	6979      	ldr	r1, [r7, #20]
 8006c40:	4b19      	ldr	r3, [pc, #100]	; (8006ca8 <HAL_RTC_SetDate+0x14c>)
 8006c42:	400b      	ands	r3, r1
 8006c44:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68da      	ldr	r2, [r3, #12]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c54:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f003 0320 	and.w	r3, r3, #32
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d111      	bne.n	8006c88 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f000 f939 	bl	8006edc <HAL_RTC_WaitForSynchro>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00b      	beq.n	8006c88 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	22ff      	movs	r2, #255	; 0xff
 8006c76:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2204      	movs	r2, #4
 8006c7c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e00a      	b.n	8006c9e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	22ff      	movs	r2, #255	; 0xff
 8006c8e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2201      	movs	r2, #1
 8006c94:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
  }
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	371c      	adds	r7, #28
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd90      	pop	{r4, r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	00ffff3f 	.word	0x00ffff3f

08006cac <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006cac:	b590      	push	{r4, r7, lr}
 8006cae:	b089      	sub	sp, #36	; 0x24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	61fb      	str	r3, [r7, #28]
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	7f1b      	ldrb	r3, [r3, #28]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d101      	bne.n	8006cd0 <HAL_RTC_SetAlarm+0x24>
 8006ccc:	2302      	movs	r3, #2
 8006cce:	e101      	b.n	8006ed4 <HAL_RTC_SetAlarm+0x228>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2202      	movs	r2, #2
 8006cda:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d137      	bne.n	8006d52 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d102      	bne.n	8006cf6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 f942 	bl	8006f84 <RTC_ByteToBcd2>
 8006d00:	4603      	mov	r3, r0
 8006d02:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	785b      	ldrb	r3, [r3, #1]
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f000 f93b 	bl	8006f84 <RTC_ByteToBcd2>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8006d12:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	789b      	ldrb	r3, [r3, #2]
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f000 f933 	bl	8006f84 <RTC_ByteToBcd2>
 8006d1e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8006d20:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	7b1b      	ldrb	r3, [r3, #12]
 8006d28:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006d2a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d34:	4618      	mov	r0, r3
 8006d36:	f000 f925 	bl	8006f84 <RTC_ByteToBcd2>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006d3e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8006d46:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	61fb      	str	r3, [r7, #28]
 8006d50:	e023      	b.n	8006d9a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d102      	bne.n	8006d66 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	2200      	movs	r2, #0
 8006d64:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	785b      	ldrb	r3, [r3, #1]
 8006d70:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8006d72:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8006d78:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	7b1b      	ldrb	r3, [r3, #12]
 8006d7e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006d80:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d88:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006d8a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8006d90:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8006d96:	4313      	orrs	r3, r2
 8006d98:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	685a      	ldr	r2, [r3, #4]
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	69db      	ldr	r3, [r3, #28]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	22ca      	movs	r2, #202	; 0xca
 8006dac:	625a      	str	r2, [r3, #36]	; 0x24
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2253      	movs	r2, #83	; 0x53
 8006db4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dbe:	d13f      	bne.n	8006e40 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689a      	ldr	r2, [r3, #8]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006dce:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689a      	ldr	r2, [r3, #8]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006dde:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006de0:	f7fb fa90 	bl	8002304 <HAL_GetTick>
 8006de4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8006de6:	e013      	b.n	8006e10 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006de8:	f7fb fa8c 	bl	8002304 <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006df6:	d90b      	bls.n	8006e10 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	22ff      	movs	r2, #255	; 0xff
 8006dfe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2203      	movs	r2, #3
 8006e04:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	e061      	b.n	8006ed4 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d0e4      	beq.n	8006de8 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	69fa      	ldr	r2, [r7, #28]
 8006e24:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	689a      	ldr	r2, [r3, #8]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e3c:	609a      	str	r2, [r3, #8]
 8006e3e:	e03e      	b.n	8006ebe <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	689a      	ldr	r2, [r3, #8]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006e4e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689a      	ldr	r2, [r3, #8]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e5e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006e60:	f7fb fa50 	bl	8002304 <HAL_GetTick>
 8006e64:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8006e66:	e013      	b.n	8006e90 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006e68:	f7fb fa4c 	bl	8002304 <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e76:	d90b      	bls.n	8006e90 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	22ff      	movs	r2, #255	; 0xff
 8006e7e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2203      	movs	r2, #3
 8006e84:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e021      	b.n	8006ed4 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d0e4      	beq.n	8006e68 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	69fa      	ldr	r2, [r7, #28]
 8006ea4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	689a      	ldr	r2, [r3, #8]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ebc:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	22ff      	movs	r2, #255	; 0xff
 8006ec4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3724      	adds	r7, #36	; 0x24
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd90      	pop	{r4, r7, pc}

08006edc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68da      	ldr	r2, [r3, #12]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ef6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006ef8:	f7fb fa04 	bl	8002304 <HAL_GetTick>
 8006efc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006efe:	e009      	b.n	8006f14 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006f00:	f7fb fa00 	bl	8002304 <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f0e:	d901      	bls.n	8006f14 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e007      	b.n	8006f24 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	f003 0320 	and.w	r3, r3, #32
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d0ee      	beq.n	8006f00 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006f34:	2300      	movs	r3, #0
 8006f36:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d119      	bne.n	8006f7a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f4e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006f50:	f7fb f9d8 	bl	8002304 <HAL_GetTick>
 8006f54:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006f56:	e009      	b.n	8006f6c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006f58:	f7fb f9d4 	bl	8002304 <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f66:	d901      	bls.n	8006f6c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e007      	b.n	8006f7c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d0ee      	beq.n	8006f58 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8006f92:	e005      	b.n	8006fa0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	3301      	adds	r3, #1
 8006f98:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8006f9a:	79fb      	ldrb	r3, [r7, #7]
 8006f9c:	3b0a      	subs	r3, #10
 8006f9e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8006fa0:	79fb      	ldrb	r3, [r7, #7]
 8006fa2:	2b09      	cmp	r3, #9
 8006fa4:	d8f6      	bhi.n	8006f94 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	011b      	lsls	r3, r3, #4
 8006fac:	b2da      	uxtb	r2, r3
 8006fae:	79fb      	ldrb	r3, [r7, #7]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	b2db      	uxtb	r3, r3
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3714      	adds	r7, #20
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b087      	sub	sp, #28
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	7f1b      	ldrb	r3, [r3, #28]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d101      	bne.n	8006fdc <HAL_RTCEx_SetTimeStamp+0x1c>
 8006fd8:	2302      	movs	r3, #2
 8006fda:	e03e      	b.n	800705a <HAL_RTCEx_SetTimeStamp+0x9a>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2202      	movs	r2, #2
 8006fe6:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	689a      	ldr	r2, [r3, #8]
 8006fee:	4b1e      	ldr	r3, [pc, #120]	; (8007068 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	22ca      	movs	r2, #202	; 0xca
 8007002:	625a      	str	r2, [r3, #36]	; 0x24
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2253      	movs	r2, #83	; 0x53
 800700a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f022 0206 	bic.w	r2, r2, #6
 800701a:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	430a      	orrs	r2, r1
 800702a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	689a      	ldr	r2, [r3, #8]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007042:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	22ff      	movs	r2, #255	; 0xff
 800704a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2201      	movs	r2, #1
 8007050:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	371c      	adds	r7, #28
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	fffff7f7 	.word	0xfffff7f7

0800706c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d101      	bne.n	800707e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e01d      	b.n	80070ba <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b00      	cmp	r3, #0
 8007088:	d105      	bne.n	8007096 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f004 f9c3 	bl	800b41c <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2203      	movs	r2, #3
 800709a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f80f 	bl	80070c2 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3708      	adds	r7, #8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80070c2:	b5b0      	push	{r4, r5, r7, lr}
 80070c4:	b08e      	sub	sp, #56	; 0x38
 80070c6:	af04      	add	r7, sp, #16
 80070c8:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80070ca:	2300      	movs	r3, #0
 80070cc:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80070ce:	2300      	movs	r3, #0
 80070d0:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80070d2:	2300      	movs	r3, #0
 80070d4:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80070d6:	2300      	movs	r3, #0
 80070d8:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80070da:	2300      	movs	r3, #0
 80070dc:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80070de:	2300      	movs	r3, #0
 80070e0:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80070e2:	2376      	movs	r3, #118	; 0x76
 80070e4:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681d      	ldr	r5, [r3, #0]
 80070ea:	466c      	mov	r4, sp
 80070ec:	f107 0318 	add.w	r3, r7, #24
 80070f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80070f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80070f8:	f107 030c 	add.w	r3, r7, #12
 80070fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070fe:	4628      	mov	r0, r5
 8007100:	f001 ffa2 	bl	8009048 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	685a      	ldr	r2, [r3, #4]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007112:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4618      	mov	r0, r3
 800711a:	f001 ffce 	bl	80090ba <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	685a      	ldr	r2, [r3, #4]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800712c:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 800712e:	2002      	movs	r0, #2
 8007130:	f7fb f8f4 	bl	800231c <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fb95 	bl	8007864 <SD_PowerON>
 800713a:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800713c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00b      	beq.n	800715a <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800714e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007150:	431a      	orrs	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e013      	b.n	8007182 <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fab9 	bl	80076d2 <SD_InitCard>
 8007160:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00b      	beq.n	8007180 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	431a      	orrs	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e000      	b.n	8007182 <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3728      	adds	r7, #40	; 0x28
 8007186:	46bd      	mov	sp, r7
 8007188:	bdb0      	pop	{r4, r5, r7, pc}

0800718a <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800718a:	b480      	push	{r7}
 800718c:	b085      	sub	sp, #20
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8007194:	2300      	movs	r3, #0
 8007196:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800719c:	0e1b      	lsrs	r3, r3, #24
 800719e:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	099b      	lsrs	r3, r3, #6
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	f003 0303 	and.w	r3, r3, #3
 80071aa:	b2da      	uxtb	r2, r3
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	089b      	lsrs	r3, r3, #2
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	f003 030f 	and.w	r3, r3, #15
 80071ba:	b2da      	uxtb	r2, r3
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	f003 0303 	and.w	r3, r3, #3
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071d2:	0c1b      	lsrs	r3, r3, #16
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071e4:	0a1b      	lsrs	r3, r3, #8
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007206:	0e1b      	lsrs	r3, r3, #24
 8007208:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	b29b      	uxth	r3, r3
 800720e:	011b      	lsls	r3, r3, #4
 8007210:	b29a      	uxth	r2, r3
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800721a:	0c1b      	lsrs	r3, r3, #16
 800721c:	b2db      	uxtb	r3, r3
 800721e:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	88db      	ldrh	r3, [r3, #6]
 8007224:	b29a      	uxth	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	091b      	lsrs	r3, r3, #4
 800722a:	b29b      	uxth	r3, r3
 800722c:	f003 030f 	and.w	r3, r3, #15
 8007230:	b29b      	uxth	r3, r3
 8007232:	4313      	orrs	r3, r2
 8007234:	b29a      	uxth	r2, r3
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	b2db      	uxtb	r3, r3
 800723e:	f003 030f 	and.w	r3, r3, #15
 8007242:	b2da      	uxtb	r2, r3
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800724c:	0a1b      	lsrs	r3, r3, #8
 800724e:	b2db      	uxtb	r3, r3
 8007250:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	09db      	lsrs	r3, r3, #7
 8007256:	b2db      	uxtb	r3, r3
 8007258:	f003 0301 	and.w	r3, r3, #1
 800725c:	b2da      	uxtb	r2, r3
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	099b      	lsrs	r3, r3, #6
 8007266:	b2db      	uxtb	r3, r3
 8007268:	f003 0301 	and.w	r3, r3, #1
 800726c:	b2da      	uxtb	r2, r3
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	095b      	lsrs	r3, r3, #5
 8007276:	b2db      	uxtb	r3, r3
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	b2da      	uxtb	r2, r3
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	091b      	lsrs	r3, r3, #4
 8007286:	b2db      	uxtb	r3, r3
 8007288:	f003 0301 	and.w	r3, r3, #1
 800728c:	b2da      	uxtb	r2, r3
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	2200      	movs	r2, #0
 8007296:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800729c:	2b00      	cmp	r3, #0
 800729e:	f040 8086 	bne.w	80073ae <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	029b      	lsls	r3, r3, #10
 80072a6:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	691a      	ldr	r2, [r3, #16]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	431a      	orrs	r2, r3
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072c8:	0e1b      	lsrs	r3, r3, #24
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	691a      	ldr	r2, [r3, #16]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	099b      	lsrs	r3, r3, #6
 80072d6:	f003 0303 	and.w	r3, r3, #3
 80072da:	431a      	orrs	r2, r3
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	08db      	lsrs	r3, r3, #3
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	f003 0307 	and.w	r3, r3, #7
 80072ea:	b2da      	uxtb	r2, r3
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	f003 0307 	and.w	r3, r3, #7
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007302:	0c1b      	lsrs	r3, r3, #16
 8007304:	b2db      	uxtb	r3, r3
 8007306:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	095b      	lsrs	r3, r3, #5
 800730c:	b2db      	uxtb	r3, r3
 800730e:	f003 0307 	and.w	r3, r3, #7
 8007312:	b2da      	uxtb	r2, r3
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	089b      	lsrs	r3, r3, #2
 800731c:	b2db      	uxtb	r3, r3
 800731e:	f003 0307 	and.w	r3, r3, #7
 8007322:	b2da      	uxtb	r2, r3
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	b2db      	uxtb	r3, r3
 800732c:	005b      	lsls	r3, r3, #1
 800732e:	b2db      	uxtb	r3, r3
 8007330:	f003 0306 	and.w	r3, r3, #6
 8007334:	b2da      	uxtb	r2, r3
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800733e:	0a1b      	lsrs	r3, r3, #8
 8007340:	b2db      	uxtb	r3, r3
 8007342:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	7e1b      	ldrb	r3, [r3, #24]
 8007348:	b2da      	uxtb	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	09db      	lsrs	r3, r3, #7
 800734e:	b2db      	uxtb	r3, r3
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	b2db      	uxtb	r3, r3
 8007356:	4313      	orrs	r3, r2
 8007358:	b2da      	uxtb	r2, r3
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	1c5a      	adds	r2, r3, #1
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	7e1b      	ldrb	r3, [r3, #24]
 800736c:	b2db      	uxtb	r3, r3
 800736e:	3302      	adds	r3, #2
 8007370:	2201      	movs	r2, #1
 8007372:	409a      	lsls	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007378:	fb02 f203 	mul.w	r2, r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	7a1b      	ldrb	r3, [r3, #8]
 8007384:	b2db      	uxtb	r3, r3
 8007386:	461a      	mov	r2, r3
 8007388:	2301      	movs	r3, #1
 800738a:	4093      	lsls	r3, r2
 800738c:	461a      	mov	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800739a:	0a52      	lsrs	r2, r2, #9
 800739c:	fb02 f203 	mul.w	r2, r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073aa:	661a      	str	r2, [r3, #96]	; 0x60
 80073ac:	e04d      	b.n	800744a <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d138      	bne.n	8007428 <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	041b      	lsls	r3, r3, #16
 80073c2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073ce:	0e1b      	lsrs	r3, r3, #24
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	691a      	ldr	r2, [r3, #16]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	021b      	lsls	r3, r3, #8
 80073dc:	431a      	orrs	r2, r3
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073e6:	0c1b      	lsrs	r3, r3, #16
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	691a      	ldr	r2, [r3, #16]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	431a      	orrs	r2, r3
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073fc:	0a1b      	lsrs	r3, r3, #8
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	3301      	adds	r3, #1
 8007408:	029a      	lsls	r2, r3, #10
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	655a      	str	r2, [r3, #84]	; 0x54
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f44f 7200 	mov.w	r2, #512	; 0x200
 800741c:	659a      	str	r2, [r3, #88]	; 0x58
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	661a      	str	r2, [r3, #96]	; 0x60
 8007426:	e010      	b.n	800744a <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007430:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007436:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e0c1      	b.n	80075ce <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	099b      	lsrs	r3, r3, #6
 800744e:	b2db      	uxtb	r3, r3
 8007450:	f003 0301 	and.w	r3, r3, #1
 8007454:	b2da      	uxtb	r2, r3
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	b2db      	uxtb	r3, r3
 800745e:	005b      	lsls	r3, r3, #1
 8007460:	b2db      	uxtb	r3, r3
 8007462:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007466:	b2da      	uxtb	r2, r3
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007470:	b2db      	uxtb	r3, r3
 8007472:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	7e9b      	ldrb	r3, [r3, #26]
 8007478:	b2da      	uxtb	r2, r3
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	09db      	lsrs	r3, r3, #7
 800747e:	b2db      	uxtb	r3, r3
 8007480:	f003 0301 	and.w	r3, r3, #1
 8007484:	b2db      	uxtb	r3, r3
 8007486:	4313      	orrs	r3, r2
 8007488:	b2da      	uxtb	r2, r3
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	b2db      	uxtb	r3, r3
 8007492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007496:	b2da      	uxtb	r2, r3
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a0:	0e1b      	lsrs	r3, r3, #24
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	09db      	lsrs	r3, r3, #7
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	b2da      	uxtb	r2, r3
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	095b      	lsrs	r3, r3, #5
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	f003 0303 	and.w	r3, r3, #3
 80074c0:	b2da      	uxtb	r2, r3
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	089b      	lsrs	r3, r3, #2
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	f003 0307 	and.w	r3, r3, #7
 80074d0:	b2da      	uxtb	r2, r3
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	f003 030c 	and.w	r3, r3, #12
 80074e2:	b2da      	uxtb	r2, r3
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ec:	0c1b      	lsrs	r3, r3, #16
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	7fdb      	ldrb	r3, [r3, #31]
 80074f6:	b2da      	uxtb	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	099b      	lsrs	r3, r3, #6
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	f003 0303 	and.w	r3, r3, #3
 8007502:	b2db      	uxtb	r3, r3
 8007504:	4313      	orrs	r3, r2
 8007506:	b2da      	uxtb	r2, r3
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	095b      	lsrs	r3, r3, #5
 8007510:	b2db      	uxtb	r3, r3
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	b2da      	uxtb	r2, r3
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	b2db      	uxtb	r3, r3
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	b2da      	uxtb	r2, r3
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800753a:	0a1b      	lsrs	r3, r3, #8
 800753c:	b2db      	uxtb	r3, r3
 800753e:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	09db      	lsrs	r3, r3, #7
 8007544:	b2db      	uxtb	r3, r3
 8007546:	f003 0301 	and.w	r3, r3, #1
 800754a:	b2da      	uxtb	r2, r3
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	099b      	lsrs	r3, r3, #6
 8007556:	b2db      	uxtb	r3, r3
 8007558:	f003 0301 	and.w	r3, r3, #1
 800755c:	b2da      	uxtb	r2, r3
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	095b      	lsrs	r3, r3, #5
 8007568:	b2db      	uxtb	r3, r3
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	b2da      	uxtb	r2, r3
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	091b      	lsrs	r3, r3, #4
 800757a:	b2db      	uxtb	r3, r3
 800757c:	f003 0301 	and.w	r3, r3, #1
 8007580:	b2da      	uxtb	r2, r3
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	089b      	lsrs	r3, r3, #2
 800758c:	b2db      	uxtb	r3, r3
 800758e:	f003 0303 	and.w	r3, r3, #3
 8007592:	b2da      	uxtb	r2, r3
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	b2db      	uxtb	r3, r3
 800759e:	f003 0303 	and.w	r3, r3, #3
 80075a2:	b2da      	uxtb	r2, r3
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	085b      	lsrs	r3, r3, #1
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075bc:	b2da      	uxtb	r2, r3
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80075da:	b5b0      	push	{r4, r5, r7, lr}
 80075dc:	b08e      	sub	sp, #56	; 0x38
 80075de:	af04      	add	r7, sp, #16
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80075e4:	2300      	movs	r3, #0
 80075e6:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2203      	movs	r2, #3
 80075ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f4:	2b03      	cmp	r3, #3
 80075f6:	d02e      	beq.n	8007656 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075fe:	d106      	bne.n	800760e <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007604:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	639a      	str	r2, [r3, #56]	; 0x38
 800760c:	e029      	b.n	8007662 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007614:	d10a      	bne.n	800762c <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f9cc 	bl	80079b4 <SD_WideBus_Enable>
 800761c:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	431a      	orrs	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	639a      	str	r2, [r3, #56]	; 0x38
 800762a:	e01a      	b.n	8007662 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10a      	bne.n	8007648 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 fa0b 	bl	8007a4e <SD_WideBus_Disable>
 8007638:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800763e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007640:	431a      	orrs	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	639a      	str	r2, [r3, #56]	; 0x38
 8007646:	e00c      	b.n	8007662 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	639a      	str	r2, [r3, #56]	; 0x38
 8007654:	e005      	b.n	8007662 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00a      	beq.n	8007680 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007672:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e024      	b.n	80076ca <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	695b      	ldr	r3, [r3, #20]
 800769a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681d      	ldr	r5, [r3, #0]
 80076a6:	466c      	mov	r4, sp
 80076a8:	f107 0318 	add.w	r3, r7, #24
 80076ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80076b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80076b4:	f107 030c 	add.w	r3, r7, #12
 80076b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80076ba:	4628      	mov	r0, r5
 80076bc:	f001 fcc4 	bl	8009048 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3728      	adds	r7, #40	; 0x28
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bdb0      	pop	{r4, r5, r7, pc}

080076d2 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80076d2:	b5b0      	push	{r4, r5, r7, lr}
 80076d4:	b094      	sub	sp, #80	; 0x50
 80076d6:	af04      	add	r7, sp, #16
 80076d8:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80076da:	2300      	movs	r3, #0
 80076dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 80076de:	2301      	movs	r3, #1
 80076e0:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4618      	mov	r0, r3
 80076e8:	f001 fcf5 	bl	80090d6 <SDMMC_GetPowerState>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d102      	bne.n	80076f8 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80076f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80076f6:	e0b1      	b.n	800785c <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076fc:	2b03      	cmp	r3, #3
 80076fe:	d02f      	beq.n	8007760 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4618      	mov	r0, r3
 8007706:	f001 fe88 	bl	800941a <SDMMC_CmdSendCID>
 800770a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800770c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800770e:	2b00      	cmp	r3, #0
 8007710:	d001      	beq.n	8007716 <SD_InitCard+0x44>
    {
      return errorstate;
 8007712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007714:	e0a2      	b.n	800785c <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2100      	movs	r1, #0
 800771c:	4618      	mov	r0, r3
 800771e:	f001 fd20 	bl	8009162 <SDMMC_GetResponse>
 8007722:	4602      	mov	r2, r0
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2104      	movs	r1, #4
 800772e:	4618      	mov	r0, r3
 8007730:	f001 fd17 	bl	8009162 <SDMMC_GetResponse>
 8007734:	4602      	mov	r2, r0
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2108      	movs	r1, #8
 8007740:	4618      	mov	r0, r3
 8007742:	f001 fd0e 	bl	8009162 <SDMMC_GetResponse>
 8007746:	4602      	mov	r2, r0
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	210c      	movs	r1, #12
 8007752:	4618      	mov	r0, r3
 8007754:	f001 fd05 	bl	8009162 <SDMMC_GetResponse>
 8007758:	4602      	mov	r2, r0
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007764:	2b03      	cmp	r3, #3
 8007766:	d00d      	beq.n	8007784 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f107 020e 	add.w	r2, r7, #14
 8007770:	4611      	mov	r1, r2
 8007772:	4618      	mov	r0, r3
 8007774:	f001 fe92 	bl	800949c <SDMMC_CmdSetRelAdd>
 8007778:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800777a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <SD_InitCard+0xb2>
    {
      return errorstate;
 8007780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007782:	e06b      	b.n	800785c <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007788:	2b03      	cmp	r3, #3
 800778a:	d036      	beq.n	80077fa <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800778c:	89fb      	ldrh	r3, [r7, #14]
 800778e:	461a      	mov	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800779c:	041b      	lsls	r3, r3, #16
 800779e:	4619      	mov	r1, r3
 80077a0:	4610      	mov	r0, r2
 80077a2:	f001 fe5a 	bl	800945a <SDMMC_CmdSendCSD>
 80077a6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80077a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <SD_InitCard+0xe0>
    {
      return errorstate;
 80077ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077b0:	e054      	b.n	800785c <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2100      	movs	r1, #0
 80077b8:	4618      	mov	r0, r3
 80077ba:	f001 fcd2 	bl	8009162 <SDMMC_GetResponse>
 80077be:	4602      	mov	r2, r0
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2104      	movs	r1, #4
 80077ca:	4618      	mov	r0, r3
 80077cc:	f001 fcc9 	bl	8009162 <SDMMC_GetResponse>
 80077d0:	4602      	mov	r2, r0
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2108      	movs	r1, #8
 80077dc:	4618      	mov	r0, r3
 80077de:	f001 fcc0 	bl	8009162 <SDMMC_GetResponse>
 80077e2:	4602      	mov	r2, r0
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	210c      	movs	r1, #12
 80077ee:	4618      	mov	r0, r3
 80077f0:	f001 fcb7 	bl	8009162 <SDMMC_GetResponse>
 80077f4:	4602      	mov	r2, r0
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2104      	movs	r1, #4
 8007800:	4618      	mov	r0, r3
 8007802:	f001 fcae 	bl	8009162 <SDMMC_GetResponse>
 8007806:	4603      	mov	r3, r0
 8007808:	0d1a      	lsrs	r2, r3, #20
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 800780e:	f107 0310 	add.w	r3, r7, #16
 8007812:	4619      	mov	r1, r3
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f7ff fcb8 	bl	800718a <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6819      	ldr	r1, [r3, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007822:	041b      	lsls	r3, r3, #16
 8007824:	f04f 0400 	mov.w	r4, #0
 8007828:	461a      	mov	r2, r3
 800782a:	4623      	mov	r3, r4
 800782c:	4608      	mov	r0, r1
 800782e:	f001 fcfd 	bl	800922c <SDMMC_CmdSelDesel>
 8007832:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007836:	2b00      	cmp	r3, #0
 8007838:	d001      	beq.n	800783e <SD_InitCard+0x16c>
  {
    return errorstate;
 800783a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800783c:	e00e      	b.n	800785c <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681d      	ldr	r5, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	466c      	mov	r4, sp
 8007846:	f103 0210 	add.w	r2, r3, #16
 800784a:	ca07      	ldmia	r2, {r0, r1, r2}
 800784c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007850:	3304      	adds	r3, #4
 8007852:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007854:	4628      	mov	r0, r5
 8007856:	f001 fbf7 	bl	8009048 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3740      	adds	r7, #64	; 0x40
 8007860:	46bd      	mov	sp, r7
 8007862:	bdb0      	pop	{r4, r5, r7, pc}

08007864 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b086      	sub	sp, #24
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800786c:	2300      	movs	r3, #0
 800786e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 8007870:	2300      	movs	r3, #0
 8007872:	617b      	str	r3, [r7, #20]
 8007874:	2300      	movs	r3, #0
 8007876:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007878:	2300      	movs	r3, #0
 800787a:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4618      	mov	r0, r3
 8007882:	f001 fcf8 	bl	8009276 <SDMMC_CmdGoIdleState>
 8007886:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d001      	beq.n	8007892 <SD_PowerON+0x2e>
  {
    return errorstate;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	e08c      	b.n	80079ac <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4618      	mov	r0, r3
 8007898:	f001 fd0d 	bl	80092b6 <SDMMC_CmdOperCond>
 800789c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d03d      	beq.n	8007920 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 80078aa:	e032      	b.n	8007912 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	1c5a      	adds	r2, r3, #1
 80078b0:	60ba      	str	r2, [r7, #8]
 80078b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d102      	bne.n	80078c0 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80078ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80078be:	e075      	b.n	80079ac <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2100      	movs	r1, #0
 80078c6:	4618      	mov	r0, r3
 80078c8:	f001 fd16 	bl	80092f8 <SDMMC_CmdAppCommand>
 80078cc:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d002      	beq.n	80078da <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80078d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80078d8:	e068      	b.n	80079ac <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2100      	movs	r1, #0
 80078e0:	4618      	mov	r0, r3
 80078e2:	f001 fd2d 	bl	8009340 <SDMMC_CmdAppOperCommand>
 80078e6:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d002      	beq.n	80078f4 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80078ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80078f2:	e05b      	b.n	80079ac <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2100      	movs	r1, #0
 80078fa:	4618      	mov	r0, r3
 80078fc:	f001 fc31 	bl	8009162 <SDMMC_GetResponse>
 8007900:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	0fdb      	lsrs	r3, r3, #31
 8007906:	2b01      	cmp	r3, #1
 8007908:	bf0c      	ite	eq
 800790a:	2301      	moveq	r3, #1
 800790c:	2300      	movne	r3, #0
 800790e:	b2db      	uxtb	r3, r3
 8007910:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d0c9      	beq.n	80078ac <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	645a      	str	r2, [r3, #68]	; 0x44
 800791e:	e044      	b.n	80079aa <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8007926:	e031      	b.n	800798c <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	1c5a      	adds	r2, r3, #1
 800792c:	60ba      	str	r2, [r7, #8]
 800792e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007932:	4293      	cmp	r3, r2
 8007934:	d102      	bne.n	800793c <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007936:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800793a:	e037      	b.n	80079ac <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2100      	movs	r1, #0
 8007942:	4618      	mov	r0, r3
 8007944:	f001 fcd8 	bl	80092f8 <SDMMC_CmdAppCommand>
 8007948:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d001      	beq.n	8007954 <SD_PowerON+0xf0>
      {
        return errorstate;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	e02b      	b.n	80079ac <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800795c:	4618      	mov	r0, r3
 800795e:	f001 fcef 	bl	8009340 <SDMMC_CmdAppOperCommand>
 8007962:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d001      	beq.n	800796e <SD_PowerON+0x10a>
      {
        return errorstate;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	e01e      	b.n	80079ac <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2100      	movs	r1, #0
 8007974:	4618      	mov	r0, r3
 8007976:	f001 fbf4 	bl	8009162 <SDMMC_GetResponse>
 800797a:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	0fdb      	lsrs	r3, r3, #31
 8007980:	2b01      	cmp	r3, #1
 8007982:	bf0c      	ite	eq
 8007984:	2301      	moveq	r3, #1
 8007986:	2300      	movne	r3, #0
 8007988:	b2db      	uxtb	r3, r3
 800798a:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d0ca      	beq.n	8007928 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007998:	2b00      	cmp	r3, #0
 800799a:	d003      	beq.n	80079a4 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	645a      	str	r2, [r3, #68]	; 0x44
 80079a2:	e002      	b.n	80079aa <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3718      	adds	r7, #24
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 80079bc:	2300      	movs	r3, #0
 80079be:	60fb      	str	r3, [r7, #12]
 80079c0:	2300      	movs	r3, #0
 80079c2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80079c4:	2300      	movs	r3, #0
 80079c6:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2100      	movs	r1, #0
 80079ce:	4618      	mov	r0, r3
 80079d0:	f001 fbc7 	bl	8009162 <SDMMC_GetResponse>
 80079d4:	4603      	mov	r3, r0
 80079d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079de:	d102      	bne.n	80079e6 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80079e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80079e4:	e02f      	b.n	8007a46 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80079e6:	f107 030c 	add.w	r3, r7, #12
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f87b 	bl	8007ae8 <SD_FindSCR>
 80079f2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d001      	beq.n	80079fe <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	e023      	b.n	8007a46 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d01c      	beq.n	8007a42 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a10:	041b      	lsls	r3, r3, #16
 8007a12:	4619      	mov	r1, r3
 8007a14:	4610      	mov	r0, r2
 8007a16:	f001 fc6f 	bl	80092f8 <SDMMC_CmdAppCommand>
 8007a1a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d001      	beq.n	8007a26 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	e00f      	b.n	8007a46 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2102      	movs	r1, #2
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f001 fcad 	bl	800938c <SDMMC_CmdBusWidth>
 8007a32:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d001      	beq.n	8007a3e <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	e003      	b.n	8007a46 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	e001      	b.n	8007a46 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007a42:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3718      	adds	r7, #24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b086      	sub	sp, #24
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8007a56:	2300      	movs	r3, #0
 8007a58:	60fb      	str	r3, [r7, #12]
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2100      	movs	r1, #0
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f001 fb7a 	bl	8009162 <SDMMC_GetResponse>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a78:	d102      	bne.n	8007a80 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007a7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a7e:	e02f      	b.n	8007ae0 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007a80:	f107 030c 	add.w	r3, r7, #12
 8007a84:	4619      	mov	r1, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f82e 	bl	8007ae8 <SD_FindSCR>
 8007a8c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d001      	beq.n	8007a98 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	e023      	b.n	8007ae0 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d01c      	beq.n	8007adc <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aaa:	041b      	lsls	r3, r3, #16
 8007aac:	4619      	mov	r1, r3
 8007aae:	4610      	mov	r0, r2
 8007ab0:	f001 fc22 	bl	80092f8 <SDMMC_CmdAppCommand>
 8007ab4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d001      	beq.n	8007ac0 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	e00f      	b.n	8007ae0 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f001 fc60 	bl	800938c <SDMMC_CmdBusWidth>
 8007acc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d001      	beq.n	8007ad8 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	e003      	b.n	8007ae0 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	e001      	b.n	8007ae0 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007adc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3718      	adds	r7, #24
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007ae8:	b590      	push	{r4, r7, lr}
 8007aea:	b08f      	sub	sp, #60	; 0x3c
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007af2:	2300      	movs	r3, #0
 8007af4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8007af6:	f7fa fc05 	bl	8002304 <HAL_GetTick>
 8007afa:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 8007afc:	2300      	movs	r3, #0
 8007afe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 8007b00:	2300      	movs	r3, #0
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	2300      	movs	r3, #0
 8007b06:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2108      	movs	r1, #8
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f001 fb68 	bl	80091e4 <SDMMC_CmdBlockLength>
 8007b14:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8007b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d001      	beq.n	8007b20 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1e:	e0a8      	b.n	8007c72 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b28:	041b      	lsls	r3, r3, #16
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	4610      	mov	r0, r2
 8007b2e:	f001 fbe3 	bl	80092f8 <SDMMC_CmdAppCommand>
 8007b32:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8007b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d001      	beq.n	8007b3e <SD_FindSCR+0x56>
  {
    return errorstate;
 8007b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3c:	e099      	b.n	8007c72 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007b42:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 8007b44:	2308      	movs	r3, #8
 8007b46:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007b48:	2330      	movs	r3, #48	; 0x30
 8007b4a:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007b50:	2300      	movs	r3, #0
 8007b52:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007b54:	2301      	movs	r3, #1
 8007b56:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f107 0214 	add.w	r2, r7, #20
 8007b60:	4611      	mov	r1, r2
 8007b62:	4618      	mov	r0, r3
 8007b64:	f001 fb12 	bl	800918c <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f001 fc31 	bl	80093d4 <SDMMC_CmdSendSCR>
 8007b72:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8007b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d022      	beq.n	8007bc0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7c:	e079      	b.n	8007c72 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00e      	beq.n	8007baa <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6819      	ldr	r1, [r3, #0]
 8007b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	f107 020c 	add.w	r2, r7, #12
 8007b98:	18d4      	adds	r4, r2, r3
 8007b9a:	4608      	mov	r0, r1
 8007b9c:	f001 fa80 	bl	80090a0 <SDMMC_ReadFIFO>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	6023      	str	r3, [r4, #0]
      index++;
 8007ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007baa:	f7fa fbab 	bl	8002304 <HAL_GetTick>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb8:	d102      	bne.n	8007bc0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007bba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007bbe:	e058      	b.n	8007c72 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bc6:	f240 432a 	movw	r3, #1066	; 0x42a
 8007bca:	4013      	ands	r3, r2
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d0d6      	beq.n	8007b7e <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd6:	f003 0308 	and.w	r3, r3, #8
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d005      	beq.n	8007bea <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2208      	movs	r2, #8
 8007be4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007be6:	2308      	movs	r3, #8
 8007be8:	e043      	b.n	8007c72 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf0:	f003 0302 	and.w	r3, r3, #2
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d005      	beq.n	8007c04 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2202      	movs	r2, #2
 8007bfe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007c00:	2302      	movs	r3, #2
 8007c02:	e036      	b.n	8007c72 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c0a:	f003 0320 	and.w	r3, r3, #32
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d005      	beq.n	8007c1e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2220      	movs	r2, #32
 8007c18:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8007c1a:	2320      	movs	r3, #32
 8007c1c:	e029      	b.n	8007c72 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007c26:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	061a      	lsls	r2, r3, #24
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	021b      	lsls	r3, r3, #8
 8007c30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c34:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	0a1b      	lsrs	r3, r3, #8
 8007c3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007c3e:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8007c4a:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007c4c:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	061a      	lsls	r2, r3, #24
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	021b      	lsls	r3, r3, #8
 8007c56:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c5a:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	0a1b      	lsrs	r3, r3, #8
 8007c60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007c64:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	0e1b      	lsrs	r3, r3, #24
 8007c6a:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	373c      	adds	r7, #60	; 0x3c
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd90      	pop	{r4, r7, pc}

08007c7a <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b082      	sub	sp, #8
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
 8007c82:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d101      	bne.n	8007c8e <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e025      	b.n	8007cda <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d106      	bne.n	8007ca8 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f003 fd76 	bl	800b794 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2202      	movs	r2, #2
 8007cac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	3304      	adds	r3, #4
 8007cb8:	4619      	mov	r1, r3
 8007cba:	4610      	mov	r0, r2
 8007cbc:	f001 f89e 	bl	8008dfc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6818      	ldr	r0, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	461a      	mov	r2, r3
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	f001 f908 	bl	8008ee0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b084      	sub	sp, #16
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	60f8      	str	r0, [r7, #12]
 8007cea:	60b9      	str	r1, [r7, #8]
 8007cec:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d101      	bne.n	8007cfe <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007cfa:	2302      	movs	r3, #2
 8007cfc:	e018      	b.n	8007d30 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2202      	movs	r2, #2
 8007d02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	68b9      	ldr	r1, [r7, #8]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f001 f966 	bl	8008fe0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d104      	bne.n	8007d26 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2205      	movs	r2, #5
 8007d20:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8007d24:	e003      	b.n	8007d2e <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d101      	bne.n	8007d52 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007d4e:	2302      	movs	r3, #2
 8007d50:	e00e      	b.n	8007d70 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2202      	movs	r2, #2
 8007d56:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	6839      	ldr	r1, [r7, #0]
 8007d60:	4618      	mov	r0, r3
 8007d62:	f001 f95e 	bl	8009022 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d101      	bne.n	8007d8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e01d      	b.n	8007dc6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d106      	bne.n	8007da4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f003 fb9e 	bl	800b4e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2202      	movs	r2, #2
 8007da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	3304      	adds	r3, #4
 8007db4:	4619      	mov	r1, r3
 8007db6:	4610      	mov	r0, r2
 8007db8:	f000 fa60 	bl	800827c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
	...

08007dd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68da      	ldr	r2, [r3, #12]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f042 0201 	orr.w	r2, r2, #1
 8007de6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	689a      	ldr	r2, [r3, #8]
 8007dee:	4b0c      	ldr	r3, [pc, #48]	; (8007e20 <HAL_TIM_Base_Start_IT+0x50>)
 8007df0:	4013      	ands	r3, r2
 8007df2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2b06      	cmp	r3, #6
 8007df8:	d00b      	beq.n	8007e12 <HAL_TIM_Base_Start_IT+0x42>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e00:	d007      	beq.n	8007e12 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f042 0201 	orr.w	r2, r2, #1
 8007e10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	00010007 	.word	0x00010007

08007e24 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68da      	ldr	r2, [r3, #12]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f022 0201 	bic.w	r2, r2, #1
 8007e3a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	6a1a      	ldr	r2, [r3, #32]
 8007e42:	f241 1311 	movw	r3, #4369	; 0x1111
 8007e46:	4013      	ands	r3, r2
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10f      	bne.n	8007e6c <HAL_TIM_Base_Stop_IT+0x48>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6a1a      	ldr	r2, [r3, #32]
 8007e52:	f240 4344 	movw	r3, #1092	; 0x444
 8007e56:	4013      	ands	r3, r2
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d107      	bne.n	8007e6c <HAL_TIM_Base_Stop_IT+0x48>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f022 0201 	bic.w	r2, r2, #1
 8007e6a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	370c      	adds	r7, #12
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr

08007e7a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b082      	sub	sp, #8
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	f003 0302 	and.w	r3, r3, #2
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d122      	bne.n	8007ed6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	f003 0302 	and.w	r3, r3, #2
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d11b      	bne.n	8007ed6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f06f 0202 	mvn.w	r2, #2
 8007ea6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	699b      	ldr	r3, [r3, #24]
 8007eb4:	f003 0303 	and.w	r3, r3, #3
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d003      	beq.n	8007ec4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f9bf 	bl	8008240 <HAL_TIM_IC_CaptureCallback>
 8007ec2:	e005      	b.n	8007ed0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f9b1 	bl	800822c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f9c2 	bl	8008254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	f003 0304 	and.w	r3, r3, #4
 8007ee0:	2b04      	cmp	r3, #4
 8007ee2:	d122      	bne.n	8007f2a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	f003 0304 	and.w	r3, r3, #4
 8007eee:	2b04      	cmp	r3, #4
 8007ef0:	d11b      	bne.n	8007f2a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f06f 0204 	mvn.w	r2, #4
 8007efa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2202      	movs	r2, #2
 8007f00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	699b      	ldr	r3, [r3, #24]
 8007f08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d003      	beq.n	8007f18 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 f995 	bl	8008240 <HAL_TIM_IC_CaptureCallback>
 8007f16:	e005      	b.n	8007f24 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 f987 	bl	800822c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f998 	bl	8008254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	f003 0308 	and.w	r3, r3, #8
 8007f34:	2b08      	cmp	r3, #8
 8007f36:	d122      	bne.n	8007f7e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	f003 0308 	and.w	r3, r3, #8
 8007f42:	2b08      	cmp	r3, #8
 8007f44:	d11b      	bne.n	8007f7e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f06f 0208 	mvn.w	r2, #8
 8007f4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2204      	movs	r2, #4
 8007f54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	69db      	ldr	r3, [r3, #28]
 8007f5c:	f003 0303 	and.w	r3, r3, #3
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d003      	beq.n	8007f6c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 f96b 	bl	8008240 <HAL_TIM_IC_CaptureCallback>
 8007f6a:	e005      	b.n	8007f78 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f95d 	bl	800822c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f96e 	bl	8008254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	f003 0310 	and.w	r3, r3, #16
 8007f88:	2b10      	cmp	r3, #16
 8007f8a:	d122      	bne.n	8007fd2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	f003 0310 	and.w	r3, r3, #16
 8007f96:	2b10      	cmp	r3, #16
 8007f98:	d11b      	bne.n	8007fd2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f06f 0210 	mvn.w	r2, #16
 8007fa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2208      	movs	r2, #8
 8007fa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	69db      	ldr	r3, [r3, #28]
 8007fb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d003      	beq.n	8007fc0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 f941 	bl	8008240 <HAL_TIM_IC_CaptureCallback>
 8007fbe:	e005      	b.n	8007fcc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f933 	bl	800822c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f944 	bl	8008254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	f003 0301 	and.w	r3, r3, #1
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d10e      	bne.n	8007ffe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	f003 0301 	and.w	r3, r3, #1
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d107      	bne.n	8007ffe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f06f 0201 	mvn.w	r2, #1
 8007ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f001 ff53 	bl	8009ea4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008008:	2b80      	cmp	r3, #128	; 0x80
 800800a:	d10e      	bne.n	800802a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008016:	2b80      	cmp	r3, #128	; 0x80
 8008018:	d107      	bne.n	800802a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fac9 	bl	80085bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008038:	d10e      	bne.n	8008058 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008044:	2b80      	cmp	r3, #128	; 0x80
 8008046:	d107      	bne.n	8008058 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 fabc 	bl	80085d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008062:	2b40      	cmp	r3, #64	; 0x40
 8008064:	d10e      	bne.n	8008084 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008070:	2b40      	cmp	r3, #64	; 0x40
 8008072:	d107      	bne.n	8008084 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800807c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f8f2 	bl	8008268 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	f003 0320 	and.w	r3, r3, #32
 800808e:	2b20      	cmp	r3, #32
 8008090:	d10e      	bne.n	80080b0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	f003 0320 	and.w	r3, r3, #32
 800809c:	2b20      	cmp	r3, #32
 800809e:	d107      	bne.n	80080b0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f06f 0220 	mvn.w	r2, #32
 80080a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fa7c 	bl	80085a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80080b0:	bf00      	nop
 80080b2:	3708      	adds	r7, #8
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d101      	bne.n	80080d0 <HAL_TIM_ConfigClockSource+0x18>
 80080cc:	2302      	movs	r3, #2
 80080ce:	e0a6      	b.n	800821e <HAL_TIM_ConfigClockSource+0x166>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2202      	movs	r2, #2
 80080dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	4b4f      	ldr	r3, [pc, #316]	; (8008228 <HAL_TIM_ConfigClockSource+0x170>)
 80080ec:	4013      	ands	r3, r2
 80080ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2b40      	cmp	r3, #64	; 0x40
 8008106:	d067      	beq.n	80081d8 <HAL_TIM_ConfigClockSource+0x120>
 8008108:	2b40      	cmp	r3, #64	; 0x40
 800810a:	d80b      	bhi.n	8008124 <HAL_TIM_ConfigClockSource+0x6c>
 800810c:	2b10      	cmp	r3, #16
 800810e:	d073      	beq.n	80081f8 <HAL_TIM_ConfigClockSource+0x140>
 8008110:	2b10      	cmp	r3, #16
 8008112:	d802      	bhi.n	800811a <HAL_TIM_ConfigClockSource+0x62>
 8008114:	2b00      	cmp	r3, #0
 8008116:	d06f      	beq.n	80081f8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008118:	e078      	b.n	800820c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800811a:	2b20      	cmp	r3, #32
 800811c:	d06c      	beq.n	80081f8 <HAL_TIM_ConfigClockSource+0x140>
 800811e:	2b30      	cmp	r3, #48	; 0x30
 8008120:	d06a      	beq.n	80081f8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008122:	e073      	b.n	800820c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008124:	2b70      	cmp	r3, #112	; 0x70
 8008126:	d00d      	beq.n	8008144 <HAL_TIM_ConfigClockSource+0x8c>
 8008128:	2b70      	cmp	r3, #112	; 0x70
 800812a:	d804      	bhi.n	8008136 <HAL_TIM_ConfigClockSource+0x7e>
 800812c:	2b50      	cmp	r3, #80	; 0x50
 800812e:	d033      	beq.n	8008198 <HAL_TIM_ConfigClockSource+0xe0>
 8008130:	2b60      	cmp	r3, #96	; 0x60
 8008132:	d041      	beq.n	80081b8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008134:	e06a      	b.n	800820c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800813a:	d066      	beq.n	800820a <HAL_TIM_ConfigClockSource+0x152>
 800813c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008140:	d017      	beq.n	8008172 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008142:	e063      	b.n	800820c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6818      	ldr	r0, [r3, #0]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	6899      	ldr	r1, [r3, #8]
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	685a      	ldr	r2, [r3, #4]
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	f000 f9ac 	bl	80084b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008166:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	609a      	str	r2, [r3, #8]
      break;
 8008170:	e04c      	b.n	800820c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6818      	ldr	r0, [r3, #0]
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	6899      	ldr	r1, [r3, #8]
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	f000 f995 	bl	80084b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	689a      	ldr	r2, [r3, #8]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008194:	609a      	str	r2, [r3, #8]
      break;
 8008196:	e039      	b.n	800820c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6818      	ldr	r0, [r3, #0]
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	6859      	ldr	r1, [r3, #4]
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	461a      	mov	r2, r3
 80081a6:	f000 f909 	bl	80083bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2150      	movs	r1, #80	; 0x50
 80081b0:	4618      	mov	r0, r3
 80081b2:	f000 f962 	bl	800847a <TIM_ITRx_SetConfig>
      break;
 80081b6:	e029      	b.n	800820c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6818      	ldr	r0, [r3, #0]
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	6859      	ldr	r1, [r3, #4]
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	461a      	mov	r2, r3
 80081c6:	f000 f928 	bl	800841a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2160      	movs	r1, #96	; 0x60
 80081d0:	4618      	mov	r0, r3
 80081d2:	f000 f952 	bl	800847a <TIM_ITRx_SetConfig>
      break;
 80081d6:	e019      	b.n	800820c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6818      	ldr	r0, [r3, #0]
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	6859      	ldr	r1, [r3, #4]
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	461a      	mov	r2, r3
 80081e6:	f000 f8e9 	bl	80083bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2140      	movs	r1, #64	; 0x40
 80081f0:	4618      	mov	r0, r3
 80081f2:	f000 f942 	bl	800847a <TIM_ITRx_SetConfig>
      break;
 80081f6:	e009      	b.n	800820c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4619      	mov	r1, r3
 8008202:	4610      	mov	r0, r2
 8008204:	f000 f939 	bl	800847a <TIM_ITRx_SetConfig>
      break;
 8008208:	e000      	b.n	800820c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800820a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	fffeff88 	.word	0xfffeff88

0800822c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008234:	bf00      	nop
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008248:	bf00      	nop
 800824a:	370c      	adds	r7, #12
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800825c:	bf00      	nop
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800827c:	b480      	push	{r7}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	4a40      	ldr	r2, [pc, #256]	; (8008390 <TIM_Base_SetConfig+0x114>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d013      	beq.n	80082bc <TIM_Base_SetConfig+0x40>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800829a:	d00f      	beq.n	80082bc <TIM_Base_SetConfig+0x40>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4a3d      	ldr	r2, [pc, #244]	; (8008394 <TIM_Base_SetConfig+0x118>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d00b      	beq.n	80082bc <TIM_Base_SetConfig+0x40>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	4a3c      	ldr	r2, [pc, #240]	; (8008398 <TIM_Base_SetConfig+0x11c>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d007      	beq.n	80082bc <TIM_Base_SetConfig+0x40>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a3b      	ldr	r2, [pc, #236]	; (800839c <TIM_Base_SetConfig+0x120>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d003      	beq.n	80082bc <TIM_Base_SetConfig+0x40>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4a3a      	ldr	r2, [pc, #232]	; (80083a0 <TIM_Base_SetConfig+0x124>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d108      	bne.n	80082ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a2f      	ldr	r2, [pc, #188]	; (8008390 <TIM_Base_SetConfig+0x114>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d02b      	beq.n	800832e <TIM_Base_SetConfig+0xb2>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082dc:	d027      	beq.n	800832e <TIM_Base_SetConfig+0xb2>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a2c      	ldr	r2, [pc, #176]	; (8008394 <TIM_Base_SetConfig+0x118>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d023      	beq.n	800832e <TIM_Base_SetConfig+0xb2>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a2b      	ldr	r2, [pc, #172]	; (8008398 <TIM_Base_SetConfig+0x11c>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d01f      	beq.n	800832e <TIM_Base_SetConfig+0xb2>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a2a      	ldr	r2, [pc, #168]	; (800839c <TIM_Base_SetConfig+0x120>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d01b      	beq.n	800832e <TIM_Base_SetConfig+0xb2>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4a29      	ldr	r2, [pc, #164]	; (80083a0 <TIM_Base_SetConfig+0x124>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d017      	beq.n	800832e <TIM_Base_SetConfig+0xb2>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4a28      	ldr	r2, [pc, #160]	; (80083a4 <TIM_Base_SetConfig+0x128>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d013      	beq.n	800832e <TIM_Base_SetConfig+0xb2>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4a27      	ldr	r2, [pc, #156]	; (80083a8 <TIM_Base_SetConfig+0x12c>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d00f      	beq.n	800832e <TIM_Base_SetConfig+0xb2>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4a26      	ldr	r2, [pc, #152]	; (80083ac <TIM_Base_SetConfig+0x130>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d00b      	beq.n	800832e <TIM_Base_SetConfig+0xb2>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4a25      	ldr	r2, [pc, #148]	; (80083b0 <TIM_Base_SetConfig+0x134>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d007      	beq.n	800832e <TIM_Base_SetConfig+0xb2>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4a24      	ldr	r2, [pc, #144]	; (80083b4 <TIM_Base_SetConfig+0x138>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d003      	beq.n	800832e <TIM_Base_SetConfig+0xb2>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4a23      	ldr	r2, [pc, #140]	; (80083b8 <TIM_Base_SetConfig+0x13c>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d108      	bne.n	8008340 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	4313      	orrs	r3, r2
 800833e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	695b      	ldr	r3, [r3, #20]
 800834a:	4313      	orrs	r3, r2
 800834c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	689a      	ldr	r2, [r3, #8]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4a0a      	ldr	r2, [pc, #40]	; (8008390 <TIM_Base_SetConfig+0x114>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d003      	beq.n	8008374 <TIM_Base_SetConfig+0xf8>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a0c      	ldr	r2, [pc, #48]	; (80083a0 <TIM_Base_SetConfig+0x124>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d103      	bne.n	800837c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	691a      	ldr	r2, [r3, #16]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	615a      	str	r2, [r3, #20]
}
 8008382:	bf00      	nop
 8008384:	3714      	adds	r7, #20
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop
 8008390:	40010000 	.word	0x40010000
 8008394:	40000400 	.word	0x40000400
 8008398:	40000800 	.word	0x40000800
 800839c:	40000c00 	.word	0x40000c00
 80083a0:	40010400 	.word	0x40010400
 80083a4:	40014000 	.word	0x40014000
 80083a8:	40014400 	.word	0x40014400
 80083ac:	40014800 	.word	0x40014800
 80083b0:	40001800 	.word	0x40001800
 80083b4:	40001c00 	.word	0x40001c00
 80083b8:	40002000 	.word	0x40002000

080083bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083bc:	b480      	push	{r7}
 80083be:	b087      	sub	sp, #28
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6a1b      	ldr	r3, [r3, #32]
 80083cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6a1b      	ldr	r3, [r3, #32]
 80083d2:	f023 0201 	bic.w	r2, r3, #1
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	699b      	ldr	r3, [r3, #24]
 80083de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	011b      	lsls	r3, r3, #4
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	f023 030a 	bic.w	r3, r3, #10
 80083f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083fa:	697a      	ldr	r2, [r7, #20]
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	4313      	orrs	r3, r2
 8008400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	693a      	ldr	r2, [r7, #16]
 8008406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	697a      	ldr	r2, [r7, #20]
 800840c:	621a      	str	r2, [r3, #32]
}
 800840e:	bf00      	nop
 8008410:	371c      	adds	r7, #28
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800841a:	b480      	push	{r7}
 800841c:	b087      	sub	sp, #28
 800841e:	af00      	add	r7, sp, #0
 8008420:	60f8      	str	r0, [r7, #12]
 8008422:	60b9      	str	r1, [r7, #8]
 8008424:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6a1b      	ldr	r3, [r3, #32]
 800842a:	f023 0210 	bic.w	r2, r3, #16
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	699b      	ldr	r3, [r3, #24]
 8008436:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6a1b      	ldr	r3, [r3, #32]
 800843c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008444:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	031b      	lsls	r3, r3, #12
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	4313      	orrs	r3, r2
 800844e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008456:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	011b      	lsls	r3, r3, #4
 800845c:	693a      	ldr	r2, [r7, #16]
 800845e:	4313      	orrs	r3, r2
 8008460:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	697a      	ldr	r2, [r7, #20]
 8008466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	693a      	ldr	r2, [r7, #16]
 800846c:	621a      	str	r2, [r3, #32]
}
 800846e:	bf00      	nop
 8008470:	371c      	adds	r7, #28
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800847a:	b480      	push	{r7}
 800847c:	b085      	sub	sp, #20
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
 8008482:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008490:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008492:	683a      	ldr	r2, [r7, #0]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	4313      	orrs	r3, r2
 8008498:	f043 0307 	orr.w	r3, r3, #7
 800849c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	609a      	str	r2, [r3, #8]
}
 80084a4:	bf00      	nop
 80084a6:	3714      	adds	r7, #20
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b087      	sub	sp, #28
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	607a      	str	r2, [r7, #4]
 80084bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	021a      	lsls	r2, r3, #8
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	431a      	orrs	r2, r3
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	697a      	ldr	r2, [r7, #20]
 80084da:	4313      	orrs	r3, r2
 80084dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	609a      	str	r2, [r3, #8]
}
 80084e4:	bf00      	nop
 80084e6:	371c      	adds	r7, #28
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008500:	2b01      	cmp	r3, #1
 8008502:	d101      	bne.n	8008508 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008504:	2302      	movs	r3, #2
 8008506:	e045      	b.n	8008594 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2202      	movs	r2, #2
 8008514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a1c      	ldr	r2, [pc, #112]	; (80085a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d004      	beq.n	800853c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a1b      	ldr	r2, [pc, #108]	; (80085a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d108      	bne.n	800854e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008542:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	4313      	orrs	r3, r2
 800854c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008554:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	4313      	orrs	r3, r2
 800855e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008566:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	68ba      	ldr	r2, [r7, #8]
 800856e:	4313      	orrs	r3, r2
 8008570:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2201      	movs	r2, #1
 8008586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr
 80085a0:	40010000 	.word	0x40010000
 80085a4:	40010400 	.word	0x40010400

080085a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085c4:	bf00      	nop
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80085d8:	bf00      	nop
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d101      	bne.n	80085f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e040      	b.n	8008678 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d106      	bne.n	800860c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f002 ffd2 	bl	800b5b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2224      	movs	r2, #36	; 0x24
 8008610:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f022 0201 	bic.w	r2, r2, #1
 8008620:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f82c 	bl	8008680 <UART_SetConfig>
 8008628:	4603      	mov	r3, r0
 800862a:	2b01      	cmp	r3, #1
 800862c:	d101      	bne.n	8008632 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	e022      	b.n	8008678 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008636:	2b00      	cmp	r3, #0
 8008638:	d002      	beq.n	8008640 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fac4 	bl	8008bc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	685a      	ldr	r2, [r3, #4]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800864e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	689a      	ldr	r2, [r3, #8]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800865e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f042 0201 	orr.w	r2, r2, #1
 800866e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 fb4b 	bl	8008d0c <UART_CheckIdleState>
 8008676:	4603      	mov	r3, r0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b088      	sub	sp, #32
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008688:	2300      	movs	r3, #0
 800868a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800868c:	2300      	movs	r3, #0
 800868e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	689a      	ldr	r2, [r3, #8]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	431a      	orrs	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	695b      	ldr	r3, [r3, #20]
 800869e:	431a      	orrs	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	69db      	ldr	r3, [r3, #28]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	4bb1      	ldr	r3, [pc, #708]	; (8008974 <UART_SetConfig+0x2f4>)
 80086b0:	4013      	ands	r3, r2
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	6812      	ldr	r2, [r2, #0]
 80086b6:	6939      	ldr	r1, [r7, #16]
 80086b8:	430b      	orrs	r3, r1
 80086ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	68da      	ldr	r2, [r3, #12]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	430a      	orrs	r2, r1
 80086d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	699b      	ldr	r3, [r3, #24]
 80086d6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a1b      	ldr	r3, [r3, #32]
 80086dc:	693a      	ldr	r2, [r7, #16]
 80086de:	4313      	orrs	r3, r2
 80086e0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	693a      	ldr	r2, [r7, #16]
 80086f2:	430a      	orrs	r2, r1
 80086f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a9f      	ldr	r2, [pc, #636]	; (8008978 <UART_SetConfig+0x2f8>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d121      	bne.n	8008744 <UART_SetConfig+0xc4>
 8008700:	4b9e      	ldr	r3, [pc, #632]	; (800897c <UART_SetConfig+0x2fc>)
 8008702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008706:	f003 0303 	and.w	r3, r3, #3
 800870a:	2b03      	cmp	r3, #3
 800870c:	d816      	bhi.n	800873c <UART_SetConfig+0xbc>
 800870e:	a201      	add	r2, pc, #4	; (adr r2, 8008714 <UART_SetConfig+0x94>)
 8008710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008714:	08008725 	.word	0x08008725
 8008718:	08008731 	.word	0x08008731
 800871c:	0800872b 	.word	0x0800872b
 8008720:	08008737 	.word	0x08008737
 8008724:	2301      	movs	r3, #1
 8008726:	77fb      	strb	r3, [r7, #31]
 8008728:	e151      	b.n	80089ce <UART_SetConfig+0x34e>
 800872a:	2302      	movs	r3, #2
 800872c:	77fb      	strb	r3, [r7, #31]
 800872e:	e14e      	b.n	80089ce <UART_SetConfig+0x34e>
 8008730:	2304      	movs	r3, #4
 8008732:	77fb      	strb	r3, [r7, #31]
 8008734:	e14b      	b.n	80089ce <UART_SetConfig+0x34e>
 8008736:	2308      	movs	r3, #8
 8008738:	77fb      	strb	r3, [r7, #31]
 800873a:	e148      	b.n	80089ce <UART_SetConfig+0x34e>
 800873c:	2310      	movs	r3, #16
 800873e:	77fb      	strb	r3, [r7, #31]
 8008740:	bf00      	nop
 8008742:	e144      	b.n	80089ce <UART_SetConfig+0x34e>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a8d      	ldr	r2, [pc, #564]	; (8008980 <UART_SetConfig+0x300>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d134      	bne.n	80087b8 <UART_SetConfig+0x138>
 800874e:	4b8b      	ldr	r3, [pc, #556]	; (800897c <UART_SetConfig+0x2fc>)
 8008750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008754:	f003 030c 	and.w	r3, r3, #12
 8008758:	2b0c      	cmp	r3, #12
 800875a:	d829      	bhi.n	80087b0 <UART_SetConfig+0x130>
 800875c:	a201      	add	r2, pc, #4	; (adr r2, 8008764 <UART_SetConfig+0xe4>)
 800875e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008762:	bf00      	nop
 8008764:	08008799 	.word	0x08008799
 8008768:	080087b1 	.word	0x080087b1
 800876c:	080087b1 	.word	0x080087b1
 8008770:	080087b1 	.word	0x080087b1
 8008774:	080087a5 	.word	0x080087a5
 8008778:	080087b1 	.word	0x080087b1
 800877c:	080087b1 	.word	0x080087b1
 8008780:	080087b1 	.word	0x080087b1
 8008784:	0800879f 	.word	0x0800879f
 8008788:	080087b1 	.word	0x080087b1
 800878c:	080087b1 	.word	0x080087b1
 8008790:	080087b1 	.word	0x080087b1
 8008794:	080087ab 	.word	0x080087ab
 8008798:	2300      	movs	r3, #0
 800879a:	77fb      	strb	r3, [r7, #31]
 800879c:	e117      	b.n	80089ce <UART_SetConfig+0x34e>
 800879e:	2302      	movs	r3, #2
 80087a0:	77fb      	strb	r3, [r7, #31]
 80087a2:	e114      	b.n	80089ce <UART_SetConfig+0x34e>
 80087a4:	2304      	movs	r3, #4
 80087a6:	77fb      	strb	r3, [r7, #31]
 80087a8:	e111      	b.n	80089ce <UART_SetConfig+0x34e>
 80087aa:	2308      	movs	r3, #8
 80087ac:	77fb      	strb	r3, [r7, #31]
 80087ae:	e10e      	b.n	80089ce <UART_SetConfig+0x34e>
 80087b0:	2310      	movs	r3, #16
 80087b2:	77fb      	strb	r3, [r7, #31]
 80087b4:	bf00      	nop
 80087b6:	e10a      	b.n	80089ce <UART_SetConfig+0x34e>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a71      	ldr	r2, [pc, #452]	; (8008984 <UART_SetConfig+0x304>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d120      	bne.n	8008804 <UART_SetConfig+0x184>
 80087c2:	4b6e      	ldr	r3, [pc, #440]	; (800897c <UART_SetConfig+0x2fc>)
 80087c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80087cc:	2b10      	cmp	r3, #16
 80087ce:	d00f      	beq.n	80087f0 <UART_SetConfig+0x170>
 80087d0:	2b10      	cmp	r3, #16
 80087d2:	d802      	bhi.n	80087da <UART_SetConfig+0x15a>
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d005      	beq.n	80087e4 <UART_SetConfig+0x164>
 80087d8:	e010      	b.n	80087fc <UART_SetConfig+0x17c>
 80087da:	2b20      	cmp	r3, #32
 80087dc:	d005      	beq.n	80087ea <UART_SetConfig+0x16a>
 80087de:	2b30      	cmp	r3, #48	; 0x30
 80087e0:	d009      	beq.n	80087f6 <UART_SetConfig+0x176>
 80087e2:	e00b      	b.n	80087fc <UART_SetConfig+0x17c>
 80087e4:	2300      	movs	r3, #0
 80087e6:	77fb      	strb	r3, [r7, #31]
 80087e8:	e0f1      	b.n	80089ce <UART_SetConfig+0x34e>
 80087ea:	2302      	movs	r3, #2
 80087ec:	77fb      	strb	r3, [r7, #31]
 80087ee:	e0ee      	b.n	80089ce <UART_SetConfig+0x34e>
 80087f0:	2304      	movs	r3, #4
 80087f2:	77fb      	strb	r3, [r7, #31]
 80087f4:	e0eb      	b.n	80089ce <UART_SetConfig+0x34e>
 80087f6:	2308      	movs	r3, #8
 80087f8:	77fb      	strb	r3, [r7, #31]
 80087fa:	e0e8      	b.n	80089ce <UART_SetConfig+0x34e>
 80087fc:	2310      	movs	r3, #16
 80087fe:	77fb      	strb	r3, [r7, #31]
 8008800:	bf00      	nop
 8008802:	e0e4      	b.n	80089ce <UART_SetConfig+0x34e>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a5f      	ldr	r2, [pc, #380]	; (8008988 <UART_SetConfig+0x308>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d120      	bne.n	8008850 <UART_SetConfig+0x1d0>
 800880e:	4b5b      	ldr	r3, [pc, #364]	; (800897c <UART_SetConfig+0x2fc>)
 8008810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008814:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008818:	2b40      	cmp	r3, #64	; 0x40
 800881a:	d00f      	beq.n	800883c <UART_SetConfig+0x1bc>
 800881c:	2b40      	cmp	r3, #64	; 0x40
 800881e:	d802      	bhi.n	8008826 <UART_SetConfig+0x1a6>
 8008820:	2b00      	cmp	r3, #0
 8008822:	d005      	beq.n	8008830 <UART_SetConfig+0x1b0>
 8008824:	e010      	b.n	8008848 <UART_SetConfig+0x1c8>
 8008826:	2b80      	cmp	r3, #128	; 0x80
 8008828:	d005      	beq.n	8008836 <UART_SetConfig+0x1b6>
 800882a:	2bc0      	cmp	r3, #192	; 0xc0
 800882c:	d009      	beq.n	8008842 <UART_SetConfig+0x1c2>
 800882e:	e00b      	b.n	8008848 <UART_SetConfig+0x1c8>
 8008830:	2300      	movs	r3, #0
 8008832:	77fb      	strb	r3, [r7, #31]
 8008834:	e0cb      	b.n	80089ce <UART_SetConfig+0x34e>
 8008836:	2302      	movs	r3, #2
 8008838:	77fb      	strb	r3, [r7, #31]
 800883a:	e0c8      	b.n	80089ce <UART_SetConfig+0x34e>
 800883c:	2304      	movs	r3, #4
 800883e:	77fb      	strb	r3, [r7, #31]
 8008840:	e0c5      	b.n	80089ce <UART_SetConfig+0x34e>
 8008842:	2308      	movs	r3, #8
 8008844:	77fb      	strb	r3, [r7, #31]
 8008846:	e0c2      	b.n	80089ce <UART_SetConfig+0x34e>
 8008848:	2310      	movs	r3, #16
 800884a:	77fb      	strb	r3, [r7, #31]
 800884c:	bf00      	nop
 800884e:	e0be      	b.n	80089ce <UART_SetConfig+0x34e>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a4d      	ldr	r2, [pc, #308]	; (800898c <UART_SetConfig+0x30c>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d124      	bne.n	80088a4 <UART_SetConfig+0x224>
 800885a:	4b48      	ldr	r3, [pc, #288]	; (800897c <UART_SetConfig+0x2fc>)
 800885c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008864:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008868:	d012      	beq.n	8008890 <UART_SetConfig+0x210>
 800886a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800886e:	d802      	bhi.n	8008876 <UART_SetConfig+0x1f6>
 8008870:	2b00      	cmp	r3, #0
 8008872:	d007      	beq.n	8008884 <UART_SetConfig+0x204>
 8008874:	e012      	b.n	800889c <UART_SetConfig+0x21c>
 8008876:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800887a:	d006      	beq.n	800888a <UART_SetConfig+0x20a>
 800887c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008880:	d009      	beq.n	8008896 <UART_SetConfig+0x216>
 8008882:	e00b      	b.n	800889c <UART_SetConfig+0x21c>
 8008884:	2300      	movs	r3, #0
 8008886:	77fb      	strb	r3, [r7, #31]
 8008888:	e0a1      	b.n	80089ce <UART_SetConfig+0x34e>
 800888a:	2302      	movs	r3, #2
 800888c:	77fb      	strb	r3, [r7, #31]
 800888e:	e09e      	b.n	80089ce <UART_SetConfig+0x34e>
 8008890:	2304      	movs	r3, #4
 8008892:	77fb      	strb	r3, [r7, #31]
 8008894:	e09b      	b.n	80089ce <UART_SetConfig+0x34e>
 8008896:	2308      	movs	r3, #8
 8008898:	77fb      	strb	r3, [r7, #31]
 800889a:	e098      	b.n	80089ce <UART_SetConfig+0x34e>
 800889c:	2310      	movs	r3, #16
 800889e:	77fb      	strb	r3, [r7, #31]
 80088a0:	bf00      	nop
 80088a2:	e094      	b.n	80089ce <UART_SetConfig+0x34e>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a39      	ldr	r2, [pc, #228]	; (8008990 <UART_SetConfig+0x310>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d124      	bne.n	80088f8 <UART_SetConfig+0x278>
 80088ae:	4b33      	ldr	r3, [pc, #204]	; (800897c <UART_SetConfig+0x2fc>)
 80088b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80088b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088bc:	d012      	beq.n	80088e4 <UART_SetConfig+0x264>
 80088be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088c2:	d802      	bhi.n	80088ca <UART_SetConfig+0x24a>
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d007      	beq.n	80088d8 <UART_SetConfig+0x258>
 80088c8:	e012      	b.n	80088f0 <UART_SetConfig+0x270>
 80088ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088ce:	d006      	beq.n	80088de <UART_SetConfig+0x25e>
 80088d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80088d4:	d009      	beq.n	80088ea <UART_SetConfig+0x26a>
 80088d6:	e00b      	b.n	80088f0 <UART_SetConfig+0x270>
 80088d8:	2301      	movs	r3, #1
 80088da:	77fb      	strb	r3, [r7, #31]
 80088dc:	e077      	b.n	80089ce <UART_SetConfig+0x34e>
 80088de:	2302      	movs	r3, #2
 80088e0:	77fb      	strb	r3, [r7, #31]
 80088e2:	e074      	b.n	80089ce <UART_SetConfig+0x34e>
 80088e4:	2304      	movs	r3, #4
 80088e6:	77fb      	strb	r3, [r7, #31]
 80088e8:	e071      	b.n	80089ce <UART_SetConfig+0x34e>
 80088ea:	2308      	movs	r3, #8
 80088ec:	77fb      	strb	r3, [r7, #31]
 80088ee:	e06e      	b.n	80089ce <UART_SetConfig+0x34e>
 80088f0:	2310      	movs	r3, #16
 80088f2:	77fb      	strb	r3, [r7, #31]
 80088f4:	bf00      	nop
 80088f6:	e06a      	b.n	80089ce <UART_SetConfig+0x34e>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a25      	ldr	r2, [pc, #148]	; (8008994 <UART_SetConfig+0x314>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d124      	bne.n	800894c <UART_SetConfig+0x2cc>
 8008902:	4b1e      	ldr	r3, [pc, #120]	; (800897c <UART_SetConfig+0x2fc>)
 8008904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008908:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800890c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008910:	d012      	beq.n	8008938 <UART_SetConfig+0x2b8>
 8008912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008916:	d802      	bhi.n	800891e <UART_SetConfig+0x29e>
 8008918:	2b00      	cmp	r3, #0
 800891a:	d007      	beq.n	800892c <UART_SetConfig+0x2ac>
 800891c:	e012      	b.n	8008944 <UART_SetConfig+0x2c4>
 800891e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008922:	d006      	beq.n	8008932 <UART_SetConfig+0x2b2>
 8008924:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008928:	d009      	beq.n	800893e <UART_SetConfig+0x2be>
 800892a:	e00b      	b.n	8008944 <UART_SetConfig+0x2c4>
 800892c:	2300      	movs	r3, #0
 800892e:	77fb      	strb	r3, [r7, #31]
 8008930:	e04d      	b.n	80089ce <UART_SetConfig+0x34e>
 8008932:	2302      	movs	r3, #2
 8008934:	77fb      	strb	r3, [r7, #31]
 8008936:	e04a      	b.n	80089ce <UART_SetConfig+0x34e>
 8008938:	2304      	movs	r3, #4
 800893a:	77fb      	strb	r3, [r7, #31]
 800893c:	e047      	b.n	80089ce <UART_SetConfig+0x34e>
 800893e:	2308      	movs	r3, #8
 8008940:	77fb      	strb	r3, [r7, #31]
 8008942:	e044      	b.n	80089ce <UART_SetConfig+0x34e>
 8008944:	2310      	movs	r3, #16
 8008946:	77fb      	strb	r3, [r7, #31]
 8008948:	bf00      	nop
 800894a:	e040      	b.n	80089ce <UART_SetConfig+0x34e>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a11      	ldr	r2, [pc, #68]	; (8008998 <UART_SetConfig+0x318>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d139      	bne.n	80089ca <UART_SetConfig+0x34a>
 8008956:	4b09      	ldr	r3, [pc, #36]	; (800897c <UART_SetConfig+0x2fc>)
 8008958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800895c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008960:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008964:	d027      	beq.n	80089b6 <UART_SetConfig+0x336>
 8008966:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800896a:	d817      	bhi.n	800899c <UART_SetConfig+0x31c>
 800896c:	2b00      	cmp	r3, #0
 800896e:	d01c      	beq.n	80089aa <UART_SetConfig+0x32a>
 8008970:	e027      	b.n	80089c2 <UART_SetConfig+0x342>
 8008972:	bf00      	nop
 8008974:	efff69f3 	.word	0xefff69f3
 8008978:	40011000 	.word	0x40011000
 800897c:	40023800 	.word	0x40023800
 8008980:	40004400 	.word	0x40004400
 8008984:	40004800 	.word	0x40004800
 8008988:	40004c00 	.word	0x40004c00
 800898c:	40005000 	.word	0x40005000
 8008990:	40011400 	.word	0x40011400
 8008994:	40007800 	.word	0x40007800
 8008998:	40007c00 	.word	0x40007c00
 800899c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089a0:	d006      	beq.n	80089b0 <UART_SetConfig+0x330>
 80089a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80089a6:	d009      	beq.n	80089bc <UART_SetConfig+0x33c>
 80089a8:	e00b      	b.n	80089c2 <UART_SetConfig+0x342>
 80089aa:	2300      	movs	r3, #0
 80089ac:	77fb      	strb	r3, [r7, #31]
 80089ae:	e00e      	b.n	80089ce <UART_SetConfig+0x34e>
 80089b0:	2302      	movs	r3, #2
 80089b2:	77fb      	strb	r3, [r7, #31]
 80089b4:	e00b      	b.n	80089ce <UART_SetConfig+0x34e>
 80089b6:	2304      	movs	r3, #4
 80089b8:	77fb      	strb	r3, [r7, #31]
 80089ba:	e008      	b.n	80089ce <UART_SetConfig+0x34e>
 80089bc:	2308      	movs	r3, #8
 80089be:	77fb      	strb	r3, [r7, #31]
 80089c0:	e005      	b.n	80089ce <UART_SetConfig+0x34e>
 80089c2:	2310      	movs	r3, #16
 80089c4:	77fb      	strb	r3, [r7, #31]
 80089c6:	bf00      	nop
 80089c8:	e001      	b.n	80089ce <UART_SetConfig+0x34e>
 80089ca:	2310      	movs	r3, #16
 80089cc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	69db      	ldr	r3, [r3, #28]
 80089d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089d6:	d17c      	bne.n	8008ad2 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 80089d8:	7ffb      	ldrb	r3, [r7, #31]
 80089da:	2b08      	cmp	r3, #8
 80089dc:	d859      	bhi.n	8008a92 <UART_SetConfig+0x412>
 80089de:	a201      	add	r2, pc, #4	; (adr r2, 80089e4 <UART_SetConfig+0x364>)
 80089e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e4:	08008a09 	.word	0x08008a09
 80089e8:	08008a27 	.word	0x08008a27
 80089ec:	08008a45 	.word	0x08008a45
 80089f0:	08008a93 	.word	0x08008a93
 80089f4:	08008a5d 	.word	0x08008a5d
 80089f8:	08008a93 	.word	0x08008a93
 80089fc:	08008a93 	.word	0x08008a93
 8008a00:	08008a93 	.word	0x08008a93
 8008a04:	08008a7b 	.word	0x08008a7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8008a08:	f7fd fb58 	bl	80060bc <HAL_RCC_GetPCLK1Freq>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	005a      	lsls	r2, r3, #1
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	085b      	lsrs	r3, r3, #1
 8008a16:	441a      	add	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	61bb      	str	r3, [r7, #24]
        break;
 8008a24:	e038      	b.n	8008a98 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008a26:	f7fd fb5d 	bl	80060e4 <HAL_RCC_GetPCLK2Freq>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	005a      	lsls	r2, r3, #1
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	085b      	lsrs	r3, r3, #1
 8008a34:	441a      	add	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	61bb      	str	r3, [r7, #24]
        break;
 8008a42:	e029      	b.n	8008a98 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	085a      	lsrs	r2, r3, #1
 8008a4a:	4b5d      	ldr	r3, [pc, #372]	; (8008bc0 <UART_SetConfig+0x540>)
 8008a4c:	4413      	add	r3, r2
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	6852      	ldr	r2, [r2, #4]
 8008a52:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	61bb      	str	r3, [r7, #24]
        break;
 8008a5a:	e01d      	b.n	8008a98 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008a5c:	f7fd fa70 	bl	8005f40 <HAL_RCC_GetSysClockFreq>
 8008a60:	4603      	mov	r3, r0
 8008a62:	005a      	lsls	r2, r3, #1
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	085b      	lsrs	r3, r3, #1
 8008a6a:	441a      	add	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	61bb      	str	r3, [r7, #24]
        break;
 8008a78:	e00e      	b.n	8008a98 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	085b      	lsrs	r3, r3, #1
 8008a80:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	61bb      	str	r3, [r7, #24]
        break;
 8008a90:	e002      	b.n	8008a98 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	75fb      	strb	r3, [r7, #23]
        break;
 8008a96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	2b0f      	cmp	r3, #15
 8008a9c:	d916      	bls.n	8008acc <UART_SetConfig+0x44c>
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008aa4:	d212      	bcs.n	8008acc <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	f023 030f 	bic.w	r3, r3, #15
 8008aae:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	085b      	lsrs	r3, r3, #1
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	f003 0307 	and.w	r3, r3, #7
 8008aba:	b29a      	uxth	r2, r3
 8008abc:	89fb      	ldrh	r3, [r7, #14]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	89fa      	ldrh	r2, [r7, #14]
 8008ac8:	60da      	str	r2, [r3, #12]
 8008aca:	e06e      	b.n	8008baa <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	75fb      	strb	r3, [r7, #23]
 8008ad0:	e06b      	b.n	8008baa <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8008ad2:	7ffb      	ldrb	r3, [r7, #31]
 8008ad4:	2b08      	cmp	r3, #8
 8008ad6:	d857      	bhi.n	8008b88 <UART_SetConfig+0x508>
 8008ad8:	a201      	add	r2, pc, #4	; (adr r2, 8008ae0 <UART_SetConfig+0x460>)
 8008ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ade:	bf00      	nop
 8008ae0:	08008b05 	.word	0x08008b05
 8008ae4:	08008b21 	.word	0x08008b21
 8008ae8:	08008b3d 	.word	0x08008b3d
 8008aec:	08008b89 	.word	0x08008b89
 8008af0:	08008b55 	.word	0x08008b55
 8008af4:	08008b89 	.word	0x08008b89
 8008af8:	08008b89 	.word	0x08008b89
 8008afc:	08008b89 	.word	0x08008b89
 8008b00:	08008b71 	.word	0x08008b71
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8008b04:	f7fd fada 	bl	80060bc <HAL_RCC_GetPCLK1Freq>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	085b      	lsrs	r3, r3, #1
 8008b10:	441a      	add	r2, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	61bb      	str	r3, [r7, #24]
        break;
 8008b1e:	e036      	b.n	8008b8e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008b20:	f7fd fae0 	bl	80060e4 <HAL_RCC_GetPCLK2Freq>
 8008b24:	4602      	mov	r2, r0
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	085b      	lsrs	r3, r3, #1
 8008b2c:	441a      	add	r2, r3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	61bb      	str	r3, [r7, #24]
        break;
 8008b3a:	e028      	b.n	8008b8e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	085a      	lsrs	r2, r3, #1
 8008b42:	4b20      	ldr	r3, [pc, #128]	; (8008bc4 <UART_SetConfig+0x544>)
 8008b44:	4413      	add	r3, r2
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	6852      	ldr	r2, [r2, #4]
 8008b4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	61bb      	str	r3, [r7, #24]
        break;
 8008b52:	e01c      	b.n	8008b8e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008b54:	f7fd f9f4 	bl	8005f40 <HAL_RCC_GetSysClockFreq>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	085b      	lsrs	r3, r3, #1
 8008b60:	441a      	add	r2, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	61bb      	str	r3, [r7, #24]
        break;
 8008b6e:	e00e      	b.n	8008b8e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	085b      	lsrs	r3, r3, #1
 8008b76:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	61bb      	str	r3, [r7, #24]
        break;
 8008b86:	e002      	b.n	8008b8e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	75fb      	strb	r3, [r7, #23]
        break;
 8008b8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	2b0f      	cmp	r3, #15
 8008b92:	d908      	bls.n	8008ba6 <UART_SetConfig+0x526>
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b9a:	d204      	bcs.n	8008ba6 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	69ba      	ldr	r2, [r7, #24]
 8008ba2:	60da      	str	r2, [r3, #12]
 8008ba4:	e001      	b.n	8008baa <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3720      	adds	r7, #32
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	01e84800 	.word	0x01e84800
 8008bc4:	00f42400 	.word	0x00f42400

08008bc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd4:	f003 0301 	and.w	r3, r3, #1
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00a      	beq.n	8008bf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	430a      	orrs	r2, r1
 8008bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf6:	f003 0302 	and.w	r3, r3, #2
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00a      	beq.n	8008c14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	430a      	orrs	r2, r1
 8008c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c18:	f003 0304 	and.w	r3, r3, #4
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00a      	beq.n	8008c36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	430a      	orrs	r2, r1
 8008c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3a:	f003 0308 	and.w	r3, r3, #8
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00a      	beq.n	8008c58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	430a      	orrs	r2, r1
 8008c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5c:	f003 0310 	and.w	r3, r3, #16
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d00a      	beq.n	8008c7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	430a      	orrs	r2, r1
 8008c78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7e:	f003 0320 	and.w	r3, r3, #32
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00a      	beq.n	8008c9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	430a      	orrs	r2, r1
 8008c9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d01a      	beq.n	8008cde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	430a      	orrs	r2, r1
 8008cbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cc6:	d10a      	bne.n	8008cde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	430a      	orrs	r2, r1
 8008cdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00a      	beq.n	8008d00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	430a      	orrs	r2, r1
 8008cfe:	605a      	str	r2, [r3, #4]
  }
}
 8008d00:	bf00      	nop
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b086      	sub	sp, #24
 8008d10:	af02      	add	r7, sp, #8
 8008d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008d1a:	f7f9 faf3 	bl	8002304 <HAL_GetTick>
 8008d1e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f003 0308 	and.w	r3, r3, #8
 8008d2a:	2b08      	cmp	r3, #8
 8008d2c:	d10e      	bne.n	8008d4c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d32:	9300      	str	r3, [sp, #0]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 f814 	bl	8008d6a <UART_WaitOnFlagUntilTimeout>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d001      	beq.n	8008d4c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d48:	2303      	movs	r3, #3
 8008d4a:	e00a      	b.n	8008d62 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2220      	movs	r2, #32
 8008d50:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2220      	movs	r2, #32
 8008d56:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008d60:	2300      	movs	r3, #0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b084      	sub	sp, #16
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	60f8      	str	r0, [r7, #12]
 8008d72:	60b9      	str	r1, [r7, #8]
 8008d74:	603b      	str	r3, [r7, #0]
 8008d76:	4613      	mov	r3, r2
 8008d78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d7a:	e02a      	b.n	8008dd2 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d82:	d026      	beq.n	8008dd2 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d84:	f7f9 fabe 	bl	8002304 <HAL_GetTick>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	69ba      	ldr	r2, [r7, #24]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d302      	bcc.n	8008d9a <UART_WaitOnFlagUntilTimeout+0x30>
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d11b      	bne.n	8008dd2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008da8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	689a      	ldr	r2, [r3, #8]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f022 0201 	bic.w	r2, r2, #1
 8008db8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2220      	movs	r2, #32
 8008dbe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2220      	movs	r2, #32
 8008dc4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	e00f      	b.n	8008df2 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	69da      	ldr	r2, [r3, #28]
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	4013      	ands	r3, r2
 8008ddc:	68ba      	ldr	r2, [r7, #8]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	bf0c      	ite	eq
 8008de2:	2301      	moveq	r3, #1
 8008de4:	2300      	movne	r3, #0
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	461a      	mov	r2, r3
 8008dea:	79fb      	ldrb	r3, [r7, #7]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d0c5      	beq.n	8008d7c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
	...

08008dfc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8008e06:	2300      	movs	r3, #0
 8008e08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d027      	beq.n	8008e66 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008e1c:	68fa      	ldr	r2, [r7, #12]
 8008e1e:	4b2f      	ldr	r3, [pc, #188]	; (8008edc <FMC_SDRAM_Init+0xe0>)
 8008e20:	4013      	ands	r3, r2
 8008e22:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008e2c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8008e32:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8008e38:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8008e3e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8008e44:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8008e4a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8008e50:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008e56:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68fa      	ldr	r2, [r7, #12]
 8008e62:	601a      	str	r2, [r3, #0]
 8008e64:	e032      	b.n	8008ecc <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e72:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008e7c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008e82:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008e84:	68fa      	ldr	r2, [r7, #12]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008e90:	68ba      	ldr	r2, [r7, #8]
 8008e92:	4b12      	ldr	r3, [pc, #72]	; (8008edc <FMC_SDRAM_Init+0xe0>)
 8008e94:	4013      	ands	r3, r2
 8008e96:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008ea0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8008ea6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8008eac:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8008eb2:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8008eb8:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008eba:	68ba      	ldr	r2, [r7, #8]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	68fa      	ldr	r2, [r7, #12]
 8008ec4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	68ba      	ldr	r2, [r7, #8]
 8008eca:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3714      	adds	r7, #20
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr
 8008eda:	bf00      	nop
 8008edc:	ffff8000 	.word	0xffff8000

08008ee0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b087      	sub	sp, #28
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8008eec:	2300      	movs	r3, #0
 8008eee:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d02e      	beq.n	8008f58 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008f06:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	3b01      	subs	r3, #1
 8008f14:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008f16:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008f20:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	3b01      	subs	r3, #1
 8008f28:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008f2a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	691b      	ldr	r3, [r3, #16]
 8008f30:	3b01      	subs	r3, #1
 8008f32:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008f34:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	695b      	ldr	r3, [r3, #20]
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008f3e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	699b      	ldr	r3, [r3, #24]
 8008f44:	3b01      	subs	r3, #1
 8008f46:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	697a      	ldr	r2, [r7, #20]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	697a      	ldr	r2, [r7, #20]
 8008f54:	609a      	str	r2, [r3, #8]
 8008f56:	e039      	b.n	8008fcc <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008f5e:	697a      	ldr	r2, [r7, #20]
 8008f60:	4b1e      	ldr	r3, [pc, #120]	; (8008fdc <FMC_SDRAM_Timing_Init+0xfc>)
 8008f62:	4013      	ands	r3, r2
 8008f64:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	695b      	ldr	r3, [r3, #20]
 8008f72:	3b01      	subs	r3, #1
 8008f74:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008f76:	4313      	orrs	r3, r2
 8008f78:	697a      	ldr	r2, [r7, #20]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008f8a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	3b01      	subs	r3, #1
 8008f98:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008f9a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008fa4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	3b01      	subs	r3, #1
 8008fac:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008fae:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	699b      	ldr	r3, [r3, #24]
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	693a      	ldr	r2, [r7, #16]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	697a      	ldr	r2, [r7, #20]
 8008fc4:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	693a      	ldr	r2, [r7, #16]
 8008fca:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	371c      	adds	r7, #28
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr
 8008fda:	bf00      	nop
 8008fdc:	ff0f0fff 	.word	0xff0f0fff

08008fe0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b087      	sub	sp, #28
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8008fec:	2300      	movs	r3, #0
 8008fee:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008ff8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	3b01      	subs	r3, #1
 8009000:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8009002:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800900a:	4313      	orrs	r3, r2
 800900c:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800900e:	697a      	ldr	r2, [r7, #20]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	371c      	adds	r7, #28
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr

08009022 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009022:	b480      	push	{r7}
 8009024:	b083      	sub	sp, #12
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
 800902a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	695a      	ldr	r2, [r3, #20]
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	005b      	lsls	r3, r3, #1
 8009034:	431a      	orrs	r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009048:	b084      	sub	sp, #16
 800904a:	b480      	push	{r7}
 800904c:	b085      	sub	sp, #20
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
 8009052:	f107 001c 	add.w	r0, r7, #28
 8009056:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800905a:	2300      	movs	r3, #0
 800905c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800905e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009060:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009062:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009066:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009068:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800906a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800906c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800906e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009072:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	4313      	orrs	r3, r2
 8009078:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	685a      	ldr	r2, [r3, #4]
 800907e:	4b07      	ldr	r3, [pc, #28]	; (800909c <SDMMC_Init+0x54>)
 8009080:	4013      	ands	r3, r2
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	431a      	orrs	r2, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	3714      	adds	r7, #20
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	b004      	add	sp, #16
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop
 800909c:	ffff8100 	.word	0xffff8100

080090a0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	370c      	adds	r7, #12
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr

080090ba <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80090ba:	b480      	push	{r7}
 80090bc:	b083      	sub	sp, #12
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2203      	movs	r2, #3
 80090c6:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	370c      	adds	r7, #12
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr

080090d6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80090d6:	b480      	push	{r7}
 80090d8:	b083      	sub	sp, #12
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 0303 	and.w	r3, r3, #3
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	370c      	adds	r7, #12
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
	...

080090f4 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80090fe:	2300      	movs	r3, #0
 8009100:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009112:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009118:	431a      	orrs	r2, r3
                       Command->CPSM);
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800911e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009120:	68fa      	ldr	r2, [r7, #12]
 8009122:	4313      	orrs	r3, r2
 8009124:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	68da      	ldr	r2, [r3, #12]
 800912a:	4b06      	ldr	r3, [pc, #24]	; (8009144 <SDMMC_SendCommand+0x50>)
 800912c:	4013      	ands	r3, r2
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	431a      	orrs	r2, r3
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3714      	adds	r7, #20
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr
 8009144:	fffff000 	.word	0xfffff000

08009148 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	691b      	ldr	r3, [r3, #16]
 8009154:	b2db      	uxtb	r3, r3
}
 8009156:	4618      	mov	r0, r3
 8009158:	370c      	adds	r7, #12
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr

08009162 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009162:	b480      	push	{r7}
 8009164:	b085      	sub	sp, #20
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
 800916a:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 800916c:	2300      	movs	r3, #0
 800916e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	3314      	adds	r3, #20
 8009174:	461a      	mov	r2, r3
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	4413      	add	r3, r2
 800917a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
}  
 8009180:	4618      	mov	r0, r3
 8009182:	3714      	adds	r7, #20
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800918c:	b480      	push	{r7}
 800918e:	b085      	sub	sp, #20
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009196:	2300      	movs	r3, #0
 8009198:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	685a      	ldr	r2, [r3, #4]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80091b2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80091b8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80091be:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80091c0:	68fa      	ldr	r2, [r7, #12]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ca:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	431a      	orrs	r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80091d6:	2300      	movs	r3, #0

}
 80091d8:	4618      	mov	r0, r3
 80091da:	3714      	adds	r7, #20
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b088      	sub	sp, #32
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80091ee:	2300      	movs	r3, #0
 80091f0:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80091f6:	2310      	movs	r3, #16
 80091f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091fa:	2340      	movs	r3, #64	; 0x40
 80091fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091fe:	2300      	movs	r3, #0
 8009200:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009206:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009208:	f107 0308 	add.w	r3, r7, #8
 800920c:	4619      	mov	r1, r3
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f7ff ff70 	bl	80090f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009214:	f241 3288 	movw	r2, #5000	; 0x1388
 8009218:	2110      	movs	r1, #16
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 f98c 	bl	8009538 <SDMMC_GetCmdResp1>
 8009220:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009222:	69fb      	ldr	r3, [r7, #28]
}
 8009224:	4618      	mov	r0, r3
 8009226:	3720      	adds	r7, #32
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b08a      	sub	sp, #40	; 0x28
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009238:	2300      	movs	r3, #0
 800923a:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009240:	2307      	movs	r3, #7
 8009242:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009244:	2340      	movs	r3, #64	; 0x40
 8009246:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009248:	2300      	movs	r3, #0
 800924a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800924c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009250:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009252:	f107 0310 	add.w	r3, r7, #16
 8009256:	4619      	mov	r1, r3
 8009258:	68f8      	ldr	r0, [r7, #12]
 800925a:	f7ff ff4b 	bl	80090f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800925e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009262:	2107      	movs	r1, #7
 8009264:	68f8      	ldr	r0, [r7, #12]
 8009266:	f000 f967 	bl	8009538 <SDMMC_GetCmdResp1>
 800926a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800926c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800926e:	4618      	mov	r0, r3
 8009270:	3728      	adds	r7, #40	; 0x28
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b088      	sub	sp, #32
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800927e:	2300      	movs	r3, #0
 8009280:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 8009282:	2300      	movs	r3, #0
 8009284:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009286:	2300      	movs	r3, #0
 8009288:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800928a:	2300      	movs	r3, #0
 800928c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800928e:	2300      	movs	r3, #0
 8009290:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009296:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009298:	f107 0308 	add.w	r3, r7, #8
 800929c:	4619      	mov	r1, r3
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f7ff ff28 	bl	80090f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 f91d 	bl	80094e4 <SDMMC_GetCmdError>
 80092aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092ac:	69fb      	ldr	r3, [r7, #28]
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3720      	adds	r7, #32
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b088      	sub	sp, #32
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80092be:	2300      	movs	r3, #0
 80092c0:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80092c2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80092c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80092c8:	2308      	movs	r3, #8
 80092ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092cc:	2340      	movs	r3, #64	; 0x40
 80092ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092d0:	2300      	movs	r3, #0
 80092d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092d8:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092da:	f107 0308 	add.w	r3, r7, #8
 80092de:	4619      	mov	r1, r3
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f7ff ff07 	bl	80090f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 faee 	bl	80098c8 <SDMMC_GetCmdResp7>
 80092ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092ee:	69fb      	ldr	r3, [r7, #28]
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3720      	adds	r7, #32
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b088      	sub	sp, #32
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009302:	2300      	movs	r3, #0
 8009304:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800930a:	2337      	movs	r3, #55	; 0x37
 800930c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800930e:	2340      	movs	r3, #64	; 0x40
 8009310:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009312:	2300      	movs	r3, #0
 8009314:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800931a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800931c:	f107 0308 	add.w	r3, r7, #8
 8009320:	4619      	mov	r1, r3
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f7ff fee6 	bl	80090f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009328:	f241 3288 	movw	r2, #5000	; 0x1388
 800932c:	2137      	movs	r1, #55	; 0x37
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 f902 	bl	8009538 <SDMMC_GetCmdResp1>
 8009334:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009336:	69fb      	ldr	r3, [r7, #28]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3720      	adds	r7, #32
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b088      	sub	sp, #32
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800934a:	2300      	movs	r3, #0
 800934c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800934e:	683a      	ldr	r2, [r7, #0]
 8009350:	4b0d      	ldr	r3, [pc, #52]	; (8009388 <SDMMC_CmdAppOperCommand+0x48>)
 8009352:	4313      	orrs	r3, r2
 8009354:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009356:	2329      	movs	r3, #41	; 0x29
 8009358:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800935a:	2340      	movs	r3, #64	; 0x40
 800935c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800935e:	2300      	movs	r3, #0
 8009360:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009366:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009368:	f107 0308 	add.w	r3, r7, #8
 800936c:	4619      	mov	r1, r3
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f7ff fec0 	bl	80090f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 fa05 	bl	8009784 <SDMMC_GetCmdResp3>
 800937a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800937c:	69fb      	ldr	r3, [r7, #28]
}
 800937e:	4618      	mov	r0, r3
 8009380:	3720      	adds	r7, #32
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	80100000 	.word	0x80100000

0800938c <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b088      	sub	sp, #32
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009396:	2300      	movs	r3, #0
 8009398:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800939e:	2306      	movs	r3, #6
 80093a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80093a2:	2340      	movs	r3, #64	; 0x40
 80093a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093a6:	2300      	movs	r3, #0
 80093a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093ae:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093b0:	f107 0308 	add.w	r3, r7, #8
 80093b4:	4619      	mov	r1, r3
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f7ff fe9c 	bl	80090f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80093bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80093c0:	2106      	movs	r1, #6
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 f8b8 	bl	8009538 <SDMMC_GetCmdResp1>
 80093c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093ca:	69fb      	ldr	r3, [r7, #28]
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3720      	adds	r7, #32
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b088      	sub	sp, #32
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80093dc:	2300      	movs	r3, #0
 80093de:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 80093e0:	2300      	movs	r3, #0
 80093e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80093e4:	2333      	movs	r3, #51	; 0x33
 80093e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80093e8:	2340      	movs	r3, #64	; 0x40
 80093ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093ec:	2300      	movs	r3, #0
 80093ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093f4:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093f6:	f107 0308 	add.w	r3, r7, #8
 80093fa:	4619      	mov	r1, r3
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f7ff fe79 	bl	80090f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009402:	f241 3288 	movw	r2, #5000	; 0x1388
 8009406:	2133      	movs	r1, #51	; 0x33
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 f895 	bl	8009538 <SDMMC_GetCmdResp1>
 800940e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009410:	69fb      	ldr	r3, [r7, #28]
}
 8009412:	4618      	mov	r0, r3
 8009414:	3720      	adds	r7, #32
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b088      	sub	sp, #32
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009422:	2300      	movs	r3, #0
 8009424:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 8009426:	2300      	movs	r3, #0
 8009428:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800942a:	2302      	movs	r3, #2
 800942c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800942e:	23c0      	movs	r3, #192	; 0xc0
 8009430:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009432:	2300      	movs	r3, #0
 8009434:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800943a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800943c:	f107 0308 	add.w	r3, r7, #8
 8009440:	4619      	mov	r1, r3
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f7ff fe56 	bl	80090f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 f95b 	bl	8009704 <SDMMC_GetCmdResp2>
 800944e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009450:	69fb      	ldr	r3, [r7, #28]
}
 8009452:	4618      	mov	r0, r3
 8009454:	3720      	adds	r7, #32
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}

0800945a <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b088      	sub	sp, #32
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
 8009462:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009464:	2300      	movs	r3, #0
 8009466:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800946c:	2309      	movs	r3, #9
 800946e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009470:	23c0      	movs	r3, #192	; 0xc0
 8009472:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009474:	2300      	movs	r3, #0
 8009476:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009478:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800947c:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800947e:	f107 0308 	add.w	r3, r7, #8
 8009482:	4619      	mov	r1, r3
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f7ff fe35 	bl	80090f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 f93a 	bl	8009704 <SDMMC_GetCmdResp2>
 8009490:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009492:	69fb      	ldr	r3, [r7, #28]
}
 8009494:	4618      	mov	r0, r3
 8009496:	3720      	adds	r7, #32
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b088      	sub	sp, #32
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80094a6:	2300      	movs	r3, #0
 80094a8:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 80094aa:	2300      	movs	r3, #0
 80094ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80094ae:	2303      	movs	r3, #3
 80094b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80094b2:	2340      	movs	r3, #64	; 0x40
 80094b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094b6:	2300      	movs	r3, #0
 80094b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094be:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094c0:	f107 0308 	add.w	r3, r7, #8
 80094c4:	4619      	mov	r1, r3
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f7ff fe14 	bl	80090f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80094cc:	683a      	ldr	r2, [r7, #0]
 80094ce:	2103      	movs	r1, #3
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 f98b 	bl	80097ec <SDMMC_GetCmdResp6>
 80094d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094d8:	69fb      	ldr	r3, [r7, #28]
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3720      	adds	r7, #32
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
	...

080094e4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80094e4:	b490      	push	{r4, r7}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80094ec:	4b10      	ldr	r3, [pc, #64]	; (8009530 <SDMMC_GetCmdError+0x4c>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a10      	ldr	r2, [pc, #64]	; (8009534 <SDMMC_GetCmdError+0x50>)
 80094f2:	fba2 2303 	umull	r2, r3, r2, r3
 80094f6:	0a5b      	lsrs	r3, r3, #9
 80094f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80094fc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009500:	4623      	mov	r3, r4
 8009502:	1e5c      	subs	r4, r3, #1
 8009504:	2b00      	cmp	r3, #0
 8009506:	d102      	bne.n	800950e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009508:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800950c:	e00a      	b.n	8009524 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009516:	2b00      	cmp	r3, #0
 8009518:	d0f2      	beq.n	8009500 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009520:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009522:	2300      	movs	r3, #0
}
 8009524:	4618      	mov	r0, r3
 8009526:	3708      	adds	r7, #8
 8009528:	46bd      	mov	sp, r7
 800952a:	bc90      	pop	{r4, r7}
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	200000a8 	.word	0x200000a8
 8009534:	10624dd3 	.word	0x10624dd3

08009538 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009538:	b590      	push	{r4, r7, lr}
 800953a:	b087      	sub	sp, #28
 800953c:	af00      	add	r7, sp, #0
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	460b      	mov	r3, r1
 8009542:	607a      	str	r2, [r7, #4]
 8009544:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8009546:	4b6c      	ldr	r3, [pc, #432]	; (80096f8 <SDMMC_GetCmdResp1+0x1c0>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a6c      	ldr	r2, [pc, #432]	; (80096fc <SDMMC_GetCmdResp1+0x1c4>)
 800954c:	fba2 2303 	umull	r2, r3, r2, r3
 8009550:	0a5b      	lsrs	r3, r3, #9
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009558:	4623      	mov	r3, r4
 800955a:	1e5c      	subs	r4, r3, #1
 800955c:	2b00      	cmp	r3, #0
 800955e:	d102      	bne.n	8009566 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009560:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009564:	e0c3      	b.n	80096ee <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800956a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800956e:	2b00      	cmp	r3, #0
 8009570:	d0f2      	beq.n	8009558 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009576:	f003 0304 	and.w	r3, r3, #4
 800957a:	2b00      	cmp	r3, #0
 800957c:	d004      	beq.n	8009588 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2204      	movs	r2, #4
 8009582:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009584:	2304      	movs	r3, #4
 8009586:	e0b2      	b.n	80096ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800958c:	f003 0301 	and.w	r3, r3, #1
 8009590:	2b00      	cmp	r3, #0
 8009592:	d004      	beq.n	800959e <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2201      	movs	r2, #1
 8009598:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800959a:	2301      	movs	r3, #1
 800959c:	e0a7      	b.n	80096ee <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f7ff fdd2 	bl	8009148 <SDMMC_GetCommandResponse>
 80095a4:	4603      	mov	r3, r0
 80095a6:	461a      	mov	r2, r3
 80095a8:	7afb      	ldrb	r3, [r7, #11]
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d001      	beq.n	80095b2 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80095ae:	2301      	movs	r3, #1
 80095b0:	e09d      	b.n	80096ee <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80095b8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80095ba:	2100      	movs	r1, #0
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	f7ff fdd0 	bl	8009162 <SDMMC_GetResponse>
 80095c2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80095c4:	697a      	ldr	r2, [r7, #20]
 80095c6:	4b4e      	ldr	r3, [pc, #312]	; (8009700 <SDMMC_GetCmdResp1+0x1c8>)
 80095c8:	4013      	ands	r3, r2
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d101      	bne.n	80095d2 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 80095ce:	2300      	movs	r3, #0
 80095d0:	e08d      	b.n	80096ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	da02      	bge.n	80095de <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80095d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80095dc:	e087      	b.n	80096ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d001      	beq.n	80095ec <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80095e8:	2340      	movs	r3, #64	; 0x40
 80095ea:	e080      	b.n	80096ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d001      	beq.n	80095fa <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80095f6:	2380      	movs	r3, #128	; 0x80
 80095f8:	e079      	b.n	80096ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009600:	2b00      	cmp	r3, #0
 8009602:	d002      	beq.n	800960a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009604:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009608:	e071      	b.n	80096ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009610:	2b00      	cmp	r3, #0
 8009612:	d002      	beq.n	800961a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009614:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009618:	e069      	b.n	80096ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009620:	2b00      	cmp	r3, #0
 8009622:	d002      	beq.n	800962a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009624:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009628:	e061      	b.n	80096ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009630:	2b00      	cmp	r3, #0
 8009632:	d002      	beq.n	800963a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009634:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009638:	e059      	b.n	80096ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009640:	2b00      	cmp	r3, #0
 8009642:	d002      	beq.n	800964a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009648:	e051      	b.n	80096ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009650:	2b00      	cmp	r3, #0
 8009652:	d002      	beq.n	800965a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009654:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009658:	e049      	b.n	80096ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009660:	2b00      	cmp	r3, #0
 8009662:	d002      	beq.n	800966a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009664:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009668:	e041      	b.n	80096ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009670:	2b00      	cmp	r3, #0
 8009672:	d002      	beq.n	800967a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8009674:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009678:	e039      	b.n	80096ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009680:	2b00      	cmp	r3, #0
 8009682:	d002      	beq.n	800968a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009684:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009688:	e031      	b.n	80096ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009690:	2b00      	cmp	r3, #0
 8009692:	d002      	beq.n	800969a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009694:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009698:	e029      	b.n	80096ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d002      	beq.n	80096aa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80096a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80096a8:	e021      	b.n	80096ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d002      	beq.n	80096ba <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80096b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80096b8:	e019      	b.n	80096ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d002      	beq.n	80096ca <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80096c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80096c8:	e011      	b.n	80096ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d002      	beq.n	80096da <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80096d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80096d8:	e009      	b.n	80096ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	f003 0308 	and.w	r3, r3, #8
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d002      	beq.n	80096ea <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80096e4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80096e8:	e001      	b.n	80096ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80096ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	371c      	adds	r7, #28
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd90      	pop	{r4, r7, pc}
 80096f6:	bf00      	nop
 80096f8:	200000a8 	.word	0x200000a8
 80096fc:	10624dd3 	.word	0x10624dd3
 8009700:	fdffe008 	.word	0xfdffe008

08009704 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009704:	b490      	push	{r4, r7}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800970c:	4b1b      	ldr	r3, [pc, #108]	; (800977c <SDMMC_GetCmdResp2+0x78>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a1b      	ldr	r2, [pc, #108]	; (8009780 <SDMMC_GetCmdResp2+0x7c>)
 8009712:	fba2 2303 	umull	r2, r3, r2, r3
 8009716:	0a5b      	lsrs	r3, r3, #9
 8009718:	f241 3288 	movw	r2, #5000	; 0x1388
 800971c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009720:	4623      	mov	r3, r4
 8009722:	1e5c      	subs	r4, r3, #1
 8009724:	2b00      	cmp	r3, #0
 8009726:	d102      	bne.n	800972e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009728:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800972c:	e020      	b.n	8009770 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009732:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009736:	2b00      	cmp	r3, #0
 8009738:	d0f2      	beq.n	8009720 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800973e:	f003 0304 	and.w	r3, r3, #4
 8009742:	2b00      	cmp	r3, #0
 8009744:	d004      	beq.n	8009750 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2204      	movs	r2, #4
 800974a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800974c:	2304      	movs	r3, #4
 800974e:	e00f      	b.n	8009770 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009754:	f003 0301 	and.w	r3, r3, #1
 8009758:	2b00      	cmp	r3, #0
 800975a:	d004      	beq.n	8009766 <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009762:	2301      	movs	r3, #1
 8009764:	e004      	b.n	8009770 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800976c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bc90      	pop	{r4, r7}
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop
 800977c:	200000a8 	.word	0x200000a8
 8009780:	10624dd3 	.word	0x10624dd3

08009784 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009784:	b490      	push	{r4, r7}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800978c:	4b15      	ldr	r3, [pc, #84]	; (80097e4 <SDMMC_GetCmdResp3+0x60>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a15      	ldr	r2, [pc, #84]	; (80097e8 <SDMMC_GetCmdResp3+0x64>)
 8009792:	fba2 2303 	umull	r2, r3, r2, r3
 8009796:	0a5b      	lsrs	r3, r3, #9
 8009798:	f241 3288 	movw	r2, #5000	; 0x1388
 800979c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80097a0:	4623      	mov	r3, r4
 80097a2:	1e5c      	subs	r4, r3, #1
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d102      	bne.n	80097ae <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80097a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80097ac:	e015      	b.n	80097da <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d0f2      	beq.n	80097a0 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097be:	f003 0304 	and.w	r3, r3, #4
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d004      	beq.n	80097d0 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2204      	movs	r2, #4
 80097ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80097cc:	2304      	movs	r3, #4
 80097ce:	e004      	b.n	80097da <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80097d6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80097d8:	2300      	movs	r3, #0
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3708      	adds	r7, #8
 80097de:	46bd      	mov	sp, r7
 80097e0:	bc90      	pop	{r4, r7}
 80097e2:	4770      	bx	lr
 80097e4:	200000a8 	.word	0x200000a8
 80097e8:	10624dd3 	.word	0x10624dd3

080097ec <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80097ec:	b590      	push	{r4, r7, lr}
 80097ee:	b087      	sub	sp, #28
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	460b      	mov	r3, r1
 80097f6:	607a      	str	r2, [r7, #4]
 80097f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80097fa:	4b31      	ldr	r3, [pc, #196]	; (80098c0 <SDMMC_GetCmdResp6+0xd4>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a31      	ldr	r2, [pc, #196]	; (80098c4 <SDMMC_GetCmdResp6+0xd8>)
 8009800:	fba2 2303 	umull	r2, r3, r2, r3
 8009804:	0a5b      	lsrs	r3, r3, #9
 8009806:	f241 3288 	movw	r2, #5000	; 0x1388
 800980a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800980e:	4623      	mov	r3, r4
 8009810:	1e5c      	subs	r4, r3, #1
 8009812:	2b00      	cmp	r3, #0
 8009814:	d102      	bne.n	800981c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009816:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800981a:	e04c      	b.n	80098b6 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009820:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009824:	2b00      	cmp	r3, #0
 8009826:	d0f2      	beq.n	800980e <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800982c:	f003 0304 	and.w	r3, r3, #4
 8009830:	2b00      	cmp	r3, #0
 8009832:	d004      	beq.n	800983e <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2204      	movs	r2, #4
 8009838:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800983a:	2304      	movs	r3, #4
 800983c:	e03b      	b.n	80098b6 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009842:	f003 0301 	and.w	r3, r3, #1
 8009846:	2b00      	cmp	r3, #0
 8009848:	d004      	beq.n	8009854 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2201      	movs	r2, #1
 800984e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009850:	2301      	movs	r3, #1
 8009852:	e030      	b.n	80098b6 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	f7ff fc77 	bl	8009148 <SDMMC_GetCommandResponse>
 800985a:	4603      	mov	r3, r0
 800985c:	461a      	mov	r2, r3
 800985e:	7afb      	ldrb	r3, [r7, #11]
 8009860:	4293      	cmp	r3, r2
 8009862:	d001      	beq.n	8009868 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009864:	2301      	movs	r3, #1
 8009866:	e026      	b.n	80098b6 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800986e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009870:	2100      	movs	r1, #0
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f7ff fc75 	bl	8009162 <SDMMC_GetResponse>
 8009878:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009880:	2b00      	cmp	r3, #0
 8009882:	d106      	bne.n	8009892 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	0c1b      	lsrs	r3, r3, #16
 8009888:	b29a      	uxth	r2, r3
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800988e:	2300      	movs	r3, #0
 8009890:	e011      	b.n	80098b6 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009898:	2b00      	cmp	r3, #0
 800989a:	d002      	beq.n	80098a2 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800989c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80098a0:	e009      	b.n	80098b6 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d002      	beq.n	80098b2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80098ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098b0:	e001      	b.n	80098b6 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80098b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	371c      	adds	r7, #28
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd90      	pop	{r4, r7, pc}
 80098be:	bf00      	nop
 80098c0:	200000a8 	.word	0x200000a8
 80098c4:	10624dd3 	.word	0x10624dd3

080098c8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80098c8:	b490      	push	{r4, r7}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80098d0:	4b18      	ldr	r3, [pc, #96]	; (8009934 <SDMMC_GetCmdResp7+0x6c>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a18      	ldr	r2, [pc, #96]	; (8009938 <SDMMC_GetCmdResp7+0x70>)
 80098d6:	fba2 2303 	umull	r2, r3, r2, r3
 80098da:	0a5b      	lsrs	r3, r3, #9
 80098dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80098e0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80098e4:	4623      	mov	r3, r4
 80098e6:	1e5c      	subs	r4, r3, #1
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d102      	bne.n	80098f2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80098ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80098f0:	e01a      	b.n	8009928 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d0f2      	beq.n	80098e4 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009902:	f003 0304 	and.w	r3, r3, #4
 8009906:	2b00      	cmp	r3, #0
 8009908:	d004      	beq.n	8009914 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2240      	movs	r2, #64	; 0x40
 800990e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009910:	2304      	movs	r3, #4
 8009912:	e009      	b.n	8009928 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800991c:	2b00      	cmp	r3, #0
 800991e:	d002      	beq.n	8009926 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2240      	movs	r2, #64	; 0x40
 8009924:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009926:	2300      	movs	r3, #0
  
}
 8009928:	4618      	mov	r0, r3
 800992a:	3708      	adds	r7, #8
 800992c:	46bd      	mov	sp, r7
 800992e:	bc90      	pop	{r4, r7}
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	200000a8 	.word	0x200000a8
 8009938:	10624dd3 	.word	0x10624dd3

0800993c <Init_Display>:

//
//  }

void Init_Display(void)
{
 800993c:	b598      	push	{r3, r4, r7, lr}
 800993e:	af00      	add	r7, sp, #0
	BSP_LCD_Init();
 8009940:	f7f7 fa28 	bl	8000d94 <BSP_LCD_Init>

	/* Initialize TouchScreen in Interrupts Mode */
	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8009944:	f7f7 fa96 	bl	8000e74 <BSP_LCD_GetXSize>
 8009948:	4603      	mov	r3, r0
 800994a:	b29c      	uxth	r4, r3
 800994c:	f7f7 faa6 	bl	8000e9c <BSP_LCD_GetYSize>
 8009950:	4603      	mov	r3, r0
 8009952:	b29b      	uxth	r3, r3
 8009954:	4619      	mov	r1, r3
 8009956:	4620      	mov	r0, r4
 8009958:	f7f8 fa22 	bl	8001da0 <BSP_TS_Init>

	BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FB_START_ADDRESS);
 800995c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8009960:	2001      	movs	r0, #1
 8009962:	f7f7 faaf 	bl	8000ec4 <BSP_LCD_LayerDefaultInit>

	/* Set LCD Foreground Layer  */
	BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8009966:	2001      	movs	r0, #1
 8009968:	f7f7 fb0c 	bl	8000f84 <BSP_LCD_SelectLayer>

	/* Enable LCD Display */
	BSP_LCD_DisplayOn();
 800996c:	f7f7 fe4a 	bl	8001604 <BSP_LCD_DisplayOn>


	/* Clear the LCD */
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8009970:	f04f 30ff 	mov.w	r0, #4294967295
 8009974:	f7f7 fb2e 	bl	8000fd4 <BSP_LCD_SetBackColor>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8009978:	f04f 30ff 	mov.w	r0, #4294967295
 800997c:	f7f7 fb5e 	bl	800103c <BSP_LCD_Clear>


	/* Set the LCD Text Color */
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8009980:	4802      	ldr	r0, [pc, #8]	; (800998c <Init_Display+0x50>)
 8009982:	f7f7 fb0f 	bl	8000fa4 <BSP_LCD_SetTextColor>

	/* Display LCD messages */
	//BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"KiCAD Team Bitch !", CENTER_MODE);
	//BSP_LCD_DisplayStringAt(0, 35, (uint8_t *)"Drivers examples", CENTER_MODE);
}
 8009986:	bf00      	nop
 8009988:	bd98      	pop	{r3, r4, r7, pc}
 800998a:	bf00      	nop
 800998c:	ff000080 	.word	0xff000080

08009990 <Display_Render>:


void Display_Render(void)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	af00      	add	r7, sp, #0
	/* Clear the LCD */
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8009994:	f04f 30ff 	mov.w	r0, #4294967295
 8009998:	f7f7 fb1c 	bl	8000fd4 <BSP_LCD_SetBackColor>
	//BSP_LCD_Clear(LCD_COLOR_WHITE);

	/* Set the LCD Text Color */
	BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 800999c:	480c      	ldr	r0, [pc, #48]	; (80099d0 <Display_Render+0x40>)
 800999e:	f7f7 fb01 	bl	8000fa4 <BSP_LCD_SetTextColor>

	/* Main Analyzer Title */
	BSP_LCD_SetFont(&Font16);
 80099a2:	480c      	ldr	r0, [pc, #48]	; (80099d4 <Display_Render+0x44>)
 80099a4:	f7f7 fb30 	bl	8001008 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"CPE Lyon : Raw Signal !", CENTER_MODE);
 80099a8:	2301      	movs	r3, #1
 80099aa:	4a0b      	ldr	r2, [pc, #44]	; (80099d8 <Display_Render+0x48>)
 80099ac:	210a      	movs	r1, #10
 80099ae:	2000      	movs	r0, #0
 80099b0:	f7f7 fbb0 	bl	8001114 <BSP_LCD_DisplayStringAt>

	/* Plot Background */
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80099b4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80099b8:	f7f7 faf4 	bl	8000fa4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(PLOT_X, PLOT_Y, PLOT_WIDTH, PLOT_HEIGHT);
 80099bc:	2396      	movs	r3, #150	; 0x96
 80099be:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80099c2:	2128      	movs	r1, #40	; 0x28
 80099c4:	2014      	movs	r0, #20
 80099c6:	f7f7 fda3 	bl	8001510 <BSP_LCD_FillRect>

	//Plot_Signal((uint8_t*)signal_test_buffer, SIGNAL_BUFF);
}
 80099ca:	bf00      	nop
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	ffffa500 	.word	0xffffa500
 80099d4:	20000030 	.word	0x20000030
 80099d8:	0800b9d4 	.word	0x0800b9d4

080099dc <Draw_GUI>:

void Draw_GUI(void)
{
 80099dc:	b5b0      	push	{r4, r5, r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80099e2:	f04f 30ff 	mov.w	r0, #4294967295
 80099e6:	f7f7 fadd 	bl	8000fa4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(GUI_X, GUI_Y, GUI_WIDTH, GUI_HEIGHT);
 80099ea:	2350      	movs	r3, #80	; 0x50
 80099ec:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80099f0:	21c3      	movs	r1, #195	; 0xc3
 80099f2:	2014      	movs	r0, #20
 80099f4:	f7f7 fd8c 	bl	8001510 <BSP_LCD_FillRect>

	for(int i = 0; i < NUMBER_OF_BUTTON ; i++)
 80099f8:	2300      	movs	r3, #0
 80099fa:	607b      	str	r3, [r7, #4]
 80099fc:	e08f      	b.n	8009b1e <Draw_GUI+0x142>
	{
		BSP_LCD_SetTextColor(button_list[i].color);
 80099fe:	4957      	ldr	r1, [pc, #348]	; (8009b5c <Draw_GUI+0x180>)
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	4613      	mov	r3, r2
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	4413      	add	r3, r2
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	440b      	add	r3, r1
 8009a0c:	330c      	adds	r3, #12
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4618      	mov	r0, r3
 8009a12:	f7f7 fac7 	bl	8000fa4 <BSP_LCD_SetTextColor>
		if(button_list[i].is_active == 0)
 8009a16:	4951      	ldr	r1, [pc, #324]	; (8009b5c <Draw_GUI+0x180>)
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	4413      	add	r3, r2
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	440b      	add	r3, r1
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d128      	bne.n	8009a7c <Draw_GUI+0xa0>
		{
			BSP_LCD_DrawRect(button_list[i].x_pos, button_list[i].y_pos, button_list[i].width, button_list[i].height);
 8009a2a:	494c      	ldr	r1, [pc, #304]	; (8009b5c <Draw_GUI+0x180>)
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	4613      	mov	r3, r2
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	4413      	add	r3, r2
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	440b      	add	r3, r1
 8009a38:	3302      	adds	r3, #2
 8009a3a:	8818      	ldrh	r0, [r3, #0]
 8009a3c:	4947      	ldr	r1, [pc, #284]	; (8009b5c <Draw_GUI+0x180>)
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	4613      	mov	r3, r2
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	4413      	add	r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	440b      	add	r3, r1
 8009a4a:	3304      	adds	r3, #4
 8009a4c:	881c      	ldrh	r4, [r3, #0]
 8009a4e:	4943      	ldr	r1, [pc, #268]	; (8009b5c <Draw_GUI+0x180>)
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	4613      	mov	r3, r2
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	4413      	add	r3, r2
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	440b      	add	r3, r1
 8009a5c:	3306      	adds	r3, #6
 8009a5e:	881d      	ldrh	r5, [r3, #0]
 8009a60:	493e      	ldr	r1, [pc, #248]	; (8009b5c <Draw_GUI+0x180>)
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	4613      	mov	r3, r2
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	4413      	add	r3, r2
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	440b      	add	r3, r1
 8009a6e:	3308      	adds	r3, #8
 8009a70:	881b      	ldrh	r3, [r3, #0]
 8009a72:	462a      	mov	r2, r5
 8009a74:	4621      	mov	r1, r4
 8009a76:	f7f7 fcd1 	bl	800141c <BSP_LCD_DrawRect>
 8009a7a:	e027      	b.n	8009acc <Draw_GUI+0xf0>
		}
		else
		{
			BSP_LCD_FillRect(button_list[i].x_pos, button_list[i].y_pos, button_list[i].width, button_list[i].height);
 8009a7c:	4937      	ldr	r1, [pc, #220]	; (8009b5c <Draw_GUI+0x180>)
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	4613      	mov	r3, r2
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	4413      	add	r3, r2
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	440b      	add	r3, r1
 8009a8a:	3302      	adds	r3, #2
 8009a8c:	8818      	ldrh	r0, [r3, #0]
 8009a8e:	4933      	ldr	r1, [pc, #204]	; (8009b5c <Draw_GUI+0x180>)
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	4613      	mov	r3, r2
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	4413      	add	r3, r2
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	440b      	add	r3, r1
 8009a9c:	3304      	adds	r3, #4
 8009a9e:	881c      	ldrh	r4, [r3, #0]
 8009aa0:	492e      	ldr	r1, [pc, #184]	; (8009b5c <Draw_GUI+0x180>)
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	4613      	mov	r3, r2
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	4413      	add	r3, r2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	440b      	add	r3, r1
 8009aae:	3306      	adds	r3, #6
 8009ab0:	881d      	ldrh	r5, [r3, #0]
 8009ab2:	492a      	ldr	r1, [pc, #168]	; (8009b5c <Draw_GUI+0x180>)
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	4413      	add	r3, r2
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	440b      	add	r3, r1
 8009ac0:	3308      	adds	r3, #8
 8009ac2:	881b      	ldrh	r3, [r3, #0]
 8009ac4:	462a      	mov	r2, r5
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	f7f7 fd22 	bl	8001510 <BSP_LCD_FillRect>
		}
		BSP_LCD_SetFont(&Font8);
 8009acc:	4824      	ldr	r0, [pc, #144]	; (8009b60 <Draw_GUI+0x184>)
 8009ace:	f7f7 fa9b 	bl	8001008 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(button_list[i].x_pos + 15, button_list[i].y_pos + 15, button_list[i].text, LEFT_MODE);
 8009ad2:	4922      	ldr	r1, [pc, #136]	; (8009b5c <Draw_GUI+0x180>)
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	4413      	add	r3, r2
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	440b      	add	r3, r1
 8009ae0:	3302      	adds	r3, #2
 8009ae2:	881b      	ldrh	r3, [r3, #0]
 8009ae4:	330f      	adds	r3, #15
 8009ae6:	b298      	uxth	r0, r3
 8009ae8:	491c      	ldr	r1, [pc, #112]	; (8009b5c <Draw_GUI+0x180>)
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	4613      	mov	r3, r2
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	4413      	add	r3, r2
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	440b      	add	r3, r1
 8009af6:	3304      	adds	r3, #4
 8009af8:	881b      	ldrh	r3, [r3, #0]
 8009afa:	330f      	adds	r3, #15
 8009afc:	b29c      	uxth	r4, r3
 8009afe:	4917      	ldr	r1, [pc, #92]	; (8009b5c <Draw_GUI+0x180>)
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	4613      	mov	r3, r2
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	4413      	add	r3, r2
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	440b      	add	r3, r1
 8009b0c:	3310      	adds	r3, #16
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	2303      	movs	r3, #3
 8009b12:	4621      	mov	r1, r4
 8009b14:	f7f7 fafe 	bl	8001114 <BSP_LCD_DisplayStringAt>
	for(int i = 0; i < NUMBER_OF_BUTTON ; i++)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	607b      	str	r3, [r7, #4]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	f77f af6c 	ble.w	80099fe <Draw_GUI+0x22>
	}

	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTCYAN);
 8009b26:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8009b2a:	f7f7 fa3b 	bl	8000fa4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(DETEC_CNT_X, DETEC_CNT_Y, DETEC_CNT_WIDTH, DETEC_CNT_HEIGHT);
 8009b2e:	231e      	movs	r3, #30
 8009b30:	2264      	movs	r2, #100	; 0x64
 8009b32:	21f5      	movs	r1, #245	; 0xf5
 8009b34:	2014      	movs	r0, #20
 8009b36:	f7f7 fceb 	bl	8001510 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8009b3a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8009b3e:	f7f7 fa31 	bl	8000fa4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font8);
 8009b42:	4807      	ldr	r0, [pc, #28]	; (8009b60 <Draw_GUI+0x184>)
 8009b44:	f7f7 fa60 	bl	8001008 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(DETEC_CNT_X + 10, DETEC_CNT_Y + 10, detection_label, LEFT_MODE);
 8009b48:	2303      	movs	r3, #3
 8009b4a:	4a06      	ldr	r2, [pc, #24]	; (8009b64 <Draw_GUI+0x188>)
 8009b4c:	21ff      	movs	r1, #255	; 0xff
 8009b4e:	201e      	movs	r0, #30
 8009b50:	f7f7 fae0 	bl	8001114 <BSP_LCD_DisplayStringAt>

}
 8009b54:	bf00      	nop
 8009b56:	3708      	adds	r7, #8
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8009b5c:	2000004c 	.word	0x2000004c
 8009b60:	20000038 	.word	0x20000038
 8009b64:	20000088 	.word	0x20000088

08009b68 <Plot_Signal>:

void Plot_Signal(uint8_t *buffer, uint16_t nbr_pts)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b086      	sub	sp, #24
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	460b      	mov	r3, r1
 8009b72:	807b      	strh	r3, [r7, #2]
	float pts1 = 0;
 8009b74:	f04f 0300 	mov.w	r3, #0
 8009b78:	613b      	str	r3, [r7, #16]
	float time_step = 0;
 8009b7a:	f04f 0300 	mov.w	r3, #0
 8009b7e:	60fb      	str	r3, [r7, #12]

	time_step = 1;
 8009b80:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8009b84:	60fb      	str	r3, [r7, #12]

	/* Clear Last Signal */
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8009b86:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8009b8a:	f7f7 fa0b 	bl	8000fa4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(PLOT_X, PLOT_Y, PLOT_WIDTH, PLOT_HEIGHT);
 8009b8e:	2396      	movs	r3, #150	; 0x96
 8009b90:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009b94:	2128      	movs	r1, #40	; 0x28
 8009b96:	2014      	movs	r0, #20
 8009b98:	f7f7 fcba 	bl	8001510 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);
 8009b9c:	482e      	ldr	r0, [pc, #184]	; (8009c58 <Plot_Signal+0xf0>)
 8009b9e:	f7f7 fa01 	bl	8000fa4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(PLOT_X - 5, PLOT_Y - 5, PLOT_WIDTH + 10, PLOT_HEIGHT + 10);
 8009ba2:	23a0      	movs	r3, #160	; 0xa0
 8009ba4:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8009ba8:	2123      	movs	r1, #35	; 0x23
 8009baa:	200f      	movs	r0, #15
 8009bac:	f7f7 fcb0 	bl	8001510 <BSP_LCD_FillRect>

	BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8009bb0:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8009bb4:	f7f7 f9f6 	bl	8000fa4 <BSP_LCD_SetTextColor>

	for(uint16_t i = 0 ; i < nbr_pts ; i++)
 8009bb8:	2300      	movs	r3, #0
 8009bba:	82fb      	strh	r3, [r7, #22]
 8009bbc:	e044      	b.n	8009c48 <Plot_Signal+0xe0>
	{
		pts1 = buffer[i];
 8009bbe:	8afb      	ldrh	r3, [r7, #22]
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	ee07 3a90 	vmov	s15, r3
 8009bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bce:	edc7 7a04 	vstr	s15, [r7, #16]
		pts1 = (pts1 / 0xFF);
 8009bd2:	ed97 7a04 	vldr	s14, [r7, #16]
 8009bd6:	eddf 6a21 	vldr	s13, [pc, #132]	; 8009c5c <Plot_Signal+0xf4>
 8009bda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009bde:	edc7 7a04 	vstr	s15, [r7, #16]
		pts1 = (1 - pts1);
 8009be2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009be6:	edd7 7a04 	vldr	s15, [r7, #16]
 8009bea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bee:	edc7 7a04 	vstr	s15, [r7, #16]

		pts1 = PLOT_Y + pts1 * PLOT_HEIGHT;
 8009bf2:	edd7 7a04 	vldr	s15, [r7, #16]
 8009bf6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8009c60 <Plot_Signal+0xf8>
 8009bfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009bfe:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8009c64 <Plot_Signal+0xfc>
 8009c02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c06:	edc7 7a04 	vstr	s15, [r7, #16]

		BSP_LCD_DrawPixel(PLOT_X + (uint16_t)(time_step * i), (uint16_t)(pts1), LCD_COLOR_YELLOW);
 8009c0a:	8afb      	ldrh	r3, [r7, #22]
 8009c0c:	ee07 3a90 	vmov	s15, r3
 8009c10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009c14:	edd7 7a03 	vldr	s15, [r7, #12]
 8009c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c20:	ee17 3a90 	vmov	r3, s15
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	3314      	adds	r3, #20
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8009c2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c32:	ee17 2a90 	vmov	r2, s15
 8009c36:	b291      	uxth	r1, r2
 8009c38:	f06f 02ff 	mvn.w	r2, #255	; 0xff
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f7f7 fc1f 	bl	8001480 <BSP_LCD_DrawPixel>
	for(uint16_t i = 0 ; i < nbr_pts ; i++)
 8009c42:	8afb      	ldrh	r3, [r7, #22]
 8009c44:	3301      	adds	r3, #1
 8009c46:	82fb      	strh	r3, [r7, #22]
 8009c48:	8afa      	ldrh	r2, [r7, #22]
 8009c4a:	887b      	ldrh	r3, [r7, #2]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d3b6      	bcc.n	8009bbe <Plot_Signal+0x56>

	}


}
 8009c50:	bf00      	nop
 8009c52:	3718      	adds	r7, #24
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	ff404040 	.word	0xff404040
 8009c5c:	437f0000 	.word	0x437f0000
 8009c60:	43160000 	.word	0x43160000
 8009c64:	42200000 	.word	0x42200000

08009c68 <active_button>:

void active_button(uint8_t index)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b085      	sub	sp, #20
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	4603      	mov	r3, r0
 8009c70:	71fb      	strb	r3, [r7, #7]
	for(int j = 0 ; j < NUMBER_OF_BUTTON ; j++)
 8009c72:	2300      	movs	r3, #0
 8009c74:	60fb      	str	r3, [r7, #12]
 8009c76:	e019      	b.n	8009cac <active_button+0x44>
	{
		if(j != index)
 8009c78:	79fb      	ldrb	r3, [r7, #7]
 8009c7a:	68fa      	ldr	r2, [r7, #12]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d009      	beq.n	8009c94 <active_button+0x2c>
		{
			button_list[j].is_active = 0;
 8009c80:	490f      	ldr	r1, [pc, #60]	; (8009cc0 <active_button+0x58>)
 8009c82:	68fa      	ldr	r2, [r7, #12]
 8009c84:	4613      	mov	r3, r2
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	4413      	add	r3, r2
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	440b      	add	r3, r1
 8009c8e:	2200      	movs	r2, #0
 8009c90:	701a      	strb	r2, [r3, #0]
 8009c92:	e008      	b.n	8009ca6 <active_button+0x3e>
		}
		else{
			button_list[j].is_active = 1;
 8009c94:	490a      	ldr	r1, [pc, #40]	; (8009cc0 <active_button+0x58>)
 8009c96:	68fa      	ldr	r2, [r7, #12]
 8009c98:	4613      	mov	r3, r2
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	4413      	add	r3, r2
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	440b      	add	r3, r1
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	701a      	strb	r2, [r3, #0]
	for(int j = 0 ; j < NUMBER_OF_BUTTON ; j++)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	60fb      	str	r3, [r7, #12]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2b02      	cmp	r3, #2
 8009cb0:	dde2      	ble.n	8009c78 <active_button+0x10>
		}
	}
}
 8009cb2:	bf00      	nop
 8009cb4:	3714      	adds	r7, #20
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	2000004c 	.word	0x2000004c

08009cc4 <TouchScreen_Polling>:

void TouchScreen_Polling(void)
{
 8009cc4:	b590      	push	{r4, r7, lr}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
	static uint8_t t = 0;
	uint16_t x = 0;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	807b      	strh	r3, [r7, #2]
	uint16_t y = 0;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	803b      	strh	r3, [r7, #0]

	BSP_TS_GetState(&TS_State);
 8009cd2:	4833      	ldr	r0, [pc, #204]	; (8009da0 <TouchScreen_Polling+0xdc>)
 8009cd4:	f7f8 f8a4 	bl	8001e20 <BSP_TS_GetState>

	if(TS_State.touchDetected)
 8009cd8:	4b31      	ldr	r3, [pc, #196]	; (8009da0 <TouchScreen_Polling+0xdc>)
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d05b      	beq.n	8009d98 <TouchScreen_Polling+0xd4>
	{
		x = TS_State.touchX[0];
 8009ce0:	4b2f      	ldr	r3, [pc, #188]	; (8009da0 <TouchScreen_Polling+0xdc>)
 8009ce2:	885b      	ldrh	r3, [r3, #2]
 8009ce4:	807b      	strh	r3, [r7, #2]
		y = TS_State.touchY[0];
 8009ce6:	4b2e      	ldr	r3, [pc, #184]	; (8009da0 <TouchScreen_Polling+0xdc>)
 8009ce8:	899b      	ldrh	r3, [r3, #12]
 8009cea:	803b      	strh	r3, [r7, #0]

		for(int i = 0; i < NUMBER_OF_BUTTON ; i++)
 8009cec:	2300      	movs	r3, #0
 8009cee:	607b      	str	r3, [r7, #4]
 8009cf0:	e04f      	b.n	8009d92 <TouchScreen_Polling+0xce>
		{
			if(x > button_list[i].x_pos && x < (button_list[i].x_pos + button_list[i].width))
 8009cf2:	492c      	ldr	r1, [pc, #176]	; (8009da4 <TouchScreen_Polling+0xe0>)
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	4413      	add	r3, r2
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	440b      	add	r3, r1
 8009d00:	3302      	adds	r3, #2
 8009d02:	881b      	ldrh	r3, [r3, #0]
 8009d04:	887a      	ldrh	r2, [r7, #2]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d940      	bls.n	8009d8c <TouchScreen_Polling+0xc8>
 8009d0a:	8879      	ldrh	r1, [r7, #2]
 8009d0c:	4825      	ldr	r0, [pc, #148]	; (8009da4 <TouchScreen_Polling+0xe0>)
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	4613      	mov	r3, r2
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	4413      	add	r3, r2
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	4403      	add	r3, r0
 8009d1a:	3302      	adds	r3, #2
 8009d1c:	881b      	ldrh	r3, [r3, #0]
 8009d1e:	461c      	mov	r4, r3
 8009d20:	4820      	ldr	r0, [pc, #128]	; (8009da4 <TouchScreen_Polling+0xe0>)
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	4613      	mov	r3, r2
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	4413      	add	r3, r2
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	4403      	add	r3, r0
 8009d2e:	3306      	adds	r3, #6
 8009d30:	881b      	ldrh	r3, [r3, #0]
 8009d32:	4423      	add	r3, r4
 8009d34:	4299      	cmp	r1, r3
 8009d36:	da29      	bge.n	8009d8c <TouchScreen_Polling+0xc8>
			{
				if(y > button_list[i].y_pos && y < (button_list[i].y_pos + button_list[i].height))
 8009d38:	491a      	ldr	r1, [pc, #104]	; (8009da4 <TouchScreen_Polling+0xe0>)
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	4613      	mov	r3, r2
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	4413      	add	r3, r2
 8009d42:	009b      	lsls	r3, r3, #2
 8009d44:	440b      	add	r3, r1
 8009d46:	3304      	adds	r3, #4
 8009d48:	881b      	ldrh	r3, [r3, #0]
 8009d4a:	883a      	ldrh	r2, [r7, #0]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d91d      	bls.n	8009d8c <TouchScreen_Polling+0xc8>
 8009d50:	8839      	ldrh	r1, [r7, #0]
 8009d52:	4814      	ldr	r0, [pc, #80]	; (8009da4 <TouchScreen_Polling+0xe0>)
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	4613      	mov	r3, r2
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	4413      	add	r3, r2
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	4403      	add	r3, r0
 8009d60:	3304      	adds	r3, #4
 8009d62:	881b      	ldrh	r3, [r3, #0]
 8009d64:	461c      	mov	r4, r3
 8009d66:	480f      	ldr	r0, [pc, #60]	; (8009da4 <TouchScreen_Polling+0xe0>)
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	4413      	add	r3, r2
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	4403      	add	r3, r0
 8009d74:	3308      	adds	r3, #8
 8009d76:	881b      	ldrh	r3, [r3, #0]
 8009d78:	4423      	add	r3, r4
 8009d7a:	4299      	cmp	r1, r3
 8009d7c:	da06      	bge.n	8009d8c <TouchScreen_Polling+0xc8>
				{
					active_button(i);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7ff ff70 	bl	8009c68 <active_button>
					Draw_GUI();
 8009d88:	f7ff fe28 	bl	80099dc <Draw_GUI>
		for(int i = 0; i < NUMBER_OF_BUTTON ; i++)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	607b      	str	r3, [r7, #4]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2b02      	cmp	r3, #2
 8009d96:	ddac      	ble.n	8009cf2 <TouchScreen_Polling+0x2e>
			}
		}


	}
}
 8009d98:	bf00      	nop
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd90      	pop	{r4, r7, pc}
 8009da0:	200002bc 	.word	0x200002bc
 8009da4:	2000004c 	.word	0x2000004c

08009da8 <SCB_EnableICache>:
{
 8009da8:	b480      	push	{r7}
 8009daa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009dac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009db0:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8009db4:	4b0b      	ldr	r3, [pc, #44]	; (8009de4 <SCB_EnableICache+0x3c>)
 8009db6:	2200      	movs	r2, #0
 8009db8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8009dbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009dc0:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8009dc4:	4b07      	ldr	r3, [pc, #28]	; (8009de4 <SCB_EnableICache+0x3c>)
 8009dc6:	695b      	ldr	r3, [r3, #20]
 8009dc8:	4a06      	ldr	r2, [pc, #24]	; (8009de4 <SCB_EnableICache+0x3c>)
 8009dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8009dd0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009dd4:	f3bf 8f6f 	isb	sy
}
 8009dd8:	bf00      	nop
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop
 8009de4:	e000ed00 	.word	0xe000ed00

08009de8 <SCB_EnableDCache>:
{
 8009de8:	b480      	push	{r7}
 8009dea:	b085      	sub	sp, #20
 8009dec:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8009dee:	4b1d      	ldr	r3, [pc, #116]	; (8009e64 <SCB_EnableDCache+0x7c>)
 8009df0:	2200      	movs	r2, #0
 8009df2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8009df6:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8009dfa:	4b1a      	ldr	r3, [pc, #104]	; (8009e64 <SCB_EnableDCache+0x7c>)
 8009dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e00:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	0b5b      	lsrs	r3, r3, #13
 8009e06:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009e0a:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	08db      	lsrs	r3, r3, #3
 8009e10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e14:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	015a      	lsls	r2, r3, #5
 8009e1a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8009e1e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8009e20:	68ba      	ldr	r2, [r7, #8]
 8009e22:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8009e24:	490f      	ldr	r1, [pc, #60]	; (8009e64 <SCB_EnableDCache+0x7c>)
 8009e26:	4313      	orrs	r3, r2
 8009e28:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	1e5a      	subs	r2, r3, #1
 8009e30:	60ba      	str	r2, [r7, #8]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d1ef      	bne.n	8009e16 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	1e5a      	subs	r2, r3, #1
 8009e3a:	60fa      	str	r2, [r7, #12]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d1e5      	bne.n	8009e0c <SCB_EnableDCache+0x24>
 8009e40:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8009e44:	4b07      	ldr	r3, [pc, #28]	; (8009e64 <SCB_EnableDCache+0x7c>)
 8009e46:	695b      	ldr	r3, [r3, #20]
 8009e48:	4a06      	ldr	r2, [pc, #24]	; (8009e64 <SCB_EnableDCache+0x7c>)
 8009e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e4e:	6153      	str	r3, [r2, #20]
 8009e50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009e54:	f3bf 8f6f 	isb	sy
}
 8009e58:	bf00      	nop
 8009e5a:	3714      	adds	r7, #20
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr
 8009e64:	e000ed00 	.word	0xe000ed00

08009e68 <declencher_acquisition>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void declencher_acquisition(){
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	af00      	add	r7, sp, #0
	i=0;
 8009e6c:	4b03      	ldr	r3, [pc, #12]	; (8009e7c <declencher_acquisition+0x14>)
 8009e6e:	2200      	movs	r2, #0
 8009e70:	601a      	str	r2, [r3, #0]
	//HAL_ADC_Start(&hadc1);
	HAL_TIM_Base_Start_IT(&htim7);
 8009e72:	4803      	ldr	r0, [pc, #12]	; (8009e80 <declencher_acquisition+0x18>)
 8009e74:	f7fd ffac 	bl	8007dd0 <HAL_TIM_Base_Start_IT>
}
 8009e78:	bf00      	nop
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	200002e8 	.word	0x200002e8
 8009e80:	20002110 	.word	0x20002110

08009e84 <HAL_ADC_ConvCpltCallback>:

}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
//	if(display_buff_ptr >= PLOT_WIDTH)
//	{
//		display_ready = 1;
//		display_buff_ptr = 0;
//	}
	display_ready = 1;
 8009e8c:	4b04      	ldr	r3, [pc, #16]	; (8009ea0 <HAL_ADC_ConvCpltCallback+0x1c>)
 8009e8e:	2201      	movs	r2, #1
 8009e90:	701a      	strb	r2, [r3, #0]
	//display_buff[display_buff_ptr+10] = 10;
}
 8009e92:	bf00      	nop
 8009e94:	370c      	adds	r7, #12
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	200002f6 	.word	0x200002f6

08009ea4 <HAL_TIM_PeriodElapsedCallback>:
//__HAL_ADC_ENABLE(&_t_ADC1Handle);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM7)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a27      	ldr	r2, [pc, #156]	; (8009f50 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d140      	bne.n	8009f38 <HAL_TIM_PeriodElapsedCallback+0x94>
	{


		if (nb_acquisition==0){
 8009eb6:	4b27      	ldr	r3, [pc, #156]	; (8009f54 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d107      	bne.n	8009ece <HAL_TIM_PeriodElapsedCallback+0x2a>
				reference[i]=adc_last_value;
 8009ebe:	4b26      	ldr	r3, [pc, #152]	; (8009f58 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	4b26      	ldr	r3, [pc, #152]	; (8009f5c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	b2d1      	uxtb	r1, r2
 8009ec8:	4a25      	ldr	r2, [pc, #148]	; (8009f60 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8009eca:	54d1      	strb	r1, [r2, r3]
 8009ecc:	e01f      	b.n	8009f0e <HAL_TIM_PeriodElapsedCallback+0x6a>
		}else{
				comparaison[i]=adc_last_value;
 8009ece:	4b22      	ldr	r3, [pc, #136]	; (8009f58 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	4b22      	ldr	r3, [pc, #136]	; (8009f5c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	b2d1      	uxtb	r1, r2
 8009ed8:	4a22      	ldr	r2, [pc, #136]	; (8009f64 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8009eda:	54d1      	strb	r1, [r2, r3]

				/* Add value in buffer for displaying */
				display_buff[display_buff_ptr] = adc_last_value;
 8009edc:	4b1e      	ldr	r3, [pc, #120]	; (8009f58 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8009ede:	6819      	ldr	r1, [r3, #0]
 8009ee0:	4b21      	ldr	r3, [pc, #132]	; (8009f68 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8009ee2:	881b      	ldrh	r3, [r3, #0]
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	b2c9      	uxtb	r1, r1
 8009ee8:	4b20      	ldr	r3, [pc, #128]	; (8009f6c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8009eea:	5499      	strb	r1, [r3, r2]
				display_buff_ptr++;
 8009eec:	4b1e      	ldr	r3, [pc, #120]	; (8009f68 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8009eee:	881b      	ldrh	r3, [r3, #0]
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	b29a      	uxth	r2, r3
 8009ef4:	4b1c      	ldr	r3, [pc, #112]	; (8009f68 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8009ef6:	801a      	strh	r2, [r3, #0]

				/* Indicate display_buff ready for displaying */
				if( display_buff_ptr >= PLOT_WIDTH)
 8009ef8:	4b1b      	ldr	r3, [pc, #108]	; (8009f68 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8009efa:	881b      	ldrh	r3, [r3, #0]
 8009efc:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 8009f00:	d305      	bcc.n	8009f0e <HAL_TIM_PeriodElapsedCallback+0x6a>
				{
					display_buff_ptr = 0;
 8009f02:	4b19      	ldr	r3, [pc, #100]	; (8009f68 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8009f04:	2200      	movs	r2, #0
 8009f06:	801a      	strh	r2, [r3, #0]
					display_ready = 1;
 8009f08:	4b19      	ldr	r3, [pc, #100]	; (8009f70 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	701a      	strb	r2, [r3, #0]
					//HAL_TIM_Base_Stop_IT(&htim7);
				}

		}

		i++;
 8009f0e:	4b13      	ldr	r3, [pc, #76]	; (8009f5c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	3301      	adds	r3, #1
 8009f14:	4a11      	ldr	r2, [pc, #68]	; (8009f5c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8009f16:	6013      	str	r3, [r2, #0]
		if (i>= M_signal_pts){
 8009f18:	4b10      	ldr	r3, [pc, #64]	; (8009f5c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f20:	db11      	blt.n	8009f46 <HAL_TIM_PeriodElapsedCallback+0xa2>
			HAL_TIM_Base_Stop_IT(&htim7);
 8009f22:	4814      	ldr	r0, [pc, #80]	; (8009f74 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8009f24:	f7fd ff7e 	bl	8007e24 <HAL_TIM_Base_Stop_IT>
			//HAL_ADC_Stop(&hadc1);
			if (nb_acquisition>0){
				//crosscorrelation(reference,reference);
			}
			nb_acquisition++;
 8009f28:	4b0a      	ldr	r3, [pc, #40]	; (8009f54 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	4a09      	ldr	r2, [pc, #36]	; (8009f54 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8009f30:	6013      	str	r3, [r2, #0]
			declencher_acquisition();
 8009f32:	f7ff ff99 	bl	8009e68 <declencher_acquisition>
	}
	else if(htim->Instance==TIM3)
	{
		TouchScreen_Polling();
	}
}
 8009f36:	e006      	b.n	8009f46 <HAL_TIM_PeriodElapsedCallback+0xa2>
	else if(htim->Instance==TIM3)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a0e      	ldr	r2, [pc, #56]	; (8009f78 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d101      	bne.n	8009f46 <HAL_TIM_PeriodElapsedCallback+0xa2>
		TouchScreen_Polling();
 8009f42:	f7ff febf 	bl	8009cc4 <TouchScreen_Polling>
}
 8009f46:	bf00      	nop
 8009f48:	3708      	adds	r7, #8
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	40001400 	.word	0x40001400
 8009f54:	200002ec 	.word	0x200002ec
 8009f58:	200002f0 	.word	0x200002f0
 8009f5c:	200002e8 	.word	0x200002e8
 8009f60:	200005dc 	.word	0x200005dc
 8009f64:	200003dc 	.word	0x200003dc
 8009f68:	200002f4 	.word	0x200002f4
 8009f6c:	20001ee4 	.word	0x20001ee4
 8009f70:	200002f6 	.word	0x200002f6
 8009f74:	20002110 	.word	0x20002110
 8009f78:	40000400 	.word	0x40000400

08009f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8009f80:	f7ff ff12 	bl	8009da8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8009f84:	f7ff ff30 	bl	8009de8 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009f88:	f7f8 f96a 	bl	8002260 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009f8c:	f000 f84c 	bl	800a028 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009f90:	f000 fc5a 	bl	800a848 <MX_GPIO_Init>
  MX_DMA_Init();
 8009f94:	f000 fbea 	bl	800a76c <MX_DMA_Init>
  MX_DCMI_Init();
 8009f98:	f000 f948 	bl	800a22c <MX_DCMI_Init>
  MX_DMA2D_Init();
 8009f9c:	f000 f97a 	bl	800a294 <MX_DMA2D_Init>
  MX_FMC_Init();
 8009fa0:	f000 fc02 	bl	800a7a8 <MX_FMC_Init>
  MX_LTDC_Init();
 8009fa4:	f000 f9a8 	bl	800a2f8 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8009fa8:	f000 fa28 	bl	800a3fc <MX_QUADSPI_Init>
  MX_RTC_Init();
 8009fac:	f000 fa52 	bl	800a454 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8009fb0:	f000 faf8 	bl	800a5a4 <MX_SDMMC1_SD_Init>
  MX_USART1_UART_Init();
 8009fb4:	f000 fbaa 	bl	800a70c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8009fb8:	f000 f8e4 	bl	800a184 <MX_ADC1_Init>
  MX_TIM7_Init();
 8009fbc:	f000 fb70 	bl	800a6a0 <MX_TIM7_Init>
  MX_TIM3_Init();
 8009fc0:	f000 fb20 	bl	800a604 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  Init_Display();
 8009fc4:	f7ff fcba 	bl	800993c <Init_Display>
  /* Draw Bitmap */
  //BSP_LCD_DrawBitmap((BSP_LCD_GetXSize() - 80) / 2, 65, (uint8_t *)stlogo);

  Display_Render();
 8009fc8:	f7ff fce2 	bl	8009990 <Display_Render>
  Draw_GUI();
 8009fcc:	f7ff fd06 	bl	80099dc <Draw_GUI>

  /* Periodic Check of touchscreen) */
  HAL_TIM_Base_Start_IT(&htim3);
 8009fd0:	4811      	ldr	r0, [pc, #68]	; (800a018 <main+0x9c>)
 8009fd2:	f7fd fefd 	bl	8007dd0 <HAL_TIM_Base_Start_IT>

  HAL_ADC_Start(&hadc1);
 8009fd6:	4811      	ldr	r0, [pc, #68]	; (800a01c <main+0xa0>)
 8009fd8:	f7f8 fa06 	bl	80023e8 <HAL_ADC_Start>
  if(HAL_ADC_Start_DMA(&hadc1, &display_buff, PLOT_WIDTH) != HAL_OK)
 8009fdc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009fe0:	490f      	ldr	r1, [pc, #60]	; (800a020 <main+0xa4>)
 8009fe2:	480e      	ldr	r0, [pc, #56]	; (800a01c <main+0xa0>)
 8009fe4:	f7f8 fc02 	bl	80027ec <HAL_ADC_Start_DMA>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d001      	beq.n	8009ff2 <main+0x76>
  {
	  return 0;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	e00f      	b.n	800a012 <main+0x96>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	if(display_ready == 1)
 8009ff2:	4b0c      	ldr	r3, [pc, #48]	; (800a024 <main+0xa8>)
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d107      	bne.n	800a00a <main+0x8e>
	{
		//Plot_Signal( (corr_func + (corr_max_abs-200)), 400);
		Plot_Signal( display_buff , DISPLAY_BUFF_SIZE);
 8009ffa:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8009ffe:	4808      	ldr	r0, [pc, #32]	; (800a020 <main+0xa4>)
 800a000:	f7ff fdb2 	bl	8009b68 <Plot_Signal>
		display_ready = 0;
 800a004:	4b07      	ldr	r3, [pc, #28]	; (800a024 <main+0xa8>)
 800a006:	2200      	movs	r2, #0
 800a008:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(50);
 800a00a:	2032      	movs	r0, #50	; 0x32
 800a00c:	f7f8 f986 	bl	800231c <HAL_Delay>
	if(display_ready == 1)
 800a010:	e7ef      	b.n	8009ff2 <main+0x76>
  }
  /* USER CODE END 3 */
}
 800a012:	4618      	mov	r0, r3
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	20000864 	.word	0x20000864
 800a01c:	20000d4c 	.word	0x20000d4c
 800a020:	20001ee4 	.word	0x20001ee4
 800a024:	200002f6 	.word	0x200002f6

0800a028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b0b4      	sub	sp, #208	; 0xd0
 800a02c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a02e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800a032:	2230      	movs	r2, #48	; 0x30
 800a034:	2100      	movs	r1, #0
 800a036:	4618      	mov	r0, r3
 800a038:	f001 fca4 	bl	800b984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a03c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a040:	2200      	movs	r2, #0
 800a042:	601a      	str	r2, [r3, #0]
 800a044:	605a      	str	r2, [r3, #4]
 800a046:	609a      	str	r2, [r3, #8]
 800a048:	60da      	str	r2, [r3, #12]
 800a04a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a04c:	f107 0308 	add.w	r3, r7, #8
 800a050:	2284      	movs	r2, #132	; 0x84
 800a052:	2100      	movs	r1, #0
 800a054:	4618      	mov	r0, r3
 800a056:	f001 fc95 	bl	800b984 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800a05a:	f7fb fae9 	bl	8005630 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a05e:	4b46      	ldr	r3, [pc, #280]	; (800a178 <SystemClock_Config+0x150>)
 800a060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a062:	4a45      	ldr	r2, [pc, #276]	; (800a178 <SystemClock_Config+0x150>)
 800a064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a068:	6413      	str	r3, [r2, #64]	; 0x40
 800a06a:	4b43      	ldr	r3, [pc, #268]	; (800a178 <SystemClock_Config+0x150>)
 800a06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a072:	607b      	str	r3, [r7, #4]
 800a074:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a076:	4b41      	ldr	r3, [pc, #260]	; (800a17c <SystemClock_Config+0x154>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a40      	ldr	r2, [pc, #256]	; (800a17c <SystemClock_Config+0x154>)
 800a07c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a080:	6013      	str	r3, [r2, #0]
 800a082:	4b3e      	ldr	r3, [pc, #248]	; (800a17c <SystemClock_Config+0x154>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a08a:	603b      	str	r3, [r7, #0]
 800a08c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800a08e:	2309      	movs	r3, #9
 800a090:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a094:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a098:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800a09c:	2301      	movs	r3, #1
 800a09e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a0a2:	2302      	movs	r3, #2
 800a0a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a0a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a0ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800a0b0:	2319      	movs	r3, #25
 800a0b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800a0b6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800a0ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a0be:	2302      	movs	r3, #2
 800a0c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800a0c4:	2309      	movs	r3, #9
 800a0c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a0ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7fb fbde 	bl	8005890 <HAL_RCC_OscConfig>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d001      	beq.n	800a0de <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800a0da:	f000 fea1 	bl	800ae20 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800a0de:	f7fb fab7 	bl	8005650 <HAL_PWREx_EnableOverDrive>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d001      	beq.n	800a0ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800a0e8:	f000 fe9a 	bl	800ae20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a0ec:	230f      	movs	r3, #15
 800a0ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a0f2:	2302      	movs	r3, #2
 800a0f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a0fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a102:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a10a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800a10e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a112:	2106      	movs	r1, #6
 800a114:	4618      	mov	r0, r3
 800a116:	f7fb fe2b 	bl	8005d70 <HAL_RCC_ClockConfig>
 800a11a:	4603      	mov	r3, r0
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d001      	beq.n	800a124 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800a120:	f000 fe7e 	bl	800ae20 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 800a124:	4b16      	ldr	r3, [pc, #88]	; (800a180 <SystemClock_Config+0x158>)
 800a126:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800a128:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800a12c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800a12e:	2305      	movs	r3, #5
 800a130:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800a132:	2302      	movs	r3, #2
 800a134:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800a136:	2303      	movs	r3, #3
 800a138:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800a13a:	2301      	movs	r3, #1
 800a13c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800a13e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a142:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800a144:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a148:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800a14a:	2300      	movs	r3, #0
 800a14c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800a14e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a152:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800a156:	2300      	movs	r3, #0
 800a158:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a15c:	f107 0308 	add.w	r3, r7, #8
 800a160:	4618      	mov	r0, r3
 800a162:	f7fb ffd3 	bl	800610c <HAL_RCCEx_PeriphCLKConfig>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d001      	beq.n	800a170 <SystemClock_Config+0x148>
  {
    Error_Handler();
 800a16c:	f000 fe58 	bl	800ae20 <Error_Handler>
  }
}
 800a170:	bf00      	nop
 800a172:	37d0      	adds	r7, #208	; 0xd0
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	40023800 	.word	0x40023800
 800a17c:	40007000 	.word	0x40007000
 800a180:	00a00068 	.word	0x00a00068

0800a184 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a18a:	463b      	mov	r3, r7
 800a18c:	2200      	movs	r2, #0
 800a18e:	601a      	str	r2, [r3, #0]
 800a190:	605a      	str	r2, [r3, #4]
 800a192:	609a      	str	r2, [r3, #8]
 800a194:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800a196:	4b22      	ldr	r3, [pc, #136]	; (800a220 <MX_ADC1_Init+0x9c>)
 800a198:	4a22      	ldr	r2, [pc, #136]	; (800a224 <MX_ADC1_Init+0xa0>)
 800a19a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800a19c:	4b20      	ldr	r3, [pc, #128]	; (800a220 <MX_ADC1_Init+0x9c>)
 800a19e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a1a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800a1a4:	4b1e      	ldr	r3, [pc, #120]	; (800a220 <MX_ADC1_Init+0x9c>)
 800a1a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a1aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800a1ac:	4b1c      	ldr	r3, [pc, #112]	; (800a220 <MX_ADC1_Init+0x9c>)
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800a1b2:	4b1b      	ldr	r3, [pc, #108]	; (800a220 <MX_ADC1_Init+0x9c>)
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a1b8:	4b19      	ldr	r3, [pc, #100]	; (800a220 <MX_ADC1_Init+0x9c>)
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a1c0:	4b17      	ldr	r3, [pc, #92]	; (800a220 <MX_ADC1_Init+0x9c>)
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a1c6:	4b16      	ldr	r3, [pc, #88]	; (800a220 <MX_ADC1_Init+0x9c>)
 800a1c8:	4a17      	ldr	r2, [pc, #92]	; (800a228 <MX_ADC1_Init+0xa4>)
 800a1ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a1cc:	4b14      	ldr	r3, [pc, #80]	; (800a220 <MX_ADC1_Init+0x9c>)
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800a1d2:	4b13      	ldr	r3, [pc, #76]	; (800a220 <MX_ADC1_Init+0x9c>)
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800a1d8:	4b11      	ldr	r3, [pc, #68]	; (800a220 <MX_ADC1_Init+0x9c>)
 800a1da:	2201      	movs	r2, #1
 800a1dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800a1e0:	4b0f      	ldr	r3, [pc, #60]	; (800a220 <MX_ADC1_Init+0x9c>)
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a1e6:	480e      	ldr	r0, [pc, #56]	; (800a220 <MX_ADC1_Init+0x9c>)
 800a1e8:	f7f8 f8ba 	bl	8002360 <HAL_ADC_Init>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d001      	beq.n	800a1f6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800a1f2:	f000 fe15 	bl	800ae20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800a1fe:	2300      	movs	r3, #0
 800a200:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a202:	463b      	mov	r3, r7
 800a204:	4619      	mov	r1, r3
 800a206:	4806      	ldr	r0, [pc, #24]	; (800a220 <MX_ADC1_Init+0x9c>)
 800a208:	f7f8 fbfc 	bl	8002a04 <HAL_ADC_ConfigChannel>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d001      	beq.n	800a216 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800a212:	f000 fe05 	bl	800ae20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800a216:	bf00      	nop
 800a218:	3710      	adds	r7, #16
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	20000d4c 	.word	0x20000d4c
 800a224:	40012000 	.word	0x40012000
 800a228:	0f000001 	.word	0x0f000001

0800a22c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800a230:	4b16      	ldr	r3, [pc, #88]	; (800a28c <MX_DCMI_Init+0x60>)
 800a232:	4a17      	ldr	r2, [pc, #92]	; (800a290 <MX_DCMI_Init+0x64>)
 800a234:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800a236:	4b15      	ldr	r3, [pc, #84]	; (800a28c <MX_DCMI_Init+0x60>)
 800a238:	2200      	movs	r2, #0
 800a23a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800a23c:	4b13      	ldr	r3, [pc, #76]	; (800a28c <MX_DCMI_Init+0x60>)
 800a23e:	2200      	movs	r2, #0
 800a240:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800a242:	4b12      	ldr	r3, [pc, #72]	; (800a28c <MX_DCMI_Init+0x60>)
 800a244:	2200      	movs	r2, #0
 800a246:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800a248:	4b10      	ldr	r3, [pc, #64]	; (800a28c <MX_DCMI_Init+0x60>)
 800a24a:	2200      	movs	r2, #0
 800a24c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800a24e:	4b0f      	ldr	r3, [pc, #60]	; (800a28c <MX_DCMI_Init+0x60>)
 800a250:	2200      	movs	r2, #0
 800a252:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800a254:	4b0d      	ldr	r3, [pc, #52]	; (800a28c <MX_DCMI_Init+0x60>)
 800a256:	2200      	movs	r2, #0
 800a258:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800a25a:	4b0c      	ldr	r3, [pc, #48]	; (800a28c <MX_DCMI_Init+0x60>)
 800a25c:	2200      	movs	r2, #0
 800a25e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800a260:	4b0a      	ldr	r3, [pc, #40]	; (800a28c <MX_DCMI_Init+0x60>)
 800a262:	2200      	movs	r2, #0
 800a264:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800a266:	4b09      	ldr	r3, [pc, #36]	; (800a28c <MX_DCMI_Init+0x60>)
 800a268:	2200      	movs	r2, #0
 800a26a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800a26c:	4b07      	ldr	r3, [pc, #28]	; (800a28c <MX_DCMI_Init+0x60>)
 800a26e:	2200      	movs	r2, #0
 800a270:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800a272:	4b06      	ldr	r3, [pc, #24]	; (800a28c <MX_DCMI_Init+0x60>)
 800a274:	2200      	movs	r2, #0
 800a276:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800a278:	4804      	ldr	r0, [pc, #16]	; (800a28c <MX_DCMI_Init+0x60>)
 800a27a:	f7f8 ff8f 	bl	800319c <HAL_DCMI_Init>
 800a27e:	4603      	mov	r3, r0
 800a280:	2b00      	cmp	r3, #0
 800a282:	d001      	beq.n	800a288 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 800a284:	f000 fdcc 	bl	800ae20 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800a288:	bf00      	nop
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	20000d94 	.word	0x20000d94
 800a290:	50050000 	.word	0x50050000

0800a294 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800a298:	4b15      	ldr	r3, [pc, #84]	; (800a2f0 <MX_DMA2D_Init+0x5c>)
 800a29a:	4a16      	ldr	r2, [pc, #88]	; (800a2f4 <MX_DMA2D_Init+0x60>)
 800a29c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800a29e:	4b14      	ldr	r3, [pc, #80]	; (800a2f0 <MX_DMA2D_Init+0x5c>)
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800a2a4:	4b12      	ldr	r3, [pc, #72]	; (800a2f0 <MX_DMA2D_Init+0x5c>)
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800a2aa:	4b11      	ldr	r3, [pc, #68]	; (800a2f0 <MX_DMA2D_Init+0x5c>)
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800a2b0:	4b0f      	ldr	r3, [pc, #60]	; (800a2f0 <MX_DMA2D_Init+0x5c>)
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800a2b6:	4b0e      	ldr	r3, [pc, #56]	; (800a2f0 <MX_DMA2D_Init+0x5c>)
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800a2bc:	4b0c      	ldr	r3, [pc, #48]	; (800a2f0 <MX_DMA2D_Init+0x5c>)
 800a2be:	2200      	movs	r2, #0
 800a2c0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800a2c2:	4b0b      	ldr	r3, [pc, #44]	; (800a2f0 <MX_DMA2D_Init+0x5c>)
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800a2c8:	4809      	ldr	r0, [pc, #36]	; (800a2f0 <MX_DMA2D_Init+0x5c>)
 800a2ca:	f7f9 fbad 	bl	8003a28 <HAL_DMA2D_Init>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d001      	beq.n	800a2d8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800a2d4:	f000 fda4 	bl	800ae20 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800a2d8:	2101      	movs	r1, #1
 800a2da:	4805      	ldr	r0, [pc, #20]	; (800a2f0 <MX_DMA2D_Init+0x5c>)
 800a2dc:	f7f9 fe12 	bl	8003f04 <HAL_DMA2D_ConfigLayer>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d001      	beq.n	800a2ea <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800a2e6:	f000 fd9b 	bl	800ae20 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800a2ea:	bf00      	nop
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	2000209c 	.word	0x2000209c
 800a2f4:	4002b000 	.word	0x4002b000

0800a2f8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b08e      	sub	sp, #56	; 0x38
 800a2fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800a2fe:	1d3b      	adds	r3, r7, #4
 800a300:	2234      	movs	r2, #52	; 0x34
 800a302:	2100      	movs	r1, #0
 800a304:	4618      	mov	r0, r3
 800a306:	f001 fb3d 	bl	800b984 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800a30a:	4b3a      	ldr	r3, [pc, #232]	; (800a3f4 <MX_LTDC_Init+0xfc>)
 800a30c:	4a3a      	ldr	r2, [pc, #232]	; (800a3f8 <MX_LTDC_Init+0x100>)
 800a30e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800a310:	4b38      	ldr	r3, [pc, #224]	; (800a3f4 <MX_LTDC_Init+0xfc>)
 800a312:	2200      	movs	r2, #0
 800a314:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800a316:	4b37      	ldr	r3, [pc, #220]	; (800a3f4 <MX_LTDC_Init+0xfc>)
 800a318:	2200      	movs	r2, #0
 800a31a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800a31c:	4b35      	ldr	r3, [pc, #212]	; (800a3f4 <MX_LTDC_Init+0xfc>)
 800a31e:	2200      	movs	r2, #0
 800a320:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800a322:	4b34      	ldr	r3, [pc, #208]	; (800a3f4 <MX_LTDC_Init+0xfc>)
 800a324:	2200      	movs	r2, #0
 800a326:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800a328:	4b32      	ldr	r3, [pc, #200]	; (800a3f4 <MX_LTDC_Init+0xfc>)
 800a32a:	2228      	movs	r2, #40	; 0x28
 800a32c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800a32e:	4b31      	ldr	r3, [pc, #196]	; (800a3f4 <MX_LTDC_Init+0xfc>)
 800a330:	2209      	movs	r2, #9
 800a332:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800a334:	4b2f      	ldr	r3, [pc, #188]	; (800a3f4 <MX_LTDC_Init+0xfc>)
 800a336:	2235      	movs	r2, #53	; 0x35
 800a338:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800a33a:	4b2e      	ldr	r3, [pc, #184]	; (800a3f4 <MX_LTDC_Init+0xfc>)
 800a33c:	220b      	movs	r2, #11
 800a33e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800a340:	4b2c      	ldr	r3, [pc, #176]	; (800a3f4 <MX_LTDC_Init+0xfc>)
 800a342:	f240 2215 	movw	r2, #533	; 0x215
 800a346:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800a348:	4b2a      	ldr	r3, [pc, #168]	; (800a3f4 <MX_LTDC_Init+0xfc>)
 800a34a:	f240 121b 	movw	r2, #283	; 0x11b
 800a34e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800a350:	4b28      	ldr	r3, [pc, #160]	; (800a3f4 <MX_LTDC_Init+0xfc>)
 800a352:	f240 2235 	movw	r2, #565	; 0x235
 800a356:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800a358:	4b26      	ldr	r3, [pc, #152]	; (800a3f4 <MX_LTDC_Init+0xfc>)
 800a35a:	f240 121d 	movw	r2, #285	; 0x11d
 800a35e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800a360:	4b24      	ldr	r3, [pc, #144]	; (800a3f4 <MX_LTDC_Init+0xfc>)
 800a362:	2200      	movs	r2, #0
 800a364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800a368:	4b22      	ldr	r3, [pc, #136]	; (800a3f4 <MX_LTDC_Init+0xfc>)
 800a36a:	2200      	movs	r2, #0
 800a36c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800a370:	4b20      	ldr	r3, [pc, #128]	; (800a3f4 <MX_LTDC_Init+0xfc>)
 800a372:	2200      	movs	r2, #0
 800a374:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800a378:	481e      	ldr	r0, [pc, #120]	; (800a3f4 <MX_LTDC_Init+0xfc>)
 800a37a:	f7fa fde1 	bl	8004f40 <HAL_LTDC_Init>
 800a37e:	4603      	mov	r3, r0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d001      	beq.n	800a388 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800a384:	f000 fd4c 	bl	800ae20 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800a388:	2300      	movs	r3, #0
 800a38a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800a38c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800a390:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800a392:	2300      	movs	r3, #0
 800a394:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800a396:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a39a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800a39c:	2302      	movs	r3, #2
 800a39e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800a3a0:	23ff      	movs	r3, #255	; 0xff
 800a3a2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800a3a8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a3ac:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800a3ae:	2307      	movs	r3, #7
 800a3b0:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800a3b2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800a3b6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800a3b8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800a3bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800a3be:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a3c2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800a3d6:	1d3b      	adds	r3, r7, #4
 800a3d8:	2200      	movs	r2, #0
 800a3da:	4619      	mov	r1, r3
 800a3dc:	4805      	ldr	r0, [pc, #20]	; (800a3f4 <MX_LTDC_Init+0xfc>)
 800a3de:	f7fa ff41 	bl	8005264 <HAL_LTDC_ConfigLayer>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d001      	beq.n	800a3ec <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800a3e8:	f000 fd1a 	bl	800ae20 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800a3ec:	bf00      	nop
 800a3ee:	3738      	adds	r7, #56	; 0x38
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	200008a4 	.word	0x200008a4
 800a3f8:	40016800 	.word	0x40016800

0800a3fc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800a400:	4b12      	ldr	r3, [pc, #72]	; (800a44c <MX_QUADSPI_Init+0x50>)
 800a402:	4a13      	ldr	r2, [pc, #76]	; (800a450 <MX_QUADSPI_Init+0x54>)
 800a404:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800a406:	4b11      	ldr	r3, [pc, #68]	; (800a44c <MX_QUADSPI_Init+0x50>)
 800a408:	22ff      	movs	r2, #255	; 0xff
 800a40a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800a40c:	4b0f      	ldr	r3, [pc, #60]	; (800a44c <MX_QUADSPI_Init+0x50>)
 800a40e:	2201      	movs	r2, #1
 800a410:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800a412:	4b0e      	ldr	r3, [pc, #56]	; (800a44c <MX_QUADSPI_Init+0x50>)
 800a414:	2200      	movs	r2, #0
 800a416:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800a418:	4b0c      	ldr	r3, [pc, #48]	; (800a44c <MX_QUADSPI_Init+0x50>)
 800a41a:	2201      	movs	r2, #1
 800a41c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800a41e:	4b0b      	ldr	r3, [pc, #44]	; (800a44c <MX_QUADSPI_Init+0x50>)
 800a420:	2200      	movs	r2, #0
 800a422:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800a424:	4b09      	ldr	r3, [pc, #36]	; (800a44c <MX_QUADSPI_Init+0x50>)
 800a426:	2200      	movs	r2, #0
 800a428:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800a42a:	4b08      	ldr	r3, [pc, #32]	; (800a44c <MX_QUADSPI_Init+0x50>)
 800a42c:	2200      	movs	r2, #0
 800a42e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800a430:	4b06      	ldr	r3, [pc, #24]	; (800a44c <MX_QUADSPI_Init+0x50>)
 800a432:	2200      	movs	r2, #0
 800a434:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800a436:	4805      	ldr	r0, [pc, #20]	; (800a44c <MX_QUADSPI_Init+0x50>)
 800a438:	f7fb f95a 	bl	80056f0 <HAL_QSPI_Init>
 800a43c:	4603      	mov	r3, r0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d001      	beq.n	800a446 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800a442:	f000 fced 	bl	800ae20 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800a446:	bf00      	nop
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	20002150 	.word	0x20002150
 800a450:	a0001000 	.word	0xa0001000

0800a454 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b092      	sub	sp, #72	; 0x48
 800a458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800a45a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a45e:	2200      	movs	r2, #0
 800a460:	601a      	str	r2, [r3, #0]
 800a462:	605a      	str	r2, [r3, #4]
 800a464:	609a      	str	r2, [r3, #8]
 800a466:	60da      	str	r2, [r3, #12]
 800a468:	611a      	str	r2, [r3, #16]
 800a46a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 800a46c:	2300      	movs	r3, #0
 800a46e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 800a470:	463b      	mov	r3, r7
 800a472:	222c      	movs	r2, #44	; 0x2c
 800a474:	2100      	movs	r1, #0
 800a476:	4618      	mov	r0, r3
 800a478:	f001 fa84 	bl	800b984 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800a47c:	4b47      	ldr	r3, [pc, #284]	; (800a59c <MX_RTC_Init+0x148>)
 800a47e:	4a48      	ldr	r2, [pc, #288]	; (800a5a0 <MX_RTC_Init+0x14c>)
 800a480:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800a482:	4b46      	ldr	r3, [pc, #280]	; (800a59c <MX_RTC_Init+0x148>)
 800a484:	2200      	movs	r2, #0
 800a486:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800a488:	4b44      	ldr	r3, [pc, #272]	; (800a59c <MX_RTC_Init+0x148>)
 800a48a:	227f      	movs	r2, #127	; 0x7f
 800a48c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800a48e:	4b43      	ldr	r3, [pc, #268]	; (800a59c <MX_RTC_Init+0x148>)
 800a490:	22ff      	movs	r2, #255	; 0xff
 800a492:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a494:	4b41      	ldr	r3, [pc, #260]	; (800a59c <MX_RTC_Init+0x148>)
 800a496:	2200      	movs	r2, #0
 800a498:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a49a:	4b40      	ldr	r3, [pc, #256]	; (800a59c <MX_RTC_Init+0x148>)
 800a49c:	2200      	movs	r2, #0
 800a49e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a4a0:	4b3e      	ldr	r3, [pc, #248]	; (800a59c <MX_RTC_Init+0x148>)
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a4a6:	483d      	ldr	r0, [pc, #244]	; (800a59c <MX_RTC_Init+0x148>)
 800a4a8:	f7fc fa1e 	bl	80068e8 <HAL_RTC_Init>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d001      	beq.n	800a4b6 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800a4b2:	f000 fcb5 	bl	800ae20 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800a4d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	4830      	ldr	r0, [pc, #192]	; (800a59c <MX_RTC_Init+0x148>)
 800a4da:	f7fc fa81 	bl	80069e0 <HAL_RTC_SetTime>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d001      	beq.n	800a4e8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 800a4e4:	f000 fc9c 	bl	800ae20 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800a500:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a504:	2201      	movs	r2, #1
 800a506:	4619      	mov	r1, r3
 800a508:	4824      	ldr	r0, [pc, #144]	; (800a59c <MX_RTC_Init+0x148>)
 800a50a:	f7fc fb27 	bl	8006b5c <HAL_RTC_SetDate>
 800a50e:	4603      	mov	r3, r0
 800a510:	2b00      	cmp	r3, #0
 800a512:	d001      	beq.n	800a518 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 800a514:	f000 fc84 	bl	800ae20 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800a518:	2300      	movs	r3, #0
 800a51a:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800a51c:	2300      	movs	r3, #0
 800a51e:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800a520:	2300      	movs	r3, #0
 800a522:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800a524:	2300      	movs	r3, #0
 800a526:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a528:	2300      	movs	r3, #0
 800a52a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a52c:	2300      	movs	r3, #0
 800a52e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800a530:	2300      	movs	r3, #0
 800a532:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800a534:	2300      	movs	r3, #0
 800a536:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800a538:	2300      	movs	r3, #0
 800a53a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 800a53c:	2301      	movs	r3, #1
 800a53e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800a542:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a546:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800a548:	463b      	mov	r3, r7
 800a54a:	2201      	movs	r2, #1
 800a54c:	4619      	mov	r1, r3
 800a54e:	4813      	ldr	r0, [pc, #76]	; (800a59c <MX_RTC_Init+0x148>)
 800a550:	f7fc fbac 	bl	8006cac <HAL_RTC_SetAlarm>
 800a554:	4603      	mov	r3, r0
 800a556:	2b00      	cmp	r3, #0
 800a558:	d001      	beq.n	800a55e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800a55a:	f000 fc61 	bl	800ae20 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 800a55e:	2301      	movs	r3, #1
 800a560:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 800a564:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a568:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800a56a:	463b      	mov	r3, r7
 800a56c:	2201      	movs	r2, #1
 800a56e:	4619      	mov	r1, r3
 800a570:	480a      	ldr	r0, [pc, #40]	; (800a59c <MX_RTC_Init+0x148>)
 800a572:	f7fc fb9b 	bl	8006cac <HAL_RTC_SetAlarm>
 800a576:	4603      	mov	r3, r0
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d001      	beq.n	800a580 <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 800a57c:	f000 fc50 	bl	800ae20 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800a580:	2202      	movs	r2, #2
 800a582:	2100      	movs	r1, #0
 800a584:	4805      	ldr	r0, [pc, #20]	; (800a59c <MX_RTC_Init+0x148>)
 800a586:	f7fc fd1b 	bl	8006fc0 <HAL_RTCEx_SetTimeStamp>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d001      	beq.n	800a594 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 800a590:	f000 fc46 	bl	800ae20 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800a594:	bf00      	nop
 800a596:	3748      	adds	r7, #72	; 0x48
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	20000ec8 	.word	0x20000ec8
 800a5a0:	40002800 	.word	0x40002800

0800a5a4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800a5a8:	4b14      	ldr	r3, [pc, #80]	; (800a5fc <MX_SDMMC1_SD_Init+0x58>)
 800a5aa:	4a15      	ldr	r2, [pc, #84]	; (800a600 <MX_SDMMC1_SD_Init+0x5c>)
 800a5ac:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800a5ae:	4b13      	ldr	r3, [pc, #76]	; (800a5fc <MX_SDMMC1_SD_Init+0x58>)
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800a5b4:	4b11      	ldr	r3, [pc, #68]	; (800a5fc <MX_SDMMC1_SD_Init+0x58>)
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a5ba:	4b10      	ldr	r3, [pc, #64]	; (800a5fc <MX_SDMMC1_SD_Init+0x58>)
 800a5bc:	2200      	movs	r2, #0
 800a5be:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800a5c0:	4b0e      	ldr	r3, [pc, #56]	; (800a5fc <MX_SDMMC1_SD_Init+0x58>)
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a5c6:	4b0d      	ldr	r3, [pc, #52]	; (800a5fc <MX_SDMMC1_SD_Init+0x58>)
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800a5cc:	4b0b      	ldr	r3, [pc, #44]	; (800a5fc <MX_SDMMC1_SD_Init+0x58>)
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800a5d2:	480a      	ldr	r0, [pc, #40]	; (800a5fc <MX_SDMMC1_SD_Init+0x58>)
 800a5d4:	f7fc fd4a 	bl	800706c <HAL_SD_Init>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d001      	beq.n	800a5e2 <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 800a5de:	f000 fc1f 	bl	800ae20 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800a5e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a5e6:	4805      	ldr	r0, [pc, #20]	; (800a5fc <MX_SDMMC1_SD_Init+0x58>)
 800a5e8:	f7fc fff7 	bl	80075da <HAL_SD_ConfigWideBusOperation>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d001      	beq.n	800a5f6 <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 800a5f2:	f000 fc15 	bl	800ae20 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800a5f6:	bf00      	nop
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	200007dc 	.word	0x200007dc
 800a600:	40012c00 	.word	0x40012c00

0800a604 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b088      	sub	sp, #32
 800a608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a60a:	f107 0310 	add.w	r3, r7, #16
 800a60e:	2200      	movs	r2, #0
 800a610:	601a      	str	r2, [r3, #0]
 800a612:	605a      	str	r2, [r3, #4]
 800a614:	609a      	str	r2, [r3, #8]
 800a616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a618:	1d3b      	adds	r3, r7, #4
 800a61a:	2200      	movs	r2, #0
 800a61c:	601a      	str	r2, [r3, #0]
 800a61e:	605a      	str	r2, [r3, #4]
 800a620:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a622:	4b1d      	ldr	r3, [pc, #116]	; (800a698 <MX_TIM3_Init+0x94>)
 800a624:	4a1d      	ldr	r2, [pc, #116]	; (800a69c <MX_TIM3_Init+0x98>)
 800a626:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 199;
 800a628:	4b1b      	ldr	r3, [pc, #108]	; (800a698 <MX_TIM3_Init+0x94>)
 800a62a:	22c7      	movs	r2, #199	; 0xc7
 800a62c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a62e:	4b1a      	ldr	r3, [pc, #104]	; (800a698 <MX_TIM3_Init+0x94>)
 800a630:	2200      	movs	r2, #0
 800a632:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800a634:	4b18      	ldr	r3, [pc, #96]	; (800a698 <MX_TIM3_Init+0x94>)
 800a636:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800a63a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a63c:	4b16      	ldr	r3, [pc, #88]	; (800a698 <MX_TIM3_Init+0x94>)
 800a63e:	2200      	movs	r2, #0
 800a640:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a642:	4b15      	ldr	r3, [pc, #84]	; (800a698 <MX_TIM3_Init+0x94>)
 800a644:	2200      	movs	r2, #0
 800a646:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800a648:	4813      	ldr	r0, [pc, #76]	; (800a698 <MX_TIM3_Init+0x94>)
 800a64a:	f7fd fb95 	bl	8007d78 <HAL_TIM_Base_Init>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d001      	beq.n	800a658 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800a654:	f000 fbe4 	bl	800ae20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a65c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800a65e:	f107 0310 	add.w	r3, r7, #16
 800a662:	4619      	mov	r1, r3
 800a664:	480c      	ldr	r0, [pc, #48]	; (800a698 <MX_TIM3_Init+0x94>)
 800a666:	f7fd fd27 	bl	80080b8 <HAL_TIM_ConfigClockSource>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d001      	beq.n	800a674 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800a670:	f000 fbd6 	bl	800ae20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a674:	2300      	movs	r3, #0
 800a676:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a678:	2300      	movs	r3, #0
 800a67a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a67c:	1d3b      	adds	r3, r7, #4
 800a67e:	4619      	mov	r1, r3
 800a680:	4805      	ldr	r0, [pc, #20]	; (800a698 <MX_TIM3_Init+0x94>)
 800a682:	f7fd ff35 	bl	80084f0 <HAL_TIMEx_MasterConfigSynchronization>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d001      	beq.n	800a690 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800a68c:	f000 fbc8 	bl	800ae20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800a690:	bf00      	nop
 800a692:	3720      	adds	r7, #32
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}
 800a698:	20000864 	.word	0x20000864
 800a69c:	40000400 	.word	0x40000400

0800a6a0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a6a6:	1d3b      	adds	r3, r7, #4
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	601a      	str	r2, [r3, #0]
 800a6ac:	605a      	str	r2, [r3, #4]
 800a6ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800a6b0:	4b14      	ldr	r3, [pc, #80]	; (800a704 <MX_TIM7_Init+0x64>)
 800a6b2:	4a15      	ldr	r2, [pc, #84]	; (800a708 <MX_TIM7_Init+0x68>)
 800a6b4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800a6b6:	4b13      	ldr	r3, [pc, #76]	; (800a704 <MX_TIM7_Init+0x64>)
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a6bc:	4b11      	ldr	r3, [pc, #68]	; (800a704 <MX_TIM7_Init+0x64>)
 800a6be:	2200      	movs	r2, #0
 800a6c0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4165;
 800a6c2:	4b10      	ldr	r3, [pc, #64]	; (800a704 <MX_TIM7_Init+0x64>)
 800a6c4:	f241 0245 	movw	r2, #4165	; 0x1045
 800a6c8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800a6ca:	4b0e      	ldr	r3, [pc, #56]	; (800a704 <MX_TIM7_Init+0x64>)
 800a6cc:	2280      	movs	r2, #128	; 0x80
 800a6ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800a6d0:	480c      	ldr	r0, [pc, #48]	; (800a704 <MX_TIM7_Init+0x64>)
 800a6d2:	f7fd fb51 	bl	8007d78 <HAL_TIM_Base_Init>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d001      	beq.n	800a6e0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800a6dc:	f000 fba0 	bl	800ae20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800a6e8:	1d3b      	adds	r3, r7, #4
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	4805      	ldr	r0, [pc, #20]	; (800a704 <MX_TIM7_Init+0x64>)
 800a6ee:	f7fd feff 	bl	80084f0 <HAL_TIMEx_MasterConfigSynchronization>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d001      	beq.n	800a6fc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800a6f8:	f000 fb92 	bl	800ae20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800a6fc:	bf00      	nop
 800a6fe:	3710      	adds	r7, #16
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}
 800a704:	20002110 	.word	0x20002110
 800a708:	40001400 	.word	0x40001400

0800a70c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a710:	4b14      	ldr	r3, [pc, #80]	; (800a764 <MX_USART1_UART_Init+0x58>)
 800a712:	4a15      	ldr	r2, [pc, #84]	; (800a768 <MX_USART1_UART_Init+0x5c>)
 800a714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a716:	4b13      	ldr	r3, [pc, #76]	; (800a764 <MX_USART1_UART_Init+0x58>)
 800a718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a71c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a71e:	4b11      	ldr	r3, [pc, #68]	; (800a764 <MX_USART1_UART_Init+0x58>)
 800a720:	2200      	movs	r2, #0
 800a722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a724:	4b0f      	ldr	r3, [pc, #60]	; (800a764 <MX_USART1_UART_Init+0x58>)
 800a726:	2200      	movs	r2, #0
 800a728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a72a:	4b0e      	ldr	r3, [pc, #56]	; (800a764 <MX_USART1_UART_Init+0x58>)
 800a72c:	2200      	movs	r2, #0
 800a72e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a730:	4b0c      	ldr	r3, [pc, #48]	; (800a764 <MX_USART1_UART_Init+0x58>)
 800a732:	220c      	movs	r2, #12
 800a734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a736:	4b0b      	ldr	r3, [pc, #44]	; (800a764 <MX_USART1_UART_Init+0x58>)
 800a738:	2200      	movs	r2, #0
 800a73a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a73c:	4b09      	ldr	r3, [pc, #36]	; (800a764 <MX_USART1_UART_Init+0x58>)
 800a73e:	2200      	movs	r2, #0
 800a740:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a742:	4b08      	ldr	r3, [pc, #32]	; (800a764 <MX_USART1_UART_Init+0x58>)
 800a744:	2200      	movs	r2, #0
 800a746:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a748:	4b06      	ldr	r3, [pc, #24]	; (800a764 <MX_USART1_UART_Init+0x58>)
 800a74a:	2200      	movs	r2, #0
 800a74c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a74e:	4805      	ldr	r0, [pc, #20]	; (800a764 <MX_USART1_UART_Init+0x58>)
 800a750:	f7fd ff48 	bl	80085e4 <HAL_UART_Init>
 800a754:	4603      	mov	r3, r0
 800a756:	2b00      	cmp	r3, #0
 800a758:	d001      	beq.n	800a75e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800a75a:	f000 fb61 	bl	800ae20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a75e:	bf00      	nop
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	20000de4 	.word	0x20000de4
 800a768:	40011000 	.word	0x40011000

0800a76c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800a772:	4b0c      	ldr	r3, [pc, #48]	; (800a7a4 <MX_DMA_Init+0x38>)
 800a774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a776:	4a0b      	ldr	r2, [pc, #44]	; (800a7a4 <MX_DMA_Init+0x38>)
 800a778:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a77c:	6313      	str	r3, [r2, #48]	; 0x30
 800a77e:	4b09      	ldr	r3, [pc, #36]	; (800a7a4 <MX_DMA_Init+0x38>)
 800a780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a786:	607b      	str	r3, [r7, #4]
 800a788:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800a78a:	2200      	movs	r2, #0
 800a78c:	2100      	movs	r1, #0
 800a78e:	203c      	movs	r0, #60	; 0x3c
 800a790:	f7f8 fccd 	bl	800312e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800a794:	203c      	movs	r0, #60	; 0x3c
 800a796:	f7f8 fce6 	bl	8003166 <HAL_NVIC_EnableIRQ>

}
 800a79a:	bf00      	nop
 800a79c:	3708      	adds	r7, #8
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	40023800 	.word	0x40023800

0800a7a8 <MX_FMC_Init>:
/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b088      	sub	sp, #32
 800a7ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800a7ae:	1d3b      	adds	r3, r7, #4
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	601a      	str	r2, [r3, #0]
 800a7b4:	605a      	str	r2, [r3, #4]
 800a7b6:	609a      	str	r2, [r3, #8]
 800a7b8:	60da      	str	r2, [r3, #12]
 800a7ba:	611a      	str	r2, [r3, #16]
 800a7bc:	615a      	str	r2, [r3, #20]
 800a7be:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800a7c0:	4b1f      	ldr	r3, [pc, #124]	; (800a840 <MX_FMC_Init+0x98>)
 800a7c2:	4a20      	ldr	r2, [pc, #128]	; (800a844 <MX_FMC_Init+0x9c>)
 800a7c4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800a7c6:	4b1e      	ldr	r3, [pc, #120]	; (800a840 <MX_FMC_Init+0x98>)
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800a7cc:	4b1c      	ldr	r3, [pc, #112]	; (800a840 <MX_FMC_Init+0x98>)
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800a7d2:	4b1b      	ldr	r3, [pc, #108]	; (800a840 <MX_FMC_Init+0x98>)
 800a7d4:	2204      	movs	r2, #4
 800a7d6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800a7d8:	4b19      	ldr	r3, [pc, #100]	; (800a840 <MX_FMC_Init+0x98>)
 800a7da:	2210      	movs	r2, #16
 800a7dc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800a7de:	4b18      	ldr	r3, [pc, #96]	; (800a840 <MX_FMC_Init+0x98>)
 800a7e0:	2240      	movs	r2, #64	; 0x40
 800a7e2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800a7e4:	4b16      	ldr	r3, [pc, #88]	; (800a840 <MX_FMC_Init+0x98>)
 800a7e6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800a7ea:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800a7ec:	4b14      	ldr	r3, [pc, #80]	; (800a840 <MX_FMC_Init+0x98>)
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800a7f2:	4b13      	ldr	r3, [pc, #76]	; (800a840 <MX_FMC_Init+0x98>)
 800a7f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a7f8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800a7fa:	4b11      	ldr	r3, [pc, #68]	; (800a840 <MX_FMC_Init+0x98>)
 800a7fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a800:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800a802:	4b0f      	ldr	r3, [pc, #60]	; (800a840 <MX_FMC_Init+0x98>)
 800a804:	2200      	movs	r2, #0
 800a806:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800a808:	2302      	movs	r3, #2
 800a80a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800a80c:	2307      	movs	r3, #7
 800a80e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800a810:	2304      	movs	r3, #4
 800a812:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800a814:	2307      	movs	r3, #7
 800a816:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800a818:	2303      	movs	r3, #3
 800a81a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800a81c:	2302      	movs	r3, #2
 800a81e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800a820:	2302      	movs	r3, #2
 800a822:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800a824:	1d3b      	adds	r3, r7, #4
 800a826:	4619      	mov	r1, r3
 800a828:	4805      	ldr	r0, [pc, #20]	; (800a840 <MX_FMC_Init+0x98>)
 800a82a:	f7fd fa26 	bl	8007c7a <HAL_SDRAM_Init>
 800a82e:	4603      	mov	r3, r0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d001      	beq.n	800a838 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800a834:	f000 faf4 	bl	800ae20 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800a838:	bf00      	nop
 800a83a:	3720      	adds	r7, #32
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	200020dc 	.word	0x200020dc
 800a844:	a0000140 	.word	0xa0000140

0800a848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b090      	sub	sp, #64	; 0x40
 800a84c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a84e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a852:	2200      	movs	r2, #0
 800a854:	601a      	str	r2, [r3, #0]
 800a856:	605a      	str	r2, [r3, #4]
 800a858:	609a      	str	r2, [r3, #8]
 800a85a:	60da      	str	r2, [r3, #12]
 800a85c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a85e:	4bad      	ldr	r3, [pc, #692]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a862:	4aac      	ldr	r2, [pc, #688]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a864:	f043 0310 	orr.w	r3, r3, #16
 800a868:	6313      	str	r3, [r2, #48]	; 0x30
 800a86a:	4baa      	ldr	r3, [pc, #680]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a86c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a86e:	f003 0310 	and.w	r3, r3, #16
 800a872:	62bb      	str	r3, [r7, #40]	; 0x28
 800a874:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a876:	4ba7      	ldr	r3, [pc, #668]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a87a:	4aa6      	ldr	r2, [pc, #664]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a87c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a880:	6313      	str	r3, [r2, #48]	; 0x30
 800a882:	4ba4      	ldr	r3, [pc, #656]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a88a:	627b      	str	r3, [r7, #36]	; 0x24
 800a88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a88e:	4ba1      	ldr	r3, [pc, #644]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a892:	4aa0      	ldr	r2, [pc, #640]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a894:	f043 0302 	orr.w	r3, r3, #2
 800a898:	6313      	str	r3, [r2, #48]	; 0x30
 800a89a:	4b9e      	ldr	r3, [pc, #632]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a89c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a89e:	f003 0302 	and.w	r3, r3, #2
 800a8a2:	623b      	str	r3, [r7, #32]
 800a8a4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a8a6:	4b9b      	ldr	r3, [pc, #620]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a8a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8aa:	4a9a      	ldr	r2, [pc, #616]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a8ac:	f043 0308 	orr.w	r3, r3, #8
 800a8b0:	6313      	str	r3, [r2, #48]	; 0x30
 800a8b2:	4b98      	ldr	r3, [pc, #608]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a8b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8b6:	f003 0308 	and.w	r3, r3, #8
 800a8ba:	61fb      	str	r3, [r7, #28]
 800a8bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a8be:	4b95      	ldr	r3, [pc, #596]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a8c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c2:	4a94      	ldr	r2, [pc, #592]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a8c4:	f043 0304 	orr.w	r3, r3, #4
 800a8c8:	6313      	str	r3, [r2, #48]	; 0x30
 800a8ca:	4b92      	ldr	r3, [pc, #584]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a8cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ce:	f003 0304 	and.w	r3, r3, #4
 800a8d2:	61bb      	str	r3, [r7, #24]
 800a8d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a8d6:	4b8f      	ldr	r3, [pc, #572]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8da:	4a8e      	ldr	r2, [pc, #568]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a8dc:	f043 0301 	orr.w	r3, r3, #1
 800a8e0:	6313      	str	r3, [r2, #48]	; 0x30
 800a8e2:	4b8c      	ldr	r3, [pc, #560]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a8e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8e6:	f003 0301 	and.w	r3, r3, #1
 800a8ea:	617b      	str	r3, [r7, #20]
 800a8ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a8ee:	4b89      	ldr	r3, [pc, #548]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a8f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8f2:	4a88      	ldr	r2, [pc, #544]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a8f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a8f8:	6313      	str	r3, [r2, #48]	; 0x30
 800a8fa:	4b86      	ldr	r3, [pc, #536]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a8fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a902:	613b      	str	r3, [r7, #16]
 800a904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800a906:	4b83      	ldr	r3, [pc, #524]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a90a:	4a82      	ldr	r2, [pc, #520]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a90c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a910:	6313      	str	r3, [r2, #48]	; 0x30
 800a912:	4b80      	ldr	r3, [pc, #512]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a91a:	60fb      	str	r3, [r7, #12]
 800a91c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800a91e:	4b7d      	ldr	r3, [pc, #500]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a922:	4a7c      	ldr	r2, [pc, #496]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a924:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a928:	6313      	str	r3, [r2, #48]	; 0x30
 800a92a:	4b7a      	ldr	r3, [pc, #488]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a92c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a92e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a932:	60bb      	str	r3, [r7, #8]
 800a934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a936:	4b77      	ldr	r3, [pc, #476]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a93a:	4a76      	ldr	r2, [pc, #472]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a93c:	f043 0320 	orr.w	r3, r3, #32
 800a940:	6313      	str	r3, [r2, #48]	; 0x30
 800a942:	4b74      	ldr	r3, [pc, #464]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a946:	f003 0320 	and.w	r3, r3, #32
 800a94a:	607b      	str	r3, [r7, #4]
 800a94c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a94e:	4b71      	ldr	r3, [pc, #452]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a952:	4a70      	ldr	r2, [pc, #448]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a958:	6313      	str	r3, [r2, #48]	; 0x30
 800a95a:	4b6e      	ldr	r3, [pc, #440]	; (800ab14 <MX_GPIO_Init+0x2cc>)
 800a95c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a95e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a962:	603b      	str	r3, [r7, #0]
 800a964:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800a966:	2201      	movs	r2, #1
 800a968:	2120      	movs	r1, #32
 800a96a:	486b      	ldr	r0, [pc, #428]	; (800ab18 <MX_GPIO_Init+0x2d0>)
 800a96c:	f7f9 fda2 	bl	80044b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800a970:	2200      	movs	r2, #0
 800a972:	210c      	movs	r1, #12
 800a974:	4869      	ldr	r0, [pc, #420]	; (800ab1c <MX_GPIO_Init+0x2d4>)
 800a976:	f7f9 fd9d 	bl	80044b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800a97a:	2201      	movs	r2, #1
 800a97c:	2108      	movs	r1, #8
 800a97e:	4868      	ldr	r0, [pc, #416]	; (800ab20 <MX_GPIO_Init+0x2d8>)
 800a980:	f7f9 fd98 	bl	80044b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800a984:	2201      	movs	r2, #1
 800a986:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a98a:	4864      	ldr	r0, [pc, #400]	; (800ab1c <MX_GPIO_Init+0x2d4>)
 800a98c:	f7f9 fd92 	bl	80044b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800a990:	2200      	movs	r2, #0
 800a992:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a996:	4863      	ldr	r0, [pc, #396]	; (800ab24 <MX_GPIO_Init+0x2dc>)
 800a998:	f7f9 fd8c 	bl	80044b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800a99c:	2200      	movs	r2, #0
 800a99e:	21c8      	movs	r1, #200	; 0xc8
 800a9a0:	4861      	ldr	r0, [pc, #388]	; (800ab28 <MX_GPIO_Init+0x2e0>)
 800a9a2:	f7f9 fd87 	bl	80044b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800a9a6:	2308      	movs	r3, #8
 800a9a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800a9b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	485c      	ldr	r0, [pc, #368]	; (800ab2c <MX_GPIO_Init+0x2e4>)
 800a9ba:	f7f9 fbd1 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800a9be:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800a9c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9c4:	2302      	movs	r3, #2
 800a9c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9cc:	2303      	movs	r3, #3
 800a9ce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a9d0:	230b      	movs	r3, #11
 800a9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a9d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a9d8:	4619      	mov	r1, r3
 800a9da:	4853      	ldr	r0, [pc, #332]	; (800ab28 <MX_GPIO_Init+0x2e0>)
 800a9dc:	f7f9 fbc0 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800a9e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a9e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a9e6:	2312      	movs	r3, #18
 800a9e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a9f2:	2304      	movs	r3, #4
 800a9f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a9f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	484c      	ldr	r0, [pc, #304]	; (800ab30 <MX_GPIO_Init+0x2e8>)
 800a9fe:	f7f9 fbaf 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 800aa02:	f643 4323 	movw	r3, #15395	; 0x3c23
 800aa06:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa08:	2302      	movs	r3, #2
 800aa0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa10:	2303      	movs	r3, #3
 800aa12:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800aa14:	230a      	movs	r3, #10
 800aa16:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aa18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	4844      	ldr	r0, [pc, #272]	; (800ab30 <MX_GPIO_Init+0x2e8>)
 800aa20:	f7f9 fb9e 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800aa24:	2380      	movs	r3, #128	; 0x80
 800aa26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa28:	2302      	movs	r3, #2
 800aa2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa30:	2300      	movs	r3, #0
 800aa32:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800aa34:	2308      	movs	r3, #8
 800aa36:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800aa38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	4836      	ldr	r0, [pc, #216]	; (800ab18 <MX_GPIO_Init+0x2d0>)
 800aa40:	f7f9 fb8e 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800aa44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa4a:	2302      	movs	r3, #2
 800aa4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa52:	2300      	movs	r3, #0
 800aa54:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800aa56:	2301      	movs	r3, #1
 800aa58:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800aa5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aa5e:	4619      	mov	r1, r3
 800aa60:	4834      	ldr	r0, [pc, #208]	; (800ab34 <MX_GPIO_Init+0x2ec>)
 800aa62:	f7f9 fb7d 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800aa66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa70:	2300      	movs	r3, #0
 800aa72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800aa74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aa78:	4619      	mov	r1, r3
 800aa7a:	482f      	ldr	r0, [pc, #188]	; (800ab38 <MX_GPIO_Init+0x2f0>)
 800aa7c:	f7f9 fb70 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800aa80:	2340      	movs	r3, #64	; 0x40
 800aa82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800aa84:	4b2d      	ldr	r3, [pc, #180]	; (800ab3c <MX_GPIO_Init+0x2f4>)
 800aa86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800aa8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aa90:	4619      	mov	r1, r3
 800aa92:	4821      	ldr	r0, [pc, #132]	; (800ab18 <MX_GPIO_Init+0x2d0>)
 800aa94:	f7f9 fb64 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800aa98:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800aa9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa9e:	2302      	movs	r3, #2
 800aaa0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aaa6:	2303      	movs	r3, #3
 800aaa8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aaaa:	230a      	movs	r3, #10
 800aaac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aaae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aab2:	4619      	mov	r1, r3
 800aab4:	481f      	ldr	r0, [pc, #124]	; (800ab34 <MX_GPIO_Init+0x2ec>)
 800aab6:	f7f9 fb53 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800aaba:	23f0      	movs	r3, #240	; 0xf0
 800aabc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aabe:	2302      	movs	r3, #2
 800aac0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aac2:	2300      	movs	r3, #0
 800aac4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aac6:	2300      	movs	r3, #0
 800aac8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800aaca:	230a      	movs	r3, #10
 800aacc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800aace:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aad2:	4619      	mov	r1, r3
 800aad4:	4811      	ldr	r0, [pc, #68]	; (800ab1c <MX_GPIO_Init+0x2d4>)
 800aad6:	f7f9 fb43 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800aada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aade:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aae0:	2302      	movs	r3, #2
 800aae2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aae4:	2300      	movs	r3, #0
 800aae6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aae8:	2300      	movs	r3, #0
 800aaea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800aaec:	230a      	movs	r3, #10
 800aaee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800aaf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	480c      	ldr	r0, [pc, #48]	; (800ab28 <MX_GPIO_Init+0x2e0>)
 800aaf8:	f7f9 fb32 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800aafc:	2320      	movs	r3, #32
 800aafe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ab00:	2301      	movs	r3, #1
 800ab02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab04:	2300      	movs	r3, #0
 800ab06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800ab0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ab10:	4619      	mov	r1, r3
 800ab12:	e015      	b.n	800ab40 <MX_GPIO_Init+0x2f8>
 800ab14:	40023800 	.word	0x40023800
 800ab18:	40020c00 	.word	0x40020c00
 800ab1c:	40022000 	.word	0x40022000
 800ab20:	40022800 	.word	0x40022800
 800ab24:	40021c00 	.word	0x40021c00
 800ab28:	40021800 	.word	0x40021800
 800ab2c:	40021000 	.word	0x40021000
 800ab30:	40020400 	.word	0x40020400
 800ab34:	40020000 	.word	0x40020000
 800ab38:	40022400 	.word	0x40022400
 800ab3c:	10120000 	.word	0x10120000
 800ab40:	48ad      	ldr	r0, [pc, #692]	; (800adf8 <MX_GPIO_Init+0x5b0>)
 800ab42:	f7f9 fb0d 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800ab46:	f241 030c 	movw	r3, #4108	; 0x100c
 800ab4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab50:	2300      	movs	r3, #0
 800ab52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab54:	2300      	movs	r3, #0
 800ab56:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800ab58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	48a7      	ldr	r0, [pc, #668]	; (800adfc <MX_GPIO_Init+0x5b4>)
 800ab60:	f7f9 fafe 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800ab64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800ab72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ab76:	4619      	mov	r1, r3
 800ab78:	48a1      	ldr	r0, [pc, #644]	; (800ae00 <MX_GPIO_Init+0x5b8>)
 800ab7a:	f7f9 faf1 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800ab7e:	2308      	movs	r3, #8
 800ab80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ab82:	2301      	movs	r3, #1
 800ab84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab86:	2300      	movs	r3, #0
 800ab88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800ab8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ab92:	4619      	mov	r1, r3
 800ab94:	489b      	ldr	r0, [pc, #620]	; (800ae04 <MX_GPIO_Init+0x5bc>)
 800ab96:	f7f9 fae3 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800ab9a:	2310      	movs	r3, #16
 800ab9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aba2:	2300      	movs	r3, #0
 800aba4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800aba6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800abaa:	4619      	mov	r1, r3
 800abac:	4892      	ldr	r0, [pc, #584]	; (800adf8 <MX_GPIO_Init+0x5b0>)
 800abae:	f7f9 fad7 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800abb2:	f248 0304 	movw	r3, #32772	; 0x8004
 800abb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800abb8:	2300      	movs	r3, #0
 800abba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abbc:	2300      	movs	r3, #0
 800abbe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800abc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800abc4:	4619      	mov	r1, r3
 800abc6:	4890      	ldr	r0, [pc, #576]	; (800ae08 <MX_GPIO_Init+0x5c0>)
 800abc8:	f7f9 faca 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800abcc:	2302      	movs	r3, #2
 800abce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abd0:	2302      	movs	r3, #2
 800abd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abd4:	2300      	movs	r3, #0
 800abd6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800abd8:	2300      	movs	r3, #0
 800abda:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800abdc:	2305      	movs	r3, #5
 800abde:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800abe0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800abe4:	4619      	mov	r1, r3
 800abe6:	4885      	ldr	r0, [pc, #532]	; (800adfc <MX_GPIO_Init+0x5b4>)
 800abe8:	f7f9 faba 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800abec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800abf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800abf2:	2301      	movs	r3, #1
 800abf4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abf6:	2300      	movs	r3, #0
 800abf8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800abfa:	2300      	movs	r3, #0
 800abfc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800abfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac02:	4619      	mov	r1, r3
 800ac04:	4880      	ldr	r0, [pc, #512]	; (800ae08 <MX_GPIO_Init+0x5c0>)
 800ac06:	f7f9 faab 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac0e:	2302      	movs	r3, #2
 800ac10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac12:	2300      	movs	r3, #0
 800ac14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac16:	2300      	movs	r3, #0
 800ac18:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800ac1a:	2302      	movs	r3, #2
 800ac1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800ac1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac22:	4619      	mov	r1, r3
 800ac24:	4875      	ldr	r0, [pc, #468]	; (800adfc <MX_GPIO_Init+0x5b4>)
 800ac26:	f7f9 fa9b 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800ac2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac30:	2302      	movs	r3, #2
 800ac32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac34:	2300      	movs	r3, #0
 800ac36:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800ac40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac44:	4619      	mov	r1, r3
 800ac46:	4871      	ldr	r0, [pc, #452]	; (800ae0c <MX_GPIO_Init+0x5c4>)
 800ac48:	f7f9 fa8a 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800ac4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800ac52:	4b6f      	ldr	r3, [pc, #444]	; (800ae10 <MX_GPIO_Init+0x5c8>)
 800ac54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac56:	2300      	movs	r3, #0
 800ac58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800ac5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac5e:	4619      	mov	r1, r3
 800ac60:	4866      	ldr	r0, [pc, #408]	; (800adfc <MX_GPIO_Init+0x5b4>)
 800ac62:	f7f9 fa7d 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800ac66:	23c0      	movs	r3, #192	; 0xc0
 800ac68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac6a:	2302      	movs	r3, #2
 800ac6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac72:	2303      	movs	r3, #3
 800ac74:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800ac76:	2308      	movs	r3, #8
 800ac78:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ac7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac7e:	4619      	mov	r1, r3
 800ac80:	485f      	ldr	r0, [pc, #380]	; (800ae00 <MX_GPIO_Init+0x5b8>)
 800ac82:	f7f9 fa6d 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800ac86:	2310      	movs	r3, #16
 800ac88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac8a:	2302      	movs	r3, #2
 800ac8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac92:	2303      	movs	r3, #3
 800ac94:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800ac96:	230a      	movs	r3, #10
 800ac98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800ac9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac9e:	4619      	mov	r1, r3
 800aca0:	4859      	ldr	r0, [pc, #356]	; (800ae08 <MX_GPIO_Init+0x5c0>)
 800aca2:	f7f9 fa5d 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800aca6:	23c8      	movs	r3, #200	; 0xc8
 800aca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800acaa:	2301      	movs	r3, #1
 800acac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acae:	2300      	movs	r3, #0
 800acb0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800acb2:	2300      	movs	r3, #0
 800acb4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800acb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800acba:	4619      	mov	r1, r3
 800acbc:	4855      	ldr	r0, [pc, #340]	; (800ae14 <MX_GPIO_Init+0x5cc>)
 800acbe:	f7f9 fa4f 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin 
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 800acc2:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800acc6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800acc8:	2303      	movs	r3, #3
 800acca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800accc:	2300      	movs	r3, #0
 800acce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800acd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800acd4:	4619      	mov	r1, r3
 800acd6:	4850      	ldr	r0, [pc, #320]	; (800ae18 <MX_GPIO_Init+0x5d0>)
 800acd8:	f7f9 fa42 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800acdc:	2305      	movs	r3, #5
 800acde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ace0:	2302      	movs	r3, #2
 800ace2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ace4:	2300      	movs	r3, #0
 800ace6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ace8:	2303      	movs	r3, #3
 800acea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800acec:	230a      	movs	r3, #10
 800acee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800acf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800acf4:	4619      	mov	r1, r3
 800acf6:	4842      	ldr	r0, [pc, #264]	; (800ae00 <MX_GPIO_Init+0x5b8>)
 800acf8:	f7f9 fa32 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800acfc:	2332      	movs	r3, #50	; 0x32
 800acfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad00:	2302      	movs	r3, #2
 800ad02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad04:	2300      	movs	r3, #0
 800ad06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad08:	2303      	movs	r3, #3
 800ad0a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ad0c:	230b      	movs	r3, #11
 800ad0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ad10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ad14:	4619      	mov	r1, r3
 800ad16:	483a      	ldr	r0, [pc, #232]	; (800ae00 <MX_GPIO_Init+0x5b8>)
 800ad18:	f7f9 fa22 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800ad1c:	2304      	movs	r3, #4
 800ad1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ad20:	2300      	movs	r3, #0
 800ad22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad24:	2300      	movs	r3, #0
 800ad26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800ad28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	4839      	ldr	r0, [pc, #228]	; (800ae14 <MX_GPIO_Init+0x5cc>)
 800ad30:	f7f9 fa16 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800ad34:	2386      	movs	r3, #134	; 0x86
 800ad36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad38:	2302      	movs	r3, #2
 800ad3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad40:	2303      	movs	r3, #3
 800ad42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ad44:	230b      	movs	r3, #11
 800ad46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	482f      	ldr	r0, [pc, #188]	; (800ae0c <MX_GPIO_Init+0x5c4>)
 800ad50:	f7f9 fa06 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800ad54:	2301      	movs	r3, #1
 800ad56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ad58:	2303      	movs	r3, #3
 800ad5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ad64:	4619      	mov	r1, r3
 800ad66:	4829      	ldr	r0, [pc, #164]	; (800ae0c <MX_GPIO_Init+0x5c4>)
 800ad68:	f7f9 f9fa 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800ad6c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800ad70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ad72:	2312      	movs	r3, #18
 800ad74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ad76:	2301      	movs	r3, #1
 800ad78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad7a:	2303      	movs	r3, #3
 800ad7c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800ad7e:	2304      	movs	r3, #4
 800ad80:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800ad82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ad86:	4619      	mov	r1, r3
 800ad88:	481f      	ldr	r0, [pc, #124]	; (800ae08 <MX_GPIO_Init+0x5c0>)
 800ad8a:	f7f9 f9e9 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800ad8e:	2328      	movs	r3, #40	; 0x28
 800ad90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad92:	2302      	movs	r3, #2
 800ad94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad96:	2300      	movs	r3, #0
 800ad98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad9a:	2303      	movs	r3, #3
 800ad9c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800ad9e:	230a      	movs	r3, #10
 800ada0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ada2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ada6:	4619      	mov	r1, r3
 800ada8:	4818      	ldr	r0, [pc, #96]	; (800ae0c <MX_GPIO_Init+0x5c4>)
 800adaa:	f7f9 f9d9 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800adae:	2340      	movs	r3, #64	; 0x40
 800adb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adb2:	2302      	movs	r3, #2
 800adb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adb6:	2300      	movs	r3, #0
 800adb8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800adba:	2300      	movs	r3, #0
 800adbc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800adbe:	2309      	movs	r3, #9
 800adc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800adc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800adc6:	4619      	mov	r1, r3
 800adc8:	480f      	ldr	r0, [pc, #60]	; (800ae08 <MX_GPIO_Init+0x5c0>)
 800adca:	f7f9 f9c9 	bl	8004160 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800adce:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800add2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800add4:	2302      	movs	r3, #2
 800add6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800add8:	2300      	movs	r3, #0
 800adda:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800addc:	2300      	movs	r3, #0
 800adde:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800ade0:	2305      	movs	r3, #5
 800ade2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ade4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ade8:	4619      	mov	r1, r3
 800adea:	480c      	ldr	r0, [pc, #48]	; (800ae1c <MX_GPIO_Init+0x5d4>)
 800adec:	f7f9 f9b8 	bl	8004160 <HAL_GPIO_Init>

}
 800adf0:	bf00      	nop
 800adf2:	3740      	adds	r7, #64	; 0x40
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}
 800adf8:	40020c00 	.word	0x40020c00
 800adfc:	40022000 	.word	0x40022000
 800ae00:	40020800 	.word	0x40020800
 800ae04:	40022800 	.word	0x40022800
 800ae08:	40021c00 	.word	0x40021c00
 800ae0c:	40020000 	.word	0x40020000
 800ae10:	10120000 	.word	0x10120000
 800ae14:	40021800 	.word	0x40021800
 800ae18:	40021400 	.word	0x40021400
 800ae1c:	40020400 	.word	0x40020400

0800ae20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ae20:	b480      	push	{r7}
 800ae22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800ae24:	bf00      	nop
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr
	...

0800ae30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800ae36:	4b0f      	ldr	r3, [pc, #60]	; (800ae74 <HAL_MspInit+0x44>)
 800ae38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae3a:	4a0e      	ldr	r2, [pc, #56]	; (800ae74 <HAL_MspInit+0x44>)
 800ae3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae40:	6413      	str	r3, [r2, #64]	; 0x40
 800ae42:	4b0c      	ldr	r3, [pc, #48]	; (800ae74 <HAL_MspInit+0x44>)
 800ae44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae4a:	607b      	str	r3, [r7, #4]
 800ae4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ae4e:	4b09      	ldr	r3, [pc, #36]	; (800ae74 <HAL_MspInit+0x44>)
 800ae50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae52:	4a08      	ldr	r2, [pc, #32]	; (800ae74 <HAL_MspInit+0x44>)
 800ae54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ae58:	6453      	str	r3, [r2, #68]	; 0x44
 800ae5a:	4b06      	ldr	r3, [pc, #24]	; (800ae74 <HAL_MspInit+0x44>)
 800ae5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae62:	603b      	str	r3, [r7, #0]
 800ae64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ae66:	bf00      	nop
 800ae68:	370c      	adds	r7, #12
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr
 800ae72:	bf00      	nop
 800ae74:	40023800 	.word	0x40023800

0800ae78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b08a      	sub	sp, #40	; 0x28
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae80:	f107 0314 	add.w	r3, r7, #20
 800ae84:	2200      	movs	r2, #0
 800ae86:	601a      	str	r2, [r3, #0]
 800ae88:	605a      	str	r2, [r3, #4]
 800ae8a:	609a      	str	r2, [r3, #8]
 800ae8c:	60da      	str	r2, [r3, #12]
 800ae8e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4a31      	ldr	r2, [pc, #196]	; (800af5c <HAL_ADC_MspInit+0xe4>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d15c      	bne.n	800af54 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800ae9a:	4b31      	ldr	r3, [pc, #196]	; (800af60 <HAL_ADC_MspInit+0xe8>)
 800ae9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae9e:	4a30      	ldr	r2, [pc, #192]	; (800af60 <HAL_ADC_MspInit+0xe8>)
 800aea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aea4:	6453      	str	r3, [r2, #68]	; 0x44
 800aea6:	4b2e      	ldr	r3, [pc, #184]	; (800af60 <HAL_ADC_MspInit+0xe8>)
 800aea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aeae:	613b      	str	r3, [r7, #16]
 800aeb0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aeb2:	4b2b      	ldr	r3, [pc, #172]	; (800af60 <HAL_ADC_MspInit+0xe8>)
 800aeb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeb6:	4a2a      	ldr	r2, [pc, #168]	; (800af60 <HAL_ADC_MspInit+0xe8>)
 800aeb8:	f043 0301 	orr.w	r3, r3, #1
 800aebc:	6313      	str	r3, [r2, #48]	; 0x30
 800aebe:	4b28      	ldr	r3, [pc, #160]	; (800af60 <HAL_ADC_MspInit+0xe8>)
 800aec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aec2:	f003 0301 	and.w	r3, r3, #1
 800aec6:	60fb      	str	r3, [r7, #12]
 800aec8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0/WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800aeca:	2301      	movs	r3, #1
 800aecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800aece:	2303      	movs	r3, #3
 800aed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aed2:	2300      	movs	r3, #0
 800aed4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aed6:	f107 0314 	add.w	r3, r7, #20
 800aeda:	4619      	mov	r1, r3
 800aedc:	4821      	ldr	r0, [pc, #132]	; (800af64 <HAL_ADC_MspInit+0xec>)
 800aede:	f7f9 f93f 	bl	8004160 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 800aee2:	4b21      	ldr	r3, [pc, #132]	; (800af68 <HAL_ADC_MspInit+0xf0>)
 800aee4:	4a21      	ldr	r2, [pc, #132]	; (800af6c <HAL_ADC_MspInit+0xf4>)
 800aee6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800aee8:	4b1f      	ldr	r3, [pc, #124]	; (800af68 <HAL_ADC_MspInit+0xf0>)
 800aeea:	2200      	movs	r2, #0
 800aeec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800aeee:	4b1e      	ldr	r3, [pc, #120]	; (800af68 <HAL_ADC_MspInit+0xf0>)
 800aef0:	2200      	movs	r2, #0
 800aef2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800aef4:	4b1c      	ldr	r3, [pc, #112]	; (800af68 <HAL_ADC_MspInit+0xf0>)
 800aef6:	2200      	movs	r2, #0
 800aef8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800aefa:	4b1b      	ldr	r3, [pc, #108]	; (800af68 <HAL_ADC_MspInit+0xf0>)
 800aefc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800af00:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800af02:	4b19      	ldr	r3, [pc, #100]	; (800af68 <HAL_ADC_MspInit+0xf0>)
 800af04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800af08:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800af0a:	4b17      	ldr	r3, [pc, #92]	; (800af68 <HAL_ADC_MspInit+0xf0>)
 800af0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800af10:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800af12:	4b15      	ldr	r3, [pc, #84]	; (800af68 <HAL_ADC_MspInit+0xf0>)
 800af14:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af18:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800af1a:	4b13      	ldr	r3, [pc, #76]	; (800af68 <HAL_ADC_MspInit+0xf0>)
 800af1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800af20:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800af22:	4b11      	ldr	r3, [pc, #68]	; (800af68 <HAL_ADC_MspInit+0xf0>)
 800af24:	2200      	movs	r2, #0
 800af26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800af28:	480f      	ldr	r0, [pc, #60]	; (800af68 <HAL_ADC_MspInit+0xf0>)
 800af2a:	f7f8 f9a9 	bl	8003280 <HAL_DMA_Init>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b00      	cmp	r3, #0
 800af32:	d001      	beq.n	800af38 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 800af34:	f7ff ff74 	bl	800ae20 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	4a0b      	ldr	r2, [pc, #44]	; (800af68 <HAL_ADC_MspInit+0xf0>)
 800af3c:	639a      	str	r2, [r3, #56]	; 0x38
 800af3e:	4a0a      	ldr	r2, [pc, #40]	; (800af68 <HAL_ADC_MspInit+0xf0>)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800af44:	2200      	movs	r2, #0
 800af46:	2100      	movs	r1, #0
 800af48:	2012      	movs	r0, #18
 800af4a:	f7f8 f8f0 	bl	800312e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800af4e:	2012      	movs	r0, #18
 800af50:	f7f8 f909 	bl	8003166 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800af54:	bf00      	nop
 800af56:	3728      	adds	r7, #40	; 0x28
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	40012000 	.word	0x40012000
 800af60:	40023800 	.word	0x40023800
 800af64:	40020000 	.word	0x40020000
 800af68:	20000e68 	.word	0x20000e68
 800af6c:	40026470 	.word	0x40026470

0800af70 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b08e      	sub	sp, #56	; 0x38
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af7c:	2200      	movs	r2, #0
 800af7e:	601a      	str	r2, [r3, #0]
 800af80:	605a      	str	r2, [r3, #4]
 800af82:	609a      	str	r2, [r3, #8]
 800af84:	60da      	str	r2, [r3, #12]
 800af86:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a50      	ldr	r2, [pc, #320]	; (800b0d0 <HAL_DCMI_MspInit+0x160>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	f040 809a 	bne.w	800b0c8 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800af94:	4b4f      	ldr	r3, [pc, #316]	; (800b0d4 <HAL_DCMI_MspInit+0x164>)
 800af96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af98:	4a4e      	ldr	r2, [pc, #312]	; (800b0d4 <HAL_DCMI_MspInit+0x164>)
 800af9a:	f043 0301 	orr.w	r3, r3, #1
 800af9e:	6353      	str	r3, [r2, #52]	; 0x34
 800afa0:	4b4c      	ldr	r3, [pc, #304]	; (800b0d4 <HAL_DCMI_MspInit+0x164>)
 800afa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afa4:	f003 0301 	and.w	r3, r3, #1
 800afa8:	623b      	str	r3, [r7, #32]
 800afaa:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800afac:	4b49      	ldr	r3, [pc, #292]	; (800b0d4 <HAL_DCMI_MspInit+0x164>)
 800afae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afb0:	4a48      	ldr	r2, [pc, #288]	; (800b0d4 <HAL_DCMI_MspInit+0x164>)
 800afb2:	f043 0310 	orr.w	r3, r3, #16
 800afb6:	6313      	str	r3, [r2, #48]	; 0x30
 800afb8:	4b46      	ldr	r3, [pc, #280]	; (800b0d4 <HAL_DCMI_MspInit+0x164>)
 800afba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afbc:	f003 0310 	and.w	r3, r3, #16
 800afc0:	61fb      	str	r3, [r7, #28]
 800afc2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800afc4:	4b43      	ldr	r3, [pc, #268]	; (800b0d4 <HAL_DCMI_MspInit+0x164>)
 800afc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afc8:	4a42      	ldr	r2, [pc, #264]	; (800b0d4 <HAL_DCMI_MspInit+0x164>)
 800afca:	f043 0308 	orr.w	r3, r3, #8
 800afce:	6313      	str	r3, [r2, #48]	; 0x30
 800afd0:	4b40      	ldr	r3, [pc, #256]	; (800b0d4 <HAL_DCMI_MspInit+0x164>)
 800afd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afd4:	f003 0308 	and.w	r3, r3, #8
 800afd8:	61bb      	str	r3, [r7, #24]
 800afda:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800afdc:	4b3d      	ldr	r3, [pc, #244]	; (800b0d4 <HAL_DCMI_MspInit+0x164>)
 800afde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afe0:	4a3c      	ldr	r2, [pc, #240]	; (800b0d4 <HAL_DCMI_MspInit+0x164>)
 800afe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afe6:	6313      	str	r3, [r2, #48]	; 0x30
 800afe8:	4b3a      	ldr	r3, [pc, #232]	; (800b0d4 <HAL_DCMI_MspInit+0x164>)
 800afea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aff0:	617b      	str	r3, [r7, #20]
 800aff2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800aff4:	4b37      	ldr	r3, [pc, #220]	; (800b0d4 <HAL_DCMI_MspInit+0x164>)
 800aff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aff8:	4a36      	ldr	r2, [pc, #216]	; (800b0d4 <HAL_DCMI_MspInit+0x164>)
 800affa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800affe:	6313      	str	r3, [r2, #48]	; 0x30
 800b000:	4b34      	ldr	r3, [pc, #208]	; (800b0d4 <HAL_DCMI_MspInit+0x164>)
 800b002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b008:	613b      	str	r3, [r7, #16]
 800b00a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b00c:	4b31      	ldr	r3, [pc, #196]	; (800b0d4 <HAL_DCMI_MspInit+0x164>)
 800b00e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b010:	4a30      	ldr	r2, [pc, #192]	; (800b0d4 <HAL_DCMI_MspInit+0x164>)
 800b012:	f043 0301 	orr.w	r3, r3, #1
 800b016:	6313      	str	r3, [r2, #48]	; 0x30
 800b018:	4b2e      	ldr	r3, [pc, #184]	; (800b0d4 <HAL_DCMI_MspInit+0x164>)
 800b01a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b01c:	f003 0301 	and.w	r3, r3, #1
 800b020:	60fb      	str	r3, [r7, #12]
 800b022:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800b024:	2360      	movs	r3, #96	; 0x60
 800b026:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b028:	2302      	movs	r3, #2
 800b02a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b02c:	2300      	movs	r3, #0
 800b02e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b030:	2300      	movs	r3, #0
 800b032:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800b034:	230d      	movs	r3, #13
 800b036:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b03c:	4619      	mov	r1, r3
 800b03e:	4826      	ldr	r0, [pc, #152]	; (800b0d8 <HAL_DCMI_MspInit+0x168>)
 800b040:	f7f9 f88e 	bl	8004160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800b044:	2308      	movs	r3, #8
 800b046:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b048:	2302      	movs	r3, #2
 800b04a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b04c:	2300      	movs	r3, #0
 800b04e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b050:	2300      	movs	r3, #0
 800b052:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800b054:	230d      	movs	r3, #13
 800b056:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800b058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b05c:	4619      	mov	r1, r3
 800b05e:	481f      	ldr	r0, [pc, #124]	; (800b0dc <HAL_DCMI_MspInit+0x16c>)
 800b060:	f7f9 f87e 	bl	8004160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800b064:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b068:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b06a:	2302      	movs	r3, #2
 800b06c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b06e:	2300      	movs	r3, #0
 800b070:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b072:	2300      	movs	r3, #0
 800b074:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800b076:	230d      	movs	r3, #13
 800b078:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800b07a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b07e:	4619      	mov	r1, r3
 800b080:	4817      	ldr	r0, [pc, #92]	; (800b0e0 <HAL_DCMI_MspInit+0x170>)
 800b082:	f7f9 f86d 	bl	8004160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 800b086:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800b08a:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b08c:	2302      	movs	r3, #2
 800b08e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b090:	2300      	movs	r3, #0
 800b092:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b094:	2300      	movs	r3, #0
 800b096:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800b098:	230d      	movs	r3, #13
 800b09a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800b09c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	4810      	ldr	r0, [pc, #64]	; (800b0e4 <HAL_DCMI_MspInit+0x174>)
 800b0a4:	f7f9 f85c 	bl	8004160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800b0a8:	2350      	movs	r3, #80	; 0x50
 800b0aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0ac:	2302      	movs	r3, #2
 800b0ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800b0b8:	230d      	movs	r3, #13
 800b0ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b0bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	4809      	ldr	r0, [pc, #36]	; (800b0e8 <HAL_DCMI_MspInit+0x178>)
 800b0c4:	f7f9 f84c 	bl	8004160 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800b0c8:	bf00      	nop
 800b0ca:	3738      	adds	r7, #56	; 0x38
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}
 800b0d0:	50050000 	.word	0x50050000
 800b0d4:	40023800 	.word	0x40023800
 800b0d8:	40021000 	.word	0x40021000
 800b0dc:	40020c00 	.word	0x40020c00
 800b0e0:	40021800 	.word	0x40021800
 800b0e4:	40021c00 	.word	0x40021c00
 800b0e8:	40020000 	.word	0x40020000

0800b0ec <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4a0d      	ldr	r2, [pc, #52]	; (800b130 <HAL_DMA2D_MspInit+0x44>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d113      	bne.n	800b126 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800b0fe:	4b0d      	ldr	r3, [pc, #52]	; (800b134 <HAL_DMA2D_MspInit+0x48>)
 800b100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b102:	4a0c      	ldr	r2, [pc, #48]	; (800b134 <HAL_DMA2D_MspInit+0x48>)
 800b104:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b108:	6313      	str	r3, [r2, #48]	; 0x30
 800b10a:	4b0a      	ldr	r3, [pc, #40]	; (800b134 <HAL_DMA2D_MspInit+0x48>)
 800b10c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b10e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b112:	60fb      	str	r3, [r7, #12]
 800b114:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800b116:	2200      	movs	r2, #0
 800b118:	2100      	movs	r1, #0
 800b11a:	205a      	movs	r0, #90	; 0x5a
 800b11c:	f7f8 f807 	bl	800312e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800b120:	205a      	movs	r0, #90	; 0x5a
 800b122:	f7f8 f820 	bl	8003166 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800b126:	bf00      	nop
 800b128:	3710      	adds	r7, #16
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	4002b000 	.word	0x4002b000
 800b134:	40023800 	.word	0x40023800

0800b138 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b08e      	sub	sp, #56	; 0x38
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b144:	2200      	movs	r2, #0
 800b146:	601a      	str	r2, [r3, #0]
 800b148:	605a      	str	r2, [r3, #4]
 800b14a:	609a      	str	r2, [r3, #8]
 800b14c:	60da      	str	r2, [r3, #12]
 800b14e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4a55      	ldr	r2, [pc, #340]	; (800b2ac <HAL_LTDC_MspInit+0x174>)
 800b156:	4293      	cmp	r3, r2
 800b158:	f040 80a3 	bne.w	800b2a2 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800b15c:	4b54      	ldr	r3, [pc, #336]	; (800b2b0 <HAL_LTDC_MspInit+0x178>)
 800b15e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b160:	4a53      	ldr	r2, [pc, #332]	; (800b2b0 <HAL_LTDC_MspInit+0x178>)
 800b162:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b166:	6453      	str	r3, [r2, #68]	; 0x44
 800b168:	4b51      	ldr	r3, [pc, #324]	; (800b2b0 <HAL_LTDC_MspInit+0x178>)
 800b16a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b16c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b170:	623b      	str	r3, [r7, #32]
 800b172:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800b174:	4b4e      	ldr	r3, [pc, #312]	; (800b2b0 <HAL_LTDC_MspInit+0x178>)
 800b176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b178:	4a4d      	ldr	r2, [pc, #308]	; (800b2b0 <HAL_LTDC_MspInit+0x178>)
 800b17a:	f043 0310 	orr.w	r3, r3, #16
 800b17e:	6313      	str	r3, [r2, #48]	; 0x30
 800b180:	4b4b      	ldr	r3, [pc, #300]	; (800b2b0 <HAL_LTDC_MspInit+0x178>)
 800b182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b184:	f003 0310 	and.w	r3, r3, #16
 800b188:	61fb      	str	r3, [r7, #28]
 800b18a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800b18c:	4b48      	ldr	r3, [pc, #288]	; (800b2b0 <HAL_LTDC_MspInit+0x178>)
 800b18e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b190:	4a47      	ldr	r2, [pc, #284]	; (800b2b0 <HAL_LTDC_MspInit+0x178>)
 800b192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b196:	6313      	str	r3, [r2, #48]	; 0x30
 800b198:	4b45      	ldr	r3, [pc, #276]	; (800b2b0 <HAL_LTDC_MspInit+0x178>)
 800b19a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b19c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b1a0:	61bb      	str	r3, [r7, #24]
 800b1a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800b1a4:	4b42      	ldr	r3, [pc, #264]	; (800b2b0 <HAL_LTDC_MspInit+0x178>)
 800b1a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1a8:	4a41      	ldr	r2, [pc, #260]	; (800b2b0 <HAL_LTDC_MspInit+0x178>)
 800b1aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b1ae:	6313      	str	r3, [r2, #48]	; 0x30
 800b1b0:	4b3f      	ldr	r3, [pc, #252]	; (800b2b0 <HAL_LTDC_MspInit+0x178>)
 800b1b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1b8:	617b      	str	r3, [r7, #20]
 800b1ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b1bc:	4b3c      	ldr	r3, [pc, #240]	; (800b2b0 <HAL_LTDC_MspInit+0x178>)
 800b1be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1c0:	4a3b      	ldr	r2, [pc, #236]	; (800b2b0 <HAL_LTDC_MspInit+0x178>)
 800b1c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1c6:	6313      	str	r3, [r2, #48]	; 0x30
 800b1c8:	4b39      	ldr	r3, [pc, #228]	; (800b2b0 <HAL_LTDC_MspInit+0x178>)
 800b1ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1d0:	613b      	str	r3, [r7, #16]
 800b1d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800b1d4:	4b36      	ldr	r3, [pc, #216]	; (800b2b0 <HAL_LTDC_MspInit+0x178>)
 800b1d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1d8:	4a35      	ldr	r2, [pc, #212]	; (800b2b0 <HAL_LTDC_MspInit+0x178>)
 800b1da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1de:	6313      	str	r3, [r2, #48]	; 0x30
 800b1e0:	4b33      	ldr	r3, [pc, #204]	; (800b2b0 <HAL_LTDC_MspInit+0x178>)
 800b1e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1e8:	60fb      	str	r3, [r7, #12]
 800b1ea:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800b1ec:	2310      	movs	r3, #16
 800b1ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1f0:	2302      	movs	r3, #2
 800b1f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800b1fc:	230e      	movs	r3, #14
 800b1fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800b200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b204:	4619      	mov	r1, r3
 800b206:	482b      	ldr	r0, [pc, #172]	; (800b2b4 <HAL_LTDC_MspInit+0x17c>)
 800b208:	f7f8 ffaa 	bl	8004160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800b20c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800b210:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b212:	2302      	movs	r3, #2
 800b214:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b216:	2300      	movs	r3, #0
 800b218:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b21a:	2300      	movs	r3, #0
 800b21c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800b21e:	230e      	movs	r3, #14
 800b220:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800b222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b226:	4619      	mov	r1, r3
 800b228:	4823      	ldr	r0, [pc, #140]	; (800b2b8 <HAL_LTDC_MspInit+0x180>)
 800b22a:	f7f8 ff99 	bl	8004160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 800b22e:	23f7      	movs	r3, #247	; 0xf7
 800b230:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b232:	2302      	movs	r3, #2
 800b234:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b236:	2300      	movs	r3, #0
 800b238:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b23a:	2300      	movs	r3, #0
 800b23c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800b23e:	230e      	movs	r3, #14
 800b240:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800b242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b246:	4619      	mov	r1, r3
 800b248:	481c      	ldr	r0, [pc, #112]	; (800b2bc <HAL_LTDC_MspInit+0x184>)
 800b24a:	f7f8 ff89 	bl	8004160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800b24e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b252:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b254:	2302      	movs	r3, #2
 800b256:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b258:	2300      	movs	r3, #0
 800b25a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b25c:	2300      	movs	r3, #0
 800b25e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800b260:	2309      	movs	r3, #9
 800b262:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800b264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b268:	4619      	mov	r1, r3
 800b26a:	4815      	ldr	r0, [pc, #84]	; (800b2c0 <HAL_LTDC_MspInit+0x188>)
 800b26c:	f7f8 ff78 	bl	8004160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800b270:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800b274:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b276:	2302      	movs	r3, #2
 800b278:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b27a:	2300      	movs	r3, #0
 800b27c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b27e:	2300      	movs	r3, #0
 800b280:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800b282:	230e      	movs	r3, #14
 800b284:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800b286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b28a:	4619      	mov	r1, r3
 800b28c:	480d      	ldr	r0, [pc, #52]	; (800b2c4 <HAL_LTDC_MspInit+0x18c>)
 800b28e:	f7f8 ff67 	bl	8004160 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800b292:	2200      	movs	r2, #0
 800b294:	2100      	movs	r1, #0
 800b296:	2058      	movs	r0, #88	; 0x58
 800b298:	f7f7 ff49 	bl	800312e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800b29c:	2058      	movs	r0, #88	; 0x58
 800b29e:	f7f7 ff62 	bl	8003166 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800b2a2:	bf00      	nop
 800b2a4:	3738      	adds	r7, #56	; 0x38
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	40016800 	.word	0x40016800
 800b2b0:	40023800 	.word	0x40023800
 800b2b4:	40021000 	.word	0x40021000
 800b2b8:	40022400 	.word	0x40022400
 800b2bc:	40022800 	.word	0x40022800
 800b2c0:	40021800 	.word	0x40021800
 800b2c4:	40022000 	.word	0x40022000

0800b2c8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b08c      	sub	sp, #48	; 0x30
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b2d0:	f107 031c 	add.w	r3, r7, #28
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	601a      	str	r2, [r3, #0]
 800b2d8:	605a      	str	r2, [r3, #4]
 800b2da:	609a      	str	r2, [r3, #8]
 800b2dc:	60da      	str	r2, [r3, #12]
 800b2de:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4a3b      	ldr	r2, [pc, #236]	; (800b3d4 <HAL_QSPI_MspInit+0x10c>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d170      	bne.n	800b3cc <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800b2ea:	4b3b      	ldr	r3, [pc, #236]	; (800b3d8 <HAL_QSPI_MspInit+0x110>)
 800b2ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ee:	4a3a      	ldr	r2, [pc, #232]	; (800b3d8 <HAL_QSPI_MspInit+0x110>)
 800b2f0:	f043 0302 	orr.w	r3, r3, #2
 800b2f4:	6393      	str	r3, [r2, #56]	; 0x38
 800b2f6:	4b38      	ldr	r3, [pc, #224]	; (800b3d8 <HAL_QSPI_MspInit+0x110>)
 800b2f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2fa:	f003 0302 	and.w	r3, r3, #2
 800b2fe:	61bb      	str	r3, [r7, #24]
 800b300:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800b302:	4b35      	ldr	r3, [pc, #212]	; (800b3d8 <HAL_QSPI_MspInit+0x110>)
 800b304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b306:	4a34      	ldr	r2, [pc, #208]	; (800b3d8 <HAL_QSPI_MspInit+0x110>)
 800b308:	f043 0310 	orr.w	r3, r3, #16
 800b30c:	6313      	str	r3, [r2, #48]	; 0x30
 800b30e:	4b32      	ldr	r3, [pc, #200]	; (800b3d8 <HAL_QSPI_MspInit+0x110>)
 800b310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b312:	f003 0310 	and.w	r3, r3, #16
 800b316:	617b      	str	r3, [r7, #20]
 800b318:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b31a:	4b2f      	ldr	r3, [pc, #188]	; (800b3d8 <HAL_QSPI_MspInit+0x110>)
 800b31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b31e:	4a2e      	ldr	r2, [pc, #184]	; (800b3d8 <HAL_QSPI_MspInit+0x110>)
 800b320:	f043 0302 	orr.w	r3, r3, #2
 800b324:	6313      	str	r3, [r2, #48]	; 0x30
 800b326:	4b2c      	ldr	r3, [pc, #176]	; (800b3d8 <HAL_QSPI_MspInit+0x110>)
 800b328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b32a:	f003 0302 	and.w	r3, r3, #2
 800b32e:	613b      	str	r3, [r7, #16]
 800b330:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b332:	4b29      	ldr	r3, [pc, #164]	; (800b3d8 <HAL_QSPI_MspInit+0x110>)
 800b334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b336:	4a28      	ldr	r2, [pc, #160]	; (800b3d8 <HAL_QSPI_MspInit+0x110>)
 800b338:	f043 0308 	orr.w	r3, r3, #8
 800b33c:	6313      	str	r3, [r2, #48]	; 0x30
 800b33e:	4b26      	ldr	r3, [pc, #152]	; (800b3d8 <HAL_QSPI_MspInit+0x110>)
 800b340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b342:	f003 0308 	and.w	r3, r3, #8
 800b346:	60fb      	str	r3, [r7, #12]
 800b348:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800b34a:	2304      	movs	r3, #4
 800b34c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b34e:	2302      	movs	r3, #2
 800b350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b352:	2300      	movs	r3, #0
 800b354:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b356:	2303      	movs	r3, #3
 800b358:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800b35a:	2309      	movs	r3, #9
 800b35c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800b35e:	f107 031c 	add.w	r3, r7, #28
 800b362:	4619      	mov	r1, r3
 800b364:	481d      	ldr	r0, [pc, #116]	; (800b3dc <HAL_QSPI_MspInit+0x114>)
 800b366:	f7f8 fefb 	bl	8004160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800b36a:	2340      	movs	r3, #64	; 0x40
 800b36c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b36e:	2302      	movs	r3, #2
 800b370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b372:	2300      	movs	r3, #0
 800b374:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b376:	2303      	movs	r3, #3
 800b378:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800b37a:	230a      	movs	r3, #10
 800b37c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800b37e:	f107 031c 	add.w	r3, r7, #28
 800b382:	4619      	mov	r1, r3
 800b384:	4816      	ldr	r0, [pc, #88]	; (800b3e0 <HAL_QSPI_MspInit+0x118>)
 800b386:	f7f8 feeb 	bl	8004160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b38a:	2304      	movs	r3, #4
 800b38c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b38e:	2302      	movs	r3, #2
 800b390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b392:	2300      	movs	r3, #0
 800b394:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b396:	2303      	movs	r3, #3
 800b398:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800b39a:	2309      	movs	r3, #9
 800b39c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b39e:	f107 031c 	add.w	r3, r7, #28
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	480e      	ldr	r0, [pc, #56]	; (800b3e0 <HAL_QSPI_MspInit+0x118>)
 800b3a6:	f7f8 fedb 	bl	8004160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800b3aa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b3ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3b0:	2302      	movs	r3, #2
 800b3b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b3b8:	2303      	movs	r3, #3
 800b3ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800b3bc:	2309      	movs	r3, #9
 800b3be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b3c0:	f107 031c 	add.w	r3, r7, #28
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	4807      	ldr	r0, [pc, #28]	; (800b3e4 <HAL_QSPI_MspInit+0x11c>)
 800b3c8:	f7f8 feca 	bl	8004160 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800b3cc:	bf00      	nop
 800b3ce:	3730      	adds	r7, #48	; 0x30
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}
 800b3d4:	a0001000 	.word	0xa0001000
 800b3d8:	40023800 	.word	0x40023800
 800b3dc:	40021000 	.word	0x40021000
 800b3e0:	40020400 	.word	0x40020400
 800b3e4:	40020c00 	.word	0x40020c00

0800b3e8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b083      	sub	sp, #12
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4a07      	ldr	r2, [pc, #28]	; (800b414 <HAL_RTC_MspInit+0x2c>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d105      	bne.n	800b406 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800b3fa:	4b07      	ldr	r3, [pc, #28]	; (800b418 <HAL_RTC_MspInit+0x30>)
 800b3fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3fe:	4a06      	ldr	r2, [pc, #24]	; (800b418 <HAL_RTC_MspInit+0x30>)
 800b400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b404:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800b406:	bf00      	nop
 800b408:	370c      	adds	r7, #12
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr
 800b412:	bf00      	nop
 800b414:	40002800 	.word	0x40002800
 800b418:	40023800 	.word	0x40023800

0800b41c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b08a      	sub	sp, #40	; 0x28
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b424:	f107 0314 	add.w	r3, r7, #20
 800b428:	2200      	movs	r2, #0
 800b42a:	601a      	str	r2, [r3, #0]
 800b42c:	605a      	str	r2, [r3, #4]
 800b42e:	609a      	str	r2, [r3, #8]
 800b430:	60da      	str	r2, [r3, #12]
 800b432:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4a25      	ldr	r2, [pc, #148]	; (800b4d0 <HAL_SD_MspInit+0xb4>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d144      	bne.n	800b4c8 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800b43e:	4b25      	ldr	r3, [pc, #148]	; (800b4d4 <HAL_SD_MspInit+0xb8>)
 800b440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b442:	4a24      	ldr	r2, [pc, #144]	; (800b4d4 <HAL_SD_MspInit+0xb8>)
 800b444:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b448:	6453      	str	r3, [r2, #68]	; 0x44
 800b44a:	4b22      	ldr	r3, [pc, #136]	; (800b4d4 <HAL_SD_MspInit+0xb8>)
 800b44c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b44e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b452:	613b      	str	r3, [r7, #16]
 800b454:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b456:	4b1f      	ldr	r3, [pc, #124]	; (800b4d4 <HAL_SD_MspInit+0xb8>)
 800b458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b45a:	4a1e      	ldr	r2, [pc, #120]	; (800b4d4 <HAL_SD_MspInit+0xb8>)
 800b45c:	f043 0304 	orr.w	r3, r3, #4
 800b460:	6313      	str	r3, [r2, #48]	; 0x30
 800b462:	4b1c      	ldr	r3, [pc, #112]	; (800b4d4 <HAL_SD_MspInit+0xb8>)
 800b464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b466:	f003 0304 	and.w	r3, r3, #4
 800b46a:	60fb      	str	r3, [r7, #12]
 800b46c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b46e:	4b19      	ldr	r3, [pc, #100]	; (800b4d4 <HAL_SD_MspInit+0xb8>)
 800b470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b472:	4a18      	ldr	r2, [pc, #96]	; (800b4d4 <HAL_SD_MspInit+0xb8>)
 800b474:	f043 0308 	orr.w	r3, r3, #8
 800b478:	6313      	str	r3, [r2, #48]	; 0x30
 800b47a:	4b16      	ldr	r3, [pc, #88]	; (800b4d4 <HAL_SD_MspInit+0xb8>)
 800b47c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b47e:	f003 0308 	and.w	r3, r3, #8
 800b482:	60bb      	str	r3, [r7, #8]
 800b484:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 800b486:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800b48a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b48c:	2302      	movs	r3, #2
 800b48e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b490:	2300      	movs	r3, #0
 800b492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b494:	2303      	movs	r3, #3
 800b496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800b498:	230c      	movs	r3, #12
 800b49a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b49c:	f107 0314 	add.w	r3, r7, #20
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	480d      	ldr	r0, [pc, #52]	; (800b4d8 <HAL_SD_MspInit+0xbc>)
 800b4a4:	f7f8 fe5c 	bl	8004160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800b4a8:	2304      	movs	r3, #4
 800b4aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4ac:	2302      	movs	r3, #2
 800b4ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4b4:	2303      	movs	r3, #3
 800b4b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800b4b8:	230c      	movs	r3, #12
 800b4ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800b4bc:	f107 0314 	add.w	r3, r7, #20
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	4806      	ldr	r0, [pc, #24]	; (800b4dc <HAL_SD_MspInit+0xc0>)
 800b4c4:	f7f8 fe4c 	bl	8004160 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800b4c8:	bf00      	nop
 800b4ca:	3728      	adds	r7, #40	; 0x28
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	40012c00 	.word	0x40012c00
 800b4d4:	40023800 	.word	0x40023800
 800b4d8:	40020800 	.word	0x40020800
 800b4dc:	40020c00 	.word	0x40020c00

0800b4e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b08a      	sub	sp, #40	; 0x28
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b4e8:	f107 0314 	add.w	r3, r7, #20
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	601a      	str	r2, [r3, #0]
 800b4f0:	605a      	str	r2, [r3, #4]
 800b4f2:	609a      	str	r2, [r3, #8]
 800b4f4:	60da      	str	r2, [r3, #12]
 800b4f6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a28      	ldr	r2, [pc, #160]	; (800b5a0 <HAL_TIM_Base_MspInit+0xc0>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d130      	bne.n	800b564 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b502:	4b28      	ldr	r3, [pc, #160]	; (800b5a4 <HAL_TIM_Base_MspInit+0xc4>)
 800b504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b506:	4a27      	ldr	r2, [pc, #156]	; (800b5a4 <HAL_TIM_Base_MspInit+0xc4>)
 800b508:	f043 0302 	orr.w	r3, r3, #2
 800b50c:	6413      	str	r3, [r2, #64]	; 0x40
 800b50e:	4b25      	ldr	r3, [pc, #148]	; (800b5a4 <HAL_TIM_Base_MspInit+0xc4>)
 800b510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b512:	f003 0302 	and.w	r3, r3, #2
 800b516:	613b      	str	r3, [r7, #16]
 800b518:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b51a:	4b22      	ldr	r3, [pc, #136]	; (800b5a4 <HAL_TIM_Base_MspInit+0xc4>)
 800b51c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b51e:	4a21      	ldr	r2, [pc, #132]	; (800b5a4 <HAL_TIM_Base_MspInit+0xc4>)
 800b520:	f043 0302 	orr.w	r3, r3, #2
 800b524:	6313      	str	r3, [r2, #48]	; 0x30
 800b526:	4b1f      	ldr	r3, [pc, #124]	; (800b5a4 <HAL_TIM_Base_MspInit+0xc4>)
 800b528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b52a:	f003 0302 	and.w	r3, r3, #2
 800b52e:	60fb      	str	r3, [r7, #12]
 800b530:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800b532:	2310      	movs	r3, #16
 800b534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b536:	2302      	movs	r3, #2
 800b538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b53a:	2300      	movs	r3, #0
 800b53c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b53e:	2300      	movs	r3, #0
 800b540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800b542:	2302      	movs	r3, #2
 800b544:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800b546:	f107 0314 	add.w	r3, r7, #20
 800b54a:	4619      	mov	r1, r3
 800b54c:	4816      	ldr	r0, [pc, #88]	; (800b5a8 <HAL_TIM_Base_MspInit+0xc8>)
 800b54e:	f7f8 fe07 	bl	8004160 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800b552:	2200      	movs	r2, #0
 800b554:	2100      	movs	r1, #0
 800b556:	201d      	movs	r0, #29
 800b558:	f7f7 fde9 	bl	800312e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800b55c:	201d      	movs	r0, #29
 800b55e:	f7f7 fe02 	bl	8003166 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800b562:	e018      	b.n	800b596 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM7)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4a10      	ldr	r2, [pc, #64]	; (800b5ac <HAL_TIM_Base_MspInit+0xcc>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d113      	bne.n	800b596 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800b56e:	4b0d      	ldr	r3, [pc, #52]	; (800b5a4 <HAL_TIM_Base_MspInit+0xc4>)
 800b570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b572:	4a0c      	ldr	r2, [pc, #48]	; (800b5a4 <HAL_TIM_Base_MspInit+0xc4>)
 800b574:	f043 0320 	orr.w	r3, r3, #32
 800b578:	6413      	str	r3, [r2, #64]	; 0x40
 800b57a:	4b0a      	ldr	r3, [pc, #40]	; (800b5a4 <HAL_TIM_Base_MspInit+0xc4>)
 800b57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b57e:	f003 0320 	and.w	r3, r3, #32
 800b582:	60bb      	str	r3, [r7, #8]
 800b584:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800b586:	2200      	movs	r2, #0
 800b588:	2100      	movs	r1, #0
 800b58a:	2037      	movs	r0, #55	; 0x37
 800b58c:	f7f7 fdcf 	bl	800312e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800b590:	2037      	movs	r0, #55	; 0x37
 800b592:	f7f7 fde8 	bl	8003166 <HAL_NVIC_EnableIRQ>
}
 800b596:	bf00      	nop
 800b598:	3728      	adds	r7, #40	; 0x28
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	40000400 	.word	0x40000400
 800b5a4:	40023800 	.word	0x40023800
 800b5a8:	40020400 	.word	0x40020400
 800b5ac:	40001400 	.word	0x40001400

0800b5b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b08a      	sub	sp, #40	; 0x28
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b5b8:	f107 0314 	add.w	r3, r7, #20
 800b5bc:	2200      	movs	r2, #0
 800b5be:	601a      	str	r2, [r3, #0]
 800b5c0:	605a      	str	r2, [r3, #4]
 800b5c2:	609a      	str	r2, [r3, #8]
 800b5c4:	60da      	str	r2, [r3, #12]
 800b5c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	4a25      	ldr	r2, [pc, #148]	; (800b664 <HAL_UART_MspInit+0xb4>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d144      	bne.n	800b65c <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b5d2:	4b25      	ldr	r3, [pc, #148]	; (800b668 <HAL_UART_MspInit+0xb8>)
 800b5d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5d6:	4a24      	ldr	r2, [pc, #144]	; (800b668 <HAL_UART_MspInit+0xb8>)
 800b5d8:	f043 0310 	orr.w	r3, r3, #16
 800b5dc:	6453      	str	r3, [r2, #68]	; 0x44
 800b5de:	4b22      	ldr	r3, [pc, #136]	; (800b668 <HAL_UART_MspInit+0xb8>)
 800b5e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5e2:	f003 0310 	and.w	r3, r3, #16
 800b5e6:	613b      	str	r3, [r7, #16]
 800b5e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b5ea:	4b1f      	ldr	r3, [pc, #124]	; (800b668 <HAL_UART_MspInit+0xb8>)
 800b5ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ee:	4a1e      	ldr	r2, [pc, #120]	; (800b668 <HAL_UART_MspInit+0xb8>)
 800b5f0:	f043 0302 	orr.w	r3, r3, #2
 800b5f4:	6313      	str	r3, [r2, #48]	; 0x30
 800b5f6:	4b1c      	ldr	r3, [pc, #112]	; (800b668 <HAL_UART_MspInit+0xb8>)
 800b5f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5fa:	f003 0302 	and.w	r3, r3, #2
 800b5fe:	60fb      	str	r3, [r7, #12]
 800b600:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b602:	4b19      	ldr	r3, [pc, #100]	; (800b668 <HAL_UART_MspInit+0xb8>)
 800b604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b606:	4a18      	ldr	r2, [pc, #96]	; (800b668 <HAL_UART_MspInit+0xb8>)
 800b608:	f043 0301 	orr.w	r3, r3, #1
 800b60c:	6313      	str	r3, [r2, #48]	; 0x30
 800b60e:	4b16      	ldr	r3, [pc, #88]	; (800b668 <HAL_UART_MspInit+0xb8>)
 800b610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b612:	f003 0301 	and.w	r3, r3, #1
 800b616:	60bb      	str	r3, [r7, #8]
 800b618:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800b61a:	2380      	movs	r3, #128	; 0x80
 800b61c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b61e:	2302      	movs	r3, #2
 800b620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b622:	2300      	movs	r3, #0
 800b624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b626:	2300      	movs	r3, #0
 800b628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b62a:	2307      	movs	r3, #7
 800b62c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800b62e:	f107 0314 	add.w	r3, r7, #20
 800b632:	4619      	mov	r1, r3
 800b634:	480d      	ldr	r0, [pc, #52]	; (800b66c <HAL_UART_MspInit+0xbc>)
 800b636:	f7f8 fd93 	bl	8004160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800b63a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b63e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b640:	2302      	movs	r3, #2
 800b642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b644:	2300      	movs	r3, #0
 800b646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b648:	2300      	movs	r3, #0
 800b64a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b64c:	2307      	movs	r3, #7
 800b64e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800b650:	f107 0314 	add.w	r3, r7, #20
 800b654:	4619      	mov	r1, r3
 800b656:	4806      	ldr	r0, [pc, #24]	; (800b670 <HAL_UART_MspInit+0xc0>)
 800b658:	f7f8 fd82 	bl	8004160 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800b65c:	bf00      	nop
 800b65e:	3728      	adds	r7, #40	; 0x28
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	40011000 	.word	0x40011000
 800b668:	40023800 	.word	0x40023800
 800b66c:	40020400 	.word	0x40020400
 800b670:	40020000 	.word	0x40020000

0800b674 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800b674:	b580      	push	{r7, lr}
 800b676:	b086      	sub	sp, #24
 800b678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800b67a:	1d3b      	adds	r3, r7, #4
 800b67c:	2200      	movs	r2, #0
 800b67e:	601a      	str	r2, [r3, #0]
 800b680:	605a      	str	r2, [r3, #4]
 800b682:	609a      	str	r2, [r3, #8]
 800b684:	60da      	str	r2, [r3, #12]
 800b686:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800b688:	4b3a      	ldr	r3, [pc, #232]	; (800b774 <HAL_FMC_MspInit+0x100>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d16d      	bne.n	800b76c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800b690:	4b38      	ldr	r3, [pc, #224]	; (800b774 <HAL_FMC_MspInit+0x100>)
 800b692:	2201      	movs	r2, #1
 800b694:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800b696:	4b38      	ldr	r3, [pc, #224]	; (800b778 <HAL_FMC_MspInit+0x104>)
 800b698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b69a:	4a37      	ldr	r2, [pc, #220]	; (800b778 <HAL_FMC_MspInit+0x104>)
 800b69c:	f043 0301 	orr.w	r3, r3, #1
 800b6a0:	6393      	str	r3, [r2, #56]	; 0x38
 800b6a2:	4b35      	ldr	r3, [pc, #212]	; (800b778 <HAL_FMC_MspInit+0x104>)
 800b6a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6a6:	f003 0301 	and.w	r3, r3, #1
 800b6aa:	603b      	str	r3, [r7, #0]
 800b6ac:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800b6ae:	f64f 7383 	movw	r3, #65411	; 0xff83
 800b6b2:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6b4:	2302      	movs	r3, #2
 800b6b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6bc:	2303      	movs	r3, #3
 800b6be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b6c0:	230c      	movs	r3, #12
 800b6c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b6c4:	1d3b      	adds	r3, r7, #4
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	482c      	ldr	r0, [pc, #176]	; (800b77c <HAL_FMC_MspInit+0x108>)
 800b6ca:	f7f8 fd49 	bl	8004160 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800b6ce:	f248 1333 	movw	r3, #33075	; 0x8133
 800b6d2:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6d4:	2302      	movs	r3, #2
 800b6d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6dc:	2303      	movs	r3, #3
 800b6de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b6e0:	230c      	movs	r3, #12
 800b6e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b6e4:	1d3b      	adds	r3, r7, #4
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	4825      	ldr	r0, [pc, #148]	; (800b780 <HAL_FMC_MspInit+0x10c>)
 800b6ea:	f7f8 fd39 	bl	8004160 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800b6ee:	f24c 7303 	movw	r3, #50947	; 0xc703
 800b6f2:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6f4:	2302      	movs	r3, #2
 800b6f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6fc:	2303      	movs	r3, #3
 800b6fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b700:	230c      	movs	r3, #12
 800b702:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b704:	1d3b      	adds	r3, r7, #4
 800b706:	4619      	mov	r1, r3
 800b708:	481e      	ldr	r0, [pc, #120]	; (800b784 <HAL_FMC_MspInit+0x110>)
 800b70a:	f7f8 fd29 	bl	8004160 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800b70e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800b712:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b714:	2302      	movs	r3, #2
 800b716:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b718:	2300      	movs	r3, #0
 800b71a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b71c:	2303      	movs	r3, #3
 800b71e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b720:	230c      	movs	r3, #12
 800b722:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b724:	1d3b      	adds	r3, r7, #4
 800b726:	4619      	mov	r1, r3
 800b728:	4817      	ldr	r0, [pc, #92]	; (800b788 <HAL_FMC_MspInit+0x114>)
 800b72a:	f7f8 fd19 	bl	8004160 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800b72e:	2328      	movs	r3, #40	; 0x28
 800b730:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b732:	2302      	movs	r3, #2
 800b734:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b736:	2300      	movs	r3, #0
 800b738:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b73a:	2303      	movs	r3, #3
 800b73c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b73e:	230c      	movs	r3, #12
 800b740:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800b742:	1d3b      	adds	r3, r7, #4
 800b744:	4619      	mov	r1, r3
 800b746:	4811      	ldr	r0, [pc, #68]	; (800b78c <HAL_FMC_MspInit+0x118>)
 800b748:	f7f8 fd0a 	bl	8004160 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800b74c:	2308      	movs	r3, #8
 800b74e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b750:	2302      	movs	r3, #2
 800b752:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b754:	2300      	movs	r3, #0
 800b756:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b758:	2303      	movs	r3, #3
 800b75a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b75c:	230c      	movs	r3, #12
 800b75e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800b760:	1d3b      	adds	r3, r7, #4
 800b762:	4619      	mov	r1, r3
 800b764:	480a      	ldr	r0, [pc, #40]	; (800b790 <HAL_FMC_MspInit+0x11c>)
 800b766:	f7f8 fcfb 	bl	8004160 <HAL_GPIO_Init>
 800b76a:	e000      	b.n	800b76e <HAL_FMC_MspInit+0xfa>
    return;
 800b76c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800b76e:	3718      	adds	r7, #24
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	200002f8 	.word	0x200002f8
 800b778:	40023800 	.word	0x40023800
 800b77c:	40021000 	.word	0x40021000
 800b780:	40021800 	.word	0x40021800
 800b784:	40020c00 	.word	0x40020c00
 800b788:	40021400 	.word	0x40021400
 800b78c:	40021c00 	.word	0x40021c00
 800b790:	40020800 	.word	0x40020800

0800b794 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800b79c:	f7ff ff6a 	bl	800b674 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800b7a0:	bf00      	nop
 800b7a2:	3708      	adds	r7, #8
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <SysTick_Handler>:
extern DMA2D_HandleTypeDef hdma2d;
extern LTDC_HandleTypeDef hltdc;
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim7;
/* USER CODE BEGIN EV */
void SysTick_Handler(void) {
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	af00      	add	r7, sp, #0
    HAL_IncTick();
 800b7ac:	f7f6 fd96 	bl	80022dc <HAL_IncTick>
}
 800b7b0:	bf00      	nop
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b7b8:	bf00      	nop
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr

0800b7c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b7c2:	b480      	push	{r7}
 800b7c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b7c6:	e7fe      	b.n	800b7c6 <HardFault_Handler+0x4>

0800b7c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b7cc:	e7fe      	b.n	800b7cc <MemManage_Handler+0x4>

0800b7ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b7ce:	b480      	push	{r7}
 800b7d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b7d2:	e7fe      	b.n	800b7d2 <BusFault_Handler+0x4>

0800b7d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b7d8:	e7fe      	b.n	800b7d8 <UsageFault_Handler+0x4>

0800b7da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b7da:	b480      	push	{r7}
 800b7dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b7de:	bf00      	nop
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr

0800b7e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b7ec:	bf00      	nop
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f4:	4770      	bx	lr

0800b7f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b7f6:	b480      	push	{r7}
 800b7f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b7fa:	bf00      	nop
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr

0800b804 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800b808:	4802      	ldr	r0, [pc, #8]	; (800b814 <ADC_IRQHandler+0x10>)
 800b80a:	f7f6 fead 	bl	8002568 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800b80e:	bf00      	nop
 800b810:	bd80      	pop	{r7, pc}
 800b812:	bf00      	nop
 800b814:	20000d4c 	.word	0x20000d4c

0800b818 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800b81c:	4802      	ldr	r0, [pc, #8]	; (800b828 <TIM3_IRQHandler+0x10>)
 800b81e:	f7fc fb2c 	bl	8007e7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800b822:	bf00      	nop
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop
 800b828:	20000864 	.word	0x20000864

0800b82c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800b830:	4802      	ldr	r0, [pc, #8]	; (800b83c <TIM7_IRQHandler+0x10>)
 800b832:	f7fc fb22 	bl	8007e7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800b836:	bf00      	nop
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	20002110 	.word	0x20002110

0800b840 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800b844:	4802      	ldr	r0, [pc, #8]	; (800b850 <DMA2_Stream4_IRQHandler+0x10>)
 800b846:	f7f7 fe87 	bl	8003558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800b84a:	bf00      	nop
 800b84c:	bd80      	pop	{r7, pc}
 800b84e:	bf00      	nop
 800b850:	20000e68 	.word	0x20000e68

0800b854 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800b858:	4802      	ldr	r0, [pc, #8]	; (800b864 <LTDC_IRQHandler+0x10>)
 800b85a:	f7f9 fc41 	bl	80050e0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800b85e:	bf00      	nop
 800b860:	bd80      	pop	{r7, pc}
 800b862:	bf00      	nop
 800b864:	200008a4 	.word	0x200008a4

0800b868 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800b86c:	4802      	ldr	r0, [pc, #8]	; (800b878 <DMA2D_IRQHandler+0x10>)
 800b86e:	f7f8 fa39 	bl	8003ce4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800b872:	bf00      	nop
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	2000209c 	.word	0x2000209c

0800b87c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b87c:	b480      	push	{r7}
 800b87e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b880:	4b15      	ldr	r3, [pc, #84]	; (800b8d8 <SystemInit+0x5c>)
 800b882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b886:	4a14      	ldr	r2, [pc, #80]	; (800b8d8 <SystemInit+0x5c>)
 800b888:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b88c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800b890:	4b12      	ldr	r3, [pc, #72]	; (800b8dc <SystemInit+0x60>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4a11      	ldr	r2, [pc, #68]	; (800b8dc <SystemInit+0x60>)
 800b896:	f043 0301 	orr.w	r3, r3, #1
 800b89a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b89c:	4b0f      	ldr	r3, [pc, #60]	; (800b8dc <SystemInit+0x60>)
 800b89e:	2200      	movs	r2, #0
 800b8a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800b8a2:	4b0e      	ldr	r3, [pc, #56]	; (800b8dc <SystemInit+0x60>)
 800b8a4:	681a      	ldr	r2, [r3, #0]
 800b8a6:	490d      	ldr	r1, [pc, #52]	; (800b8dc <SystemInit+0x60>)
 800b8a8:	4b0d      	ldr	r3, [pc, #52]	; (800b8e0 <SystemInit+0x64>)
 800b8aa:	4013      	ands	r3, r2
 800b8ac:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800b8ae:	4b0b      	ldr	r3, [pc, #44]	; (800b8dc <SystemInit+0x60>)
 800b8b0:	4a0c      	ldr	r2, [pc, #48]	; (800b8e4 <SystemInit+0x68>)
 800b8b2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b8b4:	4b09      	ldr	r3, [pc, #36]	; (800b8dc <SystemInit+0x60>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4a08      	ldr	r2, [pc, #32]	; (800b8dc <SystemInit+0x60>)
 800b8ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b8be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800b8c0:	4b06      	ldr	r3, [pc, #24]	; (800b8dc <SystemInit+0x60>)
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b8c6:	4b04      	ldr	r3, [pc, #16]	; (800b8d8 <SystemInit+0x5c>)
 800b8c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b8cc:	609a      	str	r2, [r3, #8]
#endif
}
 800b8ce:	bf00      	nop
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr
 800b8d8:	e000ed00 	.word	0xe000ed00
 800b8dc:	40023800 	.word	0x40023800
 800b8e0:	fef6ffff 	.word	0xfef6ffff
 800b8e4:	24003010 	.word	0x24003010

0800b8e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b8e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b920 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b8ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b8ee:	e003      	b.n	800b8f8 <LoopCopyDataInit>

0800b8f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b8f0:	4b0c      	ldr	r3, [pc, #48]	; (800b924 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b8f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b8f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b8f6:	3104      	adds	r1, #4

0800b8f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b8f8:	480b      	ldr	r0, [pc, #44]	; (800b928 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b8fa:	4b0c      	ldr	r3, [pc, #48]	; (800b92c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b8fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b8fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b900:	d3f6      	bcc.n	800b8f0 <CopyDataInit>
  ldr  r2, =_sbss
 800b902:	4a0b      	ldr	r2, [pc, #44]	; (800b930 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b904:	e002      	b.n	800b90c <LoopFillZerobss>

0800b906 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b906:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b908:	f842 3b04 	str.w	r3, [r2], #4

0800b90c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b90c:	4b09      	ldr	r3, [pc, #36]	; (800b934 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b90e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b910:	d3f9      	bcc.n	800b906 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800b912:	f7ff ffb3 	bl	800b87c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b916:	f000 f811 	bl	800b93c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b91a:	f7fe fb2f 	bl	8009f7c <main>
  bx  lr    
 800b91e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b920:	2004ffff 	.word	0x2004ffff
  ldr  r3, =_sidata
 800b924:	0800e3ac 	.word	0x0800e3ac
  ldr  r0, =_sdata
 800b928:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b92c:	200000ac 	.word	0x200000ac
  ldr  r2, =_sbss
 800b930:	200000ac 	.word	0x200000ac
  ldr  r3, = _ebss
 800b934:	2000219c 	.word	0x2000219c

0800b938 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b938:	e7fe      	b.n	800b938 <CAN1_RX0_IRQHandler>
	...

0800b93c <__libc_init_array>:
 800b93c:	b570      	push	{r4, r5, r6, lr}
 800b93e:	4e0d      	ldr	r6, [pc, #52]	; (800b974 <__libc_init_array+0x38>)
 800b940:	4c0d      	ldr	r4, [pc, #52]	; (800b978 <__libc_init_array+0x3c>)
 800b942:	1ba4      	subs	r4, r4, r6
 800b944:	10a4      	asrs	r4, r4, #2
 800b946:	2500      	movs	r5, #0
 800b948:	42a5      	cmp	r5, r4
 800b94a:	d109      	bne.n	800b960 <__libc_init_array+0x24>
 800b94c:	4e0b      	ldr	r6, [pc, #44]	; (800b97c <__libc_init_array+0x40>)
 800b94e:	4c0c      	ldr	r4, [pc, #48]	; (800b980 <__libc_init_array+0x44>)
 800b950:	f000 f820 	bl	800b994 <_init>
 800b954:	1ba4      	subs	r4, r4, r6
 800b956:	10a4      	asrs	r4, r4, #2
 800b958:	2500      	movs	r5, #0
 800b95a:	42a5      	cmp	r5, r4
 800b95c:	d105      	bne.n	800b96a <__libc_init_array+0x2e>
 800b95e:	bd70      	pop	{r4, r5, r6, pc}
 800b960:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b964:	4798      	blx	r3
 800b966:	3501      	adds	r5, #1
 800b968:	e7ee      	b.n	800b948 <__libc_init_array+0xc>
 800b96a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b96e:	4798      	blx	r3
 800b970:	3501      	adds	r5, #1
 800b972:	e7f2      	b.n	800b95a <__libc_init_array+0x1e>
 800b974:	0800e3a4 	.word	0x0800e3a4
 800b978:	0800e3a4 	.word	0x0800e3a4
 800b97c:	0800e3a4 	.word	0x0800e3a4
 800b980:	0800e3a8 	.word	0x0800e3a8

0800b984 <memset>:
 800b984:	4402      	add	r2, r0
 800b986:	4603      	mov	r3, r0
 800b988:	4293      	cmp	r3, r2
 800b98a:	d100      	bne.n	800b98e <memset+0xa>
 800b98c:	4770      	bx	lr
 800b98e:	f803 1b01 	strb.w	r1, [r3], #1
 800b992:	e7f9      	b.n	800b988 <memset+0x4>

0800b994 <_init>:
 800b994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b996:	bf00      	nop
 800b998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b99a:	bc08      	pop	{r3}
 800b99c:	469e      	mov	lr, r3
 800b99e:	4770      	bx	lr

0800b9a0 <_fini>:
 800b9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a2:	bf00      	nop
 800b9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9a6:	bc08      	pop	{r3}
 800b9a8:	469e      	mov	lr, r3
 800b9aa:	4770      	bx	lr
